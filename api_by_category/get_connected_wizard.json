[
  {
    "n_arguments": 6,
    "description": "The CreateVPNConnection function creates a VPN connection.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds the return value is S_OK. If the method fails, the return value is one of the standard error codes. ",
    "remarks": "Unlike GetVPNConnected, this function does not attempt to repair an existing connection to a VPN, but creates a new and separate connection entirely. An import library containing the CreateVPNConnection function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "CreateVPNConnection",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwWizardType",
        "description": "Specifies the style of the Get Connected wizard to be launched. This parameter is optional and can be set to 0.  ValueMeaning   0x00   Default style."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwContextFlags",
        "description": "A set of context flags that describes wizard behaviors. This parameter is optional and can be set to 0.  ValueMeaning   0x00   The wizard returns the results  synchronously and blocks until this call is complete.    0x1   The wizard returns the results immediately and asynchronously via a Windows event."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwUserFlags",
        "description": "A set of user-defined application-specific flags. These flags are defined and interpreted by the calling application.  This parameter is optional and should be set to 0 by default."
      },
      {
        "in_out": "_In_",
        "type": "const HANDLE",
        "name": "hUserContext",
        "description": "User context handle for the parent application thread. This parameter is optional and should be set to NULL by default."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pszCommandLine",
        "description": "User command line parameters, if any. This parameter is optional and can be set to NULL. The following command-line options are supported:  ValueMeaning  -HideFinishPage   Hide the Finish page of the Get Connected wizard.   -SkipInternetDetection   Do not display the Get Connected wizard page that shows whether or not the user has a working or active Internet connection.    -SkipExistingConnections   Do not display the Get Connected wizard page that shows a list of existing Internet connections. This command-line option is commonly used when creating additional Internet connections after one has been previously established, and to prevent novice users from creating a completely new connection each time they attempt to access the Internet."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The GetInternetConnected function launches the Get Connected wizard within the calling application to enable Internet connectivity.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds the return value is S_OK. If the method fails, the return value is one of the standard error codes. ",
    "remarks": "This API attempts to create new connections from existing or new media types, or alternatively running diagnostics to correct any problems found on existing connections. Note that while this API might indicate that the user is connected to the Internet, a specified Internet address can remain unreachable. To launch a Get Connected wizard for a  VPN connection, call the GetVPNConnected API. To launch a Get Connected wizard for an local network (LAN) connection, call the GetNetworkConnected API. An import library containing the GetInternetConnected function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "GetInternetConnected",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwWizardType",
        "description": "Specifies the style of the Get Connected wizard to be launched. This parameter is optional and can be set to 0.  ValueMeaning   0x00   Default style."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwContextFlags",
        "description": "A set of context flags that describes wizard behaviors. This parameter is optional and can be set to 0.  ValueMeaning   0x00   The wizard returns the results  synchronously and blocks until this call is complete.    0x1   The wizard returns the results immediately and asynchronously via a Windows event."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwUserFlags",
        "description": "A set of user-defined application-specific flags. These flags are defined and interpreted by the calling application.  This parameter is optional and should be set to 0 by default."
      },
      {
        "in_out": "_In_",
        "type": "const HANDLE",
        "name": "hUserContext",
        "description": "User context handle for the parent application thread. This parameter is optional and should be set to NULL by default."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pszCommandLine",
        "description": "User command line parameters, if any. This parameter is optional and can be set to NULL. The following command-line options are supported:  ValueMeaning  -HideFinishPage   Hide the Finish page of the Get Connected wizard.   -SkipInternetDetection   Do not display the Get Connected wizard page that shows whether or not the user has a working or active Internet connection.   -SkipExistingConnections   Do not display the Get Connected wizard page that shows a list of existing Internet connections. This command-line option is commonly used when creating additional Internet connections after one has been previously established, and to prevent novice users from creating a completely new connection each time they attempt to access the Internet."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The GetNetworkConnected function launches the Get Connected wizard within the calling application to enable local area network connectivity.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds the return value is S_OK. If the method fails, the return value is one of the standard error codes. ",
    "remarks": "This API specifically connects the user to the local network (LAN) by raising  the Get Connected wizard to obtain the information necessary to create that connection. To launch a Get Connected wizard for a  VPN connection, call the GetVPNConnected API. To launch a Get Connected wizard for an Internet connection, call the GetInternetConnected API. An import library containing the GetNetworkConnected function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "GetNetworkConnected",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwWizardType",
        "description": "Specifies the style of the Get Connected wizard to be launched. This parameter is optional and can be set to 0.  ValueMeaning   0x00   Default style."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwContextFlags",
        "description": "A set of context flags that describes wizard behaviors. This parameter is optional and can be set to 0.  ValueMeaning   0x00   The wizard returns the results  synchronously and blocks until this call is complete.    0x1   The wizard returns the results immediately and asynchronously via a Windows event."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwUserFlags",
        "description": "A set of user-defined application-specific flags. These flags are defined and interpreted by the calling application.  This parameter is optional and should be set to 0 by default."
      },
      {
        "in_out": "_In_",
        "type": "const HANDLE",
        "name": "hUserContext",
        "description": "User context handle for the parent application thread. This parameter is optional and should be set to NULL by default."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pszCommandLine",
        "description": "User command line parameters, if any. This parameter is optional and can be set to NULL. The following command-line options are supported:  ValueMeaning  -HideFinishPage   Hide the Finish page of the Get Connected wizard.   -SkipInternetDetection   Do not display the Get Connected wizard page that shows whether or not the user has a working or active Internet connection.    -SkipExistingConnections   Do not display the Get Connected wizard page that shows a list of existing Internet connections. This command-line option is commonly used when creating additional Internet connections after one has been previously established, and to prevent novice users from creating a completely new connection each time they attempt to access the Internet."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The GetVPNConnected function launches the Get Connected wizard within the calling application to enable virtual private network (VPN) connectivity.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds the return value is S_OK. If the method fails, the return value is one of the standard error codes. ",
    "remarks": "This API attempts to connect the current user to a VPN. This process can involve creating a new connection, or repairing an existing one. Note that while this API might indicate that the user is connected to a VPN, resources within that VPN may remain unavailable due to VPN configuration or infrastructure settings. To launch a Get Connected wizard for an Internet connection, call the GetInternetConnected API. To launch a Get Connected wizard for an local network (LAN) connection, call the GetNetworkConnected API. An import library containing the GetVPNConnected function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "GetVPNConnected",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window that called this API. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwWizardType",
        "description": "Specifies the style of the Get Connected wizard to be launched. This parameter is optional and can be set to 0.  ValueMeaning   0x00   Default style."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwContextFlags",
        "description": "A set of context flags that describes wizard behaviors. This parameter is optional and can be set to 0.  ValueMeaning   0x00   The wizard returns the results  synchronously and blocks until this call is complete.    0x1   The wizard returns the results immediately and asynchronously via a Windows event."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwUserFlags",
        "description": "A set of user-defined application-specific flags. These flags are defined and interpreted by the calling application.  This parameter is optional and should be set to 0 by default."
      },
      {
        "in_out": "_In_",
        "type": "const HANDLE",
        "name": "hUserContext",
        "description": "User context handle for the parent application thread. This parameter is optional and should be set to NULL by default."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pszCommandLine",
        "description": "User command line parameters, if any. This parameter is optional and can be set to NULL. The following command-line options are supported:  ValueMeaning  -HideFinishPage   Hide the Finish page of the Get Connected wizard.   -SkipInternetDetection   Do not display the Get Connected wizard page that shows whether or not the user has a working or active Internet connection.    -SkipExistingConnections   Do not display the Get Connected wizard page that shows a list of existing Internet connections. This command-line option is commonly used when creating additional Internet connections after one has been previously established, and to prevent novice users from creating a completely new connection each time they attempt to access the Internet."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The IsInternetConnected function determines whether the current user is connected to the Internet.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, it returns S_OK or S_FALSE. The return value S_OK indicates that the user is connected to the Internet.  The return value S_FALSE indicates that the user is not currently connected to the Internet. If the function fails, the return value is one of the standard error codes. ",
    "remarks": "This API uses NCSI and the Network Location Manager (NLM) to determine a \"best guess\" regarding the Internet connectivity of the current user. Even if S_OK is returned, there is no guarantee that the user will be able to contact a specific Internet address. An import library containing the IsInternetConnected function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "IsInternetConnected",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The RegisterPageWithPage function registers external pages with existing pages in the Get Connected Wizard.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the return value is S_OK. If the page is already registered, the return value is S_FALSE. If the function fails, the return value is one of the standard error codes.  ",
    "remarks": "A page is a user interface form within the Wizard, usually corresponding to a specific step or steps. For example, one page might be the form the describes an IP address and prompts the user to provide IP address data. Child pages are pages that are accessible from a parent page; for example, clicking a \"More Information\" button or link on a page will take you a child page that contains the requested information. An import library containing the RegisterPageWithPage function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "RegisterPageWithPage",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pguidParentPage",
        "description": "Pointer to a GUID that uniquely identifies the parent page within the wizard."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pguidChildPage",
        "description": "Pointer to a GUID that uniquely identifies the child page to register with the parent page."
      },
      {
        "in_out": "_In_opt_",
        "type": "const LPWSTR",
        "name": "pszChildModuleFileName",
        "description": "A Unicode string that contains the installation filename and path of the module for the child page. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "const LPWSTR",
        "name": "pszFriendlyName",
        "description": "Unicode string that contains the display name of the child page to register. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwBehaviorFlags",
        "description": "A set of user-defined behavior flags. This parameter is optional and can be set to 0."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD",
        "name": "dwUserFlags",
        "description": "A set of user-defined registration flags. This parameter is optional and can be set to 0."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pszCommandLine",
        "description": "User command line parameters to use when invoking the child module, if any. This parameter is optional and can be set to NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The UnregisterPage function removes a page from the Get Connected Wizard that was added with the RegisterPageWithPage function.  This function also removes the links between the page and all other pages that linked to it.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the return value is S_OK. If the page is already deregistered, the return value is S_FALSE. If the method fails, the return value is one of the standard error codes.  ",
    "remarks": "An import library containing the UnregisterPage function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "UnregisterPage",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pguidPage",
        "description": "Pointer to a GUID that uniquely identifies the page to be removed from the Get Connected wizard."
      },
      {
        "in_out": "_In_",
        "type": "const BOOL",
        "name": "fUnregisterFromCOM",
        "description": "Specifies if the page module must be deregistered with COM. Set this parameter to TRUE if the page module must be deregistered with COM or FALSE if it has no module to deregister."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The UnregisterPagesLink function removes a registration link between two pages created with the RegisterPageWithPage function.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the return value is S_OK. If the link has been previously removed, the return value is S_FALSE. If the method fails, the return value is one of the standard error codes. ",
    "remarks": "An import library containing the UnregisterPagesLink function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the GetModuleHandle and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "HRESULT",
    "category": "Get Connected Wizard",
    "name": "UnregisterPagesLink",
    "is_callback": 0,
    "dll": "Connect.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pguidParentPage",
        "description": "Pointer to a GUID that uniquely identifies the parent page whose link to a child page will be removed."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pguidChildPage",
        "description": "Pointer to a GUID that uniquely identifies the child page whose link will be removed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  }
]