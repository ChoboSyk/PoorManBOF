[
  {
    "n_arguments": 2,
    "description": "The ADsBuildEnumerator function creates an enumerator object for the specified ADSI container object.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard HRESULT return values, including S_OK for a successful operation. For more information about other return values, see  ADSI Error Codes. ",
    "remarks": "The ADsBuildEnumerator helper function wraps the calls used to retrieve the IEnumVARIANT interface on the enumerator object. To enumerate the available objects in a container If the server supports paged searches and the client has specified a page size that exceeds the maximum search results allowed by the server, the ADsBuildEnumerator function will forward errors and results from the server to the user. The following code example shows how the ADsBuildEnumerator, ADsEnumerateNext, and ADSFreeEnumerator functions can be used to enumerate the contents of a container. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsBuildEnumerator",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IADsContainer*",
        "name": "pADsContainer",
        "description": "Type: IADsContainer* Pointer to the  IADsContainer interface for the object to enumerate."
      },
      {
        "in_out": "_Out_",
        "type": "IEnumVARIANT**",
        "name": "ppEnumVariant",
        "description": "Type: IEnumVARIANT** Pointer to an IEnumVARIANT interface pointer that receives the enumerator object created for the specified container object."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ADsBuildVarArrayInt function builds a variant array of integers from an array of DWORD values.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports standard return values. For more information about other return values, see  ADSI Error Codes. ",
    "remarks": "Use the ADsBuildVarArrayInt function to convert the integer array into a variant array of the integers. The following code example shows how to do this. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsBuildVarArrayInt",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDWORD",
        "name": "lpdwObjectTypes",
        "description": "Type: LPDWORD Array of DWORD values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwObjectTypes",
        "description": "Type: DWORD Number of DWORD entries in the given array."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pVar",
        "description": "Type: VARIANT* Pointer to the resulting variant array of integers."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ADsBuildVarArrayStr function builds a variant array from an array of Unicode strings.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard return values, as well as the following. For more information about other return values, see  ADSI Error Codes. ",
    "remarks": "To support Automation, use the ADsBuildVarArrayStr function to convert Unicode strings to a variant array of strings. The following code example shows how to use the ADsBuildVarArrayStr function to convert object class names from Unicode strings to a variant array of strings. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsBuildVarArrayStr",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR*",
        "name": "lppPathNames",
        "description": "Type: LPWSTR* Array of null-terminated Unicode strings."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPathNames",
        "description": "Type: DWORD Number of Unicode entries in the given array."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pVar",
        "description": "Type: VARIANT* Pointer to the resulting variant array."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ADsEncodeBinaryData function converts a binary large object (BLOB) to the Unicode format suitable to be embedded in a search filter.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard return values, as well as the following. ",
    "remarks": "In ADSI, search filters must be Unicode strings. Sometimes, a filter contains data that is normally represented by an opaque BLOB of data. For example, you may want to include an object security identifier in a search filter, which is of binary data. In this case, you must first call the ADsEncodeBinaryData function to convert the binary data to the Unicode string format. When the data is no longer required, call the  FreeADsMem function to free the converted Unicode string; that is, ppszDestData. The ADsEncodeBinaryData function does not encode byte values that represent alpha-numeric characters. It will, instead, place the character into the string without encoding it. This results in the string containing a mixture of encoded and unencoded characters. For example, if the binary data is 0x05|0x1A|0x1B|0x43|0x32, the encoded string will contain \"\\05\\1A\\1BC2\". This has no effect on the filter and the search filters will work correctly with these types of strings. The following code example shows how to use this function. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsEncodeBinaryData",
    "is_callback": 0,
    "dll": "Activeds.dll;  AdsLdpc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSrcData",
        "description": "Type: PBYTE BLOB to be converted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSrcLen",
        "description": "Type: DWORD Size, in bytes, of the BLOB."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppszDestData",
        "description": "Type: LPWSTR* Pointer to a null-terminated Unicode string that receives the converted data."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 4,
    "description": "The ADsEnumerateNext function enumerates through a specified number of elements from the current cursor position of the enumerator. When the operation succeeds, the function returns the enumerated set of elements in a variant array. The number of returned elements can be smaller than the specified number.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard return values. For more information about other return values, see  ADSI Error Codes. ",
    "remarks": "The general process to enumerate objects in a container involves the following: First, create an enumerator object on that container. Second, retrieve the IEnumVARIANT interface pointer. Third, call the ADsEnumerateNext function to return an enumerated set of elements from the enumerator object. Fourth, call the ADSFreeEnumerator function to free the enumerator object. For more information and a code example, see the  ADsBuildEnumerator topic. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsEnumerateNext",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IEnumVARIANT*",
        "name": "pEnumVariant",
        "description": "Type: IEnumVARIANT* Pointer to the  IEnumVARIANT interface on the enumerator object."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElements",
        "description": "Type: ULONG Number of elements requested."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* Pointer to the array of elements retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElementsFetched",
        "description": "Type: ULONG* Actual number of elements retrieved, which can be smaller than the number of elements requested."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "The ADsFreeEnumerator function frees an enumerator object created with the  ADsBuildEnumerator function.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports standard return values, as well as the following. ",
    "remarks": "The general process for enumerating objects in a container is as follows. First, create an enumerator object on that container. Second, retrieve the IEnumVARIANT interface pointer. Third, call the ADsEnumerateNext function to return an enumerated set of elements from the enumerator object. Fourth, call the ADSFreeEnumerator function to free the enumerator object. For more information and a code example, see ADsBuildEnumerator. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsFreeEnumerator",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IEnumVARIANT*",
        "name": "pEnumVariant",
        "description": "Type: IEnumVARIANT* Pointer to the  IEnumVARIANT interface on the enumerator object to be freed."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 5,
    "description": "The ADsGetLastError function retrieves the calling thread's last-error code value.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports standard return values, as well as the following. ",
    "remarks": "ADSI errors fall into two types according to the values of their facility code. The standard ADSI error codes have a facility code value of 0x5 and the extended ADSI error codes assume that of FACILITY_WIN32. The error values of the standard and extended ADSI error codes are of the forms of 0x80005xxx and 0x8007xxxx, respectively. Use the HRESULT_FACILITY(hr) macro to determine the ADSI error type. The following code example shows how to get Win32 error codes and their descriptions using ADsGetLastError. If hr is 80071392, the code example returns the following. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsGetLastError",
    "is_callback": 0,
    "dll": "Activeds.dll;  AdsLdpc.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpError",
        "description": "Type: LPDWORD Pointer to the location that receives the error code."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "lpErrorBuf",
        "description": "Type: LPWSTR Pointer to the location that receives the null-terminated Unicode string that describes the error."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwErrorBufLen",
        "description": "Type: DWORD Size, in characters, of the lpErrorBuf buffer. If the buffer is too small to receive the error string, the string is truncated, but still null-terminated. A buffer, of at least 256 bytes, is recommended."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "lpNameBuf",
        "description": "Type: LPWSTR Pointer to the location that receives the null-terminated Unicode string that describes the name of the provider that raised the error."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNameBufLen",
        "description": "Type: DWORD Size, in characters, of the lpNameBuf buffer. If the buffer is too small to receive the name of the provider, the string is truncated, but still null-terminated."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ADsGetObject function binds to an object given its path and a specified interface identifier.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard HRESULT return values, as well as the following. For more information about other return values, see  ADSI Error Codes. ",
    "remarks": "A C/C++ client calls the ADsGetObject helper function to bind to an ADSI object. It is equivalent to a Visual Basic client calling the GetObject function. They both take an ADsPath as input and returns a pointer to the requested interface. By default the binding uses ADS_SECURE_AUTHENTICATION option with the security context of the calling thread. However, if the authentication fails, the secure bind is downgraded to an anonymous bind, for example, a simple bind without user credentials. To securely bind to an ADSI object, use the ADsOpenObject function instead of the  ADsGetObject function. For a code example that shows how to use ADsOpenObject, see Binding With GetObject and ADsGetObject. It is possible to bind to an ADSI object with a user credential different from that of the currently logged-on user. To perform this operation, use the   ADsOpenObject function. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsGetObject",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszPathName",
        "description": "Type: LPCWSTR The null-terminated Unicode string that specifies the path  used to bind to the object in the underlying directory service. For more information and code examples for binding strings for this parameter, see  LDAP ADsPath and  WinNT ADsPath."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Interface identifier for a specified interface on this object."
      },
      {
        "in_out": "_Out_",
        "type": "VOID**",
        "name": "ppObject",
        "description": "Type: VOID** Pointer to a pointer to the requested Interface."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 6,
    "description": "The ADsOpenObject function binds to an ADSI object using explicit user name and password credentials.ADsOpenObject is a wrapper function for IADsOpenDSObject and is equivalent to the IADsOpenDSObject::OpenDsObject method.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: HRESULT This method supports the standard HRESULT return values, including the following. For more information, see  ADSI Error Codes. ",
    "remarks": "This function should not be used just to validate user credentials. For more information about validating user credentials, see Microsoft Knowledge Base article 180548 HOWTO: Validate User Credentials on Microsoft Operating Systems. A C/C++ client calls the ADsOpenObject helper function to bind to an ADSI object, using the user name and password supplied as credentials for the appropriate directory service. If lpszUsername and lpszPassword are NULL and ADS_SECURE_AUTHENTICATION is set, ADSI binds to the object using the security context of the calling thread, which is either the security context of the user account under which the application is running or of the client user account that the calling thread impersonates. The  credentials passed to the ADsOpenObject function are used only with the particular object bound to and do not affect the security context of the calling thread. This means that, in the example below, the call to ADsOpenObject will use different credentials than the call to ADsGetObject. To work with the WinNT: provider, you can pass in lpszUsername as one of the following strings: With the LDAP provider for Active Directory, you may pass in lpszUsername as one of the following strings: If Kerberos authentication is required for the successful completion of a specific directory request using the LDAP provider, the lpszPathName binding string must use either a serverless ADsPath, such as \"LDAP://CN=Jeff Smith,CN=admin,DC=Fabrikam,DC=com\", or it must use an ADsPath with a fully qualified DNS server name, such as \"LDAP://central3.corp.Fabrikam.com/CN=Jeff Smith,CN=admin,DC=Fabrikam,DC=com\". Binding to the server using a flat NETBIOS name or a short DNS name, for example, using the short name \"central3\" instead of \"central3.corp.Fabrikam.com\", may or may not yield Kerberos authentication. The following code example shows how to bind to a directory service object with the requested user credentials. ",
    "return_type": "HRESULT",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsOpenObject",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszPathName",
        "description": "Type: LPCWSTR The null-terminated Unicode string that specifies the ADsPath of the ADSI object. For more information and code examples of binding strings for this parameter, see  LDAP ADsPath and  WinNT ADsPath."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszUserName",
        "description": "Type: LPCWSTR The null-terminated Unicode string that specifies the user name to supply to the directory service to use for credentials. This string should always be in the format \"<domain>\\<user name>\" to avoid ambiguity. For example, if DomainA and DomainB have a trust relationship and both domains have a user with the name \"user1\", it is not possible to predict which domain ADsOpenObject will use to validate \"user1\"."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszPassword",
        "description": "Type: LPCWSTR The null-terminated Unicode string that specifies the password to supply to the directory service to use for credentials."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "Type: DWORD Provider-specific authentication flags used to define the binding options. For more information, see  ADS_AUTHENTICATION_ENUM."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Interface identifier for the requested interface on this object."
      },
      {
        "in_out": "_Out_",
        "type": "VOID**",
        "name": "ppObject",
        "description": "Type: VOID** Pointer to a  pointer to the requested interface."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ADsSetLastError sets the last-error code value for the calling thread. Directory service providers can use this function to set extended errors. The function saves the error data in a per-thread data structure. ADsSetLastError operates similar to the SetLastError function.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "This function does not return a value. ",
    "remarks": "In a custom implementation of an ADSI provider, for example, an LDAP provider, you can set an operation error message as follows. The user can use the following code example to examine this operation code. The previous code example produces the following output for the operations error code set above. If you use ERROR_DS_OPERATIONS_ERROR without invoking the HRESULT_FROM_WIN32 macro when setting the error, the following output is returned. ",
    "return_type": "VOID",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ADsSetLastError",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwErr",
        "description": "Type: DWORD The error code that occurred. If this is an error defined by Windows, pszError is ignored. If this is ERROR_EXTENDED_ERROR, it indicates the provider has a network-specific error to report."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pszError",
        "description": "Type: LPWSTR The null-terminated Unicode string that describes the network-specific error."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pszProvider",
        "description": "Type: LPWSTR The null-terminated Unicode string that names the ADSI provider that raised the error."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "The AllocADsMem function allocates a block of memory of the specified size.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: LPVOID When successful, the function returns a non-NULL pointer to the allocated memory. The caller must free this memory when it is no longer required by passing the returned pointer to FreeADsMem. Returns NULL if not successful. Call  ADsGetLastError to obtain extended error status. For more information about error code values, see  ADSI Error Codes. ",
    "remarks": "The memory block returned by AllocADsMem is initialized to zero. For more information and a code example that shows how to use the AllocADsMem function, see ReallocADsMem. ",
    "return_type": "LPVOID",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "AllocADsMem",
    "is_callback": 0,
    "dll": "Activeds.dll;  AdsLdpc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "Type: DWORD Contains the size, in bytes, to be allocated."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "The AllocADsStr function allocates memory for and copies a specified string.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: LPWSTR When successful, the function returns a non-NULL pointer to the allocated memory. The string in pStr is copied to this buffer and null-terminated. The caller must  free this memory when it is no longer required by passing the returned pointer to FreeADsStr. Returns NULL if not successful. Call  ADsGetLastError to obtain the extended error status. For more information about error code values, see  ADSI Error Codes. ",
    "remarks": "For more information and a code example that shows how to use the AllocADsStr function, see ReallocADsStr. ",
    "return_type": "LPWSTR",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "AllocADsStr",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pStr",
        "description": "Type: LPWSTR Pointer to a null-terminated Unicode string to be copied."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "The FreeADsMem function frees the memory allocated by  AllocADsMem or ReallocADsMem.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: BOOL The function returns TRUE if successful, otherwise it returns FALSE. ",
    "remarks": "Do not use this  function to free memory allocated with the AllocADsStr or ReallocADsStr function. Use the  FreeADsStr function to free memory allocated with these functions. For more information and  a code example that shows how to use the FreeADsMem function, see ReallocADsMem. ",
    "return_type": "BOOL",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "FreeADsMem",
    "is_callback": 0,
    "dll": "Activeds.dll;  AdsLdpc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pMem",
        "description": "Type: LPVOID Pointer to the memory to be freed. This memory must have been allocated with the AllocADsMem or ReallocADsMem function."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "The FreeADsStr function frees the memory of a     string allocated by  AllocADsStr or     ReallocADsStr.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: BOOL The function returns TRUE if the memory is freed. Otherwise, it returns        FALSE. ",
    "remarks": "Do not use this function to free memory allocated with the      AllocADsMem or      ReallocADsMem function. Use the      FreeADsMem function  to free memory allocated with these      functions. For more information and a code example that shows how to use the      FreeADsStr function, see      ReallocADsStr. ",
    "return_type": "BOOL",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "FreeADsStr",
    "is_callback": 0,
    "dll": "Activeds.dll;  AdsLdpc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pStr",
        "description": "Type: LPWSTR Pointer to the string to be freed. This string must have been allocated with the        AllocADsStr or        ReallocADsStr function."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "The ReallocADsMem function reallocates and copies an existing memory block.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: LPVOID When successful, the function returns a pointer to the new allocated memory. Otherwise it returns NULL. ",
    "remarks": "If cbNew is less than cbOld, the existing memory is truncated to fit the new memory size. The following code example shows how to use ReallocADsMem to enlarge a string. ",
    "return_type": "LPVOID",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ReallocADsMem",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pOldMem",
        "description": "Type: LPVOID Pointer to the memory to copy. ReallocADsMem will free this memory with FreeADsMem after it has been copied. If additional memory cannot be allocated, this memory is not freed. This memory must have been allocated with the AllocADsMem, AllocADsStr, ReallocADsMem, or ReallocADsStr function. The caller must  free this memory when it is no longer required by passing this pointer to FreeADsMem."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOld",
        "description": "Type: DWORD Size, in bytes, of the memory to copy."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbNew",
        "description": "Type: DWORD Size, in bytes, of the memory to allocate."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "The ReallocADsStr function creates a copy of a Unicode string.",
    "library": "Activeds.lib",
    "min_server": "Windows Server 2008",
    "header": "Adshlp.h",
    "return_value": "Type: BOOL The function returns TRUE if  successful, otherwise FALSE is returned. The following code example shows how to use the ReallocADsStr function. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Active Directory Service Interfaces (ADSI)",
    "name": "ReallocADsStr",
    "is_callback": 0,
    "dll": "Activeds.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppStr",
        "description": "Type: LPWSTR* Pointer to null-terminated Unicode string pointer that receives the allocated string. ReallocADsStr will attempt to free this memory with FreeADsStr before reallocating the string, so this parameter should be initialized to NULL if the memory should not be freed or was not allocated with the AllocADsMem, AllocADsStr, ReallocADsMem or ReallocADsStr function. The caller must free this memory when it is no longer required by passing this pointer to FreeADsStr."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pStr",
        "description": "Type: LPWSTR Pointer to a null-terminated Unicode string that contains the string to copy."
      }
    ],
    "min_client": "Windows Vista"
  }
]