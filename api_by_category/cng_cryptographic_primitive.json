[
  {
    "n_arguments": 1,
    "description": "Deletes the token binding key that is associated with the specified target string.",
    "library": "Tokenbinding.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Tokenbinding.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. ",
    "remarks": "You can call TokenBindingDeleteBinding from user mode. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "TokenBindingDeleteBinding",
    "is_callback": 0,
    "dll": "Tokenbinding.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "targetURL",
        "description": "The target string for which TokenBindingDeleteBinding should delete the associated token binding key."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "Constructs one token binding that contains the exported public key and signature by using the specified key type for the token binding, a target identifier string for creating and retrieving the token binding key, and the unique data. This function also returns the token binding identifier, if needed.",
    "library": "Tokenbinding.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Tokenbinding.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. ",
    "remarks": "You can call TokenBindingGenerateBinding from user mode. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "TokenBindingGenerateBinding",
    "is_callback": 0,
    "dll": "Tokenbinding.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "keyType",
        "description": "The negotiated key type to use. Use a value from the list of key types that you retrieved by calling the TokenBindingGetKeyTypesClient function."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "targetURL",
        "description": "The target string to use in conjunction with the key type  to generate or retrieve a token binding key for the NCrypt operations that build the buffer for the tokenBinding parameter."
      },
      {
        "in_out": "_In_",
        "type": "TOKENBINDING_TYPE",
        "name": "bindingType",
        "description": "The type of token binding that TokenBindingGenerateBinding should generate."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "tlsUnique",
        "description": "A pointer to the buffer that contains unique data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "tlsUniqueSize",
        "description": "The size of the buffer that the tlsUnique parameter points to, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "TOKENBINDING_EXTENSION_FORMAT",
        "name": "extensionFormat",
        "description": "The format to use to interpret the data in the extensionData parameter. This value must be TOKENBINDING_EXTENSION_FORMAT_UNDEFINED."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "extensionData",
        "description": "A pointer to a buffer that contains extension data. The value of the extensionFormat parameter determines how to interpret this data."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "tokenBinding",
        "description": "A pointer that receives the address of the token binding buffer. Use the HeapAlloc function to allocate the memory for this buffer, and the HeapFree function to free that memory."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "tokenBindingSize",
        "description": "Pointer to a variable that receives the size of the buffer allocated for the tokenBinding parameter, in bytes."
      },
      {
        "in_out": "_Out_opt_",
        "type": "TOKENBINDING_RESULT_DATA**",
        "name": "resultData",
        "description": "A pointer that receives the address of the buffer that contains result data that includes the token binding identifier of the token binding that  TokenBindingGenerateBinding generates. Use the HeapAlloc function to allocate the memory for this buffer, and the HeapFree function to free that memory. Specify NULL is you do not need this information."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SslChangeNotify function is not implemented and cannot be used.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "Returns NTE_NOT_SUPPORTED. ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslChangeNotify",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEvent",
        "description": "This parameter is reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The SslComputeClientAuthHash function computes a hash to use during certificate authentication.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslComputeClientAuthHash function computes the hash that is sent in the certificate verification message of the SSL handshake. The hash value is computed by creating a hash that contains the master secret with a hash of all previous handshake messages sent or received. For more information about the SSL handshake sequence, see Description of the Secure Sockets Layer (SSL) Handshake. The manner in which the hash is computed depends on the protocol and cipher suite used. In addition, the hash depends on the type of client authentication key used; the pszAlgId parameter indicates the type of key used for client authentication. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslComputeClientAuthHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hMasterKey",
        "description": "The handle of the master key object."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_HASH_HANDLE",
        "name": "hHandshakeHash",
        "description": "The handle of the hash of the handshake computed so far."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszAlgId",
        "description": "A pointer to a null-terminated Unicode string that identifies the requested cryptographic algorithm. This can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The length, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD value that specifies the length, in bytes, of the hash written to the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The SslComputeEapKeyBlock function computes the key block used by the Extensible Authentication Protocol (EAP).",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslComputeEapKeyBlock",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the  Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hMasterKey",
        "description": "The handle of the master key object."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbRandoms",
        "description": "A pointer to a buffer that contains a concatenation of the client_random and server_random values of the SSL session."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbRandoms",
        "description": "The length, in bytes, of the  pbRandoms buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The length, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD value that specifies the length, in bytes, of the hash written to the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Set to NCRYPT_SSL_SERVER_FLAG to indicate that this is a server call."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslComputeFinishedHash function computes the hash sent in the finished message of the Secure Sockets Layer protocol (SSL) handshake. For more information about the SSL handshake sequence, see Description of the Secure Sockets Layer (SSL) Handshake.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value.  ",
    "remarks": "The SslComputeFinishedHash function is one of three functions used to generate a hash to use during the SSL handshake. The hash value is computed by hashing the master secret with a hash of all previous handshake messages sent or received. The value of cbOutput determines the length of the hash data. When the Transport Layer Security protocol (TLS) 1.0 protocol is used, this should always be 12 (bytes). For more information, see The TLS Protocol Version 1.0. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslComputeFinishedHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the  SSL protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hMasterKey",
        "description": "The handle of the master key object."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_HASH_HANDLE",
        "name": "hHandshakeHash",
        "description": "The handle of the hash of the handshake messages."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "A pointer to a buffer that receives the hash for the finish message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The length, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "One of the following constants.  ValueMeaning  NCRYPT_SSL_CLIENT_FLAG 0x00000001   Specifies that this is a client call.   NCRYPT_SSL_SERVER_FLAG 0x00000002   Specifies that this is a server call."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslCreateClientAuthHash function retrieves a handle to the handshake hash that is used for client authentication.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslCreateClientAuthHash function is  called for Transport Layer Security protocol (TLS) 1.2 or later  conversations to create hash objects that are used to hash handshake messages. It is called once for each possible hashing algorithm that can be used in the client authentication signature. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslCreateClientAuthHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_HASH_HANDLE*",
        "name": "phHandshakeHash",
        "description": "A pointer to an NCRYPT_HASH_HANDLE variable to receive the hash handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszHashAlgId",
        "description": "One of the CNG Algorithm Identifiers values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The SslCreateEphemeralKey function creates an ephemeral key for use during the authentication that occurs during the Secure Sockets Layer protocol (SSL) handshake.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value.  ",
    "remarks": "When using a DHE cipher suite, the internal SSL implementation  passes  server p and g parameters to the SslCreateEphemeralKey function in the pbParams and cbParams parameters. The format  of the data in the  pbParams buffer is the same  as that used when setting the BCRYPT_DH_PARAMETERS property, and it starts with a BCRYPT_DH_PARAMETER_HEADER structure. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslCreateEphemeralKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phEphemeralKey",
        "description": "The handle of the ephemeral key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyType",
        "description": "One of the CNG SSL Provider Key Type Identifier values. Set this parameter to zero for key types that are not elliptic curve cryptography (ECC)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyBitLen",
        "description": "The length, in bits, of the key."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbParams",
        "description": "A pointer to a buffer to contain parameters for the key that is to be created.  If a  Diffie-Hellman (ephemeral) key-exchange algorithm (DHE) cipher suite is not used, set the pbParams parameter to NULL and the cbParams  parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbParams",
        "description": "The length, in bytes, of the data in the pbParams buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SslCreateHandshakeHash function obtains a hash handle that is used to hash handshake messages.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslCreateHandshakeHash function is one of three functions used to generate a hash to use during the SSL handshake. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslCreateHandshakeHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_HASH_HANDLE*",
        "name": "phHandshakeHash",
        "description": "A hash handle that can be passed to other SSL provider functions."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values. Note  This function is not used with the SSL 2.0 protocol."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SslDecrementProviderReferenceCount function decrements the references to the Secure Sockets Layer protocol (SSL) provider.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslDecrementProviderReferenceCount",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "the SslDecryptPacket function decrypts a single Secure Sockets Layer protocol (SSL) packet.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The length of the packet can be zero, such as when a \"HelloRequest\" message is  decrypted. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslDecryptPacket",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      },
      {
        "in_out": "_Inout_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle to the key that is used to decrypt the packet."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE*",
        "name": "pbInput",
        "description": "A pointer to the buffer that contains the packet to be decrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The length, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "A pointer to a buffer to contain the decrypted packet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The length, bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "The number of bytes written to the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "SequenceNumber",
        "description": "The sequence number that corresponds to this packet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "The SslEncryptPacket function encrypts a single Secure Sockets Layer protocol (SSL) packet.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslEncryptPacket",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      },
      {
        "in_out": "_Inout_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle to the key that is used to encrypt the packet."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE*",
        "name": "pbInput",
        "description": "A pointer to the buffer that contains the packet to be encrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The length, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "A pointer to a buffer to receive the encrypted packet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The length, bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "The number of bytes written to the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "SequenceNumber",
        "description": "The sequence number that corresponds to this packet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwContentType",
        "description": "The content type that corresponds to this packet, which specifies the higher level protocol used to process the enclosed packet.  ValueMeaning  CT_CHANGE_CIPHER_SPEC 20   Indicates a change  in the ciphering strategy.   CT_ALERT 21   Indicates that the enclosed packet contains an alert.   CT_HANDSHAKE 22   Indicates that the enclosed packet is part of the handshake protocol.   CT_APPLICATIONDATA 23   Indicates that the packet contains application data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SslEnumCipherSuites function enumerates the cipher suites supported by a Secure Sockets Layer protocol (SSL) protocol provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "To enumerate all cipher suites supported by the SSL provider, call the SslEnumCipherSuites function in a loop until NTE_NO_MORE_ITEMS is returned. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslEnumCipherSuites",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPrivateKey",
        "description": "The handle of a private key. When a private key is specified, SslEnumCipherSuites enumerates the cipher suites that are compatible with the private key. For example, if the private key is a DSS key, then only the DSS_DHE cipher suites are returned. If the private key is an RSA key, but it does not support raw decryption operations, then the SSL2 cipher suites are not returned. Set this parameter to NULL when you are not specifying a private key. Note  A hPrivateKey handle is obtained by calling the SslOpenPrivateKey function. Handles obtained from the NCryptOpenKey function are not supported."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_SSL_CIPHER_SUITE**",
        "name": "ppCipherSuite",
        "description": "A pointer to a NCRYPT_SSL_CIPHER_SUITE structure to receive the address of the next cipher suite in the list."
      },
      {
        "in_out": "_Inout_",
        "type": "PVOID*",
        "name": "ppEnumState",
        "description": "A pointer to a  buffer that indicates the current position in the list of cipher suites. Set the pointer to NULL on the  first call to SslEnumCipherSuites. On each subsequent call, pass the unmodified value back to SslEnumCipherSuites. When there are no more cipher suites available, you should free ppEnumState by calling the  SslFreeBuffer function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SslEnumProtocolProviders function returns an array of installed Secure Sockets Layer protocol (SSL) protocol providers.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "When you have finished using the array of NCryptProviderName structures, call the SslFreeBuffer function to free the array. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslEnumProtocolProviders",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwProviderCount",
        "description": "A pointer to a DWORD value to receive the number of protocol providers returned."
      },
      {
        "in_out": "_Out_",
        "type": "NCryptProviderName**",
        "name": "ppProviderList",
        "description": "A pointer to a buffer that receives the array of NCryptProviderName structures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SslExportKey function returns an Secure Sockets Layer protocol (SSL) session key or public ephemeral key into a serialized BLOB.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslExportKey function facilitates transporting session keys from one process to another as well  as exporting the public portion an ephemeral key. When exporting session keys, the  BLOB type is opaque, meaning that the format of the BLOB is irrelevant as long as both the SslExportKey and SslImportKey functions can interpret it. When exporting the public portion of an ephemeral key the BLOB type must be the appropriate type, such as NCRYPT_DH_PUBLIC_BLOB or NCRYPT_ECCPUBLIC_BLOB. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslExportKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the SSL protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to export. When you are not specifying a  key, set this parameter to NULL. Note  A hKey handle is obtained by calling the SslOpenPrivateKey function. Handles obtained from the NCryptOpenKey function are not supported."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the following values.  ValueMeaning  BCRYPT_DH_PUBLIC_BLOB   Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_ECCPUBLIC_BLOB   Export an elliptic curve cryptography (ECC) public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.   BCRYPT_OPAQUE_KEY_BLOB   Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not transferable and must be imported by using the same cryptographic service provider (CSP) that generated the BLOB.   BCRYPT_RSAPUBLIC_BLOB   Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "The address of a DWORD variable that receives the number of bytes copied to the pbOutput buffer. If the pbOutput parameter is set to NULL when the function is called, the required size for the pbOutput buffer, in bytes, is returned in the DWORD pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SslFreeBuffer function is used to free memory that was allocated by one of the Secure Sockets Layer protocol (SSL) provider functions.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslFreeBuffer",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvInput",
        "description": "A pointer to the memory buffer to be freed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SslFreeObject function frees a key, hash, or provider object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslFreeObject",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_HANDLE",
        "name": "hObject",
        "description": "The handle of the object to free."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The SslGenerateMasterKey function computes the Secure Sockets Layer protocol (SSL) master secret key.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslGenerateMasterKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the SSL protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPrivateKey",
        "description": "The handle to the private key used in the exchange."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPublicKey",
        "description": "The handle to the public key used in the exchange."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phMasterKey",
        "description": "A pointer to the handle to the generated master key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "PNCryptBufferDesc",
        "name": "pParameterList",
        "description": "A pointer to an array of NCryptBuffer buffers that contain information used as part of the key exchange operation. The precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers that contain the client and server  supplied random values."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the premaster secret encrypted with the public key of the server. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function returns the required size, in bytes, in the DWORD pointed to by the pcbResult parameter. Note  This buffer is used when performing a RSA key exchange."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD value in which to place number of bytes written to the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies whether this function is being used for client-side or server-side key exchange.  ValueMeaning  NCRYPT_SSL_CLIENT_FLAG 0x00000001   Specifies a client-side key exchange.   NCRYPT_SSL_SERVER_FLAG 0x00000002   Specifies a server-side key exchange."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslGenerateSessionKeys function generates a set of Secure Sockets Layer protocol (SSL) session keys.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslGenerateSessionKeys",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the SSL protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hMasterKey",
        "description": "The handle to the master key object."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phReadKey",
        "description": "A pointer to the returned read key handle."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phWriteKey",
        "description": "A pointer to the returned write key handle."
      },
      {
        "in_out": "_In_",
        "type": "PNCryptBufferDesc",
        "name": "pParameterList",
        "description": "A pointer to an array of NCryptBuffer buffers that contain information used as part of the key exchange operation. The precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers that contain the client and server  supplied random values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The     SslGetCipherSuitePRFHashAlgorithm function returns the Cryptography API: Next Generation (CNG) Algorithm Identifier of the hashing algorithm that is used for the Transport Layer Security protocol (TLS) pseudo-random function (PRF) for the input protocol, cipher suite, and key type.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This SslGetCipherSuitePRFHashAlgorithm function is called for TLS 1.2 or later conversations to query the hashing algorithm that will be used in the TLS PRF. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslGetCipherSuitePRFHashAlgorithm",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyType",
        "description": "One of the CNG SSL Provider Key Type Identifier values. For key types that are not elliptic curve cryptography (ECC), set this parameter to zero."
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR",
        "name": "szPRFHash[NCRYPT_SSL_MAX_NAME_SIZE]",
        "description": "One of the CNG Algorithm Identifiers for the hash that will be used for the TLS PRF."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SslGetKeyProperty function retrieves the value of a named property for a Secure Sockets Layer protocol (SSL) provider key object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslGetKeyProperty",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the SSL provider."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the predefined Key Storage Property Identifiers or a custom property identifier."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "ppbOutput",
        "description": "A pointer to a buffer that receives the property value. The caller of the function must free this buffer by calling the SslFreeBuffer function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslGetProviderProperty function retrieves the value of a specified provider property.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslGetProviderProperty",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) provider for which to retrieve the property."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "ppbOutput",
        "description": "The address of a buffer that receives the property value. The caller of the function must free this buffer by calling the SslFreeBuffer function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "PVOID*",
        "name": "ppEnumState",
        "description": "The address of a VOID pointer that receives enumeration state information that is used in subsequent calls to this function. This information only has meaning to the SSL  provider and is opaque to the caller. The SSL provider uses this information to determine which item is next in the enumeration. If the variable pointed to by this parameter contains NULL, the enumeration is started from the beginning. The caller of the function must free this memory by calling the SslFreeBuffer function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SslHashHandshake function returns a handle to the handshake hash.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. ",
    "remarks": "The SslHashHandshake function is one of three functions used to generate a hash to use during the SSL handshake. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslHashHandshake",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_Inout_",
        "type": "NCRYPT_HASH_HANDLE",
        "name": "hHandshakeHash",
        "description": "The handle to the hash object."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbInput",
        "description": "The address of a buffer that contains the data to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The size, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslImportKey function imports a key into the Secure Sockets Layer protocol (SSL) protocol provider.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "You can use the SslImportKey function to import session keys as a part of the process of transferring session keys from one process to another. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslImportKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the SSL protocol provider instance."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to the handle of the cryptographic key to receive the imported key."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput buffer. This can be one of the following values.  ValueMeaning  BCRYPT_DH_PUBLIC_BLOB   Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_ECCPUBLIC_BLOB   Export an elliptic curve cryptography (ECC) public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.   BCRYPT_OPAQUE_KEY_BLOB   Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not transferable and must be imported by using the same CSP that generated the BLOB.   BCRYPT_RSAPUBLIC_BLOB   Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbKeyBlob",
        "description": "A pointer to the buffer that contains the key BLOB."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbKeyBlob",
        "description": "The size, in bytes, of the pbKeyBlob buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The SslImportMasterKey function performs a server-side Secure Sockets Layer protocol (SSL) key exchange operation.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function decrypts the premaster secret, computes the SSL master secret, and returns a handle to this object to the caller. This master key can then be used to derive the SSL session key and finish the SSL handshake. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslImportMasterKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the SSL protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPrivateKey",
        "description": "The handle to the private key used in the exchange."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phMasterKey",
        "description": "A pointer to the handle to receive  the master key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifiers values."
      },
      {
        "in_out": "_In_",
        "type": "PNCryptBufferDesc",
        "name": "pParameterList",
        "description": "A pointer to an array of NCryptBuffer buffers that contain information used as part of the key exchange operation. The precise set of buffers is dependent on the protocol and cipher suite that is used. At the minimum, the list will contain buffers that contain the client and server  supplied random values."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbEncryptedKey",
        "description": "A pointer to a buffer that contains the  encrypted premaster secret key encrypted with the public key of the server."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncryptedKey",
        "description": "The size, in bytes, of the pbEncryptedKey buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Set this parameter to NCRYPT_SSL_SERVER_FLAG to indicate that this is a server call."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SslIncrementProviderReferenceCount function increments the reference count to a Secure Sockets Layer protocol (SSL) provider instance.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslIncrementProviderReferenceCount",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the SSL protocol provider instance."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SslLookupCipherLengths function returns an NCRYPT_SSL_CIPHER_LENGTHS structure that contains the header and trailer lengths of the input protocol, cipher suite, and key type.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslLookupCipherLengths function is  called for Transport Layer Security protocol (TLS) 1.1 or later  conversations to query the header and trailer lengths for the requested protocol, cipher suite, and key type. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslLookupCipherLengths",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle of the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyType",
        "description": "One of the CNG SSL Provider Key Type Identifier values. For key types that are not elliptic curve cryptography (ECC), set this parameter to zero."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_SSL_CIPHER_LENGTHS*",
        "name": "pCipherLengths",
        "description": "A pointer to a buffer to receive the NCRYPT_SSL_CIPHER_LENGTHS structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCipherLengths",
        "description": "The length, in bytes, of the buffer pointed to by the pCipherLengths parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SslLookupCipherSuiteInfo function retrieves the cipher suite information for a specified protocol, cipher suite,    and key type set.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslLookupCipherSuiteInfo",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProtocol",
        "description": "One of the CNG SSL Provider Protocol Identifier values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCipherSuite",
        "description": "One of the CNG SSL Provider Cipher Suite Identifiers values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyType",
        "description": "One of the CNG SSL Provider Key Type Identifiers values."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_SSL_CIPHER_SUITE*",
        "name": "pCipherSuite",
        "description": "The address of a buffer that contains a  NCRYPT_SSL_CIPHER_SUITE structure in which to write the cipher suite information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SslOpenPrivateKey function opens a handle to a private key.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The private key obtained is part of a public/private key pair within a certificate. This function merely extracts the private key from the certificate specified by the pCertContext parameter. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslOpenPrivateKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phPrivateKey",
        "description": "The address of a buffer in which to write the handle to the private key. When you have finished using the key, you should free phPrivateKey by calling the  SslFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "The address of the certificate from which to obtain the private key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SslOpenProvider function opens a handle to the specified Secure Sockets Layer protocol (SSL) protocol provider.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslOpenProvider",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "NCRYPT_PROV_HANDLE*",
        "name": "phSslProvider",
        "description": "The address of an NCRYPT_PROV_HANDLE in which to write the provider handle. When you have finished using the handle, you should free it by calling the SslFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProviderName",
        "description": "A pointer to a Unicode string that contains the provider name. If the value of this parameter is NULL, a handle to the MS_SCHANNEL_PROVIDER is returned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use, and it must be set to zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The SslSignHash function signs a hash by using the specified private key. The signing process is performed on the server.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslSignHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPrivateKey",
        "description": "The handle to the private key to use to sign the hash."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbHashValue",
        "description": "A pointer to a buffer that contains the hash to sign."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHashValue",
        "description": "The size, in bytes, of the pbHashValue buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbSignature",
        "description": "The address of a buffer that receives the signature of the hash. The cbSignature parameter contains the size of this buffer. To determine the required sized size of the buffer, set the pbSignature parameter to NULL. The required size of the buffer will be returned in the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a value that, upon completion, contains the actual number of bytes written to the pbSignature buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SslVerifySignature function verifies the specified signature by using the supplied hash and the public key.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Sslprovider.h",
    "return_value": "If the function succeeds, it returns zero. If the function fails, it returns a nonzero error value. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The SslVerifySignature function is not currently called by Windows.   This function is a required part of the SSL Provider interface and should be fully implemented to ensure forward compatibility. Current implementations of  the server side of the Transport Layer Security protocol (TLS) connection call the NCryptVerifySignature function during the client authentication to process the certificate verify message. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "SslVerifySignature",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hSslProvider",
        "description": "The handle to the Secure Sockets Layer protocol (SSL) protocol provider instance."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPublicKey",
        "description": "The handle to the public key."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbHashValue",
        "description": "A pointer to a buffer that contains the hash to use  to verify the signature."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHashValue",
        "description": "The size, in bytes, of the pbHashValue buffer."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignature",
        "description": "A pointer to a buffer that contains the signature to verify."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The NCryptCreatePersistedKey function creates a new key and stores it in the specified key storage provider. After you create a key by using this function, you can use the NCryptSetProperty function to set its properties; however, the key cannot be used until the NCryptFinalizeKey function is called.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "If you are creating an RSA key pair, you can also have the key stored in legacy storage so that it can be used with the CryptoAPI by passing the NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG flag to the NCryptFinalizeKey function when the key is finalized. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptCreatePersistedKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider to create the key in. This handle is obtained by using the NCryptOpenStorageProvider function."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "The address of an NCRYPT_KEY_HANDLE variable that receives the handle of the key. When you have finished using this handle, release it by passing it to the NCryptFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszAlgId",
        "description": "A pointer to a null-terminated Unicode string that contains the identifier of the cryptographic algorithm to create the key. This can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pszKeyName",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the key. If this parameter is NULL, this function will create an ephemeral key that is not persisted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLegacyKeySpec",
        "description": "A legacy identifier that specifies the type of key. This can be one of the following values.  ValueMeaning  AT_KEYEXCHANGE   The key is a key exchange key.   AT_SIGNATURE   The key is a signature key.    0   The key is none of the above types."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.  ValueMeaning  NCRYPT_MACHINE_KEY_FLAG   The key applies to the local computer. If this flag is not present, the key applies to the current user.   NCRYPT_OVERWRITE_KEY_FLAG   If a key already exists in the container with the specified name, the existing key will be overwritten. If this flag is not specified and a key with the specified name already exists, this function will return NTE_EXISTS."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptDecrypt function decrypts a block of encrypted data.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the decryption in place. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptDecrypt",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to decrypt the data."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbInput",
        "description": "The address of a buffer that contains the data to be decrypted. The cbInput parameter contains the size of the data to decrypt. For more information, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer to decrypt."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that will receive the decrypted data produced by this function. The cbOutput parameter contains the size of this buffer. For more information, see Remarks. If this parameter is NULL, this function will calculate the size needed for the decrypted data and return the size in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is NULL, this receives the size, in bytes, required for the decrypted data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.  If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  NCRYPT_NO_PADDING_FLAG   No padding was used when the data was encrypted. The pPaddingInfo parameter is not used.   NCRYPT_PAD_OAEP_FLAG   The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a pointer to a BCRYPT_OAEP_PADDING_INFO structure.   NCRYPT_PAD_PKCS1_FLAG   The data was padded with a random number to round out the block size when the data was encrypted. The pPaddingInfo parameter is not used.     The following value can be used for any key.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The NCryptDeleteKey function deletes a CNG key.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptDeleteKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to delete. This handle is obtained by using the NCryptOpenKey function. Note  The NCryptDeleteKey function frees the handle. Applications must not use the handle or attempt to call the NCryptFreeObject function on it after calling the NCryptDeleteKey function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of values that is specific to each key storage provider.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The NCryptDeriveKey function derives a key from a secret agreement value. This function is intended to be used as part of a secret agreement procedure using persisted secret agreement keys. To derive key material by using a  persisted secret instead, use the NCryptKeyDerivation function.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the KDF_SECRET_PREPEND and KDF_SECRET_APPEND parameters. If more than one of these parameters is specified, the parameter values are concatenated in the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values are specified. If the above parameter values are specified, the concatenated values to the actual KDF are as follows. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptDeriveKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_SECRET_HANDLE",
        "name": "hSharedSecret",
        "description": "The secret agreement handle to create the key from. This handle is obtained from the NCryptSecretAgreement function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszKDF",
        "description": "A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This can be one of the following strings.  BCRYPT_KDF_HASH (L\"HASH\")   Use the hash key derivation function.  If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_HASH_ALGORITHM  A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not specified, the SHA1 hash algorithm is used.  Optional   KDF_SECRET_PREPEND  A value to add to the beginning of the message input to the hash function. For more information, see Remarks.  Optional   KDF_SECRET_APPEND  A value to add to the end of the message input to the hash function. For more information, see Remarks.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Prepend = KDF_SECRET_PREPEND[0] +      KDF_SECRET_PREPEND[1] +      ... +     KDF_SECRET_PREPEND[n]  KDF-Append = KDF_SECRET_APPEND[0] +      KDF_SECRET_APPEND[1] +      ... +      KDF_SECRET_APPEND[n]  KDF-Output = Hash(     KDF-Prepend +      hSharedSecret +      KDF-Append)      BCRYPT_KDF_HMAC (L\"HMAC\")   Use the Hash-Based Message Authentication Code (HMAC) key derivation function.  If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_HASH_ALGORITHM  A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not specified, the SHA1 hash algorithm is used.  Optional   KDF_HMAC_KEY  The key to use for the pseudo-random function (PRF).  Optional   KDF_SECRET_PREPEND  A value to add to the beginning of the message input to the hash function. For more information, see Remarks.  Optional   KDF_SECRET_APPEND  A value to add to the end of the message input to the hash function. For more information, see Remarks.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Prepend = KDF_SECRET_PREPEND[0] +      KDF_SECRET_PREPEND[1] +      ... +     KDF_SECRET_PREPEND[n]  KDF-Append = KDF_SECRET_APPEND[0] +      KDF_SECRET_APPEND[1] +      ... +      KDF_SECRET_APPEND[n]  KDF-Output = HMAC-Hash(     KDF_HMAC_KEY,     KDF-Prepend +      hSharedSecret +      KDF-Append)      BCRYPT_KDF_TLS_PRF (L\"TLS_PRF\")   Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is always 48 bytes, so the cbDerivedKey parameter must be 48. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_TLS_PRF_LABEL  An ANSI string that contains the PRF label.  Required   KDF_TLS_PRF_SEED  The PRF seed. The seed must be 64 bytes long.  Required     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Output = PRF(     hSharedSecret,      KDF_TLS_PRF_LABEL,      KDF_TLS_PRF_SEED)      BCRYPT_KDF_SP80056A_CONCAT (L\"SP800_56A_CONCAT\")   Use the SP800-56A key derivation function. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column. All parameter values are treated as opaque byte arrays.   ParameterDescriptionRequired or optional  KDF_ALGORITHMID  Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended purpose of the derived key.  Required   KDF_PARTYUINFO  Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information contributed by the initiator.  Required   KDF_PARTYVINFO  Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information contributed by the responder.  Required   KDF_SUPPPUBINFO  Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information known to both initiator and responder.  Optional   KDF_SUPPPRIVINFO  Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function.  It contains private information known to both initiator and responder, such as a shared secret.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Output = SP_800-56A_KDF( \t   hSharedSecret, \t   KDF_ALGORITHMID, \t   KDF_PARTYUINFO, \t   KDF_PARTYVINFO, \t   KDF_SUPPPUBINFO, \t   KDF_SUPPPRIVINFO)     Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCryptBufferDesc*",
        "name": "pParameterList",
        "description": "The address of a NCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be NULL if it is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PBYTE",
        "name": "pbDerivedKey",
        "description": "The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbDerivedKey",
        "description": "The size, in bytes, of the pbDerivedKey buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or the following value.  ValueMeaning  KDF_USE_SECRET_AS_HMAC_KEY_FLAG   The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptEncrypt function encrypts a block of data.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large enough to hold the encrypted data. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptEncrypt",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to encrypt the data."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbInput",
        "description": "The address of a buffer that contains the data to be encrypted. The cbInput parameter contains the size of the data to encrypt. For more information, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer to encrypt."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that will receive the encrypted data produced by this function. The cbOutput parameter contains the size of this buffer. For more information, see Remarks. If this parameter is NULL, this function will calculate the size needed for the encrypted data and return the size in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is NULL, this receives the size, in bytes, required for the ciphertext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter.  If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  NCRYPT_NO_PADDING_FLAG   Do not use any padding. The pPaddingInfo parameter is not used.  If you specify the NCRYPT_NO_PADDING_FLAG, then the NCryptEncrypt function only encrypts the first N bits, where N is the length of the key that was passed as the hKey parameter. Any bits after the first N bits are ignored.   NCRYPT_PAD_OAEP_FLAG   Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_OAEP_PADDING_INFO structure.   NCRYPT_PAD_PKCS1_FLAG   The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The NCryptEnumAlgorithms function obtains the names of the algorithms that are supported by the specified key storage provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptEnumAlgorithms",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider to enumerate the algorithms for. This handle is obtained with the NCryptOpenStorageProvider function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAlgOperations",
        "description": "A set of values that determine which algorithm classes to enumerate. This can be zero or a combination of one or more of the following values. If dwAlgOperations is zero, all algorithms are enumerated.  ValueMeaning  NCRYPT_CIPHER_OPERATION 0x00000001   Enumerate the cipher (symmetric encryption) algorithms.   NCRYPT_HASH_OPERATION 0x00000002   Enumerate the hashing algorithms.   NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 0x00000004   Enumerate the asymmetric encryption algorithms.   NCRYPT_SECRET_AGREEMENT_OPERATION 0x00000008   Enumerate the secret agreement algorithms.   NCRYPT_SIGNATURE_OPERATION 0x00000010   Enumerate the digital signature algorithms."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwAlgCount",
        "description": "The address of a DWORD that receives the number of elements in the ppAlgList array."
      },
      {
        "in_out": "_Out_",
        "type": "NCryptAlgorithmName**",
        "name": "ppAlgList",
        "description": "The address of an NCryptAlgorithmName structure pointer that receives an array of the registered algorithm names. The variable pointed to by the pdwAlgCount parameter receives the number of elements in this array. When this memory is no longer needed, it must be freed by passing this pointer to the NCryptFreeBuffer function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero (0) or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The NCryptEnumKeys function obtains the names of the keys that are stored by the provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function retrieves only one item each time it is called. The state of the enumeration is stored in the variable pointed to by the ppEnumState parameter, so this must be preserved between calls to this function. When the last key stored by the provider has been retrieved, this function will return NTE_NO_MORE_ITEMS the next time it is called. To start the enumeration over, set the variable pointed to by the ppEnumState parameter to NULL, free the memory pointed to by the ppKeyName parameter, if it is not NULL, and call this function again. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptEnumKeys",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider to enumerate the keys for. This handle is obtained with the NCryptOpenStorageProvider function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pszScope",
        "description": "This parameter is not currently used and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "NCryptKeyName**",
        "name": "ppKeyName",
        "description": "The address of a pointer to an NCryptKeyName structure that receives the name of the retrieved key. When the application has finished using this memory, free it by calling the NCryptFreeBuffer function."
      },
      {
        "in_out": "_Inout_",
        "type": "PVOID*",
        "name": "ppEnumState",
        "description": "The address of a VOID pointer that receives enumeration state information that is used in subsequent calls to this function. This information only has meaning to the key storage provider and is opaque to the caller. The key storage provider uses this information to determine which item is next in the enumeration. If the variable pointed to by this parameter contains NULL, the enumeration is started from the beginning. When this memory is no longer needed, it must be freed by passing this pointer to the NCryptFreeBuffer function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  ValueMeaning  NCRYPT_MACHINE_KEY_FLAG   Enumerate the keys for the local computer. If this flag is not present, the current user keys are enumerated.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptEnumStorageProviders function obtains the names of the registered key storage providers.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptEnumStorageProviders",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwProviderCount",
        "description": "The address of a DWORD to receive the number of elements in the ppProviderList array."
      },
      {
        "in_out": "_Out_",
        "type": "NCryptProviderName**",
        "name": "ppProviderList",
        "description": "The address of an NCryptProviderName structure pointer to receive an array of the registered key storage provider names. The variable pointed to by the pdwProviderCount parameter receives the number of elements in this array. When this memory is no longer needed, free it by passing this pointer to the NCryptFreeBuffer function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero (0) or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptExportKey function exports a CNG key to a memory BLOB.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptExportKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "A handle of the key to export."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hExportKey",
        "description": "A handle to a cryptographic key of the destination user. The key data within the exported key BLOB is encrypted by using this key. This ensures that only the destination user is able to make use of the key BLOB."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the following values.  BCRYPT_DH_PRIVATE_BLOB   Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.  BCRYPT_DH_PUBLIC_BLOB   Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.  BCRYPT_DSA_PRIVATE_BLOB   Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the key data.  BCRYPT_DSA_PUBLIC_BLOB   Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB structure immediately followed by the key data.  BCRYPT_ECCPRIVATE_BLOB   Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.  BCRYPT_ECCPUBLIC_BLOB   Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.  BCRYPT_PUBLIC_KEY_BLOB   Export a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.  BCRYPT_PRIVATE_KEY_BLOB   Export a generic private key of any type.  The private key does not necessarily contain the public key. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.  BCRYPT_RSAFULLPRIVATE_BLOB   Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data. This BLOB will include additional key material compared to the BCRYPT_RSAPRIVATE_BLOB type.  BCRYPT_RSAPRIVATE_BLOB   Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.  BCRYPT_RSAPUBLIC_BLOB   Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.  LEGACY_DH_PRIVATE_BLOB   Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be imported by using CryptoAPI.  LEGACY_DH_PUBLIC_BLOB   Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.  LEGACY_DSA_PRIVATE_BLOB   Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.  LEGACY_DSA_PUBLIC_BLOB   Export a DSA public key in a form that can be imported by using CryptoAPI.  LEGACY_RSAPRIVATE_BLOB   Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.  LEGACY_RSAPUBLIC_BLOB   Export an RSA public key in a form that can be imported by using CryptoAPI.  NCRYPT_CIPHER_KEY_BLOB   Export a cipher key in a NCRYPT_KEY_BLOB_HEADER structure. Windows 8 and Windows Server 2012:  Support for this value begins.  NCRYPT_OPAQUETRANSPORT_BLOB   Export a key in a format that is specific to a single CSP and is suitable for transport. Opaque BLOBs are not transferable and must be imported by using the same CSP that generated the BLOB.  NCRYPT_PKCS7_ENVELOPE_BLOB   Export a PKCS #7 envelope BLOB. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterRequired or optional   NCRYPTBUFFER_CERT_BLOB   Required    NCRYPTBUFFER_PKCS_ALG_OID   Required    NCRYPTBUFFER_PKCS_ALG_PARAM   Optional      NCRYPT_PKCS8_PRIVATE_KEY_BLOB   Export a PKCS #8 private key BLOB. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterRequired or optional   NCRYPTBUFFER_PKCS_ALG_OID   Optional    NCRYPTBUFFER_PKCS_ALG_PARAM   Optional    NCRYPTBUFFER_PKCS_SECRET   Optional      NCRYPT_PROTECTED_KEY_BLOB   Export a protected key in a NCRYPT_KEY_BLOB_HEADER structure. Windows 8 and Windows Server 2012:  Support for this value begins."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCryptBufferDesc*",
        "name": "pParameterList",
        "description": "The address of an NCryptBufferDesc structure that receives parameter information for the key. This parameter can be NULL if this information is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "The address of a DWORD variable that receives the number of bytes copied to the pbOutput buffer. If the pbOutput parameter is NULL, this function will place the required size, in bytes, in the DWORD pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  The set of valid flags is specific to each key storage provider. The following flag applies to all providers.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The NCryptFinalizeKey function completes a CNG key storage key. The key cannot be used until this function has been called.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptFinalizeKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to complete. This handle is obtained by calling the NCryptCreatePersistedKey function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  ValueMeaning  NCRYPT_NO_KEY_VALIDATION   Do not validate the public portion of the key pair. This flag only applies to public/private key pairs.   NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG   Also save the key in legacy storage. This allows the key to be used with CryptoAPI. This flag only applies to RSA keys.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The NCryptFreeBuffer function releases a block of memory allocated by a CNG key storage provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptFreeBuffer",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvInput",
        "description": "The address of the memory to be released."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The NCryptFreeObject function frees a CNG key storage object.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptFreeObject",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_HANDLE",
        "name": "hObject",
        "description": "The handle of the object to free. This can be either a provider handle (NCRYPT_PROV_HANDLE) or a key handle (NCRYPT_KEY_HANDLE)."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The NCryptGetProperty function retrieves the value of a named property for a key storage object.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptGetProperty",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_HANDLE",
        "name": "hObject",
        "description": "The handle of the object to get the property for. This can be a provider handle (NCRYPT_PROV_HANDLE) or a key handle (NCRYPT_KEY_HANDLE)."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the predefined Key Storage Property Identifiers or a custom property identifier."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the property value. The cbOutput parameter contains the size of this buffer.  To calculate the size required for the buffer, set this parameter to NULL. The size, in bytes, required is returned in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD variable that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput parameter is NULL, the size, in bytes, required for the buffer is placed in the location pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or the following value.  ValueMeaning  NCRYPT_PERSIST_ONLY_FLAG   Ignore any built in values for this property and only retrieve the user-persisted properties of the key.  The maximum size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.      For the NCRYPT_SECURITY_DESCR_PROPERTY property, this parameter must also contain one of the following values, which identifies the part of the security descriptor to retrieve.  ValueMeaning  OWNER_SECURITY_INFORMATION   Retrieve the security identifier (SID) of the object's owner. Use the GetSecurityDescriptorOwner function to obtain the owner SID from the SECURITY_DESCRIPTOR structure.   GROUP_SECURITY_INFORMATION   Retrieve the SID of the object's primary group. Use the GetSecurityDescriptorGroup function to obtain the group SID from the SECURITY_DESCRIPTOR structure.   DACL_SECURITY_INFORMATION   Retrieve the discretionary access control list (DACL). Use the GetSecurityDescriptorSacl function to obtain the DACL from the SECURITY_DESCRIPTOR structure.   SACL_SECURITY_INFORMATION   Retrieve the system access control list (SACL). Use the GetSecurityDescriptorDacl function to obtain the SACL from the SECURITY_DESCRIPTOR structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptImportKey function imports a Cryptography API: Next Generation (CNG) key from a memory BLOB.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. The following sections describe behaviors specific to the Microsoft key storage providers: The following constants are supported by the Microsoft software KSP for the pszBlobType parameter.  If a key name is not supplied, the Microsoft Software KSP treats the key as ephemeral and does not store it persistently. For the NCRYPT_OPAQUETRANSPORT_BLOB type, the key name is stored within the BLOB when it is exported. For other BLOB formats, the name can be supplied in an  NCRYPTBUFFER_PKCS_KEY_NAME buffer parameter within the pParameterList parameter. On Windows Server 2008 and Windows Vista,  only keys imported as PKCS #7 envelope BLOBs (NCRYPT_PKCS7_ENVELOPE_BLOB) or PKCS #8 private key BLOBs (NCRYPT_PKCS8_PRIVATE_KEY_BLOB) can be persisted by using the above method. To persist keys imported through other BLOB types on these platforms, use the method documented in Key Import and Export. The following flags are supported by this KSP.   The set of key BLOB formats and flags supported by this KSP is identical to the set supported by the Microsoft Software KSP. On Windows Server 2008 and Windows Vista, the Microsoft Smart Card KSP imports all keys into the Microsoft Software KSP. Thus, keys cannot be persisted on to a smart card by using this API, and the guidance in the above section applies when trying to persist keys within the Microsoft Software KSP. On Windows Server 2008 R2 and Windows 7, the Microsoft Smart Card Key Storage Provider can import a private key to a smart card, provided the following conditions are met: If the key container name is NULL, the Microsoft Smart Card KSP treats the key as ephemeral and imports it into the Microsoft Software KSP. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptImportKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hImportKey",
        "description": "The handle of the cryptographic key with which the key data within the imported key BLOB was encrypted. This must be a handle to the same key that was passed in the hExportKey parameter of the NCryptExportKey function. If this parameter is NULL, the key BLOB is assumed to not be encrypted."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the format of the key BLOB. These formats are specific to a particular key storage provider. For the BLOB formats supported by Microsoft providers, see Remarks."
      },
      {
        "in_out": "_In_opt_",
        "type": "NCryptBufferDesc*",
        "name": "pParameterList",
        "description": "The address of an NCryptBufferDesc structure that points to an array of buffers that contain parameter information for the key."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "The address of an NCRYPT_KEY_HANDLE variable that receives the handle of the key. When you have finished using this handle, release it by passing it to the NCryptFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbData",
        "description": "The address of a buffer that contains the key BLOB to be imported. The cbData parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "The size, in bytes, of the pbData buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  The set of valid flags is specific to each key storage provider.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptIsAlgSupported function determines if a CNG key storage provider supports a specific cryptographic algorithm.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "If the provider supports the algorithm, this function returns ERROR_SUCCESS. If the provider does not support the algorithm, and no other errors occurred, this function returns NTE_NOT_SUPPORTED. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptIsAlgSupported",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider. This handle is obtained with the NCryptOpenStorageProvider function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszAlgId",
        "description": "A pointer to a null-terminated Unicode string that identifies the cryptographic algorithm in question. This can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero (0) or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The NCryptIsKeyHandle function determines if the specified handle is a CNG key handle.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ncrypt.h",
    "return_value": "Returns a nonzero value if the handle is a key handle or zero otherwise. ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "BOOL",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptIsKeyHandle",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to test."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptNotifyChangeKey function creates or removes a key change notification.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptNotifyChangeKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider. This handle is obtained by using the NCryptOpenStorageProvider function."
      },
      {
        "in_out": "_Inout_",
        "type": "HANDLE*",
        "name": "phEvent",
        "description": "The address of a HANDLE variable that either receives or contains the key change notification event handle. This is the same handle that is returned by the FindFirstChangeNotification function. For more information, see the dwFlags parameter description."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This parameter contains a combination of one or more of the following values.  ValueMeaning  NCRYPT_REGISTER_NOTIFY_FLAG 0x00000001   Create a new change notification. The phEvent parameter will receive the key change notification handle.   NCRYPT_UNREGISTER_NOTIFY_FLAG 0x00000002   Remove an existing change notification. The phEvent parameter must contain a valid key change notification handle. This handle is no longer valid after this function is called with this flag and the INVALID_HANDLE_VALUE value is placed in this handle.   NCRYPT_MACHINE_KEY_FLAG 0x00000020   Receive change notifications for keys in the machine key store. If this flag is not specified, the change notification events will only occur for keys in the calling user's key store. This flag is only valid when combined with the NCRYPT_REGISTER_NOTIFY_FLAG flag."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The NCryptOpenKey function opens a key that exists in the specified CNG key storage provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. For performance reasons, Microsoft software-based KSPs cache private key material in the Local Security Authority (LSA) for as long as a handle to the key is open. The LSA is a privilidged system process. Therefore, other users cannot access this cached copy of the key unless the user possesses administrator privileges on the system. This behavior cannot be altered through configuration. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptOpenKey",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROV_HANDLE",
        "name": "hProvider",
        "description": "The handle of the key storage provider to open the key from."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a NCRYPT_KEY_HANDLE variable that receives the key handle. When you have finished using this handle, release it by passing it to the NCryptFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszKeyName",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the key to retrieve."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLegacyKeySpec",
        "description": "A legacy identifier that specifies the type of key. This can be one of the following values.  ValueMeaning  AT_KEYEXCHANGE   The key is a key exchange key.   AT_SIGNATURE   The key is a signature key.    0   The key is none of the above types."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  ValueMeaning  NCRYPT_MACHINE_KEY_FLAG   Open the key for the local computer. If this flag is not present, the current user key is opened.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptOpenStorageProvider function loads and initializes a CNG key storage provider.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "In the case that an error condition is returned, the provider will have been unloaded from memory. Functions within the provider must not be called after a failure error is returned. A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptOpenStorageProvider",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "NCRYPT_PROV_HANDLE*",
        "name": "phProvider",
        "description": "A pointer to a NCRYPT_PROV_HANDLE variable that receives the provider handle. When you have finished using this handle, release it by passing it to the NCryptFreeObject function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pszProviderName",
        "description": "A pointer to a null-terminated Unicode string that identifies the key storage provider to load. This is the registered alias of the key storage provider. This parameter is optional and can be NULL. If this parameter is NULL, the default key storage provider is loaded. The following values identify the built-in key storage providers.  ValueMeaning  MS_KEY_STORAGE_PROVIDER L\"Microsoft Software Key Storage Provider\"   Identifies the software key storage provider that is provided by Microsoft.   MS_SMART_CARD_KEY_STORAGE_PROVIDER L\"Microsoft Smart Card Key Storage Provider\"   Identifies the smart card key storage provider that is provided by Microsoft."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify the behavior of the function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The NCryptSecretAgreement function creates a secret agreement value from a private and a public key.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptSecretAgreement",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPrivKey",
        "description": "The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same key storage provider."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hPubKey",
        "description": "The handle of the public key to use to create the secret agreement value. This key and the hPrivKey key must come from the same key storage provider."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_SECRET_HANDLE*",
        "name": "phSecret",
        "description": "A pointer to an NCRYPT_SECRET_HANDLE variable that receives a handle that represents the secret agreement value. When this handle is no longer needed, release it by passing it to the NCryptFreeObject function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  The set of valid flags is specific to each key storage provider. The following flag applies to all providers.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The NCryptSetProperty function sets the value for a named property for a CNG key storage object.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptSetProperty",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_HANDLE",
        "name": "hObject",
        "description": "The handle of the key storage object to set the property for."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined Key Storage Property Identifiers or a custom property identifier."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbInput",
        "description": "The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The size, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. This can be zero or a combination of one or more of the following values.  ValueMeaning  NCRYPT_PERSIST_FLAG   The property should be stored in key storage along with the key material. This flag can only be used when the hObject parameter is the handle of a persisted key. The maximum size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes.   NCRYPT_PERSIST_ONLY_FLAG   Do not overwrite any built-in values for this property and only set the user-persisted properties of the key.  The maximum size of the data for any persisted property is NCRYPT_MAX_PROPERTY_DATA bytes. This flag cannot be used with the NCRYPT_SECURITY_DESCR_PROPERTY property.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error.      For the NCRYPT_SECURITY_DESCR_PROPERTY property, this parameter must also contain one of the following values, which identifies the part of the security descriptor to set.  ValueMeaning  OWNER_SECURITY_INFORMATION   Set the security identifier (SID) of the object's owner. Use the SetSecurityDescriptorOwner function to set the owner SID in the SECURITY_DESCRIPTOR structure.   GROUP_SECURITY_INFORMATION   Set the SID of the object's primary group. Use the SetSecurityDescriptorGroup function to set the group SID in the SECURITY_DESCRIPTOR structure.   DACL_SECURITY_INFORMATION   Set the discretionary access control list (DACL). Use the SetSecurityDescriptorSacl function to set the DACL in the SECURITY_DESCRIPTOR structure.   SACL_SECURITY_INFORMATION   Set the system access control list (SACL). Use the SetSecurityDescriptorDacl function to set the SACL in the SECURITY_DESCRIPTOR structure.   LABEL_SECURITY_INFORMATION   Set the mandatory label access control entry in the SACL of the object. Use the SetSecurityDescriptorDacl function to set the SACL in the SECURITY_DESCRIPTOR structure. For more information about the mandatory label access control entry, see Windows Integrity Mechanism Design."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptSignHash function creates a signature of a hash value.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptSignHash",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to sign the hash."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbHashValue",
        "description": "A pointer to a buffer that contains the hash value to sign. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHashValue",
        "description": "The number of bytes in the pbHashValue buffer to sign."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbSignature",
        "description": "The address of a buffer to receive the signature produced by this function. The cbSignature parameter contains the size of this buffer. If this parameter is NULL, this function will calculate the size required for the signature and return the size in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer. This parameter is ignored if the pbSignature parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD variable that receives the number of bytes copied to the pbSignature buffer.  If pbSignature is NULL, this receives the size, in bytes, required for the signature."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter. If the key is a symmetric key, this parameter is not used and should be set to zero.  If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  BCRYPT_PAD_PKCS1   Use the PKCS1 padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.   BCRYPT_PAD_PSS   Use the Probabilistic Signature Scheme (PSS) padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The NCryptTranslateHandle function translates a CryptoAPI handle into a CNG key handle.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This is a helper function intended to help applications and system components that currently use the CryptoAPI to make a graceful transition to using CNG. This function will only be successful if a CNG key storage provider is registered with a name or alias that is identical to the name of the cryptographic service provider (CSP) referred to by the hLegacyProv parameter. This function will perform the following steps to translate the CSP handle into a CNG key handle: A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptTranslateHandle",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "NCRYPT_PROV_HANDLE*",
        "name": "phProvider",
        "description": "A pointer to an NCRYPT_PROV_HANDLE variable that receives the handle of the CNG key storage provider that owns the CNG key placed in the phKey parameter. This parameter can be NULL if this handle is not needed."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a NCRYPT_KEY_HANDLE variable that receives the CNG key handle."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hLegacyProv",
        "description": "The handle of the CryptoAPI provider that contains the key to translate. This function will translate the CryptoAPI key that is in the container in this provider."
      },
      {
        "in_out": "_In_opt_",
        "type": "HCRYPTKEY",
        "name": "hLegacyKey",
        "description": "The handle of a CryptoAPI key to use to help determine the key specification for the returned key. This parameter is ignored if the dwLegacyKeySpec parameter contains a value other than zero. If hLegacyKey is NULL and dwLegacyKeySpec is zero, this function will attempt to determine the key specification from the hLegacyProv handle."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "dwLegacyKeySpec",
        "description": "Specifies the key specification for the key. This can be one of the following values.  ValueMeaning   0   The key is none of the types below.   AT_KEYEXCHANGE 1   The key is a key exchange key.   AT_SIGNATURE 2   The key is a signature key.     If hLegacyKey is NULL and dwLegacyKeySpec is zero, this function will attempt to determine the key specification from the hLegacyProv handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The NCryptVerifySignature function verifies that the specified signature matches the specified hash.",
    "library": "Ncrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Ncrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A service must not call this function from its StartService Function. If a service calls this function from its StartService function, a deadlock can occur, and the service may stop responding. ",
    "return_type": "SECURITY_STATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptVerifySignature",
    "is_callback": 0,
    "dll": "Ncrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair used to sign the data with the NCryptSignHash function."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbHashValue",
        "description": "The address of a buffer that contains the hash of the data. The cbHash parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHashValue",
        "description": "The size, in bytes, of the pbHash buffer."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignature",
        "description": "The address of a buffer that contains the signed hash of the data. The NCryptSignHash function is used to create the signature. The cbSignature parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer. The NCryptSignHash function is used to create the signature."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify function behavior. The allowed set of flags depends on the type of key specified by the hKey parameter. If the key is a symmetric key, this parameter is not used and should be zero.  If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  NCRYPT_PAD_PKCS1_FLAG   The PKCS1 padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.   NCRYPT_PAD_PSS_FLAG   The Probabilistic Signature Scheme (PSS) padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure.   NCRYPT_SILENT_FLAG   Requests that the key service provider (KSP) not display any user interface. If the provider must display the UI to operate, the call fails and the KSP should set the NTE_SILENT_CONTEXT error code as the last error."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The BCryptDeriveKeyCapi function derives a key from a hash value.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function does not support the PK salt functionality of the CAPI CryptDeriveKey function. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDeriveKeyCapi",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_HASH_HANDLE",
        "name": "hHash",
        "description": "The handle of the hash object. The handle is obtained by calling the BCryptCreateHash function. When you have finished using the handle, you must free it by calling the BCryptDestroyHash function."
      },
      {
        "in_out": "_In_opt_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hTargetAlg",
        "description": "The handle of the algorithm object.  This can be an ALG_ID value that is compatible with the CryptDeriveKey function. Note  Limitations in CAPI and key expansion prevent the use of any hash algorithm that generates an output that is larger than 512 bits."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbDerivedKey",
        "description": "A pointer to the buffer that receives the derived key."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbDerivedKey",
        "description": "The size, in characters, of the derived key pointed to by the pbDerivedKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 9,
    "description": "The BCryptDeriveKeyPBKDF2 function derives a key from a hash value by using the PBKDF2 key derivation algorithm as defined by RFC 2898.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDeriveKeyPBKDF2",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hPrf",
        "description": "The handle of an algorithm provider that provides the pseudo-random function. This should be an algorithm provider that performs a Message Authentication Code computation. When you use the default Microsoft algorithm provider, any hashing algorithm opened by using the  BCRYPT_ALG_HANDLE_HMAC_FLAG flag can be used. Note  Only algorithms that implement the BCRYPT_IS_KEYED_HASH  property can be used to populate this parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PUCHAR",
        "name": "pbPassword",
        "description": "A pointer to a buffer that contains the password parameter for the PBKDF2 key derivation algorithm. Note  Any secret information used in the key derivation should be passed in this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbPassword",
        "description": "The length, in bytes, of the data in the buffer pointed to by the pbPassword parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PUCHAR",
        "name": "pbSalt",
        "description": "A pointer to a buffer that contains the salt argument  for the PBKDF2 key derivation algorithm. Note  Any information that is not secret and that is used in the key derivation should be passed in this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSalt",
        "description": "The length, in bytes, of the salt argument pointed to by the pbSalt parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "cIterations",
        "description": "The iteration count for the PBKDF2 key derivation algorithm."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbDerivedKey",
        "description": "A pointer to a buffer that receives the derived key."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbDerivedKey",
        "description": "The length, in bytes, of the derived key returned in the buffer pointed to by the pbDerivedKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "[SystemPrng is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use BCryptGenRandom.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "Always returns TRUE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "CNG Cryptographic Primitive",
    "name": "SystemPrng",
    "is_callback": 0,
    "dll": "Ksecdd.sys on Windows Server 2008 and Windows Vista with SP1;  Cng.sys on Windows 7 and Windows Server 2008 R2",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "unsigned char",
        "name": "pbRandomData",
        "description": "A pointer to a buffer that receives the retrieved bytes."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cbRandomData",
        "description": "The number of bytes to retrieve."
      }
    ],
    "min_client": "Windows Vista with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptCreateProtectionDescriptor function retrieves a handle to a protection descriptor object.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The protection descriptor object created by this function is an internal data structure that contains information about the descriptor. You cannot use it directly. Your application can, however, use the returned handle in the following functions: The following examples show protection descriptor rule strings: You can use the NCryptRegisterProtectionDescriptorName function to associate a display name with a rule string and save both in the registry. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptCreateProtectionDescriptor",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszDescriptorString",
        "description": "Null-terminated Unicode string that contains a protection descriptor rule string or a registered display name for the rule. If you specify the display name and you want this function to look in the registry for the associated protection descriptor rule string, you must set the dwFlags parameter to NCRYPT_NAMED_DESCRIPTOR_FLAG."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag that specifies whether the string in pwszDescriptorString represents the display name of a  protection descriptor and, if so, where in the registry the function should search for the associated protection rule string. The following value combinations can be set:  To indicate that the value set in the pwszDescriptorString parameter is a complete protection descriptor rule string rather than a display name, set the dwFlags parameter to zero (0). To indicate that the string is a display name and that it is saved, along with its associated descriptor rule string, in the HKEY_LOCAL_MACHINE registry hive, bitwise-OR  the NCRYPT_NAMED_DESCRIPTOR_FLAG value and the NCRYPT_MACHINE_KEY_FLAG value. To indicate that the string is a display name and that it is saved, along with its associated descriptor string rule, in the HKEY_CURRENT_USER registry hive, set only the NCRYPT_NAMED_DESCRIPTOR_FLAG value. That is, there is no unique  flag to specify the current user registry hive.  Note  To associate a descriptor rule with a display name and save both in the registry, call the NCryptRegisterProtectionDescriptorName function."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE*",
        "name": "phDescriptor",
        "description": "Pointer to a protection descriptor object handle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The NCryptCloseProtectionDescriptor function zeros and frees a protection descriptor object and releases its handle.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptCloseProtectionDescriptor",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE",
        "name": "hDescriptor",
        "description": "Handle of a protection descriptor created by calling NCryptCreateProtectionDescriptor."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The NCryptGetProtectionDescriptorInfo function retrieves a protection descriptor rule string.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptGetProtectionDescriptorInfo",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE",
        "name": "hDescriptor",
        "description": "Protection descriptor handle created by calling NCryptCreateProtectionDescriptor."
      },
      {
        "in_out": "_In_opt_",
        "type": "const NCRYPT_ALLOC_PARA*",
        "name": "pMemPara",
        "description": "Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this argument to NULL, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree to release memory pointed to by the ppvInfo parameter."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInfoType",
        "description": "Specifies how to return descriptor information to the  ppvInfo parameter. This can be the following value:  ValueMeaning  NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING   The ppvInfo argument returns the descriptor rule string."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "ppvInfo",
        "description": "Pointer to the descriptor information."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptProtectSecret function encrypts data to a specified protection descriptor. Call NCryptUnprotectSecret to decrypt the data.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Use the NCryptProtectSecret function to protect keys, key material, and passwords. Use the NCryptStreamOpenToProtect and the NCryptStreamUpdate functions to encrypt larger messages. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptProtectSecret",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE",
        "name": "hDescriptor",
        "description": "Handle of the protection descriptor object. Create the handle by calling NCryptCreateProtectionDescriptor."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The flag can be zero or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider not display a user interface."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "Pointer to the byte array to be protected."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbData",
        "description": "Number of bytes in the binary array specified by the pbData parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "const NCRYPT_ALLOC_PARA",
        "name": "pMemPara",
        "description": "Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this argument to NULL, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree to release memory pointed to by the ppbProtectedBlob parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window of the user interface, if any, to be displayed."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE**",
        "name": "ppbProtectedBlob",
        "description": "Address of a variable that receives a pointer to the encrypted data."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbProtectedBlob",
        "description": "Pointer to a ULONG variable that contains the size, in bytes, of the encrypted data pointed to by the ppbProtectedBlob variable."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The NCryptQueryProtectionDescriptorName function retrieves the protection descriptor rule string associated with a registered descriptor display name.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "To retrieve a protection descriptor rule string, you must call this function twice. The first time you call, set the pwszDescriptorString argument to NULL and the value pointed to by the pcDescriptorString argument to zero. Your first call retrieves the number of characters in the descriptor string. Use this number to allocate memory for the string and retrieve a pointer to the allocated buffer. To retrieve the string, call the function again using the pointer. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptQueryProtectionDescriptorName",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszName",
        "description": "The registered display name for the protection descriptor. Register a name by calling the NCryptRegisterProtectionDescriptorName function."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pwszDescriptorString",
        "description": "A null-terminated Unicode string that contains the protection descriptor rule. Set this value to NULL and set the size of the descriptor string pointed to by pcDescriptorString argument to zero on your initial call to this function. For more information, see Remarks."
      },
      {
        "in_out": "_Inout_",
        "type": "SIZE_T*",
        "name": "pcDescriptorString",
        "description": "Pointer to a variable that contains the number  of characters in the string retrieved in the pwszDescriptorString parameter. Set the variable to zero on your initial call to this function. For more information, see Remarks."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag that specifies which registry hive to query for the registered name. This can be zero to look in the HKEY_CURRENT_USER hive or you can specify NCRYPT_MACHINE_KEY_FLAG to query the HKEY_LOCAL_MACHINE hive."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The NCryptRegisterProtectionDescriptorName function registers the display name and the associated rule string for a protection descriptor.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The registry key created by using this function is not volatile. The information is stored in a file and preserved when the computer shuts down. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptRegisterProtectionDescriptorName",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszName",
        "description": "Pointer to a null-terminated Unicode string that contains the display name of the descriptor to be registered."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszDescriptorString",
        "description": "Pointer to a null-terminated Unicode string that contains a protection descriptor rule. If this parameter is NULL or the string is empty, the registry value previously created for the pwszName parameter will be deleted."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A constant that indicates the registry hive under which to register the new entry. If this value is zero (0), the registry root is HKEY_CURRENT_USER. If this value is NCRYPT_MACHINE_KEY_FLAG, the root is HKEY_LOCAL_MACHINE."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The NCryptStreamClose function closes a data protection stream object opened by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptStreamClose",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_STREAM_HANDLE",
        "name": "hStream",
        "description": "Data stream handle returned by NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The NCryptStreamOpenToProtect function opens a stream object that can be used to encrypt large amounts of data  to a given protection descriptor. Call NCryptStreamUpdate to encrypt the content. To encrypt smaller messages such as keys and passwords, call NCryptProtectSecret.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The NCryptStreamOpenToProtect function creates an internal stream object that can be used to encrypt large messages. You cannot use the object directly. Instead, you must use the object handle returned by this function. Call this function before calling the NCryptStreamUpdate function. If you are encrypting a large file, use NCryptStreamUpdate in a loop that advances through the file block by block, encrypting each block as it advances and notifying your callback when each block is finished. For more information, see NCryptStreamUpdate. The NCryptStreamOpenToProtect function writes the unencrypted protection descriptor rule string to the stream object header so that NCryptStreamOpenToUnprotect will be able to start the decrypting the stream by using the same protector used during encryption. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptStreamOpenToProtect",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE",
        "name": "hDescriptor",
        "description": "Handle of the protection descriptor. Create the handle by calling NCryptCreateProtectionDescriptor."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The flag can be zero or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider not display a user interface."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window of the user interface, if any, to be displayed."
      },
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROTECT_STREAM_INFO*",
        "name": "pStreamInfo",
        "description": "Pointer to an NCRYPT_PROTECT_STREAM_INFO structure that contains the address of a user defined callback function to receive the encrypted data and a pointer to user-defined context data."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_STREAM_HANDLE*",
        "name": "phStream",
        "description": "Pointer to the stream object handle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The NCryptStreamOpenToUnprotect function opens a stream object that can be used to decrypt large amounts of data to the same  protection descriptor used for encryption. Call NCryptStreamUpdate to perform the decryption. To decrypt smaller messages such as keys and passwords, call NCryptUnprotectSecret.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The NCryptStreamOpenToUnprotect function  creates an internal stream object that can be used to encrypt large messages. You cannot use the object directly. Instead, you must use the object handle returned by this function. Call this function before calling the NCryptStreamUpdate function. If you are encrypting a large file, use NCryptStreamUpdate in a loop that advances through the file block by block, encrypting each block as it advances and notifying your callback when each block is finished. For more information, see NCryptStreamUpdate. The NCryptStreamOpenToUnprotect function retrieves the unencrypted protection descriptor rule string from the stream header. The rule string is placed in the header by the NCryptStreamOpenToUnprotect function. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptStreamOpenToUnprotect",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_PROTECT_STREAM_INFO*",
        "name": "pStreamInfo",
        "description": "Pointer to an NCRYPT_PROTECT_STREAM_INFO structure that contains the address of a user defined callback function to receive the decrypted data and a pointer to user-defined context data."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A flag that specifies additional information for the key service provider. This can be zero or the following value.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider not display a user interface."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window of the user interface, if any, to be displayed."
      },
      {
        "in_out": "_Out_",
        "type": "NCRYPT_STREAM_HANDLE*",
        "name": "phStream",
        "description": "Pointer to the handle of the decrypted stream of data."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The NCryptStreamUpdate function encrypts and decrypts blocks of data.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "You must call NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect to open a stream before calling NCryptStreamUpdate Messages can be so large that processing them all at once by storing the entire message in memory can be difficult. It is possible, however,  to process large messages by partitioning the data to be processed into manageable blocks. To do this, use NCryptStreamUpdate in a loop that advances through the file block by block. As the streamed message is processed, the resulting output data is passed back to your application by using a callback function that you specify. This is shown by the following example. For more information about the callback function, see  PFNCryptStreamOutputCallback. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptStreamUpdate",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_STREAM_HANDLE",
        "name": "hStream",
        "description": "Handle to the stream object created by calling NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "Pointer to the byte array to be processed."
      },
      {
        "in_out": "",
        "type": "SIZE_T",
        "name": "cbData",
        "description": "Number of bytes in the binary array specified by the pbData parameter."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fFinal",
        "description": "A Boolean value that specifies whether the last block of data has been processed."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The NCryptUnprotectSecret function decrypts data to a specified protection descriptor. Call NCryptProtectSecret to encrypt the data.",
    "library": "NCrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Use the NCryptUnprotectSecret function to decrypt keys, key material, and passwords. Use the NCryptStreamOpenToUnprotect  and the NCryptStreamUpdate functions to decrypt larger messages. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "NCryptUnprotectSecret",
    "is_callback": 0,
    "dll": "NCrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "NCRYPT_DESCRIPTOR_HANDLE*",
        "name": "phDescriptor",
        "description": "Pointer to the protection descriptor handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The flag can be zero or a bitwise OR of the following values.  ValueMeaning  NCRYPT_SILENT_FLAG   Requests that the key service provider not display a user interface.   NCRYPT_UNPROTECT_NO_DECRYPT   Decodes only the header of the protected data blob. No actual decryption takes place."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbProtectedBlob",
        "description": "Pointer to an array of bytes that contains the data to decrypt."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cbProtectedBlob",
        "description": "The number of bytes in the array pointed to by the pbProtectedBlob parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "const NCRYPT_ALLOC_PARA*",
        "name": "pMemPara",
        "description": "Pointer to an NCRYPT_ALLOC_PARA structure that you can use to specify custom memory management functions. If you set this argument to NULL, the LocalAlloc function is used internally to allocate memory and your application must call LocalFree to release memory pointed to by the ppbData parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window of the user interface, if any, to be displayed."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE**",
        "name": "ppbData",
        "description": "Address of a variable that receives a pointer to the decrypted data."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbData",
        "description": "Pointer to a ULONG variable that contains the size, in bytes, of the decrypted data pointed to by the ppbData variable."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFNCryptStreamOutputCallback function receives encrypted or decrypted data from tasks started by using the NCryptStreamOpenToProtect or NCryptStreamOpenToUnprotect functions. This callback must be defined by your application using the following syntax.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "NCryptprotect.h",
    "return_value": "If you return any status code other than ERROR_SUCCESS from your implementation of this callback function, the stream encryption or decryption process will fail.  ",
    "remarks": "Set a pointer to this callback function in the pfnStreamOutput member of the  NCRYPT_PROTECT_STREAM_INFO structure. Set a pointer to the structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or  NCryptStreamOpenToUnprotect functions. You can use this callback to further process the encrypted or decrypted data. A common use of the function is to write the data to disk as it is received from the data protection API. The blocks of encrypted or unencrypted data are created by the NCryptStreamUpdate function. ",
    "return_type": "typedef NTSTATUS ( CALLBACK",
    "category": "CNG Cryptographic Primitive",
    "name": "PFNCryptStreamOutputCallback pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvCallbackCtxt",
        "description": "Pointer to data that you can use to keep track of your application. The data is not modified by the data protection API.  Note  You can set a pointer to your context data in the pvCallbackCtxt member of the NCRYPT_PROTECT_STREAM_INFO structure before passing a pointer to that structure in the pStreamInfo parameter of the NCryptStreamOpenToProtect or  NCryptStreamOpenToUnprotect functions."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "Pointer to a block of processed data that can be used by the application."
      },
      {
        "in_out": "",
        "type": "SIZE_T",
        "name": "cbData",
        "description": "The size, in bytes, of the processed data pointed to by the pbData parameter."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fFinal",
        "description": "If this value is TRUE, the current data block is the last to be processed and this         is the last time the callback will be called."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The BCryptCloseAlgorithmProvider function closes an algorithm provider.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "BCryptCloseAlgorithmProvider can be called either from user mode or kernel mode. Kernel mode callers must be executing at PASSIVE_LEVEL IRQL. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptCloseAlgorithmProvider",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "A handle that represents the algorithm provider to close. This handle is obtained by calling the BCryptOpenAlgorithmProvider function."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptCreateHash function is called to create a hash or Message Authentication Code (MAC) object.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptCreateHash can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptCreateHash function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptCreateHash",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified when the provider was created must support the hash interface."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_HASH_HANDLE*",
        "name": "phHash",
        "description": "A pointer to a BCRYPT_HASH_HANDLE value that receives a handle that represents the hash or MAC object. This handle is used in subsequent hashing or MAC functions, such as the BCryptHashData function. When you have finished using this handle, release it by passing it to the BCryptDestroyHash function."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbHashObject",
        "description": "A pointer to a buffer that receives the hash or MAC object. The cbHashObject parameter contains the size of this buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the BCRYPT_OBJECT_LENGTH property. This will provide the size of the hash or MAC object for the specified algorithm. This memory can only be freed after the handle pointed to by the phHash parameter is destroyed. If the value of this parameter is NULL and the value of the cbHashObject parameter is zero, the memory for the hash object is allocated and freed by this function.Windows 7:  This memory management functionality is available beginning with Windows 7."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "cbHashObject",
        "description": "The size, in bytes, of the pbHashObject buffer. If the value of this parameter is zero and the value of the pbHashObject parameter is NULL, the memory for the key object is allocated and freed by this function.Windows 7:  This memory management functionality is available beginning with Windows 7.c"
      },
      {
        "in_out": "_In_opt_",
        "type": "PUCHAR",
        "name": "pbSecret",
        "description": "A pointer to a buffer that contains the key to use for the hash or MAC. The cbSecret parameter contains the size of this buffer. This key only applies to hash algorithms opened by the BCryptOpenAlgorithmProvider function by using the BCRYPT_ALG_HANDLE_HMAC flag.  Otherwise, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSecret",
        "description": "The size, in bytes, of the pbSecret buffer. If no key is used, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Flags that modify the behavior of the function. This can be zero or the following value.  ValueMeaning  BCRYPT_HASH_REUSABLE_FLAG   Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash. For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  This flag is not supported."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 10,
    "description": "The BCryptDecrypt function decrypts a block of data.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the decryption in place. Depending on what processor modes a provider supports, BCryptDecrypt can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptDecrypt function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDecrypt",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to decrypt the data. This handle is obtained from one of the key creation functions, such as BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "The address of a buffer that contains the ciphertext to be decrypted. The cbInput parameter contains the size of the ciphertext to decrypt. For more information, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer to decrypt."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated encryption modes. If an  authenticated encryption mode is used, this parameter must point to a BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is determined by the value of the dwFlags parameter. Otherwise, the parameter  must be set to NULL."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PUCHAR",
        "name": "pbIV",
        "description": "The address of a buffer that contains the initialization vector (IV) to use during decryption. The cbIV parameter contains the size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make a copy of this buffer before calling this function. This parameter is optional and can be NULL if no IV is used.  The required size of the IV can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property. This will provide the size of a block for the algorithm, which is also the size of the IV."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbIV",
        "description": "The size, in bytes, of the pbIV buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PUCHAR",
        "name": "pbOutput",
        "description": "The address of a buffer to receive the plaintext produced by this function. The cbOutput parameter contains the size of this buffer. For more information, see Remarks. If this parameter is NULL, the BCryptDecrypt  function calculates the size required for the plaintext of the encrypted data passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this size, and the function returns STATUS_SUCCESS. If the values of both the pbOutput and pbInput parameters are NULL, an error is returned unless  an authenticated encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length data, and the authentication tag, passed in the pPaddingInfo parameter, is verified."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG variable to receive the number of bytes copied to the pbOutput buffer. If pbOutput is NULL, this receives the size, in bytes, required for the plaintext."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the hKey parameter.  If the key is a symmetric key, this can be zero or the following value.   ValueMeaning  BCRYPT_BLOCK_PADDING   The data was padded to the next block size when it was encrypted. If this flag was used with the BCryptEncrypt function, it must also be specified in this function. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).      If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  BCRYPT_PAD_NONE   Do not use any padding. The pPaddingInfo parameter is not used. The cbInput parameter must be a multiple of the algorithm's block size.  The block size can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of a block for the algorithm.   BCRYPT_PAD_OAEP   The Optimal Asymmetric Encryption Padding (OAEP) scheme was used when the data was encrypted. The pPaddingInfo parameter is a pointer to a BCRYPT_OAEP_PADDING_INFO structure.   BCRYPT_PAD_PKCS1   The data was padded with a random number when the data was encrypted. The pPaddingInfo parameter is not used."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptDeriveKey function derives a key from a secret agreement value.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The BCryptBufferDesc structure in the pParameterList parameter can contain more than one of the KDF_SECRET_PREPEND and KDF_SECRET_APPEND parameters. If more than one of these parameters is specified, the parameter values are concatenated in the order in which they are contained in the array before the KDF is called. For example, assume the following parameter values are specified. If the above parameter values are specified, the concatenated values to the actual KDF are as follows. Depending on what processor modes a provider supports, BCryptDeriveKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hSharedSecret parameter must be located in nonpaged (or locked) memory and must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDeriveKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_SECRET_HANDLE",
        "name": "hSharedSecret",
        "description": "The secret agreement handle to create the key from. This handle is obtained from the BCryptSecretAgreement function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszKDF",
        "description": "A pointer to a null-terminated Unicode string that identifies the key derivation function (KDF) to use to derive the key. This can be one of the following strings.  BCRYPT_KDF_HASH (L\"HASH\")   Use the hash key derivation function.  If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_HASH_ALGORITHM  A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not specified, the SHA1 hash algorithm is used.  Optional   KDF_SECRET_PREPEND  A value to add to the beginning of the message input to the hash function. For more information, see Remarks.  Optional   KDF_SECRET_APPEND  A value to add to the end of the message input to the hash function. For more information, see Remarks.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Prepend = KDF_SECRET_PREPEND[0] +      KDF_SECRET_PREPEND[1] +      ... +     KDF_SECRET_PREPEND[n]  KDF-Append = KDF_SECRET_APPEND[0] +      KDF_SECRET_APPEND[1] +      ... +      KDF_SECRET_APPEND[n]  KDF-Output = Hash(     KDF-Prepend +      hSharedSecret +      KDF-Append)      BCRYPT_KDF_HMAC (L\"HMAC\")   Use the Hash-Based Message Authentication Code (HMAC) key derivation function.  If the cbDerivedKey parameter is less than the size of the derived key, this function will only copy the specified number of bytes to the pbDerivedKey buffer. If the cbDerivedKey parameter is greater than the size of the derived key, this function will copy the key to the pbDerivedKey buffer and set the variable pointed to by the pcbResult to the actual number of bytes copied. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_HASH_ALGORITHM  A null-terminated Unicode string that identifies the hash algorithm to use. This can be one of the standard hash algorithm identifiers from CNG Algorithm Identifiers or the identifier for another registered hash algorithm. If this parameter is not specified, the SHA1 hash algorithm is used.  Optional   KDF_HMAC_KEY  The key to use for the pseudo-random function (PRF).  Optional   KDF_SECRET_PREPEND  A value to add to the beginning of the message input to the hash function. For more information, see Remarks.  Optional   KDF_SECRET_APPEND  A value to add to the end of the message input to the hash function. For more information, see Remarks.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Prepend = KDF_SECRET_PREPEND[0] +      KDF_SECRET_PREPEND[1] +      ... +     KDF_SECRET_PREPEND[n]  KDF-Append = KDF_SECRET_APPEND[0] +      KDF_SECRET_APPEND[1] +      ... +      KDF_SECRET_APPEND[n]  KDF-Output = HMAC-Hash(     KDF_HMAC_KEY,     KDF-Prepend +      hSharedSecret +      KDF-Append)      BCRYPT_KDF_TLS_PRF (L\"TLS_PRF\")   Use the transport layer security (TLS) pseudo-random function (PRF) key derivation function. The size of the derived key is always 48 bytes, so the cbDerivedKey parameter must be 48. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column.  ParameterDescriptionRequired or optional  KDF_TLS_PRF_LABEL  An ANSI string that contains the PRF label.  Required   KDF_TLS_PRF_SEED  The PRF seed. The seed must be 64 bytes long.  Required   KDF_TLS_PRF_PROTOCOL   A DWORD value that specifies the TLS protocol version whose PRF algorithm is to be used.  Valid values are:  SSL2_PROTOCOL_VERSION (0x0002) SSL3_PROTOCOL_VERSION (0x0300) TLS1_PROTOCOL_VERSION (0x0301) TLS1_0_PROTOCOL_VERSION (0x0301) TLS1_1_PROTOCOL_VERSION (0x0302) TLS1_2_PROTOCOL_VERSION (0x0303) DTLS1_0_PROTOCOL_VERSION (0xfeff)  Windows Server 2008 and Windows Vista:  TLS1_1_PROTOCOL_VERSION, TLS1_2_PROTOCOL_VERSION and DTLS1_0_PROTOCOL_VERSION are not supported. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  DTLS1_0_PROTOCOL_VERSION is not supported.  Optional   KDF_HASH_ALGORITHM    The CNG algorithm ID of the hash to be used with the HMAC in the PRF, for the TLS 1.2 protocol version. Valid choices are SHA-256 and SHA-384. If not specified, SHA-256 is used.   Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Output = PRF(     hSharedSecret,      KDF_TLS_PRF_LABEL,      KDF_TLS_PRF_SEED)      BCRYPT_KDF_SP80056A_CONCAT (L\"SP800_56A_CONCAT\")   Use the SP800-56A key derivation function. The parameters identified by the pParameterList parameter either can or must contain the following parameters, as indicated by the Required or optional column. All parameter values are treated as opaque byte arrays.   ParameterDescriptionRequired or optional  KDF_ALGORITHMID  Specifies the AlgorithmID subfield of the OtherInfo field in the SP800-56A key derivation function. Indicates the intended purpose of the derived key.  Required   KDF_PARTYUINFO  Specifies the PartyUInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information contributed by the initiator.  Required   KDF_PARTYVINFO  Specifies the PartyVInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information contributed by the responder.  Required   KDF_SUPPPUBINFO  Specifies the SuppPubInfo subfield of the OtherInfo field in the SP800-56A key derivation function. The field contains public information known to both initiator and responder.  Optional   KDF_SUPPPRIVINFO  Specifies the SuppPrivInfo subfield of the OtherInfo field in the SP800-56A key derivation function.  It contains private information known to both initiator and responder, such as a shared secret.  Optional     The call to the KDF is made as shown in the following pseudocode.       Copy     KDF-Output = SP_800-56A_KDF( \t   hSharedSecret, \t   KDF_ALGORITHMID, \t   KDF_PARTYUINFO, \t   KDF_PARTYVINFO, \t   KDF_SUPPPUBINFO, \t   KDF_SUPPPRIVINFO)     Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_opt_",
        "type": "BCryptBufferDesc*",
        "name": "pParameterList",
        "description": "The address of a BCryptBufferDesc structure that contains the KDF parameters. This parameter is optional and can be NULL if it is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PUCHAR",
        "name": "pbDerivedKey",
        "description": "The address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the ULONG pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbDerivedKey",
        "description": "The size, in bytes, of the pbDerivedKey buffer."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG that receives the number of bytes that were copied to the pbDerivedKey buffer. If the pbDerivedKey parameter is NULL, this function will place the required size, in bytes, in the ULONG pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or the following value.  ValueMeaning  KDF_USE_SECRET_AS_HMAC_KEY_FLAG   The secret agreement value will also serve as the HMAC key. If this flag is specified, the KDF_HMAC_KEY parameter should not be included in the set of parameters in the pParameterList parameter. This flag is only used by the BCRYPT_KDF_HMAC key derivation function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The BCryptDestroyHash function destroys a hash or Message Authentication Code (MAC) object.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptDestroyHash can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDestroyHash",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_HASH_HANDLE",
        "name": "hHash",
        "description": "The handle of the hash or MAC object to destroy. This handle is obtained by using the BCryptCreateHash function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The BCryptDestroyKey function destroys a key.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptDestroyKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDestroyKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to destroy."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The BCryptDestroySecret function destroys a secret agreement handle that was created by using the BCryptSecretAgreement function.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptDestroySecret can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hSecret parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDestroySecret",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_SECRET_HANDLE",
        "name": "hSecret",
        "description": "The BCRYPT_SECRET_HANDLE to be destroyed."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The BCryptDuplicateHash function duplicates an existing hash or Message Authentication Code (MAC) object. The duplicate object contains all state and data contained in the original object at the point of duplication.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function is useful when computing a hash or MAC over a block of common data. After the common data has been processed, the hash or MAC object can be duplicated, and then the unique data can be added to the individual objects. Depending on what processor modes a provider supports, BCryptDuplicateHash can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptDestroyKey function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDuplicateHash",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_HASH_HANDLE",
        "name": "hHash",
        "description": "The handle of the hash or MAC object to duplicate."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_HASH_HANDLE*",
        "name": "phNewHash",
        "description": "A pointer to a BCRYPT_HASH_HANDLE value that receives the handle that represents the duplicate hash or MAC object."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbHashObject",
        "description": "A pointer to a buffer that receives the duplicate hash or MAC object. The cbHashObject parameter contains the size of this buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the BCRYPT_OBJECT_LENGTH property. This will provide the size of the hash object for the specified algorithm. When the duplicate hash handle is released, free this memory."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbHashObject",
        "description": "The size, in bytes, of the pbHashObject buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The BCryptDuplicateKey function creates a duplicate of a symmetric key.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptDuplicateKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptDuplicateKey function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptDuplicateKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to duplicate. This must be a handle to a symmetric key."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phNewKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE variable that receives the handle of the duplicate key. This handle is used in subsequent functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the BCryptDestroyKey function."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbKeyObject",
        "description": "A pointer to a buffer that receives the duplicate key object. The cbKeyObject parameter contains the size of this buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the BCRYPT_OBJECT_LENGTH property. This will provide the size of the key object for the specified algorithm. This memory can only be freed after the phNewKey key handle is destroyed."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbKeyObject",
        "description": "The size, in bytes, of the pbKeyObject buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 10,
    "description": "The BCryptEncrypt function encrypts a block of data.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The pbInput and pbOutput parameters can point to the same buffer. In this case, this function will perform the encryption in place. It is possible that the encrypted data size will be larger than the unencrypted data size, so the buffer must be large enough to hold the encrypted data. Depending on what processor modes a provider supports, BCryptEncrypt can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptEncrypt function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptEncrypt",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to encrypt the data. This handle is obtained from one of the key creation functions, such as BCryptGenerateSymmetricKey, BCryptGenerateKeyPair, or BCryptImportKey."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "The address of a buffer that contains the plaintext to be encrypted. The cbInput parameter contains the size of the plaintext to encrypt. For more information, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer to encrypt."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. This parameter is only used with asymmetric keys and authenticated encryption modes. If an  authenticated encryption mode is used, this parameter must point to a BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO structure. If asymmetric keys are used, the type of structure this parameter points to is determined by the value of the dwFlags parameter. Otherwise, the parameter  must be set to NULL."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PUCHAR",
        "name": "pbIV",
        "description": "The address of a buffer that contains the initialization vector (IV) to use during encryption. The cbIV parameter contains the size of this buffer. This function will modify the contents of this buffer. If you need to reuse the IV later, make sure you make a copy of this buffer before calling this function. This parameter is optional and can be NULL if no IV is used.  The required size of the IV can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property. This will provide the size of a block for the algorithm, which is also the size of the IV."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbIV",
        "description": "The size, in bytes, of the pbIV buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PUCHAR",
        "name": "pbOutput",
        "description": "The address of the buffer that receives the ciphertext produced by this function. The cbOutput parameter contains the size of this buffer. For more information, see Remarks. If this parameter is NULL, the BCryptEncrypt function calculates the size needed for the ciphertext of the data passed in the pbInput parameter. In this case, the location pointed to by the pcbResult parameter contains this size, and the  function returns STATUS_SUCCESS. The pPaddingInfo parameter is not modified. If the values of both the pbOutput and pbInput parameters are NULL, an error is returned unless  an authenticated encryption algorithm is in use. In the latter case, the call is treated as an authenticated encryption call with zero length data, and the authentication tag is returned in the pPaddingInfo parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG variable that receives the number of bytes copied to the pbOutput buffer. If pbOutput is NULL, this receives the size, in bytes, required for the ciphertext."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the hKey parameter.  If the key is a symmetric key, this can be zero or the following value.   ValueMeaning  BCRYPT_BLOCK_PADDING   Allows the encryption algorithm to pad the data to the next block size. If this flag is not specified, the size of the plaintext specified in the cbInput parameter must be a multiple of the algorithm's block size.  The block size can be obtained by calling the BCryptGetProperty function to get the BCRYPT_BLOCK_LENGTH property for the key. This will provide the size of a block for the algorithm. This flag must not be used with the authenticated encryption modes (AES-CCM and AES-GCM).      If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  BCRYPT_PAD_NONE   Do not use any padding. The pPaddingInfo parameter is not used. The size of the plaintext specified in the cbInput parameter must be a multiple of the algorithm's block size.   BCRYPT_PAD_OAEP   Use the Optimal Asymmetric Encryption Padding (OAEP) scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_OAEP_PADDING_INFO structure.   BCRYPT_PAD_PKCS1   The data will be padded with a random number to round out the block size. The pPaddingInfo parameter is not used."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptExportKey function exports a key to a memory BLOB that can be persisted for later use.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptExportKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptExportKey function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptExportKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to export."
      },
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hExportKey",
        "description": "The handle of the key with which to wrap the exported key. Use this parameter when exporting BLOBs of type BCRYPT_AES_WRAP_KEY_BLOB; otherwise, set it to NULL.Note  The hExportKey handle must be supplied by the same provider that supplied the hKey handle, and hExportKey must be a handle to a symmetric key that can be used in the Advanced Encryption Standard (AES) key wrap algorithm. When the hKey handle is from the Microsoft provider, hExportKey must be an AES key handle.   Windows Server 2008 and Windows Vista:  This parameter is not used and should be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB to export. This can be one of the following values.  ValueMeaning  BCRYPT_AES_WRAP_KEY_BLOB   Export  an AES key wrapped key. The hExportKey parameter must reference a valid BCRYPT_KEY_HANDLE pointer to the key encryption key, and the key represented by the hKey parameter must be a multiple of 8 bytes long. Windows Server 2008 and Windows Vista:  This BLOB type is not supported.   BCRYPT_DH_PRIVATE_BLOB   Export a Diffie-Hellman public/private key pair. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_DH_PUBLIC_BLOB   Export a Diffie-Hellman public key. The pbOutput buffer receives a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_DSA_PRIVATE_BLOB   Export a DSA public/private key pair. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8:  Support for BCRYPT_DSA_KEY_BLOB_V2 begins.   BCRYPT_DSA_PUBLIC_BLOB   Export a DSA public key. The pbOutput buffer receives a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately followed by the key data.  BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8:  Support for BCRYPT_DSA_KEY_BLOB_V2 begins.   BCRYPT_ECCPRIVATE_BLOB   Export an elliptic curve cryptography (ECC) private key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.   BCRYPT_ECCPUBLIC_BLOB   Export an ECC public key. The pbOutput buffer receives a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.   BCRYPT_KEY_DATA_BLOB   Export a symmetric key to a data BLOB. The pbOutput buffer receives a BCRYPT_KEY_DATA_BLOB_HEADER structure immediately followed by the key BLOB.   BCRYPT_OPAQUE_KEY_BLOB   Export a symmetric key in a format that is specific to a single cryptographic service provider (CSP). Opaque BLOBs are not transferable and must be imported by using the same CSP that generated the BLOB. Opaque BLOBs are only intended to be used for interprocess transfer of keys and are not suitable to be persisted and read across versions of a provider.   BCRYPT_PUBLIC_KEY_BLOB   Export a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.   BCRYPT_PRIVATE_KEY_BLOB   Export a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.   BCRYPT_RSAFULLPRIVATE_BLOB   Export a full RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data. This BLOB will include additional key material compared to the BCRYPT_RSAPRIVATE_BLOB type.   BCRYPT_RSAPRIVATE_BLOB   Export an RSA public/private key pair. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.   BCRYPT_RSAPUBLIC_BLOB   Export an RSA public key. The pbOutput buffer receives a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.   LEGACY_DH_PRIVATE_BLOB   Export a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that can be imported by using CryptoAPI.   LEGACY_DH_PUBLIC_BLOB   Export a legacy Diffie-Hellman Version 3 Public Key BLOB that contains a Diffie-Hellman public key that can be imported by using CryptoAPI.   LEGACY_DSA_PRIVATE_BLOB   Export a DSA public/private key pair in a form that can be imported by using CryptoAPI.   LEGACY_DSA_PUBLIC_BLOB   Export a DSA public key in a form that can be imported by using CryptoAPI.   LEGACY_DSA_V2_PRIVATE_BLOB   Export a DSA version 2 private key in a form that can be imported by using CryptoAPI.   LEGACY_RSAPRIVATE_BLOB   Export an RSA public/private key pair in a form that can be imported by using CryptoAPI.   LEGACY_RSAPUBLIC_BLOB   Export an RSA public key in a form that can be imported by using CryptoAPI."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the key BLOB. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will place the required size, in bytes, in the ULONG pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "Contains the size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput parameter is NULL, this function will place the required size, in bytes, in the ULONG pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The BCryptFinalizeKeyPair function completes a public/private key pair. The key cannot be used until this function has been called. After this function has been called, the BCryptSetProperty function can no longer be used for this key.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptFinalizeKeyPair can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptFinalizeKeyPair",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to complete. This handle is obtained by calling the BCryptGenerateKeyPair function."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptFinishHash function retrieves the hash or Message Authentication Code (MAC) value for the data accumulated from prior calls to BCryptHashData.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptFinishHash can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptFinishHash function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptFinishHash",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_HASH_HANDLE",
        "name": "hHash",
        "description": "The handle of the hash or MAC object to use to compute the hash or MAC. This handle is obtained by calling the BCryptCreateHash function. After this function has been called, the hash handle passed to this function cannot be used again except in a call to BCryptDestroyHash."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbOutput",
        "description": "A pointer to a buffer that receives the hash or MAC value. The cbOutput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This size must exactly match the size of the hash or MAC value. The size can be obtained by calling the BCryptGetProperty function to get the BCRYPT_HASH_LENGTH property. This will provide the size of the hash or MAC value for the specified algorithm."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The BCryptFreeBuffer function is used to free memory that was allocated by one of the CNG functions.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "This function does not return a value. ",
    "remarks": "BCryptFreeBuffer must be called in the same processor mode as the BCrypt API function that allocated the buffer. In addition, if the buffer was allocated at PASSIVE_LEVEL IRQL, it must be freed at that IRQL. If the buffer was allocated at DISPATCH_LEVEL IRQL, it can be freed at either DISPATCH_LEVEL IRQL or PASSIVE_LEVEL IRQL. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "VOID",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptFreeBuffer",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvBuffer",
        "description": "A pointer to the memory buffer to be freed."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptGenerateKeyPair function creates an empty public/private key pair. After you create a key by using this function, you can use the BCryptSetProperty function to set its properties; however, the key cannot be used until the BCryptFinalizeKeyPair function is called.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptGenerateKeyPair can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptGenerateKeyPair function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptGenerateKeyPair",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "Handle of an algorithm provider that supports signing, asymmetric encryption, or key agreement. This handle must have been created by using the BCryptOpenAlgorithmProvider function."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE that receives the handle of the key. This handle is used in subsequent functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the BCryptDestroyKey function."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwLength",
        "description": "The length, in bits, of the key. Algorithm providers have different key size restrictions for each standard asymmetric algorithm.  Algorithm identifierMeaning  BCRYPT_DH_ALGORITHM   The key size must be greater than or equal to 512 bits, less than or equal to 4096 bits, and must be a multiple of 64.   BCRYPT_DSA_ALGORITHM   Prior to Windows 8, the key size must be greater than or equal to 512 bits, less than or equal to 1024 bits, and must be a multiple of 64.  Beginning with Windows 8, the key size must be greater than or equal to 512 bits, less than or equal to 3072 bits, and must be a multiple of 64. Processing for key sizes less than or equal to 1024 bits adheres to FIPS-186-2. Processing for key sizes greater than 1024 and less than or equal to 3072 adheres to FIPS 186-3.   BCRYPT_ECDH_P256_ALGORITHM   The key size must be 256 bits.   BCRYPT_ECDH_P384_ALGORITHM   The key size must be 384 bits.   BCRYPT_ECDH_P521_ALGORITHM   The key size must be 521 bits.   BCRYPT_ECDSA_P256_ALGORITHM   The key size must be 256 bits.   BCRYPT_ECDSA_P384_ALGORITHM   The key size must be 384 bits.   BCRYPT_ECDSA_P521_ALGORITHM   The key size must be 521 bits.   BCRYPT_RSA_ALGORITHM   The key size must be greater than or equal to 512 bits, less than or equal to 16384 bits, and must be a multiple of 64."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptGenerateSymmetricKey function creates a key object for use with  a symmetrical key encryption algorithm from a supplied key.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptGenerateSymmetricKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptGenerateSymmetricKey function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptGenerateSymmetricKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "The handle of an algorithm provider created with the BCryptOpenAlgorithmProvider function. The algorithm specified when the provider was created must support symmetric key encryption."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE that receives the handle of the key. This handle is used in subsequent functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the BCryptDestroyKey function."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PUCHAR",
        "name": "pbKeyObject",
        "description": "A pointer to a buffer that receives the key object. The cbKeyObject parameter contains the size of this buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the BCRYPT_OBJECT_LENGTH property. This will provide the size of the key object for the specified algorithm. This memory can only be freed after the phKey key handle is destroyed. If the value of this parameter is NULL and the value of the cbKeyObject parameter is zero, the memory for the key object is allocated and freed by this function.Windows 7:  This memory management functionality is available beginning with Windows 7."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbKeyObject",
        "description": "The size, in bytes, of the pbKeyObject buffer. If the value of this parameter is zero and the value of the pbKeyObject parameter is NULL, the memory for the key object is allocated and freed by this function.Windows 7:  This memory management functionality is available beginning with Windows 7."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbSecret",
        "description": "Pointer to a buffer that contains the key from which to create the key object. The cbSecret parameter contains the size of this buffer. This is normally a hash of a password or some other reproducible data. If the data passed in exceeds the target key size, the data will be truncated and the excess will be ignored. Note  We strongly recommended that applications pass in the exact number of bytes required by the target key."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSecret",
        "description": "The size, in bytes, of the pbSecret buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptGenRandom function generates a random number.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "The default random number provider implements an algorithm for generating random numbers that complies with the NIST SP800-90 standard, specifically the  CTR_DRBG portion of that standard. Windows Vista:  Prior to Windows Vista with Service Pack 1 (SP1) the default random number provider implements an algorithm for generating random numbers that complies with the FIPS 186-2 standard. Depending on what processor modes a provider supports, BCryptGenRandom can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptGenRandom function must refer to nonpaged (or locked) memory. Windows Vista:  The Microsoft provider does not support calling at DISPATCH_LEVEL. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptGenRandom",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "The handle of an algorithm provider created by using the BCryptOpenAlgorithmProvider function. The algorithm that was specified when the provider was created must support the random number generator interface."
      },
      {
        "in_out": "_Inout_",
        "type": "PUCHAR",
        "name": "pbBuffer",
        "description": "The address of a buffer that receives the random number. The size of this buffer is specified by the cbBuffer parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbBuffer",
        "description": "The size, in bytes, of the pbBuffer buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This parameter can be zero or the following value.  ValueMeaning  BCRYPT_RNG_USE_ENTROPY_IN_BUFFER 0x00000001   This function will use the number in the pbBuffer buffer as additional entropy for the random number. If this flag is not specified, this function will use a random number for the entropy. Windows 8 and later:  This flag is ignored in  Windows 8 and later.   BCRYPT_USE_SYSTEM_PREFERRED_RNG 0x00000002   Use the system-preferred random number generator algorithm. The hAlgorithm parameter must be NULL. BCRYPT_USE_SYSTEM_PREFERRED_RNG is only supported at PASSIVE_LEVEL IRQL. For more information, see Remarks. Windows Vista:  This flag is not supported."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The BCryptGetProperty function retrieves the value of a named property for a CNG object.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "To obtain the required size for a property, pass NULL for the pbOutput parameter. This function will place the required size, in bytes, in the value pointed to by the pcbResult parameter. Depending on what processor modes a provider supports, BCryptGetProperty can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, any pointers passed to the BCryptGetProperty function must refer to nonpaged (or locked) memory. If the object specified in the hObject parameter is a handle, it must have been opened by using the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptGetProperty",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_HANDLE",
        "name": "hObject",
        "description": "A handle that represents the CNG object to obtain the property value for."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to retrieve. This can be one of the predefined Cryptography Primitive Property Identifiers or a custom property identifier."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbOutput",
        "description": "The address of a buffer that receives the property value. The cbOutput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG variable that receives the number of bytes that were copied to the pbOutput buffer. If the pbOutput parameter is NULL, this function will place the required size, in bytes, in the location pointed to by this parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptHashData function performs a one way hash or Message Authentication Code (MAC) on a data buffer.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "To combine more than one buffer into the hash or MAC, you can call this function multiple times, passing a different buffer each time. To obtain the hash or MAC value, call the BCryptFinishHash function. After the BCryptFinishHash function has been called for a specified  handle, that handle cannot be reused. Depending on what processor modes a provider supports, BCryptHashData can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hHash parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptHashData function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptHashData",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_HASH_HANDLE",
        "name": "hHash",
        "description": "The handle of the hash or MAC object to use to perform the operation. This handle is obtained by calling the BCryptCreateHash function."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "A pointer to a buffer that contains the data to process. The cbInput parameter contains the number of bytes in this buffer. This function does not modify the contents of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 9,
    "description": "The BCryptImportKey function imports a symmetric key from a key BLOB. The BCryptImportKeyPair function is used to import a public/private key pair.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptImportKey can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptImportKey function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptImportKey",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function."
      },
      {
        "in_out": "_In_opt_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hImportKey",
        "description": "The handle of the key encryption key needed to unwrap the key BLOB in the pbInput parameter.Note  The handle must be supplied by the same provider that supplied the key that is being imported.   Windows Server 2008 and Windows Vista:  This parameter is not used and should be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput buffer. ..."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE that receives the handle of the imported key. This handle is used in subsequent functions that require a key, such as BCryptEncrypt. This handle must be released when it is no longer needed by passing it to the BCryptDestroyKey function."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PUCHAR",
        "name": "pbKeyObject",
        "description": "A pointer to a buffer that receives the imported key object. The cbKeyObject parameter contains the size of this buffer. The required size of this buffer can be obtained by calling the BCryptGetProperty function to get the BCRYPT_OBJECT_LENGTH property. This will provide the size of the key object for the specified algorithm. This memory can only be freed after the phKey key handle is destroyed."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbKeyObject",
        "description": "The size, in bytes, of the pbKeyObject buffer."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The pszBlobType parameter specifies the type of key BLOB this buffer contains."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The size, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are currently defined, so this parameter should be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptImportKeyPair function imports a public/private key pair from a key BLOB. The BCryptImportKey function is used to import a symmetric key pair.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptImportKeyPair can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hAlgorithm parameter must have been opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptImportKeyPair function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptImportKeyPair",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_ALG_HANDLE",
        "name": "hAlgorithm",
        "description": "The handle of the algorithm provider to import the key. This handle is obtained by calling the BCryptOpenAlgorithmProvider function."
      },
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hImportKey",
        "description": "This parameter is not currently used and should be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszBlobType",
        "description": "A null-terminated Unicode string that contains an identifier that specifies the type of BLOB that is contained in the pbInput buffer. This can be one of the following values.  ValueMeaning  BCRYPT_DH_PRIVATE_BLOB   The BLOB is a Diffie-Hellman public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_DH_PUBLIC_BLOB   The BLOB is a Diffie-Hellman public key BLOB. The pbInput buffer must contain a BCRYPT_DH_KEY_BLOB structure immediately followed by the key data.   BCRYPT_DSA_PRIVATE_BLOB   The BLOB is a DSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8:  Support for BCRYPT_DSA_KEY_BLOB_V2 begins.   BCRYPT_DSA_PUBLIC_BLOB   The BLOB is a DSA public key BLOB. The pbInput buffer must contain a BCRYPT_DSA_KEY_BLOB or BCRYPT_DSA_KEY_BLOB_V2 structure immediately followed by the key data. BCRYPT_DSA_KEY_BLOB is used for key lengths from 512 to 1024 bits. BCRYPT_DSA_KEY_BLOB_V2 is used for key lengths that exceed 1024 bits but are less than or equal to 3072 bits. Windows 8:  Support for BCRYPT_DSA_KEY_BLOB_V2 begins.   BCRYPT_ECCPRIVATE_BLOB   The BLOB is an elliptic curve cryptography (ECC) private key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.    BCRYPT_ECCPUBLIC_BLOB   The BLOB is an ECC public key. The pbInput buffer must contain a BCRYPT_ECCKEY_BLOB structure immediately followed by the key data.   BCRYPT_PUBLIC_KEY_BLOB   The BLOB is a generic public key of any type. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.   BCRYPT_PRIVATE_KEY_BLOB   The BLOB is a generic private key of any type. The private key does not necessarily contain the public key. The type of key in this BLOB is determined by the Magic member of the BCRYPT_KEY_BLOB structure.   BCRYPT_RSAPRIVATE_BLOB   The BLOB is an RSA public/private key pair BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.   BCRYPT_RSAPUBLIC_BLOB   The BLOB is an RSA public key BLOB. The pbInput buffer must contain a BCRYPT_RSAKEY_BLOB structure immediately followed by the key data.   LEGACY_DH_PUBLIC_BLOB   The BLOB is a Diffie-Hellman public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support importing this BLOB type.   LEGACY_DH_PRIVATE_BLOB   The BLOB is a legacy Diffie-Hellman Version 3 Private Key BLOB that contains a Diffie-Hellman public/private key pair that was exported by using CryptoAPI.   LEGACY_DSA_PRIVATE_BLOB   The BLOB is a DSA public/private key pair BLOB that was exported by using CryptoAPI.   LEGACY_DSA_PUBLIC_BLOB   The BLOB is a DSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support importing this BLOB type.   LEGACY_DSA_V2_PRIVATE_BLOB   The BLOB is a DSA version 2 private key in a form that can be imported by using CryptoAPI.   LEGACY_RSAPRIVATE_BLOB   The BLOB is an RSA public/private key pair BLOB that was exported by using CryptoAPI.   LEGACY_RSAPUBLIC_BLOB   The BLOB is an RSA public key BLOB that was exported by using CryptoAPI. The Microsoft primitive provider does not support importing this BLOB type."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE that receives the handle of the imported key. This handle is used in subsequent functions that require a key, such as BCryptSignHash. This handle must be released when it is no longer needed by passing it to the BCryptDestroyKey function."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "The address of a buffer that contains the key BLOB to import. The cbInput parameter contains the size of this buffer. The pszBlobType parameter specifies the type of key BLOB this buffer contains."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The size, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or the following value.  ValueMeaning  BCRYPT_NO_KEY_VALIDATION   Do not validate the public portion of the key pair."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The BCryptKeyDerivation  function derives a key without requiring a secret agreement. It is similar in functionality to BCryptDeriveKey but does not require a BCRYPT_SECRET_HANDLE value as input.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function. ",
    "remarks": "You can use the following algorithm identifiers in the BCryptOpenAlgorithmProvider function before calling BCryptKeyDerivation: To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptKeyDerivation",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "Handle of the input key."
      },
      {
        "in_out": "_In_opt_",
        "type": "BCryptBufferDesc*",
        "name": "pParameterList",
        "description": "Pointer to a  BCryptBufferDesc structure that contains the KDF parameters. ..."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "pbDerivedKey",
        "description": "Address of a buffer that receives the key. The cbDerivedKey parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbDerivedKey",
        "description": "Size, in bytes, of the buffer pointed to by the pbDerivedKey parameter."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "Pointer to a variable that receives the number of bytes that were copied to the buffer pointed to by the pbDerivedKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Flags that modify the behavior of this function. The following value can be used with the Microsoft Primitive provider.  ValueMeaning   BCRYPT_CAPI_AES_FLAG   Specifies that the target algorithm is AES and that the key therefore must be double expanded. This flag is only valid with the CAPI_KDF algorithm."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptOpenAlgorithmProvider function loads and initializes a CNG provider.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Because of the number and type of operations that are required to find, load, and initialize an algorithm provider, the BCryptOpenAlgorithmProvider function is a relatively time intensive function. Because of this, we recommend that you cache any algorithm provider handles that you will use more than once, rather than opening and closing the algorithm providers over and over. BCryptOpenAlgorithmProvider can be called either from user mode or kernel mode. Kernel mode callers must be executing at PASSIVE_LEVEL IRQL. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. Starting in Windows 10, CNG no longer follows every update to the cryptography configuration. Certain changes, like adding a new default provider or changing the preference order of algorithm providers, may require a reboot. Because of this, you should reboot before calling BCryptOpenAlgorithmProvider    with any newly configured provider. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptOpenAlgorithmProvider",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "BCRYPT_ALG_HANDLE*",
        "name": "phAlgorithm",
        "description": "A pointer to a BCRYPT_ALG_HANDLE variable that receives the CNG provider handle. When you have finished using this handle, release it by passing it to the BCryptCloseAlgorithmProvider function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszAlgId",
        "description": "A pointer to a null-terminated Unicode string that identifies the requested cryptographic algorithm. This can be one of the standard CNG Algorithm Identifiers or the identifier for another registered algorithm."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszImplementation",
        "description": "A pointer to a null-terminated Unicode string that identifies the specific provider to load. This is the registered alias of the cryptographic primitive provider. This parameter is optional and can be NULL if it is not needed. If this parameter is NULL, the default provider for the specified algorithm will be loaded.  Note  If the pszImplementation parameter value  is NULL, CNG attempts to open each registered provider, in order of priority, for the algorithm specified by the pszAlgId parameter and returns the handle of the first  provider that is successfully opened. For the lifetime of the handle, any BCrypt*** cryptographic APIs will use the provider that was successfully opened.   Windows Server 2008 and Windows Vista:  CNG attempts to fall back to the Microsoft CNG provider.  The following are the predefined provider names.  ValueMeaning  MS_PRIMITIVE_PROVIDER \"Microsoft Primitive Provider\"   Identifies the basic Microsoft CNG provider."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values.  ValueMeaning  BCRYPT_ALG_HANDLE_HMAC_FLAG   The provider will perform the Hash-Based Message Authentication Code (HMAC) algorithm with the specified hash algorithm. This flag is only used by hash algorithm providers.   BCRYPT_PROV_DISPATCH   Loads the provider into the nonpaged memory pool. If this flag is not present, the provider is loaded into the paged memory pool. When this flag is specified, the handle returned must not be closed before all dependent objects have been freed. Note  This flag is only supported in kernel mode and allows subsequent operations on the provider to be processed at the Dispatch level. If the provider does not support being called at dispatch level, then it will return an error when opened using this flag.   Windows Server 2008 and Windows Vista:  This flag is only supported by the Microsoft algorithm providers and only for hashing algorithms and symmetric key cryptographic algorithms.     BCRYPT_HASH_REUSABLE_FLAG   Creates a reusable hashing object. The object can be used for a new hashing operation immediately after calling BCryptFinishHash. For more information, see Creating a Hash with CNG. Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista:  This flag is not supported."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The BCryptSecretAgreement function creates a secret agreement value from a private and a public key.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptSecretAgreement can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handles provided in the hPrivKey and hPubKey  parameters must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptSecretAgreement function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptSecretAgreement",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hPrivKey",
        "description": "The handle of the private key to use to create the secret agreement value. This key and the hPubKey key must come from the same CNG cryptographic algorithm provider."
      },
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hPubKey",
        "description": "The handle of the public key to use to create the secret agreement value. This key and the hPrivKey key must come from the same CNG cryptographic algorithm provider."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_SECRET_HANDLE*",
        "name": "phSecret",
        "description": "A pointer to a BCRYPT_SECRET_HANDLE that receives a handle that represents the secret agreement value. This handle must be released by passing it to the BCryptDestroySecret function when it is no longer needed."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The BCryptSetProperty function sets the value of a named property for a CNG object.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "Depending on what processor modes a provider supports, BCryptSetProperty can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, any pointers passed to BCryptSetProperty must refer to nonpaged (or locked) memory. If the object specified in the hObject parameter is a handle, it must have been opened by using the BCRYPT_PROV_DISPATCH flag. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptSetProperty",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BCRYPT_HANDLE",
        "name": "hObject",
        "description": "A handle that represents the CNG object to set the property value for."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProperty",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the property to set. This can be one of the predefined Cryptography Primitive Property Identifiers or a custom property identifier."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbInput",
        "description": "The address of a buffer that contains the new property value. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The size, in bytes, of the pbInput buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The BCryptSignHash function creates a signature of a hash value.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function will encrypt the hash value with the specified key to create the signature. To later verify that the signature is valid, call the BCryptVerifySignature function with an identical key and an identical hash of the original data. Depending on what processor modes a provider supports, BCryptSignHash can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened with the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptSignHash function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptSignHash",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to sign the hash."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbInput",
        "description": "A pointer to a buffer that contains the hash value to sign. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbInput",
        "description": "The number of bytes in the pbInput buffer to sign."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbOutput",
        "description": "The address of a buffer to receive the signature produced by this function. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will calculate the size required for the signature and return the size in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOutput",
        "description": "The size, in bytes, of the pbOutput buffer. This parameter is ignored if the pbOutput parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbResult",
        "description": "A pointer to a ULONG variable that receives the number of bytes copied to the pbOutput buffer.  If pbOutput is NULL, this receives the size, in bytes, required for the signature."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the hKey parameter.  This can be one of the following values.  ValueMeaning  BCRYPT_PAD_PKCS1   Use the PKCS1 padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.   BCRYPT_PAD_PSS   Use the Probabilistic Signature Scheme (PSS) padding scheme. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The BCryptVerifySignature function verifies that the specified signature matches the specified hash.",
    "library": "Bcrypt.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Bcrypt.h",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "This function decrypts the signature with the provided key and then compares the decrypted value to the specified hash value. To use this function, you must hash the data by using the same hashing algorithm that was used to create the hash value that was signed. If applicable, you must also specify the same padding scheme that was specified when the signature was created. Depending on what processor modes a provider supports, BCryptVerifySignature can be called either from user mode or kernel mode. Kernel mode callers can execute either at PASSIVE_LEVEL IRQL or DISPATCH_LEVEL IRQL. If the current IRQL level is DISPATCH_LEVEL, the handle provided in the hKey parameter must be derived from an algorithm handle returned by a provider that was opened by using the BCRYPT_PROV_DISPATCH flag, and any pointers passed to the BCryptVerifySignature function must refer to nonpaged (or locked) memory. To call this function in kernel mode, use Cng.lib, which is part of the Driver Development Kit (DDK). For more information, see WDK and Developer Tools. Windows Server 2008 and Windows Vista:  To call this function in kernel mode, use Ksecdd.lib. ",
    "return_type": "NTSTATUS",
    "category": "CNG Cryptographic Primitive",
    "name": "BCryptVerifySignature",
    "is_callback": 0,
    "dll": "Bcrypt.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key to use to decrypt the signature. This must be an identical key or the public key portion of the key pair used to sign the data with the BCryptSignHash function."
      },
      {
        "in_out": "_In_opt_",
        "type": "VOID*",
        "name": "pPaddingInfo",
        "description": "A pointer to a structure that contains padding information. The actual type of structure this parameter points to depends on the value of the dwFlags parameter. This parameter is only used with asymmetric keys and must be NULL otherwise."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbHash",
        "description": "The address of a buffer that contains the hash of the data. The cbHash parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbHash",
        "description": "The size, in bytes, of the pbHash buffer."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "pbSignature",
        "description": "The address of a buffer that contains the signed hash of the data. The BCryptSignHash function is used to create the signature. The cbSignature parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer. The BCryptSignHash function is used to create the signature."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. The allowed set of flags depends on the type of key specified by the hKey parameter. If the key is a symmetric key, this parameter is not used and should be zero.  If the key is an asymmetric key, this can be one of the following values.  ValueMeaning  BCRYPT_PAD_PKCS1   The PKCS1 padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a BCRYPT_PKCS1_PADDING_INFO structure.   BCRYPT_PAD_PSS   The Probabilistic Signature Scheme (PSS) padding scheme was used when the signature was created. The pPaddingInfo parameter is a pointer to a BCRYPT_PSS_PADDING_INFO structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  }
]