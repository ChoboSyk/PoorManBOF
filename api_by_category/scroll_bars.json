[
  {
    "n_arguments": 3,
    "description": "The EnableScrollBar function enables or disables one or both scroll bar arrows.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the arrows are enabled or disabled as specified, the return value is nonzero. If the arrows are already in the requested state or an error occurs, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "EnableScrollBar",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a window or a scroll bar control, depending on the value of the  \t\t\t\t\twSBflags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wSBflags",
        "description": "Type: UINT Specifies the scroll bar type. This parameter can be one of the following values.   ValueMeaning  SB_BOTH   Enables or disables the arrows on the horizontal and vertical scroll bars associated with the specified window. The  \t\t\t\t\t\thWnd parameter must be the handle to the window.   SB_CTL   Indicates that the scroll bar is a scroll bar control. The  \t\t\t\t\t\thWnd must be the handle to the scroll bar control.   SB_HORZ   Enables or disables the arrows on the horizontal scroll bar associated with the specified window. The  \t\t\t\t\t\thWnd parameter must be the handle to the window.   SB_VERT   Enables or disables the arrows on the vertical scroll bar associated with the specified window. The  \t\t\t\t\t\thWnd parameter must be the handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wArrows",
        "description": "Type: UINT Specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled. This parameter can be one of the following values.   ValueMeaning  ESB_DISABLE_BOTH   Disables both arrows on a scroll bar.   ESB_DISABLE_DOWN   Disables the down arrow on a vertical scroll bar.   ESB_DISABLE_LEFT   Disables the left arrow on a horizontal scroll bar.   ESB_DISABLE_LTUP   Disables the left arrow on a horizontal scroll bar or the up arrow of a vertical scroll bar.   ESB_DISABLE_RIGHT   Disables the right arrow on a horizontal scroll bar.   ESB_DISABLE_RTDN   Disables the right arrow on a horizontal scroll bar or the down arrow of a vertical scroll bar.   ESB_DISABLE_UP   Disables the up arrow on a vertical scroll bar.   ESB_ENABLE_BOTH   Enables both arrows on a scroll bar."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetScrollBarInfo function retrieves information about the specified scroll bar.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If idObject is OBJID_CLIENT and the window specified by hwnd is not a system scroll bar control, the system sends the SBM_GETSCROLLBARINFO message to the window to obtain scroll bar information.  This allows GetScrollBarInfo to operate on a custom control that mimics a scroll bar.  If the window does not handle the SBM_GETSCROLLBARINFO message, the GetScrollBarInfo function fails. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "GetScrollBarInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Handle to a window associated with the scroll bar whose information is to be retrieved. If the  \t\t\t\t\tidObject parameter is OBJID_CLIENT,  \t\t\t\t\thwnd is a handle to a scroll bar control. Otherwise,  \t\t\t\t\thwnd is a handle to a window created with WS_VSCROLL and/or WS_HSCROLL style."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "idObject",
        "description": "Type: LONG Specifies the scroll bar object. This parameter can be one of the following values.   ValueMeaning  OBJID_CLIENT   The  \t\t\t\t\t\thwnd parameter is a handle to a scroll bar control.   OBJID_HSCROLL   The horizontal scroll bar of the  \t\t\t\t\t\thwnd window.    OBJID_VSCROLL   The vertical scroll bar of the  \t\t\t\t\t\thwnd window."
      },
      {
        "in_out": "_Out_",
        "type": "PSCROLLBARINFO",
        "name": "psbi",
        "description": "Type: PSCROLLBARINFO Pointer to a SCROLLBARINFO structure to receive the information. Before calling GetScrollBarInfo, set the  \t\t\t\t\tcbSize member to  \t\t\t\t\tsizeof(SCROLLBARINFO)."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetScrollInfo function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function retrieved any values, the return value is nonzero. If the function does not retrieve any values, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The GetScrollInfo function enables applications to use 32-bit scroll positions. Although the messages that indicate scroll bar position, WM_HSCROLL and WM_VSCROLL, provide only 16 bits of position data, the functions SetScrollInfo and GetScrollInfo provide 32 bits of scroll bar position data. Thus, an application can call GetScrollInfo while processing either the WM_HSCROLL or WM_VSCROLL messages to obtain 32-bit scroll bar position data. To get the 32-bit position of the scroll box (thumb) during a SB_THUMBTRACK request code in a WM_HSCROLL or WM_VSCROLL message, call GetScrollInfo with the SIF_TRACKPOS value in the  \t\t\t\tfMask member of the SCROLLINFO structure. The function returns the tracking position of the scroll box in the  \t\t\t\tnTrackPos member of the SCROLLINFO structure. This allows you to get the position of the scroll box as the user moves it. The following sample code illustrates the technique. If the fnBar parameter is SB_CTL and the window specified by the hwnd parameter is not a system scroll bar control, the system sends the SBM_GETSCROLLINFO message to the window to obtain scroll bar information. This allows GetScrollInfo to operate on a custom control that mimics a scroll bar. If the window does not handle the SBM_GETSCROLLINFO message, the GetScrollInfo function fails. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "GetScrollInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\tfnBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "fnBar",
        "description": "Type: int Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Retrieves the parameters for a scroll bar control. The  \t\t\t\t\t\thwnd parameter must be the handle to the scroll bar control.    SB_HORZ   Retrieves the parameters for the window's standard horizontal scroll bar.    SB_VERT   Retrieves the parameters for the window's standard vertical scroll bar."
      },
      {
        "in_out": "_Inout_",
        "type": "LPSCROLLINFO",
        "name": "lpsi",
        "description": "Type: LPSCROLLINFO Pointer to a SCROLLINFO structure. Before calling GetScrollInfo, set the  \t\t\t\t\tcbSize member to  \t\t\t\t\tsizeof(SCROLLINFO), and set the  \t\t\t\t\tfMask member to specify the scroll bar parameters to retrieve. Before returning, the function copies the specified parameters to the appropriate members of the structure. The  \t\t\t\t\tfMask member can be one or more of the following values.  ValueMeaning  SIF_PAGE   Copies the scroll page to the  \t\t\t\t\t\tnPage member of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi.   SIF_POS   Copies the scroll position to the  \t\t\t\t\t\tnPos member of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi.   SIF_RANGE   Copies the scroll range to the  \t\t\t\t\t\tnMin and  \t\t\t\t\t\tnMax members of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi.   SIF_TRACKPOS   Copies the current scroll box tracking position to the  \t\t\t\t\t\tnTrackPos member of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The GetScrollPos function retrieves the current position of the scroll box (thumb) in the specified scroll bar. The current position is a relative value that depends on the current scrolling range. For example, if the scrolling range is 0 through 100 and the scroll box is in the middle of the bar, the current position is 50.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the current position of the scroll box. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The GetScrollPos function enables applications to use 32-bit scroll positions. Although the messages that indicate scroll bar position, WM_HSCROLL and WM_VSCROLL, are limited to 16 bits of position data, the functions SetScrollPos, SetScrollRange, GetScrollPos, and GetScrollRange support 32-bit scroll bar position data. Thus, an application can call GetScrollPos while processing either the WM_HSCROLL or WM_VSCROLL messages to obtain 32-bit scroll bar position data. To get the 32-bit position of the scroll box (thumb) during a SB_THUMBTRACK request code in a WM_HSCROLL or WM_VSCROLL message, use the GetScrollInfo function. If the nBar parameter is SB_CTL and the window specified by the hWnd parameter is not a system scroll bar control, the system sends the SBM_GETPOS message to the window to obtain scroll bar information.  This allows GetScrollPos to operate on a custom control that mimics a scroll bar.  If the window does not handle the SBM_GETPOS message, the GetScrollPos function fails. ",
    "return_type": "int",
    "category": "Scroll Bars",
    "name": "GetScrollPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\tnBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nBar",
        "description": "Type: int Specifies the scroll bar to be examined. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Retrieves the position of the scroll box in a scroll bar control. The  \t\t\t\t\t\thWnd parameter must be the handle to the scroll bar control.   SB_HORZ   Retrieves the position of the scroll box in a window's standard horizontal scroll bar.   SB_VERT   Retrieves the position of the scroll box in a window's standard vertical scroll bar."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetScrollRange function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the specified window does not have standard scroll bars or is not a scroll bar control, the GetScrollRange function copies zero to the  \t\t\t\tlpMinPos and  \t\t\t\tlpMaxPos parameters. The default range for a standard scroll bar is 0 through 100. The default range for a scroll bar control is empty (both values are zero). The messages that indicate scroll bar position, WM_HSCROLL and WM_VSCROLL, are limited to 16 bits of position data. However, because SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. See the GetScrollInfo function for a description of the technique. If the nBar parameter is SB_CTL and the window specified by the hWnd parameter is not a system scroll bar control, the system sends the SBM_GETRANGE message to the window to obtain scroll bar information.  This allows GetScrollRange to operate on a custom control that mimics a scroll bar.  If the window does not handle the SBM_GETRANGE message, the GetScrollRange function fails. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "GetScrollRange",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\tnBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nBar",
        "description": "Type: int Specifies the scroll bar from which the positions are retrieved. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Retrieves the positions of a scroll bar control. The  \t\t\t\t\t\thWnd parameter must be the handle to the scroll bar control.   SB_HORZ   Retrieves the positions of the window's standard horizontal scroll bar.   SB_VERT   Retrieves the positions of the window's standard vertical scroll bar."
      },
      {
        "in_out": "_Out_",
        "type": "LPINT",
        "name": "lpMinPos",
        "description": "Type: LPINT Pointer to the integer variable that receives the minimum position."
      },
      {
        "in_out": "_Out_",
        "type": "LPINT",
        "name": "lpMaxPos",
        "description": "Type: LPINT Pointer to the integer variable that receives the maximum position."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The ScrollDC function scrolls a rectangle of bits horizontally and vertically.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the  \t\t\t\tlprcUpdate parameter is NULL, the system does not compute the update rectangle. If both the  \t\t\t\thrgnUpdate and  \t\t\t\tlprcUpdate parameters are NULL, the system does not compute the update region. If  \t\t\t\thrgnUpdate is not NULL, the system proceeds as though it contains a valid handle to the region uncovered by the scrolling process (defined by ScrollDC). When you must scroll the entire client area of a window, use the ScrollWindowEx function. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "ScrollDC",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDC",
        "name": "hDC",
        "description": "Type: HDC Handle to the device context that contains the bits to be scrolled."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "dx",
        "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "dy",
        "description": "Type: int Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "lprcScroll",
        "description": "Type: const RECT* Pointer to a RECT structure containing the coordinates of the bits to be scrolled. The only bits affected by the scroll operation are bits in the intersection of this rectangle and the rectangle specified by  \t\t\t\t\tlprcClip. If  \t\t\t\t\tlprcScroll is NULL, the entire client area is used."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "lprcClip",
        "description": "Type: const RECT* Pointer to a  \t\t\t\t\tRECT structure containing the coordinates of the clipping rectangle. The only bits that will be painted are the bits that remain inside this rectangle after the scroll operation has been completed. If  \t\t\t\t\tlprcClip is NULL, the entire client area is used."
      },
      {
        "in_out": "_In_",
        "type": "HRGN",
        "name": "hrgnUpdate",
        "description": "Type: HRGN Handle to the region uncovered by the scrolling process. ScrollDC defines this region; it is not necessarily a rectangle."
      },
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "lprcUpdate",
        "description": "Type: LPRECT Pointer to a RECT structure that receives the coordinates of the rectangle bounding the scrolling update region. This is the largest rectangular area that requires repainting. When the function returns, the values in the structure are in client coordinates, regardless of the mapping mode for the specified device context. This allows applications to use the update region in a call to the InvalidateRgn function, if required."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The ScrollWindow function scrolls the contents of the specified window's client area.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the caret is in the window being scrolled, ScrollWindow automatically hides the caret to prevent it from being erased and then restores the caret after the scrolling is finished. The caret position is adjusted accordingly. The area uncovered by ScrollWindow is not repainted, but it is combined into the window's update region. The application eventually receives a WM_PAINT message notifying it that the region must be repainted. To repaint the uncovered area at the same time the scrolling is in action, call the UpdateWindow function immediately after calling ScrollWindow. If the  \t\t\t\tlpRect parameter is NULL, the positions of any child windows in the window are offset by the amount specified by the  \t\t\t\tXAmount and  \t\t\t\tYAmount parameters; invalid (unpainted) areas in the window are also offset. ScrollWindow is faster when  \t\t\t\tlpRect is NULL. If  \t\t\t\tlpRect is not NULL, the positions of child windows are not changed and invalid areas in the window are not offset. To prevent updating problems when  \t\t\t\tlpRect is not NULL, call  \t\t\t\tUpdateWindow to repaint the window before calling ScrollWindow. For an example, see Scrolling Text with the WM_PAINT Message. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "ScrollWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to the window where the client area is to be scrolled."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "XAmount",
        "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window to the left."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "YAmount",
        "description": "Type: int Specifies the amount, in device units, of vertical scrolling. If the window being scrolled has the CS_OWNDC or CS_CLASSDC style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window up."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "lpRect",
        "description": "Type: const RECT* Pointer to the RECT structure specifying the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "lpClipRect",
        "description": "Type: const RECT* Pointer to the  \t\t\t\t\tRECT structure containing the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The ScrollWindowEx function scrolls the contents of the specified window's client area.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is SIMPLEREGION (rectangular invalidated region), COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles), or NULLREGION (no invalidated region). If the function fails, the return value is ERROR. To get extended error information, call GetLastError. ",
    "remarks": "If the SW_INVALIDATE and SW_ERASE flags are not specified, ScrollWindowEx does not invalidate the area that is scrolled from. If either of these flags is set, ScrollWindowEx invalidates this area. The area is not updated until the application calls the UpdateWindow function, calls the  RedrawWindow function (specifying the RDW_UPDATENOW or RDW_ERASENOW flag), or retrieves the  \t\t\t\tWM_PAINT message from the application queue. If the window has the WS_CLIPCHILDREN style, the returned areas specified by  \t\t\t\thrgnUpdate and  \t\t\t\tprcUpdate represent the total area of the scrolled window that must be updated, including any areas in child windows that need updating. If the SW_SCROLLCHILDREN flag is specified, the system does not properly update the screen if part of a child window is scrolled. The part of the scrolled child window that lies outside the source rectangle is not erased and is not properly redrawn in its new destination. To move child windows that do not lie completely within the rectangle specified by  \t\t\t\tprcScroll, use the DeferWindowPos function. The cursor is repositioned if the SW_SCROLLCHILDREN flag is set and the caret rectangle intersects the scroll rectangle. All input and output coordinates (for  \t\t\t\tprcScroll,  \t\t\t\tprcClip,  \t\t\t\tprcUpdate, and  \t\t\t\thrgnUpdate) are determined as client coordinates, regardless of whether the window has the CS_OWNDC or CS_CLASSDC class style. Use the  \t\t\t\tLPtoDP and  \t\t\t\tDPtoLP functions to convert to and from logical coordinates, if necessary. For an example, see Scrolling Text with the WM_PAINT Message. ",
    "return_type": "int",
    "category": "Scroll Bars",
    "name": "ScrollWindowEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to the window where the client area is to be scrolled."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "dx",
        "description": "Type: int Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "dy",
        "description": "Type: int Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "prcScroll",
        "description": "Type: const RECT* Pointer to a RECT structure that specifies the portion of the client area to be scrolled. If this parameter is NULL, the entire client area is scrolled."
      },
      {
        "in_out": "_In_",
        "type": "const RECT*",
        "name": "prcClip",
        "description": "Type: const RECT* Pointer to a  \t\t\t\t\tRECT structure that contains the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted. This parameter may be NULL."
      },
      {
        "in_out": "_In_",
        "type": "HRGN",
        "name": "hrgnUpdate",
        "description": "Type: HRGN Handle to the region that is modified to hold the region invalidated by scrolling. This parameter may be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "prcUpdate",
        "description": "Type: LPRECT Pointer to a RECT structure that receives the boundaries of the rectangle invalidated by scrolling. This parameter may be NULL."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "flags",
        "description": "Type: UINT Specifies flags that control scrolling. This parameter can be a combination of the following values.   ValueMeaning  SW_ERASE   Erases the newly invalidated region by sending a  \t\t\t\t\t\tWM_ERASEBKGND message to the window when specified with the SW_INVALIDATE flag.   SW_INVALIDATE   Invalidates the region identified by the  \t\t\t\t\t\thrgnUpdate parameter after scrolling.   SW_SCROLLCHILDREN   Scrolls all child windows that intersect the rectangle pointed to by the  \t\t\t\t\t\tprcScroll parameter. The child windows are scrolled by the number of pixels specified by the  \t\t\t\t\t\tdx and  \t\t\t\t\t\tdy parameters. The system sends a  \t\t\t\t\t\tWM_MOVE message to all child windows that intersect the  \t\t\t\t\t\tprcScroll rectangle, even if they do not move.   SW_SMOOTHSCROLL                    Scrolls using smooth scrolling. Use the  \t\t\t\t\t\tHIWORD portion of the  \t\t\t\t\t\tflags parameter to indicate how much time, in milliseconds, the smooth-scrolling operation should take."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetScrollInfo function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int The return value is the current position of the scroll box. ",
    "remarks": "The SetScrollInfo function performs range checking on the values specified by the  \t\t\t\tnPage and  \t\t\t\tnPos members of the SCROLLINFO structure. The  \t\t\t\tnPage member must specify a value from 0 to  \t\t\t\tnMax -  \t\t\t\tnMin +1. The  \t\t\t\tnPos member must specify a value between  \t\t\t\tnMin and  \t\t\t\tnMax -  \t\t\t\tmax( \t\t\t\tnPage\u00e2\u0080\u0093 1, 0). If either value is beyond its range, the function sets it to a value that is just within the range. If the fnBar parameter is SB_CTL and the window specified by the hwnd parameter is not a system scroll bar control, the system sends the SBM_SETSCROLLINFO message to the window to set scroll bar information (The system can optimize the message to SBM_SETPOS or SBM_SETRANGE if the request is solely for the position or range).  This allows SetScrollInfo to operate on a custom control that mimics a scroll bar.  If the window does not handle SBM_SETSCROLLINFO (or the optimized SBM_SETPOS message or SBM_SETRANGE message), then the SetScrollInfo function fails. For an example, see Scrolling Text with the WM_PAINT Message. ",
    "return_type": "int",
    "category": "Scroll Bars",
    "name": "SetScrollInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\tfnBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "fnBar",
        "description": "Type: int Specifies the type of scroll bar for which to set parameters. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Sets the parameters of a scroll bar control. The  \t\t\t\t\t\thwnd parameter must be the handle to the scroll bar control.    SB_HORZ   Sets the parameters of the window's standard horizontal scroll bar.    SB_VERT   Sets the parameters of the window's standard vertical scroll bar."
      },
      {
        "in_out": "_In_",
        "type": "LPCSCROLLINFO",
        "name": "lpsi",
        "description": "Type: LPCSCROLLINFO Pointer to a SCROLLINFO structure. Before calling SetScrollInfo, set the  \t\t\t\t\tcbSize member of the structure to  \t\t\t\t\tsizeof(SCROLLINFO), set the  \t\t\t\t\tfMask member to indicate the parameters to set, and specify the new parameter values in the appropriate members. The  \t\t\t\t\tfMask member can be one or more of the following values.  ValueMeaning  SIF_DISABLENOSCROLL   Disables the scroll bar instead of removing it, if the scroll bar's new parameters make the scroll bar unnecessary.   SIF_PAGE   Sets the scroll page to the value specified in the  \t\t\t\t\t\tnPage member of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi.   SIF_POS   Sets the scroll position to the value specified in the  \t\t\t\t\t\tnPos member of the SCROLLINFO structure pointed to by lpsi.   SIF_RANGE   Sets the scroll range to the value specified in the  \t\t\t\t\t\tnMin and  \t\t\t\t\t\tnMax members of the SCROLLINFO structure pointed to by  \t\t\t\t\t\tlpsi."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fRedraw",
        "description": "Type: BOOL Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is TRUE, the scroll bar is redrawn, otherwise, it is not redrawn."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetScrollPos function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the previous position of the scroll box. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the scroll bar is redrawn by a subsequent call to another function, setting the bRedraw parameter to FALSE is useful. Because the messages that indicate scroll bar position, WM_HSCROLL and WM_VSCROLL, are limited to 16 bits of position data, applications that rely solely on those messages for position data have a practical maximum value of 65,535 for the SetScrollPos function's nPos parameter. However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the WM_HSCROLL and WM_VSCROLL messages. See GetScrollInfo for a description of the technique. If the nBar parameter is SB_CTL and the window specified by the hWnd parameter is not a system scroll bar control, the system sends the SBM_SETPOS message to the window to set scroll bar information.  This allows SetScrollPos to operate on a custom control that mimics a scroll bar.  If the window does not handle the SBM_SETPOS message, the SetScrollPos function fails. ",
    "return_type": "int",
    "category": "Scroll Bars",
    "name": "SetScrollPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the nBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nBar",
        "description": "Type: int Specifies the scroll bar to be set. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Sets the position of the scroll box in a scroll bar control. The hwnd parameter must be the handle to the scroll bar control.   SB_HORZ   Sets the position of the scroll box in a window's standard horizontal scroll bar.   SB_VERT   Sets the position of the scroll box in a window's standard vertical scroll bar."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nPos",
        "description": "Type: int Specifies the new position of the scroll box. The position must be within the scrolling range. For more information about the scrolling range, see the SetScrollRange function."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRedraw",
        "description": "Type: BOOL Specifies whether the scroll bar is redrawn to reflect the new scroll box position. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SetScrollRange function sets the minimum and maximum scroll box positions for the specified scroll bar.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "You can use SetScrollRange to hide the scroll bar by setting  \t\t\t\tnMinPos and  \t\t\t\tnMaxPos to the same value. An application should not call the SetScrollRange function to hide a scroll bar while processing a scroll bar message. New applications should use the ShowScrollBar function to hide the scroll bar. If the call to SetScrollRange immediately follows a call to the SetScrollPos function, the  \t\t\t\tbRedraw parameter in SetScrollPos must be zero to prevent the scroll bar from being drawn twice. The default range for a standard scroll bar is 0 through 100. The default range for a scroll bar control is empty (both the  \t\t\t\tnMinPos and  \t\t\t\tnMaxPos parameter values are zero). The difference between the values specified by the  \t\t\t\tnMinPos and  \t\t\t\tnMaxPos parameters must not be greater than the value of MAXLONG. Because the messages that indicate scroll bar position,  \t\t\t\tWM_HSCROLL and  \t\t\t\tWM_VSCROLL, are limited to 16 bits of position data, applications that rely solely on those messages for position data have a practical maximum value of 65,535 for the SetScrollRange function's  \t\t\t\tnMaxPos parameter. However, because the SetScrollInfo, SetScrollPos, SetScrollRange, GetScrollInfo, GetScrollPos, and GetScrollRange functions support 32-bit scroll bar position data, there is a way to circumvent the 16-bit barrier of the  \t\t\t\tWM_HSCROLL and  \t\t\t\tWM_VSCROLL messages. See GetScrollInfo for a description of the technique. If the nBar parameter is SB_CTL and the window specified by the hWnd parameter is not a system scroll bar control, the system sends the SBM_SETRANGE message to the window to set scroll bar information.  This allows SetScrollRange to operate on a custom control that mimics a scroll bar.  If the window does not handle the SBM_SETRANGE message, the SetScrollRange function fails.  For an example, see Using the Owner-Display Clipboard Format. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "SetScrollRange",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\tnBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nBar",
        "description": "Type: int Specifies the scroll bar to be set. This parameter can be one of the following values.   ValueMeaning  SB_CTL   Sets the range of a scroll bar control. The  \t\t\t\t\t\thwnd parameter must be the handle to the scroll bar control.   SB_HORZ   Sets the range of a window's standard horizontal scroll bar.   SB_VERT   Sets the range of a window's standard vertical scroll bar."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nMinPos",
        "description": "Type: int Specifies the minimum scrolling position."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nMaxPos",
        "description": "Type: int Specifies the maximum scrolling position."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRedraw",
        "description": "Type: BOOL Specifies whether the scroll bar should be redrawn to reflect the change. If this parameter is TRUE, the scroll bar is redrawn. If it is FALSE, the scroll bar is not redrawn."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ShowScrollBar function shows or hides the specified scroll bar.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "You should not call this function to hide a scroll bar while processing a scroll bar message. ",
    "return_type": "BOOL",
    "category": "Scroll Bars",
    "name": "ShowScrollBar",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the  \t\t\t\t\twBar parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "wBar",
        "description": "Type: int Specifies the scroll bar(s) to be shown or hidden. This parameter can be one of the following values.   ValueMeaning  SB_BOTH   Shows or hides a window's standard horizontal and vertical scroll bars.   SB_CTL   Shows or hides a scroll bar control. The  \t\t\t\t\t\thwnd parameter must be the handle to the scroll bar control.   SB_HORZ   Shows or hides a window's standard horizontal scroll bars.   SB_VERT   Shows or hides a window's standard vertical scroll bar."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bShow",
        "description": "Type: BOOL Specifies whether the scroll bar is shown or hidden. If this parameter is TRUE, the scroll bar is shown; otherwise, it is hidden."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  }
]