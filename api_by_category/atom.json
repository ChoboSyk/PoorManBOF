[
  {
    "n_arguments": 1,
    "description": "Adds a character string to the local atom table and returns a unique value (an atom) identifying the string.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM If the function succeeds, the return value is the newly created atom. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The AddAtom function stores no more than one copy of a given string in the atom table. If the string is already in the table, the function returns the existing atom and, in the case of a string atom, increments the string's reference count. If  \t\t\t\tlpString has the form \"#1234\", AddAtom returns an integer atom whose value is the 16-bit representation of the decimal number specified in the string (0x04D2, in this example). If the decimal value specified is 0x0000 or is greater than or equal to 0xC000, the return value is zero, indicating an error. If  \t\t\t\tlpString was created by the MAKEINTATOM macro, the low-order word must be in the range 0x0001 through 0xBFFF. If the low-order word is not in this range, the function fails. If  \t\t\t\tlpString has any other form, AddAtom returns a string atom. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "AddAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Strings differing only in case are considered identical. The case of the first string added is preserved and returned by the GetAtomName function.  Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Decrements the reference count of a local string atom. If the atom's reference count is reduced to zero, DeleteAtom removes the string associated with the atom from the local atom table.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM If the function succeeds, the return value is zero. If the function fails, the return value is the  \t\t\t\t\t\tnAtom parameter. To get extended error information, call GetLastError. ",
    "remarks": "A string atom's reference count specifies the number of times the atom has been added to the atom table. The AddAtom function increments the count on each call. The DeleteAtom function decrements the count on each call but removes the string only if the atom's reference count is zero. Each call to AddAtom should have a corresponding call to DeleteAtom. Do not call DeleteAtom more times than you call AddAtom, or you may delete the atom while other clients are using it. The DeleteAtom function has no effect on an integer atom (an atom whose value is in the range 0x0001 to 0xBFFF). The function always returns zero for an integer atom. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "DeleteAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ATOM",
        "name": "nAtom",
        "description": "Type: ATOM The atom to be deleted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches the local atom table for the specified character string and retrieves the atom associated with that string.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM If the function succeeds, the return value is the atom associated with the given string. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Even though the system preserves the case of a string in an atom table, the search performed by the FindAtom function is not case sensitive. If  \t\t\t\tlpString was created by the MAKEINTATOM macro, the low-order word must be in the range 0x0001 through 0xBFFF. If the low-order word is not in this range, the function fails. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "FindAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR The character string for which to search. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See Remarks for more information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a copy of the character string associated with the specified local atom.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the length of the string copied to the buffer, in  \t\t\t\t\t\tcharacters, not including the terminating null character. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The string returned for an integer atom (an atom whose value is in the range 0x0001 to 0xBFFF) is a null-terminated string in which the first character is a pound sign (#) and the remaining characters represent the unsigned integer atom value. Using this function incorrectly might compromise the security of your program. Incorrect use of this function includes not correctly specifying the size of the lpBuffer parameter. ",
    "return_type": "UINT",
    "category": "Atom",
    "name": "GetAtomName",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ATOM",
        "name": "nAtom",
        "description": "Type: ATOM The local atom that identifies the character string to be retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpBuffer",
        "description": "Type: LPTSTR The character string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nSize",
        "description": "Type: int The size, in  \t\t\t\t\tcharacters, of the buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Adds a character string to the global atom table and returns a unique value (an atom) identifying the string.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM If the function succeeds, the return value is the newly created atom. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the string already exists in the global atom table, the atom for the existing string is returned and the atom's reference count is incremented. The string associated with the atom is not deleted from memory until its reference count is zero. For more information, see the GlobalDeleteAtom function. Global atoms are not deleted automatically when the application terminates. For every call to the GlobalAddAtom function, there must be a corresponding call to the GlobalDeleteAtom function. If the  \t\t\t\tlpString parameter has the form \"#1234\", GlobalAddAtom returns an integer atom whose value is the 16-bit representation of the decimal number specified in the string (0x04D2, in this example). If the decimal value specified is 0x0000 or is greater than or equal to 0xC000, the return value is zero, indicating an error. If  \t\t\t\tlpString was created by the MAKEINTATOM macro, the low-order word must be in the range 0x0001 through 0xBFFF. If the low-order word is not in this range, the function fails. If  \t\t\t\tlpString has any other form, GlobalAddAtom returns a string atom. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "GlobalAddAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR The null-terminated string to be added. The string can have a maximum size of 255 bytes. Strings that differ only in case are considered identical. The case of the first string of this name added to the table is preserved and returned by the GlobalGetAtomName function. Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Decrements the reference count of a global string atom. If the atom's reference count reaches zero, GlobalDeleteAtom removes the string associated with the atom from the global atom table.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM The function always returns (ATOM) 0. To determine whether the function has failed, call SetLastError with ERROR_SUCCESS before calling GlobalDeleteAtom, then call GetLastError. If the last error code is still ERROR_SUCCESS, GlobalDeleteAtom has succeeded. ",
    "remarks": "A string atom's reference count specifies the number of times the string has been added to the atom table. The GlobalAddAtom function increments the reference count of a string that already exists in the global atom table each time it is called. Each call to GlobalAddAtom should have a corresponding call to GlobalDeleteAtom. Do not call GlobalDeleteAtom more times than you call GlobalAddAtom, or you may delete the atom while other clients are using it. Applications using Dynamic Data Exchange (DDE) should follow the rules on global atom management to prevent leaks and premature deletion. GlobalDeleteAtom has no effect on an integer atom (an atom whose value is in the range 0x0001 to 0xBFFF). The function always returns zero for an integer atom. For an example, see Initiating a Conversation. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "GlobalDeleteAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ATOM",
        "name": "nAtom",
        "description": "Type: ATOM The atom and character string to be deleted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches the global atom table for the specified character string and retrieves the global atom associated with that string.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: ATOM If the function succeeds, the return value is the global atom associated with the given string. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Even though the system preserves the case of a string in an atom table as it was originally entered, the search performed by GlobalFindAtom is not case sensitive. If  \t\t\t\tlpString was created by the MAKEINTATOM macro, the low-order word must be in the range 0x0001 through 0xBFFF. If the low-order word is not in this range, the function fails. ",
    "return_type": "ATOM",
    "category": "Atom",
    "name": "GlobalFindAtom",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR The null-terminated character string for which to search.  Alternatively, you can use an integer atom that has been converted using the MAKEINTATOM macro. See the Remarks for more information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a copy of the character string associated with the specified global atom.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the length of the string copied to the buffer, in  \t\t\t\t\t\tcharacters, not including the terminating null character. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The string returned for an integer atom (an atom whose value is in the range 0x0001 to 0xBFFF) is a null-terminated string in which the first character is a pound sign (#) and the remaining characters represent the unsigned integer atom value. Using this function incorrectly might compromise the security of your program. Incorrect use of this function includes not correctly specifying the size of the lpBuffer parameter. Also, note that a global atom is accessible by anyone; thus, privacy and the integrity of its contents is not assured. ",
    "return_type": "UINT",
    "category": "Atom",
    "name": "GlobalGetAtomName",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ATOM",
        "name": "nAtom",
        "description": "Type: ATOM The global atom associated with the character string to be retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpBuffer",
        "description": "Type: LPTSTR The buffer for the character string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nSize",
        "description": "Type: int The size, in  \t\t\t\t\tcharacters, of the buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Initializes the local atom table and sets the number of hash buckets to the specified size.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "An application need not use this function to use a local atom table. The default number of hash buckets used is 37. If an application does use InitAtomTable, however, it should call the function before any other atom-management function. If an application uses a large number of local atoms, it can reduce the time required to add an atom to the local atom table or to find an atom in the table by increasing the size of the table. However, this increases the amount of memory required to maintain the table. The number of buckets in the global atom table cannot be changed. If the atom table has already been initialized, either explicitly by a prior call to InitAtomTable, or implicitly by the use of any atom-management function, InitAtomTable returns success without changing the number of hash buckets. ",
    "return_type": "BOOL",
    "category": "Atom",
    "name": "InitAtomTable",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "Type: DWORD The number of hash buckets to use for the atom table. If this parameter is zero, the default number of hash buckets are created. To achieve better performance, specify a prime number in  \t\t\t\t\tnSize."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]