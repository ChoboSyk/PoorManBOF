[
  {
    "n_arguments": 2,
    "description": "The glAccum function operates on the accumulation buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The accumulation buffer is an extended-range color buffer. Images are not rendered into it. Rather, images rendered into one of the color buffers are added to the contents of the accumulation buffer after rendering. You can create effects such as antialiasing (of points, lines, and polygons), motion blur, and depth of field by accumulating images generated with different transformation matrices. Each pixel in the accumulation buffer consists of red, green, blue, and alpha values. The number of bits per component in the accumulation buffer depends on the implementation. You can examine this number by calling glGetIntegerv four times, with the arguments GL_ACCUM_RED_BITS, GL_ACCUM_GREEN_BITS, GL_ACCUM_BLUE_BITS, and GL_ACCUM_ALPHA_BITS, respectively. Regardless of the number of bits per component, however, the range of values stored by each component is [ 1,?1]. The accumulation buffer pixels are mapped one-to-one with framebuffer pixels. The glAccum function operates on the accumulation buffer. The first argument, op, is a symbolic constant that selects an accumulation buffer operation. The second argument, value, is a floating-point value to be used in that operation. Five operations are specified: GL_ACCUM, GL_LOAD, GL_ADD, GL_MULT, and GL_RETURN. All accumulation buffer operations are limited to the area of the current scissor box and are applied identically to the red, green, blue, and alpha components of each pixel. The contents of an accumulation buffer pixel component are undefined if the glAccum operation results in a value outside the range [ 1,1]. To clear the accumulation buffer, use the glClearAccum function to specify R, G, B, and A values to set it to, and issue a glClear function with the accumulation buffer enabled. Only those pixels within the current scissor box are updated by any glAccum operation. The following functions retrieve information related to the glAccum function: glGet with argument GL_ACCUM_RED_BITS glGet with argument GL_ACCUM_GREEN_BITS glGet with argument GL_ACCUM_BLUE_BITS glGet with argument GL_ACCUM_ALPHA_BITS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glAccum",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "op",
        "description": "The accumulation buffer operation. ..."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "value",
        "description": "A floating-point value used in the accumulation buffer operation. The op parameter determines how value is used."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glAddSwapHintRectWIN callback function specifies a set of rectangles that are to be copied by SwapBuffers.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The glAddSwapHintRectWIN function speeds up animation by reducing the amount of repainting between frames. With glAddSwapHintRectWIN, you specify a set of rectangular areas that you want copied when you call SwapBuffers. When you do not specify any rectangles with glAddSwapHintRectWIN before calling SwapBuffers, the entire framebuffer is swapped. Using glAddSwapHintRectWIN to copy only changed parts of the buffer can significantly increase the performance of SwapBuffers, especially when SwapBuffers is implemented in software. The glAddSwapHintRectWIN function adds a rectangle to the hint region. When the PFD_SWAP_COPY flag of the PIXELFORMATDESCRIPTOR pixel format structure is set, SwapBuffers uses this region to clip the copying of the back buffer to the front buffer. You don't specify PFD_SWAP_COPY; it is set by capable hardware. The hint region is cleared after each call to SwapBuffers. With some hardware configurations, SwapBuffers can ignore the hint region and exchange the entire buffer. SwapBuffers is implemented by the system, not by the application. OpenGL maintains a separate hint region for each window. When you call glAddSwapHintRectWIN on any rendering contexts associated with a window, the hint rectangles are combined into a single region. Call glAddSwapHintRectWIN with a bounding rectangle for each object drawn for a frame and for each rectangle cleared to erase previous frame objects. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glAddSwapHintRectWIN",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The x-coordinate (in window coordinates) of the lower-left corner of the hint region rectangle."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The y-coordinate (in window coordinates) of the lower-left corner of the hint region rectangle."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the hint region rectangle."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the hint region rectangle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SwapBuffers function exchanges the front and back buffers if the current pixel format for the window referenced by the specified device context includes a back buffer.",
    "library": "Gdi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wingdi.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get extended error information, call GetLastError. ",
    "remarks": "If the current pixel format for the window referenced by the device context does not include a back buffer, this call has no effect and the content of the back buffer is undefined when the function returns. With multithread applications, flush the drawing commands in any other threads drawing to the same window before calling SwapBuffers. ",
    "return_type": "BOOL",
    "category": "OpenGL",
    "name": "SwapBuffers",
    "is_callback": 0,
    "dll": "Gdi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HDC",
        "name": "hdc",
        "description": "Specifies a device context. If the current pixel format for the window referenced by this device context includes a back buffer, the function exchanges the front and back buffers."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glAlphaFunc function enables your application to set the alpha test function.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The alpha test discards fragments depending on the outcome of a comparison between the incoming fragments' alpha values and a constant reference value.        The glAlphaFunc function specifies the reference and comparison function. The comparison is performed only if alpha testing is enabled.       (For more information on GL_ALPHA_TEST, see glEnable.) The func and ref parameters specify the conditions under which the pixel is drawn. The incoming alpha value is compared        to ref using the function specified by func. If the comparison passes, the incoming fragment is drawn, conditional on subsequent        stencil and depth-buffer tests. If the comparison fails, no change is made to the framebuffer at that pixel location. The glAlphaFunc function operates on all pixel writes, including those resulting from the scan conversion of points, lines,       polygons, and bitmaps, and from pixel draw and copy operations. The glAlphaFunc function does not affect screen clear operations. Alpha testing is done only in RGBA mode. The following functions retrieve information related to the glAlphaFunc function: glGet with argument GL_ALPHA_TEST_FUNC glGet with argument GL_ALPHA_TEST_REF glIsEnabled with argument GL_ALPHA_TEST ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glAlphaFunc",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "func",
        "description": "The alpha comparison function. The following are the accepted symbolic constants and their meanings.  ValueMeaning  GL_NEVER   Never passes.   GL_LESS   Passes if the incoming alpha value is less than the reference value.   GL_EQUAL   Passes if the incoming alpha value is equal to the reference value.   GL_LEQUAL   Passes if the incoming alpha value is less than or equal to the reference value.   GL_GREATER   Passes if the incoming alpha value is greater than the reference value.   GL_NOTEQUAL   Passes if the incoming alpha value is not equal to the reference value.   GL_GEQUAL   Passes if the incoming alpha value is greater than or equal to the reference value.   GL_ALWAYS   Always passes. This is the default."
      },
      {
        "in_out": "",
        "type": "GLclampf",
        "name": "ref",
        "description": "The reference value to which incoming alpha values are compared. This value is clamped to the range 0 through 1, where 0 represents the lowest possible alpha value and 1 the highest possible value. The default reference is 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glAreTexturesResident function determines whether specified texture objects are resident in texture memory.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "On machines with a limited amount of texture memory, OpenGL establishes a working set of textures that are resident in texture memory. These textures can be bound to a texture target much more efficiently than textures that are not resident. The glAreTexturesResident function queries the texture residence status of the n textures named by the elements of textures. If all the named textures are resident, glAreTexturesResident returns GL_TRUE, and the contents of residences are undisturbed. If any of the named textures are not resident, glAreTexturesResident returns GL_FALSE, and detailed status is returned in the n elements of residences. If an element of residences is GL_TRUE, then the texture named by the corresponding element of textures is resident in texture memory. To query the residence status of a single bound texture, call glGetTexParameter with the target parameter set to the target texture to which the target is bound and set the pname parameter to GL_TEXTURE_RESIDENT. You must use this method to query the resident status of a default texture. You cannot include glAreTexturesResident in display lists. The glAreTexturesResident function returns the residency status of the textures at the time of invocation. It does not guarantee that the textures will remain resident at any other time. If textures reside in virtual memory (there is no texture memory), they are considered always resident. ",
    "return_type": "GLboolean",
    "category": "OpenGL",
    "name": "glAreTexturesResident",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "n",
        "description": "The number of textures to be queried."
      },
      {
        "in_out": "const",
        "type": "GLuint*",
        "name": "textures",
        "description": "The address of an array containing the names of the textures to be queried."
      },
      {
        "in_out": "",
        "type": "GLboolean*",
        "name": "residences",
        "description": "The address of an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glArrayElement function specifies the array elements used to render a vertex.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Use the glArrayElement function within glBegin and glEnd pairs to specify vertex and attribute data for point, line, and polygon primitives. The glArrayElement function specifies the data for a single vertex using vertex and attribute data located at the index of the enabled vertex arrays. You can use glArrayElement to construct primitives by indexing vertex data, rather than by streaming through arrays of data in first-to-last order. Because glArrayElement specifies a single vertex only, you can explicitly specify attributes for individual primitives. For example, you can set a single normal for each individual triangle. When you include calls to glArrayElement in display lists, the necessary array data, determined by the array pointers and enable values, is entered in the display list also. Array pointer and enable values are determined when display lists are created, not when display lists are executed. You can read and cache static array data at any time with glArrayElement. When you modify the elements of a static array without specifying the array again, the results of any subsequent calls to glArrayElement are undefined. When you call glArrayElement without first calling glEnableClientState(GL_VERTEX_ARRAY), no drawing occurs, but the attributes corresponding to enabled arrays are modified. Although no error is generated when you specify an array within glBegin and glEnd pairs, the results are undefined. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glArrayElement",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "index",
        "description": "An index in the enabled arrays."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glBegin and glend functions delimit the vertices of a primitive or a group of like primitives.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glBegin and glend functions delimit the vertices that define a primitive or a group of like primitives. The glBegin function accepts a single argument that specifies which of ten primitives the vertices compose. Taking n as an integer count starting at one, and N as the total number of vertices specified, the interpretations are as follows: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glBegin",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The primitive or primitives that will be created from vertices presented between glBegin and the subsequent glend. The following are accepted symbolic constants and their meanings:             ValueMeaning  GL_POINTS   Treats each vertex as a single point. Vertex n defines point n. N points are drawn.   GL_LINES   Treats each pair of vertices as an independent line segment. Vertices 2n - 1 and 2n define line n. N/2 lines are drawn.   GL_LINE_STRIP   Draws a connected group of line segments from the first vertex to the last. Vertices n and n+1 define line n. N - 1 lines are drawn.   GL_LINE_LOOP   Draws a connected group of line segments from the first vertex to the last, then back to the first. Vertices n and n + 1 define line n. The last line, however, is defined by vertices N and 1. N lines are drawn.   GL_TRIANGLES   Treats each triplet of vertices as an independent triangle. Vertices 3n - 2, 3n - 1, and 3n define triangle n. N/3 triangles are drawn.   GL_TRIANGLE_STRIP   Draws a connected group of triangles. One triangle is defined for each vertex presented after the first two vertices. For odd n, vertices n, n + 1, and n + 2 define triangle n. For even n, vertices n + 1, n, and n + 2 define triangle n. N - 2 triangles are drawn.   GL_TRIANGLE_FAN   Draws a connected group of triangles. one triangle is defined for each vertex presented after the first two vertices. Vertices 1, n + 1, n + 2 define triangle n. N - 2 triangles are drawn.   GL_QUADS   Treats each group of four vertices as an independent quadrilateral. Vertices 4n - 3, 4n - 2, 4n - 1, and 4n define quadrilateral n. N/4 quadrilaterals are drawn.   GL_QUAD_STRIP   Draws a connected group of quadrilaterals. One quadrilateral is defined for each pair of vertices presented after the first pair. Vertices 2n - 1, 2n, 2n + 2, and 2n + 1 define quadrilateral n. N/2 - 1 quadrilaterals are drawn. Note that the order in which vertices are used to construct a quadrilateral from strip data is different from that used with independent data.   GL_POLYGON   Draws a single, convex polygon. Vertices 1 through N define this polygon."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glBegin and glend functions delimit the vertices of a primitive or a group of like primitives.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glBegin and glend functions delimit the vertices that define a primitive or a group of like primitives. The glBegin function accepts a single argument that specifies which of ten primitives the vertices compose. Taking n as an integer count starting at one, and N as the total number of vertices specified, the interpretations are as follows: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glEnd",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glBindTexture function enables the creation of a named texture that is bound to a texture target.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glBindTexture function enables you to create a named texture.        Calling glBindTexture with target set to GL_TEXTURE_1D or GL_TEXTURE_2D, and texture set       to the name of the new texture you have created binds the texture name to the appropriate texture target. When a texture is bound to a target, the previous binding for that target is no longer in effect. Texture names are unsigned integers with the value zero reserved to represent the default texture for each texture target. Texture names and the corresponding texture contents are local to the       shared display-list space of the current OpenGL rendering context; two rendering contexts share texture names only if they also share display lists. You can generate a set of new texture names       using glGenTextures. When a texture is first bound, it assumes the dimensionality of its texture target; a texture bound to GL_TEXTURE_1D becomes one-dimensional and a texture bound to GL_TEXTURE_2D becomes        two-dimensional. Operations you perform on a texture target also affect a texture bound to the target. When you query a texture target, the return value is the state of the texture bound to it.        Texture targets become aliases for textures currently bound to them. When you bind a texture with glBindTexture, the binding remains active until a different texture is bound to the same target or       you delete the bound texture with the glDeleteTextures function. Once you create a named texture you can bind it to a texture target        that has the same dimensionality as often as needed. It is usually much faster to use glBindTexture to bind an existing named texture to one of the texture targets than it is to        reload the texture image using glTexImage1D or glTexImage2D.        For additional control of texturing performance, use glPrioritizeTextures. You can include calls to glBindTexture in display lists. The following functions retrieve information related to glBindTexture: glGet with argument GL_TEXTURE_2D_BINDING ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glBindTexture",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target to which the texture is bound. Must have the value GL_TEXTURE_1D or GL_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLuint",
        "name": "texture",
        "description": "The name of a texture; the texture name cannot currently be in use."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The glBitmap function draws a bitmap.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "A bitmap is a binary image. When drawn, the bitmap is positioned relative to the current raster position, and framebuffer pixels corresponding to 1s in the bitmap are written using the current raster color or index. Frame-buffer pixels corresponding to zeros in the bitmap are not modified. The bitmap image is interpreted like image data for the glDrawPixels function, with width and height corresponding to the width and height arguments of that function, and with type set to GL_BITMAP and format set to GL_COLOR_INDEX. Modes you specify using glPixelStore affect the interpretation of bitmap image data; modes you specify using glPixelTransfer do not. If the current raster position is invalid, glBitmap is ignored. Otherwise, the lower-left corner of the bitmap image is positioned at the following window coordinates: xw = xr x\u00e2\u0082\u0092 yw = yr y\u00e2\u0082\u0092 In these coordinates, (xr , yr ) is the raster position, and (x\u00e2\u0082\u0092 , y\u00e2\u0082\u0092 ) is the bitmap origin. Fragments are then generated for each pixel corresponding to a 1 in the bitmap image. These fragments are generated using the current raster z-coordinate, color or color index, and current raster texture coordinates. They are then treated just as if they had been generated by a point, line, or polygon, including texture mapping, fogging, and all per-fragment operations such as alpha and depth testing. After the bitmap has been drawn, the x and y coordinates of the current raster position are offset by xmove and ymove. No change is made to the z-coordinate of the current raster position, or to the current raster color, index, or texture coordinates. The following functions retrieve information related to the glBitmap function: glGet with argument GL_CURRENT_RASTER_POSITION ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glBitmap",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLSizei",
        "name": "width",
        "description": "The pixel width of the bitmap image."
      },
      {
        "in_out": "",
        "type": "GLSizei",
        "name": "height",
        "description": "The pixel height of the bitmap image."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "xorig",
        "description": "The x location of the origin in the bitmap image. The origin is measured from the lower-left corner of the bitmap, with right and up directions being the positive axes."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "yorig",
        "description": "The y location of the origin in the bitmap image. The origin is measured from the lower-left corner of the bitmap, with right and up directions being the positive axes."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "xmove",
        "description": "The x offset to be added to the current raster position after the bitmap is drawn."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "ymove",
        "description": "The y offset to be added to the current raster position after the bitmap is drawn."
      },
      {
        "in_out": "const",
        "type": "GLubyte*",
        "name": "bitmap",
        "description": "The address of the bitmap image."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glBlendFunc function specifies pixel arithmetic.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "In RGB mode, pixels can be drawn using a function that blends the incoming (source) RGBA values with the RGBA values that are already in the framebuffer (the destination values). By default, blending is disabled. Use glEnable and glDisable with the GL_BLEND argument to enable and disable blending. When enabled, glBlendFunc defines the operation of blending. The sfactor parameter specifies which of nine methods is used to scale the source color components. The dfactor parameter specifies which of eight methods is used to scale the destination color components. The eleven possible methods are described in the following table. Each method defines four scale factors\u00e2\u0080\u0094one each for red, green, blue, and alpha. In the table and in subsequent equations, source and destination color components are referred to as (R\u00e2\u0082\u009b , G\u00e2\u0082\u009b , B\u00e2\u0082\u009b , A\u00e2\u0082\u009b ) and (Rd , Gd , Bd , Ad ). They are understood to have integer values between zero and (kR , kG , kR , kA ), where kR = 2mR - 1 kG = 2mG - 1 kB = 2mB - 1 kA = 2mA - 1 and (mR ,  mG , mB , mA ) is the number of red, green, blue, and alpha bitplanes. Source and destination scale factors are referred to as (sR , sG , sB , sA ) and (dR , dG , dB , dA ). The scale factors described in the table, denoted (fR , fG , fB , fA ), represent either source or destination factors. All scale factors have range [0,1].  In the table, i = min (A\u00e2\u0082\u009b , kA  - Ad ) / kA To determine the blended RGBA values of a pixel when drawing in RGBA mode, the system uses the following equations: R (d) = min( kR , R\u00e2\u0082\u009b sR + Rd dR ) G (d) = min( kG , G\u00e2\u0082\u009b sG + Gd dG  ) B (d) = min( kB , B\u00e2\u0082\u009b sB + Bd dB  ) A (d) = min( kA , A\u00e2\u0082\u009b sA + Ad dA  ) Despite the apparent precision of the above equations, blending arithmetic is not exactly specified, because blending operates with imprecise integer color values. However, a blend factor that should be equal to one is guaranteed not to modify its multiplicand, and a blend factor equal to zero reduces its multiplicand to zero. Thus, for example, when sfactor is GL_SRC_ALPHA, dfactor is GL_ONE_MINUS_SRC_ALPHA, and A\u00e2\u0082\u009b is equal to kA, the equations reduce to simple replacement: Rd = R\u00e2\u0082\u009b Gd = G\u00e2\u0082\u009b Bd = B\u00e2\u0082\u009b Ad = A\u00e2\u0082\u009b Transparency is best implemented using glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA) with primitives sorted from farthest to nearest. Note that this transparency calculation does not require the presence of alpha bitplanes in the framebuffer. You can also use glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA) for rendering antialiased points and lines in arbitrary order. To optimize polygon antialiasing, use glBlendFunc(GL_SRC_ALPHA_SATURATE, GL_ONE) with polygons sorted from nearest to farthest. (See the GL_POLYGON_SMOOTH argument in glEnable for information on polygon antialiasing.) Destination alpha bitplanes, which must be present for this blend function to operate correctly, store the accumulated coverage. Incoming (source) alpha is a material opacity, ranging from 1.0 (KA ), representing complete opacity, to 0.0 (0), representing complete transparency. When you enable more than one color buffer for drawing, each enabled buffer is blended separately, and the contents of the buffer is used for destination color. (See glDrawBuffer.) Blending affects only RGBA rendering. It is ignored by color-index renderers. The following functions retrieve information related to glBlendFunc: glGet with argument GL_BLEND_SRC glGet with argument GL_BLEND_DST glIsEnabled  with argument GL_BLEND ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glBlendFunc",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "sfactor",
        "description": "Specifies how the red, green, blue, and alpha source-blending factors are computed. Nine symbolic constants are accepted: GL_ZERO, GL_ONE, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, and GL_SRC_ALPHA_SATURATE."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "dfactor",
        "description": "Specifies how the red, green, blue, and alpha destination-blending factors are computed. Eight symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, and GL_ONE_MINUS_DST_ALPHA."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glCallList function executes a display list.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Invoking the glCallList function begins execution of the named display list. The functions saved in the display list are executed in order, just as if you called them without using a display list. If list has not been defined as a display list, glCallList is ignored. The glCallList function can appear inside a display list. To avoid the possibility of infinite recursion resulting from display lists calling one another, a limit is placed on the nesting level of display lists during display-list execution. This limit is at least 64, however, it depends on the implementation. The OpenGL state is not saved and restored across a call to glCallList. Thus, changes made to the OpenGL state during the execution of a display list remain after execution of the display list is completed. To preserve the OpenGL state across glCallList calls, use glPushAttrib, glPopAttrib, glPushMatrix, and glPopMatrix. You can execute display lists between a call to glBegin and the corresponding call to glEnd, as long as the display list includes only functions that are allowed in this interval. The following functions retrieve information related to glCallList: glGet with argument GL_MAX_LIST_NESTING glIsList ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCallList",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "list",
        "description": "The integer name of the display list to be executed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glCallLists function executes a list of display lists.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The glCallLists function causes each display list in the list of names passed as lists to be executed. As a result, the functions saved in each display list are executed in order, just as if they were called without using a display list. Names of display lists that have not been defined are ignored. The glCallLists function provides an efficient means for executing display lists. The n parameter specifies the number of lists with various name formats (specified by the type parameter) glCallLists executes. The list of display list names is not null-terminated. Rather, n specifies how many names are to be taken from lists. The glListBase function makes an additional level of indirection available. The glListBase function specifies an unsigned offset that is added to each display list name specified in lists before that display list is executed. The glCallLists function can appear inside a display list. To avoid the possibility of infinite recursion resulting from display lists calling one another, a limit is placed on the nesting level of display lists during display list execution. This limit must be at least 64, and it depends on the implementation. The OpenGL state is not saved and restored across a call to glCallLists. Thus, changes made to the OpenGL state during the execution of the display lists remain after execution is completed. Use glPushAttrib, glPopAttrib, glPushMatrix, and glPopMatrix to preserve the OpenGL state across glCallLists calls. You can execute display lists between a call to glBegin  and the corresponding call to glEnd, as long as the display list includes only functions that are allowed in this interval. The following functions retrieve information related to the glCallLists function: glGet with argument GL_LIST_BASE glGet with argument GL_MAX_LIST_NESTING glIsList ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCallLists",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "n",
        "description": "The number of display lists to be executed."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The type of values in lists. The following symbolic constants are accepted.  ValueMeaning  GL_BYTE   The lists parameter is treated as an array of signed bytes, each in the range -128 through 127.   GL_UNSIGNED_BYTE   The lists parameter is treated as an array of unsigned bytes, each in the range 0 through 255.   GL_SHORT   The lists parameter is treated as an array of signed 2-byte integers, each in the range -32768 through 32767.   GL_UNSIGNED_SHORT   The lists parameter is treated as an array of unsigned 2-byte integers, each in the range 0 through 65535.   GL_INT   The lists parameter is treated as an array of signed 4-byte integers.   GL_UNSIGNED_INT   The lists parameter is treated as an array of unsigned 4-byte integers.   GL_FLOAT   The lists parameter is treated as an array of 4-byte, floating-point values.   GL_2_BYTES   The lists parameter is treated as an array of unsigned bytes. Each pair of bytes specifies a single display-list name. The value of the pair is computed as 256 times the unsigned value of the first byte plus the unsigned value of the second byte.   GL_3_BYTES   The lists parameter is treated as an array of unsigned bytes. Each triplet of bytes specifies a single display list name. The value of the triplet is computed as 65536 times the unsigned value of the first byte, plus 256 times the unsigned value of the second byte, plus the unsigned value of the third byte.   GL_4_BYTES   The lists parameter is treated as an array of unsigned bytes. Each quadruplet of bytes specifies a single display list name. The value of the quadruplet is computed as 16777216 times the unsigned value of the first byte, plus 65536 times the unsigned value of the second byte, plus 256 times the unsigned value of the third byte, plus the unsigned value of the fourth byte."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "lists",
        "description": "The address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glClear function clears buffers to preset values.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glClear function sets the bitplane area of the window to values previously selected by glClearColor, glClearIndex, glClearDepth, glClearStencil, and glClearAccum. You can clear multiple color buffers simultaneously by selecting more than one buffer at a time using glDrawBuffer. The pixel-ownership test, the scissor test, dithering, and the buffer writemasks affect the operation of glClear. The scissor box bounds the cleared region. The glClear function ignores the alpha function, blend function, logical operation, stenciling, texture mapping, and z-buffering. The glClear function takes a single argument (mask) that is the bitwise OR of several values indicating which buffer is to be cleared. The value to which each buffer is cleared depends on the setting of the clear value for that buffer. If a buffer is not present, a glClear call directed at that buffer has no effect. The following functions retrieve information related to glClear: glGet with argument GL_ACCUM_CLEAR_VALUE glGet with argument GL_DEPTH_CLEAR_VALUE glGet with argument GL_INDEX_CLEAR_VALUE glGet with argument GL_COLOR_CLEAR_VALUE glGet with argument GL_STENCIL_CLEAR_VALUE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClear",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLbitfield",
        "name": "mask",
        "description": "Bitwise OR operators of masks that indicate the buffers to be cleared. The four masks are as follows.  ValueMeaning  GL_COLOR_BUFFER_BIT   The buffers currently enabled for color writing.   GL_DEPTH_BUFFER_BIT   The depth buffer.   GL_ACCUM_BUFFER_BIT   The accumulation buffer.   GL_STENCIL_BUFFER_BIT   The stencil buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glClearAccum function specifies the clear values for the accumulation buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glClearAccum function specifies the red, green, blue, and alpha values used by glClear to clear the accumulation buffer. Values specified by glClearAccum are clamped to the range [1,1]. The following function retrieves information related to glClearAccum: glGet with argument GL_ACCUM_CLEAR_VALUE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClearAccum",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "red",
        "description": "The red value used when the accumulation buffer is cleared. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "green",
        "description": "The green value used when the accumulation buffer is cleared. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "blue",
        "description": "The blue value used when the accumulation buffer is cleared. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "alpha",
        "description": "The alpha value used when the accumulation buffer is cleared. The default value is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glClearColor function specifies clear values for the color buffers.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glClearColor function specifies the red, green, blue, and alpha values used by glClear to clear the color buffers. Values specified by glClearColor are clamped to the range [0,1]. The following functions retrieve information related to the glClearColor function: glGet with argument GL_ACCUM_CLEAR_VALUE glGet with argument GL_COLOR_CLEAR_VALUE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClearColor",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLclampf",
        "name": "red",
        "description": "The red value that glClear uses to clear the color buffers. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLclampf",
        "name": "green",
        "description": "The green value that glClear uses to clear the color buffers. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLclampf",
        "name": "blue",
        "description": "The blue value that glClear uses to clear the color buffers. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLclampf",
        "name": "alpha",
        "description": "The alpha value that glClear uses to clear the color buffers. The default value is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glClearDepth function specifies the clear value for the depth buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glClearDepth function specifies the depth value used by glClear to clear the depth buffer. Values specified by glClearDepth are clamped to the range [0,1]. The following function retrieves information related to the glClearDepth function: glGet with argument GL_DEPTH_CLEAR_VALUE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClearDepth",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLclampd",
        "name": "depth",
        "description": "The depth value used when the depth buffer is cleared."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glClearIndex function specifies the clear value for the color-index buffers.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glClearIndex function specifies the index used by glClear to clear the color-index buffers. The c parameter is not clamped. Rather, c is converted to a fixed-point value with unspecified precision to the right of the binary point. The integer part of this value is then masked with 2m  - 1, where m is the number of bits in a color index stored in the framebuffer. The following functions retrieve information related to glClearIndex: glGet with argument GL_INDEX_CLEAR_VALUE glGet with argument GL_INDEX_BITS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClearIndex",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "c",
        "description": "The index used when the color-index buffers are cleared. The default value is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glClearStencil function specifies the clear value for the stencil buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glClearStencil function specifies the index used by glClear to clear the stencil buffer. The s parameter is masked with 2m  - 1, where m is the number of bits in the stencil buffer. The following functions retrieve information related to the glClearStencil function: glGet with argument GL_STENCIL_CLEAR_VALUE glGet with argument GL_STENCIL_BITS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClearStencil",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "s",
        "description": "The index used when the stencil buffer is cleared. The default value is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glClipPlane function specifies a plane against which all geometry is clipped.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Geometry is always clipped against the boundaries of a six-plane frustum in x, y, and z. The glClipPlane function allows the specification of additional planes, not necessarily perpendicular to the x-axis, y-axis, or z-axis, against which all geometry is clipped. Up to GL_MAX_CLIP_PLANES planes can be specified, where GL_MAX_CLIP_PLANES is at least six in all implementations. Because the resulting clipping region is the intersection of the defined half-spaces, it is always convex. The glClipPlane function specifies a half-space using a four-component plane equation. When you call glClipPlane,equation is transformed by the inverse of the modelview matrix and stored in the resulting eye coordinates. Subsequent changes to the modelview matrix have no effect on the stored plane-equation components. If the dot product of the eye coordinates of a vertex with the stored plane equation components is positive or zero, the vertex is in with respect to that clipping plane. Otherwise, it is out. Use the glEnable and glDisable functions to enable and disable clipping planes. Call clipping planes with the argument GL_CLIP_PLANEi, where i is the plane number. By default, all clipping planes are defined as (0,0,0,0) in eye coordinates and are disabled. It is always the case that GL_CLIP_PLANEi = GL_CLIP_PLANE0 + i. The following functions retrieve information related to glClipPlane: glGetClipPlane glIsEnabled with argument GL_CLIP_PLANE i ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glClipPlane",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "plane",
        "description": "The clipping plane that is being positioned. Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES - 1, are accepted."
      },
      {
        "in_out": "const",
        "type": "GLdouble*",
        "name": "equation",
        "description": "The address of an array of four double-precision floating-point values. These values are interpreted as a plane equation."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glColorMask function enables and disables writing of frame-buffer color components.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glColorMask function specifies whether the individual color components in the framebuffer can or cannot be written. If red is GL_FALSE, for example, no change is made to the red component of any pixel in any of the color buffers, regardless of the drawing operation attempted. Changes to individual bits of components cannot be controlled. Rather, changes are either enabled or disabled for entire color components. The following functions retrieve information related to glColorMask: glGet with argument GL_COLOR_WRITEMASK glGet with argument GL_RGBA_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glColorMask",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLboolean",
        "name": "red",
        "description": "Specify whether red can or cannot be written into the framebuffer. The default values is GL_TRUE, indicating that the color component can be written."
      },
      {
        "in_out": "",
        "type": "GLboolean",
        "name": "green",
        "description": "Specify whether green can or cannot be written into the framebuffer. The default value is GL_TRUE, indicating that the color component can be written."
      },
      {
        "in_out": "",
        "type": "GLboolean",
        "name": "blue",
        "description": "Specify whether blue can or cannot be written into the framebuffer. The default value is GL_TRUE, indicating that the color component can be written."
      },
      {
        "in_out": "",
        "type": "GLboolean",
        "name": "alpha",
        "description": "Specify whether alpha can or cannot be written into the framebuffer. The default value is GL_TRUE, indicating that the color component can be written."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glColorMaterial function causes a material color to track the current color.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glColorMaterial function specifies which material parameters track the current color. When you enable GL_COLOR_MATERIAL, for each of the material or materials specified by face, the material parameter or parameters specified by mode track the current color at all times. Enable and disable GL_COLOR_MATERIAL with the functions glEnable and glDisable, which you call with GL_COLOR_MATERIAL as their argument. By default, GL_COLOR_MATERIAL is disabled. With glColorMaterial, you can change a subset of material parameters for each vertex using only the glColor function, without calling glMaterial. If you are going to specify only such a subset of parameters for each vertex, it is better to do so with glColorMaterial than with glMaterial. The following functions retrieve information related to glColorMaterial: glGet with argument GL_COLOR_MATERIAL_PARAMETER glGet with argument GL_COLOR_MATERIAL_FACE glIsEnabled with argument GL_COLOR_MATERIAL ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glColorMaterial",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "face",
        "description": "Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. The default value is GL_FRONT_AND_BACK."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "Specifies which of several material parameters track the current color. Accepted values are GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, and GL_AMBIENT_AND_DIFFUSE. The default value is GL_AMBIENT_AND_DIFFUSE."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glColorPointer function defines an array of colors.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glColorPointer function specifies the location and data format of an array of color components to use when rendering. The stride parameter determines the byte offset from one color to the next, enabling the packing of vertex attributes in a single array or storage in separate arrays. In some implementations, storing vertex attributes in a single array can be more efficient than the use of separate arrays. Enabled the color array by specifying the GL_COLOR_ARRAY constant with glEnableClientState. Calling glArrayElement, glDrawElements, or glDrawArrays uses the color array that is thus enabled. By default, the color array is disabled. The glColorPointer calls cannot by entered in display lists. When you specify a color array using glColorPointer, the values of all the function's color array parameters are saved in a client-side state, and you can cache static array elements. Because the color array parameters are in a client-side state, glPushAttrib and glPopAttrib do not save or restore the parameters' values. Although specifying the color array within glBegin and glend pairs does not generate an error, the results are undefined. The following functions retrieve information related to the glColorPointer function: glIsEnabled with argument GL_COLOR_ARRAY glGet with argument GL_COLOR_ARRAY_SIZE glGet with argument GL_COLOR_ARRAY_TYPE glGet with argument GL_COLOR_ARRAY_STRIDE glGet with argument GL_COLOR_ARRAY_COUNT glGetPointerv with argument GL_COLOR_ARRAY_POINTER ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glColorPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "size",
        "description": "The number of components per color. The value must be either 3 or 4."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of each color component in a color array. Acceptable data types are specified with the following constants: GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive colors. When stride is zero, the colors are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first component of the first color element in a color array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The glColorTableEXT function specifies the format and size of a palette for targeted paletted textures.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Paletted textures are defined with a palette of colors and a set of image data that is composed of indexes to color entries of a palette (a color table). The glColorTableEXT function specifies the texture palette of a targeted texture. It takes the data from memory and converts the data as if each palette entry is a single pixel of a 1-D texture. The glColorTableEXT function unpacks and converts the data and translates it into an internal format that matches the given format as closely as possible. If a palette's width is greater than the range of the color indexes in the texture data, some of the palette entries are unused. If a palette's width is less than the range of the color indexes in the texture data, the most significant bits of the texture data are ignored and only the appropriate number of bits in the index are used when accessing the palette. When you specify a proxy target using PROXY_TEXTURE_1D or PROXY_TEXTURE_2D, the palette of the proxy texture is resized and its parameters are set but no data is transferred or accessed. When the target parameter is GL_PROXY_TEXTURE_1D or GL_PROXY_TEXTURE_2D, and the implementation does not support the values specified for either format or width, glColorTableEXT can fail to create the requested color table. In this case, the color table is empty and all parameters retrieved will be zero. You can determine whether OpenGL supports a particular color table format and size by calling glColorTableEXT with a proxy target, and then calling glGetColorTableParameterivEXT or glGetColorTableParameterfvEXT to determine whether the width parameter matches that set by glColorTableEXT. If the retrieved width is zero, the color table request by glColorTable failed. If the retrieved width is not zero, you can call glColorTable with the real target with TEXTURE_1D or TEXTURE_2D to set the color table. To retrieve the actual color table data specified by the glColorTableEXT function, call glGetColorTableEXT. To retrieve the parameters, such as width and format, of the color table specified by the glColorTableEXT function, call the glGetColorTableParameterivEXT or glGetColorTableParameterfvEXT function. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glColorTableEXT",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture that is to have its palette changed. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "internalFormat",
        "description": "The internal format and resolution of the palette. This parameter can assume one of the following symbolic values.  ConstantBase FormatR BitsG BitsB BitsA Bits GL_R3_G3_B2GL_RGB332  GL_RGB4GL_RGB444  GL_RGB5GL_RGB555  GL_RGB8GL_RGB888  GL_RGB10GL_RGB101010  GL_RGB12GL_RGB121212  GL_RGB16GL_RGB161616  GL_RGBA2GL_RGBA2222 GL_RGBA4GL_RGBA4444 GL_RGB5_A1GL_RGBA5551 GL_RGBA8GL_RGBA8888 GL_RG10_A2GL_RGBA1010102 GL_RGB12GL_RGBA12121212 GL_RGBA16GL_RGBA16161616"
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The size of the palette. ..."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. ..."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type for data. The following symbolic constants are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT. The following table summarizes the meaning of the valid constants for the type parameter.  ValueMeaning  GL_UNSIGNED_BYTE   Unsigned 8-bit integer   GL_BYTE   Signed 8-bit integer   GL_UNSIGNED_SHORT   Unsigned 16-bit integer   GL_SHORT   Signed 16-bit integer   GL_UNSIGNED_INT   Unsigned 32-bit integer   GL_INT   32-bit integer   GL_FLOAT   Single-precision floating-point value"
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "data",
        "description": "A pointer to the paletted texture data. The data is treated as single pixels of a 1-D texture palette entry for a palette entry."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The glColorSubTableEXT function specifies a portion of the targeted texture's palette to be replaced.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glColorSubTableEXT function specifies portions of the current targeted texture's palette to be replaced. Unlike glColorTableEXT, you cannot specify the target parameter to be a proxy texture palette. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glColorSubTableEXT",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target paletted texture that is to have its palette changed. Must be TEXTURE_1D or TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "start",
        "description": "The starting palette index entry of the palette to be changed."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "count",
        "description": "The number of palette index entries of the palette to be changed beginning at start. The count parameter determines the range of palette index entries that are changed."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. ..."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type for data. The following symbolic constants are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT. The following table summarizes the meaning of the valid constants for the type parameter.   ValueMeaning  GL_UNSIGNED_BYTE   Unsigned 8-bit integer   GL_BYTE   Signed 8-bit integer   GL_UNSIGNED_SHORT   Unsigned 16-bit integer   GL_SHORT   Signed 16-bit integer   GL_UNSIGNED_INT   Unsigned 32-bit integer   GL_INT   32-bit integer   GL_FLOAT   Single-precision floating-point value"
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "data",
        "description": "A pointer to the paletted texture data. The data is treated as single pixels of a 1-D texture palette entry for a palette entry."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The glCopyPixels function copies pixels in the framebuffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCopyPixels function copies a screen-aligned rectangle of pixels from the specified framebuffer location to a region relative to the current raster position. Its operation is well defined only if the entire pixel source region is within the exposed portion of the window. Results of copies from outside the window, or from regions of the window that are not exposed, are hardware dependent and undefined. The x and y parameters specify the window coordinates of the lower-left corner of the rectangular region to be copied. The width and height parameters specify the dimensions of the rectangular region to be copied. Both width and height must be nonnegative. Several parameters control the processing of the pixel data while it is being copied. These parameters are set with three functions: glPixelTransfer, glPixelMap, and glPixelZoom. This topic describes the effects on glCopyPixels of most, but not all, of the parameters specified by these three functions. The glCopyPixels function copies values from each pixel with the lower-left corner at (x + i, y + j) for 0 \u00e2\u0089\u00a4 i < width and 0 \u00e2\u0089\u00a4 j < height. This pixel is said to be the i pixel in the j row. Pixels are copied in row order from the lowest to the highest row, left to right in each row. The type parameter specifies whether color, depth, or stencil data is to be copied. The rasterization described thus far assumes pixel zoom factors of 1.0. If you use glPixelZoom to change the x and y pixel zoom factors, pixels are converted to fragments as follows. If (xr , yr ) is the current raster position, and a given pixel is in the i location in the j row of the source pixel rectangle, then fragments are generated for pixels whose centers are in the rectangle with corners at (xr + zoom\u00e2\u0082\u0093 i, yr + zoomy j) and (xr + zoom\u00e2\u0082\u0093 (i + 1), yr + zoomy (j + 1)) where zoom\u00e2\u0082\u0093 is the value of GL_ZOOM_X and zoomy is the value of GL_ZOOM_Y. Modes specified by glPixelStore have no effect on the operation of glCopyPixels. The following functions retrieve information related to glCopyPixels: glGet with argument GL_CURRENT_RASTER_POSITION glGet with argument GL_CURRENT_RASTER_POSITION_VALID To copy the color pixel in the lower-left corner of the window to the current raster position, use glCopyPixels( 0, 0, 1, 1, GL_COLOR ); ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCopyPixels",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x-plane coordinate of the lower-left corner of the rectangular region of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y-plane coordinate of the lower-left corner of the rectangular region of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width dimension of the rectangular region of pixels to be copied. Must be nonnegative."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height dimension of the rectangular region of pixels to be copied. Must be nonnegative."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "Specifies whether glCopyPixels is to copy color values, depth values, or stencil values. The acceptable symbolic constants are.  ValueMeaning  GL_COLOR   The glCopyPixels function reads indexes or RGBA colors from the buffer currently specified as the read source buffer (see glReadBuffer). \t\t\t\t   If OpenGL is in color-index mode:  Each index that is read from this buffer is converted to a fixed-point format with an unspecified number of bits to the right of the binary point. Each index is shifted left by GL_INDEX_SHIFT bits, and added to GL_INDEX_OFFSET.If GL_INDEX_SHIFT is negative, the shift is to the right. In either case, zero bits fill otherwise unspecified bit locations in the result.  If GL_MAP_COLOR is true, the index is replaced with the value that it references in lookup table GL_PIXEL_MAP_I_TO_I. Whether the lookup replacement of the index is done or not, the integer part of the index is then ANDed with 2b 1, where b is the number of bits in a color-index buffer.  If OpenGL is in RGBA mode:  The red, green, blue, and alpha components of each pixel that is read are converted to an internal floating-point format with unspecified precision. The conversion maps the largest representable component value to 1.0, and component value zero to 0.0. The resulting floating-point color values are then multiplied by GL_c_SCALE and added to GL_c_BIAS, where c is RED, GREEN, BLUE, and ALPHA for the respective color components. The results are clamped to the range [0,1]. If GL_MAP_COLOR is true, each color component is scaled by the size of lookup table GL_PIXEL_MAP_c_TO_c, and then replaced by the value that it references in that table; c is R, G, B, or A, respectively. \t\t\t\t  The resulting indexes or RGBA colors are then converted to fragments by attaching the current raster position z-coordinate and texture coordinates to each pixel, and then assigning window coordinates (xr + i, yr + j), where (xr , yr ) is the current raster position, and the pixel was the pixel in the i position in the j row. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the framebuffer.     GL_DEPTH   Depth values are read from the depth buffer and converted directly to an internal floating-point format with unspecified precision. The resulting floating-point depth value is then multiplied by GL_DEPTH_SCALE and added to GL_DEPTH_BIAS. The result is clamped to the range [0,1]. \t\t\t\t   The resulting depth components are then converted to fragments by attaching the current raster position color or color index and texture coordinates to each pixel, then assigning window coordinates (xr + i, yr + j), where (xr , yr ) is the current raster position, and the pixel was the pixel in the i position in the j row. These pixel fragments are then treated just like the fragments generated by rasterizing points, lines, or polygons. Texture mapping, fog, and all the fragment operations are applied before the fragments are written to the framebuffer.   GL_STENCIL   Stencil indexes are read from the stencil buffer and converted to an internal fixed-point format with an unspecified number of bits to the right of the binary point. Each fixed-point index is then shifted left by GL_INDEX_SHIFT bits, and added to GL_INDEX_OFFSET. If GL_INDEX_SHIFT is negative, the shift is to the right. In either case, zero bits fill otherwise unspecified bit locations in the result. If GL_MAP_STENCIL is true, the index is replaced with the value that it references in lookup table GL_PIXEL_MAP_S_TO_S. Whether the lookup replacement of the index is done or not, the integer part of the index is then ANDed with 2b - 1, where b is the number of bits in the stencil buffer. The resulting stencil indexes are then written to the stencil buffer such that the index read from the i location of the j row is written to location (xr + i, yr + j), where (xr , yr ) is the current raster position. Only the pixel-ownership test, the scissor test, and the stencil writemask affect these writes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The glCopyTexImage1D function copies pixels from the framebuffer into a one-dimensional texture image.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCopyTexImage1D function defines a one-dimensional texture image using pixels from the current framebuffer, rather than from main memory as is the case for glTexImage1D. Using the mipmap level specified with level, texture arrays are defined as a pixel row aligned with the lower-left corner of the window at the coordinates specified by x and y, with a length equal to width + 2 * border. The internal format of the texture array is specified with the internalFormat parameter. The glCopyTexImage1D function processes the pixels in a row in the same way as glCopyPixels, except that before the final conversion of the pixels, all pixel component values are clamped to the range [0,1] and converted to the texture's internal format for storage in the texture array. Pixel ordering is determined with lower x coordinates corresponding to lower texture coordinates. If any of the pixels within a specified row of the current framebuffer are outside the window associated with the current rendering context, then their values are undefined. You cannot include calls to glCopyTexImage1D in display lists. Texturing has no effect in color-index mode. The glPixelStore and glPixelTransfer functions affect texture images in exactly the way they affect glDrawPixels. The following function retrieves information related to glCopyTexImage1D: glIsEnabled with argument GL_TEXTURE_1D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCopyTexImage1D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target for which the image data will be changed. Must have the value GL_TEXTURE_1D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "internalFormat",
        "description": "The internal format and resolution of the texture data. This parameter must be one of the following symbolic values.  ConstantR BitsG BitsB BitsA BitsL BitsI Bits GL_ALPHA GL_ALPHA44 GL_ALPHA88 GL_ALPHA1212 GL_ALPHA1616 GL_LUMINANCE GL_LUMINANCE44 GL_LUMINANCE88 GL_LUMINANCE1212 GL_LUMINANCE1616 GL_LUMINANCE_ALPHA GL_LUMINANCE4_ALPHA444 GL_LUMINANCE6_ALPHA226 GL_LUMINANCE8_ALPHA888 GL_LUMINANCE12_ALPHA4412 GL_LUMINANCE12_ALPHA121212 GL_LUMINANCE16_ALPHA161616 GL_INTENSITY GL_INTENSITY44 GL_INTENSITY88 GL_INTENSITY1212 GL_INTENSITY1616 GL_RGB GL_R3_G3_B2332 GL_RGB4444 GL_RGB5555 GL_RGB8888 GL_RGB10101010 GL_RGB12121212 GL_RGB16161616 GL_RGBA GL_RGBA22222 GL_RGBA44444 GL_RGB5_A15551 GL_RGBA88888 GL_RGB10_A21010102 GL_RGBA1212121212 GL_RGBA1616161616"
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x-plane coordinate of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y-plane coordinate of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture image. ..."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "border",
        "description": "The width of the border. Must be either zero or 1."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The glCopyTexImage2D function copies pixels from the framebuffer into a two-dimensional texture image.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCopyTexImage2D function defines a two-dimensional texture image using pixels from the current framebuffer, rather than from main memory as is the case for glTexImage2D. Using the mipmap level specified with level, texture arrays are defined as a rectangle of pixels with the lower-left corner located at the coordinates x and y, width equal to width + (2 * border), and a height equal to height + (2 * border). The internal format of the texture array is specified with the internalFormat parameter. The glCopyTexImage2D function processes the pixels in a row in the same way as glCopyPixels except that before the final conversion of the pixels, all pixel component values are clamped to the range [0,1] and converted to the texture's internal format for storage in the texture array. Pixel ordering is determined with lower x and y coordinates corresponding to lower s and t texture coordinates. If any of the pixels within a specified row of the current framebuffer are outside the window associated with the current rendering context, then their values are undefined. You cannot include calls to glCopyTexImage2D in display lists. Texturing has no effect in color-index mode. The glPixelStore and glPixelTransfer functions affect texture images in exactly the way they affect glDrawPixels. The following function retrieves information related to glCopyTexImage2D: glIsEnabled with argument GL_TEXTURE_2D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCopyTexImage2D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target to which the image data will be changed. Must have the value GL_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "internalFormat",
        "description": "The internal format and resolution of the texture data. The values 1, 2, 3, and 4 are not accepted for internalFormat. The parameter can assume one of the following symbolic values.  ConstantR BitsG BitsB BitsA BitsL BitsI Bits GL_ALPHA GL_ALPHA44 GL_ALPHA88 GL_ALPHA1212 GL_ALPHA1616 GL_LUMINANCE GL_LUMINANCE44 GL_LUMINANCE88 GL_LUMINANCE1212 GL_LUMINANCE1616 GL_LUMINANCE_ALPHA GL_LUMINANCE4_ALPHA444 GL_LUMINANCE6_ALPHA226 GL_LUMINANCE8_ALPHA888 GL_LUMINANCE12_ALPHA4412 GL_LUMINANCE12_ALPHA121212 GL_LUMINANCE16_ALPHA161616 GL_INTENSITY GL_INTENSITY44 GL_INTENSITY88 GL_INTENSITY1212 GL_INTENSITY1616 GL_RGB GL_R3_G3_B2332 GL_RGB4444 GL_RGB5555 GL_RGB8888 GL_RGB10101010 GL_RGB12121212 GL_RGB16161616 GL_RGBA GL_RGBA22222 GL_RGBA44444 GL_RGB5_A15551 GL_RGBA88888 GL_RGB10_A21010102 GL_RGBA1212121212 GL_RGBA1616161616"
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x-plane coordinate of the lower-left corner of the rectangular region of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y-plane coordinate of the lower-left corner of the rectangular region of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture image. ..."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the texture image. ..."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "border",
        "description": "The width of the border. Must be either zero or 1."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The glCopyTexSubImage1D function copies a sub-image of a one-dimensional texture image from the framebuffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCopyTexSubImage1D function replaces a portion of a one-dimensional texture image using pixels from the current framebuffer, rather than from main memory as is the case for glTexSubImage1D. A row of pixels beginning with the window coordinates specified by x and y and with the length width replaces the portion of the texture array with the indexes xoffset through xoffset + (width - 1). The destination in the texture array cannot include any texels outside the originally specified texture array. The glCopyTexSubImage1D function processes the pixels in a row in the same way as glCopyPixels except that before the final conversion of the pixels, all pixel component values are clamped to the range [0,1] and converted to the texture's internal format for storage in the texture array. Pixel ordering is determined with lower x coordinates corresponding to lower texture coordinates. If any of the pixels within a specified row of the current framebuffer are outside the window associated with the current rendering context, then their values are undefined. No change is made to the internalFormat, width, or border parameter of the specified texture array or to texel values outside the specified texture sub-image. You cannot include calls to glCopyTexSubImage1D in display lists. Texturing has no effect in color-index mode. The glPixelStore and glPixelTransfer functions affect texture images in exactly the way they affect the way pixels are drawn using glDrawPixels. The following functions retrieve information related to glCopyTexSubImage1D: glGetTexImage glIsEnabled with argument GL_TEXTURE_1D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCopyTexSubImage1D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target to which the image data will be changed. Must have the value GL_TEXTURE_1D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "xoffset",
        "description": "The texel offset within the texture array."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x-plane coordinate of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y-plane coordinate of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the sub-image of the texture image. Specifying a texture sub-image with zero width has no effect."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The glCopyTexSubImage2D function copies a sub-image of a two-dimensional texture image from the framebuffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCopyTexSubImage2D function replaces a rectangular portion of a two-dimensional texture image with pixels from the current framebuffer, rather than from main memory as is the case for glTexSubImage2D. A rectangle of pixels beginning with the x and y window coordinates and with the dimensions width and height replaces the portion of the texture array with the indexes xoffset through xoffset + (width - 1), with the indexes yoffset through yoffset + (width - 1) at the mipmap level specified by level. The destination rectangle in the texture array cannot include any texels outside the originally specified texture array. The glCopyTexSubImage2D function processes the pixels in a row in the same way as glCopyPixels, except that before the final conversion of the pixels, all pixel component values are clamped to the range [0,1] and converted to the texture's internal format for storage in the texture array. Pixel ordering is determined with lower x coordinates corresponding to lower texture coordinates. If any of the pixels within a specified row of the current framebuffer are outside the window associated with the current rendering context, then their values are undefined. If any of the pixels within the specified rectangle of the current framebuffer are outside the read window associated with the current rendering context, then the values obtained for those pixels are undefined. No change is made to the internalFormat, width, height, or border parameter of the specified texture array or to texel values outside the specified texture sub-image. You cannot include calls to glCopyTexSubImage2D in display lists. Texturing has no effect in color-index mode. The glPixelStore and glPixelTransfer functions affect texture images in exactly the way they affect the way pixels are drawn using glDrawPixels. The following functions retrieve information related to glCopyTexSubImage2D: glGetTexImage glIsEnabled with argument GL_TEXTURE_2D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCopyTexSubImage2D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target to which the image data will be changed. Must have the value GL_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "xoffset",
        "description": "The texel offset in the x direction within the texture array."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "yoffset",
        "description": "The texel offset in the y direction within the texture array."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x-plane coordinates of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y-plane coordinates of the lower-left corner of the row of pixels to be copied."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the sub-image of the texture image. Specifying a texture sub-image with zero width has no effect."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the sub-image of the texture image. Specifying a texture sub-image with zero width has no effect."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glCullFace function specifies whether front-facing or back-facing facets can be culled.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glCullFace function specifies whether front-facing or back-facing facets are culled (as specified by mode) when facet culling is enabled. You enable and disable facet culling using glEnable and glDisable with the argument GL_CULL_FACE. Facets include triangles, quadrilaterals, polygons, and rectangles. The glFrontFace function specifies which of the clockwise and counterclockwise facets are front-facing and back-facing. If mode is GL_FRONT_AND_BACK, no facets are drawn, but other primitives, such as points and lines, are drawn. The following functions retrieve information related to glCullFace: glGet with argument GL_CULL_FACE_MODE glIsEnabled with argument GL_CULL_FACE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glCullFace",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "Specifies whether front-facing or back-facing facets are candidates for culling. The symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The default value is GL_BACK."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glDeleteLists function deletes a contiguous group of display lists.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glDeleteLists function causes a contiguous group of display lists to be deleted. The list parameter is the name of the first display list to be deleted, and range is the number of display lists to delete. All display lists d with list \u00e2\u0089\u00a4 d \u00e2\u0089\u00a4 list + range - 1 are deleted. All storage locations allocated to the specified display lists are freed, and the names are available for reuse at a later time. Names within the range that do not have an associated display list are ignored. If range is zero, nothing happens. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDeleteLists",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "list",
        "description": "The integer name of the first display list to delete."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "range",
        "description": "The number of display lists to delete."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glDeleteTextures function deletes named textures.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glDeleteTextures function deletes n textures named by the elements of the array textures. After a texture is deleted, it has no contents or dimensionality, and its name is free for reuse (for example, by glGenTextures). The glDeleteTextures function ignores zeros and names that do not correspond to existing textures. If a texture that is currently bound is deleted, the binding reverts to zero (the default texture). You cannot include calls to glDeleteTextures in display lists. The following function retrieves information related to glDeleteTextures: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDeleteTextures",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "n",
        "description": "The number of textures to be deleted."
      },
      {
        "in_out": "const",
        "type": "GLuint*",
        "name": "textures",
        "description": "An array of textures to be deleted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glDepthFunc function specifies the value used for depth-buffer comparisons.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glDepthFunc function specifies the function used to compare each incoming pixel z value with the z value present in the depth buffer. The comparison is performed only if depth testing is enabled. (See glEnable with the argument GL_DEPTH_TEST.) Initially, depth testing is disabled. The following functions retrieve information related to glDepthFunc: glGet with argument GL_DEPTH_FUNC glIsEnabled with argument GL_DEPTH_TEST ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDepthFunc",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "func",
        "description": "Specifies the depth-comparison function. The following symbolic constants are accepted.  ValueMeaning  GL_NEVER   Never passes.   GL_LESS   Passes if the incoming z value is less than the stored z value. This is the default value.   GL_LEQUAL   Passes if the incoming z value is less than or equal to the stored z value.   GL_EQUAL   Passes if the incoming z value is equal to the stored z value.   GL_GREATER   Passes if the incoming z value is greater than the stored z value.   GL_NOTEQUAL   Passes if the incoming z value is not equal to the stored z value.   GL_GEQUAL   Passes if the incoming z value is greater than or equal to the stored z value.   GL_ALWAYS   Always passes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glDepthMask function enables or disables writing into the depth buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The following function retrieves information related to glDepthMask: glGet with argument GL_DEPTH_WRITEMASK ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDepthMask",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLboolean",
        "name": "flag",
        "description": "Specifies whether the depth buffer is enabled for writing. If flag is zero, depth-buffer writing is disabled. Otherwise, it is enabled. Initially, depth-buffer writing is enabled."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glDepthRange function specifies the mapping of z values from normalized device coordinates to window coordinates.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "After clipping and division by w, z -coordinates range from 0.0 to 1.0, corresponding to the near and far clipping planes. The glDepthRange function specifies a linear mapping of the normalized z-coordinates in this range to window z-coordinates. Regardless of the actual depth buffer implementation, window coordinate depth values are treated as though they range from 0.0 through 1.0 (like color components). Thus, the values accepted by glDepthRange are both clamped to this range before they are accepted. The default mapping of (0,1) maps the near plane to 0 and the far plane to 1. With this mapping, the depth buffer range is fully utilized. It is not necessary that zNear be less than zFar. Reverse mappings such as (1,0) are acceptable. The following function retrieves information related to glDepthRange: glGet with argument GL_DEPTH_RANGE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDepthRange",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLclampd",
        "name": "zNear",
        "description": "The mapping of the near clipping plane to window coordinates. The default value is zero."
      },
      {
        "in_out": "",
        "type": "GLclampd",
        "name": "zFar",
        "description": "The mapping of the far clipping plane to window coordinates. The default value is 1."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glDrawArrays function specifies multiple primitives to render.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "With glDrawArrays, you can specify multiple geometric primitives to render. Instead of calling separate OpenGL functions to pass each individual vertex, normal, or color, you can specify separate arrays of vertices, normals, and colors to define a sequence of primitives (all the same kind) with a single call to glDrawArrays. When you call glDrawArrays, count sequential elements from each enabled array are used to construct a sequence of geometric primitives, beginning with the first element. The mode parameter specifies what kind of primitive to construct and how to use the array elements to construct the primitives. After glDrawArrays returns, the values of vertex attributes that are modified by glDrawArrays are undefined. For example, if GL_COLOR_ARRAY is enabled, the value of the current color is undefined after glDrawArrays returns. Attributes not modified by glDrawArrays remain defined. When GL_VERTEX_ARRAY is not enabled, no geometric primitives are generated but the attributes corresponding to enabled arrays are modified. You can include glDrawArrays in display lists. When you include glDrawArrays in a display list, the necessary array data, determined by the array pointers and the enables, are generated and entered in the display list. The values of array pointers and enables are determined during the creation of display lists. You can read static array data at any time. If any static array elements are modified and the array is not specified again, the results of any subsequent calls to glDrawArrays are undefined. Although no error is generated when you specify an array more than once within glBegin and glend pairs, the results are undefined. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDrawArrays",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The kind of primitives to render. The following constants specify acceptable types of primitives: GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "first",
        "description": "The starting index in the enabled arrays."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "count",
        "description": "The number of indexes to render."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glDrawBuffer function specifies which color buffers are to be drawn into.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "When colors are written to the framebuffer, they are written into the color buffers specified by glDrawBuffer. If more than one color buffer is selected for drawing, then blending or logical operations are computed and applied independently for each color buffer and can produce different results in each buffer. Monoscopic contexts include only left buffers, and stereoscopic contexts include both left and right buffers. Likewise, single-buffered contexts include only front buffers, and double-buffered contexts include both front and back buffers. The context is selected at OpenGL initialization. It is always the case that GL_AUX i = GL_AUX0 + i. The following functions retrieve information related to the glDrawBuffer function: glGet with argument GL_DRAW_BUFFER glGet with argument GL_AUX_BUFFERS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDrawBuffer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "Specifies up to four color buffers to be drawn into with the following acceptable symbolic constants.  ValueMeaning  GL_NONE   No color buffers are written.   GL_FRONT_LEFT   Only the front-left color buffer is written.   GL_FRONT_RIGHT   Only the front-right color buffer is written.   GL_BACK_LEFT   Only the back-left color buffer is written.   GL_BACK_RIGHT   Only the back-right color buffer is written.   GL_FRONT   Only the front-left and front-right color buffers are written. If there is no front-right color buffer, only the front left-color buffer is written.   GL_BACK   Only the back-left and back-right color buffers are written. If there is no back-right color buffer, only the back-left color buffer is written.   GL_LEFT   Only the front-left and back-left color buffers are written. If there is no back-left color buffer, only the front-left color buffer is written.   GL_RIGHT   Only the front-right and back-right color buffers are written. If there is no back-right color buffer, only the front-right color buffer is written.   GL_FRONT_AND_BACK   All the front and back color buffers (front-left, front-right, back-left, back-right) are written. If there are no back color buffers, only the front-left and front-right color buffers are written. If there are no right color buffers, only the front-left and back-left color buffers are written. If there are no right or back color buffers, only the front-left color buffer is written.   GL_AUXi   Only the auxiliary color buffer i is written; i is between 0 and GL_AUX_BUFFERS - 1. (GL_AUX_BUFFERS is not the upper limit; use glGet to query the number of available auxiliary buffers.)     The default value is GL_FRONT for single-buffered contexts, and GL_BACK for double-buffered contexts."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glDrawElements function renders primitives from array data.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glDrawElements function enables you to specify multiple geometric primitives with very few function calls. Instead of calling an OpenGL function to pass each individual vertex, normal, or color, you can specify separate arrays of vertices, normals, and colors beforehand and use them to define a sequence of primitives (all of the same type) with a single call to glDrawElements. When you call the glDrawElements function, it uses count sequential elements from indices to construct a sequence of geometric primitives. The mode parameter specifies what kind of primitives are constructed, and how the array elements are used to construct these primitives. If GL_VERTEX_ARRAY is not enabled, no geometric primitives are generated. Vertex attributes that are modified by glDrawElements have an unspecified value after glDrawElements returns. For example, if GL_COLOR_ARRAY is enabled, the value of the current color is undefined after glDrawElements executes. Attributes that aren't modified remain unchanged. You can include the glDrawElements function in display lists. When glDrawElements is included in a display list, the necessary array data (determined by the array pointers and enables) is also entered into the display list. Because the array pointers and enables are client-side state variables, their values affect display lists when the lists are created, not when the lists are executed. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDrawElements",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The kind of primitives to render. It can assume one of the following symbolic values: GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "count",
        "description": "The number of elements to be rendered."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "indices",
        "description": "A pointer to the location where the indices are stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The glDrawPixels function writes a block of pixels to the framebuffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glDrawPixels function reads pixel data from memory and writes it into the framebuffer relative to the current raster position. Use glRasterPos to set the current raster position, and use glGet with argument GL_CURRENT_RASTER_POSITION to query the raster position. Several parameters define the encoding of pixel data in memory and control the processing of the pixel data before it is placed in the framebuffer. These parameters are set with four functions: glPixelStore, glPixelTransfer, glPixelMap, and glPixelZoom. This topic describes the effects on glDrawPixels of many, but not all, of the parameters specified by these four functions. Data is read from pixels as a sequence of signed or unsigned bytes, signed or unsigned shorts, signed or unsigned integers, or single-precision floating-point values, depending on type. Each of these bytes, shorts, integers, or floating-point values is interpreted as one color or depth component, or one index, depending on format. Indexes are always treated individually. Color components are treated as groups of one, two, three, or four values, again based on format. Both individual indexes and groups of components are referred to as pixels. If type is GL_BITMAP, the data must be unsigned bytes, and format must be either GL_COLOR_INDEX or GL_STENCIL_INDEX. Each unsigned byte is treated as eight 1-bit pixels, with bit ordering determined by GL_UNPACK_LSB_FIRST (see glPixelStore). The width by height pixels are read from memory, starting at location pixels. By default, these pixels are taken from adjacent memory locations, except that after all width pixels are read, the read pointer is advanced to the next 4-byte boundary. The glPixelStore function specifies the 4-byte row alignment with argument GL_UNPACK_ALIGNMENT, and you can set it to 1, 2, 4, or 8 bytes. Other pixel store parameters specify different read pointer advancements, both before the first pixel is read, and after all width pixels are read. The glPixelStore function operates on each of the width-by-height pixels that it reads from memory in the same way, based on the values of several parameters specified by glPixelTransfer and glPixelMap. The details of these operations, as well as the target buffer into which the pixels are drawn, are specific to the format of the pixels, as specified by format. The rasterization described thus far assumes pixel zoom factors of 1.0. If you use glPixelZoom to change the x and y pixel zoom factors, pixels are converted to fragments as follows. If (xr,yr) is the current raster position, and a given pixel is in the nth column and mth row of the pixel rectangle, then fragments are generated for pixels whose centers are in the rectangle with corners at (xr + zoom\u00e2\u0082\u0093 n, yr + zoomy m) (xr + zoom\u00e2\u0082\u0093 (n + 1), yr + zoomy (m + 1)) where zoom\u00e2\u0082\u0093 is the value of GL_ZOOM_X and zoomy is the value of GL_ZOOM_Y. The following functions retrieve information related to glDrawPixels: glGet with argument GL_CURRENT_RASTER_POSITION glGet with argument GL_CURRENT_RASTER_POSITION_VALID ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDrawPixels",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width dimension of the pixel rectangle that will be written into the framebuffer."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height dimension of the pixel rectangle that will be written into the framebuffer."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. ..."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type for pixels. The following are the accepted symbolic constants and their meanings.   ValueMeaning  GL_UNSIGNED_BYTE   Unsigned 8-bit integer   GL_BYTE   Signed 8-bit integer   GL_BITMAP   Single bits in unsigned 8-bit integers   GL_UNSIGNED_SHORT   Unsigned 16-bit integer   GL_SHORT   Signed 16-bit integer   GL_UNSIGNED_INT   Unsigned 32-bit integer   GL_INT   32-bit integer   GL_FLOAT   Single-precision floating-point"
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "A pointer to the pixel data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glEdgeFlagPointer function defines an array of edge flags.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glEdgeFlagPointer function specifies the location and data of an array of Boolean edge flags to use when rendering. The stride parameter determines the byte offset from one edge flag to the next, which enables the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations, storing the vertices and attributes in a single array can be more efficient than using separate arrays. An edge-flag array is enabled when you specify the GL_EDGE_FLAG_ARRAY constant with glEnableClientState. When enabled, glDrawArrays or glArrayElement uses the edge-flag array. By default the edge-flag array is disabled. Use glDrawArrays to construct a sequence of primitives (all of the same type) from prespecified vertex and vertex attribute arrays. Use glArrayElement to specify primitives by indexing vertices and vertex attributes, and glDrawElements to construct a sequence of primitives by indexing vertices and vertex attributes. You cannot include glEdgeFlagPointer in display lists. When you specify an edge-flag array using glEdgeFlagPointer, the values of all the function's edge-flag array parameters are saved in a client-side state and static array elements can be cached. Because the edge-flag array parameters are in a client-side state, glPushAttrib and glPopAttrib do not save or restore their values. Although calling glEdgeFlagPointer within a glBegin/glend pair does not generate an error, the results are undefined. The following functions retrieve information related to the glEdgeFlagPointer function: glGet with argument GL_EDGE_FLAG_ARRAY_STRIDE glGet with argument GL_EDGE_FLAG_ARRAY_COUNT glGetPointerv with argument GL_EDGE_FLAG_ARRAY_POINTER glIsEnabled with argument GL_EDGE_FLAG_ARRAY ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glEdgeFlagPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive edge flags. When stride is zero, the edge flags are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first edge flag in the array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glEnable and glDisable functions enable or disable OpenGL capabilities.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glEnable and glDisable functions enable and disable various OpenGL graphics capabilities. Use glIsEnabled or glGet to determine the current setting of any capability. Both glEnable and glDisable take a single argument, cap, which can assume one of the following values:  ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glEnable",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "cap",
        "description": "A symbolic constant indicating an OpenGL capability. For discussion of the values cap can take, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glEnable and glDisable functions enable or disable OpenGL capabilities.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glEnable and glDisable functions enable and disable various OpenGL graphics capabilities. Use glIsEnabled or glGet to determine the current setting of any capability. Both glEnable and glDisable take a single argument, cap, which can assume one of the following values:  ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDisable",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "cap",
        "description": "A symbolic constant indicating an OpenGL capability. For discussion of the values cap can take, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glEnableClientState and glDisableClientState functions enable and disable arrays respectively.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glEnableClientState and glDisableClientState functions enable and disable various individual arrays. Use glIsEnabled or glGet to determine the current setting of any capability. Calling glEnableClientState and glDisableClientState between calls to glBegin and the corresponding call to glEnd can cause an error. If no error is generated, the behavior is undefined. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glEnableClientState",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "array",
        "description": "A symbolic constant for the array you want to enable or disable. This parameter can assume one of the following values.  ValueMeaning  GL_COLOR_ARRAY   If enabled, use color arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glColorPointer.   GL_EDGE_FLAG_ARRAY   If enabled, use edge flag arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glEdgeFlagPointer.   GL_INDEX_ARRAY   If enabled, use index arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glIndexPointer.   GL_NORMAL_ARRAY   If enabled, use normal arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glNormalPointer.   GL_TEXTURE_COORD_ARRAY   If enabled, use texture coordinate arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glTexCoordPointer.   GL_VERTEX_ARRAY   If enabled, use vertex arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glVertexPointer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glEnableClientState and glDisableClientState functions enable and disable arrays respectively.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glEnableClientState and glDisableClientState functions enable and disable various individual arrays. Use glIsEnabled or glGet to determine the current setting of any capability. Calling glEnableClientState and glDisableClientState between calls to glBegin and the corresponding call to glEnd can cause an error. If no error is generated, the behavior is undefined. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glDisableClientState",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "array",
        "description": "A symbolic constant for the array you want to enable or disable. This parameter can assume one of the following values.  ValueMeaning  GL_COLOR_ARRAY   If enabled, use color arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glColorPointer.   GL_EDGE_FLAG_ARRAY   If enabled, use edge flag arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glEdgeFlagPointer.   GL_INDEX_ARRAY   If enabled, use index arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glIndexPointer.   GL_NORMAL_ARRAY   If enabled, use normal arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glNormalPointer.   GL_TEXTURE_COORD_ARRAY   If enabled, use texture coordinate arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glTexCoordPointer.   GL_VERTEX_ARRAY   If enabled, use vertex arrays with calls to glArrayElement, glDrawElements, or glDrawArrays. See also glVertexPointer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glFeedbackBuffer function controls feedback mode.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glFeedbackBuffer function controls feedback. Feedback, like selection, is an OpenGL mode. The mode is selected by calling glRenderMode with GL_FEEDBACK. When OpenGL is in feedback mode, no pixels are produced by rasterization. Instead, information about primitives that would have been rasterized is fed back to the application using OpenGL. The glFeedbackBuffer function has three arguments: You must issue glFeedbackBuffer before feedback mode is enabled (by calling glRenderMode with argument GL_FEEDBACK). Setting GL_FEEDBACK without establishing the feedback buffer, or calling glFeedbackBuffer while OpenGL is in feedback mode, is an error. Take OpenGL out of feedback mode by calling glRenderMode with a parameter value other than GL_FEEDBACK. When you do this while OpenGL is in feedback mode, glRenderMode returns the number of entries placed in the feedback array. The returned value never exceeds size. If the feedback data required more room than was available in buffer, glRenderMode returns a negative value. While in feedback mode, each primitive that would be rasterized generates a block of values that gets copied into the feedback array. If doing so would cause the number of entries to exceed the maximum, glFeedbackBuffer partially writes the block so as to fill the array (if there is any room left at all), and sets an overflow flag. Each block begins with a code indicating the primitive type, followed by values that describe the primitive's vertices and associated data. The glFeedbackBuffer function also writes entries for bitmaps and pixel rectangles. Feedback occurs after polygon culling and glPolygonMode interpretation of polygons has taken place, so polygons that are culled are not returned in the feedback buffer. It can also occur after polygons with more than three edges are broken up into triangles, if the OpenGL implementation renders polygons by performing this decomposition. You can insert a marker into the feedback buffer with glPassThrough. The following is the grammar for the blocks of values written into the feedback buffer. Each primitive is indicated with a unique identifying value followed by some number of vertices. Polygon entries include an integer value indicating how many vertices follow. A vertex is fed back as some number of floating-point values, as determined by type. Colors are fed back as four values in RGBA mode and one value in color-index mode. feedbackList <\u00e2\u0080\u0094 feedbackItem feedbackList | feedbackItem feedbackItem <\u00e2\u0080\u0094 point | lineSegment | polygon | bitmap | pixelRectangle | passThru point <\u00e2\u0080\u0094 GL_POINT_TOKEN vertex lineSegment <\u00e2\u0080\u0094 GL_LINE_TOKEN vertex vertex | GL_LINE_RESET_TOKEN vertex vertex polygon <\u00e2\u0080\u0094 GL_POLYGON_TOKEN n polySpec polySpec <\u00e2\u0080\u0094 polySpec vertex | vertex vertex vertex bitmap <\u00e2\u0080\u0094 GL_BITMAP_TOKEN vertex pixelRectangle <\u00e2\u0080\u0094 GL_DRAW_PIXEL_TOKEN vertex | GL_COPY_PIXEL_TOKEN vertex passThru <\u00e2\u0080\u0094 GL_PASS_THROUGH_TOKEN value vertex <\u00e2\u0080\u0094 2d | 3d | 3dColor | 3dColorTexture | 4dColorTexture 2d <\u00e2\u0080\u0094 value value 3d <\u00e2\u0080\u0094 value value value 3dColor <\u00e2\u0080\u0094 value value value color 3dColorTexture <\u00e2\u0080\u0094 value value value color tex 4dColorTexture <\u00e2\u0080\u0094 value value value value color tex color <\u00e2\u0080\u0094 rgba | index rgba <\u00e2\u0080\u0094 value value value value index <\u00e2\u0080\u0094 value tex <\u00e2\u0080\u0094 value value value value The value parameter is a floating-point number, and n is a floating-point integer giving the number of vertices in the polygon. The following are symbolic floating-point constants: GL_POINT_TOKEN, GL_LINE_TOKEN, GL_LINE_RESET_TOKEN, GL_POLYGON_TOKEN, GL_BITMAP_TOKEN, GL_DRAW_PIXEL_TOKEN, GL_COPY_PIXEL_TOKEN, and GL_PASS_THROUGH_TOKEN. GL_LINE_RESET_TOKEN is returned whenever the line stipple pattern is reset. The data returned as a vertex depends on the feedback type. The following table gives the correspondence between type and the number of values per vertex; k is 1 in color-index mode and 4 in RGBA mode.  Feedback vertex coordinates are in window coordinates, except w, which is in clip coordinates. Feedback colors are lighted, if lighting is enabled. Feedback texture coordinates are generated, if texture coordinate generation is enabled. They are always transformed by the texture matrix. The glFeedbackBuffer function, when used in a display list, is not compiled into the display list but rather is executed immediately. The following function retrieves information related to glFeedbackBuffer: glGet with argument GL_RENDER_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glFeedbackBuffer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "size",
        "description": "The maximum number of values that can be written into buffer."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "A symbolic constant that describes the information that will be returned for each vertex. The following symbolic constants are accepted: GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE."
      },
      {
        "in_out": "",
        "type": "GLfloat*",
        "name": "buffer",
        "description": "Returns the feedback data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glFinish function blocks until all OpenGL execution is complete.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glFinish function does not return until the effects of all previously called OpenGL functions are complete. Such effects include all changes to the OpenGL state, all changes to the connection state, and all changes to the framebuffer contents. The glFinish function requires a round trip to the server. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glFinish",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glFlush function forces execution of OpenGL functions in finite time.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "Different OpenGL implementations buffer commands in several different locations, including network buffers and the graphics accelerator itself. The glFlush function empties all these buffers, causing all issued commands to be executed as quickly as they are accepted by the actual rendering engine. Though this execution may not be completed in any particular time period, it does complete in a finite amount of time. Because any OpenGL program might be executed over a network, or on an accelerator that buffers commands, be sure to call glFlush in any programs requiring that all of their previously issued commands have been completed. For example, call glFlush before waiting for user input that depends on the generated image. The glFlush function can return at any time. It does not wait until the execution of all previously issued OpenGL functions is complete. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glFlush",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glFrontFace function defines front-facing and back-facing polygons.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "In a scene composed entirely of opaque closed surfaces, back-facing polygons are never visible. Eliminating these invisible polygons has the obvious benefit of speeding up the rendering of the image. You enable and disable elimination of back-facing polygons with glEnable and glDisable using argument GL_CULL_FACE. The projection of a polygon to window coordinates is said to have clockwise winding if an imaginary object following the path from its first vertex, its second vertex, and so on, to its last vertex, and finally back to its first vertex, moves in a clockwise direction about the interior of the polygon. The polygon's winding is said to be counterclockwise if the imaginary object following the same path moves in a counterclockwise direction about the interior of the polygon. The glFrontFace function specifies whether polygons with clockwise winding in window coordinates, or counterclockwise winding in window coordinates, are taken to be front-facing. Passing GL_CCW to mode selects counterclockwise polygons as front-facing; GL_CW selects clockwise polygons as front-facing. By default, counterclockwise polygons are taken to be front-facing. The following function retrieves information about glFrontface: glGet with argument GL_FRONT_FACE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glFrontFace",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The default value is GL_CCW."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The glFrustum function multiplies the current matrix by a perspective matrix.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glFrustum function describes a perspective matrix that produces a perspective projection. The (left, bottom, zNear) and (right, top, zNear) parameters specify the points on the near clipping plane that are mapped to the lower-left and upper-right corners of the window, respectively, assuming that the eye is located at (0,0,0). The zFar parameter specifies the location of the far clipping plane. Both zNear and zFar must be positive. The corresponding matrix is shown in the following image. The glFrustum function multiplies the current matrix by this matrix, with the result replacing the current matrix. That is, if M is the current matrix and F is the frustum perspective matrix, then glFrustum replaces M with M \u00e2\u0080\u00a2 F. Use glPushMatrix and glPopMatrix to save and restore the current matrix stack. Depth-buffer precision is affected by the values specified for zNear and zFar. The greater the ratio of zFar to zNear is, the less effective the depth buffer will be at distinguishing between surfaces that are near each other. If roughly log\u00e2\u0082\u0082 (r) bits of depth buffer precision are lost. Because r approaches infinity as zNear approaches zero, you should never set zNear to zero. The following functions retrieve information about glFrustum: glGet with argument GL_MATRIX_MODE glGet with argument GL_MODELVIEW_MATRIX glGet with argument GL_PROJECTION_MATRIX glGet with argument GL_TEXTURE_MATRIX ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glFrustum",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "left",
        "description": "The coordinate for the left-vertical clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "right",
        "description": "The coordinate for the right-vertical clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "bottom",
        "description": "The coordinate for the bottom-horizontal clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "top",
        "description": "The coordinate for the bottom-horizontal clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "zNear",
        "description": "The distances to the near-depth clipping plane. Must be positive."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "zFar",
        "description": "The distances to the far-depth clipping planes. Must be positive."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glGenLists function generates a contiguous set of empty display lists.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "The glGenLists function has one argument, range. It returns an integer n such that range contiguous empty display lists, named n, n + 1, . . ., n + (range - 1), are created. If range is zero, if there is no group of range contiguous names available, or if any error is generated, then no display lists are generated and zero is returned. The following function retrieves information related to glGenLists: glIsList ",
    "return_type": "GLuint",
    "category": "OpenGL",
    "name": "glGenLists",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "range",
        "description": "The number of contiguous empty display lists to be generated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGenTextures function generates texture names.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glGenTextures function returns n texture names in the textures parameter. The texture names are not necessarily a contiguous set of integers, however, none of the returned names can have been in use immediately prior to calling the glGenTextures function. The generated textures assume the dimensionality of the texture target to which they are first bound with the glBindTexture function. Texture names returned by glGenTextures are not returned by subsequent calls to glGenTextures unless they are first deleted by calling glDeleteTextures. You cannot include glGenTextures in display lists. The following function retrieves information related to glGenTextures: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGenTextures",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "n",
        "description": "The number of texture names to be generated."
      },
      {
        "in_out": "",
        "type": "GLuint*",
        "name": "textures",
        "description": "A pointer to the first element of an array in which the generated texture names are stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetBooleanv function returns the value or values of a selected parameter.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "This function returns values for simple state variables in OpenGL. The pname parameter is a symbolic constant indicating the state variable to be returned, and params is a pointer to an array of the indicated type in which to place the returned data. Type conversion is performed if params has a different type from the state variable value being requested. If you call glGetBooleanv, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE. If you call glGetIntegerv, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and 1.0 to the most negative representable integer value. If you call glGetFloatv or glGetDoublev, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values. You can query many of the Boolean parameters more easily with glIsEnabled. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetBooleanv",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "The parameter value to be returned. The following symbolic constants are accepted.  ValueMeaning  GL_ACCUM_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer.   GL_ACCUM_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in the accumulation buffer.   GL_ACCUM_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum.   GL_ACCUM_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in the accumulation buffer.   GL_ACCUM_RED_BITS   The params parameter returns one value: the number of red bitplanes in the accumulation buffer.   GL_ALPHA_BIAS   The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in each color buffer.   GL_ALPHA_SCALE   The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_TEST   The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc.   GL_ALPHA_TEST_FUNC   The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc.   GL_ALPHA_TEST_REF   The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value.   GL_ATTRIB_STACK_DEPTH   The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib.   GL_AUTO_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2.   GL_AUX_BUFFERS   The params parameter returns one value: the number of auxiliary color buffers.   GL_BLEND   The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc.   GL_BLEND_DST   The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc.   GL_BLEND_SRC   The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc.   GL_BLUE_BIAS   The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer.   GL_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in each color buffer.   GL_BLUE_SCALE   The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer.   GL_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib.   GL_CLIP_PLANEi   The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane.   GL_COLOR_ARRAY   The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer.   GL_COLOR_ARRAY_SIZE   The params parameter returns one value, the number of components per color in the color array. See glColorPointer.   GL_COLOR_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer.   GL_COLOR_ARRAY_TYPE   The params parameter returns one value, the data type of each component in the color array. See glColorPointer.   GL_COLOR_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor.   GL_COLOR_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_COLOR_MATERIAL   The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_FACE   The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_PARAMETER   The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_WRITEMASK   The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask.   GL_CULL_FACE   The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace.   GL_CULL_FACE_MODE   The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace.   GL_CURRENT_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor.   GL_CURRENT_INDEX   The params parameter returns one value: the current color index. See glIndex.   GL_CURRENT_NORMAL   The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal.   GL_CURRENT_RASTER_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos.   GL_CURRENT_RASTER_DISTANCE   The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos.   GL_CURRENT_RASTER_INDEX   The params parameter returns one value: the color index of the current raster position. See glRasterPos.   GL_CURRENT_RASTER_POSITION   The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos.   GL_CURRENT_RASTER_POSITION_VALID   The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos.   GL_CURRENT_RASTER_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord.   GL_CURRENT_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord.   GL_DEPTH_BIAS   The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_BITS   The params parameter returns one value: the number of bitplanes in the depth buffer.   GL_DEPTH_CLEAR_VALUE   The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth.   GL_DEPTH_FUNC   The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc.   GL_DEPTH_RANGE   The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange.   GL_DEPTH_SCALE   The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_TEST   The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange.   GL_DEPTH_WRITEMASK   The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask.   GL_DITHER   The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled.   GL_DOUBLEBUFFER   The params parameter returns a single Boolean value indicating whether double buffering is supported.   GL_DRAW_BUFFER   The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer.   GL_EDGE_FLAG   The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag.   GL_EDGE_FLAG_ARRAY   The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer.   GL_EDGE_FLAG_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer.   GL_FOG   The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog.   GL_FOG_COLOR   The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog.   GL_FOG_DENSITY   The params parameter returns one value: the fog density parameter. See glFog.   GL_FOG_END   The params parameter returns one value: the end factor for the linear fog equation. See glFog.   GL_FOG_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint.   GL_FOG_INDEX   The params parameter returns one value: the fog color index. See glFog.   GL_FOG_MODE   The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog.   GL_FOG_START   The params parameter returns one value: the start factor for the linear fog equation. See glFog.   GL_FRONT_FACE   The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace.   GL_GREEN_BIAS   The params parameter returns one value: the green bias factor used during pixel transfers.   GL_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in each color buffer.   GL_GREEN_SCALE   The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer.   GL_INDEX_ARRAY   The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer.   GL_INDEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer.   GL_INDEX_ARRAY_TYPE   The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer.   GL_INDEX_BITS   The params parameter returns one value: the number of bitplanes in each color-index buffer.   GL_INDEX_CLEAR_VALUE   The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex.   GL_INDEX_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_INDEX_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE).   GL_INDEX_OFFSET   The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer.   GL_INDEX_SHIFT   The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer.   GL_INDEX_WRITEMASK   The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask.   GL_LIGHTi   The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel.   GL_LIGHTING   The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel.   GL_LIGHT_MODEL_AMBIENT   The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel.   GL_LIGHT_MODEL_LOCAL_VIEWER   The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel.   GL_LIGHT_MODEL_TWO_SIDE   The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel.   GL_LINE_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth.   GL_LINE_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint.   GL_LINE_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple.   GL_LINE_STIPPLE_PATTERN   The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple.   GL_LINE_STIPPLE_REPEAT   The params parameter returns one value: the line stipple repeat factor. See glLineStipple.   GL_LINE_WIDTH   The params parameter returns one value: the line width as specified with glLineWidth.   GL_LINE_WIDTH_GRANULARITY   The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth.   GL_LINE_WIDTH_RANGE   The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth.   GL_LIST_BASE   The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase.   GL_LIST_INDEX   The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList.   GL_LIST_MODE   The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList.   GL_LOGIC_OP   The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp.   GL_LOGIC_OP_MODE   The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp.   GL_MAP1_COLOR_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1.   GL_MAP1_GRID_DOMAIN   The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid.   GL_MAP1_GRID_SEGMENTS   The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid.   GL_MAP1_INDEX   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1.   GL_MAP1_NORMAL   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1.   GL_MAP1_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1.   GL_MAP1_VERTEX_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1.   GL_MAP1_VERTEX_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1.   GL_MAP2_COLOR_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2.   GL_MAP2_GRID_DOMAIN   The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_GRID_SEGMENTS   The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_INDEX   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2.   GL_MAP2_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2.   GL_MAP2_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2.   GL_MAP2_VERTEX_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2.   GL_MAP2_VERTEX_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2.   GL_MAP_COLOR   The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MAP_STENCIL   The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MATRIX_MODE   The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode.   GL_MAX_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib.   GL_MAX_ATTRIB_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib.   GL_MAX_CLIP_PLANES   The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane.   GL_MAX_EVAL_ORDER   The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2.   GL_MAX_LIGHTS   The params parameter returns one value: the maximum number of lights. See glLight.   GL_MAX_LIST_NESTING   The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList.   GL_MAX_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix.   GL_MAX_NAME_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName.   GL_MAX_PIXEL_MAP_TABLE   The params parameter returns one value: the maximum supported size of a glPixelMap lookup table.   GL_MAX_PROJECTION_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix.   GL_MAX_TEXTURE_SIZE   The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D.   GL_MAX_TEXTURE_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix.   GL_MAX_VIEWPORT_DIMS   The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport.   GL_MODELVIEW_MATRIX   The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix.   GL_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix.   GL_NAME_STACK_DEPTH   The params parameter returns one value: the number of names on the selection name stack. See glPushName.   GL_NORMAL_ARRAY   The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer.   GL_NORMAL_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer.   GL_NORMAL_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer.   GL_NORMALIZE   The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal.   GL_PACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore.   GL_PACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore.   GL_PACK_ROW_LENGTH   The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore.   GL_PACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore.   GL_PERSPECTIVE_CORRECTION_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint.   GL_PIXEL_MAP_A_TO_A_SIZE   The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_B_TO_B_SIZE   The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_G_TO_G_SIZE   The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_A_SIZE   The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_B_SIZE   The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_G_SIZE   The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_I_SIZE   The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_R_SIZE   The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_R_TO_R_SIZE   The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_S_TO_S_SIZE   The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap.   GL_POINT_SIZE   The params parameter returns one value: the point size as specified by glPointSize.   GL_POINT_SIZE_GRANULARITY   The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize.   GL_POINT_SIZE_RANGE   The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize.   GL_POINT_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize.   GL_POINT_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint.   GL_POLYGON_MODE   The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode.   GL_POLYGON_OFFSET_FACTOR   The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_UNITS   The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_FILL   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset.   GL_POLYGON_OFFSET_LINE   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset.   GL_POLYGON_OFFSET_POINT   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset.   GL_POLYGON_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode.   GL_POLYGON_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint.   GL_POLYGON_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple.   GL_PROJECTION_MATRIX   The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix.   GL_PROJECTION_STACK_DEPTH   The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix.   GL_READ_BUFFER   The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum.   GL_RED_BIAS   The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer.   GL_RED_BITS   The params parameter returns one value: the number of red bitplanes in each color buffer.   GL_RED_SCALE   The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer.   GL_RENDER_MODE   The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode.   GL_RGBA_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor.   GL_SCISSOR_BOX   The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor.   GL_SCISSOR_TEST   The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor.   GL_SHADE_MODEL   The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel.   GL_STENCIL_BITS   The params parameter returns one value: the number of bitplanes in the stencil buffer.   GL_STENCIL_CLEAR_VALUE   The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil.   GL_STENCIL_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp.   GL_STENCIL_FUNC   The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc.   GL_STENCIL_PASS_DEPTH_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp.   GL_STENCIL_PASS_DEPTH_PASS   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp.   GL_STENCIL_REF   The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc.   GL_STENCIL_TEST   The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp.   GL_STENCIL_VALUE_MASK   The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc.   GL_STENCIL_WRITEMASK   The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask.   GL_STEREO   The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported.   GL_SUBPIXEL_BITS   The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates.   GL_TEXTURE_1D   The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D.   GL_TEXTURE_2D   The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D.   GL_TEXTURE_COORD_ARRAY   The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_TYPE   The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_ENV_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv.   GL_TEXTURE_ENV_MODE   The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv.   GL_TEXTURE_GEN_Q   The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_R   The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_S   The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_T   The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen.   GL_TEXTURE_MATRIX   The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix.   GL_TEXTURE_STACK_DEPTH   The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix.   GL_UNPACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore.   GL_UNPACK_ROW_LENGTH   The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore.   GL_VERTEX_ARRAY   The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer.   GL_VERTEX_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer.   GL_VIEWPORT   The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport.   GL_ZOOM_X   The params parameter returns one value: the x pixel zoom factor. See glPixelZoom.   GL_ZOOM_Y   The params parameter returns one value: the y pixel zoom factor. See glPixelZoom."
      },
      {
        "in_out": "",
        "type": "GLboolean*",
        "name": "params",
        "description": "Returns the value or values of the specified parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetClipPlane function returns the coefficients of the specified clipping plane.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glGetClipPlane function returns in equation the four coefficients of the plane equation for plane. It is always the case that GL_CLIP_PLANEi = GL_CLIP_PLANE0 + i. If an error is generated, no change is made to the contents of equation. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetClipPlane",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "plane",
        "description": "A clipping plane. ..."
      },
      {
        "in_out": "",
        "type": "GLdouble*",
        "name": "equation",
        "description": "Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glGetColorTableEXT function gets the color table data of the current targeted texture palette.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glGetColorTableEXT function gets the actual color table data specified by glColorTableEXT and glColorSubTableEXT. The glGetColorTableEXT function is an extension function that is not part of the standard OpenGL library but is part of the GL_EXT_paletted_texture extension. To check whether your implementation of OpenGL supports glGetColorTableEXT, call glGetString(GL_EXTENSIONS). If it returns GL_EXT_paletted_texture, glGetColorTableEXT is supported. To obtain the function address of an extension function, call wglGetProcAddress. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetColorTableEXT",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture that is to have its palette changed. Must be TEXTURE_1D or TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. ..."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type for data. The following are the accepted symbolic constants and their meanings.   ValueMeaning  GL_UNSIGNED_BYTE   Unsigned 8-bit integer   GL_BYTE   Signed 8-bit integer   GL_UNSIGNED_SHORT   Unsigned 16-bit integer   GL_SHORT   Signed 16-bit integer   GL_UNSIGNED_INT   Unsigned 32-bit integer   GL_INT   32-bit integer   GL_FLOAT   Single-precision floating-point value"
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "data",
        "description": "Points to the location where returned color table information is to be stored. Each color table entry is stored as if it was a single pixel of a 1-D texture. Because all textures have a default palette, glGetColorTableEXT always returns palette information even if the texture data is not in a paletted format."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glGetColorTableParameterfvEXT and glGetColorTableParameterivEXT functions get palette parameters from color tables.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "You use the glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT functions to retrieve specific parameter data from color tables set with glColorTableEXT for targeted texture palettes. Also you can use these functions to determine the number of color table entries that glGetColorTableEXT returns. When the target parameter is GL_PROXY_TEXTURE_1D or GL_PROXY_TEXTURE_2D, and the implementation does not support the values specified for either format or width, glColorTableEXT can fail to create the requested color table. In this case, the color table is empty and all parameters retrieved will be zero. You can determine whether OpenGL supports a particular color table format and size by calling glColorTableEXT with a proxy target, and then calling glGetColorTableParameterivEXT or glGetColorTableParameterfvEXT to determine whether the width parameter matches that set by glColorTableEXT. If the retrieved width is zero, the color table request by glColorTable failed. If the retrieved width is not zero, you can call glColorTable with the real target with TEXTURE_1D or TEXTURE_2D to set the color table. The glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT functions are extension functions that are not part of the standard OpenGL library but are part of the GL_EXT_paletted_texture extension. To check whether your implementation of OpenGL supports glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT, call glGetString(GL_EXTENSIONS). If it returns GL_EXT_paletted_texture, glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT are supported. To obtain the function address of an extension function, call wglGetProcAddress. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetColorTableParameterfvEXT",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture of the palette for which you want parameter data. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "A symbolic constant for the type of palette parameter data pointed to by params. The following are the accepted symbolic constants and their meanings.   ValueMeaning  GL_COLOR_TABLE_FORMAT_EXT   Return the internal format specified by the most recent call to glColorTableEXT or the default value.   GL_COLOR_TABLE_WIDTH_EXT   Return the width of the current palette.   GL_COLOR_TABLE_RED_SIZE_EXT   Return the actual size used internally to store the red component of the palette data.   GL_COLOR_TABLE_GREEN_SIZE_EXT   Return the actual size used internally to store the green component of the palette data.   GL_COLOR_TABLE_BLUE_SIZE_EXT   Return the actual size used internally to store the blue component of the palette data.   GL_COLOR_TABLE_ALPHA_SIZE_EXT   Return the actual size used internally to store the alpha component of the palette data."
      },
      {
        "in_out": "",
        "type": "GLfloat*",
        "name": "params",
        "description": "Points to the color table parameter data specified by the pname parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glGetColorTableParameterfvEXT and glGetColorTableParameterivEXT functions get palette parameters from color tables.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "You use the glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT functions to retrieve specific parameter data from color tables set with glColorTableEXT for targeted texture palettes. Also you can use these functions to determine the number of color table entries that glGetColorTableEXT returns. When the target parameter is GL_PROXY_TEXTURE_1D or GL_PROXY_TEXTURE_2D, and the implementation does not support the values specified for either format or width, glColorTableEXT can fail to create the requested color table. In this case, the color table is empty and all parameters retrieved will be zero. You can determine whether OpenGL supports a particular color table format and size by calling glColorTableEXT with a proxy target, and then calling glGetColorTableParameterivEXT or glGetColorTableParameterfvEXT to determine whether the width parameter matches that set by glColorTableEXT. If the retrieved width is zero, the color table request by glColorTable failed. If the retrieved width is not zero, you can call glColorTable with the real target with TEXTURE_1D or TEXTURE_2D to set the color table. The glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT functions are extension functions that are not part of the standard OpenGL library but are part of the GL_EXT_paletted_texture extension. To check whether your implementation of OpenGL supports glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT, call glGetString(GL_EXTENSIONS). If it returns GL_EXT_paletted_texture, glGetColorTableParameterivEXT and glGetColorTableParameterfvEXT are supported. To obtain the function address of an extension function, call wglGetProcAddress. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetColorTableParameterivEXT",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture of the palette for which you want parameter data. Must be TEXTURE_1D, TEXTURE_2D, PROXY_TEXTURE_1D, or PROXY_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "A symbolic constant for the type of palette parameter data pointed to by params. The following are the accepted symbolic constants and their meanings.   ValueMeaning  GL_COLOR_TABLE_FORMAT_EXT   Return the internal format specified by the most recent call to glColorTableEXT or the default value.   GL_COLOR_TABLE_WIDTH_EXT   Return the width of the current palette.   GL_COLOR_TABLE_RED_SIZE_EXT   Return the actual size used internally to store the red component of the palette data.   GL_COLOR_TABLE_GREEN_SIZE_EXT   Return the actual size used internally to store the green component of the palette data.   GL_COLOR_TABLE_BLUE_SIZE_EXT   Return the actual size used internally to store the blue component of the palette data.   GL_COLOR_TABLE_ALPHA_SIZE_EXT   Return the actual size used internally to store the alpha component of the palette data."
      },
      {
        "in_out": "",
        "type": "GLint*",
        "name": "params",
        "description": "Points to the color table parameter data specified by the pname parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetDoublev function returns the value or values of a selected parameter.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "This function returns values for simple state variables in OpenGL. The pname parameter is a symbolic constant indicating the state variable to be returned, and params is a pointer to an array of the indicated type in which to place the returned data. Type conversion is performed if params has a different type from the state variable value being requested. If you call glGetBooleanv, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE. If you call glGetIntegerv, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and 1.0 to the most negative representable integer value. If you call glGetFloatv or glGetDoublev, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values. You can query many of the Boolean parameters more easily with glIsEnabled. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetDoublev",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "The parameter value to be returned. The following symbolic constants are accepted.  ValueMeaning  GL_ACCUM_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer.   GL_ACCUM_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in the accumulation buffer.   GL_ACCUM_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum.   GL_ACCUM_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in the accumulation buffer.   GL_ACCUM_RED_BITS   The params parameter returns one value: the number of red bitplanes in the accumulation buffer.   GL_ALPHA_BIAS   The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in each color buffer.   GL_ALPHA_SCALE   The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_TEST   The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc.   GL_ALPHA_TEST_FUNC   The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc.   GL_ALPHA_TEST_REF   The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value.   GL_ATTRIB_STACK_DEPTH   The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib.   GL_AUTO_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2.   GL_AUX_BUFFERS   The params parameter returns one value: the number of auxiliary color buffers.   GL_BLEND   The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc.   GL_BLEND_DST   The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc.   GL_BLEND_SRC   The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc.   GL_BLUE_BIAS   The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer.   GL_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in each color buffer.   GL_BLUE_SCALE   The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer.   GL_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib.   GL_CLIP_PLANEi   The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane.   GL_COLOR_ARRAY   The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer.   GL_COLOR_ARRAY_SIZE   The params parameter returns one value, the number of components per color in the color array. See glColorPointer.   GL_COLOR_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer.   GL_COLOR_ARRAY_TYPE   The params parameter returns one value, the data type of each component in the color array. See glColorPointer.   GL_COLOR_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor.   GL_COLOR_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_COLOR_MATERIAL   The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_FACE   The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_PARAMETER   The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_WRITEMASK   The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask.   GL_CULL_FACE   The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace.   GL_CULL_FACE_MODE   The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace.   GL_CURRENT_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor.   GL_CURRENT_INDEX   The params parameter returns one value: the current color index. See glIndex.   GL_CURRENT_NORMAL   The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal.   GL_CURRENT_RASTER_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos.   GL_CURRENT_RASTER_DISTANCE   The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos.   GL_CURRENT_RASTER_INDEX   The params parameter returns one value: the color index of the current raster position. See glRasterPos.   GL_CURRENT_RASTER_POSITION   The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos.   GL_CURRENT_RASTER_POSITION_VALID   The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos.   GL_CURRENT_RASTER_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord.   GL_CURRENT_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord.   GL_DEPTH_BIAS   The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_BITS   The params parameter returns one value: the number of bitplanes in the depth buffer.   GL_DEPTH_CLEAR_VALUE   The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth.   GL_DEPTH_FUNC   The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc.   GL_DEPTH_RANGE   The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange.   GL_DEPTH_SCALE   The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_TEST   The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange.   GL_DEPTH_WRITEMASK   The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask.   GL_DITHER   The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled.   GL_DOUBLEBUFFER   The params parameter returns a single Boolean value indicating whether double buffering is supported.   GL_DRAW_BUFFER   The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer.   GL_EDGE_FLAG   The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag.   GL_EDGE_FLAG_ARRAY   The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer.   GL_EDGE_FLAG_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer.   GL_FOG   The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog.   GL_FOG_COLOR   The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog.   GL_FOG_DENSITY   The params parameter returns one value: the fog density parameter. See glFog.   GL_FOG_END   The params parameter returns one value: the end factor for the linear fog equation. See glFog.   GL_FOG_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint.   GL_FOG_INDEX   The params parameter returns one value: the fog color index. See glFog.   GL_FOG_MODE   The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog.   GL_FOG_START   The params parameter returns one value: the start factor for the linear fog equation. See glFog.   GL_FRONT_FACE   The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace.   GL_GREEN_BIAS   The params parameter returns one value: the green bias factor used during pixel transfers.   GL_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in each color buffer.   GL_GREEN_SCALE   The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer.   GL_INDEX_ARRAY   The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer.   GL_INDEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer.   GL_INDEX_ARRAY_TYPE   The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer.   GL_INDEX_BITS   The params parameter returns one value: the number of bitplanes in each color-index buffer.   GL_INDEX_CLEAR_VALUE   The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex.   GL_INDEX_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_INDEX_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE).   GL_INDEX_OFFSET   The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer.   GL_INDEX_SHIFT   The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer.   GL_INDEX_WRITEMASK   The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask.   GL_LIGHTi   The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel.   GL_LIGHTING   The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel.   GL_LIGHT_MODEL_AMBIENT   The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel.   GL_LIGHT_MODEL_LOCAL_VIEWER   The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel.   GL_LIGHT_MODEL_TWO_SIDE   The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel.   GL_LINE_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth.   GL_LINE_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint.   GL_LINE_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple.   GL_LINE_STIPPLE_PATTERN   The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple.   GL_LINE_STIPPLE_REPEAT   The params parameter returns one value: the line stipple repeat factor. See glLineStipple.   GL_LINE_WIDTH   The params parameter returns one value: the line width as specified with glLineWidth.   GL_LINE_WIDTH_GRANULARITY   The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth.   GL_LINE_WIDTH_RANGE   The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth.   GL_LIST_BASE   The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase.   GL_LIST_INDEX   The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList.   GL_LIST_MODE   The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList.   GL_LOGIC_OP   The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp.   GL_LOGIC_OP_MODE   The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp.   GL_MAP1_COLOR_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1.   GL_MAP1_GRID_DOMAIN   The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid.   GL_MAP1_GRID_SEGMENTS   The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid.   GL_MAP1_INDEX   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1.   GL_MAP1_NORMAL   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1.   GL_MAP1_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1.   GL_MAP1_VERTEX_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1.   GL_MAP1_VERTEX_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1.   GL_MAP2_COLOR_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2.   GL_MAP2_GRID_DOMAIN   The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_GRID_SEGMENTS   The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_INDEX   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2.   GL_MAP2_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2.   GL_MAP2_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2.   GL_MAP2_VERTEX_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2.   GL_MAP2_VERTEX_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2.   GL_MAP_COLOR   The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MAP_STENCIL   The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MATRIX_MODE   The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode.   GL_MAX_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib.   GL_MAX_ATTRIB_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib.   GL_MAX_CLIP_PLANES   The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane.   GL_MAX_EVAL_ORDER   The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2.   GL_MAX_LIGHTS   The params parameter returns one value: the maximum number of lights. See glLight.   GL_MAX_LIST_NESTING   The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList.   GL_MAX_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix.   GL_MAX_NAME_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName.   GL_MAX_PIXEL_MAP_TABLE   The params parameter returns one value: the maximum supported size of a glPixelMap lookup table.   GL_MAX_PROJECTION_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix.   GL_MAX_TEXTURE_SIZE   The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D.   GL_MAX_TEXTURE_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix.   GL_MAX_VIEWPORT_DIMS   The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport.   GL_MODELVIEW_MATRIX   The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix.   GL_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix.   GL_NAME_STACK_DEPTH   The params parameter returns one value: the number of names on the selection name stack. See glPushName.   GL_NORMAL_ARRAY   The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer.   GL_NORMAL_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer.   GL_NORMAL_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer.   GL_NORMALIZE   The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal.   GL_PACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore.   GL_PACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore.   GL_PACK_ROW_LENGTH   The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore.   GL_PACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore.   GL_PERSPECTIVE_CORRECTION_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint.   GL_PIXEL_MAP_A_TO_A_SIZE   The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_B_TO_B_SIZE   The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_G_TO_G_SIZE   The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_A_SIZE   The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_B_SIZE   The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_G_SIZE   The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_I_SIZE   The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_R_SIZE   The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_R_TO_R_SIZE   The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_S_TO_S_SIZE   The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap.   GL_POINT_SIZE   The params parameter returns one value: the point size as specified by glPointSize.   GL_POINT_SIZE_GRANULARITY   The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize.   GL_POINT_SIZE_RANGE   The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize.   GL_POINT_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize.   GL_POINT_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint.   GL_POLYGON_MODE   The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode.   GL_POLYGON_OFFSET_FACTOR   The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_UNITS   The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_FILL   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset.   GL_POLYGON_OFFSET_LINE   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset.   GL_POLYGON_OFFSET_POINT   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset.   GL_POLYGON_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode.   GL_POLYGON_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint.   GL_POLYGON_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple.   GL_PROJECTION_MATRIX   The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix.   GL_PROJECTION_STACK_DEPTH   The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix.   GL_READ_BUFFER   The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum.   GL_RED_BIAS   The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer.   GL_RED_BITS   The params parameter returns one value: the number of red bitplanes in each color buffer.   GL_RED_SCALE   The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer.   GL_RENDER_MODE   The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode.   GL_RGBA_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor.   GL_SCISSOR_BOX   The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor.   GL_SCISSOR_TEST   The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor.   GL_SHADE_MODEL   The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel.   GL_STENCIL_BITS   The params parameter returns one value: the number of bitplanes in the stencil buffer.   GL_STENCIL_CLEAR_VALUE   The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil.   GL_STENCIL_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp.   GL_STENCIL_FUNC   The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc.   GL_STENCIL_PASS_DEPTH_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp.   GL_STENCIL_PASS_DEPTH_PASS   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp.   GL_STENCIL_REF   The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc.   GL_STENCIL_TEST   The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp.   GL_STENCIL_VALUE_MASK   The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc.   GL_STENCIL_WRITEMASK   The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask.   GL_STEREO   The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported.   GL_SUBPIXEL_BITS   The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates.   GL_TEXTURE_1D   The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D.   GL_TEXTURE_2D   The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D.   GL_TEXTURE_COORD_ARRAY   The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_TYPE   The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_ENV_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv.   GL_TEXTURE_ENV_MODE   The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv.   GL_TEXTURE_GEN_Q   The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_R   The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_S   The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_T   The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen.   GL_TEXTURE_MATRIX   The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix.   GL_TEXTURE_STACK_DEPTH   The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix.   GL_UNPACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore.   GL_UNPACK_ROW_LENGTH   The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore.   GL_VERTEX_ARRAY   The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer.   GL_VERTEX_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer.   GL_VIEWPORT   The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport.   GL_ZOOM_X   The params parameter returns one value: the x pixel zoom factor. See glPixelZoom.   GL_ZOOM_Y   The params parameter returns one value: the y pixel zoom factor. See glPixelZoom."
      },
      {
        "in_out": "",
        "type": "GLdouble*",
        "name": "params",
        "description": "Returns the value or values of the specified parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glGetError function returns error information.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "The glGetError function returns one of the following error codes.  Note that glGetError returns GL_INVALID_OPERATION if it is called between a call to glBegin and its corresponding call to glEnd. ",
    "remarks": "Each detectable error is assigned a numeric code and symbolic name. When an error occurs, the error flag is set to the appropriate error code value. No other errors are recorded until glGetError is called, the error code is returned, and the flag is reset to GL_NO_ERROR. If a call to glGetError returns GL_NO_ERROR, there has been no detectable error since the last call to glGetError, or since OpenGL was initialized. To allow for distributed implementations, there may be several error flags. If any single error flag has recorded an error, the value of that flag is returned and that flag is reset to GL_NO_ERROR when glGetError is called. If more than one flag has recorded an error, glGetError returns and clears an arbitrary error flag value. If all error flags are to be reset, you should always call glGetError in a loop until it returns GL_NO_ERROR. Initially, all error flags are set to GL_NO_ERROR. When an error flag is set, results of an OpenGL operation are undefined only if GL_OUT_OF_MEMORY has occurred. In all other cases, the function generating the error is ignored and has no effect on the OpenGL state or framebuffer contents. ",
    "return_type": "GLenum",
    "category": "OpenGL",
    "name": "glGetError",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetFloatv function returns the value or values of a selected parameter.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "This function returns values for simple state variables in OpenGL. The pname parameter is a symbolic constant indicating the state variable to be returned, and params is a pointer to an array of the indicated type in which to place the returned data. Type conversion is performed if params has a different type from the state variable value being requested. If you call glGetBooleanv, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE. If you call glGetIntegerv, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and 1.0 to the most negative representable integer value. If you call glGetFloatv or glGetDoublev, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values. You can query many of the Boolean parameters more easily with glIsEnabled. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetFloatv",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "The parameter value to be returned. The following symbolic constants are accepted.  ValueMeaning  GL_ACCUM_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer.   GL_ACCUM_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in the accumulation buffer.   GL_ACCUM_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum.   GL_ACCUM_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in the accumulation buffer.   GL_ACCUM_RED_BITS   The params parameter returns one value: the number of red bitplanes in the accumulation buffer.   GL_ALPHA_BIAS   The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in each color buffer.   GL_ALPHA_SCALE   The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_TEST   The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc.   GL_ALPHA_TEST_FUNC   The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc.   GL_ALPHA_TEST_REF   The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value.   GL_ATTRIB_STACK_DEPTH   The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib.   GL_AUTO_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2.   GL_AUX_BUFFERS   The params parameter returns one value: the number of auxiliary color buffers.   GL_BLEND   The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc.   GL_BLEND_DST   The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc.   GL_BLEND_SRC   The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc.   GL_BLUE_BIAS   The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer.   GL_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in each color buffer.   GL_BLUE_SCALE   The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer.   GL_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib.   GL_CLIP_PLANEi   The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane.   GL_COLOR_ARRAY   The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer.   GL_COLOR_ARRAY_SIZE   The params parameter returns one value, the number of components per color in the color array. See glColorPointer.   GL_COLOR_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer.   GL_COLOR_ARRAY_TYPE   The params parameter returns one value, the data type of each component in the color array. See glColorPointer.   GL_COLOR_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor.   GL_COLOR_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_COLOR_MATERIAL   The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_FACE   The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_PARAMETER   The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_WRITEMASK   The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask.   GL_CULL_FACE   The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace.   GL_CULL_FACE_MODE   The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace.   GL_CURRENT_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor.   GL_CURRENT_INDEX   The params parameter returns one value: the current color index. See glIndex.   GL_CURRENT_NORMAL   The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal.   GL_CURRENT_RASTER_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos.   GL_CURRENT_RASTER_DISTANCE   The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos.   GL_CURRENT_RASTER_INDEX   The params parameter returns one value: the color index of the current raster position. See glRasterPos.   GL_CURRENT_RASTER_POSITION   The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos.   GL_CURRENT_RASTER_POSITION_VALID   The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos.   GL_CURRENT_RASTER_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord.   GL_CURRENT_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord.   GL_DEPTH_BIAS   The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_BITS   The params parameter returns one value: the number of bitplanes in the depth buffer.   GL_DEPTH_CLEAR_VALUE   The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth.   GL_DEPTH_FUNC   The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc.   GL_DEPTH_RANGE   The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange.   GL_DEPTH_SCALE   The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_TEST   The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange.   GL_DEPTH_WRITEMASK   The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask.   GL_DITHER   The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled.   GL_DOUBLEBUFFER   The params parameter returns a single Boolean value indicating whether double buffering is supported.   GL_DRAW_BUFFER   The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer.   GL_EDGE_FLAG   The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag.   GL_EDGE_FLAG_ARRAY   The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer.   GL_EDGE_FLAG_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer.   GL_FOG   The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog.   GL_FOG_COLOR   The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog.   GL_FOG_DENSITY   The params parameter returns one value: the fog density parameter. See glFog.   GL_FOG_END   The params parameter returns one value: the end factor for the linear fog equation. See glFog.   GL_FOG_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint.   GL_FOG_INDEX   The params parameter returns one value: the fog color index. See glFog.   GL_FOG_MODE   The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog.   GL_FOG_START   The params parameter returns one value: the start factor for the linear fog equation. See glFog.   GL_FRONT_FACE   The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace.   GL_GREEN_BIAS   The params parameter returns one value: the green bias factor used during pixel transfers.   GL_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in each color buffer.   GL_GREEN_SCALE   The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer.   GL_INDEX_ARRAY   The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer.   GL_INDEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer.   GL_INDEX_ARRAY_TYPE   The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer.   GL_INDEX_BITS   The params parameter returns one value: the number of bitplanes in each color-index buffer.   GL_INDEX_CLEAR_VALUE   The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex.   GL_INDEX_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_INDEX_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE).   GL_INDEX_OFFSET   The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer.   GL_INDEX_SHIFT   The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer.   GL_INDEX_WRITEMASK   The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask.   GL_LIGHTi   The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel.   GL_LIGHTING   The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel.   GL_LIGHT_MODEL_AMBIENT   The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel.   GL_LIGHT_MODEL_LOCAL_VIEWER   The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel.   GL_LIGHT_MODEL_TWO_SIDE   The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel.   GL_LINE_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth.   GL_LINE_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint.   GL_LINE_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple.   GL_LINE_STIPPLE_PATTERN   The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple.   GL_LINE_STIPPLE_REPEAT   The params parameter returns one value: the line stipple repeat factor. See glLineStipple.   GL_LINE_WIDTH   The params parameter returns one value: the line width as specified with glLineWidth.   GL_LINE_WIDTH_GRANULARITY   The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth.   GL_LINE_WIDTH_RANGE   The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth.   GL_LIST_BASE   The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase.   GL_LIST_INDEX   The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList.   GL_LIST_MODE   The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList.   GL_LOGIC_OP   The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp.   GL_LOGIC_OP_MODE   The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp.   GL_MAP1_COLOR_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1.   GL_MAP1_GRID_DOMAIN   The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid.   GL_MAP1_GRID_SEGMENTS   The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid.   GL_MAP1_INDEX   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1.   GL_MAP1_NORMAL   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1.   GL_MAP1_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1.   GL_MAP1_VERTEX_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1.   GL_MAP1_VERTEX_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1.   GL_MAP2_COLOR_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2.   GL_MAP2_GRID_DOMAIN   The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_GRID_SEGMENTS   The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_INDEX   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2.   GL_MAP2_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2.   GL_MAP2_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2.   GL_MAP2_VERTEX_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2.   GL_MAP2_VERTEX_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2.   GL_MAP_COLOR   The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MAP_STENCIL   The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MATRIX_MODE   The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode.   GL_MAX_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib.   GL_MAX_ATTRIB_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib.   GL_MAX_CLIP_PLANES   The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane.   GL_MAX_EVAL_ORDER   The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2.   GL_MAX_LIGHTS   The params parameter returns one value: the maximum number of lights. See glLight.   GL_MAX_LIST_NESTING   The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList.   GL_MAX_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix.   GL_MAX_NAME_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName.   GL_MAX_PIXEL_MAP_TABLE   The params parameter returns one value: the maximum supported size of a glPixelMap lookup table.   GL_MAX_PROJECTION_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix.   GL_MAX_TEXTURE_SIZE   The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D.   GL_MAX_TEXTURE_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix.   GL_MAX_VIEWPORT_DIMS   The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport.   GL_MODELVIEW_MATRIX   The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix.   GL_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix.   GL_NAME_STACK_DEPTH   The params parameter returns one value: the number of names on the selection name stack. See glPushName.   GL_NORMAL_ARRAY   The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer.   GL_NORMAL_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer.   GL_NORMAL_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer.   GL_NORMALIZE   The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal.   GL_PACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore.   GL_PACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore.   GL_PACK_ROW_LENGTH   The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore.   GL_PACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore.   GL_PERSPECTIVE_CORRECTION_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint.   GL_PIXEL_MAP_A_TO_A_SIZE   The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_B_TO_B_SIZE   The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_G_TO_G_SIZE   The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_A_SIZE   The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_B_SIZE   The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_G_SIZE   The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_I_SIZE   The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_R_SIZE   The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_R_TO_R_SIZE   The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_S_TO_S_SIZE   The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap.   GL_POINT_SIZE   The params parameter returns one value: the point size as specified by glPointSize.   GL_POINT_SIZE_GRANULARITY   The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize.   GL_POINT_SIZE_RANGE   The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize.   GL_POINT_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize.   GL_POINT_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint.   GL_POLYGON_MODE   The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode.   GL_POLYGON_OFFSET_FACTOR   The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_UNITS   The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_FILL   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset.   GL_POLYGON_OFFSET_LINE   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset.   GL_POLYGON_OFFSET_POINT   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset.   GL_POLYGON_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode.   GL_POLYGON_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint.   GL_POLYGON_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple.   GL_PROJECTION_MATRIX   The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix.   GL_PROJECTION_STACK_DEPTH   The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix.   GL_READ_BUFFER   The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum.   GL_RED_BIAS   The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer.   GL_RED_BITS   The params parameter returns one value: the number of red bitplanes in each color buffer.   GL_RED_SCALE   The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer.   GL_RENDER_MODE   The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode.   GL_RGBA_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor.   GL_SCISSOR_BOX   The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor.   GL_SCISSOR_TEST   The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor.   GL_SHADE_MODEL   The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel.   GL_STENCIL_BITS   The params parameter returns one value: the number of bitplanes in the stencil buffer.   GL_STENCIL_CLEAR_VALUE   The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil.   GL_STENCIL_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp.   GL_STENCIL_FUNC   The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc.   GL_STENCIL_PASS_DEPTH_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp.   GL_STENCIL_PASS_DEPTH_PASS   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp.   GL_STENCIL_REF   The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc.   GL_STENCIL_TEST   The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp.   GL_STENCIL_VALUE_MASK   The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc.   GL_STENCIL_WRITEMASK   The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask.   GL_STEREO   The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported.   GL_SUBPIXEL_BITS   The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates.   GL_TEXTURE_1D   The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D.   GL_TEXTURE_2D   The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D.   GL_TEXTURE_COORD_ARRAY   The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_TYPE   The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_ENV_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv.   GL_TEXTURE_ENV_MODE   The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv.   GL_TEXTURE_GEN_Q   The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_R   The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_S   The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_T   The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen.   GL_TEXTURE_MATRIX   The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix.   GL_TEXTURE_STACK_DEPTH   The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix.   GL_UNPACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore.   GL_UNPACK_ROW_LENGTH   The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore.   GL_VERTEX_ARRAY   The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer.   GL_VERTEX_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer.   GL_VIEWPORT   The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport.   GL_ZOOM_X   The params parameter returns one value: the x pixel zoom factor. See glPixelZoom.   GL_ZOOM_Y   The params parameter returns one value: the y pixel zoom factor. See glPixelZoom."
      },
      {
        "in_out": "",
        "type": "GLfloat*",
        "name": "params",
        "description": "Returns the value or values of the specified parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetIntegerv function returns the value or values of a selected parameter.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "This function returns values for simple state variables in OpenGL. The pname parameter is a symbolic constant indicating the state variable to be returned, and params is a pointer to an array of the indicated type in which to place the returned data. Type conversion is performed if params has a different type from the state variable value being requested. If you call glGetBooleanv, a floating-point or integer value is converted to GL_FALSE if and only if it is zero. Otherwise, it is converted to GL_TRUE. If you call glGetIntegerv, Boolean values are returned as GL_TRUE or GL_FALSE, and most floating-point values are rounded to the nearest integer value. Floating-point colors and normals, however, are returned with a linear mapping that maps 1.0 to the most positive representable integer value and 1.0 to the most negative representable integer value. If you call glGetFloatv or glGetDoublev, Boolean values are returned as GL_TRUE or GL_FALSE, and integer values are converted to floating-point values. You can query many of the Boolean parameters more easily with glIsEnabled. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetIntegerv",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "The parameter value to be returned. The following symbolic constants are accepted.  ValueMeaning  GL_ACCUM_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in the accumulation buffer.   GL_ACCUM_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in the accumulation buffer.   GL_ACCUM_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the accumulation buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearAccum.   GL_ACCUM_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in the accumulation buffer.   GL_ACCUM_RED_BITS   The params parameter returns one value: the number of red bitplanes in the accumulation buffer.   GL_ALPHA_BIAS   The params parameter returns one value: the alpha bias factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_BITS   The params parameter returns one value: the number of alpha bitplanes in each color buffer.   GL_ALPHA_SCALE   The params parameter returns one value: the alpha scale factor used during pixel transfers. See glPixelTransfer.   GL_ALPHA_TEST   The params parameter returns a single Boolean value indicating whether alpha testing of fragments is enabled. See glAlphaFunc.   GL_ALPHA_TEST_FUNC   The params parameter returns one value: the symbolic name of the alpha test function. See glAlphaFunc.   GL_ALPHA_TEST_REF   The params parameter returns one value: the reference value for the alpha test. See glAlphaFunc. An integer value, if requested, is linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value.   GL_ATTRIB_STACK_DEPTH   The params parameter returns one value: the depth of the attribute stack. If the stack is empty, zero is returned. See glPushAttrib.   GL_AUTO_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D map evaluation automatically generates surface normals. See glMap2.   GL_AUX_BUFFERS   The params parameter returns one value: the number of auxiliary color buffers.   GL_BLEND   The params parameter returns a single Boolean value indicating whether blending is enabled. See glBlendFunc.   GL_BLEND_DST   The params parameter returns one value: the symbolic constant identifying the destination blend function. See glBlendFunc.   GL_BLEND_SRC   The params parameter returns one value: the symbolic constant identifying the source blend function. See glBlendFunc.   GL_BLUE_BIAS   The params parameter returns one value: the blue bias factor used during pixel transfers. See glPixelTransfer.   GL_BLUE_BITS   The params parameter returns one value: the number of blue bitplanes in each color buffer.   GL_BLUE_SCALE   The params parameter returns one value: the blue scale factor used during pixel transfers. See glPixelTransfer.   GL_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the depth of the attribute stack. The initial value is zero. See glPushClientAttrib.   GL_CLIP_PLANEi   The params parameter returns a single Boolean value indicating whether the specified clipping plane is enabled. See glClipPlane.   GL_COLOR_ARRAY   The params parameter returns a single Boolean value indicating whether the specified color array is defined. See glColorPointer.   GL_COLOR_ARRAY_SIZE   The params parameter returns one value, the number of components per color in the color array. See glColorPointer.   GL_COLOR_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive colors in the color array. See glColorPointer.   GL_COLOR_ARRAY_TYPE   The params parameter returns one value, the data type of each component in the color array. See glColorPointer.   GL_COLOR_CLEAR_VALUE   The params parameter returns four values: the red, green, blue, and alpha values used to clear the color buffers. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearColor.   GL_COLOR_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's RGBA color values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_COLOR_MATERIAL   The params parameter returns a single Boolean value indicating whether one or more material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_FACE   The params parameter returns one value: a symbolic constant indicating which materials have a parameter that is tracking the current color. See glColorMaterial.   GL_COLOR_MATERIAL_PARAMETER   The params parameter returns one value: a symbolic constant indicating which material parameters are tracking the current color. See glColorMaterial.   GL_COLOR_WRITEMASK   The params parameter returns four Boolean values: the red, green, blue, and alpha write enables for the color buffers. See glColorMask.   GL_CULL_FACE   The params parameter returns a single Boolean value indicating whether polygon culling is enabled. See glCullFace.   GL_CULL_FACE_MODE   The params parameter returns one value: a symbolic constant indicating which polygon faces are to be culled. See glCullFace.   GL_CURRENT_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glColor.   GL_CURRENT_INDEX   The params parameter returns one value: the current color index. See glIndex.   GL_CURRENT_NORMAL   The params parameter returns three values: the x, y, and z values of the current normal. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glNormal.   GL_CURRENT_RASTER_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the current raster position. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glRasterPos.   GL_CURRENT_RASTER_DISTANCE   The params parameter returns one value: the distance from the eye to the current raster position. See glRasterPos.   GL_CURRENT_RASTER_INDEX   The params parameter returns one value: the color index of the current raster position. See glRasterPos.   GL_CURRENT_RASTER_POSITION   The params parameter returns four values: the x, y, z, and w components of the current raster position. The x, y, and z components are in window coordinates, and w is in clip coordinates. See glRasterPos.   GL_CURRENT_RASTER_POSITION_VALID   The params parameter returns a single Boolean value indicating whether the current raster position is valid. See glRasterPos.   GL_CURRENT_RASTER_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current raster texture coordinates. See glRasterPos and glTexCoord.   GL_CURRENT_TEXTURE_COORDS   The params parameter returns four values: the s, t, r, and q current texture coordinates. See glTexCoord.   GL_DEPTH_BIAS   The params parameter returns one value: the depth bias factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_BITS   The params parameter returns one value: the number of bitplanes in the depth buffer.   GL_DEPTH_CLEAR_VALUE   The params parameter returns one value: the value that is used to clear the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glClearDepth.   GL_DEPTH_FUNC   The params parameter returns one value: the symbolic constant that indicates the depth comparison function. See glDepthFunc.   GL_DEPTH_RANGE   The params parameter returns two values: the near and far mapping limits for the depth buffer. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glDepthRange.   GL_DEPTH_SCALE   The params parameter returns one value: the depth scale factor used during pixel transfers. See glPixelTransfer.   GL_DEPTH_TEST   The params parameter returns a single Boolean value indicating whether depth testing of fragments is enabled. See glDepthFunc and glDepthRange.   GL_DEPTH_WRITEMASK   The params parameter returns a single Boolean value indicating if the depth buffer is enabled for writing. See glDepthMask.   GL_DITHER   The params parameter returns a single Boolean value indicating whether dithering of fragment colors and indexes is enabled.   GL_DOUBLEBUFFER   The params parameter returns a single Boolean value indicating whether double buffering is supported.   GL_DRAW_BUFFER   The params parameter returns one value: a symbolic constant indicating which buffers are being drawn to. See glDrawBuffer.   GL_EDGE_FLAG   The params parameter returns a single Boolean value indicating whether the current edge flag is true or false. See glEdgeFlag.   GL_EDGE_FLAG_ARRAY   The params parameter returns a single Boolean value indicating whether the edge flag array is enabled. See glEdgeFlagPointer.   GL_EDGE_FLAG_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive edge flags in the edge flag array. See glEdgeFlagPointer.   GL_FOG   The params parameter returns a single Boolean value indicating whether fogging is enabled. See glFog.   GL_FOG_COLOR   The params parameter returns four values: the red, green, blue, and alpha components of the fog color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glFog.   GL_FOG_DENSITY   The params parameter returns one value: the fog density parameter. See glFog.   GL_FOG_END   The params parameter returns one value: the end factor for the linear fog equation. See glFog.   GL_FOG_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the fog hint. See glHint.   GL_FOG_INDEX   The params parameter returns one value: the fog color index. See glFog.   GL_FOG_MODE   The params parameter returns one value: a symbolic constant indicating which fog equation is selected. See glFog.   GL_FOG_START   The params parameter returns one value: the start factor for the linear fog equation. See glFog.   GL_FRONT_FACE   The params parameter returns one value: a symbolic constant indicating whether clockwise or counterclockwise polygon winding is treated as front-facing. See glFrontFace.   GL_GREEN_BIAS   The params parameter returns one value: the green bias factor used during pixel transfers.   GL_GREEN_BITS   The params parameter returns one value: the number of green bitplanes in each color buffer.   GL_GREEN_SCALE   The params parameter returns one value: the green scale factor used during pixel transfers. See glPixelTransfer.   GL_INDEX_ARRAY   The params parameter returns a single Boolean value indicating whether the color index array is enabled. See glIndexPointer.   GL_INDEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive color indexes in the color index array. See glIndexPointer.   GL_INDEX_ARRAY_TYPE   The params parameter returns one value, the data type of indexes in the color index array. The initial value is GL_FLOAT. See glIndexPointer.   GL_INDEX_BITS   The params parameter returns one value: the number of bitplanes in each color-index buffer.   GL_INDEX_CLEAR_VALUE   The params parameter returns one value: the color index used to clear the color-index buffers. See glClearIndex.   GL_INDEX_LOGIC_OP   The params parameter returns a single Boolean value indicating whether a fragment's index values are merged into the framebuffer using a logical operation. See glLogicOp.   GL_INDEX_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in color-index mode (TRUE) or RGBA mode (FALSE).   GL_INDEX_OFFSET   The params parameter returns one value: the offset added to color and stencil indexes during pixel transfers. See glPixelTransfer.   GL_INDEX_SHIFT   The params parameter returns one value: the amount that color and stencil indexes are shifted during pixel transfers. See glPixelTransfer.   GL_INDEX_WRITEMASK   The params parameter returns one value: a mask indicating which bitplanes of each color-index buffer can be written. See glIndexMask.   GL_LIGHTi   The params parameter returns a single Boolean value indicating whether the specified light is enabled. See glLight and glLightModel.   GL_LIGHTING   The params parameter returns a single Boolean value indicating whether lighting is enabled. See glLightModel.   GL_LIGHT_MODEL_AMBIENT   The params parameter returns four values: the red, green, blue, and alpha components of the ambient intensity of the entire scene. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and -1.0 returns the most negative representable integer value. See glLightModel.   GL_LIGHT_MODEL_LOCAL_VIEWER   The params parameter returns a single Boolean value indicating whether specular reflection calculations treat the viewer as being local to the scene. See glLightModel.   GL_LIGHT_MODEL_TWO_SIDE   The params parameter returns a single Boolean value indicating whether separate materials are used to compute lighting for front-facing and back-facing polygons. See glLightModel.   GL_LINE_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of lines is enabled. See glLineWidth.   GL_LINE_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the line antialiasing hint. See glHint.   GL_LINE_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of lines is enabled. See glLineStipple.   GL_LINE_STIPPLE_PATTERN   The params parameter returns one value: the 16-bit line stipple pattern. See glLineStipple.   GL_LINE_STIPPLE_REPEAT   The params parameter returns one value: the line stipple repeat factor. See glLineStipple.   GL_LINE_WIDTH   The params parameter returns one value: the line width as specified with glLineWidth.   GL_LINE_WIDTH_GRANULARITY   The params parameter returns one value: the width difference between adjacent supported widths for antialiased lines. See glLineWidth.   GL_LINE_WIDTH_RANGE   The params parameter returns two values: the smallest and largest supported widths for antialiased lines. See glLineWidth.   GL_LIST_BASE   The params parameter returns one value: the base offset added to all names in arrays presented to glCallLists. See glListBase.   GL_LIST_INDEX   The params parameter returns one value: the name of the display list currently under construction. Zero is returned if no display list is currently under construction. See glNewList.   GL_LIST_MODE   The params parameter returns one value: a symbolic constant indicating the construction mode of the display list currently being constructed. See glNewList.   GL_LOGIC_OP   The params parameter returns a single Boolean value indicating whether fragment indexes are merged into the framebuffer using a logical operation. See glLogicOp.   GL_LOGIC_OP_MODE   The params parameter returns one value: a symbolic constant indicating the selected logic operational mode. See glLogicOp.   GL_MAP1_COLOR_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates colors. See glMap1.   GL_MAP1_GRID_DOMAIN   The params parameter returns two values: the endpoints of the 1-D maps grid domain. See glMapGrid.   GL_MAP1_GRID_SEGMENTS   The params parameter returns one value: the number of partitions in the 1-D maps grid domain. See glMapGrid.   GL_MAP1_INDEX   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates color indexes. See glMap1.   GL_MAP1_NORMAL   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates normals. See glMap1.   GL_MAP1_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 1-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 2-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D texture coordinates. See glMap1.   GL_MAP1_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D texture coordinates. See glMap1.   GL_MAP1_VERTEX_3   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 3-D vertex coordinates. See glMap1.   GL_MAP1_VERTEX_4   The params parameter returns a single Boolean value indicating whether 1-D evaluation generates 4-D vertex coordinates. See glMap1.   GL_MAP2_COLOR_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates colors. See glMap2.   GL_MAP2_GRID_DOMAIN   The params parameter returns four values: the endpoints of the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_GRID_SEGMENTS   The params parameter returns two values: the number of partitions in the 2-D maps i and j grid domains. See glMapGrid.   GL_MAP2_INDEX   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates color indexes. See glMap2.   GL_MAP2_NORMAL   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates normals. See glMap2.   GL_MAP2_TEXTURE_COORD_1   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 1-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_2   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 2-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D texture coordinates. See glMap2.   GL_MAP2_TEXTURE_COORD_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D texture coordinates. See glMap2.   GL_MAP2_VERTEX_3   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 3-D vertex coordinates. See glMap2.   GL_MAP2_VERTEX_4   The params parameter returns a single Boolean value indicating whether 2-D evaluation generates 4-D vertex coordinates. See glMap2.   GL_MAP_COLOR   The params parameter returns a single Boolean value indicating whether colors and color indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MAP_STENCIL   The params parameter returns a single Boolean value indicating whether stencil indexes are to be replaced by table lookup during pixel transfers. See glPixelTransfer.   GL_MATRIX_MODE   The params parameter returns one value: a symbolic constant indicating which matrix stack is currently the target of all matrix operations. See glMatrixMode.   GL_MAX_CLIENT_ATTRIB_STACK_DEPTH   The params parameter returns one value indicating the maximum supported depth of the client attribute stack. See glPushClientAttrib.   GL_MAX_ATTRIB_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the attribute stack. See glPushAttrib.   GL_MAX_CLIP_PLANES   The params parameter returns one value: the maximum number of application-defined clipping planes. See glClipPlane.   GL_MAX_EVAL_ORDER   The params parameter returns one value: the maximum equation order supported by 1-D and 2-D evaluators. See glMap1 and glMap2.   GL_MAX_LIGHTS   The params parameter returns one value: the maximum number of lights. See glLight.   GL_MAX_LIST_NESTING   The params parameter returns one value: the maximum recursion depth allowed during display-list traversal. See glCallList.   GL_MAX_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the modelview matrix stack. See glPushMatrix.   GL_MAX_NAME_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the selection name stack. See glPushName.   GL_MAX_PIXEL_MAP_TABLE   The params parameter returns one value: the maximum supported size of a glPixelMap lookup table.   GL_MAX_PROJECTION_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the projection matrix stack. See glPushMatrix.   GL_MAX_TEXTURE_SIZE   The params parameter returns one value: the maximum width or height of any texture image (without borders). See glTexImage1D and glTexImage2D.   GL_MAX_TEXTURE_STACK_DEPTH   The params parameter returns one value: the maximum supported depth of the texture matrix stack. See glPushMatrix.   GL_MAX_VIEWPORT_DIMS   The params parameter returns two values: the maximum supported width and height of the viewport. See glViewport.   GL_MODELVIEW_MATRIX   The params parameter returns 16 values: the modelview matrix on the top of the modelview matrix stack. See glPushMatrix.   GL_MODELVIEW_STACK_DEPTH   The params parameter returns one value: the number of matrices on the modelview matrix stack. See glPushMatrix.   GL_NAME_STACK_DEPTH   The params parameter returns one value: the number of names on the selection name stack. See glPushName.   GL_NORMAL_ARRAY   The params parameter returns a single Boolean value, indicating whether the normal array is enabled. See glNormalPointer.   GL_NORMAL_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive normals in the normal array. See glNormalPointer.   GL_NORMAL_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the normal array. See glNormalPointer.   GL_NORMALIZE   The params parameter returns a single Boolean value indicating whether normals are automatically scaled to unit length after they have been transformed to eye coordinates. See glNormal.   GL_PACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for writing pixel data to memory. See glPixelStore.   GL_PACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being written to memory are written first to the least significant bit of each unsigned byte. See glPixelStore.   GL_PACK_ROW_LENGTH   The params parameter returns one value: the row length used for writing pixel data to memory. See glPixelStore.   GL_PACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is written into memory. See glPixelStore.   GL_PACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped before being written to memory. See glPixelStore.   GL_PERSPECTIVE_CORRECTION_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the perspective correction hint. See glHint.   GL_PIXEL_MAP_A_TO_A_SIZE   The params parameter returns one value: the size of the alpha-to-alpha pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_B_TO_B_SIZE   The params parameter returns one value: the size of the blue-to-blue pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_G_TO_G_SIZE   The params parameter returns one value: the size of the green-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_A_SIZE   The params parameter returns one value: the size of the index-to-alpha pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_B_SIZE   The params parameter returns one value: the size of the index-to-blue pixel translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_G_SIZE   The params parameter returns one value: the size of the index-to-green pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_I_SIZE   The params parameter returns one value: the size of the index-to-index pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_I_TO_R_SIZE   The params parameter returns one value: the size of the index-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_R_TO_R_SIZE   The params parameter returns one value: the size of the red-to-red pixel-translation table. See glPixelMap.   GL_PIXEL_MAP_S_TO_S_SIZE   The params parameter returns one value: the size of the stencil-to-stencil pixel translation table. See glPixelMap.   GL_POINT_SIZE   The params parameter returns one value: the point size as specified by glPointSize.   GL_POINT_SIZE_GRANULARITY   The params parameter returns one value: the size difference between adjacent supported sizes for antialiased points. See glPointSize.   GL_POINT_SIZE_RANGE   The params parameter returns two values: the smallest and largest supported sizes for antialiased points. See glPointSize.   GL_POINT_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of points is enabled. See glPointSize.   GL_POINT_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the point antialiasing hint. See glHint.   GL_POLYGON_MODE   The params parameter returns two values: symbolic constants indicating whether front-facing and back-facing polygons are rasterized as points, lines, or filled polygons. See glPolygonMode.   GL_POLYGON_OFFSET_FACTOR   The params parameter returns one value, the scaling factor used to determine the variable offset that is added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_UNITS   The params parameter returns one value. This value is multiplied by an implementation-specific value and then added to the depth value of each fragment generated when a polygon is rasterized. See glPolygonOffset.   GL_POLYGON_OFFSET_FILL   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in fill mode. See glPolygonOffset.   GL_POLYGON_OFFSET_LINE   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in line mode. See glPolygonOffset.   GL_POLYGON_OFFSET_POINT   The params parameter returns a single Boolean value indicating whether polygon offset is enabled for polygons in point mode. See glPolygonOffset.   GL_POLYGON_SMOOTH   The params parameter returns a single Boolean value indicating whether antialiasing of polygons is enabled. See glPolygonMode.   GL_POLYGON_SMOOTH_HINT   The params parameter returns one value: a symbolic constant indicating the mode of the polygon antialiasing hint. See glHint.   GL_POLYGON_STIPPLE   The params parameter returns a single Boolean value indicating whether stippling of polygons is enabled. See glPolygonStipple.   GL_PROJECTION_MATRIX   The params parameter returns 16 values: the projection matrix on the top of the projection matrix stack. See glPushMatrix.   GL_PROJECTION_STACK_DEPTH   The params parameter returns one value: the number of matrices on the projection matrix stack. See glPushMatrix.   GL_READ_BUFFER   The params parameter returns one value: a symbolic constant indicating which color buffer is selected for reading. See glReadPixels and glAccum.   GL_RED_BIAS   The params parameter returns one value: the red bias factor used during pixel transfers. See glPixelTransfer.   GL_RED_BITS   The params parameter returns one value: the number of red bitplanes in each color buffer.   GL_RED_SCALE   The params parameter returns one value: the red scale factor used during pixel transfers. See glPixelTransfer.   GL_RENDER_MODE   The params parameter returns one value: a symbolic constant indicating whether OpenGL is in render, select, or feedback mode. See glRenderMode.   GL_RGBA_MODE   The params parameter returns a single Boolean value indicating whether OpenGL is in RGBA mode (TRUE) or color-index mode (FALSE). See glColor.   GL_SCISSOR_BOX   The params parameter returns four values: the x and y window coordinates of the scissor box, followed by its width and height. See glScissor.   GL_SCISSOR_TEST   The params parameter returns a single Boolean value indicating whether scissoring is enabled. See glScissor.   GL_SHADE_MODEL   The params parameter returns one value: a symbolic constant indicating whether the shading mode is flat or smooth. See glShadeModel.   GL_STENCIL_BITS   The params parameter returns one value: the number of bitplanes in the stencil buffer.   GL_STENCIL_CLEAR_VALUE   The params parameter returns one value: the index to which the stencil bitplanes are cleared. See glClearStencil.   GL_STENCIL_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test fails. See glStencilOp.   GL_STENCIL_FUNC   The params parameter returns one value: a symbolic constant indicating what function is used to compare the stencil reference value with the stencil buffer value. See glStencilFunc.   GL_STENCIL_PASS_DEPTH_FAIL   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes, but the depth test fails. See glStencilOp.   GL_STENCIL_PASS_DEPTH_PASS   The params parameter returns one value: a symbolic constant indicating what action is taken when the stencil test passes and the depth test passes. See glStencilOp.   GL_STENCIL_REF   The params parameter returns one value: the reference value that is compared with the contents of the stencil buffer. See glStencilFunc.   GL_STENCIL_TEST   The params parameter returns a single Boolean value indicating whether stencil testing of fragments is enabled. See glStencilFunc and glStencilOp.   GL_STENCIL_VALUE_MASK   The params parameter returns one value: the mask that is used to mask both the stencil reference value and the stencil buffer value before they are compared. See glStencilFunc.   GL_STENCIL_WRITEMASK   The params parameter returns one value: the mask that controls writing of the stencil bitplanes. See glStencilMask.   GL_STEREO   The params parameter returns a single Boolean value indicating whether stereo buffers (left and right) are supported.   GL_SUBPIXEL_BITS   The params parameter returns one value: an estimate of the number of bits of subpixel resolution that are used to position rasterized geometry in window coordinates.   GL_TEXTURE_1D   The params parameter returns a single Boolean value indicating whether 1-D texture mapping is enabled. See glTexImage1D.   GL_TEXTURE_2D   The params parameter returns a single Boolean value indicating whether 2-D texture mapping is enabled. See glTexImage2D.   GL_TEXTURE_COORD_ARRAY   The params parameter returns a single Boolean value indicating whether the texture coordinate array is enabled. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per element in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive elements in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_COORD_ARRAY_TYPE   The params parameter params returns one value, the data type of the coordinates in the texture coordinate array. See glTexCoordPointer.   GL_TEXTURE_ENV_COLOR   The params parameter returns four values: the red, green, blue, and alpha values of the texture environment color. Integer values, if requested, are linearly mapped from the internal floating-point representation such that 1.0 returns the most positive representable integer value, and 1.0 returns the most negative representable integer value. See glTexEnv.   GL_TEXTURE_ENV_MODE   The params parameter returns one value: a symbolic constant indicating which texture environment function is currently selected. See glTexEnv.   GL_TEXTURE_GEN_Q   The params parameter returns a single Boolean value indicating whether automatic generation of the Q texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_R   The params parameter returns a single Boolean value indicating whether automatic generation of the R texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_S   The params parameter returns a single Boolean value indicating whether automatic generation of the S texture coordinate is enabled. See glTexGen.   GL_TEXTURE_GEN_T   The params parameter returns a single Boolean value indicating whether automatic generation of the T texture coordinate is enabled. See glTexGen.   GL_TEXTURE_MATRIX   The params parameter returns 16 values: the texture matrix on the top of the texture matrix stack. See glPushMatrix.   GL_TEXTURE_STACK_DEPTH   The params parameter returns one value: the number of matrices on the texture matrix stack. See glPushMatrix.   GL_UNPACK_ALIGNMENT   The params parameter returns one value: the byte alignment used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_LSB_FIRST   The params parameter returns a single Boolean value indicating whether single-bit pixels being read from memory are read first from the least significant bit of each unsigned byte. See glPixelStore.   GL_UNPACK_ROW_LENGTH   The params parameter returns one value: the row length used for reading pixel data from memory. See glPixelStore.   GL_UNPACK_SKIP_PIXELS   The params parameter returns one value: the number of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SKIP_ROWS   The params parameter returns one value: the number of rows of pixel locations skipped before the first pixel is read from memory. See glPixelStore.   GL_UNPACK_SWAP_BYTES   The params parameter returns a single Boolean value indicating whether the bytes of 2-byte and 4-byte pixel indexes and components are swapped after being read from memory. See glPixelStore.   GL_VERTEX_ARRAY   The params parameter returns a single Boolean value indicating whether the vertex array is enabled. See glVertexPointer.   GL_VERTEX_ARRAY_SIZE   The params parameter returns one value, the number of coordinates per vertex in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_STRIDE   The params parameter returns one value, the byte offset between consecutive vertexes in the vertex array. See glVertexPointer.   GL_VERTEX_ARRAY_TYPE   The params parameter returns one value, the data type of each coordinate in the vertex array. See glVertexPointer.   GL_VIEWPORT   The params parameter returns four values: the x and y window coordinates of the viewport, followed by its width and height. See glViewport.   GL_ZOOM_X   The params parameter returns one value: the x pixel zoom factor. See glPixelZoom.   GL_ZOOM_Y   The params parameter returns one value: the y pixel zoom factor. See glPixelZoom."
      },
      {
        "in_out": "",
        "type": "GLint*",
        "name": "params",
        "description": "Returns the value or values of the specified parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glGetPointerv function returns the address of a vertex data array.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glGetPointerv function returns array pointer information. The pname parameter is a symbolic constant specifying the kind of array pointer to return, and params is a pointer to a location to place the returned data. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetPointerv",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "pname",
        "description": "The type of array pointer to return from the following symbolic constants: GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, and GL_VERTEX_ARRAY_POINTER."
      },
      {
        "in_out": "",
        "type": "GLvoid**",
        "name": "params",
        "description": "Returns the value of the array pointer specified by pname."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glGetPolygonStipple function returns the polygon stipple pattern.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glGetPolygonStipple function returns a 32x32 polygon stipple pattern through the mask parameter. The pattern is packed into memory as if glReadPixels with both height and width of 32, type of GL_BITMAP, and format of GL_COLOR_INDEX were called, and the stipple pattern were stored in an internal 32x32 color-index buffer. Unlike glReadPixels, however, pixel-transfer operations (shift, offset, and pixel map) are not applied to the returned stipple image. If an error is generated, no change is made to the contents of mask. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetPolygonStipple",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLubyte*",
        "name": "mask",
        "description": "Returns the stipple pattern."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glGetString function returns a string describing the current OpenGL connection.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "The glGetString function returns a pointer to a static string describing some aspect of the current OpenGL connection. Because OpenGL does not include queries for the performance characteristics of an implementation, it is expected that some applications will be written to recognize known platforms and will modify their OpenGL usage based on known performance characteristics of these platforms. The strings GL_VENDOR and GL_RENDERER together uniquely specify a platform, and will not change from release to release. They should be used as such by platform recognition algorithms. The format and contents of the string that glGetString returns depend on the implementation, except that: If an error is generated, glGetString returns zero. ",
    "return_type": "const GLubyte*",
    "category": "OpenGL",
    "name": "glGetString",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "name",
        "description": "One of the following symbolic constants.  ValueMeaning  GL_VENDOR   Returns the company responsible for this OpenGL implementation. This name does not change from release to release.   GL_RENDERER   Returns the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release.   GL_VERSION   Returns a version or release number.   GL_EXTENSIONS   Returns a space-separated list of supported extensions to OpenGL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The glGetTexImage function returns a texture image.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glGetTexImage function returns a texture image into pixels. The target parameter specifies whether the desired texture image is one specified by glTexImage1D(GL_TEXTURE_1D) or by glTexImage2D(GL_TEXTURE_2D). The level parameter specifies the level-of-detail number of the desired image. The format and type parameters specify the format and type of the desired image array. For a description of the acceptable values for the format and type parameters, respectively, see glTexImage1D and glDrawPixels. Operation of glGetTexImage is best understood by considering the selected internal four-component texture image to be an RGBA color buffer the size of the image. The semantics of glGetTexImage are then identical to those of glReadPixels called with the same format and type, with x and y set to zero, width set to the width of the texture image (including border if one was specified), and height set to one for 1-D images, or to the height of the texture image (including border, if one was specified) for 2-D images. Because the internal texture image is an RGBA image, pixel formats GL_COLOR_INDEX, GL_STENCIL_INDEX, and GL_DEPTH_COMPONENT are not accepted, and pixel type GL_BITMAP is not accepted. If the selected texture image does not contain four components, the following mappings are applied. Single-component textures are treated as RGBA buffers with red set to the single-component value, and green, blue, and alpha set to zero. Two-component textures are treated as RGBA buffers, with red set to the value of component zero, alpha set to the value of component one, and green and blue set to zero. Finally, three-component textures are treated as RGBA buffers with red set to component zero, green set to component one, blue set to component two, and alpha set to zero. To determine the required size of pixels, use glGetTexLevelParameter to ascertain the dimensions of the internal texture image, and then scale the required number of pixels by the storage required for each pixel, based on format and type. Be sure to take the pixel-storage parameters into account, especially GL_PACK_ALIGNMENT. If an error is generated, no change is made to the contents of pixels. The following functions retrieve information related to glGetTexImage: glGet with argument GL_PACK_ALIGNMENT and others glGetTexLevelParameter with argument GL_TEXTURE_WIDTH glGetTexLevelParameter with argument GL_TEXTURE_HEIGHT glGetTexLevelParameter with argument GL_TEXTURE_BORDER glGetTexLevelParameter with argument GL_TEXTURE_COMPONENTS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glGetTexImage",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "Specifies which texture is to be obtained. GL_TEXTURE_1D and GL_TEXTURE_2D are accepted."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number of the desired image. Level 0 is the base image level. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "A pixel format for the returned data. The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_RGBA, GL_LUMINANCE, GL_BGR_EXT, GL_BGRA_EXT, and GL_LUMINANCE_ALPHA."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "A pixel type for the returned data. The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT."
      },
      {
        "in_out": "",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "Returns the texture image. Should be a pointer to an array of the type specified by type."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glHint function specifies implementation-specific hints.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "When there is room for interpretation, you can control certain aspects of OpenGL behavior with hints. You specify a hint with two arguments. The target parameter is a symbolic constant indicating the behavior to be controlled, and mode is another symbolic constant indicating the desired behavior. Though the implementation aspects that can be hinted are well defined, the interpretation of the hints depends on the implementation. The glHint function can be ignored. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glHint",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "A symbolic constant indicating the behavior to be controlled. The following symbolic constants, along with suggested semantics, are accepted.  ValueMeaning  GL_FOG_HINT   Indicates the accuracy of fog calculation. If per-pixel fog calculation is not efficiently supported by the OpenGL implementation, hinting GL_DONT_CARE or GL_FASTEST can result in per-vertex calculation of fog effects.   GL_LINE_SMOOTH_HINT   Indicates the sampling quality of antialiased lines. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied.   GL_PERSPECTIVE_CORRECTION_HINT   Indicates the quality of color and texture coordinate interpolation. If perspective-corrected parameter interpolation is not efficiently supported by the OpenGL implementation, hinting GL_DONT_CARE or GL_FASTEST can result in simple linear interpolation of colors and/or texture coordinates.   GL_POINT_SMOOTH_HINT   Indicates the sampling quality of antialiased points. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied.   GL_POLYGON_SMOOTH_HINT   Indicates the sampling quality of antialiased polygons. Hinting GL_NICEST can result in more pixel fragments being generated during rasterization, if a larger filter function is applied."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "A symbolic constant indicating the desired behavior. The following symbolic constants are accepted.  ValueMeaning  GL_FASTEST   The most efficient option should be chosen.   GL_NICEST   The most correct, or highest quality, option should be chosen.   GL_DONT_CARE   The client doesn't have a preference."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glIndexMask function controls the writing of individual bits in the color-index buffers.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glIndexMask function controls the writing of individual bits in the color-index buffers. The least significant n bits of mask, where 1 is the number of bits in a color-index buffer, specify a mask. Wherever a one appears in the mask, the corresponding bit in the color-index buffer (or buffers) is made writable. Where a zero appears, the bit is write-protected. This mask is used only in color-index mode, and it affects only the buffers currently selected for writing (see glDrawBuffer). Initially, all bits are enabled for writing. The following function retrieves information related to glIndexMask: glGet with argument GL_INDEX_WRITEMASK ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glIndexMask",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "mask",
        "description": "A bit mask to enable and disable the writing of individual bits in the color-index buffers. Initially, the mask is all ones."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glIndexPointer function defines an array of color indexes.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glIndexPointer function specifies the location and data of an array of color indexes to use when rendering. The type parameter specifies the data type of each color index and stride determines the byte offset from one color index to the next, enabling the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations, storing the vertices and attributes in a single array can be more efficient than using separate arrays. For more information, see glInterleavedArrays. A color-index array is enabled when you specify the GL_INDEX_ARRAY constant with glEnableClientState. When enabled, glDrawArrays and glArrayElement use the color-index array. By default the color-index array is disabled. You cannot include glIndexPointer in display lists. When you specify a color-index array using glIndexPointer, the values of all the function's color-index array parameters are saved in a client-side state and static array elements can be cached. Because the color-index array parameters are client-side state, their values are not saved or restored by glPushAttrib and glPopAttrib. Although no error is generated when you call glIndexPointer within glBegin and glEnd pairs, the results are undefined. The following functions retrieve information related to glIndexPointer: glIsEnabled with argument GL_INDEX_ARRAY glGet with argument GL_INDEX_ARRAY_STRIDE glGet with argument GL_INDEX_ARRAY_COUNT glGet with argument GL_INDEX_ARRAY_TYPE glGet with argument GL_INDEX_ARRAY_SIZE glGetPointerv with argument GL_INDEX_ARRAY_POINTER ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glIndexPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of each color index in the array using the following symbolic constants: GL_SHORT, GL_INT, GL_FLOAT, GL_DOUBLE."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive color indexes. When stride is zero, the color indexes are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first color index in the array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glInitNames function initializes the name stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glInitNames function causes the name stack to be initialized to its default empty state. The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified. It consists of an ordered set of unsigned integers. The name stack is always empty while the render mode is not GL_SELECT. Calls to glInitNames while the render mode is not GL_SELECT are ignored. The following functions retrieve information related to glInitNames: glGet with argument GL_NAME_STACK_DEPTH glGet with argument GL_MAX_NAME_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glInitNames",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glInterleavedArrays function simultaneously specifies and enables several interleaved arrays in a larger aggregate array.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "With the glInterleavedArrays function, you can simultaneously specify and enable several interleaved color, normal, texture, and vertex arrays whose elements are part of a larger aggregate array element. For some memory architectures, this is more efficient than specifying the arrays separately. If the stride parameter is zero then the aggregate array elements are stored consecutively; otherwise stride bytes occur between aggregate array elements. The format parameter serves as a key that describes how to extract individual arrays from the aggregate array: If you call glInterleavedArrays while compiling a display list, it is not compiled into the list but is executed immediately. You cannot include calls to glInterleavedArrays in glDisableClientState between calls to glBegin and the corresponding call to glEnd. The glInterleavedArrays function is implemented on the client side with no protocol. Because the vertex array parameters are client-side state, they are not saved or restored by glPushAttrib and glPopAttrib. Use glPushClientAttrib and glPopClientAttrib instead. ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glInterleavedArrays",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The type of array to enable. The parameter can assume one of the following symbolic values: GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, GL_T2F_C4F_N3F_V3F, or GL_T4F_C4F_N3F_V4F."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The offset in bytes between each aggregate array element."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first element of an aggregate array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The gllsEnabled function tests whether a capability is enabled.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "The gllsEnabled function returns GL_TRUE if cap is an enabled capability and returns GL_FALSE otherwise. ",
    "return_type": "GLboolean",
    "category": "OpenGL",
    "name": "glIsEnabled",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "cap",
        "description": "A symbolic constant indicating an OpenGL capability. The following capabilities are accepted.  ValueMeaning  GL_ALPHA_TEST   See glAlphaFunc    GL_AUTO_NORMAL   See glEvalCoord    GL_BLEND   See glBlendFunc    GL_CLIP_PLANE i   See glClipPlane    GL_COLOR_ARRAY   See glColorPointer    GL_COLOR_LOGIC_OP   See glLogicOp    GL_COLOR_MATERIAL   See glColorMaterial    GL_CULL_FACE   See glCullFace    GL_DEPTH_TEST   See glDepthFunc and glDepthRange    GL_DITHER   See glEnable    GL_FOG   See glFog    GL_INDEX_ARRAY   See glIndexPointer    GL_INDEX_LOGIC_OP   See glLogicOp    GL_LIGHT i   See glLightModel and glLight    GL_LIGHTING   See glMaterial, glLightModel, and glLight    GL_LINE_SMOOTH   See glLineWidth    GL_LINE_STIPPLE   See glLineStipple    GL_MAP1_COLOR_4   See glMap1    GL_MAP1_INDEX   See glMap1    GL_MAP1_NORMAL   See glMap1    GL_MAP1_TEXTURE_COORD_1   See glMap1    GL_MAP1_TEXTURE_COORD_2   See glMap1    GL_MAP1_TEXTURE_COORD_3   See glMap1    GL_MAP1_TEXTURE_COORD_4   See glMap1    GL_MAP1_VERTEX_3   See glMap1    GL_MAP1_VERTEX_4   See glMap1    GL_MAP2_COLOR_4   See glMap2    GL_MAP2_INDEX   See glMap2    GL_MAP2_NORMAL   See glMap2    GL_MAP2_TEXTURE_COORD_1   See glMap2    GL_MAP2_TEXTURE_COORD_2   See glMap2    GL_MAP2_TEXTURE_COORD_3   See glMap2    GL_MAP2_TEXTURE_COORD_4   See glMap2    GL_MAP2_VERTEX_3   See glMap2    GL_MAP2_VERTEX_4   See glMap2    GL_NORMAL_ARRAY   See glNormalPointer    GL_NORMALIZE   See glNormal    GL_POINT_SMOOTH   See glPointSize    GL_POLYGON_OFFSET_FILL   See glPolygonOffset    GL_POLYGON_OFFSET_LINE   See glPolygonOffset    GL_POLYGON_OFFSET_POINT   See glPolygonOffset    GL_POLYGON_SMOOTH   See glPolygonMode    GL_POLYGON_STIPPLE   See glPolygonStipple    GL_SCISSOR_TEST   See glScissor    GL_STENCIL_TEST   See glStencilFunc and glStencilOp    GL_TEXTURE_1D   See glTexImage1D    GL_TEXTURE_2D   See glTexImage2D    GL_TEXTURE_COORD_ARRAY   See glTexCoordPointer    GL_TEXTURE_GEN_Q   See glTexGen    GL_TEXTURE_GEN_R   See glTexGen    GL_TEXTURE_GEN_S   See glTexGen    GL_TEXTURE_GEN_T   See glTexGen    GL_VERTEX_ARRAY   See glVertexPointer"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The gllsList function tests for display list existence.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "The gllsList function returns GL_TRUE if list is the name of a display list and returns GL_FALSE otherwise. ",
    "return_type": "GLboolean",
    "category": "OpenGL",
    "name": "glIsList",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "list",
        "description": "A potential display list name."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glIsTexture function determines if a name corresponds to a texture.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "If the texture parameter is currently the name of a texture, the glIsTexture function returns GL_TRUE. The glIsTexture function returns GL_FALSE if texture is zero. It also returns GL_FALSE if it is a non-zero value that is not currently the name of a texture, or if an error occurs. You cannot include calls to glIsTexture in display lists. ",
    "return_type": "GLboolean",
    "category": "OpenGL",
    "name": "glIsTexture",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "texture",
        "description": "A value that is the name of a texture."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glLineStipple function specifies the line stipple pattern.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glLineStipple function specifies the line stipple pattern. Line stippling masks out certain fragments produced by rasterization; those fragments will not be drawn. The masking is achieved by using three parameters: the 16-bit line stipple pattern pattern, the repeat count factor, and an integer stipple counter s. Counter s is reset to zero whenever glBegin is called, and before each line segment of a glBegin(GL_LINES)/glEnd sequence is generated. It is incremented after each fragment of a unit width aliased line segment is generated, or after each i fragments of an i width line segment are generated. The i fragments associated with count s are masked out if pattern bit (s / factor) mod 16 is zero. Otherwise these fragments are sent to the framebuffer. Bit zero of pattern is the least significant bit. Antialiased lines are treated as a sequence of 1xwidth rectangles for purposes of stippling. Rectangle s is rasterized or not based on the fragment rule described for aliased lines; it counts rectangles rather than groups of fragments. Line stippling is enabled or disabled using glEnable and glDisable with argument GL_LINE_STIPPLE. When enabled, the line stipple pattern is applied as described above. When disabled, it is as if the pattern were all ones. Initially, line stippling is disabled. The following functions retrieve information related to glLineStipple: glGet with argument GL_LINE_STIPPLE_PATTERN glGet with argument GL_LINE_STIPPLE_REPEAT glIsEnabled with argument GL_LINE_STIPPLE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glLineStipple",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "factor",
        "description": "A multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern will be used three times before the next bit in the pattern is used. The factor parameter is clamped to the range [1, 256] and defaults to one."
      },
      {
        "in_out": "",
        "type": "GLushort",
        "name": "pattern",
        "description": "A 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first, and the default pattern is all ones."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glLineWidth function specifies the width of rasterized lines.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glLineWidth function specifies the rasterized width of both aliased and antialiased lines. Using a line width other than 1.0 has different effects, depending on whether line antialiasing is enabled. Line antialiasing is controlled by calling glEnable and glDisable with argument GL_LINE_SMOOTH. If line antialiasing is disabled, the actual width is determined by rounding the supplied width to the nearest integer. (If the rounding results in the value 0.0, it is as if the line width were 1.0) If | \u00ce\u0094 x | \u00e2\u0089\u00a5 | \u00ce\u0094 y |, i pixels are filled in each column that is rasterized, where i is the rounded value of width. Otherwise, i pixels are filled in each row that is rasterized. If antialiasing is enabled, line rasterization produces a fragment for each pixel square that intersects the region lying within the rectangle having width equal to the current line width, length equal to the actual length of the line, and centered on the mathematical line segment. The coverage value for each fragment is the window coordinate area of the intersection of the rectangular region with the corresponding pixel square. This value is saved and used in the final rasterization step. Not all widths can be supported when line antialiasing is enabled. If an unsupported width is requested, the nearest supported width is used. Only width 1.0 is guaranteed to be supported; others depend on the implementation. The range of supported widths and the size difference between supported widths within the range can be queried by calling glGet with arguments GL_LINE_WIDTH_RANGE and GL_LINE_WIDTH_GRANULARITY. The line width specified by glLineWidth is always returned when GL_LINE_WIDTH is queried. Clamping and rounding for aliased and antialiased lines have no effect on the specified value. Non-antialiased line width may be clamped to an implementation-dependent maximum. Although this maximum cannot be queried, it must be no less than the maximum value for antialiased lines, rounded to the nearest integer value. The following functions retrieve information related to glLineWidth: glGet with argument GL_LINE_WIDTH glGet with argument GL_LINE_WIDTH_RANGE glGet with argument GL_LINE_WIDTH_GRANULARITY glIsEnabled with argument GL_LINE_SMOOTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glLineWidth",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "width",
        "description": "The width of rasterized lines. The default is 1.0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glListBase function sets the display list base for glCallLists.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glListBase function specifies an array of offsets. Display list names are generated by adding base to each offset. Names that reference valid display lists are executed; others are ignored. The following function retrieves information related to glListBase: glGet with argument GL_LIST_BASE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glListBase",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "base",
        "description": "An integer offset that will be added to glCallLists offsets to generate display list names. Initial value is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glLoadIdentity function replaces the current matrix with the identity matrix.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glLoadIdentity function replaces the current matrix with the identity matrix. It is semantically equivalent to calling glLoadMatrix with the following identity matrix. However, in some cases, it is more efficient. The following functions retrieve information related to glLoadIdentity: glGet with argument GL_MATRIX_MODE glGet with argument GL_MODELVIEW_MATRIX glGet with argument GL_PROJECTION_MATRIX glGet with argument GL_TEXTURE_MATRIX ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glLoadIdentity",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glLoadName function loads a name onto the name stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glLoadName function causes name to replace the value on the top of the name stack, which is initially empty. The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified. It consists of an ordered set of unsigned integers. The name stack is always empty while the render mode is not GL_SELECT. Calls to glLoadName while the render mode is not GL_SELECT are ignored. The following functions retrieve information related to glLoadName: glGet with argument GL_NAME_STACK_DEPTH glGet with argument GL_MAX_NAME_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glLoadName",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "name",
        "description": "A name that will replace the top value on the name stack."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glLogicOp function specifies a logical pixel operation for color index rendering.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glLogicOp function specifies a logical operation that, when enabled, is applied between the incoming color index and the color index at the corresponding location in the framebuffer. The logical operation is enabled or disabled with glEnable and glDisable using the symbolic constant GL_LOGIC_OP. The opcode parameter is a symbolic constant chosen from the list below. In the explanation of the logical operations, s represents the incoming color index and d represents the index in the framebuffer. Standard C-language operators are used. As these bitwise operators suggest, the logical operation is applied independently to each bit pair of the source and destination indexes. Logical pixel operations are not applied to RGBA color buffers. When more than one color-index buffer is enabled for drawing, logical operations are done separately for each enabled buffer, using the contents of that buffer for the destination index (see glDrawBuffer). The opcode parameter must be one of the 16 accepted values. Other values result in an error. The following functions retrieve information related to glLogicOp: glGet with argument GL_LOGIC_OP_MODE glIsEnabled with argument GL_LOGIC_OP ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glLogicOp",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "opcode",
        "description": "A symbolic constant that selects a logical operation. The following symbols are accepted where s equals the value of the source bit and d is the value of the destination bit.  ValueMeaning  GL_CLEAR   0   GL_SET   1   GL_COPY   s   GL_COPY_INVERTED   !s   GL_NOOP   d   GL_INVERT   !d   GL_AND   s & d   GL_NAND   !(s & d)   GL_OR   s | d   GL_NOR   !(s | d)   GL_XOR   s ^ d   GL_EQUIV   !(s ^ d)   GL_AND_REVERSE   s & !d   GL_AND_INVERTED   !s & d   GL_OR_REVERSE   s | !d   GL_OR_INVERTED   !s | d"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glMatrixMode function specifies which matrix is the current matrix.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glMatrixMode function sets the current matrix mode. The following function retrieves information related to glMatrixMode: glGet with argument GL_MATRIX_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glMatrixMode",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The matrix stack that is the target for subsequent matrix operations. The mode parameter can assume one of three values.  ValueMeaning  GL_MODELVIEW   Applies subsequent matrix operations to the modelview matrix stack.   GL_PROJECTION   Applies subsequent matrix operations to the projection matrix stack.   GL_TEXTURE   Applies subsequent matrix operations to the texture matrix stack."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glNewList and glEndList functions create or replace a display list.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Display lists are groups of OpenGL commands that have been stored for subsequent execution. The display lists are created with glNewList. All subsequent commands are placed in the display list, in the order issued, until glEndList is called. The glNewList function has two parameters. The first parameter, list, is a positive integer that becomes the unique name for the display list. Names can be created and reserved with glGenLists and tested for uniqueness with glIsList. The second parameter, mode, is a symbolic constant that can assume one of the two preceding values. Certain commands are not compiled into the display list, but are executed immediately, regardless of the display list mode. These commands are glColorPointer, glDeleteLists, glDisableClientState,  glEdgeFlagPointer,  glEnableClientState,  glFeedbackBuffer,  glFinish,  glFlush,  glGenLists,  glIndexPointer, glInterleavedArrays,  glIsEnabled,  glIsList,  glNormalPointer, glPopClientAttrib, glPixelStore,  glPushClientAttrib,  glReadPixels,  glRenderMode,  glSelectBuffer, glTexCoordPointer,  glVertexPointer, and all of the glGet routines. Similarly, glTexImage2D and glTexImage1D are executed immediately and not compiled into the display list when their first argument is GL_PROXY_TEXTURE_2D or GL_PROXY_TEXTURE_1D, respectively. When the glEndList function is encountered, the display list definition is completed by associating the list with the unique name list (specified in the glNewList command). If a display list with name list already exists, it is replaced only when glEndList is called. The glCallList and glCallLists functions can be entered into display lists. The commands in the display list or lists executed by glCallList or glCallLists are not included in the display list being created, even if the list creation mode is GL_COMPILE_AND_EXECUTE. The following function retrieves information related to glNewList: glGet with argument GL_MATRIX_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glNewList",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "list",
        "description": "The display list name."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The compilation mode. The following values are accepted.  ValueMeaning  GL_COMPILE   Commands are merely compiled.   GL_COMPILE_AND_EXECUTE   Commands are executed as they are compiled into the display list."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glNewList and glEndList functions create or replace a display list.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "Display lists are groups of OpenGL commands that have been stored for subsequent execution. The display lists are created with glNewList. All subsequent commands are placed in the display list, in the order issued, until glEndList is called. The glNewList function has two parameters. The first parameter, list, is a positive integer that becomes the unique name for the display list. Names can be created and reserved with glGenLists and tested for uniqueness with glIsList. The second parameter, mode, is a symbolic constant that can assume one of the two preceding values. Certain commands are not compiled into the display list, but are executed immediately, regardless of the display list mode. These commands are glColorPointer, glDeleteLists, glDisableClientState,  glEdgeFlagPointer,  glEnableClientState,  glFeedbackBuffer,  glFinish,  glFlush,  glGenLists,  glIndexPointer, glInterleavedArrays,  glIsEnabled,  glIsList,  glNormalPointer, glPopClientAttrib, glPixelStore,  glPushClientAttrib,  glReadPixels,  glRenderMode,  glSelectBuffer, glTexCoordPointer,  glVertexPointer, and all of the glGet routines. Similarly, glTexImage2D and glTexImage1D are executed immediately and not compiled into the display list when their first argument is GL_PROXY_TEXTURE_2D or GL_PROXY_TEXTURE_1D, respectively. When the glEndList function is encountered, the display list definition is completed by associating the list with the unique name list (specified in the glNewList command). If a display list with name list already exists, it is replaced only when glEndList is called. The glCallList and glCallLists functions can be entered into display lists. The commands in the display list or lists executed by glCallList or glCallLists are not included in the display list being created, even if the list creation mode is GL_COMPILE_AND_EXECUTE. The following function retrieves information related to glNewList: glGet with argument GL_MATRIX_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glEndList",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glNormalPointer function defines an array of normals.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glNormalPointer function specifies the location and data of an array of normals to use when rendering. The type parameter specifies the data type of each normal coordinate. The stride parameter determines the byte offset from one normal to the next, enabling the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations storing the vertices and attributes in a single array can be more efficient than using separate arrays; see glInterleavedArrays for details. A normal array is enabled when you specify the GL_NORMAL_ARRAY constant with glEnableClientState. When enabled, glDrawArrays, glDrawElements and glArrayElement use the normal array. By default the normal array is disabled. You cannot include glNormalPointer in display lists. When you specify a normal array using glNormalPointer, the values of all the function's normal array parameters are saved in a client-side state. Because the normal array parameters are saved in a client-side state, their values are not saved or restored by glPushAttrib and glPopAttrib. Although no error is generated when you call glNormalPointer within glBegin and glEnd pairs, the results are undefined. The following functions are associated with glNormalPointer: glGet with argument GL_NORMAL_ARRAY_STRIDE glGet with argument GL_NORMAL_ARRAY_COUNT glGet with argument GL_NORMAL_ARRAY_TYPE glGetPointerv with argument GL_NORMAL_ARRAY_POINTER glIsEnabled with argument GL_NORMAL_ARRAY ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glNormalPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of each coordinate in the array using the following symbolic constants: GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive normals. When stride is zero, the normals are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first normal in the array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The glOrtho function multiplies the current matrix by an orthographic matrix.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glOrtho function describes a perspective matrix that produces a parallel projection. The (left, bottom, near) and (right, top, near) parameters specify the points on the near clipping plane that are mapped to the lower-left and upper-right corners of the window, respectively, assuming that the eye is located at (0, 0, 0). The far parameter specifies the location of the far clipping plane. Both zNear and zFar can be either positive or negative. The corresponding matrix is shown in the following image. where The current matrix is multiplied by this matrix with the result replacing the current matrix. That is, if M is the current matrix and O is the ortho matrix, then M is replaced with M \u00e2\u0080\u00a2 O. Use glPushMatrix and glPopMatrix to save and restore the current matrix stack. Use glMatrixMode to set the current matrix. The following functions retrieve information related to glOrtho: glGet with argument GL_MATRIX_MODE glGet with argument GL_MODELVIEW_MATRIX glGet with argument GL_PROJECTION_MATRIX glGet with argument GL_TEXTURE_MATRIX ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glOrtho",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "left",
        "description": "The coordinates for the left vertical clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "right",
        "description": "The coordinates for theright vertical clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "bottom",
        "description": "The coordinates for the bottom horizontal clipping plane."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "top",
        "description": "The coordinates for the top horizontal clipping plans."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "zNear",
        "description": "The distances to the nearer depth clipping plane. This distance is negative if the plane is to be behind the viewer."
      },
      {
        "in_out": "",
        "type": "GLdouble",
        "name": "zFar",
        "description": "The distances to the farther depth clipping plane. This distance is  negative if the plane is to be behind the viewer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glPassThrough function places a marker in the feedback buffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "Feedback is an OpenGL render mode selected by calling glRenderMode with GL_FEEDBACK. When OpenGL is in feedback mode, no pixels are produced by rasterization. Instead, information about primitives that would have been rasterized is fed back to the application by OpenGL. See glFeedbackBuffer for a description of the feedback buffer and the values in it. The glPassThrough function inserts a user-defined marker in the feedback buffer when it is executed in feedback mode. The token parameter is returned as if it were a primitive. The glPassThrough function is ignored if OpenGL is not in feedback mode. The following function retrieves information related to glPassThrough: glGet with argument GL_RENDER_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPassThrough",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "token",
        "description": "A marker value to be placed in the feedback buffer. It is indicated with the following unique identifying value.  ValueMeaning  GL_PASS_THROUGH_TOKEN   The order of glPassThrough commands with respect to the specification of graphics primitives is maintained."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glPixelZoom function specifies the pixel zoom factors.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glPixelZoom function specifies values for the x and y zoom factors. During the execution of glDrawPixels or glCopyPixels, if (xr ,yr ) is the current raster position, and a given element is in the nth row and mth column of the pixel rectangle, then pixels whose centers are in the rectangle with corners at are candidates for replacement. Any pixel whose center lies on the bottom or left edge of this rectangular region is also modified. Pixel zoom factors are not limited to positive values. Negative zoom factors reflect the resulting image about the current raster position. The following functions retrieve information related to glPixelZoom: glGet with argument GL_ZOOM_X glGet with argument GL_ZOOM_Y ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPixelZoom",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "xfactor",
        "description": "The x zoom factor for pixel write operations."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "yfactor",
        "description": "The y zoom factor for pixel write operations."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glPointSize function specifies the diameter of rasterized points.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPointSize function specifies the rasterized diameter of both aliased and antialiased points. Using a point size other than 1.0 has different effects, depending on whether point antialiasing is enabled. Point antialiasing is controlled by calling glEnable and glDisable with argument GL_POINT_SMOOTH. If point antialiasing is disabled, the actual size is determined by rounding the supplied size to the nearest integer. (If the rounding results in the value 0, it is as if the point size were 1.) If the rounded size is odd, then the center point (x,y) of the pixel fragment that represents the point is computed as (xw + .5, yw + .5) where w subscripts indicate window coordinates. All pixels that lie within the square grid of the rounded size centered at (x,y) make up the fragment. If the size is even, the center point is (xw + .5, yw + .5) and the rasterized fragment's centers are the half-integer window coordinates within the square of the rounded size centered at (x,y). All pixel fragments produced in rasterizing a nonantialiased point are assigned the same associated data; that of the vertex corresponding to the point. If antialiasing is enabled, then point rasterization produces a fragment for each pixel square that intersects the region lying within the circle having diameter equal to the current point size and centered at the points (xw ,yw ). The coverage value for each fragment is the window coordinate area of the intersection of the circular region with the corresponding pixel square. This value is saved and used in the final rasterization step. The data associated with each fragment is the data associated with the point being rasterized. Not all sizes are supported when point antialiasing is enabled. If an unsupported size is requested, the nearest supported size is used. Only size 1.0 is guaranteed to be supported; others depend on the implementation. The range of supported sizes and the size difference between supported sizes within the range can be queried by calling glGet with arguments GL_POINT_SIZE_RANGE and GL_POINT_SIZE_GRANULARITY. The point size specified by glPointSize is always returned when GL_POINT_SIZE is queried. Clamping and rounding for aliased and antialiased points have no effect on the specified value. Non-antialiased point size may be clamped to an implementation-dependent maximum. Although this maximum cannot be queried, it must be no less than the maximum value for antialiased points, rounded to the nearest integer value. The following functions retrieve information related to glPointSize: glGet with argument GL_POINT_SIZE glGet with argument GL_POINT_SIZE_RANGE glGet with argument GL_POINT_SIZE_GRANULARITY glIsEnabled with argument GL_POINT_SMOOTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPointSize",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "size",
        "description": "The diameter of rasterized points. The default is 1.0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glPolygonMode function selects a polygon rasterization mode.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPolygonMode function controls the interpretation of polygons for rasterization. The face parameter describes which polygons mode applies to: front-facing polygons (GL_FRONT), back-facing polygons (GL_BACK), or both (GL_FRONT_AND_BACK). The polygon mode affects only the final rasterization of polygons. In particular, a polygon's vertices are lit and the polygon is clipped and possibly culled before these modes are applied. To draw a surface with filled back-facing polygons and outlined front-facing polygons, call glPolygonMode(GL_FRONT, GL_LINE); Vertices are marked as boundary or nonboundary with an edge flag. Edge flags are generated internally by OpenGL when it decomposes polygons, and they can be set explicitly using glEdgeFlag. The following function retrieves information related to glPolygonMode: glGet with argument GL_POLYGON_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPolygonMode",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "face",
        "description": "The polygons that mode applies to. Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons, or GL_FRONT_AND_BACK for front- and back-facing polygons."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The way polygons will be rasterized. The following modes are defined and can be specified in mode. The default is GL_FILL for both front- and back-facing polygons.  ValueMeaning  GL_POINT   Polygon vertices that are marked as the start of a boundary edge are drawn as points. Point attributes such as GL_POINT_SIZE and GL_POINT_SMOOTH control the rasterization of the points. Polygon rasterization attributes other than GL_POLYGON_MODE have no effect.   GL_LINE   Boundary edges of the polygon are drawn as line segments. They are treated as connected line segments for line stippling; the line stipple counter and pattern are not reset between segments (see glLineStipple). Line attributes such as GL_LINE_WIDTH and GL_LINE_SMOOTH control the rasterization of the lines. Polygon rasterization attributes other than GL_POLYGON_MODE have no effect.   GL_FILL   The interior of the polygon is filled. Polygon attributes such as GL_POLYGON_STIPPLE and GL_POLYGON_SMOOTH control the rasterization of the polygon."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glPolygonOffset function sets the scale and units OpenGL uses to calculate depth values.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "When GL_POLYGON_OFFSET is enabled, each fragment's depth value will be offset after it is interpolated from the depth values of the appropriate vertices. The value of the offset is factor * \u00ce\u0094z + r *units, where \u00ce\u0094z is a measurement of the change in depth relative to the screen area of the polygon, and r is the smallest value that is guaranteed to produce a resolvable offset for a given implementation. The offset is added before the depth test is performed and before the value is written into the depth buffer. The glPolygonOffset function is useful for rendering hidden-line images, for applying decals to surfaces, and for rendering solids with highlighted edges. The glPolygonOffset function has no effect on depth coordinates placed in the feedback buffer. It also has no effect on selection. The following functions retrieve information related to glPolygonOffset: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPolygonOffset",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "factor",
        "description": "Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is zero."
      },
      {
        "in_out": "",
        "type": "GLfloat",
        "name": "units",
        "description": "Specifies a value that is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glPolygonStipple function sets the polygon stippling pattern.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glPolygonStipple function sets the polygon stippling pattern. Polygon stippling, like line stippling (see glLineStipple), masks out certain fragments produced by rasterization, creating a pattern. Stippling is independent of polygon antialiasing. The mask parameter is a pointer to a 32x32 stipple pattern that is stored in memory just like the pixel data supplied to glDrawPixels with height and width both equal to 32, a pixel format of GL_COLOR_INDEX, and data type of GL_BITMAP. That is, the stipple pattern is represented as a 32x32 array of 1-bit color indexes packed in unsigned bytes. The glPixelStore function parameters, such as GL_UNPACK_SWAP_BYTES and GL_UNPACK_LSB_FIRST, affect the assembling of the bits into a stipple pattern. Pixel transfer operations (shift, offset, and pixel map) are not applied to the stipple image, however. Polygon stippling is enabled and disabled with glEnable and glDisable, using argument GL_POLYGON_STIPPLE. If enabled, a rasterized polygon fragment with window coordinates xw and yw is sent to the next stage of OpenGL if and only if the (xw mod 32)th bit in the (yw mod 32)th row of the stipple pattern is one. When polygon stippling is disabled, it is as if the stipple pattern were all ones. The following functions retrieve information related to glPolygonStipple: glGetPolygonStipple glIsEnabled with argument GL_POLYGON_STIPPLE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPolygonStipple",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "const",
        "type": "GLubyte*",
        "name": "mask",
        "description": "A pointer to a 32x32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glPrioritizeTextures function sets the residence priority of textures.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPrioritizeTextures function assigns the n texture priorities specified in the priorities parameter to the n textures named in the textures parameter. On computers with a limited amount of texture memory, OpenGL establishes a \"working set\" of textures that are resident in texture memory. These textures can be bound to a texture target much more efficiently than textures that are not resident. By specifying a priority for each texture, the glPrioritizeTextures function enables you to determine which textures should be resident. The texture priorities elements in priorities are clamped to the range [0.0, 1.0] before being assigned. Zero indicates the lowest priority; thus textures with priority zero are least likely to be resident. The value 1.0 indicates the highest priority; thus textures with priority 1.0 are most likely to be resident. However, textures are not guaranteed to be resident until they are bound. The glPrioritizeTextures function ignores attempts to prioritize texture 0, or any texture name that does not correspond to an existing texture. None of the functions named by the textures parameter need to be bound to a texture target. If a texture is currently bound, you can also use the glTexParameter function to set its priority. This is the only way to set the priority of a default texture. You can include glPrioritizeTextures in display lists. The following function retrieves the priority of a currently-bound texture related to glPrioritizeTextures: ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPrioritizeTextures",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "n",
        "description": "The number of textures to be prioritized."
      },
      {
        "in_out": "const",
        "type": "GLuint*",
        "name": "textures",
        "description": "A pointer to the first element of an array containing the names of the textures to be prioritized."
      },
      {
        "in_out": "const",
        "type": "GLclampf*",
        "name": "priorities",
        "description": "A pointer to the first element of an array containing the texture priorities. A priority given in an element of the priorities parameter applies to the texture named by the corresponding element of the textures parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Pushes the attribute stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPushAttrib function takes one argument, a mask that indicates which groups of state variables to save on the attribute stack. Symbolic constants are used to set bits in the mask. The mask parameter is typically constructed by applying the logical OR operation to several of these constants. You can use the special mask GL_ALL_ATTRIB_BITS to save all stackable states. The glPopAttrib function restores the values of the state variables saved with the last glPushAttrib command. Those not saved are left unchanged. It is an error to push attributes onto a full stack, or to pop attributes off an empty stack. In either case, the error flag is set and no other change is made to the OpenGL state. Initially, the attribute stack is empty. Not all values for the OpenGL state can be saved on the attribute stack. For example, you cannot save pixel pack and unpack state, render mode state, and select and feedback state. The depth of the attribute stack depends on the implementation, but it must be at least 16. The following functions retrieve information related to glPushAttrib and glPopAttrib: glGet with argument GL_ATTRIB_STACK_DEPTH glGet with argument GL_MAX_ATTRIB_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPushAttrib",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLbitfield",
        "name": "mask",
        "description": "A mask that indicates which attributes to save. The symbolic mask constants and their associated OpenGL state are as follows (the indented paragraphs list which attributes are saved):   GL_ACCUM_BUFFER_BIT   Accumulation buffer clear value  GL_COLOR_BUFFER_BIT  GL_ALPHA_TEST enable bit   Alpha test function and reference value    GL_BLEND enable bit    Blending source and destination functions    GL_DITHER enable bit    GL_DRAW_BUFFER setting    GL_LOGIC_OP enable bit    Logic op function    Color-mode and index-mode clear values    Color-mode and index-mode writemasks  GL_CURRENT_BIT  Current RGBA color   Current color index    Current normal vector    Current texture coordinates    Current raster position   GL_CURRENT_RASTER_POSITION_VALID flag    RGBA color associated with current raster position    Color index associated with current raster position    Texture coordinates associated with current raster position    GL_EDGE_FLAG flag   GL_DEPTH_BUFFER_BIT  GL_DEPTH_TEST enable bit   Depth buffer test function    Depth buffer clear value    GL_DEPTH_WRITEMASK enable bit  GL_ENABLE_BIT  GL_ALPHA_TEST flag   GL_AUTO_NORMAL flag    GL_BLEND flag    Enable bits for the user-definable clipping planes    GL_COLOR_MATERIAL    GL_CULL_FACE flag    GL_DEPTH_TEST flag    GL_DITHER flag    GL_FOG flag    GL_LIGHTi where 0 <= i < GL_MAX_LIGHTS GL_LIGHTING flag    GL_LINE_SMOOTH flag    GL_LINE_STIPPLE flag    GL_COLOR_LOGIC_OP flag    GL_INDEX_LOGIC_OP flag    GL_MAP1_x where x is a map type    GL_MAP2_x where x is a map type    GL_NORMALIZE flag    GL_POINT_SMOOTH flag    GL_POLYGON_OFFSET_LINE flag    GL_POLYGON_OFFSET_FILL flag    GL_POLYGON_OFFSET_POINT flag    GL_POLYGON_SMOOTH flag    GL_POLYGON_STIPPLE flag    GL_SCISSOR_TEST flag    GL_STENCIL_TEST flag    GL_TEXTURE_1D flag    GL_TEXTURE_2D flag    Flags GL_TEXTURE_GEN_x where x is S, T, R, or Q  GL_EVAL_BIT  GL_MAP1_x enable bits, where x is a map type   GL_MAP2_x enable bits, where x is a map type    1-D grid endpoints and divisions    2-D grid endpoints and divisions    GL_AUTO_NORMAL enable bit  GL_FOG_BIT  GL_FOG enable flag   Fog color    Fog density    Linear fog start    Linear fog end    Fog index    GL_FOG_MODE value  GL_HINT_BIT  GL_PERSPECTIVE_CORRECTION_HINT setting   GL_POINT_SMOOTH_HINT setting    GL_LINE_SMOOTH_HINT setting    GL_POLYGON_SMOOTH_HINT setting    GL_FOG_HINT setting  GL_LIGHTING_BIT  GL_COLOR_MATERIAL enable bit   GL_COLOR_MATERIAL_FACE value    Color material parameters that are tracking the current color    Ambient scene color    GL_LIGHT_MODEL_LOCAL_VIEWER value    GL_LIGHT_MODEL_TWO_SIDE setting    GL_LIGHTING enable bit    Enable bit for each light    Ambient, diffuse, and specular intensity for each light    Direction, position, exponent, and cutoff angle for each light    Constant, linear, and quadratic attenuation factors for each light    Ambient, diffuse, specular, and emissive color for each material    Ambient, diffuse, and specular color indexes for each material    Specular exponent for each material   GL_SHADE_MODEL setting    GL_LINE_BIT   GL_LINE_SMOOTH flag   GL_LINE_STIPPLE enable bit    Line stipple pattern and repeat counter    Line width  GL_LIST_BIT  GL_LIST_BASE setting  GL_PIXEL_MODE_BIT  GL_RED_BIAS and GL_RED_SCALE settings   GL_GREEN_BIAS and GL_GREEN_SCALE values    GL_BLUE_BIAS and GL_BLUE_SCALE    GL_ALPHA_BIAS and GL_ALPHA_SCALE    GL_DEPTH_BIAS and GL_DEPTH_SCALE    GL_INDEX_OFFSET and GL_INDEX_SHIFT values    GL_MAP_COLOR and GL_MAP_STENCIL flags    GL_ZOOM_X and GL_ZOOM_Y factors    GL_READ_BUFFER setting  GL_POINT_BIT  GL_POINT_SMOOTH flag   Point size  GL_POLYGON_BIT  GL_CULL_FACE enable bit   GL_CULL_FACE_MODE value    GL_FRONT_FACE indicator    GL_POLYGON_MODE setting    GL_POLYGON_SMOOTH flag    GL_POLYGON_STIPPLE enable bit    GL_POLYGON_OFFSET_FILL flag    GL_POLYGON_OFFSET_LINE flag    GL_POLYGON_OFFSET_POINT flag    GL_POLYGON_OFFSET_FACTOR    GL_POLYGON_OFFSET_UNITS  GL_POLYGON_STIPPLE_BIT  Polygon stipple image   GL_SCISSOR_BIT  GL_SCISSOR_TEST flag   Scissor box    GL_STENCIL_BUFFER_BIT  GL_STENCIL_TEST enable bit   Stencil function and reference value    Stencil value mask    Stencil fail, pass, and depth buffer pass actions    Stencil buffer clear value    Stencil buffer writemask  GL_TEXTURE_BIT  Enable bits for the four texture coordinates   Border color for each texture image    Minification function for each texture image    Magnification function for each texture image    Texture coordinates and wrap mode for each texture image    Color and mode for each texture environment    Enable bits GL_TEXTURE_GEN_x; x is S, T, R, and Q    GL_TEXTURE_GEN_MODE setting for S, T, R, and Q    glTexGen plane equations for S, T, R, and Q      GL_TRANSFORM_BIT  Coefficients of the six clipping planes   Enable bits for the user-definable clipping planes    GL_MATRIX_MODE value    GL_NORMALIZE flag  GL_VIEWPORT_BIT  Depth range (near and far)   Viewport origin and extent"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Pops the attribute stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPushAttrib function takes one argument, a mask that indicates which groups of state variables to save on the attribute stack. Symbolic constants are used to set bits in the mask. The mask parameter is typically constructed by ORing several of these constants together. The special mask GL_ALL_ATTRIB_BITS can be used to save all stackable states. The glPopAttrib function restores the values of the state variables saved with the last glPushAttrib command. Those not saved are left unchanged. It is an error to push attributes onto a full stack, or to pop attributes off an empty stack. In either case, the error flag is set and no other change is made to the OpenGL state. Initially, the attribute stack is empty. Not all values for the OpenGL state can be saved on the attribute stack. For example, pixel pack and unpack state, render mode state, and select and feedback state cannot be saved. The depth of the attribute stack depends on the implementation, but it must be at least 16. The following functions retrieve information related to glPushAttrib and glPopAttrib: glGet with argument GL_ATTRIB_STACK_DEPTH glGet with argument GL_MAX_ATTRIB_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPopAttrib",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glPushClientAttrib and glPopClientAttrib functions save and restore groups of client-state variables on the client-attribute stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glPushClientAttrib function uses its mask parameter to determine which groups of client-state variables are saved on the client-attribute stack. You can use the bitwise OR operator to join together accepted symbolic constants to set bits and construct a mask. The glPopClientAttrib function restores the values of the client-state variables last saved with glPushclientAttrib. Client-state variables not previously saved are left unchanged. Pushing attributes onto a full client-attribute stack or popping attributes off an empty stack sets an error flag and no other change is made to the OpenGL state. By default the client attribute stack is empty. Some OpenGL client-state values cannot be saved on the client-attribute stack. For example, you cannot save the select or feedback states on the client-attribute stack. The depth of the client-attribute stack is at least 16. The glPushclientAttrib and glPopClientAttrib functions are not compiled into display lists, but are executed immediately. The glPushClientAttrib and glPopClientAttrib functions can only push and pop pixel storage modes and vertex array client states. You must use glPushAttrib and glPopAttrib to push and pop states that are kept on the server. The following functions retrieve information related to glPushClientAttrib and glPopClientAttrib: glGet with argument GL_CLIENT_ATTRIB_STACK_DEPTH glGet with argument GL_MAX_CLIENT_ATTRIB_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPushClientAttrib",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLbitfield",
        "name": "mask",
        "description": "A mask that indicates which attributes to save. The following are the symbolic mask constants and their associated OpenGL client states.  ValueMeaning  GL_CLIENT_PIXEL_STORE_BIT   Pixel storage mode attributes.   GL_CLIENT_VERTEX_ARRAY_BIT   Vertex array attributes.   GL_CLIENT_ALL_ATTRIB_BITs   all stackable client-state attributes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glPushClientAttrib and glPopClientAttrib functions save and restore groups of client-state variables on the client-attribute stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glPushClientAttrib function uses its mask parameter to determine which groups of client-state variables are saved on the client-attribute stack. You can use the bitwise OR operator to join together accepted symbolic constants to set bits and construct a mask. The glPopClientAttrib function restores the values of the client-state variables last saved with glPushclientAttrib. Client-state variables not previously saved are left unchanged. Pushing attributes onto a full client-attribute stack or popping attributes off an empty stack sets an error flag and no other change is made to the OpenGL state. By default the client attribute stack is empty. Some OpenGL client-state values cannot be saved on the client-attribute stack. For example, you cannot save the select or feedback states on the client-attribute stack. The depth of the client-attribute stack is at least 16. The glPushclientAttrib and glPopClientAttrib functions are not compiled into display lists, but are executed immediately. The glPushClientAttrib and glPopClientAttrib functions can only push and pop pixel storage modes and vertex array client states. You must use glPushAttrib and glPopAttrib to push and pop states that are kept on the server. The following functions retrieve information related to glPushClientAttrib and glPopClientAttrib: glGet with argument GL_CLIENT_ATTRIB_STACK_DEPTH glGet with argument GL_MAX_CLIENT_ATTRIB_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPopClientAttrib",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glPushMatrix and glPopMatrix functions push and pop the current matrix stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  It is an error to push a full matrix stack, or to pop a matrix stack that contains only a single matrix. In either case, the error flag is set and no other change is made to the OpenGL state. The following error codes can be retrieved by the glGetError function.  It is an error to push a full matrix stack, or to pop a matrix stack that contains only a single matrix. In either case, the error flag is set and no other change is made to the OpenGL state. The following error codes can be retrieved by the glGetError function. ",
    "remarks": "There is a stack of matrices for each of the matrix modes. In GL_MODELVIEW mode, the stack depth is at least 32. In the other two modes, GL_PROJECTION and GL_TEXTURE, the depth is at least 2. The current matrix in any mode is the matrix on the top of the stack for that mode. The glPushMatrix function pushes the current matrix stack down by one, duplicating the current matrix. That is, after a glPushMatrix call, the matrix on the top of the stack is identical to the one below it. The glPopMatrix function pops the current matrix stack, replacing the current matrix with the one below it on the stack. Initially, each of the stacks contains one matrix, an identity matrix. The following functions retrieve information related to glPushMatrix and glPopMatrix: glGet with argument GL_MATRIX_MODE glGet with argument GL_MODELVIEW_MATRIX glGet with argument GL_PROJECTION_MATRIX glGet with argument GL_TEXTURE_MATRIX glGet with argument GL_MODELVIEW_STACK_DEPTH glGet with argument GL_PROJECTION_STACK_DEPTH glGet with argument GL_TEXTURE_STACK_DEPTH glGet with argument GL_MAX_MODELVIEW_STACK_DEPTH glGet with argument GL_MAX_PROJECTION_STACK_DEPTH glGet with argument GL_MAX_TEXTURE_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPushMatrix",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glPushMatrix and glPopMatrix functions push and pop the current matrix stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  It is an error to push a full matrix stack, or to pop a matrix stack that contains only a single matrix. In either case, the error flag is set and no other change is made to the OpenGL state. The following error codes can be retrieved by the glGetError function.  It is an error to push a full matrix stack, or to pop a matrix stack that contains only a single matrix. In either case, the error flag is set and no other change is made to the OpenGL state. The following error codes can be retrieved by the glGetError function. ",
    "remarks": "There is a stack of matrices for each of the matrix modes. In GL_MODELVIEW mode, the stack depth is at least 32. In the other two modes, GL_PROJECTION and GL_TEXTURE, the depth is at least 2. The current matrix in any mode is the matrix on the top of the stack for that mode. The glPushMatrix function pushes the current matrix stack down by one, duplicating the current matrix. That is, after a glPushMatrix call, the matrix on the top of the stack is identical to the one below it. The glPopMatrix function pops the current matrix stack, replacing the current matrix with the one below it on the stack. Initially, each of the stacks contains one matrix, an identity matrix. The following functions retrieve information related to glPushMatrix and glPopMatrix: glGet with argument GL_MATRIX_MODE glGet with argument GL_MODELVIEW_MATRIX glGet with argument GL_PROJECTION_MATRIX glGet with argument GL_TEXTURE_MATRIX glGet with argument GL_MODELVIEW_STACK_DEPTH glGet with argument GL_PROJECTION_STACK_DEPTH glGet with argument GL_TEXTURE_STACK_DEPTH glGet with argument GL_MAX_MODELVIEW_STACK_DEPTH glGet with argument GL_MAX_PROJECTION_STACK_DEPTH glGet with argument GL_MAX_TEXTURE_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPopMatrix",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glPushName and glPopName functions push and pop the name stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPushName function causes name to be pushed onto the name stack, which is initially empty. The glPopName function pops one name off the top of the stack. The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified. It consists of an ordered set of unsigned integers. The name stack is always empty while the render mode is not GL_SELECT. Calls to glPushName or glPopName while the render mode is not GL_SELECT are ignored. The following functions retrieve information related to glPushName and glPopName: glGet with argument GL_NAME_STACK_DEPTH glGet with argument GL_MAX_NAME_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPushName",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "name",
        "description": "A name that will be pushed onto the name stack."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The glPushName and glPopName functions push and pop the name stack.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glPushName function causes name to be pushed onto the name stack, which is initially empty. The glPopName function pops one name off the top of the stack. The name stack is used during selection mode to allow sets of rendering commands to be uniquely identified. It consists of an ordered set of unsigned integers. The name stack is always empty while the render mode is not GL_SELECT. Calls to glPushName or glPopName while the render mode is not GL_SELECT are ignored. The following functions retrieve information related to glPushName and glPopName: glGet with argument GL_NAME_STACK_DEPTH glGet with argument GL_MAX_NAME_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glPopName",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glReadBuffer function selects a color buffer source for pixels.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glReadBuffer function specifies a color buffer as the source for subsequent glReadPixels and glCopyPixels commands. The mode parameter accepts one of twelve or more predefined values. (GL_AUX0 through GL_AUX3 are always defined.) In a fully configured system, GL_FRONT, GL_LEFT, and GL_FRONT_LEFT all name the front-left buffer, GL_FRONT_RIGHT and GL_RIGHT name the front-right buffer, and GL_BACK_LEFT and GL_BACK name the back-left buffer. Nonstereo double-buffered configurations have only a front-left and a back-left buffer. Single-buffered configurations have a front-left and a front-right buffer if stereo, and only a front-left buffer if nonstereo. It is an error to specify a nonexistent buffer to glReadBuffer. By default, mode is GL_FRONT in single-buffered configurations, and GL_BACK in double-buffered configurations. The following function retrieves information related to glReadBuffer: glGet with argument GL_READ_BUFFER ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glReadBuffer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "A color buffer. Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUX i, where i is between 0 and GL_AUX_BUFFERS 1."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The glReadPixels function reads a block of pixels from the framebuffer.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glReadPixels function returns pixel data from the framebuffer, starting with the pixel whose lower-left corner is at location (x, y), into client memory starting at location pixels. Several parameters control the processing of the pixel data before it is placed into client memory. These parameters are set with three commands: glPixelStore, glPixelTransfer, and glPixelMap. This topic describes the effects on glReadPixels of most, but not all of the parameters specified by these three commands. The glReadPixels function returns values from each pixel with lower-left corner at (x + i, y + j) for 0 \u00e2\u0089\u00a4 i < width and 0 \u00e2\u0089\u00a4 j < height. This pixel is said to be the ith pixel in the jth row. Pixels are returned in row order from the lowest to the highest row, left to right in each row. The shift, scale, bias, and lookup factors described above are all specified by glPixelTransfer. The lookup table contents are specified by glPixelMap. The final step involves converting the indexes or components to the proper format, as specified by type. If format is GL_COLOR_INDEX or GL_STENCIL_INDEX and type is not GL_FLOAT, each index is masked with the mask value given in the following table. If type is GL_FLOAT, then each integer index is converted to single-precision floating-point format. If format is GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_RGBA, GL_BGR_EXT, GL_BGRA_EXT, GL_LUMINANCE, or GL_LUMINANCE_ALPHA and type is not GL_FLOAT, each component is multiplied by the multiplier shown in the preceding table. If type is GL_FLOAT, then each component is passed as is (or converted to the client's single-precision floating-point format if it is different from the one used by OpenGL). Return values are placed in memory as follows. If format is GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, or GL_LUMINANCE, a single value is returned and the data for the ith pixel in the jth row is placed in location (j )width + i. GL_RGB and GL_BGR_EXT return three values, GL_RGBA and GL_BGRA_EXT return four values, and GL_LUMINANCE_ALPHA returns two values for each pixel, with all values corresponding to a single pixel occupying contiguous space in pixels. Storage parameters set by glPixelStore, such as GL_PACK_SWAP_BYTES and GL_PACK_LSB_FIRST, affect the way that data is written into memory. See glPixelStore for a description. Values for pixels that lie outside the window connected to the current OpenGL context are undefined. If an error is generated, no change is made to the contents of pixels. The following function retrieves information related to glReadPixels: glGet with argument GL_INDEX_MODE ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glReadPixels",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The window x coordinate of the first pixel that is read from the framebuffer. Together with the y coordinate, specifies the location of the lower-left corner of a rectangular block of pixels."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The window y coordinates of the first pixel that is read from the framebuffer. Together with the x coordinate, specifies the location of the lower-left corner of a rectangular block of pixels."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the pixel rectangle."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the pixel rectangle. Width and height parameters of value \"1\" correspond to a single pixel."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. The following symbolic values are accepted:  ValueMeaning  GL_COLOR_INDEX   Color indexes are read from the color buffer selected by glReadBuffer. Each index is converted to fixed point, shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET. If GL_MAP_COLOR is GL_TRUE, indexes are replaced by their mappings in the table GL_PIXEL_MAP_I_TO_I.   GL_STENCIL_INDEX   Stencil values are read from the stencil buffer. Each index is converted to fixed point, shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET. If GL_MAP_STENCIL is GL_TRUE, indexes are replaced by their mappings in the table GL_PIXEL_MAP_S_TO_S.   GL_DEPTH_COMPONENT   Depth values are read from the depth buffer. Each component is converted to floating point such that the minimum depth value maps to 0.0 and the maximum value maps to 1.0. Each component is then multiplied by GL_DEPTH_SCALE, added to GL_DEPTH_BIAS, and finally clamped to the range [0,1].   GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_RGBA, GL_BGR_EXT, GL_BGRA_EXT, GL_LUMINANCE, GL_LUMINANCE_ALPHA   Processing differs depending on whether color buffers store color indexes or RGBA color components. If color indexes are stored, they are read from the color buffer selected by glReadBuffer. Each index is converted to fixed point, shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET. Indexes are then replaced by the red, green, blue, and alpha values obtained by indexing the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables. If RGBA color components are stored in the color buffers, they are read from the color buffer selected by glReadBuffer. Each color component is converted to floating point such that zero intensity maps to 0.0 and full intensity maps to 1.0. Each component is then multiplied by GL_c_SCALE and added to GL_c_BIAS, where c is GL_RED, GL_GREEN, GL_BLUE, and GL_ALPHA. Each component is clamped to the range [0,1]. Finally, if GL_MAP_COLOR is GL_TRUE, each color component c is replaced by its mapping in the table GL_PIXEL_MAP_c_TO_c, where c again is GL_RED, GL_GREEN, GL_BLUE, and GL_ALPHA. Each component is scaled to the size of its corresponding table before the lookup is performed. Finally, unneeded data is discarded. For example, GL_RED discards the green, blue, and alpha components, while GL_RGB discards only the alpha component. GL_LUMINANCE computes a single component value as the sum of the red, green, and blue components, and GL_LUMINANCE_ALPHA does the same, while keeping alpha as a second value."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of the pixel data. ..."
      },
      {
        "in_out": "",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "Returns the pixel data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glRenderMode function sets the rasterization mode.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "",
    "remarks": "The glRenderMode function takes one argument, mode, which can assume one of three predefined values above. The return value of the glRenderMode function is determined by the render mode at the time glRenderMode is called, rather than by mode. The values returned for the three render modes are as follows.  Refer to glSelectBuffer and glFeedbackBuffer for more details concerning selection and feedback operation. If an error is generated, glRenderMode returns zero regardless of the current render mode. The following function retrieves information related to glRenderMode: glGet with argument GL_RENDER_MODE ",
    "return_type": "GLint",
    "category": "OpenGL",
    "name": "glRenderMode",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "The rasterization mode. The following three values are accepted. The default value is GL_RENDER.  ValueMeaning  GL_RENDER   Render mode. Primitives are rasterized, producing pixel fragments, which are written into the framebuffer. This is the normal mode and also the default mode.   GL_SELECT   Selection mode. No pixel fragments are produced, and no change to the framebuffer contents is made. Instead, a record of the names of primitives that would have been drawn if the render mode was GL_RENDER is returned in a select buffer, which must be created (see glSelectBuffer) before selection mode is entered.   GL_FEEDBACK   Feedback mode. No pixel fragments are produced, and no change to the framebuffer contents is made. Instead, the coordinates and attributes of vertices that would have been drawn had the render mode been GL_RENDER are returned in a feedback buffer, which must be created (see glFeedbackBuffer) before feedback mode is entered."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glScissor function defines the scissor box.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glScissor function defines a rectangle, called the scissor box, in window coordinates. The first two parameters, x and y, specify the lower-left corner of the box. The width and height parameters specify the width and height of the box. The scissor test is enabled and disabled using glEnable and glDisable with argument GL_SCISSOR_TEST. While the scissor test is enabled, only pixels that lie within the scissor box can be modified by drawing commands. Window coordinates have integer values at the shared corners of framebuffer pixels, so glScissor(0,0,1,1) allows only the lower-left pixel in the window to be modified, and glScissor(0,0,0,0) disallows modification to all pixels in the window. When the scissor test is disabled, it is as though the scissor box includes the entire window. The following functions retrieve information related to glScissor: glGet with argument GL_SCISSOR_BOX glIsEnabled with argument GL_SCISSOR_TEST ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glScissor",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The x (vertical axis) coordinate for the lower-left corner of the scissor box."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The y (horizontal axis) coordinate for the lower-left corner of the scissor box. Together, x and y specify the lower-left corner of the scissor box. Initially (0,0)."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the scissor box."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the scissor box. When an OpenGL context is first attached to a window, width and height are set to the dimensions of that window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The glSelectBuffer function establishes a buffer for selection mode values.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glSelectBuffer function has two parameters: buffer is a pointer to an array of unsigned integers, and size indicates the size of the array. The buffer parameter returns values from the name stack (see glInitNames, glLoadName, glPushName) when the rendering mode is GL_SELECT (see glRenderMode). The glSelectBuffer function must be issued before selection mode is enabled, and it must not be issued while the rendering mode is GL_SELECT. Selection is used by a programmer to determine which primitives are drawn into some region of a window. The region is defined by the current modelview and perspective matrices. In selection mode, no pixel fragments are produced from rasterization. Instead, if a primitive intersects the clip volume defined by the viewing frustum and the user-defined clipping planes, this primitive causes a selection hit. (With polygons, no hit occurs if the polygon is culled.) When a change is made to the name stack, or when glRenderMode is called, a hit record is copied to buffer if any hits have occurred since the last such event (either a name stack change or a glRenderMode call). The hit record consists of the number of names in the name stack at the time of the event; followed by the minimum and maximum depth values of all vertices that hit since the previous event; followed by the name stack contents, bottom name first. Returned depth values are mapped such that the largest unsigned integer value corresponds to window coordinate depth 1.0, and zero corresponds to window coordinate depth 0.0. An internal index into buffer is reset to zero whenever selection mode is entered. Each time a hit record is copied into buffer, the index is incremented to point to the cell just past the end of the block of namesthat is, to the next available cell. If the hit record is larger than the number of remaining locations in buffer, as much data as can fit is copied, and the overflow flag is set. If the name stack is empty when a hit record is copied, that record consists of zero followed by the minimum and maximum depth values. Selection mode is exited by calling glRenderMode with an argument other than GL_SELECT. Whenever glRenderMode is called while the render mode is GL_SELECT, it returns the number of hit records copied to buffer, resets the overflow flag and the selection buffer pointer, and initializes the name stack to be empty. If the overflow bit was set when glRenderMode was called, a negative hit record count is returned. The contents of buffer are undefined until glRenderMode is called with an argument other than GL_SELECT. The glBegin/glEnd primitives and calls to glRasterPos can result in hits. The following function retrieves information related to glSelectBuffer: glGet with argument GL_NAME_STACK_DEPTH ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glSelectBuffer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "size",
        "description": "The size of buffer."
      },
      {
        "in_out": "",
        "type": "GLuint*",
        "name": "buffer",
        "description": "Returns the selection data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glShadeModel function selects flat or smooth shading.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "OpenGL primitives can have either flat or smooth shading. Smooth shading, the default, causes the computed colors of vertices to be interpolated as the primitive is rasterized, typically assigning different colors to each resulting pixel fragment. Flat shading selects the computed color of just one vertex and assigns it to all the pixel fragments generated by rasterizing a single primitive. In either case, the computed color of a vertex is the result of lighting, if lighting is enabled, or it is the current color at the time the vertex was specified, if lighting is disabled. Flat and smooth shading are indistinguishable for points. Counting vertices and primitives from one, starting when glBegin is issued, each flat-shaded line segment i is given the computed color of vertex i + 1, its second vertex. Counting similarly from one, each flat-shaded polygon is given the computed color of the vertex listed in the following table. This is the last vertex to specify the polygon in all cases except single polygons, where the first vertex specifies the flat-shaded color.  Flat and smooth shading are specified by glShadeModel with mode set to GL_FLAT and GL_SMOOTH, respectively. The following function retrieves information related to glShadeModel: glGet with argument GL_SHADE_MODEL ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glShadeModel",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "mode",
        "description": "A symbolic value representing a shading technique. Accepted values are GL_FLAT and GL_SMOOTH. The default is GL_SMOOTH."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glStencilFunc function sets the function and reference value for stencil testing.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Stenciling, like z-buffering, enables and disables drawing on a per-pixel basis. You draw into the stencil planes using OpenGL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the screen. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering. The stencil test conditionally eliminates a pixel based on the outcome of a comparison between the reference value and the value in the stencil buffer. The test is enabled by glEnable and glDisable with argument GL_STENCIL_TEST. Actions taken based on the outcome of the stencil test are specified with glStencilOp. The func parameter is a symbolic constant that determines the stencil comparison function. It accepts one of the eight values shown above. The ref parameter is an integer reference value that is used in the stencil comparison. It is clamped to the range [0, 2\u00e2\u0081\u00bf 1], where n is the number of bitplanes in the stencil buffer. The mask parameter is bitwise ANDed with both the reference value and the stored stencil value, with the ANDed values participating in the comparison. If stencil represents the value stored in the corresponding stencil buffer location, the preceding list shows the effect of each comparison function that can be specified by func. Only if the comparison succeeds is the pixel passed through to the next stage in the rasterization process (see glStencilOp). All tests treat stencil values as unsigned integers in the range [0, 2\u00e2\u0081\u00bf 1], where n is the number of bitplanes in the stencil buffer. Initially, the stencil test is disabled. If there is no stencil buffer, no stencil modification can occur and it is as if the stencil test always passes. The following functions retrieve information related to glStencilFunc: glGet with argument GL_STENCIL_FUNC glGet with argument GL_STENCIL_VALUE_MASK glGet with argument GL_STENCIL_REF glGet with argument GL_STENCIL_BITS glIsEnabled with argument GL_STENCIL_TEST ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glStencilFunc",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "func",
        "description": "The test function. ..."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "ref",
        "description": "The reference value for the stencil test. ..."
      },
      {
        "in_out": "",
        "type": "GLuint",
        "name": "mask",
        "description": "A mask that is ANDed with both the reference value and the stored stencil value when the test is done."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The glStencilMask function controls the writing of individual bits in the stencil planes.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error code can be retrieved by the glGetError function.  The following error code can be retrieved by the glGetError function. ",
    "remarks": "The glStencilMask function controls the writing of individual bits in the stencil planes. The least significant n bits of mask, where n is the number of bits in the stencil buffer, specify a mask. Wherever a one appears in the mask, the corresponding bit in the stencil buffer is made writable. Where a zero appears, the bit is write-protected. Initially, all bits are enabled for writing. The following functions retrieve information related to glStencilMask: glGet with argument GL_STENCIL_WRITEMASK glGet with argument GL_STENCIL_BITS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glStencilMask",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLuint",
        "name": "mask",
        "description": "A bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all ones."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The glStencilOp function sets the stencil test actions.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Stenciling, like z-buffering, enables and disables drawing on a per-pixel basis. You draw into the stencil planes using OpenGL drawing primitives, then render geometry and images, using the stencil planes to mask out portions of the screen. Stenciling is typically used in multipass rendering algorithms to achieve special effects, such as decals, outlining, and constructive solid geometry rendering. The stencil test conditionally eliminates a pixel based on the outcome of a comparison between the value in the stencil buffer and a reference value. The test is enabled with glEnable and glDisable calls with argument GL_STENCIL_TEST, and controlled with glStencilFunc. The glStencilOp function takes three arguments that indicate what happens to the stored stencil value while stenciling is enabled. If the stencil test fails, no change is made to the pixel's color or depth buffers, and fail specifies what happens to the stencil buffer contents. Stencil buffer values are treated as unsigned integers. When incremented and decremented, values are clamped to 0 and 2\u00e2\u0081\u00bf 1, where n is the value returned by querying GL_STENCIL_BITS. The other two arguments to glStencilOp specify stencil buffer actions should subsequent depth buffer tests succeed (zpass) or fail (zfail). (See glDepthFunc.) They are specified using the same six symbolic constants as fail. Note that zfail is ignored when there is no depth buffer, or when the depth buffer is not enabled. In these cases, fail and zpass specify stencil action when the stencil test fails and passes, respectively. Initially the stencil test is disabled. If there is no stencil buffer, no stencil modification can occur and it is as if the stencil tests always pass, regardless of any call to glStencilOp. The following functions retrieve information related to glStencilOp: glGet with argument GL_STENCIL_FAIL glGet with argument GL_STENCIL_PASS_DEPTH_PASS glGet with argument GL_STENCIL_PASS_DEPTH_FAIL glGet with argument GL_STENCIL_BITS glIsEnabled with argument GL_STENCIL_TEST ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glStencilOp",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "fail",
        "description": "The action to take when the stencil test fails. The following six symbolic constants are accepted.  ValueMeaning  GL_KEEP   Keeps the current value.   GL_ZERO   Sets the stencil buffer value to zero.   GL_REPLACE   Sets the stencil buffer value to ref, as specified by glStencilFunc.   GL_INCR   Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.   GL_DECR   Decrements the current stencil buffer value. Clamps to zero.   GL_INVERT   Bitwise inverts the current stencil buffer value."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "zfail",
        "description": "Stencil action when the stencil test passes, but the depth test fails. Accepts the same symbolic constants as fail."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "zpass",
        "description": "Stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. Accepts the same symbolic constants as fail."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glTexCoordPointer function defines an array of texture coordinates.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glTexCoordPointer function specifies the location and data of an array of texture coordinates to use when rendering.The size parameter specifies the number of coordinates used for each element of the array.The type parameter specifies the data type of each texture coordinate. The stride parameter determines the byte offset from one array element to the next, enabling the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations, storing the vertices and attributes in a single array can be more efficient than using separate arrays. For more information, see glInterleavedArrays. When a texture coordinate array is specified, size, type, stride, and pointer are saved client-side state. A texture coordinate array is enabled when you specify the GL_TEXTURE_COORD_ARRAY constant with glEnableClientState. When enabled, glDrawArrays, glDrawElements, and glArrayElement use the texture coordinate array. By default the texture coordinate array is disabled. You cannot include glTexCoordPointer in display lists. When you specify a texture coordinate array using glTexCoordPointer, the values of all the function's texture coordinate array parameters are saved in a client-side state, and static array elements can be cached. Because the texture coordinate array parameters are client-side state, their values are not saved or restored by glPushAttrib and glPopAttrib. Although no error is generated when you call glTexCoordPointer within glBegin and glEnd pairs, the results are undefined. The following functions retrieve information related to glTexCoordPointer: glIsEnabled with argument GL_TEXTURE_COORD_ARRAY glGet with argument GL_TEXTURE_COORD_ARRAY_SIZE glGet with argument GL_TEXTURE_COORD_ARRAY_STRIDE glGet with argument GL_TEXTURE_COORD_ARRAY_COUNT glGet with argument GL_TEXTURE_COORD_ARRAY_TYPE glGetPointerv with argument GL_TEXTURE_COORD_ARRAY_POINTER ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glTexCoordPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "size",
        "description": "The number of coordinates per array element. The value of size must be 1, 2, 3, or 4."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of each texture coordinate in the array using the following symbolic constants: GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive array elements. When stride is zero, the array elements are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first coordinate of the first element in the array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The glTexImage1D function specifies a one-dimensional texture image.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glTexImage1D function specifies a one-dimensional texture image. Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled. One-dimensional texturing is enabled and disabled using glEnable and glDisable with argument GL_TEXTURE_1D. Texture images are defined with glTexImage1D. The arguments describe the parameters of the texture image, such as width, width of the border, level-of-detail number (see glTexParameter), and number of color components provided. The last three arguments describe the way the image is represented in memory. These arguments are identical to the pixel formats used for glDrawPixels. Data is read from pixels as a sequence of signed or unsigned bytes, shorts or longs, or single-precision floating-point values, depending on type. These values are grouped into sets of one, two, three, or four values, depending on format, to form elements. If type is GL_BITMAP, the data is considered as a string of unsigned bytes (and format must be GL_COLOR_INDEX). Each data byte is treated as eight 1-bit elements, with bit ordering determined by GL_UNPACK_LSB_FIRST (see glPixelStore). A texture image can have up to four components per texture element, depending on components. A one-component texture image uses only the red component of the RGBA color extracted from pixels. A two-component image uses the R and A values. A three-component image uses the R, G, and B values. A four-component image uses all of the RGBA components. Texturing has no effect in color-index mode. The texture image can be represented by the same data formats as the pixels in a glDrawPixels command, except that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. The glPixelStore and glPixelTransfer modes affect texture images in exactly the way they affect glDrawPixels. A texture image with zero width indicates the null texture. If the null texture is specified for level-of-detail 0, it is as if texturing were disabled. The following functions retrieve information related to glTexImageID: glGetTexImage glIsEnabled with argument GL_TEXTURE_1D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glTexImage1D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture. Must be GL_TEXTURE_1D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image level. Level n is the nTh mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "internalformat",
        "description": "Specifies the number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture image. ..."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "border",
        "description": "The width of the border. Must be either 0 or 1."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "format",
        "description": "The format of the pixel data. It can assume one of nine symbolic values.  ValueMeaning  GL_COLOR_INDEX   Each element is a single value, a color index. It is converted to fixed point (with an unspecified number of 0 bits to the right of the binary point), shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see glPixelTransfer). The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].   GL_RED   Each element is a single red component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_GREEN   Each element is a single green component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BLUE   Each element is a single blue component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_ALPHA   Each element is a single red component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGB   Each element is an RGB triple. It is converted to floating point and assembled into an RGBA element by attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGBA   Each element is a complete RGBA element. It is converted to floating point. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BGR_EXT   Each pixel is a group of three components in this order: blue, green, red. GL_BGR_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.   GL_BGRA_EXT   Each pixel is a group of four components in this order: blue, green, red, alpha. GL_BGRA_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.   GL_LUMINANCE   Each element is a single luminance value. It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue, and attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE_ALPHA   Each element is a luminance/alpha pair. It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer)."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "A pointer to the image data in memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The glTexImage2D function specifies a two-dimensional texture image.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glTexImage2D function specifies a two-dimensional texture image. Texturing maps a portion of a specified texture image onto each graphical primitive for which texturing is enabled. Two-dimensional texturing is enabled and disabled using glEnable and glDisable with argument GL_TEXTURE_2D. Texture images are defined with glTexImage2D. The arguments describe the parameters of the texture image, such as height, width, width of the border, level-of-detail number (see glTexParameter), and number of color components provided. The last three arguments describe the way the image is represented in memory. These arguments are identical to the pixel formats used for glDrawPixels. Data is read from pixels as a sequence of signed or unsigned bytes, shorts or longs, or single-precision floating-point values, depending on type. These values are grouped into sets of one, two, three, or four values, depending on format, to form elements. If type is GL_BITMAP, the data is considered as a string of unsigned bytes (and format must be GL_COLOR_INDEX). Each data byte is treated as eight 1-bit elements, with bit ordering determined by GL_UNPACK_LSB_FIRST (see glPixelStore). Please see glDrawPixels for a description of the acceptable values for the type parameter. A texture image can have up to four components per texture element, depending on components. A one-component texture image uses only the red component of the RGBA color extracted from pixels. A two-component image uses the R and A values. A three-component image uses the R, G, and B values. A four-component image uses all of the RGBA components. Texturing has no effect in color-index mode. The texture image can be represented by the same data formats as the pixels in a glDrawPixels command, except that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. The glPixelStore and glPixelTransfer modes affect texture images in exactly the way they affect glDrawPixels. A texture image with zero height or width indicates the null texture. If the null texture is specified for level-of-detail 0, it is as if texturing were disabled. The following functions retrieve information related to glTexImage2D: glGetTexImage glIsEnabled with argument GL_TEXTURE_2D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glTexImage2D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture. Must be GL_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image level. Level n is the n th mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "internalformat",
        "description": "The number of color components in the texture. Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture image. ..."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the texture image. Must be 2m + 2(border) for some integer m."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "border",
        "description": "The width of the border. Must be either 0 or 1."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "format",
        "description": "The format of the pixel data. It can assume one of nine symbolic values.  ValueMeaning  GL_COLOR_INDEX   Each element is a single value, a color index. It is converted to fixed point (with an unspecified number of 0 bits to the right of the binary point), shifted left or right depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see glPixelTransfer). The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].   GL_RED   Each element is a single red component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_GREEN   Each element is a single green component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BLUE   Each element is a single blue component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_ALPHA   Each element is a single red component. It is converted to floating point and assembled into an RGBA element by attaching 0.0 for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGB   Each element is an RGB triple. It is converted to floating point and assembled into an RGBA element by attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGBA   Each element is a complete RGBA element. It is converted to floating point. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BGR_EXT   Each pixel is a group of three components in this order: blue, green, red. GL_BGR_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.   GL_BGRA_EXT   Each pixel is a group of four components in this order: blue, green, red, alpha. GL_BGRA_EXT provides a format that matches the memory layout of Windows device-independent bitmaps (DIBs). Thus your applications can use the same data with Windows function calls and OpenGL pixel function calls.   GL_LUMINANCE   Each element is a single luminance value. It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue, and attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE_ALPHA   Each element is a luminance/alpha pair. It is converted to floating point, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer)."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "A pointer to the image data in memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The glTexSubImage1D function specifies a portion of an existing one-dimensional texture image. You cannot define a new texture with glTexSubImage1D.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "One-dimensional texturing for a primitive is enabled using glEnable and glDisable with the argument GL_TEXTURE_1D. During texturing, part of a specified texture image is mapped into each enabled primitive. You use the glTexSubImage1D function to specify a contiguous sub-image of an existing one-dimensional texture image for texturing. The texels referenced by pixels replace a region of the existing texture array with x indexes of xoffset and xoffset + (width 1) inclusive. This region cannot include any texels outside the range of the originally specified texture array. Specifying a sub-image with a width of zero has no effect and does not generate an error. Texturing has no effect in color-index mode. In general, texture images can be represented by the same data formats as the pixels in a glDrawPixels command, except that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. The glPixelStore and glPixelTransfer modes affect texture images in exactly the way they affect glDrawPixels. The following functions retrieve information related to glTexSubImage1D: glGetTexImage glIsEnabled with argument GL_TEXTURE_1D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glTexSubImage1D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture. Must be GL_TEXTURE_1D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "xoffset",
        "description": "A texel offset in the x direction within the texture array."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture sub-image."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. This parameter can assume one of the following symbolic values.  ValueMeaning  GL_COLOR_INDEX   Each element is a single value, a color index. It is converted to fixed point format (with an unspecified number of 0 bits to the right of the binary point), shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see glPixelTransfer). The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].   GL_RED   Each element is a single red component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_GREEN   Each element is a single green component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BLUE   Each element is a single blue component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_ALPHA   Each element is a single alpha component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGB   Each element is an RGB triple. It is converted to floating point and assembled into an RGBA element by attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGBA   Each element is a complete RGBA element. It is converted to floating point format. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE   Each element is a single luminance value. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue, and attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE_ALPHA   Each element is a luminance/alpha pair. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer)."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "A pointer to the image data in memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The glTexSubImage2D function specifies a portion of an existing one-dimensional texture image. You cannot define a new texture with glTexSubImage2D.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "Two-dimensional texturing for a primitive is enabled using glEnable and glDisable with the argument GL_TEXTURE_2D. During texturing, part of a specified texture image is mapped into each enabled primitive. You use the glTexSubImage2D function to specify a contiguous sub-image of an existing two-dimensional texture image for texturing. The texels referenced by pixels replace a region of the existing texture array with x indexes of xoffset and xoffset + (width 1) inclusive and y indexes of yoffset and yoffset + (height 1) inclusive. This region cannot include any texels outside the range of the originally specified texture array. Specifying a sub-image with a width of zero has no effect and does not generate an error. Texturing has no effect in color-index mode. In general, texture images can be represented by the same data formats as the pixels in a glDrawPixels command, except that GL_STENCIL_INDEX and GL_DEPTH_COMPONENT cannot be used. The glPixelStore and glPixelTransfer modes affect texture images in exactly the way they affect glDrawPixels. The following functions retrieve information related to glTexSubImage2D: glGetTexImage glIsEnabled with argument GL_TEXTURE_2D ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glTexSubImage2D",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLenum",
        "name": "target",
        "description": "The target texture. Must be GL_TEXTURE_2D."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "level",
        "description": "The level-of-detail number. Level 0 is the base image. Level n is the nth mipmap reduction image."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "xoffset",
        "description": "A texel offset in the x direction within the texture array."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "yoffset",
        "description": "A texel offset in the y direction within the texture array."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the texture sub-image."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the texture sub-image."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "format",
        "description": "The format of the pixel data. It can assume one of the following symbolic values.  ValueMeaning  GL_COLOR_INDEX   Each element is a single value, a color index. It is converted to fixed point format (with an unspecified number of 0 bits to the right of the binary point), shifted left or right, depending on the value and sign of GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET (see glPixelTransfer). The resulting index is converted to a set of color components using the GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A tables, and clamped to the range [0,1].   GL_RED   Each element is a single red component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for green and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_GREEN   Each element is a single green component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and blue, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_BLUE   Each element is a single blue component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red and green, and 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_ALPHA   Each element is a single alpha component. It is converted to floating point format and assembled into an RGBA element by attaching 0.0 for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGB   Each element is an RGB triple. It is converted to floating point format and assembled into an RGBA element by attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_RGBA   Each element is a complete RGBA element. It is converted to floating point. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE   Each element is a single luminance value. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue, and attaching 1.0 for alpha. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer).   GL_LUMINANCE_ALPHA   Each element is a luminance/alpha pair. It is converted to floating point format, and then assembled into an RGBA element by replicating the luminance value three times for red, green, and blue. Each component is then multiplied by the signed scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see glPixelTransfer)."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, and GL_FLOAT."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pixels",
        "description": "A pointer to the image data in memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glVertexPointer function defines an array of vertex data.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glVertexPointer function specifies the location and data of an array of vertex coordinates to use when rendering. The size parameter specifies the number of coordinates per vertex. The type parameter specifies the data type of each vertex coordinate. The stride parameter determines the byte offset from one vertex to the next, enabling the packing of vertices and attributes in a single array or storage in separate arrays. In some implementations, storing the vertices and attributes in a single array can be more efficient than using separate arrays (see glInterleavedArrays). A vertex array is enabled when you specify the GL_VERTEX_ARRAY constant with glEnableClientState. When enabled, glDrawArrays, glDrawElements, and glArrayElement use the vertex array. By default, the vertex array is disabled. You cannot include glVertexPointer in display lists. When you specify a vertex array using glVertexPointer, the values of all the function's vertex array parameters are saved in a client-side state, and static array elements can be cached. Because the vertex array parameters are client-side state, their values are not saved or restored by glPushAttrib and glPopAttrib. Although no error is generated if you call glVertexPointer within glBegin and glEnd pairs, the results are undefined. The following functions retrieve information related to glVertexPointer: glGet with argument GL_VERTEX_ARRAY_SIZE glGet with argument GL_VERTEX_ARRAY_STRIDE glGet with argument GL_VERTEX_ARRAY_COUNT glGet with argument GL_VERTEX_ARRAY_TYPE glGetPointerv with argument GL_VERTEX_ARRAY_POINTER glIsEnabled with argument GL_VERTEX_ARRAY ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glVertexPointer",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "size",
        "description": "The number of coordinates per vertex. The value of size must be 2, 3, or 4."
      },
      {
        "in_out": "",
        "type": "GLenum",
        "name": "type",
        "description": "The data type of each coordinate in the array using the following symbolic constants: GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "stride",
        "description": "The byte offset between consecutive vertices. When stride is zero, the vertices are tightly packed in the array."
      },
      {
        "in_out": "const",
        "type": "GLvoid*",
        "name": "pointer",
        "description": "A pointer to the first coordinate of the first vertex in the array."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The glViewport function sets the viewport.",
    "library": "Opengl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Gl.h",
    "return_value": "This function does not return a value.  The following error codes can be retrieved by the glGetError function.  The following error codes can be retrieved by the glGetError function. ",
    "remarks": "The glViewport function specifies the affine transformation of x and y from normalized device coordinates to window coordinates. Let (xnd , ynd ) be normalized device coordinates. The window coordinates (xw , yw ) are then computed as follows: Viewport width and height are silently clamped to a range that depends on the implementation. This range is queried by calling glGet with argument GL_MAX_VIEWPORT_DIMS. The following functions retrieve information related to glViewport: glGet with argument GL_VIEWPORT glGet with argument GL_MAX_VIEWPORT_DIMS ",
    "return_type": "void",
    "category": "OpenGL",
    "name": "glViewport",
    "is_callback": 0,
    "dll": "Opengl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "GLint",
        "name": "x",
        "description": "The lower-left corner of the viewport rectangle, in pixels. The default is (0,0)."
      },
      {
        "in_out": "",
        "type": "GLint",
        "name": "y",
        "description": "The lower-left corner of the viewport rectangle, in pixels. The default is (0,0)."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "width",
        "description": "The width of the viewport. When an OpenGL context is first attached to a window, width and height are set to the dimensions of that window."
      },
      {
        "in_out": "",
        "type": "GLsizei",
        "name": "height",
        "description": "The height of the viewport. When an OpenGL context is first attached to a window, width and height are set to the dimensions of that window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]