[
  {
    "n_arguments": 2,
    "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumProps continues until the last entry is enumerated or the callback function returns FALSE.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration. ",
    "remarks": "An application can remove only those properties it has added. It must not remove properties added by other applications or by the system itself. ",
    "return_type": "int",
    "category": "Window Properties",
    "name": "EnumProps",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose property list is to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "PROPENUMPROC",
        "name": "lpEnumFunc",
        "description": "Type: PROPENUMPROC A pointer to the callback function. For more information about the callback function, see the PropEnumProc function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. EnumPropsEx continues until the last entry is enumerated or the callback function returns FALSE.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration. ",
    "remarks": "An application can remove only those properties it has added. It must not remove properties added by other applications or by the system itself. For an example, see Listing Window Properties for a Given Window. ",
    "return_type": "int",
    "category": "Window Properties",
    "name": "EnumPropsEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose property list is to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "PROPENUMPROCEX",
        "name": "lpEnumFunc",
        "description": "Type: PROPENUMPROCEX A pointer to the callback function. For more information about the callback function, see the PropEnumProcEx function."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Application-defined data to be passed to the callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the SetProp function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HANDLE If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is NULL. For an example, see Retrieving a Window Property. ",
    "remarks": "",
    "return_type": "HANDLE",
    "category": "Window Properties",
    "name": "GetProp",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose property list is to be searched."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR An atom that identifies a string. If this parameter is an atom, it must have been created by using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of the lpString parameter; the high-order word must be zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "An application-defined callback function used with the EnumProps function. The function receives property entries from a window's property list. The PROPENUMPROC type defines a pointer to this callback function. PropEnumProc is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL Return TRUE to continue the property list enumeration. Return FALSE to stop the property list enumeration. ",
    "remarks": "The following restrictions apply to this callback function: ",
    "return_type": "BOOL CALLBACK",
    "category": "Window Properties",
    "name": "PropEnumProc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose property list is being enumerated."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszString",
        "description": "Type: LPCTSTR The string component of a property list entry. This is the string that was specified, along with a data handle, when the property was added to the window's property list via a call to the SetProp function."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hData",
        "description": "Type: HANDLE A handle to the data. This handle is the data component of a property list entry."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Application-defined callback function used with the EnumPropsEx function. The function receives property entries from a window's property list. The PROPENUMPROCEX type defines a pointer to this callback function. PropEnumProcEx is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL Return TRUE to continue the property list enumeration. Return FALSE to stop the property list enumeration. ",
    "remarks": "The following restrictions apply to this callback function: ",
    "return_type": "BOOL CALLBACK",
    "category": "Window Properties",
    "name": "PropEnumProcEx",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose property list is being enumerated."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "lpszString",
        "description": "Type: LPTSTR The string component of a property list entry. This is the string that was specified, along with a data handle, when the property was added to the window's property list via a call to the SetProp function."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hData",
        "description": "Type: HANDLE A  handle to the data. This handle is the data component of a property list entry."
      },
      {
        "in_out": "_In_",
        "type": "ULONG_PTR",
        "name": "dwData",
        "description": "Type: ULONG_PTR Application-defined data. This is the value that was specified as the lParam parameter of the call to EnumPropsEx that initiated the enumeration."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HANDLE The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is NULL. ",
    "remarks": "The return value is the hData value that was passed to SetProp; it is an application-defined value. Note, this function only destroys the association between the data and the window. If appropriate, the application must free the data handles associated with entries removed from a property list. The application can remove only those properties it has added. It must not remove properties added by other applications or by the system itself. The RemoveProp function returns the data handle associated with the string so that the application can free the data associated with the handle. Starting with Windows Vista, RemoveProp is subject to the restrictions of User Interface Privilege Isolation (UIPI). A process can only call this function on a window belonging to a process of lesser or equal integrity level. When UIPI blocks property changes, GetLastError will return 5. For an example, see Deleting a Window Property. ",
    "return_type": "HANDLE",
    "category": "Window Properties",
    "name": "RemoveProp",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose property list is to be changed."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the GlobalAddAtom function. The atom, a 16-bit value, must be placed in the low-order word of lpString; the high-order word must be zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the data handle and string are added to the property list, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Before a window is destroyed (that is, before it returns from processing the WM_NCDESTROY message), an application must remove all entries it has added to the property list. The application must use the RemoveProp function to remove the entries. SetProp is subject to the restrictions of User Interface Privilege Isolation (UIPI). A process can only call this function on a window belonging to a process of lesser or equal integrity level. When UIPI blocks property changes, GetLastError will return 5. For an example, see Adding a Window Property. ",
    "return_type": "BOOL",
    "category": "Window Properties",
    "name": "SetProp",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose property list receives the new entry."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the GlobalAddAtom function. The atom must be placed in the low-order word of lpString; the high-order word must be zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hData",
        "description": "Type: HANDLE A handle to the data to be copied to the property list. The data handle can identify any value useful to the application."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]