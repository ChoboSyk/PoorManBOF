[
  {
    "n_arguments": 3,
    "description": "The  lineAccept function accepts the specified offered call. It can optionally send the specified user-user information to the calling party.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds, or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_INVALCALLSTATE, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_NOTOWNER, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED, LINEERR_USERUSERINFOTOOBIG. ",
    "remarks": "The  lineAccept function is used in telephony environments like Integrated Services Digital Network (ISDN) that allow alerting associated with incoming calls to be separate from the initial offering of the call. When a call comes in, it is first offered. For some small amount of time, the application may have the option to reject the call using  lineDrop, redirect the call to another station using  lineRedirect, answer the call using  lineAnswer, or accept the call using  lineAccept. After a call has been successfully accepted by an application, alerting begins at both the called and calling device and the call state typically transitions to accepted. Alerting is reported to the application by the  LINE_LINEDEVSTATE message with the ringing indication. The  lineAccept function may also be supported by non-ISDN service providers. The call state transition to accepted can be used by other applications as an indication that another application has claimed responsibility for the call and has presented the call to the user. The application has the option to send user-user information at the time of the accept. Even if user-user information is sent, there is no guarantee that the network will deliver this information to the calling party. An application should consult a line's device capabilities to determine whether call accept is available. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineAccept",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be accepted. The application must be an owner of the call. Call state of hCall must be offering."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsUserUserInfo",
        "description": "Pointer to a null-terminated string containing user-user information to be sent to the remote party as part of the call accept. This pointer can be left NULL if no user-user information is to be sent. User-user information is only sent if supported by the underlying network (see  LINEDEVCAPS). The protocol discriminator member for the user-user information, if required, should appear as the first byte of the buffer pointed to by lpsUserUserInfo, and must be accounted for in dwSize."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the user-user information in lpsUserUserInfo (including the null terminator), in bytes. If lpsUserUserInfo is NULL, no user-user information is sent to the calling party and dwSize is ignored."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineAddProvider function installs a new telephony service provider into the telephony system.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_INVALPARAM, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_NOMULTIPLEINSTANCE, LINEERR_OPERATIONFAILED. ",
    "remarks": "During this function call, TAPI checks to ensure that it can access the service provider by calling its  TSPI_providerInstall function; if this is unsuccessful (if the DLL or function cannot be found, or if  TSPI_providerInstall returns an error), the function fails and the provider is not added to the telephony system. If this succeeds, and the  Telephony system is active (one or more applications have called  lineInitialize or  lineInitializeEx), TAPI does not attempt to launch the newly-added service provider. Instead, in order to activate the new service provider, TAPI issues a message to restart Windows. When the activation succeeds, applications are informed of any new devices created by way of  LINE_CREATE or  PHONE_CREATE messages, or by a  LINE_LINEDEVSTATE message requesting reinitialization (if the application does not support the CREATE messages). This function copies no files\u00e2\u0080\u0094not the service provider DLL itself nor any supporting files; the application managing the addition of the provider must ensure that the provider is installed in a directory where it can be found by TAPI (for example, \\WINDOWS, \\WINDOWS\\SYSTEM, or elsewhere on the path). ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineAddProvider",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszProviderFilename",
        "description": "Pointer to a  null-terminated string containing the path of the service provider to be added."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window in which any dialog boxes that need to be displayed as part of the installation process (for example, by the service provider's  TSPI_providerInstall function) would be attached. Can be NULL to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwPermanentProviderID",
        "description": "Pointer to a variable that receives the permanent provider identifier of the newly installed service provider."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineAddToConference function adds the call specified by hConsultCall to the conference call specified by hConfCall.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds, or it is a negative error number if an error occurs. Possible return values are: LINEERR_CONFERENCEFULL, LINEERR_NOTOWNER, LINEERR_INVALCONFCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "If LINEERR_INVALCALLHANDLE is returned, the specified call handle for the added call is invalid; hConsultCall is a parent of another conference or already a participant in a conference; hConsultCall cannot be added for other reasons (such as, it must have been established using  lineSetupConference or  linePrepareAddToConference); or hConsultCall and hConfCall are calls on different open lines. The call handle of the added party remains valid after adding the call to a conference. Its state typically changes to conferenced while the state of the conference call typically becomes connected. Using  lineGetConfRelatedCalls, you can obtain a list of call handles that are part of the same conference call as the specified call. The specified call is either a conference call or a participant call in a conference call. New handles are generated for those calls for which the application does not already have handles, and the application is granted monitor privilege to those calls. The handle to an individual participating call can be used later to remove that party from the conference call using  lineRemoveFromConference. If  lineGetConfRelatedCalls is called immediately after  lineAddToConference, it may not return a complete list of related calls because TAPI waits to receive a  LINE_CALLSTATE message indicating that the call has entered LINECALLSTATE_CONFERENCED before it considers the call to actually be part of the conference (that is, the conferenced state is confirmed by the service provider). After the application has received the LINE_CALLSTATE message,  lineGetConfRelatedCalls returns complete information. The call states of the calls participating in a conference are not independent. For example, when dropping a conference call, all participating calls can automatically become idle. An application should consult the line's device capabilities to determine what form of conference removal is available. The application should track the LINE_CALLSTATE messages to determine what happened to the calls involved. The conference call is established either by  lineSetupConference or  lineCompleteTransfer. The call added to a conference is typically established using  lineSetupConference or  linePrepareAddToConference. Some switches can allow adding arbitrary calls to the conference, and such a call can have been set up using  lineMakeCall and be on (hard) hold. The application can examine the dwAddrCapFlags member of the  LINEADDRESSCAPS structure to determine the permitted operations. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineAddToConference",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hConfCall",
        "description": "Handle to the conference call. The application must be an owner of this call. Any monitoring (media, tones, digits) on a conference call applies only to the hConfCall, not to the individual participating calls. Call state of hConfCall must be onHoldPendingConference or onHold."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hConsultCall",
        "description": "Handle to the call to be added to the conference call. The application must be an owner of this call. This call cannot be a parent of another conference or a participant in any conference. Depending on the device capabilities indicated in  LINEADDRESSCAPS, the hConsultCall may not necessarily have been established using  lineSetupConference or  linePrepareAddToConference. The call state of hConsultCall must be connected, onHold, proceeding, or ringback. Many PBXs allow calls to be added to conferences before they are actually answered."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineAnswer function answers the specified offering call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INUSE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_USERUSERINFOTOOBIG, LINEERR_NOTOWNER. ",
    "remarks": "When a new call arrives, applications with an interest in the call are sent a  LINE_CALLSTATE message to provide the new call handle and to inform the application about the call's state and the privileges to the new call (such as monitor or owner). The application with owner privilege for the call can answer this call using  lineAnswer. After the call has been successfully answered, the call typically transitions to the connected state. Initially, only one application is given owner privilege to the incoming call. In some telephony environments (like ISDN), where user alerting is separate from call offering, the application can have the option to accept a call prior to answering or to reject or redirect the offering call. If a call comes in (is offered) at the time another call is already active, invoking  lineAnswer connects to the new call. The effect this has on the existing active call depends on the line's device capabilities. The first call can be unaffected, it can automatically be dropped, or it can automatically be placed on hold. The appropriate LINE_CALLSTATE messages report state transitions to the application about both calls. In a bridged situation, if a call is connected but in the LINECONNECTEDMODE_INACTIVE state, it can be joined using the  lineAnswer function. The application has the option to send user-user information at the time of the answer. Even if user-user information can be sent, there is no guarantee that the network will deliver this information to the calling party. An application should consult a line's device capabilities to determine whether sending user-user information upon answering the call is available. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineAnswer",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be answered. The application must be an owner of this call. The call state of hCall must be offering or accepted."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsUserUserInfo",
        "description": "Pointer to a null-terminated string containing user-user information to be sent to the remote party at the time the call is answered. This pointer can be left NULL if no user-user information is to be sent. User-user information is only sent if supported by the underlying network (see  LINEDEVCAPS). The protocol discriminator field for the user-user information, if required, should appear as the first byte of the buffer pointed to by lpsUserUserInfo, and must be accounted for in dwSize."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the user-user information in lpsUserUserInfo (including the null terminator), in bytes If lpsUserUserInfo is NULL, no user-user information is sent to the calling party and dwSize is ignored."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineBlindTransfer function performs a blind or single-step transfer of the specified call to the specified destination address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_INVALCOUNTRYCODE, LINEERR_INVALCALLSTATE, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONUNAVAIL, LINEERR_NOTOWNER, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALADDRESS, LINEERR_UNINITIALIZED, LINEERR_ADDRESSBLOCKED, LINEERR_OPERATIONFAILED. ",
    "remarks": "If LINEERR_INVALADDRESS is returned, no dialing occurs. Blind transfer differs from a consultation transfer in that no consultation call is made visible to the application. After the blind transfer successfully completes, the specified call is typically cleared from the application's line, and it transitions to the idle state. The application's call handle remains valid after the transfer has completed. The application must deallocate its handle using  lineDeallocateCall when it is no longer interested in the transferred call. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineBlindTransfer",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be transferred. The application must be an owner of this call. The call state of hCall must be connected."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Pointer to a null-terminated string identifying where the call is to be transferred to. The destination address uses the standard dialable number format."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCountryCode",
        "description": "Country or region code of the destination. This is used by the implementation to select the call progress protocols for the destination address. If a value of 0 is specified, a default call-progress protocol defined by the service provider is used."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineCallbackFunc function is a placeholder for the application-supplied function name.",
    "library": "",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "This callback function does not return a value. ",
    "remarks": "For information about parameter values passed to this function, see  Line Device Messages. All callbacks occur in the application's context. The callback function must reside in a DLL or application module. ",
    "return_type": "VOID FAR PASCAL",
    "category": "TAPI",
    "name": "lineCallbackFunc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "hDevice",
        "description": "Handle to either a line device or a call associated with the callback. The nature of this handle (line handle or call handle) can be determined by the context provided by dwMsg. Applications must use the DWORD type for this parameter because using the HANDLE type may generate an error."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMsg",
        "description": "Line or call device message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCallbackInstance",
        "description": "Callback instance data passed back to the application in the callback. This DWORD is not interpreted by TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam1",
        "description": "Parameter for the message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam2",
        "description": "Parameter for the message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam3",
        "description": "Parameter for the message."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineClose function closes the specified open line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "If an application calls  lineClose while it still has active calls on the opened line, the application's ownership of these calls is revoked. If the application was the sole owner of these calls, the calls are dropped as well. It is good programming practice for an application to dispose of the calls it owns on an opened line by explicitly relinquishing ownership and/or by dropping these calls prior to closing the line. If the line was closed successfully, a  LINE_LINEDEVSTATE message is sent to all applications that are monitoring the line status of open/close changes. Outstanding asynchronous replies are suppressed. Service providers may find it useful or necessary to forcibly reclaim line devices from an application that has the line open. This can be useful to prevent an application from monopolizing the line device for too long. If this happens, a LINE_CLOSE message is sent to the application, specifying the line handle of the line device that was closed. The  lineOpen function allocates resources to the invoking application, and applications can be prevented from opening a line if resources are unavailable. Therefore, an application that only occasionally uses a line device (such as for making outgoing calls) should close the line to free resources and allow other applications to open the line. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineClose",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device to be closed. After the line has been successfully closed, this handle is no longer valid."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineCompleteCall function specifies how a call that could not be connected normally should be completed instead. The network or switch may not be able to complete a call because network resources are busy or the remote station is busy or doesn't answer. The application can request that the call be completed in one of a number of ways.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_COMPLETIONOVERRUN, LINEERR_NOMEM, LINEERR_INVALCALLCOMPLMODE, LINEERR_NOTOWNER, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALMESSAGEID, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED. ",
    "remarks": "This function is considered complete when the request has been accepted by the network or switch; not when the request is fully completed in the way specified. After this function completes, the call typically transitions to idle. When the called station or network enters a state where the call can be completed as requested, the application is notified by a  LINE_CALLSTATE message with the call state equal to offering. The call's  LINECALLINFO record lists the reason for the call as CALLCOMPLETION and provides the completion identifier as well. It is possible to have multiple outstanding call completion requests; the maximum number is device dependent. The completion identifier is also used to refer to each individual request so requests can be canceled by calling  lineUncompleteCall. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineCompleteCall",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call whose completion is requested. The application must be an owner of the call. The call state of hCall must be busy or ringback."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwCompletionID",
        "description": "Pointer to a DWORD-sized memory location. The completion identifier is used to identify individual completion requests in progress. A completion identifier becomes invalid and can be reused after the request completes or after an outstanding request is canceled."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCompletionMode",
        "description": "Way in which the call is to be completed. This parameter uses one and only one of the  LINECALLCOMPLMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMessageID",
        "description": "Message that is to be sent when completing the call using LINECALLCOMPLMODE_MESSAGE. This identifier selects the message from a small number of predefined messages."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineCompleteTransfer function completes the transfer of the specified call to the party connected in the consultation call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_NOTOWNER, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCONSULTCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALTRANSFERMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "The LINE_REPLY message sent in response to a call to the  lineCompleteTransfer function is based on the status of the call specified by the hCall parameter. This operation completes the transfer of the original call, hCall, to the party currently connected by hConsultCall. The consultation call is typically dialed on the consultation call allocated as part of  lineSetupTransfer, but it can be any call to which the switch is capable of transferring hCall. The transfer request can be resolved either as a transfer or as a three-way conference call. When resolved as a transfer, the parties connected by hCall and hConsultCall are connected to each other, and both hCall and hConsultCall are typically cleared from the application's line and transition to the idle state. The application's call handle remains valid after the transfer has completed. The application must deallocate its handle with  lineDeallocateCall when it is no longer interested in the transferred call. When resolved as a conference, all three parties enter into a conference call. Both existing call handles remain valid but transition to the conferenced state. A conference call handle is created and returned, and it transitions to the connected state. If  lineGetConfRelatedCalls is called immediately after  lineCompleteTransfer with the result that the calls are conferenced,  lineGetConfRelatedCalls may not return a complete list of related calls. This is because TAPI waits to receive a  LINE_CALLSTATE message indicating that the call has entered LINECALLSTATE_CONFERENCED before it considers the call to actually be part of the conference. That is, it waits for the service provider to confirm the conferenced state. After the application has received the LINE_CALLSTATE message,  lineGetConfRelatedCalls returns complete information. It can also be possible to perform a blind transfer of a call using  lineBlindTransfer. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineCompleteTransfer",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be transferred. The application must be an owner of this call. The call state of hCall must be onHold or onHoldPendingTransfer."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hConsultCall",
        "description": "Handle to the call that represents a connection with the destination of the transfer. The application must be an owner of this call. The call state of hConsultCall must be connected, ringback, busy, or proceeding."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConfCall",
        "description": "Pointer to a memory location where an hCall handle can be returned. If dwTransferMode is LINETRANSFERMODE_CONFERENCE, the newly created conference call is returned in lphConfCall and the application becomes the sole owner of the conference call. Otherwise, this parameter is ignored by TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTransferMode",
        "description": "How the initiated transfer request is to be resolved. This parameter uses one of the  LINETRANSFERMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineConfigDialog function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NOMEM, LINEERR_INUSE, LINEERR_OPERATIONFAILED, LINEERR_INVALDEVICECLASS, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPARAM, LINEERR_UNINITIALIZED, LINEERR_INVALPOINTER, LINEERR_OPERATIONUNAVAIL, LINEERR_NODEVICE. ",
    "remarks": "The  lineConfigDialog function causes the service provider to display a modal dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line specified by dwDeviceID. The lpszDeviceClass parameter allows the application to select a specific subscreen of configuration information applicable to the device class in which the user is interested; the permitted strings are the same as for  lineGetID. For example, if the line supports the Comm API, passing \"COMM\" as lpszDeviceClass causes the provider to display the parameters related specifically to Comm (or, at least, start at the corresponding point in a multilevel configuration dialog box chain, so the user doesn't have to \"dig\" to find the parameters of interest). The lpszDeviceClass parameter would be \"tapi/line\" , \"\", or NULL to cause the provider to display the highest level configuration for the line. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineConfigDialog",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be configured."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which the dialog box is to be attached. Can be NULL to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that identifies a device class name. This device class allows the application to select a specific subscreen of configuration information applicable to that device class. This parameter is optional and can be left NULL or empty, in which case the highest level configuration is selected."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineConfigDialogEdit function causes the provider of the specified line device to display a dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_OPERATIONFAILED, LINEERR_INVALDEVICECLASS, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPARAM, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NODRIVER, LINEERR_OPERATIONUNAVAIL, LINEERR_NOMEM, LINEERR_NODEVICE. ",
    "remarks": "If LINEERR_STRUCTURETOOSMALL is returned, the dwTotalSize member of the  VARSTRING structure pointed to by lpDeviceConfigOut does not specify enough memory to contain the entire configuration structure. The dwNeededSize member has been set to the amount required. To the extent that user entries were reflected in information that could not be returned due to insufficient space, those edits are lost; applications should therefore allocate the maximum amount of space that may be needed by the device class to return its configuration structure (for more information, see  TAPI Device Classes). The  lineConfigDialogEdit function causes the service provider to display a modal dialog box (attached to hwndOwner of the application) to allow the user to configure parameters related to the line specified by dwDeviceID. The lpszDeviceClass parameter allows the application to select a specific subscreen of configuration information applicable to the device class in which the user is interested; the permitted strings are the same as for  lineGetID. For example, if the line supports the Comm API, passing \"COMM\" as lpszDeviceClass causes the provider to display the parameters related specifically to Comm (or, at least, start at the corresponding point in a multilevel configuration dialog box chain, so the user doesn't have to \"dig\" to find the parameters of interest). The lpszDeviceClass parameter would be \"tapi/line\" , \"\", or NULL to cause the provider to display the highest level configuration for the line. The difference between this function and  lineConfigDialog is the source of the parameters to edit and the result of the editing. In  lineConfigDialog, the parameters edited are those currently in use on the device (or set for use on the next call), and any changes made have (to the maximum extent possible) an immediate impact on any active connection; also, the application must use  lineGetDevConfig to fetch the result of parameter changes from  lineConfigDialog. With  lineConfigDialogEdit, the parameters to edit are passed in from the application, and the results are returned to the application, with no impact on active connections; the results of the editing are returned with this function, and the application does not need to call  lineGetDevConfig. Thus,  lineConfigDialogEdit permits an application to provide the ability for the user to set up parameters for future calls without having an impact on any active call. However, the output of this function can be passed to  lineSetDevConfig to affect the current call or next call. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineConfigDialogEdit",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be configured."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which the dialog box is to be attached. Can be NULL to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that identifies a device class name. This device class allows the application to select a specific subscreen of configuration information applicable to that device class. This parameter is optional and can be left NULL or empty, in which case the highest level configuration is selected."
      },
      {
        "in_out": "LPVOID",
        "type": "const",
        "name": "lpDeviceConfigIn",
        "description": "Pointer to the opaque configuration data structure that was returned by  lineGetDevConfig (or a previous invocation of  lineConfigDialogEdit) in the variable portion of the  VARSTRING structure."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Number of bytes in the structure pointed to by lpDeviceConfigIn. This value is returned in the dwStringSize member in the  VARSTRING structure returned by  lineGetDevConfig or a previous invocation of  lineConfigDialogEdit."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpDeviceConfigOut",
        "description": "Pointer to the memory location of type  VARSTRING where the device configuration structure is returned. Upon successful completion of the request, this location is filled with the device configuration. The dwStringFormat member in the  VARSTRING structure is set to STRINGFORMAT_BINARY. Prior to calling  lineGetDevConfig (or a future invocation of  lineConfigDialogEdit), the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineConfigProvider function causes a service provider to display its configuration dialog box.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_NOMEM, LINEERR_INVALPARAM, LINEERR_OPERATIONFAILED. ",
    "remarks": "This is basically a straight pass-through to  TSPI_providerConfig. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineConfigProvider",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which the configuration dialog box (displayed by  TSPI_providerConfig) is attached. Can be NULL to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPermanentProviderID",
        "description": "Permanent provider identifier of the service provider to be configured."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineDeallocateCall function deallocates the specified call handle.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values include: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "The deallocation does not affect the call state of the physical call. It does, however, release internal resources related to the call. In API versions, earlier than 2.0, if the application is the sole owner of a call and the call is not in the idle state, LINEERR_INVALCALLSTATE is returned. In this case, the application can first drop the call using  lineDrop and deallocate its call handle afterward. An application that has monitor privilege for a call can always deallocate its handle for the call. In API versions 2.0 or later, the sole owner of the call can deallocate its handle even though the call is not in the idle state. This enables distributed control of the call in a client/server environment. In API versions earlier than 2.0, when the  lineDeallocateCall function deallocates a call handle, it also suspends further processing of any outstanding LINE_REPLY messages for the call. An application must be designed not to wait indefinitely for LINE_REPLY messages for each corresponding call to an asynchronous function if it also uses the  lineDeallocateCall function to deallocate handles. In API versions 2.0 or later,  lineDeallocateCall does not suspend outstanding LINE_REPLY messages; every asynchronous function that returns a dwRequestID to the application always results in the delivery of the associated LINE_REPLY message unless the application calls  lineShutdown. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineDeallocateCall",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "The call handle to be deallocated. An application with monitoring privileges for a call can always deallocate its handle for that call. An application with owner privilege for a call can deallocate its handle unless it is the sole owner of the call and the call is not in the idle state. The call handle is no longer valid after it has been deallocated."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineDevSpecific function enables service providers to provide access to features not offered by other TAPI functions. The meaning of the extensions are device specific, and taking advantage of these extensions requires the application to be fully aware of them.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds, or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. Additional return values are device specific. ",
    "remarks": "This operation is part of the Extended Telephony services. It provides access to a device-specific feature without defining its meaning. This operation is only available if the application has successfully negotiated a device-specific extension version. This function provides a generic parameter profile. The interpretation of the parameter structure is device specific. Whether dwAddressID and/or hCall are expected to be valid is device specific. If specified, they must belong to hLine. Indications and replies sent back the application that are device specific should use the  LINE_DEVSPECIFIC message. A service provider can provide access to device-specific functions by defining parameters for use with this function. Applications that want to make use of these device-specific extensions should consult the device-specific (in this case, vendor-specific) documentation that describes what extensions are defined. Typically, an application that relies on these device-specific extensions is not able to work with other service provider environments. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineDevSpecific",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to a line device. This parameter is required."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address identifier on the given line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to a call. This parameter is optional, but if it is specified, the call it represents must belong to the hLine line device. The call state of hCall is device specific."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpParams",
        "description": "Pointer to a memory area used to hold a parameter block. The format of this parameter block is device specific and its contents are passed by TAPI to or from the service provider."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the parameter block area, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineDevSpecificFeature function enables service providers to provide access to features not offered by other TAPI functions. The meaning of these extensions are device specific, and taking advantage of these extensions requires the application to be fully aware of them.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALFEATURE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. Additional return values are device specific. ",
    "remarks": "This operation is part of the Extended Telephony services. It provides access to a device-specific feature without defining its meaning. This operation is only available if the application has successfully negotiated a device-specific extension version. This function provides the application with phone feature-button emulation capabilities. When an application invokes this operation, it specifies the equivalent of a button-press event. This method of invoking features is device dependent, as TAPI does not define their meaning. Typically, an application that relies on these device-specific extensions does not work with other service provider environments. The structure pointed to by lpParams should not contain any pointers because they would not be properly translated (thunked) when running a 16-bit application in a 32-bit version of TAPI and vice versa. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineDevSpecificFeature",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFeature",
        "description": "Feature to invoke on the line device. This parameter uses the  PHONEBUTTONFUNCTION_ Constants."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpParams",
        "description": "Pointer to a memory area used to hold a feature-dependent parameter block. The format of this parameter block is device specific and its contents are passed through by TAPI to or from the service provider."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the buffer, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineDial function dials the specified dialable number on the specified call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_ADDRESSBLOCKED, LINEERR_INVALPOINTER, LINEERR_DIALBILLING, LINEERR_NOMEM, LINEERR_DIALDIALTONE, LINEERR_NOTOWNER, LINEERR_DIALPROMPT, LINEERR_OPERATIONFAILED, LINEERR_DIALQUIET, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_UNINITIALIZED, LINEERR_INVALCOUNTRYCODE. ",
    "remarks": "If LINEERR_INVALADDRESS is returned, no dialing has been done. If LINEERR_DIALBILLING, LINEERR_DIALQUIET, LINEERR_DIALDIALTONE, or LINEERR_DIALPROMPT is returned, none of the actions otherwise performed by  lineDial have occurred. For example, none of the dialable addresses prior to the offending character has been dialed, no hookswitch state has changed, and so on. The  lineDial function is used for dialing on an existing call appearance. For example, after a call has been set up for transfer or conference, a consultation call is automatically allocated, and the  lineDial function would be used to perform the dialing of this consultation call. The  lineDial function can be invoked multiple times in the course of multistage dialing, if the line's device capabilities allow it. Also, multiple addresses can be provided in a single dial string separated by CRLF. Service providers that provide inverse multiplexing can establish individual physical calls with each of the addresses and can return a single call handle to the aggregate of all calls to the application. All addresses would use the same country or region code. Dialing is considered complete after the address has been passed to the service provider; not after the call is finally connected. Service providers that provide inverse multiplexing can allow multiple addresses to be provided at once. The service provider sends LINE_CALLSTATE messages to the application to inform it about the progress of the call. To abort a call attempt while a call is being established, the invoking application should use  lineDrop. An application can set the lpszDestAddress parameter of the  lineDial function to the address of an empty string to indicate that dialing is complete, but only if the previous calls to the  lineMakeCall and  lineDial functions have had the strings specified by lpszDestAddress terminated with semicolons. The lineDial function can also be used in partial dialing.  To initiate a call using partial dialing, the application calls lineMakeCall and specifies a partial dialing string. A partial dial string is any dial string  terminated by a semicolon.  The call will typically transition to LINECALLSTATE_DIALING after which lineDial can be called to specify  more dialing strings, each terminated by a semicolon.  Dialing is completed by calling lineDial with a dial string that is not terminated with a semicolon (such as an empty string).  This technique allows applications to perform interactive partial dialing with the user  or enable  more sophisticated dialing than a TSP may be capable of. If a null destination string, or an empty string terminated with a semicolon (\";\") is entered in   lineMakeCall the application transitions to LINE_CALLSTATE_DIALTONE. The  lineDial function can  be called in this state to enter a single dial string  or  multiple partial dial strings, each separated by a semicolon. The application transitions to the  LINECALLSTATE_DIALING state after the first digit is entered. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineDial",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on which a number is to be dialed. The application must be an owner of the call. The call state of hCall can be any state except idle and disconnected."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Destination to be dialed using the standard dialable number format."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCountryCode",
        "description": "Country or region code of the destination. This is used by the implementation to select the call progress protocols for the destination address. If a value of 0 is specified, a service provider-defined default call progress protocol is used."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineDrop function drops or disconnects the specified call. The application has the option to specify user-user information to be transmitted as part of the call disconnect.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_NOTOWNER, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_USERUSERINFOTOOBIG, LINEERR_INVALCALLSTATE, LINEERR_UNINITIALIZED. ",
    "remarks": "When invoking  lineDrop, related calls can sometimes be affected as well. For example, dropping a conference call can drop all individual participating calls.  LINE_CALLSTATE messages are sent to the application for all calls whose call state is affected. A dropped call typically transitions to the idle state. Invoking  lineDrop on a call in the offering state rejects the call. Not all telephone networks provide this capability. A call in the onholdpending state typically reverts to the connected state. When dropping the consultation call to the third party for a conference call or when removing the third party in a previously established conference call, the provider (and switch) can release the conference bridge and revert the call back to a normal two-party call. If this is the case, hConfCall transitions to the idle state, and the only remaining participating call transitions to the connected state. Some switches automatically \"unhold\" the other call. The application has the option to send user-user information at the time of the drop. Even if user-user information can be sent, there is no guarantee that the network will deliver this information to the remote party. In various bridged or party-line configurations when multiple parties are on the call,  lineDrop may not actually clear the call. For example, in a bridged situation, a  lineDrop operation may not actually drop the call because the status of other stations on the call may govern; instead, the call may simply be changed to the LINECONNECTEDMODE_INACTIVE mode if it remains connected at other stations. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineDrop",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be dropped. The application must be an owner of the call. The call state of hCall can be any state except idle."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsUserUserInfo",
        "description": "Pointer to a string containing user-user information to be sent to the remote party as part of the call disconnect. This pointer can be left NULL if no user-user information is to be sent. User-user information is only sent if supported by the underlying network (see  LINEDEVCAPS). The protocol discriminator field for the user-user information, if required, should appear as the first byte of the buffer pointed to by lpsUserUserInfo, and must be accounted for in dwSize."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the user-user information in lpsUserUserInfo, in bytes. If lpsUserUserInfo is NULL, no user-user information is sent to the calling party and dwSize is ignored."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  lineForward function forwards calls destined for the specified address on the specified line, according to the specified forwarding instructions. When an originating address (dwAddressID) is forwarded, the specified incoming calls for that address are deflected to the other number by the switch. This function provides a combination of forward and do-not-disturb features. This function can also cancel forwarding currently in effect.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_NOMEM, LINEERR_INVALADDRESSID, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALADDRESS, LINEERR_OPERATIONFAILED, LINEERR_INVALCOUNTRYCODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPARAM, LINEERR_UNINITIALIZED. ",
    "remarks": "A successful forwarding indicates only that the request has been accepted by the service provider, not that forwarding is set up at the switch. A  LINE_ADDRESSSTATE (forwarding) message provides confirmation for forwarding having been set up at the switch. Forwarding of the address(es) remains in effect until this function is called again. The most recent forwarding list replaces the old one. Forwarding can be canceled by specifying a NULL pointer as lpForwardList. If a NULL destination address is specified for an entry in the forwarding list, the operation acts as a do-not-disturb. Forwarding status of an address can also be affected externally; for example, by administrative actions at the switch or by a user from another station. It may not be possible for the service provider to be aware of this state change, and it may not be able to keep in synchronization with the forwarding state known to the switch. Because a service provider may not know the forwarding state of the address \"for sure\" (that is, it may have been forwarded or unforwarded in an unknown way),  lineForward succeeds unless it fails to set the new forwarding instructions. In other words, a request that all forwarding be canceled at a time that there is no forwarding in effect is successful. This is because there is no \"unforwarding\"\u00e2\u0080\u0094you can only change the previous set of forwarding instructions. The success or failure of this operation does not depend on the previous set of forwarding instructions, and the same is true when setting different forwarding instructions. The provider should \"unforward everything\" prior to setting the new forwarding instructions. Because this can take time in analog telephony environments, a provider may also want to compare the current forwarding with the new one, and only issue instructions to the switch to get to the final state (leaving unchanged forwarding unaffected). Invoking  lineForward when  LINEFORWARDLIST has dwNumEntries set to zero has the same effect as providing a NULLlpForwardList parameter. It cancels all forwarding currently in effect. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineForward",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "bAllAddresses",
        "description": "Specifies whether all originating addresses on the line or just the one specified is to be forwarded. If TRUE, all addresses on the line are forwarded and dwAddressID is ignored; if FALSE, only the address specified as dwAddressID is forwarded."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the specified line whose incoming calls are to be forwarded. This parameter is ignored if bAllAddresses is TRUE.     An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "LPLINEFORWARDLIST",
        "type": "const",
        "name": "lpForwardList",
        "description": "Pointer to a variably sized data structure that describes the specific forwarding instructions, of type  LINEFORWARDLIST."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumRingsNoAnswer",
        "description": "Number of rings before a call is considered a \"no answer.\" If dwNumRingsNoAnswer is out of range, the actual value is set to the nearest value in the allowable range."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConsultCall",
        "description": "Pointer to an HCALL location. In some telephony environments, this location is loaded with a handle to a consultation call that is used to consult the party that is being forwarded to, and the application becomes the initial sole owner of this call. This pointer must be valid even in environments where call forwarding does not require a consultation call. This handle is set to NULL if no consultation call is created."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a structure of type  LINECALLPARAMS. This pointer is ignored unless  lineForward requires the establishment of a call to the forwarding destination (and lphConsultCall is returned, in which case lpCallParams is optional). If NULL, default call parameters are used. Otherwise, the specified call parameters are used for establishing hConsultCall."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  lineGatherDigits function initiates the buffered gathering of digits on the specified call. The application specifies a buffer in which to place the digits and the maximum number of digits to be collected.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_NOMEM, LINEERR_INVALCALLSTATE, LINEERR_NOTOWNER, LINEERR_INVALDIGITMODE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALDIGITS, LINEERR_OPERATIONFAILED, LINEERR_INVALPARAM, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED. ",
    "remarks": "Digit collection is terminated when the requested number of digits has been collected. It is also terminated when one of the digits detected matches a digit in szTerminationDigits before the specified number of digits has been collected. The detected termination digit is also placed in the buffer and the partial buffer is returned. Another way of canceling digit collection occurs when one of the timeouts expires. The dwFirstDigitTimeout expires if the first digit is not received in this time period. The dwInterDigitTimout expires if the second, third, (and so forth) digit is not received within that time period from the previously detected digit, and a partial buffer is returned. A fourth method for terminating digit collection is by calling this function again while collection is in progress. The old collection session is terminated, any digits collected up to that point are copied to the buffer supplied from the previous call to this function, and the buffer is delivered when the  LINE_GATHERDIGITS message is sent to the application. The mechanism for terminating digit gathering without initiating another gathering of the digits is to invoke this function with lpsDigits equal to NULL. This function is considered successful if digit collection has been correctly initiated, not if digit collection has terminated. In all cases where a partial buffer is returned, valid digits (if any) are followed by a NULL character. Although this function can be invoked in any call state, digits can typically only be gathered while the call is in the connected state. The message LINE_GATHERDIGITS is sent only to the application that initiated the request. It is also sent when partial buffers are returned because of timeouts or matching termination digits, or when the request is canceled by another  lineGatherDigits request on the call. Only one gather-digits request can be active on a call at any given time across all applications that are owners of the call. Given the asynchronous behavior of the operation, an application that issues multiple  lineGatherDigits requests in quick succession may be able to do so and receive several LINE_GATHERDIGITS messages later. While this would be unusual application behavior, the application is able to count the number of these messages to allow cancel messages to be matched with the earlier requests. In any case, only the most recent request should be assumed to be valid. An application can use  lineMonitorDigits to enable or disable unbuffered digit detection. Each time a digit is detected in this fashion, a  LINE_MONITORDIGITS message is sent to the application. Both buffered and unbuffered digit detection can be simultaneously enabled for the same call. Gathering of digits on a conference call applies only to the hConfCall, not to the individual participating calls. If the  lineGatherDigits function is used to cancel a previous request to gather digits, the function copies any digits collected up to that point to the buffer specified in the original function call. The function then sends a LINE_GATHERDIGITS message to the application, regardless of whether the lpszDigits parameter in the second call specifies a NULL or different address. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGatherDigits",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on which digits are to be gathered. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDigitModes",
        "description": "Digit modes to be monitored. This parameter uses one or more of the  LINEDIGITMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPSTR",
        "name": "lpsDigits",
        "description": "Pointer to the buffer where detected digits are to be stored as text characters. Digits may not show up in the buffer one at a time as they are collected. Only after a  LINE_GATHERDIGITS message is received should the content of the buffer be assumed to be valid. If lpsDigits is NULL, the digit gathering currently in progress on the call is terminated and dwNumDigits is ignored. Otherwise, lpsDigits is assumed to have room for dwNumDigits digits."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumDigits",
        "description": "Number of digits to be collected before a LINE_GATHERDIGITS message is sent to the application. The dwNumDigits parameter is ignored when lpsDigits is NULL. This function fails if dwNumDigits is zero."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszTerminationDigits",
        "description": "Null-terminated string of termination digits as text characters. If one of the digits in the string is detected, that termination digit is appended to the buffer, digit collection is terminated, and the  LINE_GATHERDIGITS message is sent to the application.     The list of valid characters is dependent on the constant provided in dwDigitModes. For a list of the valid characters for each possible mode, see  LINEDIGITMODE_ Constants. If this pointer is NULL, or if it points to an empty string, the function behaves as though no termination digits were supplied."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFirstDigitTimeout",
        "description": "Time duration in milliseconds in which the first digit is expected. If the first digit is not received in this timeframe, digit collection is aborted and a  LINE_GATHERDIGITS message is sent to the application. The buffer only contains the NULL character, indicating that no digits were received and the first digit timeout terminated digit gathering. The call's line-device capabilities specify the valid range for this parameter or indicate that timeouts are not supported."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInterDigitTimeout",
        "description": "Maximum time duration in milliseconds between consecutive digits. If no digit is received in this timeframe, digit collection is aborted and a LINE_GATHERDIGITS message is sent to the application. The buffer only contains the digits collected up to this point followed by a NULL character, indicating that an interdigit timeout terminated digit gathering. The call's line-device capabilities specify the valid range for this parameter or indicate that timeouts are not supported."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineGenerateDigits function initiates the generation of the specified digits on the specified call as inband tones using the specified signaling mode. Calling this function with a NULL value for lpszDigits aborts any digit generation currently in progress. Invoking  lineGenerateDigits or  lineGenerateTone while digit generation is in progress aborts the current digit generation or tone generation and initiates the generation of the most recently specified digits or tone.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_NOTOWNER, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALDIGITMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "The  lineGenerateDigits function is considered to have completed successfully when the digit generation has been successfully initiated, not when all digits have been generated. In contrast to  lineDial, which dials digits in a network-dependent fashion,  lineGenerateDigits guarantees to produce the digits as inband tones over the voice channel using DTMF or hookswitch dial pulses when using pulse. The  lineGenerateDigits function is generally not suitable for making calls or dialing. It is intended for end-to-end signaling over an established call. After all digits in lpszDigits have been generated, or after digit generation has been aborted or canceled, a  LINE_GENERATE message is sent to the application. Only one inband generation request (tone generation or digit generation) is allowed to be in progress per call across all applications that are owners of the call. Digit generation on a call is canceled by initiating either another digit generation request or a tone generation request. To cancel the current digit generation, the application can invoke  lineGenerateDigits and specify NULL for the lpszDigits parameter. Depending on the service provider and hardware, the application can monitor the digits it generates itself. If that is not desired, the application can disable digit monitoring while generating digits. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGenerateDigits",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The application must be an owner of the call. Call state of hCall can be any state. TAPI does not impose any callstate requirements, however some Tapi Service Providers may require that the hCall be in the LINECALLSTATE_CONNECTED state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDigitMode",
        "description": "Format to be used for signaling these digits. Be aware that dwDigitMode can only have a single flag set. This parameter uses one of the  LINEDIGITMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDigits",
        "description": "Pointer to a null-terminated character buffer that contains the digits to be generated. Valid characters are those specified for the  LINEDIGITMODE_ Constants provided in dwDigitModes.     In addition, the comma (,)  is also a valid character. A comma injects an extra delay between the signaling of the previous and next digits it separates. The duration of this pause is configuration defined, and the line device capabilities indicate this duration. Multiple commas can be used to inject longer pauses. Invalid digits are ignored during the generation, rather than being reported as errors. The exclamation (!) is a valid character. This character causes a \"hookflash\" operation, as described for  dialable addresses."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDuration",
        "description": "Both the duration in milliseconds of DTMF digits and pulse and DTMF inter-digit spacing. A value of 0 uses a default value. The dwDuration parameter must be within the range specified by MinDialParams and MaxDialParams in  LINEDEVCAPS. If out of range, the actual value is set to the nearest value in the range."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineGenerateTone function generates the specified inband tone over the specified call. Invoking this function with a zero for dwToneMode aborts the tone generation currently in progress on the specified call. Invoking  lineGenerateTone or  lineGenerateDigits while tone generation is in progress aborts the current tone generation or digit generation and initiates the generation of the newly specified tone or digits.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_NOTOWNER, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALPOINTER, LINEERR_OPERATIONFAILED, LINEERR_INVALTONEMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALTONE, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "The  lineGenerateTone function is considered to have completed successfully when the tone generation has been successfully initiated, not when the generation of the tone is finished. The function allows the inband generation of several predefined tones, such as ringback, busy tones, and beep. It also allows for the fabrication of custom tones by specifying their component frequencies, cadence, and volume. Because these tones are generated as inband tones, the call would typically have to be in the connected state for tone generation to be effective. When the generation of the tone is complete, or when tone generation is canceled, a LINE_GENERATE message is sent to the application. Only one inband generation request (tone generation or digit generation) is allowed to be in progress per call across all applications that are owners of the call. This implies that if tone generation is currently in progress on a call, invoking  lineGenerateDigits cancels the tone generation. If the LINEERR_INVALPOINTER error value is returned, the specified lpTones parameter is invalid or the value specified by the dwNumTones parameter is too large. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGenerateTone",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on which a tone is to be generated. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwToneMode",
        "description": "Defines the tone to be generated. Tones can be either standard or custom. A custom tone is composed of a set of arbitrary frequencies. A small number of standard tones are predefined. The duration of the tone is specified with dwDuration for both standard and custom tones. The dwToneMode parameter can only have one bit set. If no bits are set (the value 0 is passed), tone generation is canceled. This parameter uses one of the  LINETONEMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDuration",
        "description": "Duration in milliseconds during which the tone should be sustained. A value of 0 for dwDuration uses a default duration for the specified tone. Default values are:     CUSTOM: The tone is sustained until it is shut off, usually by user interaction or an equipment time-out. RINGBACK: The tone is sustained until it is shut off, usually by user interaction or an equipment time-out. BUSY: The tone is sustained until it is shut off, usually by user interaction or an equipment time-out. BEEP: The tone is sustained until it is shut off, usually by user interaction or an equipment time-out. BILLING: Fixed (single cycle)."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumTones",
        "description": "Number of entries in the lpTones array. This parameter is ignored if dwToneMode is not equal to CUSTOM."
      },
      {
        "in_out": "LPLINEGENERATETONE",
        "type": "const",
        "name": "lpTones",
        "description": "Pointer to a  LINEGENERATETONE array that specifies the tone's components. This parameter is ignored for standard  LINETONEMODE_ Constants tones such as LINETONEMODE_BUSY. If lpTones is a multifrequency tone, the various tones are played simultaneously."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineGetAddressCaps function queries the specified address on the specified line device to determine its telephony capabilities.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NOMEM, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_OPERATIONFAILED, LINEERR_INCOMPATIBLEEXTVERSION, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALADDRESSID, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALAPPHANDLE, LINEERR_UNINITIALIZED, LINEERR_INVALPOINTER, LINEERR_OPERATIONUNAVAIL, LINEERR_NODRIVER, LINEERR_NODEVICE. ",
    "remarks": "Valid address identifiers range from zero to one less than the number of addresses returned by  lineGetDevCaps. The version number to be supplied is the version number that was returned as part of the line's device capabilities by  lineGetDevCaps. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAddressCaps",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Line device containing the address to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given line device whose capabilities are to be queried. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Version number of the Telephony API to be used. The high-order word contains the major version number; the low-order word contains the minor version number. This number is obtained by  lineNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtVersion",
        "description": "Version number of the service provider-specific extensions to be used. This number can be set to zero if no device-specific extensions are to be used. Otherwise, the high-order word contains the major version number; and the low-order word contains the minor version number."
      },
      {
        "in_out": "",
        "type": "LPLINEADDRESSCAPS",
        "name": "lpAddressCaps",
        "description": "Pointer to a variably sized structure of type  LINEADDRESSCAPS. Upon successful completion of the request, this structure is filled with address capabilities information. Prior to calling  lineGetAddressCaps, the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineGetAddressID function returns the address identifier associated with an address in a different format on the specified line.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALADDRESSMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALADDRESS, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "The  lineGetAddressID function is used to map a phone number (address) assigned to a line device back to its dwAddressID in the range zero to the number of addresses minus one returned in the line's device capabilities. The  lineMakeCall function allows the application to make a call by specifying a line handle and an address on the line. The address can be specified as a dwAddressID, as a phone number, or as a device-specific name or identifier. Using a phone number can be practical in environments where a single line is assigned multiple addresses. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAddressID",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAddressID",
        "description": "Pointer to a DWORD-sized memory location where the address identifier is returned. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressMode",
        "description": "Address mode of the address contained in lpsAddress. This parameter uses one and only one of the  LINEADDRESSMODE_ Constants. You must specify LINEADDRESSMODE_DIALABLEADDR."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsAddress",
        "description": "Pointer to a data structure holding the address assigned to the specified line device. The format of the address is determined by dwAddressMode. Because the only valid value is LINEADDRESSMODE_DIALABLEADDR, lpsAddress uses the common dialable number format and is null-terminated."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size, in bytes, of the address contained in lpsAddress. The size of the string must include the null terminator."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAddressStatus function allows an application to query the specified address for its current status.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_OPERATIONUNAVAIL, LINEERR_OPERATIONFAILED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAddressStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given open line device. This is the address to be queried. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPLINEADDRESSSTATUS",
        "name": "lpAddressStatus",
        "description": "Pointer to a variably sized data structure of type  LINEADDRESSSTATUS. Prior to calling  lineGetAddressStatus, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineGetAppPriority function enables an application to determine whether or not it is in the handoff priority list for a particular media mode or Assisted Telephony request mode and, if so, its position in the priority list.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_INVALREQUESTMODE, LINEERR_INVALAPPNAME, LINEERR_NOMEM, LINEERR_INVALMEDIAMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL. ",
    "remarks": "If LINEERR_INVALMEDIAMODE is returned, the value specified in dwMediaMode is not zero, not a valid extended media mode, and not one of the  LINEMEDIAMODE_ Constants, or more than one bit is on in the parameter value. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAppPriority",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAppFilename",
        "description": "A pointer to a string that contains the application executable module file name, without directory data. In API version 2.0 or later, the parameter can be in long file name format, of which the 8.3 file name format is a proper subset. Long file names, unlike 8.3 file names, are case preserving. Neither file name format is case sensitive. For more information, see  File Name Conventions. In API versions earlier than 2.0, the parameter must specify a file name in the 8.3 format; long file names cannot be used."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaMode",
        "description": "A media mode for which the priority data is to be obtained. The value can be one of the  LINEMEDIAMODE_ Constants; only a single bit can be on. The value 0 should be used if verifying application priority for Assisted Telephony requests."
      },
      {
        "in_out": "",
        "type": "LPLINEEXTENSIONID",
        "name": "lpExtensionID",
        "description": "A pointer to structure of type  LINEEXTENSIONID. This parameter is ignored."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRequestMode",
        "description": "The conditions for this parameter are, if the dwMediaMode parameter is zero, this parameter specifies the Assisted Telephony request mode for which priority is to be checked. It must be LINEREQUESTMODE_MAKECALL. This parameter is ignored if dwMediaMode is non-zero."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpExtensionName",
        "description": "This parameter is ignored."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwPriority",
        "description": "A pointer to a DWORD-size memory location into which TAPI writes the priority of the application for the specified media or request mode. ..."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetCallInfo function enables an application to obtain fixed information about the specified call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "A separate  LINECALLINFO structure exists for every incoming or outgoing call. The structure contains primarily fixed information about the call. An application would typically be interested in checking this information when it receives its handle for a call by the  LINE_CALLSTATE message, or each time it receives notification by a  LINE_CALLINFO message that parts of the call information structure have changed. These messages supply the handle for the call as a parameter. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetCallInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be queried. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "LPLINECALLINFO",
        "name": "lpCallInfo",
        "description": "Pointer to a variably sized data structure of type  LINECALLINFO. Upon successful completion of the request, this structure is filled with call-related information. Prior to calling  lineGetCallInfo, the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetCallStatus function returns the current status of the specified call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "The  lineGetCallStatus function returns the dynamic status of a call, whereas  lineGetCallInfo returns primarily static information about a call. Call status information includes the current call state, detailed mode information related to the call while in this state (if any), as well as a list of the available API functions the application can invoke on the call while the call is in this state. An application would typically be interested in requesting this information when it receives notification about a call state change by the LINE_CALLSTATE message. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetCallStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be queried. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "LPLINECALLSTATUS",
        "name": "lpCallStatus",
        "description": "Pointer to a variably sized data structure of type  LINECALLSTATUS. Upon successful completion of the request, this structure is filled with call status information. Prior to calling  lineGetCallStatus, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetConfRelatedCalls function returns a list of call handles that are part of the same conference call as the specified call. The specified call is either a conference call or a participant call in a conference call. New handles are generated for those calls for which the application does not already have handles, and the application is granted monitor privilege to those calls.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_NOCONFERENCE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "The specified call can either be a conference call handle or a handle to a participant call. For example, a consultation call that has not yet been added to a conference call is not part of a conference. The first entry in the list that is returned is the conference call handle, the other handles are all the participant calls. The specified call is always one of the calls returned in the list. Calls in the list to which the application does not already have a call handle are assigned monitor privilege; privileges to calls for which the application already has handles are unchanged. The application can use  lineSetCallPrivilege to change the privilege of the call. If  lineGetConfRelatedCalls is called immediately after a call is added to a conference using  lineCompleteTransfer,  lineGetConfRelatedCalls may not return a complete list of related calls because TAPI waits to receive a  LINE_CALLSTATE message indicating that the call has entered LINECALLSTATE_CONFERENCED before it considers the call to actually be part of the conference (that is, the conferenced state is confirmed by the service provider). After the application has received the LINE_CALLSTATE message,  lineGetConfRelatedCalls returns complete information. The application can invoke  lineGetCallInfo and  lineGetCallStatus for each call in the list to determine the call's information and status, respectively. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetConfRelatedCalls",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to a call. This is either a conference call or a participant call in a conference call. For a conference parent call, the call state of hCall can be any state. For a conference participant call, it must be in the conferenced state."
      },
      {
        "in_out": "",
        "type": "LPLINECALLLIST",
        "name": "lpCallList",
        "description": "Pointer to a variably sized data structure of type  LINECALLLIST. Upon successful completion of the request, call handles to all calls in the conference call are returned in this structure. The first call in the list is the conference call, the other calls are the participant calls. The application is granted monitor privilege to those calls for which it does not already have handles; the privileges to calls in the list for which the application already has handles is unchanged. Prior to calling  lineGetConfRelatedCalls, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetCountry function fetches the stored dialing rules and other information related to a specified country/region, the first country/region in the country/region list, or all countries/regions.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NOMEM, LINEERR_INIFILECORRUPT, LINEERR_OPERATIONFAILED, LINEERR_INVALCOUNTRYCODE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetCountry",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCountryID",
        "description": "Country/region identifier (not the country code) of the country/region for which information is to be obtained. ..."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Highest version of TAPI supported by the application (not necessarily the value negotiated by  lineNegotiateAPIVersion on some particular line device)."
      },
      {
        "in_out": "",
        "type": "LPLINECOUNTRYLIST",
        "name": "lpLineCountryList",
        "description": "Pointer to a location to which a LINECOUNTRYLIST structure is loaded. Prior to calling  lineGetCountry, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineGetDevCaps function queries a specified line device to determine its telephony capabilities. The returned information is valid for all addresses on the line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NOMEM, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_OPERATIONFAILED, LINEERR_INCOMPATIBLEEXTVERSION, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALAPPHANDLE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NODRIVER, LINEERR_OPERATIONUNAVAIL, LINEERR_NODEVICE. ",
    "remarks": "Before using  lineGetDevCaps, the application must negotiate the API version number to use, and, if desired, the extension version to use. The API and extension version numbers are those under which TAPI and the service provider must operate. If version ranges do not overlap, the application, API, or service-provider versions are incompatible and an error is returned. One of the members in the  LINEDEVCAPS structure returned by this function contains the number of addresses assigned to the specified line device. The actual address identifiers used to reference individual addresses vary from zero to one less than the returned number. The capabilities of each address can be different. Use  lineGetAddressCaps for each available <dwDeviceID, dwAddressID> combination to determine the exact capabilities of each address. Note that an address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetDevCaps",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Version number of the Telephony API to be used. The high-order word contains the major version number; the low-order word contains the minor version number. This number is obtained by  lineNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtVersion",
        "description": "Version number of the service provider-specific extensions to be used. This number is obtained by  lineNegotiateExtVersion. It can be left zero if no device-specific extensions are to be used. Otherwise, the high-order word contains the major version number; the low-order word contains the minor version number."
      },
      {
        "in_out": "",
        "type": "LPLINEDEVCAPS",
        "name": "lpLineDevCaps",
        "description": "Pointer to a variably sized structure of type  LINEDEVCAPS. Upon successful completion of the request, this structure is filled with line device capabilities information. Prior to calling  lineGetDevCaps, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetDevConfig function returns an \"opaque\" data structure object, the contents of which are specific to the line (service provider) and device class. The data structure object stores the current configuration of a media-stream device associated with the line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the function succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NODRIVER, LINEERR_INVALDEVICECLASS, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_STRUCTURETOOSMALL, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_NODEVICE. ",
    "remarks": "Call states are device specific. The  lineGetDevConfig function can be used to retrieve a data structure from TAPI that specifies the configuration of a media stream device associated with a particular line device. For example, the contents of this structure could specify data rate, character format, modulation schemes, and error control protocol settings for a \"datamodem\" media device associated with the line. Typically, an application calls  lineGetID to identify the media stream device associated with a line, and then calls  lineConfigDialog to allow the user to set up the device configuration. It could then call  lineGetDevConfig, and save the configuration information in a phone book (or other database) associated with a particular call destination. When the user later wishes to call the same destination again,  lineSetDevConfig can be used to restore the configuration settings selected by the user. The functions  lineSetDevConfig,  lineConfigDialog, and  lineGetDevConfig can be used, in that order, to allow the user to view and update the settings. The exact format of the data contained within the structure is specific to the line and media stream API (device class), is undocumented, and is undefined. The structure returned by this function cannot be directly accessed or manipulated by the application, but can only be stored intact and later used in  lineSetDevConfig to restore the settings. The structure also cannot necessarily be passed to other devices, even of the same device class (although this can work in some instances, it is not guaranteed). ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetDevConfig",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be configured."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpDeviceConfig",
        "description": "Pointer to the memory location of type  VARSTRING where the device configuration structure is returned. Upon successful completion of the request, this location is filled with the device configuration. The dwStringFormat member in the  VARSTRING structure is set to STRINGFORMAT_BINARY. Prior to calling  lineGetDevConfig, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that specifies the device class of the device whose configuration is requested. Valid device class  lineGetID strings are the same as those specified for the function."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetIcon function allows an application to retrieve a service line device-specific (or provider-specific) icon for display to the user.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALDEVICECLASS, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_NODEVICE. ",
    "remarks": "The  lineGetIcon function causes the provider to return a handle (in lphIcon) to an icon resource (obtained from  LoadIcon) that is associated with the specified line. The icon handle is for a resource associated with the provider. The application must use  CopyIcon if it wants to reference the icon after the provider is unloaded, which is unlikely to happen as long as the application has the line open. The lpszDeviceClass parameter allows the provider to return different icons based on the type of service being referenced by the caller. The permitted strings are the same as for  lineGetID. For example, if the line supports the Comm API, passing \"COMM\" as lpszDeviceClass causes the provider to return an icon related specifically to the Comm device functions of the service provider. The parameters \"tapi/line\", \"\", or NULL can be used to request the icon for the line service. For applications using an API version earlier than 2.0, if the provider does not return an icon (whether because the given device class is invalid or the provider does not support icons), TAPI substitutes a generic  Telephony line device icon. For applications using API version 2.0 or later, TAPI substitutes the default line icon only if the lpszDeviceClass parameter is \"tapi/line\", \"\" or NULL. For any other device class, if the given device class is not valid or the provider does not support icons for the class,  lineGetIcon returns LINEERR_INVALDEVICECLASS. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetIcon",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device whose icon is requested."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that identifies a device class name. This device class allows the application to select a specific sub-icon applicable to that device class. This parameter is optional and can be left NULL or empty, in which case the highest-level icon associated with the line device rather than a specified media stream device would be selected."
      },
      {
        "in_out": "",
        "type": "LPHICON",
        "name": "lphIcon",
        "description": "Pointer to a memory location in which the handle to the icon is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineGetID function returns a device identifier for the specified device class associated with the selected line, address, or call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_NOMEM, LINEERR_INVALADDRESSID, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSELECT, LINEERR_INVALDEVICECLASS, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NODEVICE, LINEERR_UNINITIALIZED. ",
    "remarks": "The  lineGetID function can be used to retrieve a line-device identifier when given a line handle. This is useful after  lineOpen has been opened using LINEMAPPER as a device identifier in order to determine the real line-device identifier of the opened line. This function can also be used to obtain the device identifier of a phone device or media device (for device classes such as COM, wave, MIDI, phone, line, or NDIS) associated with a call, address or line. This identifier can then be used with the appropriate API (such as phone, MIDI, wave) to select the corresponding media device associated with the specified call. See  TAPI Device Classes for device class names. A vendor that defines a device-specific media mode also needs to define the corresponding device-specific (proprietary) API to manage devices of the media mode. To avoid collisions on device class names assigned independently by different vendors, a vendor should select a name that uniquely identifies both the vendor and, following it, the media type. For example: \"intel/video\". ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetID",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to an open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given open line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to a call."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSelect",
        "description": "Specifies whether the requested device identifier is associated with the line, address or a single call. This parameter uses one and only one of the  LINECALLSELECT_ Constants."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpDeviceID",
        "description": "Pointer to a memory location of type  VARSTRING, where the device identifier is returned. Upon successful completion of the request, this location is filled with the device identifier. The format of the returned information depends on the method used by the device class API for naming devices. Prior to calling  lineGetID, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that specifies the device class of the device whose identifier is requested. Valid device class strings are those used in the SYSTEM.INI section to identify device classes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetLineDevStatus function enables an application to query the specified open line device for its current status.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "An application uses  lineGetLineDevStatus to query the line device for its current line status. This status information applies globally to all addresses on the line device. Use  lineGetAddressStatus to determine status information about a specific address on a line. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetLineDevStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device to be queried."
      },
      {
        "in_out": "",
        "type": "LPLINEDEVSTATUS",
        "name": "lpLineDevStatus",
        "description": "Pointer to a variably sized data structure of type  LINEDEVSTATUS. Upon successful completion of the request, this structure is filled with the line's device status. Prior to calling  lineGetLineDevStatus, the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetMessage function returns the next TAPI message that is queued for delivery to an application that is using the Event Handle notification mechanism (see  lineInitializeEx for further details).",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_NOMEM. ",
    "remarks": "If the  lineGetMessage function has been called with a non-zero timeout and the application calls  lineShutdown on another thread, this function returns immediately with LINEERR_INVALAPPHANDLE. If the timeout expires (or was zero) and no message could be fetched from the queue, the function returns with the error LINEERR_OPERATIONFAILED. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetMessage",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle returned by  lineInitializeEx. The application must have set the LINEINITIALIZEEXOPTION_USEEVENT option in the dwOptions member of the  LINEINITIALIZEEXPARAMS structure."
      },
      {
        "in_out": "",
        "type": "LPLINEMESSAGE",
        "name": "lpMessage",
        "description": "Pointer to a  LINEMESSAGE structure. Upon successful return from this function, the structure contains the next message that had been queued for delivery to the application."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTimeout",
        "description": "Time-out interval, in milliseconds. The function returns if the interval elapses, even if no message can be returned. If dwTimeout is zero, the function checks for a queued message and returns immediately. If dwTimeout is INFINITE, the function's time-out interval never elapses."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineGetNewCalls function returns call handles to calls on a specified line or address for which the application currently does not have handles. The application is granted monitor privilege to these calls.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSELECT, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "An application can use  lineGetNewCalls to obtain handles to calls for which it currently has no handles. The application can select the calls for which handles are to be returned by basing this selection on scope (calls on a specified line, or calls on a specified address). For example, an application can request call handles to all calls on a given address for which it currently has no handle. The application is always given monitor privilege to the new call handles. Also, when opening a line, an application uses this function to become aware of existing calls. The application can invoke  lineGetCallInfo and  lineGetCallStatus for each call in the list to determine the call's information and status, respectively. It can use  lineSetCallPrivilege to change its privilege to owner. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetNewCalls",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to an open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given open line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSelect",
        "description": "Selection of calls that are requested. This parameter uses one and only one of the  LINECALLSELECT_ Constants."
      },
      {
        "in_out": "",
        "type": "LPLINECALLLIST",
        "name": "lpCallList",
        "description": "Pointer to a variably sized data structure of type  LINECALLLIST. Upon successful completion of the request, call handles to all selected calls are returned in this structure. Prior to calling  lineGetNewCalls, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetNumRings function determines the number of rings an incoming call on the given address should ring prior to answering the call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "The  lineGetNumRings and  lineSetNumRings functions, when used in combination, provide a mechanism to support the implementation of toll-saver features across multiple independent applications. An application that receives a handle for a call in the offering state and a  LINE_LINEDEVSTATE ringing message should wait a number of rings equal to the number returned by  lineGetNumRings before answering the call in order to honor the toll-saver settings across all applications. The  lineGetNumRings function returns the minimum of all applications' number of rings specified by  lineSetNumRings. Because this number can vary dynamically, an application should invoke  lineGetNumRings each time it has the option to answer a call. If no application has called  lineSetNumRings, the number of rings returned is 0xFFFFFFFF. A separate LINE_LINEDEVSTATE ringing message is sent to the application for each ring cycle. If call classification is performed by TAPI of answering all calls of unknown media mode and filtering the media stream, TAPI honors this number as well. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetNumRings",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwNumRings",
        "description": "Number of rings that is the minimum of all current  lineSetNumRings requests."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetProviderList function returns a list of service providers currently installed in the telephony system.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NOMEM, LINEERR_INIFILECORRUPT, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetProviderList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Highest version of TAPI supported by the application (not necessarily the value negotiated by  lineNegotiateAPIVersion on some particular line device)."
      },
      {
        "in_out": "",
        "type": "LPLINEPROVIDERLIST",
        "name": "lpProviderList",
        "description": "Pointer to a memory location where TAPI can return a  LINEPROVIDERLIST structure. Prior to calling  lineGetProviderList, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetRequest function retrieves the next by-proxy request for the specified request mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPHANDLE, LINEERR_NOTREGISTERED, LINEERR_INVALPOINTER, LINEERR_OPERATIONFAILED, LINEERR_INVALREQUESTMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_NOREQUEST. ",
    "remarks": "A telephony-enabled application can request that a call be placed on its behalf by invoking  tapiRequestMakeCall. These requests are queued by TAPI and the highest priority application that has registered to handle the request is sent a  LINE_REQUEST message with indication of the mode of the request that is pending. Typically, this application is the user's call-control application. The LINE_REQUEST message indicates that zero or more requests may be pending for the registered application to process; after receiving LINE_REQUEST, it is the responsibility of the recipient application to call  lineGetRequest until LINEERR_NOREQUEST is returned, indicating that no more requests are pending. Next, the call-control application that receives this message invokes  lineGetRequest, specifying the request mode and a buffer that is large enough to hold the request. The call-control application then interprets and executes the request. After execution of  lineGetRequest, TAPI purges the request from its internal queue, making room available for a subsequent request. It is therefore possible for a new  LINE_REQUEST message to be received immediately upon execution of  lineGetRequest, should the same or another application issue another request. It is the responsibility of the request recipient application to handle this scenario by some mechanism; for example, by noting the additional LINE_REQUEST and deferring a subsequent  lineGetRequest until processing of the preceding request completes, by getting the subsequent request and buffer as necessary, or by another appropriate means. The subsequent LINE_REQUEST should not be ignored because it is not repeated by TAPI. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetRequest",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "The application usage handle for the line portion of TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRequestMode",
        "description": "A type of request to be obtained. Be aware that dwRequestMode can only have one bit set. This parameter uses one and only one of the  LINEREQUESTMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpRequestBuffer",
        "description": "A pointer to a memory buffer where the parameters of the request are to be placed. The size of the buffer and the interpretation of the data placed in the buffer depends on the request mode. The application-allocated buffer is assumed to be of sufficient size to hold the request. If dwRequestMode is LINEREQUESTMODE_MAKECALL, interpret the content of the request buffer using the  LINEREQMAKECALL structure. LINEREQUESTMODE_MEDIACALL is obsolete.  For more information, see tapiRequestMediaCall."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetStatusMessages function enables an application to query which notification messages the application is set up to receive for events related to status changes for the specified line or any of its addresses.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "TAPI defines a number of messages that notify applications about events occurring on lines and addresses. An application may not be interested in receiving all address and line status change messages. The  lineSetStatusMessages \t\t function can be used to select which messages the application wants to receive. By default, address status and line status reporting is disabled. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetStatusMessages",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwLineStates",
        "description": "Bit array that identifies for which line device status changes a message is to be sent to the application. If a flag is TRUE, that message is enabled; if FALSE, it is disabled. This parameter uses one or more of the  LINEDEVSTATE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAddressStates",
        "description": "Bit array that identifies for which address status changes a message is to be sent to the application. If a flag is TRUE, that message is enabled; if FALSE, disabled. This parameter uses one or more of the  LINEADDRESSSTATE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetTranslateCaps function returns address translation capabilities.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NOMEM, LINEERR_INIFILECORRUPT, LINEERR_OPERATIONFAILED, LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NODRIVER. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetTranslateCaps",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle returned by the  lineInitializeEx function. If an application has not yet called the  lineInitializeEx function, this parameter can be zero. Note   TAPI 1.4 applications must set this parameter to a valid hLineApp handle, as returned by the lineInitialize function."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Highest version of TAPI supported by the application (not necessarily the value negotiated by  lineNegotiateAPIVersion on some particular line device)."
      },
      {
        "in_out": "",
        "type": "LPLINETRANSLATECAPS",
        "name": "lpTranslateCaps",
        "description": "Pointer to a location to which a  LINETRANSLATECAPS structure is loaded. Prior to calling  lineGetTranslateCaps, the application must  set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineHandoff function gives ownership of the specified call to another application. The application can be either specified directly by its file name or indirectly as the highest priority application that handles calls of the specified media mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALMEDIAMODE, LINEERR_TARGETNOTFOUND, LINEERR_INVALPOINTER, LINEERR_TARGETSELF, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_NOTOWNER. ",
    "remarks": "The  lineHandoff function returns LINEERR_TARGETSELF if the calling application attempted an indirect handoff (that is, set the lpszFileName parameter to NULL) and TAPI determined that the application is itself the highest priority application for the given media mode. If LINEERR_TARGETNOTFOUND is returned, a target for the call handoff was not found. This can occur if the named application did not open the same line with the LINECALLPRIVILEGE_OWNER bit in the dwPrivileges parameter of  lineOpen. Or, in the case of media-mode handoff, no application has opened the same line with the LINECALLPRIVILEGE_OWNER bit in the dwPrivileges parameter of  lineOpen and with the media mode specified in the dwMediaModes parameter of  lineOpen. Call handoff allows ownership of a call to be passed among applications. There are two types of handoff. In the first type, if the application knows the file name of the target application, it can simply specify that file name. If an instance of the target application has opened the line device, ownership of the call is passed to the other application; otherwise, the handoff fails and an error is returned. This form of handoff succeeds if the call handle is handed off to the same file name as the application requesting the handoff. The second type of handoff is based on media mode. In this case, the application indirectly specifies the target application by means of a media mode. The highest priority application that has currently opened the line device for that media mode is the target for the handoff. If there is no such application, the handoff fails and an error is returned. The  lineHandoff function does not change the media mode of a call. To change the media mode of a call, the application should use  lineSetMediaMode on the call, specifying the new media mode. This changes the call's media mode as stored in the call's  LINECALLINFO structure. If handoff succeeds, the receiving application receives a  LINE_CALLSTATE message for the call. This message indicates that the receiving application has owner privilege to the call (dwParam3). In addition, the number of owners and/or monitors for the call may have changed. This is reported by the  LINE_CALLINFO message, and the receiving application can then invoke  lineGetCallStatus and  lineGetCallInfo to retrieve more information about the received call. The receiving application should first check the media mode in  LINECALLINFO. If only a single media mode flag is set, the call is officially of that media mode, and the application can act accordingly. If UNKNOWN and other media mode flags are set, then the media mode of the call is officially UNKNOWN but is assumed to be of one of the media modes for which a flag is set in  LINECALLINFO. The application should assume that it ought to probe for the highest priority media mode. If the probe succeeds (either for that media mode or for another one), the application should set the media mode member in  LINECALLINFO to the single media mode that was recognized. If the media mode flag matches the  LINECALLINFO media mode, the application can act accordingly. If it makes a determination for another media mode, it must first hand off the call to that media mode. If the probe fails, the application should clear the corresponding media mode flag in  LINECALLINFO and hand off the call, specifying dwMediaMode as LINEMEDIAMODE_UNKNOWN. It should also deallocate its call handle (or revert back to monitoring). If none of the media modes succeeded in making a determination, only the UNKNOWN flag remains set in the media mode field of  LINECALLINFO at the time the media application attempts to hand off the call to UNKNOWN. The final  lineHandoff fails if the application is the only remaining owner of the call. This informs the application that it should drop the call and deallocate its handle, in which case the call is abandoned. The privileges of the invoking application to the call are unchanged by this operation, but the application can change its privileges to a call with  lineSetCallPrivilege. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineHandoff",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be handed off. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszFileName",
        "description": "Pointer to a null-terminated string. If this pointer parameter is non-NULL, it contains the file name of the application that is the target of the handoff. If NULL, the handoff target is the highest priority application that has opened the line for owner privilege for the specified media mode. A valid file name does not include the path of the file."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaMode",
        "description": "Media mode used to identify the target for the indirect handoff. The dwMediaMode parameter indirectly identifies the target application that is to receive ownership of the call. This parameter is ignored if lpszFileName is not NULL. This parameter uses one and only one of the  LINEMEDIAMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineHold function places the specified call on hold.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "The call on hold is temporarily disconnected allowing the application to use the line device for making or answering other calls. The  lineHold function performs a so-called \"hard hold\" of the specified call (as opposed to a \"consultation call\"). A call on hard hold typically cannot be transferred or included in a conference call, but a consultation call can. Consultation calls are initiated using  lineSetupTransfer,  lineSetupConference, or  linePrepareAddToConference. After a call has been successfully placed on hold, the call state typically transitions to onHold. A held call is retrieved by  lineUnhold. While a call is on hold, the application can receive  LINE_CALLSTATE messages about state changes of the held call. For example, if the held party hangs up, the call state can transition to disconnected. In a bridged situation, a  lineHold operation may possibly not actually place the call on hold, because the status of other stations on the call can govern (for example, attempting to \"hold\" a call when other stations are participating is not be possible); instead, the call can simply be changed to the LINECONNECTEDMODE_INACTIVE mode if it remains connected at other stations. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineHold",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be placed on hold. The application must be an owner of the call. The call state of hCall must be connected."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineInitialize function is obsolete. It continues to be exported by Tapi.dll and Tapi32.dll for backward compatibility with applications using API versions 1.3 and 1.4.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPNAME, LINEERR_OPERATIONFAILED, LINEERR_INIFILECORRUPT, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_REINIT, LINEERR_NODRIVER, LINEERR_NODEVICE, LINEERR_NOMEM, LINEERR_NOMULTIPLEINSTANCE. ",
    "remarks": "If LINEERR_REINIT is returned and TAPI reinitialization has been requested (for example as a result of adding or removing a telephony service provider), then  lineInitialize requests are rejected with this error until the last application shuts down its usage of the API (using  lineShutdown). At that time, the new configuration becomes effective and applications are once again permitted to call  lineInitialize. If the LINEERR_INVALPARAM error value is returned, the specified hInstance parameter is invalid. The application can refer to individual line devices by using line device identifiers that range from zero to dwNumDevs minus one. An application should not assume that these line devices are capable of anything beyond what is specified by the Basic Telephony subset without first querying their device capabilities using  lineGetDevCaps and  lineGetAddressCaps. Applications should not invoke  lineInitialize without subsequently opening a line (at least for monitoring). If the application is not monitoring and not using any devices, it should call  lineShutdown so that memory resources allocated by Tapi.dll can be released if unneeded, and Tapi.dll itself can be unloaded from memory while not needed. Another reason for performing a  lineShutdown is that if a user changes the device configuration (adds or removes a line or phone), there is no way for TAPI to notify an application that has a line or phone handle open at the time. After a reconfiguration has taken place, causing a LINEDEVSTATE_REINIT message to be sent, no applications can open a device until all applications have performed a  lineShutdown. If any service provider fails to initialize properly, this function fails and returns the error indicated by the service provider. On all TAPI platforms,  lineInitialize is equivalent to  lineInitializeEx using the LINEINITIALIZEEXOPTION_USEHIDDENWINDOW option. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineInitialize",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPHLINEAPP",
        "name": "lphLineApp",
        "description": "Pointer to a location that is filled with the application's usage handle for TAPI."
      },
      {
        "in_out": "",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Instance handle of the client application or DLL."
      },
      {
        "in_out": "",
        "type": "LINECALLBACK",
        "name": "lpfnCallback",
        "description": "Address of a callback function that is invoked to determine status and events on the line device, addresses, or calls. For more information, see  lineCallbackFunc."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAppName",
        "description": "Pointer to a null-terminated text string that contains only displayable characters. If this parameter is not NULL, it contains an application-supplied name for the application. This name is provided in the  LINECALLINFO structure to indicate, in a user-friendly way, which application originated, or originally accepted or answered the call. This information can be useful for call logging purposes. If lpszAppName is NULL, the application's file name is used instead."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwNumDevs",
        "description": "Pointer to a DWORD-sized location. Upon successful completion of this request, this location is filled with the number of line devices available to the application."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  lineInitializeEx function initializes the application's use of TAPI for subsequent use of the line abstraction. It registers the application's specified notification mechanism and returns the number of line devices available to the application. A line device is any device that provides an implementation for the line-prefixed functions in the Telephony API.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPNAME, LINEERR_OPERATIONFAILED, LINEERR_INIFILECORRUPT, LINEERR_INVALPOINTER, LINEERR_REINIT, LINEERR_NOMEM, LINEERR_INVALPARAM. ",
    "remarks": "Applications must select one of three mechanisms by which TAPI notifies the application of telephony events: Hidden Window, Event Handle, or Completion Port. The Hidden Window mechanism is selected by specifying LINEINITIALIZEEXOPTION_USEHIDDENWINDOW in the dwOptions member in the  LINEINITIALIZEEXPARAMS structure. In this mechanism (which is the only mechanism available to TAPI verson 1.x applications), TAPI creates a window in the context of the application during the  lineInitializeEx or  lineInitialize (for TAPI version 1.3 and 1.4 applications) function, and subclasses the window so that all messages posted to it are handled by a WNDPROC in TAPI itself. When TAPI has a message to deliver to the application, TAPI posts a message to the hidden window. When the message is received (which can happen only when the application calls the Windows  GetMessage function), Windows switches the process context to that of the application and invokes the WNDPROC in TAPI. TAPI then delivers the message to the application by calling the lineCallbackProc, a pointer to which the application provided as a parameter in its call to  lineInitializeEx (or  lineInitialize). This mechanism requires the application to have a message queue (which is not desirable for service processes) and to service that queue regularly to avoid delaying processing of telephony events. The hidden window is destroyed by TAPI during the  lineShutdown function. The Event Handle mechanism is selected by specifying LINEINITIALIZEEXOPTION_USEEVENT in the dwOptions member in the  LINEINITIALIZEEXPARAMS structure. In this mechanism, TAPI creates an event object on behalf of the application, and returns a handle to the object in the hEvent member in  LINEINITIALIZEEXPARAMS. The application must not manipulate this event in any manner (for example, must not call  SetEvent,  ResetEvent,  CloseHandle, and so on) or undefined behavior results; the application can only wait on this event using functions such as  WaitForSingleObject or  MsgWaitForMultipleObjects. TAPI signals this event whenever a telephony event notification is pending for the application; the application must call  lineGetMessage to fetch the contents of the message. The event is reset by TAPI when no events are pending. The event handle is closed and the event object destroyed by TAPI during the  lineShutdown function. The application is not required to wait on the event handle that is created; the application could choose instead to call  lineGetMessage and have it block waiting for a message to be queued. The Completion Port mechanism is selected by specifying LINEINITIALIZEEXOPTION_USECOMPLETION PORT in the dwOptions member in the  LINEINITIALIZEEXPARAMS structure. In this mechanism, whenever a telephony event needs to be sent to the application, TAPI sends it using  PostQueuedCompletionStatus to the completion port that the application specified in the hCompletionPort member in  LINEINITIALIZEEXPARAMS, tagged with the completion key that the application specified in the dwCompletionKey member in  LINEINITIALIZEEXPARAMS. The application must have previously created the completion port using  CreateIoCompletionPort. The application retrieves events using  GetQueuedCompletionStatus. Upon return from GetQueuedCompletionStatus, the application has the specified dwCompletionKey written to the DWORD pointed to by the lpCompletionKey parameter, and a pointer to a  LINEMESSAGE structure returned to the location pointed to by lpOverlapped. After the application has processed the event, it is the application's responsibility to call  LocalFree to release the memory used to contain the  LINEMESSAGE structure. Because the application created the completion port (thereby allowing it to be shared for other purposes), the application must close it; the application must not close the completion port until after calling  lineShutdown. When a multithreaded application is using the Event Handle mechanism and more than one thread is waiting on the handle, or the Completion Port notification mechanism and more than one thread is waiting on the port, it is possible for telephony events to be processed out of sequence. This is not due to the sequence of delivery of events from TAPI, but would be caused by the time slicing of threads or the execution of threads on separate processors. If LINEERR_REINIT is returned and TAPI reinitialization has been requested, for example as a result of adding or removing a telephony service provider, then  lineInitializeEx requests are rejected with this error until the last application shuts down its usage of the API (using  lineShutdown), at which time the new configuration becomes effective and applications are once again permitted to call  lineInitializeEx. If the LINEERR_INVALPARAM error value is returned, the specified hInstance parameter is invalid. The application can refer to individual line devices by using line device identifiers that range from zero to dwNumDevs minus one. An application should not assume that these line devices are capable of any particular TAPI function without first querying their device capabilities by  lineGetDevCaps and  lineGetAddressCaps. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineInitializeEx",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPHLINEAPP",
        "name": "lphLineApp",
        "description": "Pointer to a location that is filled with the application's usage handle for TAPI."
      },
      {
        "in_out": "",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Instance handle of the client application or DLL. The application or DLL can pass NULL for this parameter, in which case TAPI uses the module handle of the root executable of the process (for purposes of identifying call handoff targets and media mode priorities)."
      },
      {
        "in_out": "",
        "type": "LINECALLBACK",
        "name": "lpfnCallback",
        "description": "Address of a callback function that is invoked to determine status and events on the line device, addresses, or calls, when the application is using the \"hidden window\" method of event notification (for more information see  lineCallbackFunc). This parameter is ignored and should be set to NULL when the application chooses to use the \"event handle\" or \"completion port\" event notification mechanisms."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszFriendlyAppName",
        "description": "Pointer to a null-terminated text string that contains only displayable characters. If this parameter is not NULL, it contains an application-supplied name for the application. This name is provided in the  LINECALLINFO structure to indicate, in a user-friendly way, which application originated, or originally accepted or answered the call. This information can be useful for call-logging purposes. If lpszFriendlyAppName is NULL, the application's module file name is used instead (as returned by the function  GetModuleFileName)."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwNumDevs",
        "description": "Pointer to a DWORD-sized location. Upon successful completion of this request, this location is filled with the number of line devices available to the application."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAPIVersion",
        "description": "Pointer to a DWORD-sized location. The application must initialize this DWORD, before calling this function, to the highest API version it is designed to support (for example, the same value it would pass into dwAPIHighVersion parameter of  lineNegotiateAPIVersion). Artificially high values must not be used; the value must be accurately set. TAPI translates any newer messages or structures into values or formats supported by the application's version. Upon successful completion of this request, this location is filled with the highest API version supported by TAPI, thereby allowing the application to detect and adapt to having been installed on a system with a different version of TAPI."
      },
      {
        "in_out": "",
        "type": "LPLINEINITIALIZEEXPARAMS",
        "name": "lpLineInitializeExParams",
        "description": "Pointer to a structure of type  LINEINITIALIZEEXPARAMS containing additional parameters used to establish the association between the application and TAPI (specifically, the application's selected event notification mechanism and associated parameters)."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineMakeCall function places a call on the specified line to the specified destination address. Optionally, call parameters can be specified if anything but default call setup parameters are requested.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_ADDRESSBLOCKED, LINEERR_INVALLINEHANDLE, LINEERR_BEARERMODEUNAVAIL, LINEERR_INVALLINESTATE, LINEERR_CALLUNAVAIL, LINEERR_INVALMEDIAMODE, LINEERR_DIALBILLING, LINEERR_INVALPARAM, LINEERR_DIALDIALTONE, LINEERR_INVALPOINTER, LINEERR_DIALPROMPT, LINEERR_INVALRATE, LINEERR_DIALQUIET, LINEERR_NOMEM, LINEERR_INUSE, LINEERR_OPERATIONFAILED, LINEERR_INVALADDRESS, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALADDRESSID, LINEERR_RATEUNAVAIL, LINEERR_INVALADDRESSMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALBEARERMODE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALCALLPARAMS, LINEERR_UNINITIALIZED, LINEERR_INVALCOUNTRYCODE, LINEERR_USERUSERINFOTOOBIG. ",
    "remarks": "If LINEERR_INVALLINESTATE is returned, the line is currently not in a state in which this operation can be performed. A list of currently valid operations can be found in the dwLineFeatures member (of the type LINEFEATURE_) in the  LINEDEVSTATUS structure. Calling  lineGetLineDevStatus updates the information in  LINEDEVSTATUS. If LINEERR_DIALBILLING, LINEERR_DIALQUIET, LINEERR_DIALDIALTONE, or LINEERR_DIALPROMPT is returned, none of the actions otherwise performed by  lineMakeCall have occurred; for example, none of the dialable address prior to the offending character has been dialed, no hookswitch state has changed, and so on. After dialing has completed, several  LINE_CALLSTATE messages are usually sent to the application to notify it about the progress of the call. No generally valid sequence of call-state transitions is specified, as no single fixed sequence of transitions can be guaranteed in practice. A typical sequence can cause a call to transition from dialtone, dialing, proceeding, ringback, to connected. With non-dialed lines, the call can typically transition directly to connected state. An application has the option to specify an originating address on the specified line device. A service provider that models all stations on a switch as addresses on a single line device allows the application to originate calls from any of these stations using  lineMakeCall. The call parameters allow the application to make non-voice calls or request special call setup options that are not available by default. An application can partially dial using  lineMakeCall and continue dialing using  lineDial. For more information on partial dialing, see lineDial and TSPI_lineMakeCall.  To abandon a call attempt, use  lineDrop. After  lineMakeCall returns a success reply message to the application, a LINE_CALLSTATE message is sent to the application to indicate the current state of the call. This state is not necessarily LINECALLSTATE_DIALTONE. This function may send data over the wire in unencrypted form; therefore, someone eavesdropping on the network may be able to read the data. The security risk of sending the data in clear text should be considered before using this method. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineMakeCall",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device on which a call is to be originated."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphCall",
        "description": "Pointer to an HCALL handle. The handle is only valid after the  LINE_REPLY message is received by the application indicating that the  lineMakeCall function successfully completed. Use this handle to identify the call when invoking other telephony operations on the call. The application is initially the sole owner of this call. This handle is void if the function returns an error (synchronously or asynchronously by the reply message)."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Pointer to the destination address. This follows the standard dialable number format. This pointer can be NULL for non-dialed addresses (as with a hot phone) or when all dialing is performed using  lineDial. In the latter case,  lineMakeCall allocates an available call appearance that would typically remain in the dialtone state until dialing begins. Service providers that have inverse multiplexing capabilities can allow an application to specify multiple addresses at once."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCountryCode",
        "description": "Country or region code of the called party. If a value of 0 is specified, a default is used by the implementation."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a  LINECALLPARAMS structure. This structure allows the application to specify how it wants the call to be set up. If NULL is specified, a default 3.1 kHz voice call is established and an arbitrary origination address on the line is selected. This structure allows the application to select elements such as the call's bearer mode, data rate, expected media mode, origination address, blocking of caller ID information, and dialing parameters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineMonitorDigits function enables and disables the unbuffered detection of digits received on the call. Each time a digit of the specified digit mode is detected, a message is sent to the application indicating which digit has been detected.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALDIGITMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "This function is considered successful if digit monitoring has been correctly initiated, not when digit monitoring has terminated. Digit monitoring remains in effect until it is explicitly disabled by calling  lineMonitorDigits with dwDigitModes set to zero, until the call transitions to idle, or when the application deallocates its call handle for the call. Although this function can be invoked in any call state, digits are usually detected only while the call is in the connected state. Each time a digit is detected, a LINE_MONITORDIGITS message is sent to the application passing the detected digit as a parameter. An application can use  lineMonitorDigits to enable or disable unbuffered digit detection. It can use  lineGatherDigits for buffered digit detection. After buffered digit gathering is complete, a  LINE_GATHERDIGITS message is sent to the application. Both buffered and unbuffered digit detection can be enabled on the same call simultaneously. Monitoring of digits on a conference call applies only to the hConfCall, not to the individual participating calls. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineMonitorDigits",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on which digits are to be detected. The call state of hCall can be any state except idle or disconnected."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDigitModes",
        "description": "Digit mode or modes that are to be monitored. If dwDigitModes is zero, digit monitoring is canceled. This parameter uses one or more of the  LINEDIGITMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineMonitorMedia function enables and disables the detection of media types (modes) on the specified call. When a media type is detected, a message is sent to the application. For more information, see  ITLegacyCallMediaControl::MonitorMedia.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALMEDIAMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "The media types specified with  lineOpen relate only to enabling the detection of these media types by the service provider for the purpose of handing off new incoming calls to the proper application. They do not impact any of the media-mode notification messages that are expected because of a previous invocation of  lineMonitorMedia. This function is considered successful if media type monitoring has been correctly initiated, not when media type monitoring has terminated. Media monitoring for a given media type remains in effect until it is explicitly disabled by calling  lineMonitorMedia with a dwMediaModes parameter set to zero, until the call transitions to idle, or when the application deallocates its call handle for the call. The  lineMonitorMedia function is primarily an event reporting mechanism. The media type (mode) of the call, as indicated in  LINECALLINFO, is not affected by the service provider's detection of the media type. Only the controlling application can change a call's media type. Default media monitoring performed by the service provider corresponds to the union of all media types specified on  lineOpen. Although this function can be invoked in any call state, a call's media type can typically only be detected while the call is in certain call states. These states can be device specific. For example, in ISDN, a message can indicate the media type of the media stream before the media stream exists. Similarly, distinctive ringing or the called identifier information about the call can be used to identify the media type of a call. Otherwise, the call may have to be answered (call in the connected state) to allow a service provider to determine the call's media type by filtering the media stream. Because filtering a call's media stream implies a computational overhead, applications should disable media monitoring when not required. By default, media monitoring is enabled for newly incoming calls, because a call's media type selects the application that should handle the call. An outgoing application that deals with voice media types may want to monitor the call for silence (a tone) to distinguish who or what is at the called end of a call. For example, a person at home can answer calls with just a short \"hello.\" A person in the office can provide a longer greeting, indicating name and company name. An answering machine can typically have an even longer greeting. Because media-mode detection enabled by  lineMonitorMedia is implemented as a read-only operation of the call's media stream, it is not disruptive. Monitoring of media on a conference call applies only to the hConfCall parameter, not to the individual participating calls. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineMonitorMedia",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The call state of hCall can be any state except idle."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaModes",
        "description": "Media types to be monitored. If this parameter is zero, it cancels all media type detection. This parameter uses one or more of the  LINEMEDIAMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineMonitorTones function enables and disables the detection of inband tones on the call. Each time a specified tone is detected, a message is sent to the application.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_INVALCALLSTATE, LINEERR_INVALPOINTER, LINEERR_INVALTONE, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "This function succeeds if tone monitoring has been correctly initiated, not when tone monitoring has terminated. Tone monitoring remains in effect until it is explicitly disabled by calling  lineMonitorTones with another tone list (or NULL), until the call transitions to idle, or when the application deallocates its call handle for the call. Although this function can be invoked in any call state, tones can typically only be detected while the call is in the connected state. Tone detection typically requires computational resources. Depending on the service provider and other activities that compete for such resources, the number of tones that can be detected can vary over time. Also, an equivalent amount of resources can be consumed for monitoring a single triple frequency tone versus three single frequency tones. If resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned. The  lineMonitorTones function is also used to detect silence. Silence is specified as a tone with a frequency of zero. Monitoring of tones on a conference call applies only to the hConfCall, not to the individual participating calls If the LINEERR_INVALPOINTER error value is returned, the specified lpToneList parameter is invalid or the value specified by the dwNumEntries parameter is too large. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineMonitorTones",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on whose voice channel tones are to be monitored. The call state of hCall can be any state except idle."
      },
      {
        "in_out": "LPLINEMONITORTONE",
        "type": "const",
        "name": "lpToneList",
        "description": "List of tones to be monitored. This parameter is of type  LINEMONITORTONE. Each tone in this list has an application-defined tag field that is used to identify individual tones in the list to report a tone detection. Tone monitoring in progress is canceled or changed by calling this operation with either NULL for lpToneList or with another tone list."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumEntries",
        "description": "Number of entries in lpToneList. This parameter is ignored if lpToneList is NULL."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineNegotiateAPIVersion function allows an application to negotiate an API version to use.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NODRIVER, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_OPERATIONFAILED, LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_OPERATIONUNAVAIL, LINEERR_NODEVICE. ",
    "remarks": "Use  lineInitializeEx to determine the number of line devices present in the system. The device identifier specified by dwDeviceID varies from zero to one less than the number of line devices present. The  lineNegotiateAPIVersion function is used to negotiate the API version number to use. It also retrieves the extension identifier supported by the line device, and returns zeros if no extensions are supported. If the application wants to use the extensions defined by the returned extension identifier, it must call  lineNegotiateExtVersion to negotiate the extension version to use. The API version number negotiated is that under which TAPI can operate. If version ranges do not overlap, the application and API or service provider versions are incompatible and an error is returned. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineNegotiateAPIVersion",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPILowVersion",
        "description": "Earliest TAPI version with which the application is compliant. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIHighVersion",
        "description": "Latest TAPI version with which the application is compliant. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAPIVersion",
        "description": "Pointer to a variable that contains the TAPI version number that was negotiated. If negotiation succeeds, this number is in the range between dwAPILowVersion and dwAPIHighVersion."
      },
      {
        "in_out": "",
        "type": "LPLINEEXTENSIONID",
        "name": "lpExtensionID",
        "description": "Pointer to a structure of type  LINEEXTENSIONID. If the service provider for the specified dwDeviceID supports provider-specific extensions, then, upon a successful negotiation, this structure is filled with the extension identifier of these extensions. This structure contains all zeros if the line provides no extensions. An application can ignore the returned parameter if it does not use extensions."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineNegotiateExtVersion function allows an application to negotiate an extension version to use with the specified line device. This operation need not be called if the application does not support extensions.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NOMEM, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NODRIVER, LINEERR_INCOMPATIBLEEXTVERSION, LINEERR_OPERATIONFAILED, LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NODEVICE, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "Use  lineInitializeEx to determine the number of line devices present in the system. The device identifier specified by dwDeviceID varies from zero to one less than the number of line devices present. The  lineNegotiateAPIVersion function negotiates the API version number to use. It also retrieves the extension identifier supported by the line device, which is zeros if no extensions are provided. Version numbers should be incremented by one for each release. Leaving gaps in release version numbering can cause unexpected results. If the application wants to use the extensions defined by the returned extension identifier, it must call  lineNegotiateExtVersion to negotiate the extension version to use. The extension version number negotiated is that under which the application and service provider must both operate. If version ranges do not overlap, the application and service provider versions are incompatible and an error is returned. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineNegotiateExtVersion",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "TAPI version number that was negotiated for the specified line device using  lineNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtLowVersion",
        "description": "Earliest extension version of the extension identifier returned by  lineNegotiateAPIVersion with which the application is compliant. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtHighVersion",
        "description": "Latest extension version of the extension identifier returned by  lineNegotiateAPIVersion with which the application is compliant. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwExtVersion",
        "description": "Pointer to a variable that contains the extension version number that was negotiated. If negotiation succeeds, this number is in the range between dwExtLowVersion and dwExtHighVersion."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 9,
    "description": "The  lineOpen function opens the line device specified by its device identifier and returns a line handle for the corresponding opened line device. This line handle is used in subsequent operations on the line device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_ALLOCATED, LINEERR_LINEMAPPERFAILED, LINEERR_BADDEVICEID, LINEERR_NODRIVER, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NOMEM, LINEERR_INCOMPATIBLEEXTVERSION, LINEERR_OPERATIONFAILED, LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALMEDIAMODE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_INVALPRIVSELECT, LINEERR_REINIT, LINEERR_NODEVICE, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "If LINEERR_ALLOCATED is returned, the line cannot be opened due to a \"persistent\" condition, such as that of a serial port being exclusively opened by another process. If LINEERR_RESOURCEUNAVAIL is returned, the line cannot be opened due to a dynamic resource overcommitment such as in DSP processor cycles or memory. This overcommitment can be transitory, caused by monitoring of media type or tones, and changes in these activities by other applications can make it possible to reopen the line within a short time period. If LINEERR_REINIT is returned and TAPI reinitialization has been requested (for example, as a result of adding or removing a telephony service provider), then  lineOpen requests are rejected with this error until the last application shuts down its usage of the API (using  lineShutdown); at that time the new configuration becomes effective and applications are once again permitted to call  lineInitializeEx. Opening a line always entitles the application to make calls on any address available on the line. The ability of the application to deal with incoming calls or to be the target of call handoffs on the line is determined by the dwMediaModes parameter. The  lineOpen function registers the application as having an interest in monitoring calls or receiving ownership of calls that are of the specified media types. If the application just wants to monitor calls, then it can specify LINECALLPRIVILEGE_MONITOR. If the application just wants to make outgoing calls, it can specify LINECALLPRIVILEGE_NONE. If the application is willing to control unclassified calls (calls of unknown media type), it can specify LINECALLPRIVILEGE_OWNER and LINEMEDIAMODE_UNKNOWN. Otherwise, the application should specify the media type it is interested in handling. The application can call the lineSetCallPrivilege function to change the call privileges specified by the LINECALLPRIVILEGES_Constants. The media types specified with  lineOpen add to the default value for the provider's media type monitoring for initial incoming call type determination. The  lineMonitorMedia function modifies the mask that controls  LINE_MONITORMEDIA messages. If a line device is opened with owner privilege and an extension media type is not registered, then the error LINEERR_INVALMEDIAMODE is returned. An application that has successfully opened a line device can always initiate calls using  lineMakeCall,  lineUnpark,  linePickup, and  lineSetupConference (with a NULLhCall), as well as use  lineForward (assuming that doing so is allowed by the device capabilities, line state, and so on). A single application can specify multiple flags simultaneously to handle multiple media types. Conflicts can arise if multiple applications open the same line device for the same media type. These conflicts are resolved by a priority scheme in which the user assigns relative priorities to the applications. Users can set application priorities by calling the lineSetAppPriority function. Only the highest priority application for a given media type will ever receive ownership (unsolicited) of a call of that media type. Ownership can be received when an incoming call first arrives or when a call is handed off. The lineHandoff function is called to hand off ownership of a call to another application. If the user does not assign priorities to the application, and multiple applications open the same line device, by default, the application that called lineOpen first will have the highest priority. Any application (including any lower priority application) can always acquire ownership with  lineGetNewCalls or  lineGetConfRelatedCalls. If an application opens a line for monitoring at a time that calls exist on the line,  LINE_CALLSTATE messages for those existing calls are not automatically generated to the new monitoring application. The application can query the number of current calls on the line to determine how many calls exist, and, if it wants, it can call  lineGetNewCalls to obtain handles to these calls. An application that handles automated voice should also select the interactive voice open mode and be assigned the lowest priority for interactive voice. The reason for this is that service providers report all voice media types as interactive voice. If media type determination is not performed by the application for the UNKNOWN media type, and no interactive voice application has opened the line device, voice calls would be unable to reach the automated voice application, and would be dropped. The same application, or different instantiations of the same application, can open the same line multiple times with the same or different parameters. When an application opens a line device it must specify the negotiated API version and, if it wants to use the line's extensions, it should specify the line's device-specific extension version. These version numbers should have been obtained with  lineNegotiateAPIVersion and  lineNegotiateExtVersion. Version numbering allows the mixing and matching of different application versions with different API versions and service provider versions. LINEMAPPER allows an application to select a line indirectly\u00e2\u0080\u0094by means of the services it wants from it. When opening a line device using LINEMAPPER, the following is true: All members from beginning of the  LINECALLPARAMS data structure through dwAddressMode are relevant. If dwAddressMode is LINEADDRESSMODE_ADDRESSID it means that any address on the line is acceptable, otherwise if dwAddressMode is LINEADDRESSMODE_DIALABLEADDR, indicating that a specific originating address (phone number) is searched for, or if it is a provider-specific extension, then dwOrigAddressSize/Offset and the portion of the variable part they refer to are also relevant. If dwAddressMode is a provider-specific extension, additional information can be contained in the dwDeviceSpecific variably sized member. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineOpen",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifies the line device to be opened. It can either be a valid device identifier or the value.  ValueMeaning  LINEMAPPER   This value is used to open a line device in the system that supports the properties specified in lpCallParams. The application can use  lineGetID to determine the identifier of the line device that was opened."
      },
      {
        "in_out": "",
        "type": "LPHLINE",
        "name": "lphLine",
        "description": "Pointer to an HLINE handle that is then loaded with the handle representing the opened line device. Use this handle to identify the device when invoking other functions on the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "API version number under which the application and Telephony API have agreed to operate. This number is obtained with  lineNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtVersion",
        "description": "Extension version number under which the application and the service provider agree to operate. This number is zero if the application does not use any extensions. This number is obtained with  lineNegotiateExtVersion."
      },
      {
        "in_out": "",
        "type": "DWORD_PTR",
        "name": "dwCallbackInstance",
        "description": "User-instance data passed back to the application with each message associated with this line or with addresses or calls on this line. This parameter is not interpreted by the Telephony API."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPrivileges",
        "description": "Privilege the application wants when notified of a call This parameter contains one or more of the  LINECALLPRIVILEGE_ Constants. For applications using TAPI version 2.0 or later, values for this parameter can also be combined with one or more of the  LINEOPENOPTION_ Constants.     If the LINEOPENOPTION_SINGLEADDRESS option is specified, then the application is interested only in new calls that appear on the address specified by the dwAddressID member in the  LINECALLPARAMS structure pointed to by the lpCallParams parameter (which must be specified). If LINEOPENOPTION_SINGLEADDRESS is specified but either lpCallParams is invalid or the included dwAddressID does not exist on the line, the open fails with LINERR_INVALADDRESSID. In addition to setting the dwAddressID member of the  LINECALLPARAMS structure to the desired address, the application must also set dwAddressMode in  LINECALLPARAMS to LINEADDRESSMODE_ADDRESSID. The LINEOPENOPTION_SINGLEADDRESS option affects only TAPI's assignment of initial call ownership of calls created by the service provider using a  LINE_NEWCALL message. An application that opens the line with LINECALLPRIVILEGE_MONITOR continues to receive monitoring handles to all calls created on the line. Furthermore, the application is not restricted in any way from making calls or performing other operations that affect other addresses on the opened line. When the LINEOPENOPTION_PROXY option is specified (TAPI 2.0 or higher only), the application must also indicate which specific proxy requests it is prepared to handle. It does so by passing, in the lpCallParams parameter, a pointer to a  LINECALLPARAMS structure in which the dwDevSpecificSize and dwDevSpecificOffset members have been set to delimit an array of DWORDs. Each element of this array shall contain one of the  LINEPROXYREQUEST_ Constants. For example, a proxy handler application that supports all five of the Agent-related functions would pass in an array of five DWORDs (dwDevSpecificSize would be 20 decimal) containing the five defined LINEPROXYREQUEST_ values. The proxy request handler application can run on any machine that has authorization to control the line device. However, requests are always routed through the server on which the service provider is executing that actually controls the line device. Thus, it is most efficient if the application handling proxy requests (such as ACD agent control) executes directly on the server along with the service provider. Subsequent attempts, by the same application or other applications, to open the line device and register to handle the same proxy requests as an application that is already registered fail with LINEERR_NOTREGISTERED. To stop handling requests on the line, the application simply calls  lineClose. Other flag combinations return the LINEERR_INVALPRIVSELECT error."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaModes",
        "description": "The media type or modes of interest to the application. This parameter is used to register the application as a potential target for incoming call and call handoff for the specified media type. This parameter is meaningful only if the bit LINECALLPRIVILEGE_OWNER in dwPrivileges is set (and ignored otherwise). This parameter uses one or more of the  LINEMEDIAMODE_ Constants."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a structure of type  LINECALLPARAMS. This pointer is only used if LINEMAPPER or LINEOPENOPTION_PROXY is used; otherwise lpCallParams is ignored. It describes the call parameter that the line device should be able to provide."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  linePark function parks the specified call according to the specified park mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESS, LINEERR_NOTOWNER, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALPARKMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "With directed park, the application determines the address at which it wants to park the call. With nondirected park, the switch determines the address and provides this to the application. In either case, a parked call can be unparked by specifying this address. The parked call typically enters the idle state after it has been successfully parked, and the application should then deallocate its handle to the call. If the application performs a  lineUnpark on the parked call, a new call handle is created for the unparked call even if the application has not deallocated its old call handle. Some switches can remind the user after a call has been parked for some long amount of time. The application sees an offering call with a call reason set to reminder. On a nondirected park, if the dwTotalSize member in the  VARSTRING structure does not specify a sufficient amount of memory to receive the park address, the corresponding reply message returns a LINEERR_STRUCTURETOOSMALL error value. In such cases, there is no way to retrieve the complete park address. When a LINEERR_STRUCTURETOOSMALL error value is returned, the dwNeededSize member of the NonDirAddress structure does not contain a valid value. If a LINEERR_STRUCTURETOOSMALL error value is received from a nondirected  linePark, then increase the size of the buffer and call  linePark again until it returns either success or a different LINEERR_XXX result. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "linePark",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be parked. The application must be an owner of the call. The call state of hCall must be connected."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParkMode",
        "description": "Park mode with which the call is to be parked. This parameter can have only a single flag set, and uses one of the  LINEPARKMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDirAddress",
        "description": "Pointer to a null-terminated string that indicates the address where the call is to be parked when using directed park. The address is in dialable number format. This parameter is ignored for nondirected park."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpNonDirAddress",
        "description": "Pointer to a structure of type  VARSTRING. For nondirected park, the address where the call is parked is returned in this structure. This parameter is ignored for directed park. Within the  VARSTRING structure, dwStringFormat must be set to STRINGFORMAT_ASCII (an ASCII string buffer containing a null-terminated string), and the terminating NULL must be accounted for in the dwStringSize. Prior to calling  linePark, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  linePickup function picks up a call alerting at the specified destination address and returns a call handle for the picked-up call. If invoked with NULL for the lpszDestAddress parameter, a group pickup is performed. If required by the device, lpszGroupID specifies the group identifier to which the alerting station belongs.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESS, LINEERR_NOMEM, LINEERR_INVALADDRESSID, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALGROUPID, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED. ",
    "remarks": "When a call has been picked up successfully, the application is notified by the  LINE_CALLSTATE message about call state changes. The  LINECALLINFO structure supplies information about the call that was picked up. It lists the reason for the call as pickup. This structure is available using  lineGetCallInfo. If LINEADDRCAPFLAGS_PICKUPCALLWAIT is TRUE,  linePickup can be used to pick up a call for which the user has audibly detected the call-waiting signal but for which the provider is unable to perform the detection. This gives the user a mechanism to \"answer\" a waiting call even though the service provider was unable to detect the call-waiting signal. Both lpszDestAddress and lpszGroupID pointer parameters must be NULL to pick up a call-waiting call. The  linePickup function creates a new call handle for the waiting call and passes that handle to the user. The dwAddressID parameter is most often zero (particularly in single-line residential cases). After  linePickup has been used to pick up the second call,  lineSwapHold can be used to toggle between them. The  lineDrop function can be used to drop one (and toggle to the other), and so forth. If the user wants to drop the current call and pick up the second call, they should call  lineDrop when they get the call-waiting beep, wait for the second call to ring, and then call  lineAnswer on the new call handle. The LINEADDRFEATURE_PICKUP flag in the dwAddressFeatures member in  LINEADDRESSSTATUS indicates when pickup is actually possible. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "linePickup",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device on which a call is to be picked up."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on hLine at which the pickup is to be originated. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphCall",
        "description": "Pointer to a memory location where the handle to the picked up call is returned. The application is the initial sole owner of the call."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Pointer to a null-terminated character buffer that contains the address whose call is to be picked up. The address is in standard dialable address format."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszGroupID",
        "description": "Pointer to a null-terminated character buffer containing the group identifier to which the alerting station belongs. This parameter is required on some switches to pick up calls outside of the current pickup group.     The lpszGroupID parameter can be specified by itself with a NULL pointer for lpszDestAddress. Alternatively, lpszGroupID can be specified in addition to lpszDestAddress, if required by the device."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  linePrepareAddToConference function prepares an existing conference call for the addition of another party.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_BEARERMODEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_CALLUNAVAIL, LINEERR_INVALRATE, LINEERR_CONFERENCEFULL, LINEERR_NOMEM, LINEERR_INUSE, LINEERR_NOTOWNER, LINEERR_INVALADDRESSMODE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALBEARERMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLPARAMS, LINEERR_RATEUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALCONFCALLHANDLE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALLINESTATE, LINEERR_USERUSERINFOTOOBIG, LINEERR_INVALMEDIAMODE, LINEERR_UNINITIALIZED. ",
    "remarks": "If LINEERR_INVALLINESTATE is returned, the line is currently not in a state in which this operation can be performed. A list of currently valid operations can be found in the dwLineFeatures member (of the type  LINEFEATURE) in the  LINEDEVSTATUS structure. (Calling  lineGetLineDevStatus updates the information in  LINEDEVSTATUS.) A conference call handle can be obtained with  lineSetupConference or with  lineCompleteTransfer that is resolved as a three-way conference call. The  linePrepareAddToConference function typically places the existing conference call in the onHoldPendingConference state and creates a consultation call that can be added later to the existing conference call with  lineAddToConference. The consultation call can be canceled using  lineDrop. It may also be possible for an application to swap between the consultation call and the held conference call with  lineSwapHold. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "linePrepareAddToConference",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hConfCall",
        "description": "Handle to a conference call. The application must be an owner of this call. The call state of hConfCall must be connected."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConsultCall",
        "description": "Pointer to an HCALL handle. This location is then loaded with a handle identifying the consultation call to be added. Initially, the application is the sole owner of this call."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a  LINECALLPARAMS structure containing call parameters to use when establishing the consultation call. This parameter can be set to NULL if no special call setup parameters are desired."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineRedirect function redirects the specified offering call to the specified destination address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESS, LINEERR_NOTOWNER, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALCOUNTRYCODE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "Call redirect allows an application to deflect an offering call to another address without first answering the call. Call redirect differs from call forwarding in that call forwarding is performed by the switch without the involvement of the application; redirection can be done on a call-by-call basis by the application, for example, driven by caller ID information. It differs from call transfer in that transferring a call requires the call first be answered. After a call has been successfully redirected, the call typically transitions to idle. Besides redirecting an incoming call, an application may have the option to accept the call using  lineAccept, reject the call using  lineDrop, or answer the call using  lineAnswer. The availability of these operations is dependent on device capabilities. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineRedirect",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be redirected. The application must be an owner of the call. The call state of hCall must be offering."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Pointer to the destination address. This follows the standard dialable number format."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCountryCode",
        "description": "Country/region code of the party the call is redirected to. If a value of 0 is specified, a default is used by the implementation."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineRegisterRequestRecipient function registers the invoking application as a recipient of requests for the specified request mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALREQUESTMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "A telephony-enabled application can request that a call be placed on its behalf by invoking  tapiRequestMakeCall. Additionally, other applications can request that information be logged with a given call. The  tapiRequestMakeCall requests are queued by TAPI, and the highest priority application that has registered to handle the request is sent a  LINE_REQUEST message with an indication of the mode of the request that is pending. This application is typically the user's call-control application. Next, the call-control application that receives this message invokes  lineGetRequest, specifying the request mode and a buffer that is large enough to hold the request. The call-control application then interprets and executes the request. The recipient application is also automatically deregistered for all requests when it does a  lineShutdown. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineRegisterRequestRecipient",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Application's usage handle for the line portion of TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRegistrationInstance",
        "description": "Application-specific DWORD that is passed back as a parameter of the  LINE_REQUEST message. This message notifies the application that a request is pending. This parameter is ignored if bEnable is set to zero. This parameter is examined by TAPI only for registration, not for deregistration. The dwRegistrationInstance value used while deregistering need not match the dwRegistrationInstance used while registering for a request mode."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRequestMode",
        "description": "Type of request for which the application registers. This parameter uses one or more of the  LINEREQUESTMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "bEnable",
        "description": "If TRUE, the application registers the specified request modes; if FALSE, the application deregisters for the specified request modes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineReleaseUserUserInfo function informs the service provider that the application has processed the user-user information contained in the  LINECALLINFO structure, and that subsequently received user-user information can now be written into that structure. The service provider sends a  LINE_CALLINFO message indicating LINECALLINFOSTATE_USERUSERINFO when new information is available.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "The  lineReleaseUserUserInfo function allows the application to control the flow of incoming user-user information on an ISDN connection. When a new, complete user-user information message is received, the service provider informs the application using a  LINE_CALLINFO message (specifying LINECALLINFOSTATE_USERUSERINFO). Any number of applications can examine the information (using  lineGetCallInfo), but the application owning the call controls when the information is released so that subsequent information can be reported. The service provider will not overwrite previous user-user information in  LINECALLINFO with newer information until after  lineReleaseUserUserInfo has been called. It is the responsibility of the service provider to buffer subsequently received user-user information until the previous information is released by the application owning the call. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineReleaseUserUserInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The application must be an owner of the call. The call state of hCall can be any state."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineRemoveFromConference function removes the specified call from the conference call to which it currently belongs. The remaining calls in the conference call are unaffected.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "This operation removes a party that currently belongs to a conference call. After the call has been successfully removed, it may be possible to further manipulate it using its handle. The availability of this operation and its result are likely to be limited in many implementations. For example, in many implementations, only the most recently added party can be removed from a conference, and the removed call can be automatically dropped (becomes idle). Consult the line's device capabilities to determine the available effects of removing a call from a conference. If the removal of a participant from a conference is supported, the participant call, after it is removed from the conference, enters the call-state listed in the dwRemoveFromConfState member in  LINEADDRESSCAPS. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineRemoveFromConference",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be removed from the conference. The application must be an owner of this call. The call state of hCall must be conferenced."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineRemoveProvider function removes an existing telephony service provider from the telephony system.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_NOMEM, LINEERR_INVALPARAM, LINEERR_OPERATIONFAILED. ",
    "remarks": "If the call to  TSPI_providerRemove succeeds, and the telephony system is active at the time, TAPI calls  lineShutdown and/or  phoneShutdown on the service provider (depending on which device types are active). Any line or phone handles still held by applications on associated devices are forcibly closed with  LINE_CLOSE or  PHONE_CLOSE messages (it is preferable for service providers to issue these messages as part of  TSPI_providerRemove, after verification with the user). The devices previously under the control of that provider are then marked as \"unavailable\", so that any future attempts by applications to reference them by device identifier result in LINEERR_NODRIVER. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineRemoveProvider",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPermanentProviderID",
        "description": "Permanent provider identifier of the service provider to be removed."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which any dialog boxes that need to be displayed as part of the removal process (for example, a confirmation dialog box by the service provider's  TSPI_providerRemove function) would be attached. Can be a NULL value to indicate that any window created during the function should have no owner window."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineSecureCall function secures the call from any interruptions or interference that can affect the call's media stream.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "A call can be secured to avoid interference. For example, in an analog environment, call-waiting tones can destroy a fax or modem session on the original call. The  lineSecureCall function allows an existing call to be secured. The  lineMakeCall function provides the option to secure the call from the time of call setup. The securing of a call remains in effect for the duration of the call. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSecureCall",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be secured. The application must be an owner of the call. The call state of hCall can be any state."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSendUserUserInfo function sends user-user information to the remote party on the specified call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_USERUSERINFOTOOBIG, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "This function can be used to send user-user information at any time during a connected call. If the size of the specified information to be sent is larger than what can fit into a single network message (as in ISDN), the service provider is responsible for dividing the information into a sequence of chained network messages (using \"more data\"). User-user information can also be sent as part of call accept, call reject, and call redirect, and when making calls. User-user information can also be received. The received information is available through the call's call-information record. Whenever user-user information arrives after call offering or prior to call disconnect, a  LINE_CALLINFO message with a UserUserInfo parameter notifies the application that user-user information in the call-information record has changed. If multiple network messages are chained, the information is assembled by the service provider and a single message is sent to the application. This function may send data over the wire in unencrypted form; therefore, someone eavesdropping on the network may be able to read the data. The security risk of sending the data in clear text should be considered before using this method. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSendUserUserInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call on which to send user-user information. The application must be an owner of the call. The call state of hCall must be connected, offering, accepted, or ringback."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsUserUserInfo",
        "description": "Pointer to a string containing user-user information to be sent to the remote party. User-user information is only sent if supported by the underlying network (see  LINEDEVCAPS). The protocol discriminator field for the user-user information, if required, should appear as the first byte of the buffer pointed to by lpsUserUserInfo, and must be accounted for in dwSize."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the user-user information in lpsUserUserInfo, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineSetAppPriority function enables an application to set its priority in the handoff priority list for a particular media type or Assisted Telephony request mode, or to remove itself from the priority list.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_INVALREQUESTMODE, LINEERR_INVALAPPNAME, LINEERR_NOMEM, LINEERR_INVALMEDIAMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALPARAM, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER. ",
    "remarks": "If LINEERR_INVALMEDIAMODE is returned, the value specified in dwMediaMode is not zero and not one of the  LINEMEDIAMODE_ Constants. This function updates the stored priority list. If the telephony system is initialized, it also sets the current, active priorities for applications then running; the new priority is used on the next incoming call or  lineHandoff based on media type. The Priorities set with lineSetAppPriority will persist across restarts of the system or restarts of tapisrv. The lineOpen function opens the line with no specified call priorities. By default, the highest priority application will be the one that first called lineOpen. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAppPriority",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAppFilename",
        "description": "A pointer to a string that contains the application executable module filename, without the directory data. In TAPI version 2.0 or later, the parameter can specify a filename in either long or 8.3 filename format."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaMode",
        "description": "A media type for which the priority of the application is to be set. The value can be one or more of the  LINEMEDIAMODE constants. The value zero should be used to set the application priority for Assisted Telephony requests."
      },
      {
        "in_out": "",
        "type": "LPLINEEXTENSIONID",
        "name": "lpExtensionID",
        "description": "A pointer to a structure of type  LINEEXTENSIONID. This parameter is ignored."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRequestMode",
        "description": "The conditions for this parameter are, if the dwMediaMode parameter is zero, this parameter specifies the Assisted Telephony request mode for which priority is to be set. It must be LINEREQUESTMODE_MAKECALL. This parameter is ignored if dwMediaMode is nonzero."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszExtensionName",
        "description": "This parameter is ignored."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPriority",
        "description": "A parameter that indicates a new priority for the application. If the value 0 is passed, the application is removed from the priority list for the specified media or request mode; if it was not already present, no error is generated. If the value 1 is passed, the application is inserted as the highest-priority application for the media or request mode; it is removed from a lower-priority position, if already in the list. Any other value generates an error."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSetAppSpecific function enables an application to set the application-specific field of the specified call's call-information record.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_NOTOWNER, LINEERR_OPERATIONUNAVAIL, LINEERR_OPERATIONFAILED. ",
    "remarks": "The application-specific field in the  LINECALLINFO data structure that exists for each call is not interpreted by the Telephony API or any of its service providers. Its usage is entirely defined by the applications. The field can be read from the  LINECALLINFO record returned by  lineGetCallInfo. However,  lineSetAppSpecific must be used to set the field so that changes become visible to other applications. When this field is changed, all other applications with call handles are sent a LINE_CALLINFO message with an indication that the dwAppSpecific member has changed. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAppSpecific",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call whose application-specific field needs to be set. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAppSpecific",
        "description": "New content of the dwAppSpecific member for the call's  LINECALLINFO structure. This value is not interpreted by the Telephony API."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetCallData function sets the CallData member in  LINECALLINFO. Depending on the service provider implementation, the CallData member can be propagated to all applications having handles to the call, including those on other machines (through the server), and can travel with the call when it is transferred.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALCALLHANDLE, LINEERR_INVALCALLSTATE, LINEERR_INVALPARAM, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_NOTOWNER, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCallData",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The application must have OWNER privilege."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpCallData",
        "description": "Address of the data to be copied to the CallData member in  LINECALLINFO, replacing any existing data. For more information, see the  call data topic."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Number of bytes of data to be copied. A value of 0 causes any existing data to be removed.     Note  If lpCallData is a pointer to a string, the size must include the null terminator."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineSetCallParams function allows an application to change bearer mode and/or the rate parameters of an existing call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_BEARERMODEUNAVAIL, LINEERR_NOTOWNER, LINEERR_INVALBEARERMODE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RATEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALRATE, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "This operation is used to change the parameters of an existing call. Examples of its usage include changing the bearer mode and/or the data rate of an existing call. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCallParams",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call whose parameters are to be changed. The application must be an owner of the call. The call state of hCall can be any state except idle or disconnected."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwBearerMode",
        "description": "New bearer mode for the call. This parameter uses one and only one of the  LINEBEARERMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMinRate",
        "description": "Lower bound for the call's new data rate. The application can accept a new rate as low as this one."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMaxRate",
        "description": "Upper bound for the call's new data rate. This is the maximum data rate the application can accept. If an exact data rate is required, dwMinRate and dwMaxRate should be equal."
      },
      {
        "in_out": "LPLINEDIALPARAMS",
        "type": "const",
        "name": "lpDialParams",
        "description": "Pointer to the new dial parameters for the call, of type  LINEDIALPARAMS. This parameter can be left NULL if the call's current dialing parameters are to be used."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSetCallPrivilege function sets the application's privilege to the specified privilege.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLSTATE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALCALLPRIVILEGE, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "If the application is the sole owner of a non-idle call and can change its privilege to monitor, a LINEERR_INVALCALLSTATE error is returned. The application can also first drop the call using  lineDrop to make the call transition to the idle state and then change its privilege. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCallPrivilege",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call whose privilege is to be set. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCallPrivilege",
        "description": "Required privilege for the specified call. This parameter uses one and only one of the  LINECALLPRIVILEGE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineSetCallQualityOfService function allows the application to attempt to change the quality of service parameters (reserved capacity and performance guarantees) for an existing call. Except for basic parameter validation, this is a straight pass-through to a service provider.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALCALLHANDLE, LINEERR_INVALCALLSTATE, LINEERR_INVALPARAM, LINEERR_INVALPOINTER, LINEERR_INVALRATE, LINEERR_NOMEM, LINEERR_NOTOWNER, LINEERR_OPERATIONUNAVAIL, LINEERR_OPERATIONFAILED, LINEERR_RATEUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCallQualityOfService",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The application must have OWNER privilege."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpSendingFlowspec",
        "description": "Pointer to memory containing a  FLOWSPEC structure followed by provider-specific data. The provider-specific portion following the FLOWSPEC structure must not contain pointers to other blocks of memory in the application process, because TAPI will not know how to marshal the data pointed to by the private pointer(s) and convey it through interprocess communication to the service provider."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSendingFlowspecSize",
        "description": "Total size of the FLOWSPEC structure and accompanying provider-specific data, in bytes. This is equivalent to what would have been stored in SendingFlowspec in a  QOS structure."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpReceivingFlowspec",
        "description": "Pointer to memory containing a FLOWSPEC structure followed by provider-specific data. The provider-specific portion following the FLOWSPEC structure must not contain pointers to other blocks of memory in the application process, because TAPI will not know how to marshal the data pointed to by the private pointer(s) and convey it through interprocess communication to the service provider."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwReceivingFlowspecSize",
        "description": "Total size of the FLOWSPEC and accompanying provider-specific data, in bytes. This is equivalent to what would have been stored in ReceivingFlowspec in a QOS structure."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSetCallTreatment function sets the sounds a party on a call that is unanswered or on hold hears. Except for basic parameter validation, it is a straight pass-through by TAPI to the service provider.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALCALLHANDLE, LINEERR_INVALCALLSTATE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_NOTOWNER, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "The use of call treatment functionality should be limited to controlling of legacy equipment. New equipment is generally designed so that instead of call treatments being generated by external switching equipment, calls would be connected to PC-based audio sources and signals generated using standard functions such as the multimedia Wave API. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCallTreatment",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call. The application must have OWNER privilege."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTreatment",
        "description": "One of the call treatments supported on the address on which the call appears, as indicated by  LINEADDRESSCAPS. LINEERR_INVALPARAM is returned if the specified treatment is not supported."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSetCurrentLocation function sets the location used as the context for address translation.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INIFILECORRUPT, LINEERR_NOMEM, LINEERR_INVALAPPHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALLOCATION, LINEERR_RESOURCEUNAVAIL, LINEERR_NODRIVER, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetCurrentLocation",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Application handle returned by  lineInitializeEx. If an application has not yet called the  lineInitializeEx function, it can set the hLineApp parameter to zero."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwLocation",
        "description": "New value for the CurrentLocation entry in the [Locations] section in the registry. It must contain a valid permanent identifier of a Location entry in the [Locations] section, as obtained from  lineGetTranslateCaps. If it is valid, the CurrentLocation entry is updated."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineSetDevConfig function allows the application to restore the configuration of a media stream device on a line device to a setup previously obtained using  lineGetDevConfig. For example, the contents of this structure could specify data rate, character format, modulation schemes, and error control protocol settings for a \"datamodem\" media device associated with the line.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the function succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NODRIVER, LINEERR_INVALDEVICECLASS, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALPOINTER, LINEERR_OPERATIONFAILED, LINEERR_INVALPARAM, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINESTATE, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_NODEVICE. ",
    "remarks": "Call states are device specific. Typically, an application calls  lineGetID to identify the media stream device associated with a line, and then calls  lineConfigDialog to allow the user to set up the device configuration. It could then call  lineGetDevConfig and save the configuration information in a phone book or other database associated with a particular call destination. When the user wants to call the same destination again, this  lineSetDevConfig function can be used to restore the configuration settings selected by the user. The  lineSetDevConfig,  lineConfigDialog, and  lineGetDevConfig functions can be used, in that order, to allow the user to view and update the settings. The exact format of the data contained within the structure is specific to the line and media stream API (device class), is undocumented, and is undefined. The application must treat it as \"opaque\" and not manipulate the contents directly. Generally, the structure can be sent using this function only to the same device from which it was obtained. Certain telephony service providers may, however, permit structures to be interchanged between identical devices (that is, multiple ports on the same multiport modem card). Such interchangeability is not guaranteed in any way, even for devices of the same device class. Some service providers may permit the configuration to be set while a call is active, and others may not. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetDevConfig",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the line device to be configured."
      },
      {
        "in_out": "LPVOID",
        "type": "const",
        "name": "lpDeviceConfig",
        "description": "Pointer to the opaque configuration data structure that was returned by  lineGetDevConfig in the variable portion of the  VARSTRING structure."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Number of bytes in the structure pointed to by lpDeviceConfig. This value is returned in the dwStringSize member in the  VARSTRING structure returned by  lineGetDevConfig."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that specifies the device class of the device whose configuration is to be set. Valid device class strings are the same as those specified for the  lineGetID function."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetLineDevStatus function sets the line device status. Except for basic parameter validation, it is a straight pass-through to the service provider. The service provider sends a  LINE_LINEDEVSTATE message to inform applications of the new state, when set; TAPI does not synthesize these messages.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALLINESTATE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONUNAVAIL, LINEERR_OPERATIONFAILED, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetLineDevStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwStatusToChange",
        "description": "One or more of the  LINEDEVSTATUSFLAGS_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "fStatus",
        "description": "TRUE (\u20131) to turn on the indicated status bit(s), FALSE (0) to turn off. ..."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 12,
    "description": "The  lineSetMediaControl function enables and disables control actions on the media stream associated with the specified line, address, or call. Media control actions can be triggered by the detection of specified digits, media types, custom tones, and call states.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_NOMEM, LINEERR_INVALCALLHANDLE, LINEERR_NOTOWNER, LINEERR_INVALCALLSELECT, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATELIST, LINEERR_OPERATIONFAILED, LINEERR_INVALDIGITLIST, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_UNINITIALIZED, LINEERR_INVALMEDIALIST, LINEERR_INVALPOINTER, LINEERR_INVALTONELIST. ",
    "remarks": "The  lineSetMediaControl function is considered successful if media control has been correctly initiated, not when any media control has taken effect. Media control in progress is changed or is canceled by calling this function again with either different parameters or NULLs. If one or more of the parameters lpDigitList, lpMediaList, lpToneList, and lpCallStateList are NULL, then the corresponding digit, media type, tone, or call state-triggered media control is disabled. To modify just a portion of the media control parameters while leaving the remaining settings in effect, the application should invoke  lineSetMediaControl, supplying the previous parameters for those portions that must remain in effect and new parameters for those parts that are to be modified. If hCall is selected and the call terminates or the application deallocates its handle, media control on that call is canceled. All applications that are owners of the call are in principle allowed to make media control requests on the call. Only a single media control request can be outstanding on a call across all applications that own the call. Each time  lineSetMediaControl is called, the new request overrides any media control then in effect on the call, whether set by the calling application or any other owning application. Depending on the service provider and other activities that compete for such resources, the number of simultaneous detections that can be made can vary over time. If service provider resources are overcommitted, the LINEERR_RESOURCEUNAVAIL error is returned. Whether or not media control is supported by the service provider is a device capability. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetMediaControl",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to an open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address identifier on the given open line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to a call. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSelect",
        "description": "Whether the media control requested is associated with a single call, is the default for all calls on an address, or is the default for all calls on a line. This parameter one and only one of the  LINECALLSELECT_ Constants."
      },
      {
        "in_out": "LPLINEMEDIACONTROLDIGIT",
        "type": "const",
        "name": "lpDigitList",
        "description": "Pointer to the array that contains the digits that are to trigger media control actions, of type  LINEMEDIACONTROLDIGIT. Each time a digit in the digit list is detected, the specified media control action is carried out on the call's media stream.     Valid digits for pulse mode are '0' through '9'. Valid digits for DTMF mode are '0' through '9', 'A', 'B', 'C', 'D', '*', '#'."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDigitNumEntries",
        "description": "Number of entries in the lpDigitList."
      },
      {
        "in_out": "LPLINEMEDIACONTROLMEDIA",
        "type": "const",
        "name": "lpMediaList",
        "description": "Pointer to an array with entries of type  LINEMEDIACONTROLMEDIA. The array has dwMediaNumEntries entries. Each entry contains a media type to be monitored, media-type specific information (such as duration), and a media control field. If a media type in the list is detected, the corresponding media control action is performed on the call's media stream."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaNumEntries",
        "description": "Number of entries in lpMediaList."
      },
      {
        "in_out": "LPLINEMEDIACONTROLTONE",
        "type": "const",
        "name": "lpToneList",
        "description": "Pointer to an array with entries of type  LINEMEDIACONTROLTONE. The array has dwToneNumEntries entries. Each entry contains a description of a tone to be monitored, duration of the tone, and a media-control field. If a tone in the list is detected, the corresponding media control action is performed on the call's media stream."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwToneNumEntries",
        "description": "Number of entries in lpToneList."
      },
      {
        "in_out": "LPLINEMEDIACONTROLCALLSTATE",
        "type": "const",
        "name": "lpCallStateList",
        "description": "Pointer to an array with entries of type  LINEMEDIACONTROLCALLSTATE. The array has dwCallStateNumEntries entries. Each entry contains a call state and a media control action. Whenever the given call transitions into one of the call states in the list, the corresponding media control action is invoked."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCallStateNumEntries",
        "description": "Number of entries in lpCallStateList."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSetMediaMode function sets the media type(s) of the specified call in its  LINECALLINFO structure. For more information, see  ITLegacyCallMediaControl::SetMediaType.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALMEDIAMODE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "The  lineSetMediaMode function changes the call's media type in its  LINECALLINFO structure. Typical usage of this operation is either to set a call's media type to a specific known media type or to exclude possible media types as long as the call's media type is officially unknown (the UNKNOWN media type flag is set). ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetMediaMode",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call whose media type is to be changed. The application must be an owner of the call. The call state of hCall can be any state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMediaModes",
        "description": "New media type(s) for the call. This parameter uses the  LINEMEDIAMODE_ Constants. As long as the UNKNOWN media type flag is set, other media type flags may be set as well. This is used to identify a call's media type as not fully determined, but narrowed down to one of a small set of specified media types. If the UNKNOWN flag is not set, only a single media type can be specified."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetNumRings function sets the number of rings that must occur before an incoming call is answered. This function can be used to implement a toll-saver-style function. It allows multiple independent applications to each register the number of rings. The function  lineGetNumRings returns the minimum number of rings requested. It can be used by the application that answers incoming calls to determine the number of rings it should wait before answering the call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALADDRESSID, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "The  lineGetNumRings and  lineSetNumRings functions, when used in combination, provide a mechanism to support the implementation of toll-saver features across multiple independent applications. If no application ever calls  lineSetNumRings,  lineGetNumRings returns 0xFFFFFFFF. An application that is the owner of a call in the offering state and that received a  LINE_LINEDEVSTATE  ringing message should wait a number of rings equal to the number returned by  lineGetNumRings before answering the call in order to honor the toll-saver settings across all applications. A separate LINE_LINEDEVSTATE ringing message is sent to the application for each ring cycle, so the application should count these messages. If this call disconnects before being answered, and another call comes in shortly thereafter, the  LINE_CALLSTATE message should allow the application to determine that ringing is related to the second call. If call classification is performed by TAPI by means of answering incoming calls of unknown media type and filtering the media stream, TAPI honors this number as well. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetNumRings",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumRings",
        "description": "Number of rings before a call should be answered in order to honor the toll-saver requests from all applications."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetStatusMessages function enables an application to specify which notification messages to receive for events related to status changes for the specified line or any of its addresses.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINESTATE, LINEERR_UNINITIALIZED, LINEERR_NOMEM, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "TAPI defines a number of messages that notify applications about events occurring on lines and addresses. An application may not be interested in receiving all address and line status change messages. The  lineSetStatusMessages function can be used to select which messages the application receives. By default, address and line status reporting is disabled. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetStatusMessages",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwLineStates",
        "description": "Bit array that identifies for which line-device status changes a message is to be sent to the application. This parameter uses one or more of the  LINEDEVSTATE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressStates",
        "description": "Bit array that identifies for which address status changes a message is to be sent to the application. This parameter uses one or more of the  LINEADDRESSSTATE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  lineSetTerminal function enables an application to specify which terminal information related to the specified line, address, or call is to be routed. The  lineSetTerminal function can be used while calls are in progress on the line to allow an application to route these events to different devices as required.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESSID, LINEERR_NOMEM, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSELECT, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALTERMINALID, LINEERR_UNINITIALIZED, LINEERR_INVALTERMINALMODE. ",
    "remarks": "An application can use this function to route certain classes of low-level line events to the specified terminal device or to suppress the routing of these events. For example, voice can be routed to an audio I/O device (headset), lamps and display events can be routed to the local phone device, and button events and ringer events can be suppressed altogether. This function can be called at any time, even when a call is active on the given line device. This allows a user to switch from using the local phone set to another audio I/O device. This function can be called multiple times to route the same events to multiple terminals simultaneously. To reroute events to a different terminal, the application should first disable routing to the existing terminal and then route the events to the new terminal. Terminal identifier assignments are made by the line's service provider. Device capabilities indicate only which terminal identifiers the service provider has available. Service providers that do not support this type of event routing would indicate that they have no terminal devices (dwNumTerminals in  LINEDEVCAPS would be zero). Invoking  lineSetTerminal on a line or address affects all existing calls on that line or address, but does not affect calls on other addresses. It also sets the default for future calls on that line or address. A line or address that has multiple connected calls active at one time can have different routing in effect for each call. Disabling the routing of low-level events to a terminal when these events are not currently routed to or from that terminal does not necessarily generate an error so long as the function succeeds (the specified events are not routed to or from that terminal). TAPI routes call progress tones and messages to the same location as set by the  lineSetTerminal function for \"media\". For example, if audio signals are going to the phone, then so will busy signals (analog) or Q.931 messages indicating busy (digital). ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetTerminal",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to an open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given open line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to a call. The call state of hCall can be any state, if dwSelect is CALL."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSelect",
        "description": "Whether the terminal setting is requested for the line, the address, or just the specified call. If line or address is specified, events either apply to the line or address itself or serve as a default initial setting for all new calls on the line or address. This parameter uses one of the  LINECALLSELECT_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTerminalModes",
        "description": "Class of low-level events to be routed to the given terminal. This parameter uses one or more of the  LINETERMMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTerminalID",
        "description": "Device identifier of the terminal device where the given events are to be routed. Terminal identifiers are small integers in the range of zero to one less than dwNumTerminals, where dwNumTerminals, and the terminal modes each terminal is capable of handling, are returned by  lineGetDevCaps.     These terminal identifiers have no relation to other device identifiers and are defined by the service provider using device capabilities."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "bEnable",
        "description": "If TRUE, dwTerminalID is valid and the specified event classes are routed to or from that terminal. If FALSE, these events are not routed to or from the terminal device with identifier equal to dwTerminalID."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineSetTollList function manipulates the toll list.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_NODRIVER, LINEERR_INVALAPPHANDLE, LINEERR_NOMEM, LINEERR_INVALADDRESS, LINEERR_OPERATIONFAILED, LINEERR_INVALPARAM, LINEERR_RESOURCEUNAVAIL, LINEERR_INIFILECORRUPT, LINEERR_UNINITIALIZED, LINEERR_INVALLOCATION. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetTollList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Application handle returned by  lineInitializeEx. If an application has not yet called the  lineInitializeEx function, it can set the hLineApp parameter to zero."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Device identifier for the line device upon which the call is intended to be dialed, so that variations in dialing procedures on different lines can be applied to the translation process."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAddressIn",
        "description": "Pointer to a null-terminated string containing the address from which the prefix information is to be extracted for processing. This parameter must not be NULL, and it must be in the canonical address format."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTollListOption",
        "description": "Toll list operation to be performed. This parameter uses one and only one of the  LINETOLLLISTOPTION_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineSetupConference function sets up a conference call for the addition of the third party.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_BEARERMODEUNAVAIL, LINEERR_UNINITIALIZED, LINEERR_CALLUNAVAIL, LINEERR_INVALMEDIAMODE, LINEERR_CONFERENCEFULL, LINEERR_INVALPOINTER, LINEERR_INUSE, LINEERR_INVALRATE, LINEERR_INVALADDRESSMODE, LINEERR_NOMEM, LINEERR_INVALBEARERMODE, LINEERR_NOTOWNER, LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_INVALCALLPARAMS, LINEERR_RATEUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALLINESTATE, LINEERR_STRUCTURETOOSMALL, LINEERR_USERUSERINFOTOOBIG. ",
    "remarks": "If LINEERR_INVALLINESTATE is returned, the line is currently not in a state in which this operation can be performed. A list of currently valid operations can be found in the dwLineFeatures member (of the type  LINEFEATURE) in the  LINEDEVSTATUS structure. (Calling  lineGetLineDevStatus updates the information in  LINEDEVSTATUS.) If LINEERR_INVALMEDIAMODE is returned, check for supported media types on the line in the dwMediaModes member in the  LINEDEVCAPS structure. The  lineSetupConference function provides two ways to establish a new conference call, depending on whether a normal two-party call is required to pre-exist or not. When setting up a conference call from an existing two-party call, the hCall parameter is a valid call handle that is initially added to the conference call by the  lineSetupConference request; hLine is ignored. On switches where conference call setup does not start with an existing call, hCall must be NULL and hLine must be specified to identify the line device on which to initiate the conference call. In either case, a consultation call is allocated for connecting to the party that is to be added to the call. The application can then use  lineDial to dial the address of the other party. The conference call typically transitions into the onHoldPendingConference state, the consultation call into the dialtone state, and the initial call (if there is one) into the conferenced state. A conference call can also be set up by a  lineCompleteTransfer that is resolved into a three-way conference. The application may be able to toggle between the consultation call and the conference call using  lineSwapHold. A consultation call can be canceled by invoking  lineDrop on it. When dropping a consultation call, the existing conference call typically transitions back to the connected state. The application should observe the LINE_CALLSTATE messages to determine exactly what happens to the calls. For example, if the conference call reverts back to a regular two-party call, the conference call becomes idle and the original participant call can revert to connected. If an application specifies the handle of the original call (hCall) in a call to the  lineUnhold function, both the conference call and the consultation call typically go to idle. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetupConference",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the Initial call that identifies the first party of a conference call. In some environments (as described in device capabilities), a call must exist to start a conference call, and the application must be an owner of this call. In other telephony environments, no call initially exists, hCall must be left NULL, and hLine must be specified to identify the line on which the conference call is to be initiated. The call state of hCall must be connected."
      },
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line. This handle is used to identify the line device on which to originate the conference call if hCall is NULL. The hLine parameter is ignored if hCall is non-NULL."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConfCall",
        "description": "Pointer to an HCALL handle. This location is then loaded with a handle identifying the newly created conference call. The application is the initial sole owner of this call. The call state of hConfCall is not applicable."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConsultCall",
        "description": "Pointer to an HCALL handle. When setting up a call for the addition of a new party, a new temporary call (consultation call) is automatically allocated. Initially, the application is the sole owner for this call."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNumParties",
        "description": "Expected number of parties in the conference call. This number is passed to the service provider. The service provider is free to do as it pleases with this number: ignore it, use it as a hint to allocate the right size conference bridge inside the switch, and so on."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a  LINECALLPARAMS structure containing call parameters to use when establishing the consultation call. This parameter can be set to NULL if no special call setup parameters are desired."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetupTransfer function initiates a transfer of the call specified by the hCall parameter. It establishes a consultation call, lphConsultCall, on which the party can be dialed that can become the destination of the transfer. The application acquires owner privilege to the lphConsultCall parameter.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_BEARERMODEUNAVAIL, LINEERR_INVALRATE, LINEERR_CALLUNAVAIL, LINEERR_NOMEM, LINEERR_INUSE, LINEERR_NOTOWNER, LINEERR_INVALADDRESSMODE, LINEERR_OPERATIONFAILED, LINEERR_INVALBEARERMODE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLHANDLE, LINEERR_RATEUNAVAIL, LINEERR_INVALCALLPARAMS, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALLINESTATE, LINEERR_UNINITIALIZED, LINEERR_INVALMEDIAMODE, LINEERR_USERUSERINFOTOOBIG, LINEERR_INVALPOINTER. ",
    "remarks": "The  lineSetupTransfer function sets up the transfer of the call specified by hCall. The setup phase of a transfer establishes a consultation call that enables the application to send the address of the destination (the party to be transferred to) to the switch, while the call to be transferred is kept on hold. This new call is referred to as a consultation call (hConsultCall) and can be dropped or otherwise manipulated independently of the original call. When the consultation call has reached the dialtone call state, the application can proceed transferring the call either by dialing the destination address and tracking its progress, or by unholding an existing call. The transfer of the original call to the selected destination is completed using  lineCompleteTransfer. While the consultation call exists, the original call typically transitions to the onholdPendingTransfer state. The application may be able to toggle between the consultation call and the original call by using  lineSwapHold. A consultation call can be canceled by invoking  lineDrop on it. After dropping a consultation call, the original call typically transitions back to the connected state. If the call state of the original call is onholdPendingTransfer, the  lineUnhold function can be used to recover the call. In this case, the call state of the consultation call is set to idle. The application can also transfer calls in a single step, without having to deal with the intervening consultation call, by using  lineBlindTransfer. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetupTransfer",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be transferred. The application must be an owner of the call. The call state of hCall must be connected."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphConsultCall",
        "description": "Pointer to an hCall handle. This location is then loaded with a handle identifying the temporary consultation call. When setting up a call for transfer, a consultation call is automatically allocated that enables  lineDial to dial the address associated with the new transfer destination of the call. The originating party can carry on a conversation over this consultation call prior to completing the transfer. The call state of hConsultCall is not applicable.     This transfer procedure may not be valid for some line devices. The application may need to ignore the new consultation call and unhold an existing held call (using  lineUnhold) to identify the destination of the transfer. On switches that support cross-address call transfer, the consultation call can exist on a different address than the call to be transferred. It may also be necessary that the consultation call be set up as an entirely new call, by  lineMakeCall, to the destination of the transfer. Which forms of transfer are available are specified in the call's address capabilities."
      },
      {
        "in_out": "LPLINECALLPARAMS",
        "type": "const",
        "name": "lpCallParams",
        "description": "Pointer to a  LINECALLPARAMS structure containing the call parameters to use when establishing the consultation call. This parameter can be set to NULL if no special call setup parameters are desired."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineShutdown function shuts down the application's usage of the line abstraction of the API.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "If this function is called when the application has lines open or calls active, the call handles are deleted and TAPI automatically performs the equivalent of a  lineClose on each open line. However, it is recommended that applications explicitly close all open lines before invoking  lineShutdown. If shutdown is performed while asynchronous requests are outstanding, those requests are canceled. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineShutdown",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Application's usage handle for the line API."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineSwapHold function swaps the specified active call with the specified call on consultation hold.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "Swapping the active call with the call on consultation hold allows the application to alternate or toggle between these two calls. This is typical in call waiting. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSwapHold",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hActiveCall",
        "description": "Handle to the active call. The application must be an owner of the call. The call state of hActiveCall must be connected."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hHeldCall",
        "description": "Handle to the consultation call. The application must be an owner of the call. The call state of hHeldCall can be onHoldPendingTransfer, onHoldPendingConference, or onHold."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  lineTranslateAddress function translates the specified address into another format.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_INVALPOINTER, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_NODRIVER, LINEERR_INIFILECORRUPT, LINEERR_NOMEM, LINEERR_INVALADDRESS, LINEERR_OPERATIONFAILED, LINEERR_INVALAPPHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALCARD, LINEERR_STRUCTURETOOSMALL, LINEERR_INVALPARAM. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineTranslateAddress",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle returned by  lineInitializeEx. If a TAPI 2.x application has not yet called the  lineInitializeEx function, it can set this parameter to NULL. TAPI 1.4 applications must still call  lineInitialize first."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Device identifier of the line device upon which the call is to be dialed, so that variations in dialing procedures on different lines can be applied to the translation process."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Highest version of TAPI supported by the application (not necessarily the value negotiated by  lineNegotiateAPIVersion on some particular line device)."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAddressIn",
        "description": "Pointer to a null-terminated string that contains the address of the information that is to be extracted for translation. Must be in either the canonical address format, or an arbitrary string of dialable digits (non-canonical). This parameter must not be NULL. If the AddressIn contains a subaddress or name field, or additional addresses separated from the first address by CR and LF characters, only the first address is translated."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCard",
        "description": "Credit card to be used for dialing. This parameter is only valid if the CARDOVERRIDE bit is set in dwTranslateOptions. This parameter specifies the permanent identifier of a Card entry in the [Cards] section in the registry (as obtained from  lineTranslateCaps) that should be used instead of the PreferredCardID specified in the definition of the CurrentLocation. It does not cause the PreferredCardID parameter of the current Location entry in the registry to be modified; the override applies only to the current translation operation. This parameter is ignored if the CARDOVERRIDE bit is not set in dwTranslateOptions."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTranslateOptions",
        "description": "Associated operations to be performed prior to the translation of the address into a dialable string. This parameter uses one of the  LINETRANSLATEOPTION_ Constants.     If you have set the LINETRANSLATEOPTION_CANCELCALLWAITING bit, it is also advisable to set the LINECALLPARAMFLAGS_SECURE bit in the dwCallParamFlags member of the  LINECALLPARAMS structure (passed in to  lineMakeCall through the lpCallParams parameter). This prevents the line device from using dialable digits to suppress call interrupts."
      },
      {
        "in_out": "",
        "type": "LPLINETRANSLATEOUTPUT",
        "name": "lpTranslateOutput",
        "description": "Pointer to an application-allocated memory area to contain the output of the translation operation, of type  LINETRANSLATEOUTPUT. Prior to calling  lineTranslateAddress, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineTranslateDialog function displays an application-modal dialog box that allows the user to change the current location of a phone number about to be dialed, adjust location and calling card parameters, and see the effect.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: LINEERR_BADDEVICEID, LINEERR_INVALPARAM, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_INVALPOINTER, LINEERR_INIFILECORRUPT, LINEERR_NODRIVER, LINEERR_INUSE, LINEERR_NOMEM, LINEERR_INVALADDRESS, LINEERR_INVALAPPHANDLE, LINEERR_OPERATIONFAILED. ",
    "remarks": "In TAPI version 2.0 or later, it is possible for multiple instances of this dialog box to be opened. In TAPI versions earlier than 2.0, LINEERR_INUSE is returned if the dialog box is already displayed by another application (it cannot be open more than once). In these versions, TAPI brings the existing dialog box to the front, and the error indicates that any particulars related to the address passed in by the current application have not been handled, because that address was not processed by the function. The application must call  lineGetTranslateCaps after this function to obtain any changes the user made to the telephony address translation parameters, and call  lineTranslateAddress to obtain a dialable string based on the user's new selections. If any function related to address translation (for example,  lineGetTranslateCaps or  lineTranslateAddress) returns LINEERR_INIFILECORRUPT, the application should call  lineTranslateDialog. The  lineTranslateDialog function detects the errors and corrects them, and reports the action taken to the user. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineTranslateDialog",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Application handle returned by  lineInitializeEx. If an application has not yet called the  lineInitializeEx function, it can set the hLineApp parameter to zero."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Device identifier for the line device upon which the call is intended to be dialed, so that variations in dialing procedures on different lines can be applied to the translation process."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Highest version of TAPI supported by the application (not necessarily the value negotiated by  lineNegotiateAPIVersion on the line device indicated by dwDeviceID)."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which the dialog box is to be attached. Can be a NULL value to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAddressIn",
        "description": "Pointer to a null-terminated string containing a phone number that is used, in the lower portion of the dialog box, to show the effect of the user's changes on the location parameters. The number must be in canonical format; if noncanonical, the phone number portion of the dialog box is not displayed. This pointer can be left NULL, in which case the phone number portion of the dialog box is not displayed. If the lpszAddressIn parameter contains a subaddress or name field, or additional addresses separated from the first address by CR and LF characters, only the first address is used in the dialog box."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineUncompleteCall function cancels the specified call completion request on the specified line.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALLINEHANDLE, LINEERR_OPERATIONFAILED, LINEERR_INVALCOMPLETIONID, LINEERR_RESOURCEUNAVAIL, LINEERR_NOMEM, LINEERR_UNINITIALIZED, LINEERR_OPERATIONUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineUncompleteCall",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device on which a call completion is to be canceled."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCompletionID",
        "description": "Completion identifier for the request that is to be canceled."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  lineUnhold function retrieves the specified held call.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALCALLHANDLE, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALCALLSTATE, LINEERR_OPERATIONFAILED, LINEERR_NOMEM, LINEERR_RESOURCEUNAVAIL, LINEERR_NOTOWNER, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineUnhold",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "Handle to the call to be retrieved. The application must be an owner of this call. The call state of hCall must be onHold, onHoldPendingTransfer, or onHoldPendingConference."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineUnpark function retrieves the call parked at the specified address and returns a call handle for it.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously, or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  LINE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: LINEERR_INVALADDRESS, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALADDRESSID, LINEERR_OPERATIONFAILED, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_UNINITIALIZED, LINEERR_NOMEM. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineUnpark",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device on which a call is to be unparked."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on hLine at which the unpark is to be originated. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPHCALL",
        "name": "lphCall",
        "description": "Pointer to the location of type HCALL where the handle to the unparked call is returned. This handle is unrelated to any other handle that might have been previously associated with the retrieved call, such as the handle that might have been associated with the call when it was originally parked. The application is the initial sole owner of this call."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDestAddress",
        "description": "Pointer to a null-terminated character buffer that contains the address where the call is parked. The address is in standard dialable address format."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  phoneCallbackFunc function is a placeholder for the application-supplied function name.",
    "library": "",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "This callback function does not return a value. ",
    "remarks": "For more information about the parameters passed to this callback function, see  TAPI Messages. All callbacks occur in the application's context. The callback function must reside in a dynamic-link library (DLL) or application module and be exported in the module-definition file. ",
    "return_type": "void PASCAL",
    "category": "TAPI",
    "name": "phoneCallbackFunc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "Handle to a phone device associated with the callback."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMsg",
        "description": "Line or call device message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCallbackInstance",
        "description": "Callback instance data passed back to the application in the callback. This DWORD is not interpreted by TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam1",
        "description": "Parameter for the message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam2",
        "description": "Parameter for the message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam3",
        "description": "Parameter for the message."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  phoneClose function closes the specified open phone device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_OPERATIONFAILED, PHONEERR_RESOURCEUNAVAIL, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED. ",
    "remarks": "After the open phone device has been successfully closed, the implementation sends a  PHONE_CLOSE message to the application. These messages can also be sent unsolicited as a result of the phone device being reclaimed somehow. An application should therefore be prepared to handle these unsolicited close messages. At the time the phone device is closed, any outstanding asynchronous replies are suppressed. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneClose",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device to be closed. If the function succeeds, the handle is no longer valid."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneConfigDialog function causes the provider of the specified phone device to display a modal dialog box (attached to the application's hwndOwner parameter) that allows the user to configure parameters related to the phone device specified by dwDeviceID.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_BADDEVICEID, PHONEERR_NOMEM, PHONEERR_INUSE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPARAM, PHONEERR_OPERATIONUNAVAIL, PHONEERR_INVALDEVICECLASS, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_UNINITIALIZED, PHONEERR_NODEVICE. ",
    "remarks": "The lpszDeviceClass parameter allows the application to select a specific subscreen of configuration information applicable to the device class in which the user is interested; the permitted strings are the same as for  phoneGetID. For example, if the phone supports the wave API, passing \"wave/in\" as lpszDeviceClass would cause the provider to display the parameters related specifically to wave (or at least to start at the corresponding point in a multilevel configuration dialog box chain, eliminating the need to search for relevant parameters). The lpszDeviceClass parameter should be \"tapi/phone\", \"\", or NULL to cause the provider to display the highest level configuration for the phone. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneConfigDialog",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device to be configured."
      },
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Handle to a window to which the dialog box is to be attached. Can be a NULL value to indicate that any window created during the function should have no owner window."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that identifies a device class name. This device class allows the application to select a specific subscreen of configuration information applicable to that device class. This parameter is optional and can be left NULL or empty, in which case the highest level configuration is selected."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneDevSpecific function is used as a general extension mechanism to enable a Telephony API implementation to provide features not described in the other TAPI functions. The meanings of these extensions are device specific.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONFAILED. Additional return values are device specific. ",
    "remarks": "This operation provides a generic parameter profile. The interpretation of the parameter block is device specific. Indications and replies that are device specific should use the  PHONE_DEVSPECIFIC message. A service provider can provide access to device-specific functions by defining parameters for use with this operation. Applications that want to make use of these device-specific extensions should consult the device-specific (vendor-specific) documentation that describes which extensions are defined. Typically, an application that relies on these device-specific extensions is not portable to work with other service-provider environments. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneDevSpecific",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to a phone device."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpParams",
        "description": "Pointer to a memory area used to hold a parameter block. Its interpretation is device specific. The contents of the parameter block are passed unchanged to or from the service provider by TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the parameter block area, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetButtonInfo function returns information about the specified button.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALBUTTONLAMPID, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONESTATE, PHONEERR_STRUCTURETOOSMALL, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetButtonInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonLampID",
        "description": "Button on the phone device."
      },
      {
        "in_out": "",
        "type": "LPPHONEBUTTONINFO",
        "name": "lpButtonInfo",
        "description": "Pointer to a variably sized structure of type  PHONEBUTTONINFO. This data structure describes the mode and the function, and provides additional descriptive text corresponding to the button."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  phoneGetData function uploads the information from the specified location in the open phone device to the specified buffer.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALDATAID, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "The function uploads a maximum of dwSize bytes from the phone device into the memory area pointed to by lpData. If dwSize is zero, nothing is copied. The size of each data area is listed in the phone's device capabilities. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetData",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDataID",
        "description": "Where in the phone device the buffer is to be uploaded from."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpData",
        "description": "Pointer to the memory buffer where the data is to be uploaded."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the data buffer, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  phoneGetDevCaps function queries a specified phone device to determine its telephony capabilities.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPHANDLE, PHONEERR_INVALPOINTER, PHONEERR_BADDEVICEID, PHONEERR_OPERATIONFAILED, PHONEERR_INCOMPATIBLEAPIVERSION, PHONEERR_OPERATIONUNAVAIL, PHONEERR_INCOMPATIBLEEXTVERSION, PHONEERR_NOMEM, PHONEERR_STRUCTURETOOSMALL, PHONEERR_RESOURCEUNAVAIL, PHONEERR_NODRIVER, PHONEERR_UNINITIALIZED, PHONEERR_NODEVICE. ",
    "remarks": "Before using  phoneGetDevCaps, the application must negotiate the TAPI version number to use (see  phoneNegotiateAPIVersion) and, optionally, the extension version to use (see  phoneNegotiateExtVersion). TAPI and extension version numbers are those under which TAPI, Telephony DLL, and service provider must operate. If version ranges do not overlap, the application and API or service-provider versions are incompatible and an error is returned. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetDevCaps",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "Version number of the Telephony API to be used. The high-order word contains the major version number; the low-order word contains the minor version number. This number is obtained with the function  phoneNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtVersion",
        "description": "Version number of the service provider-specific extensions to be used. This number is obtained with the function  phoneNegotiateExtVersion. It can be left zero if no device-specific extensions are to be used. Otherwise, the high-order word contains the major version number; the low-order word contains the minor version number."
      },
      {
        "in_out": "",
        "type": "LPPHONECAPS",
        "name": "lpPhoneCaps",
        "description": "Pointer to a variably sized structure of type  PHONECAPS. Upon successful completion of the request, this structure is filled with phone device capabilities information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  phoneGetDisplay function returns the current contents of the specified phone display.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONESTATE, PHONEERR_STRUCTURETOOSMALL, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED, PHONEERR_NOMEM. ",
    "remarks": "The lpDisplay memory area should be at least (dwDisplayNumRows * dwDisplayNumColumns) elements in size to receive all of the display information. The dwDisplayNumRows and dwDisplayNumColumns members are available in the  PHONECAPS structure returned by  phoneGetDevCaps. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetDisplay",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpDisplay",
        "description": "Pointer to the memory location where the display content is to be stored, of type  VARSTRING."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetGain function returns the gain setting of the microphone of the specified phone's hookswitch device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALHOOKSWITCHDEV, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetGain",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchDev",
        "description": "Hookswitch device whose gain level is queried. The dwHookSwitchDev parameter can have only one bit set. This parameter uses one and only one of the  PHONEHOOKSWITCHDEV_ Constants."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwGain",
        "description": "Pointer to a DWORD containing the current gain setting of the hookswitch microphone component. The dwGain parameter specifies the volume level of the hookswitch device. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of gain settings in this range are service provider-specific."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  phoneGetHookSwitch function returns the current hookswitch mode of the specified open phone device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED. ",
    "remarks": "After the hookswitch state of a device changes, and if hookswitch monitoring is enabled, the application is sent a  PHONE_STATE message. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetHookSwitch",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwHookSwitchDevs",
        "description": "Pointer to a DWORD to be filled with the mode of the phone's hookswitch devices. If a bit position is FALSE, the corresponding hookswitch device is onhook; if TRUE, the microphone and/or speaker part of the corresponding hookswitch device is offhook. To find out whether the microphone and/or speaker are enabled, the application can use  phoneGetStatus. This parameter uses one or more of the  PHONEHOOKSWITCHDEV_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetIcon function allows an application to retrieve a service phone device-specific (or provider-specific) icon that can be displayed to the user.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_BADDEVICEID, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALDEVICECLASS, PHONEERR_UNINITIALIZED, PHONEERR_NOMEM, PHONEERR_NODEVICE. ",
    "remarks": "The  phoneGetIcon function causes the provider to return a handle (in lphIcon) to an icon resource (obtained from  LoadIcon) associated with the specified phone. The icon handle is for a resource associated with the provider; the application must use  CopyIcon if it wants to reference the icon after the provider is unloaded, which is unlikely to happen as long as the application has the phone open. The lpszDeviceClass parameter allows the provider to return different icons based on the type of service being referenced by the caller. The permitted strings are the same as for  phoneGetID. For example, if the phone supports the Comm API, passing \"COMM\" as lpszDeviceClass causes the provider to return an icon related specifically to the Comm device functions of the service provider. The parameters \"tapi/phone\", \"\", or NULL can be used to request the icon for the phone service. For applications using a TAPI version earlier than 2.0, if the provider does not return an icon (whether because the given device class is invalid or the provider does not support icons), TAPI substitutes a generic  Telephony phone device icon. For applications using TAPI version 2.0 or later, TAPI substitutes the default phone icon only if the lpszDeviceClass parameter is \"tapi/phone\", \"\", or NULL. For any other device class, if the given device class is not valid or the provider does not support icons for the class,  phoneGetIcon returns PHONEERR_INVALDEVICECLASS. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetIcon",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device whose icon is requested."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that identifies a device class name. This device class allows the application to select a specific sub-icon applicable to that device class. This parameter is optional and can be left NULL or empty, in which case the highest-level icon associated with the phone device rather than a specified media stream device would be selected."
      },
      {
        "in_out": "",
        "type": "LPHICON",
        "name": "lphIcon",
        "description": "Pointer to a memory location in which the handle to the icon is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetID function returns a device identifier for the given device class associated with the specified phone device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALDEVICECLASS, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONFAILED, PHONEERR_STRUCTURETOOSMALL, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "The  phoneGetID function can be used to retrieve a phone device identifier given a phone handle. It can also be used to obtain the device identifier of the media device (for device classes such as COM, wave, MIDI, phone, line, or NDIS) associated with the opened phone device. The names of these device class are not case sensitive. This identifier can then be used with the appropriate media API to select the corresponding device. See  TAPI Device Classes for device class names. A vendor that defines a device-specific media type also needs to define the corresponding device-specific (proprietary) API to manage devices of the media type. To avoid collisions on device class names assigned independently by different vendors, a vendor should select a name that uniquely identifies both the vendor and, following it, the media type. For example: \"intel/video\". ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetID",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to an open phone device."
      },
      {
        "in_out": "",
        "type": "LPVARSTRING",
        "name": "lpDeviceID",
        "description": "Pointer to a data structure of type  VARSTRING where the device identifier is returned. Upon successful completion of the request, this location is filled with the device identifier. The format of the returned information depends on the method used by the device class (API) for naming devices."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszDeviceClass",
        "description": "Pointer to a null-terminated string that specifies the device class of the device whose identifier is requested. Valid device class strings are those used in the System.ini section to identify device classes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetLamp function returns the current lamp mode of the specified lamp.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALBUTTONLAMPID, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONESTATE, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "Phone sets that have multiple lamps per button should be modeled using multiple button/lamp pairs. Each extra button/lamp pair should use a DUMMY button. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetLamp",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonLampID",
        "description": "Identifier of the lamp to be queried."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwLampMode",
        "description": "Pointer to a memory location that holds the lamp mode status of the given lamp. This parameter uses one and only one of the  PHONELAMPMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetMessage function returns the next TAPI message that is queued for delivery to an application that is using the Event Handle notification mechanism (see  phoneInitializeEx for further details).",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPHANDLE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPOINTER, PHONEERR_NOMEM. ",
    "remarks": "If this function has been called with a nonzero timeout and the application calls  phoneShutdown on another thread, this function returns immediately with PHONEERR_INVALAPPHANDLE. If the timeout expires (or was zero) and no message could be fetched from the queue, the function returns with the error PHONEERR_OPERATIONFAILED. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetMessage",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Handle returned by  phoneInitializeEx. The application must have set the PHONEINITIALIZEEXOPTION_USEEVENT option in the dwOptions member of the  PHONEINITIALIZEEXPARAMS structure."
      },
      {
        "in_out": "",
        "type": "LPPHONEMESSAGE",
        "name": "lpMessage",
        "description": "Pointer to a  PHONEMESSAGE structure. Upon successful return from this function, the structure contains the next message that had been queued for delivery to the application."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTimeout",
        "description": "Time-out interval, in milliseconds. The function returns if the interval elapses, even if no message can be returned. If dwTimeout is zero, the function checks for a queued message and returns immediately. If dwTimeout is INFINITE, the function's time-out interval never elapses."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetRing function enables an application to query the specified open phone device as to its current ring mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPHONESTATE, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED. ",
    "remarks": "The service provider defines the actual audible ringing patterns corresponding to each of the phone's ring modes. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetRing",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwRingMode",
        "description": "Ringing pattern with which the phone is ringing. Zero indicates that the phone is not ringing."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwVolume",
        "description": "Volume level with which the phone is ringing. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of volume settings in this range are service provider-specific."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  phoneGetStatus function enables an application to query the specified open phone device for its overall status.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_OPERATIONFAILED, PHONEERR_STRUCTURETOOSMALL, PHONEERR_OPERATIONUNAVAIL, PHONEERR_UNINITIALIZED. ",
    "remarks": "An application can use this function to determine the current state of an open phone device. The status information describes information about the phone device's hookswitch devices, ringer, volume, display, and lamps. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device to be queried."
      },
      {
        "in_out": "",
        "type": "LPPHONESTATUS",
        "name": "lpPhoneStatus",
        "description": "Pointer to a variably sized data structure of type  PHONESTATUS, which is loaded with the returned information about the phone's status."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  phoneGetStatusMessages function returns which phone-state changes on the specified phone device generate a callback to the application.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_OPERATIONFAILED, PHONEERR_UNINITIALIZED. ",
    "remarks": "An application can use  phoneGetStatusMessages to query the generation of the corresponding messages. Message generation can be controlled by  phoneGetStatusMessages. All phone status messages are disabled by default. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetStatusMessages",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device to be monitored."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwPhoneStates",
        "description": "Pointer to a DWORD holding zero, one or more of the  PHONESTATE_ Constants. These flags specify the set of phone status changes and events for which the application can receive notification messages. Monitoring can be individually enabled and disabled."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwButtonModes",
        "description": "Pointer to a DWORD containing flags that specify the set of phone-button modes for which the application can receive notification messages. This parameter uses zero, one or more of the  PHONEBUTTONMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwButtonStates",
        "description": "Pointer to a DWORD that contains flags specifying the set of phone button state changes for which the application can receive notification messages. This parameter uses zero, one or more of the  PHONEBUTTONSTATE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneGetVolume function returns the volume setting of the specified phone's hookswitch device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPHONESTATE, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALHOOKSWITCHDEV, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneGetVolume",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchDev",
        "description": "A single hookswitch device whose volume level is queried. This parameter uses one of the  PHONEHOOKSWITCHDEV_ Constants."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwVolume",
        "description": "Pointer to a DWORD. The function returns the current volume setting of the hookswitch device in this location. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of volume settings in this range are service provider-specific."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  phoneInitialize function is obsolete. It continues to be exported by Tapi.dll and Tapi32.dll for backward compatibility with applications using TAPI versions 1.3 and 1.4.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPNAME, PHONEERR_INIFILECORRUPT, PHONEERR_INVALPOINTER, PHONEERR_NOMEM, PHONEERR_OPERATIONFAILED, PHONEERR_REINIT, PHONEERR_RESOURCEUNAVAIL, PHONEERR_NODEVICE, PHONEERR_NODRIVER, PHONEERR_INVALPARAM ",
    "remarks": "The application can refer to individual phone devices by using phone device identifiers that range from zero to dwNumDevs minus one. An application should not assume that these phone devices are capable of anything beyond what is specified by the Assisted Telephony subset without first querying their device capabilities with the  phoneGetDevCaps function. Applications should not invoke  phoneInitialize without subsequently opening a phone (at least for monitoring). If the application is not monitoring and not using any devices, it should call  phoneShutdown so that memory resources allocated by TAPI can be released if unneeded, and TAPI itself can be unloaded from memory while not needed. Another reason for performing a  phoneShutdown is that if a user changes the device configuration (adds or removes a line or phone), there is no way for TAPI to notify an application that has a line or phone handle open at the time. After a reconfiguration has taken place, causing a PHONESTATE_REINIT message to be sent, no applications can open a device until all applications have performed a  phoneShutdown. If any service provider fails to initialize properly, the  phoneInitialize function fails and returns the error indicated by the service provider. If the PHONEERR_INVALPARAM error value is returned, the specified hInstance parameter is invalid. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneInitialize",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPHPHONEAPP",
        "name": "lphPhoneApp",
        "description": "Pointer to a location that is filled with the application's usage handle for TAPI."
      },
      {
        "in_out": "",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Instance handle of the client application or DLL."
      },
      {
        "in_out": "",
        "type": "PHONECALLBACK",
        "name": "lpfnCallback",
        "description": "Address of a callback function that is invoked to determine status and events on the phone device."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszAppName",
        "description": "Pointer to a null-terminated string that contains displayable characters. If this parameter is non-NULL, it contains an application-supplied name of the application. This name is provided in the  PHONESTATUS structure to indicate, in a user-friendly way, which application is the current owner of the phone device. This information can be useful for logging and status reporting purposes. If lpszAppName is NULL, the application's filename is used instead."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwNumDevs",
        "description": "Pointer to DWORD. This location is loaded with the number of phone devices available to the application."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  phoneInitializeEx function initializes the application's use of TAPI for subsequent use of the phone abstraction. It registers the application's specified notification mechanism and returns the number of phone devices available to the application. A phone device is any device that provides an implementation for the phone-prefixed functions in the Telephony API.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPNAME, PHONEERR_OPERATIONFAILED, PHONEERR_INIFILECORRUPT, PHONEERR_INVALPOINTER, PHONEERR_REINIT, PHONEERR_NOMEM, PHONEERR_INVALPARAM. ",
    "remarks": "Applications must select one of three mechanisms by which TAPI notifies the application of telephony events: Hidden Window, Event Handle, or Completion Port. When a multithreaded application is using the Event Handle mechanism and more than one thread is waiting on the handle, or the Completion Port notification mechanism and more than one thread is waiting on the port, it is possible for telephony events to be processed out of sequence. This is not due to the sequence of delivery of events from TAPI, but would be caused by the time slicing of threads or the execution of threads on separate processors. If PHONEERR_REINIT is returned and TAPI reinitialization has been requested (for example, as a result of adding or removing a telephony service provider), then  phoneInitializeEx requests are rejected with this error until the last application shuts down its usage of the API (using  phoneShutdown). At that time, the new configuration becomes effective and applications are once again permitted to call  phoneInitializeEx. If the PHONEERR_INVALPARAM error value is returned, the specified hInstance parameter is invalid. The application can refer to individual phone devices by using phone device identifiers that range from zero to dwNumDevs minus one. An application should not assume that these phone devices are capable of any particular TAPI function without first querying their device capabilities by  phoneGetDevCaps. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneInitializeEx",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPHPHONEAPP",
        "name": "lphPhoneApp",
        "description": "Pointer to a location that is filled with the application's usage handle for TAPI."
      },
      {
        "in_out": "",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Instance handle of the client application or DLL. The application or DLL can pass NULL for this parameter, in which case TAPI uses the module handle of the root executable of the process."
      },
      {
        "in_out": "",
        "type": "PHONECALLBACK",
        "name": "lpfnCallback",
        "description": "Address of a callback function that is invoked to determine status and events on the line device, addresses, or calls, when the application is using the \"hidden window\" method of event notification (for more information see  phoneCallbackFunc). This parameter is ignored and should be set to NULL when the application chooses to use the \"event handle\" or \"completion port\" event notification mechanisms."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpszFriendlyAppName",
        "description": "Pointer to a null-terminated string that contains only displayable characters. If this parameter is not NULL, it contains an application-supplied name for the application. This name is provided in the  PHONESTATUS structure to indicate, in a user-friendly way, which application has ownership of the phone device. If lpszFriendlyAppName is NULL, the application's module filename is used instead (as returned by the function  GetModuleFileName)."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwNumDevs",
        "description": "Pointer to a DWORD. Upon successful completion of this request, this location is filled with the number of phone devices available to the application."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAPIVersion",
        "description": "Pointer to a DWORD. The application must initialize this DWORD, before calling this function, to the highest API version it is designed to support (for example, the same value it would pass into dwAPIHighVersion parameter of  phoneNegotiateAPIVersion). Artificially high values must not be used; the value must be accurately set. TAPI translates any newer messages or structures into values or formats supported by the application's version. Upon successful completion of this request, this location is filled with the highest API version supported by TAPI, thereby allowing the application to detect and adapt to having been installed on a system with an older version of TAPI."
      },
      {
        "in_out": "",
        "type": "LPPHONEINITIALIZEEXPARAMS",
        "name": "lpPhoneInitializeExParams",
        "description": "Pointer to a structure of type  PHONEINITIALIZEEXPARAMS containing additional parameters used to establish the association between the application and TAPI (specifically, the application's selected event notification mechanism and associated parameters)."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  phoneNegotiateAPIVersion allows an application to negotiate an API version to use for the specified phone device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPHANDLE, PHONEERR_OPERATIONFAILED, PHONEERR_BADDEVICEID, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NODRIVER, PHONEERR_NOMEM, PHONEERR_INVALPOINTER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INCOMPATIBLEAPIVERSION, PHONEERR_UNINITIALIZED, PHONEERR_NODEVICE. ",
    "remarks": "The  phoneNegotiateAPIVersion function is used to negotiate the API version number to use with the specified phone device. It returns the extension identifier supported by the phone device, or zeros if no extensions are provided. If the application wants to use the extensions defined by the returned extension identifier, it must call  phoneNegotiateExtVersion to negotiate the extension version to use. Use  phoneInitializeEx to determine the number of phone devices present in the system. The device identifier specified by dwDeviceID varies from zero to one less than the number of phone devices present. The API version number negotiated is that under which TAPI can operate. If version ranges do not overlap, the application, API, or service-provider versions are incompatible and an error is returned. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneNegotiateAPIVersion",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPILowVersion",
        "description": "Least recent API version the application is compliant with. The high-order word is the major version number, the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIHighVersion",
        "description": "Most recent API version the application is compliant with. The high-order word is the major version number, the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwAPIVersion",
        "description": "Pointer to a DWORD in which the API version number that was negotiated will be returned. If negotiation succeeds, this number is in the range dwAPILowVersion to dwAPIHighVersion."
      },
      {
        "in_out": "",
        "type": "LPPHONEEXTENSIONID",
        "name": "lpExtensionID",
        "description": "Pointer to a structure of type  PHONEEXTENSIONID. If the service provider for the specified dwDeviceID parameter supports provider-specific extensions, this structure is filled with the extension identifier of these extensions when negotiation succeeds. This structure contains all zeros if the line provides no extensions. An application can ignore the returned parameter if it does not use extensions."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  phoneNegotiateExtVersion function allows an application to negotiate an extension version to use with the specified phone device. This operation need not be called if the application does not support extensions.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPHANDLE, PHONEERR_OPERATIONFAILED, PHONEERR_BADDEVICEID, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NODRIVER, PHONEERR_NOMEM, PHONEERR_INCOMPATIBLEAPIVERSION, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INCOMPATIBLEEXTVERSION, PHONEERR_UNINITIALIZED, PHONEERR_INVALPOINTER, PHONEERR_NODEVICE. ",
    "remarks": "The  phoneNegotiateExtVersion function is used to negotiate the API version number to use. It returns the extension identifier supported by the phone device, or zeros if no extensions are provided. In order for the application to use the extensions defined by the returned extension identifier, it must call  phoneNegotiateExtVersion to negotiate the extension version to use. Use  phoneInitializeEx to determine the number of phone devices present in the system. The device identifier specified by dwDeviceID varies from zero to one less than the number of phone devices present. The extension version number negotiated is that under which the application and service provider must both operate. If version ranges do not overlap, the application and service-provider versions are incompatible and an error is returned. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneNegotiateExtVersion",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "API version number that was negotiated for the specified phone device using  phoneNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtLowVersion",
        "description": "Least recent extension version of the extension identifier returned by  phoneNegotiateAPIVersion that the application is compliant with. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtHighVersion",
        "description": "Most recent extension version of the extension identifier returned by  phoneNegotiateAPIVersion that the application is compliant with. The high-order word is the major version number; the low-order word is the minor version number."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "lpdwExtVersion",
        "description": "Pointer to a DWORD in which the extension version number that was negotiated is returned. If negotiation succeeds, this number is in the range dwExtLowVersion to dwExtHighVersion."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 7,
    "description": "The  phoneOpen function opens the specified phone device. A phone device can be opened using either owner privilege or monitor privilege. An application that opens the phone with owner privilege can control the phone's lamps, display, ringer, and hookswitch or hookswitches. An application that opens the phone device with monitor privilege is notified only about events that occur at the phone, such as hookswitch changes or button presses.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_ALLOCATED, PHONEERR_NODRIVER, PHONEERR_BADDEVICEID, PHONEERR_NOMEM, PHONEERR_INCOMPATIBLEAPIVERSION, PHONEERR_OPERATIONFAILED, PHONEERR_INCOMPATIBLEEXTVERSION, PHONEERR_OPERATIONUNAVAIL, PHONEERR_INVALAPPHANDLE, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPOINTER, PHONEERR_UNINITIALIZED, PHONEERR_INVALPRIVILEGE, PHONEERR_REINIT, PHONEERR_INUSE, PHONEERR_NODEVICE, PHONEERR_INIFILECORRUPT. ",
    "remarks": "When opening a phone device with monitor privileges, the application is sent messages when events occur that change the status of the phone. Messages sent to the application include  PHONE_BUTTON and  PHONE_STATE. The latter provides an indication of the phone's status item that has changed. When opening a phone with owner privilege, the phone device can be manipulated in ways that affect the state of the phone device. An application should only open a phone using owner privilege if it actively wants to manipulate the phone device, and it should close the phone device when finished to allow other applications to control the phone. When an application opens a phone device, it must specify the negotiated API version and, if it wants to use the phone's extensions, the phone's device-specific extension version. This version number should have been obtained with the  phoneNegotiateAPIVersion and  phoneNegotiateExtVersion functions. Version numbering allows the mix and match of different application versions with different API versions and service-provider versions. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneOpen",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Identifier of the phone device to be opened."
      },
      {
        "in_out": "",
        "type": "LPHPHONE",
        "name": "lphPhone",
        "description": "Pointer to an HPHONE handle that identifies the open phone device. Use this handle to identify the device when invoking other phone control functions."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAPIVersion",
        "description": "API version number under which the application and Telephony API have agreed to operate. This number is obtained from  phoneNegotiateAPIVersion."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwExtVersion",
        "description": "Extension version number under which the application and the service provider agree to operate. This number is zero if the application does not use any extensions. This number is obtained from  phoneNegotiateExtVersion."
      },
      {
        "in_out": "",
        "type": "DWORD_PTR",
        "name": "dwCallbackInstance",
        "description": "User instance data passed back to the application with each message. This parameter is not interpreted by the Telephony API."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPrivilege",
        "description": "Privilege requested. This parameter uses one and only one of the  PHONEPRIVILEGE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetButtonInfo function sets information about the specified button on the specified phone.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALBUTTONLAMPID, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONEHANDLE, PHONEERR_STRUCTURETOOSMALL, PHONEERR_INVALPOINTER, PHONEERR_UNINITIALIZED, PHONEERR_NOTOWNER, PHONEERR_NOMEM, PHONEERR_OPERATIONUNAVAIL, PHONEERR_RESOURCEUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetButtonInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonLampID",
        "description": "Button on the phone device."
      },
      {
        "in_out": "LPPHONEBUTTONINFO",
        "type": "const",
        "name": "lpButtonInfo",
        "description": "Pointer to a variably sized structure of type  PHONEBUTTONINFO. This data structure describes the mode, the function, and provides additional descriptive text about the button."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  phoneSetData function downloads the information in the specified buffer to the opened phone device at the selected data identifier.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NOTOWNER, PHONEERR_NOMEM, PHONEERR_INVALDATAID, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPOINTER, PHONEERR_UNINITIALIZED. ",
    "remarks": "The  phoneSetData function downloads a maximum of dwSize bytes from lpData to the phone device. The format of the data, its meaning to the phone device, and the meaning of the data identifier are service provider-specific. The data in the buffer or the selection of a data identifier may act as commands to the phone device. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetData",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDataID",
        "description": "Where in the phone device the buffer is to be downloaded."
      },
      {
        "in_out": "LPVOID",
        "type": "const",
        "name": "lpData",
        "description": "Pointer to the memory location where the data is to be downloaded from."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the buffer, in bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  phoneSetDisplay function causes the specified string to be displayed on the specified open phone device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NOTOWNER, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONESTATE, PHONEERR_UNINITIALIZED, PHONEERR_INVALPOINTER, PHONEERR_NOMEM, PHONEERR_INVALPARAM, PHONEERR_RESOURCEUNAVAIL. ",
    "remarks": "The specified display information is written to the phone's display, starting at the specified positions. This operation overwrites previously displayed information. If the amount of information exceeds the size of the display, the information is truncated. The amount of information that can be displayed is at most (dwNumRows * dwNumColumns) elements in size. dwNumRows and dwNumColumns are available in the  PHONECAPS structure, which is returned by  phoneGetDevCaps; they are zero-based. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetDisplay",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRow",
        "description": "Row position on the display where the new text is to be displayed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwColumn",
        "description": "Column position on the display where the new text is to be displayed."
      },
      {
        "in_out": "",
        "type": "LPCSTR",
        "name": "lpsDisplay",
        "description": "Pointer to the memory location where the display content is stored. The display information must have the format specified in the dwStringFormat member of the  PHONECAPS structure, which describes the phone's device capabilities."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the information pointed to by lpsDisplay, in bytes. If the lpsDisplay parameter is a pointer to a string, the size must include the null terminator."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetGain function sets the gain of the microphone of the specified hookswitch device to the specified gain level.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_NOTOWNER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALHOOKSWITCHDEV, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetGain",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchDev",
        "description": "Hookswitch device whose microphone's gain is to be set. This parameter uses one and only one of the  PHONEHOOKSWITCHDEV_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwGain",
        "description": "Pointer to a DWORD containing the new gain setting of the device. The dwGain parameter specifies the gain level of the hookswitch device. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of gain settings in this range are service provider-specific. A value for dwGain that is out of range is set to the nearest value in the range."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetHookSwitch function sets the hook state of the specified open phone's hookswitch devices to the specified mode. Only the hookswitch state of the hookswitch devices listed is affected.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NOTOWNER, PHONEERR_NOMEM, PHONEERR_INVALHOOKSWITCHDEV, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALHOOKSWITCHMODE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALPHONESTATE, PHONEERR_UNINITIALIZED. ",
    "remarks": "The hookswitch mode is the same for all specified devices. If different settings are desired, this function can be invoked multiple times with a different set of parameters. A  PHONE_STATE message is sent to the application after the hookswitch state has changed. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetHookSwitch",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchDevs",
        "description": "Device whose hookswitch mode is to be set. This parameter uses one and only one of the  PHONEHOOKSWITCHDEV_ Constants.      PHONEHOOKSWITCHDEV_HANDSET  The phone's handset.  PHONEHOOKSWITCHDEV_SPEAKER  The phone's speakerphone or adjunct.  PHONEHOOKSWITCHDEV_HEADSET  The phone's headset."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchMode",
        "description": "Hookswitch mode to set. This parameter uses one and only one of the  PHONEHOOKSWITCHMODE_ Constants.      PHONEHOOKSWITCHMODE_ONHOOK  The device's microphone and speaker are both onhook.  PHONEHOOKSWITCHMODE_MIC  The device's microphone is active, the speaker is mute.  PHONEHOOKSWITCHMODE_SPEAKER  The device's speaker is active, the microphone is mute.  PHONEHOOKSWITCHMODE_MICSPEAKER  The device's microphone and speaker are both active."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetLamp function causes the specified lamp to be lit on the specified open phone device in the specified lamp mode.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_OPERATIONUNAVAIL, PHONEERR_NOTOWNER, PHONEERR_NOMEM, PHONEERR_INVALBUTTONLAMPID, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALLAMPMODE, PHONEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetLamp",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonLampID",
        "description": "Button whose lamp is to be lit."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwLampMode",
        "description": "How the lamp is to be lit. This parameter uses one and only one of the  PHONELAMPMODE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetRing function rings the specified open phone device using the specified ring mode and volume.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_NOTOWNER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALRINGMODE, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "The service provider defines the actual audible ringing patterns corresponding to each of the phone's ring modes. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetRing",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwRingMode",
        "description": "Ringing pattern with which to ring the phone. This parameter must be within the range of zero to the value of the dwNumRingModes member in the  PHONECAPS structure. If dwNumRingModes is zero, the ring mode of the phone cannot be controlled; if dwNumRingModes is 1, a value of 0 for dwRingMode indicates that the phone should not be rung (silence), and other values from 1 to dwNumRingModes are valid ring modes for the phone device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwVolume",
        "description": "Volume level with which the phone is ringing. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of volume settings in this range are service provider-specific. A value for dwVolume that is out of range is set to the nearest value in the range."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  phoneSetStatusMessages function enables an application to monitor the specified phone device for selected status events.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_INVALPHONESTATE, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALBUTTONMODE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALBUTTONSTATE, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "An application can use the  phoneSetStatusMessages function to enable or disable the generation of the corresponding messages. All phone status messages are disabled by default. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetStatusMessages",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device to be monitored."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPhoneStates",
        "description": "Set of phone status changes and events for which the application can receive notification messages. This parameter can have zero, one, or more of the  PHONESTATE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonModes",
        "description": "Set of phone-button modes for which the application can receive notification messages. This parameter can have zero, one, or more of the  PHONEBUTTONMODE_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwButtonStates",
        "description": "Set of phone-button state changes for which the application can receive notification messages. If the dwButtonModes parameter is zero, dwButtonStates is ignored. If dwButtonModes has one or more bits set, this parameter must also have at least one bit set. This parameter uses the  PHONEBUTTONSTATE_ Constants."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  phoneSetVolume function sets the volume of the speaker component of the specified hookswitch device to the specified level.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the function is completed asynchronously or a negative error number if an error occurs. The dwParam2 parameter of the corresponding  PHONE_REPLY message is zero if the function succeeds or it is a negative error number if an error occurs. Possible return values are: PHONEERR_INVALPHONEHANDLE, PHONEERR_NOMEM, PHONEERR_NOTOWNER, PHONEERR_RESOURCEUNAVAIL, PHONEERR_INVALPHONESTATE, PHONEERR_OPERATIONFAILED, PHONEERR_INVALHOOKSWITCHDEV, PHONEERR_UNINITIALIZED, PHONEERR_OPERATIONUNAVAIL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneSetVolume",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONE",
        "name": "hPhone",
        "description": "Handle to the open phone device. The application must be the owner of the phone."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwHookSwitchDev",
        "description": "Hookswitch device whose speaker's volume is to be set, one of the  PHONEHOOKSWITCHDEV_ Constants."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwVolume",
        "description": "New volume setting of the device. The dwVolume parameter specifies the volume level of the hookswitch device. This is a number in the range 0x00000000 (silence) to 0x0000FFFF (maximum volume). The actual granularity and quantization of volume settings in this range are service provider-specific. A value for dwVolume that is out of range is set to the nearest value in the range."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "The  phoneShutdown function shuts down the application's usage of TAPI's phone abstraction.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds or a negative error number if an error occurs. Possible return values are: PHONEERR_INVALAPPHANDLE, PHONEERR_NOMEM, PHONEERR_UNINITIALIZED, PHONEERR_RESOURCEUNAVAIL. ",
    "remarks": "If this function is called when the application has open phone devices, these devices are closed. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "phoneShutdown",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HPHONEAPP",
        "name": "hPhoneApp",
        "description": "Application's usage handle for TAPI."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineAgentSpecific function allows the application to access proprietary handler-specific functions of the agent handler associated with the address. The meaning of the extensions are specific to the agent handler. Each set of agent-related extensions is identified by a universally unique 128-bit extension ID that must be obtained, along with the specification for the extension, from the promulgator of that extension (usually the author of the agent handler software on the telephony server). The list of extensions supported by the agent handler is obtained from the  LINEAGENTCAPS structure returned by  lineGetAgentCaps.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, this function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALAGENTID, LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_STRUCTURETOOSMALL, LINEERR_UNINITIALIZED. Additional return values are specific to the agent handler. ",
    "remarks": "This operation is part of the Extended Telephony services. It provides access to an agent handler-specific feature without defining its meaning. This function provides a generic parameter profile. The interpretation of the parameter structure is handler specific. Indications and replies sent back to the application that are handler specific should use the  LINE_AGENTSPECIFIC message. An agent handler can provide access to handler-specific functions by defining parameters for use with this function. Applications that want to make use of these extensions should consult the vendor-specific documentation that describes what extensions are defined. Typically, an application that relies on these extensions is not able to work with other agent handler environments. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineAgentSpecific",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the open line device. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAgentExtensionIDIndex",
        "description": "Position in the ExtensionIDList structure in  LINEAGENTCAPS of the agent handler extension being invoked."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "lpParams",
        "description": "Pointer to a memory area used to hold a parameter block. The format of this parameter block is device specific and its contents are passed by TAPI to and from the agent handler application on the telephony server. This parameter block must specify the function to be invoked and include sufficient room for any data to be returned."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Size of the parameter block area, in bytes.     Note  If lpParams is a pointer to a string, the size must include the NULL terminator."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineCreateAgent function creates a new Agent object. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENT.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineCreateAgent",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "lpszAgentID",
        "description": "Pointer to a null-terminated Unicode string containing the agent identifier. Used when working with legacy ACD systems. With an ACD system that uses the operating system's user login for authentication, lpszAgentID is set to NULL."
      },
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "lpszAgentPIN",
        "description": "Pointer to a null-terminated Unicode string containing the agent PIN or password. Used when working with legacy ACD systems. With an ACD system that uses the operating system's user login for authentication, lpszAgentPIN is set to NULL."
      },
      {
        "in_out": "",
        "type": "LPHAGENT",
        "name": "lphAgent",
        "description": "Handle to the created agent, returned by the ACD proxy. It is the responsibility of the agent handler proxy application to generate and maintain uniqueness of this identifier."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineCreateAgentSession function creates a new AgentSession object. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_CREATEAGENTSESSION.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineCreateAgentSession",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENT",
        "name": "hAgent",
        "description": "Identifier of the agent for whom the session is to be created."
      },
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "lpszAgentPIN",
        "description": "Pointer to a null-terminated Unicode string containing the agent PIN or password. Used when working with legacy ACD systems that require a separate PIN for each session created (or group logged into). With an ACD system that uses the operating system's user login for authentication, lpszAgentPIN is set to NULL."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwWorkingAddressID",
        "description": "Identifier of the address on which the agent will receive calls for this session."
      },
      {
        "in_out": "",
        "type": "LPGUID",
        "name": "lpGroupID",
        "description": "Pointer to a GUID that identifies the group for which the session is being created."
      },
      {
        "in_out": "",
        "type": "LPHAGENTSESSION",
        "name": "lphAgentSession",
        "description": "Handle to the created agent session, returned by the ACD proxy. It is the responsibility of the agent handler proxy application to generate and maintain uniqueness of these identifiers."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentActivityList function obtains the identities of activities that the application can select using  lineSetAgentActivity to indicate what function the agent is actually performing at the moment.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, this function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_OPERATIONFAILED, LINEERR_INVALAGENTID, LINEERR_OPERATIONUNAVAIL, LINEERR_INVALLINEHANDLE, LINEERR_RESOURCEUNAVAIL, LINEERR_INVALPOINTER, LINEERR_STRUCTURETOOSMALL, LINEERR_NOMEM, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentActivityList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the open line device whose agent status is to be queried. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTACTIVITYLIST",
        "name": "lpAgentActivityList",
        "description": "Pointer to a variably sized structure of type  LINEAGENTACTIVITYLIST. Upon successful completion of the request, this structure is filled with a list of the agent activity codes that can be selected using  lineSetAgentActivity. Prior to calling  lineGetAgentActivityList, the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The  lineGetAgentCaps function obtains the agent-related capabilities supported on the specified line device. If a specific agent is named, the capabilities include a listing of ACD groups into which the agent is permitted to log in.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, this function returns one of these negative error values: LINEERR_BADDEVICEID, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_INVALADDRESSID, LINEERR_INVALAPPHANDLE, LINEERR_INVALPOINTER, LINEERR_NODEVICE, LINEERR_NODRIVER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_STRUCTURETOOSMALL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentCaps",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Line device containing the address to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the given line device whose capabilities are to be queried. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAppAPIVersion",
        "description": "Highest API version supported by the application. This should not be the value negotiated using  lineNegotiateAPIVersion on the device being queried."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTCAPS",
        "name": "lpAgentCaps",
        "description": "Pointer to a variably sized structure of type  LINEAGENTCAPS. Upon successful completion of the request, this structure is filled with agent capabilities information. Prior to calling  lineGetAgentCaps, the application should set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentGroupList function obtains the identities of agent groups (combination of queue, supervisor, skill level, and so on) into which the agent currently logged in on the workstation is permitted to log into on the automatic call distributor.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, this function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALAGENTID, LINEERR_INVALLINEHANDLE, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_STRUCTURETOOSMALL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentGroupList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the open line device whose agent status is to be queried."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTGROUPLIST",
        "name": "lpAgentGroupList",
        "description": "Pointer to a variably sized structure of type  LINEAGENTGROUPLIST. Upon successful completion of the request, this structure is filled with a list of the agent groups into which the agent can log in at this time (which should include any groups into which the agent is already logged in, if any)."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentInfo function returns a structure holding the ACD information associated with a particular agent handle. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETAGENTINFO.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "Prior to calling the  lineGetAgentInfo function, the application should set the dwTotalSize member of the  LINEAGENTINFO structure to indicate the amount of memory available to TAPI for returning information. ",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENT",
        "name": "hAgent",
        "description": "Identifier of the agent whose information is to be retrieved."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTINFO",
        "name": "lpAgentInfo",
        "description": "Pointer to a structure of type  LINEAGENTINFO. If the request succeeds, this structure is filled with the agent statistics."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentSessionInfo function returns a structure that holds the ACD information associated with a particular agent session handle. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETAGENTSESSIONINFO.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentSessionInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENTSESSION",
        "name": "hAgentSession",
        "description": "Identifier of the agent session whose information is to be retrieved."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTSESSIONINFO",
        "name": "lpAgentSessionInfo",
        "description": "Pointer to a structure of type  LINEAGENTSESSIONINFO. Upon successful completion of the request, this structure is filled with the agent session statistics. Prior to calling the  lineGetAgentSessionInfo function, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that memory could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentSessionList function returns a list of agent sessions created for the specified agent. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETAGENTSESSIONLIST.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentSessionList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENT",
        "name": "hAgent",
        "description": "Identifier of the agent whose information is to be retrieved."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTSESSIONLIST",
        "name": "lpAgentSessionList",
        "description": "Pointer to a variably sized structure of type  LINEAGENTSESSIONLIST. Upon successful completion of the request, this structure is filled with a list of the agent sessions that have been created for this agent. Prior to calling the  lineGetAgentSessionList function, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that memory could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetAgentStatus function obtains the agent-related status on the specified address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALLINEHANDLE, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_STRUCTURETOOSMALL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetAgentStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Address on the open line device whose agent status is to be queried. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTSTATUS",
        "name": "lpAgentStatus",
        "description": "Pointer to a variably sized structure of type  LINEAGENTSTATUS. Upon successful completion of the request, this structure is filled with agent status information. Prior to calling  lineGetAgentStatus, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that memory could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "The  lineGetGroupList function returns a list of ACD groups available on the ACD system. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETGROUPLIST.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetGroupList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTGROUPLIST",
        "name": "lpGroupList",
        "description": "Pointer to a variably sized structure of type  LINEAGENTGROUPLIST. Upon successful completion of the request, this structure is filled with a list of the available ACD groups. Prior to calling the  lineGetGroupList function, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineGetProxyStatus function returns a list of proxy request types that are currently being serviced for the specified device.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the request succeeds; otherwise, the function returns one of the following negative error values: LINEERR_BADDEVICEID, LINEERR_INCOMPATIBLEAPIVERSION, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetProxyStatus",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINEAPP",
        "name": "hLineApp",
        "description": "Handle to the application's registration with TAPI."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwDeviceID",
        "description": "Line device to be queried."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAppAPIVersion",
        "description": "Version number of TAPI to be used."
      },
      {
        "in_out": "",
        "type": "LPLINEPROXYREQUESTLIST",
        "name": "lpLineProxyRequestList",
        "description": "Pointer to a variably sized structure of type  LINEPROXYREQUESTLIST. Upon successful completion of the request, this structure is filled with a list of the currently supported proxy requests. Prior to calling  lineGetProxyStatus, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetQueueInfo function returns a structure holding the ACD information associated with a particular queue. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETQUEUEINFO.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetQueueInfo",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwQueueID",
        "description": "Identifier of the queue whose information is to be retrieved."
      },
      {
        "in_out": "",
        "type": "LPLINEQUEUEINFO",
        "name": "lpLineQueueInfo",
        "description": "Pointer to a structure of type  LINEQUEUEINFO. Upon successful completion of the request, this structure is filled with the queue statistics. Prior to calling  lineGetQueueInfo, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineGetQueueList function returns a list of queues associated with a particular ACD Group. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_GETQUEUELIST.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineGetQueueList",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "LPGUID",
        "name": "lpGroupID",
        "description": "Pointer to GUID that identifies the group for which the list of queues is requested."
      },
      {
        "in_out": "",
        "type": "LPLINEQUEUELIST",
        "name": "lpQueueList",
        "description": "Pointer to a variably sized structure of type  LINEQUEUELIST. Upon successful completion of the request, this structure is filled with a list of queues. Prior to calling  lineGetQueueList, the application must set the dwTotalSize member of this structure to indicate the amount of memory available to TAPI for returning information.     Note  If the size parameters in the structure are not correct, there is a possibility that data could get overwritten. For more information on setting structure sizes, see the  memory allocation topic."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "The  lineProxyMessage function is used by a registered proxy request handler to generate TAPI messages related to its role. For example, an ACD agent handler can use this function to generate  LINE_AGENTSTATUS messages that are received by all applications that have the specified line open. TAPI suppresses generation of the message on the hLine specified in the function parameters.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the function succeeds or one of these negative error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALCALLHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_NOTREGISTERED, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineProxyMessage",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the open line device. This is converted by TAPI into the correct hLine for each application that receives the message."
      },
      {
        "in_out": "",
        "type": "HCALL",
        "name": "hCall",
        "description": "If the message is related to a specific call (which it is not, in the case of LINE_AGENTSTATUS), specifies the proxy handler's handle to that call; shall be set to NULL for messages not related to a specific call. This is converted by TAPI into the correct hCall for each application that receives the message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMsg",
        "description": "The TAPI message to generate. This must be a message that is permitted to be generated by proxy handlers."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam1",
        "description": "Parameter associated with the message to be sent."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam2",
        "description": "Parameter associated with the message to be sent."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwParam3",
        "description": "Parameter associated with the message to be sent."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineProxyResponse function indicates completion of a proxy request by a registered proxy handler, such as an ACD agent handler on a server.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns zero if the function succeeds or one of these negative error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_NOTREGISTERED, LINEERR_OPERATIONFAILED, LINE ERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineProxyResponse",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "A handle to the open line device."
      },
      {
        "in_out": "",
        "type": "LPLINEPROXYREQUEST",
        "name": "lpProxyRequest",
        "description": "A pointer to the proxy request buffer given to the application by TAPI in a  LINE_PROXYREQUEST message. In the case of proxy requests that return data to the client application, the proxy handler should have filled in the necessary structure in this buffer before calling this function. The dwNeededSize and dwUsedSize members of the structure to be returned must have been set appropriately.     Note  If the size parameters in the structure are incorrect, it is possible that data could be overwritten. For more information about setting structure sizes, see  memory allocation."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwResult",
        "description": "A function result returned to the calling application in a  LINE_REPLY message (generated automatically by TAPI). Must be zero or one of the negative error values defined for the called function."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetAgentActivity function sets the agent activity code associated with a particular address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALADDRESSSTATE, LINEERR_INVALAGENTACTIVITY, LINEERR_INVALLINEHANDLE, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentActivity",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Identifier of the address for which the agent activity code is to be changed. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwActivityID",
        "description": "New agent activity. The meaning of all values of this parameter are specific to the application and call center server."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetAgentGroup function sets the agent groups into which the agent is logged into on a particular address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALADDRESSSTATE, LINEERR_INVALAGENTGROUP, LINEERR_INVALAGENTID, LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_INVALPASSWORD, LINEERR_INVALPOINTER, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentGroup",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Identifier of the address for which the agent information is to be changed. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "LPLINEAGENTGROUPLIST",
        "name": "lpAgentGroupList",
        "description": "Pointer to a  LINEAGENTGROUPLIST structure identifying the groups into which the current agent is to be logged in on the address. If the pointer is NULL or the number of groups in the indicated structure is zero, then the agent is logged out of any ACD groups into which it is currently logged in.  The \"Name\" fields in the  LINEAGENTGROUPENTRY items in the list are ignored for purposes of this function; the control of the logged-in groups is based on the group identifier values only."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetAgentMeasurementPeriod function sets the measurement period associated with a particular agent. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentMeasurementPeriod",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENT",
        "name": "hAgent",
        "description": "Identifier of the agent whose information is to be changed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMeasurementPeriod",
        "description": "New measurement period (seconds). Must be greater than zero."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineSetAgentSessionState function sets the agent session state associated with a particular agent session handle. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_SETAGENTSESSIONSTATE.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALAGENTSTATE, LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentSessionState",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENTSESSION",
        "name": "hAgentSession",
        "description": "Identifier of the agent session whose information is to be changed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAgentSessionState",
        "description": "New agent session state. Must be one of the  LINEAGENTSESSIONSTATE_ constants or zero to leave the agent session state unchanged and modify only the next state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNextAgentSessionState",
        "description": "Next agent session state. Must be one of the  LINEAGENTSESSIONSTATE_ constants or zero."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineSetAgentState function sets the agent state associated with a particular address.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a positive request identifier if the asynchronous operation starts; otherwise, the function returns one of these negative error values: LINEERR_INVALADDRESSID, LINEERR_INVALADDRESSSTATE, LINEERR_INVALAGENTSTATE, LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentState",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAddressID",
        "description": "Identifier of the address for which the agent information is to be changed. An address identifier is permanently associated with an address; the identifier remains constant across operating system upgrades."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAgentState",
        "description": "New agent state. Must be one of the  LINEAGENTSTATE_ Constants, or zero to leave the agent state unchanged and modify only the next state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNextAgentState",
        "description": "The agent state that should be automatically set when the current call on the address becomes idle. For example, if it is known that after-call work must be performed, this field can be set to LINEAGENTSTATE_WORKAFTERCALL so that a new call is not assigned to the agent after the current call. Must be one of the  LINEAGENTSTATE_ Constants, or zero to use the default next state configured for the agent."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "The  lineSetAgentStateEx function sets the agent state associated with a particular agent handle. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_SETAGENTSTATEEX.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALAGENTSTATE, LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetAgentStateEx",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "HAGENT",
        "name": "hAgent",
        "description": "Identifier of the agent whose information is to be changed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAgentState",
        "description": "New agent state. Must be one of the  LINEAGENTSTATEEX_ constants, or zero to leave the agent state unchanged and modify only the next state."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwNextAgentState",
        "description": "Next agent state. Must be one of the  LINEAGENTSTATEEX_ constants or zero."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "The  lineSetQueueMeasurementPeriod function sets the measurement period associated with a particular queue. It generates a  LINE_PROXYREQUEST message to be sent to a registered proxy function handler, referencing a  LINEPROXYREQUEST structure of type LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD.",
    "library": "Tapi32.lib",
    "min_server": "",
    "header": "Tapi.h",
    "return_value": "Returns a request identifier if the asynchronous operation starts; otherwise, the function returns one of the following error values: LINEERR_INVALLINEHANDLE, LINEERR_INVALPARAM, LINEERR_NOMEM, LINEERR_OPERATIONFAILED, LINEERR_OPERATIONUNAVAIL, LINEERR_RESOURCEUNAVAIL, LINEERR_UNINITIALIZED. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "TAPI",
    "name": "lineSetQueueMeasurementPeriod",
    "is_callback": 0,
    "dll": "Tapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HLINE",
        "name": "hLine",
        "description": "Handle to the line device."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwQueueID",
        "description": "Identifier of the queue whose information is to be changed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMeasurementPeriod",
        "description": "New measurement period (seconds). Must be greater than zero."
      }
    ],
    "min_client": ""
  }
]