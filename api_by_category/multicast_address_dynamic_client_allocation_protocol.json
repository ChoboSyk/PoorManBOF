[
  {
    "n_arguments": 0,
    "description": "The  McastApiCleanup function deallocates resources that are allocated with  McastApiStartup. The  McastApiCleanup function must only be called after a successful call to  McastApiStartup.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "The  McastApiCleanup function does not return any values. ",
    "remarks": "",
    "return_type": "VOID APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastApiCleanup",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The  McastApiStartup function facilitates MADCAP-version negotiation between requesting clients and the version of MADCAP implemented on the system. Calling  McastApiStartup allocates necessary resources; it must be called before any other MADCAP client functions are called.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "If the client requests a version of MADCAP that is not supported by the system, the  McastApiStartup function returns ERROR_NOT_SUPPORTED. If resources fail to be allocated for the function call, ERROR_NO_SYSTEM_RESOURCES is returned. ",
    "remarks": "Clients can specify which version they want to use in the pVersion parameter. If the system's implementation supports the requested MCAST version, the function call succeeds. If the system's implementation does not support the requested version, the function fails with MCAST_API_CURRENT_VERSION. The client can automatically negotiate the first version of MCAST (MCAST_API_VERSION_1) by setting the pVersion parameter to zero. The  McastApiStartup function always returns the most recent version of MADCAP available on the system (MCAST_API_CURRENT_VERSION) in pVersion, enabling clients to discover the most recent version implemented on the system. ",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastApiStartup",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDWORD",
        "name": "pVersion",
        "description": "Pointer to the version of multicast (MCAST) that the client wishes to use.     [out] Pointer to the version of MCAST implemented on the system."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  McastEnumerateScopes function enumerates multicast scopes available on the network.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the buffer pointed to by pScopeList is too small to hold the scope list, the  McastEnumerateScopes function returns ERROR_MORE_DATA, and stores the required buffer size, in bytes, in pScopeLen. If the  McastApiStartup function has not been called (it must be called before any other MADCAP client functions may be called), the  McastEnumerateScopes function returns ERROR_NOT_READY. ",
    "remarks": "The  McastEnumerateScopes function queries multicast scopes for each network interface, and the interface on which the scope is retrieved is returned as part of the pScopeList parameter. Therefore, on multihomed computers it is possible that some scopes will get listed multiple times, once for each interface. ",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastEnumerateScopes",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IP_ADDR_FAMILY",
        "name": "AddrFamily",
        "description": "Specifies the address family to be used in enumeration, in the form of an  IPNG_ADDRESS structure. Use AF_INET for IPv4 addresses and AF_INET6 for IPv6 addresses."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ReQuery",
        "description": "Enables a caller to query a list again. Set this parameter to TRUE if the list is to be queried more than once. Otherwise, set it to FALSE."
      },
      {
        "in_out": "_Inout_",
        "type": "PMCAST_SCOPE_ENTRY",
        "name": "pScopeList",
        "description": "Pointer to a buffer used for storing scope list information, in the form of an  MCAST_SCOPE_ENTRY structure. The return value of pScopeList depends on its input value, and on the value of the buffer to which it points:     If pScopeList is a valid pointer on input, the scope list is returned. If pScopeList is NULL on input, the length of the buffer required to hold the scope list is returned. If the buffer pointed to in pScopeList is NULL on input,  McastEnumerateScopes forces a repeat querying of scope lists from MCAST servers. To determine the size of buffer required to hold scope list data, set pScopeList to NULL and pScopeLen to a non-NULL value. The  McastEnumerateScopes function will then return ERROR_SUCCESS and store the size of the scope list data, in bytes, in pScopeLen."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "pScopeLen",
        "description": "Pointer to a value used to communicate the size of data or buffer space in pScopeList. On input, pScopeLen points to the size, in bytes, of the buffer pointed to by pScopeList. On return, pScopeLen points to the size of the data copied to pScopeList.     The pScopeLen parameter cannot be NULL. If the buffer pointed to by pScopeList is not large enough to hold the scope list data,  McastEnumerateScopes returns ERROR_MORE_DATA and stores the required buffer size, in bytes, in pScopeLen. To determine the size of buffer required to hold scope list data, set pScopeList to NULL and pScopeLen to a non-NULL value. The  McastEnumerateScopes function will then return ERROR_SUCCESS and store the size of the scope list data, in bytes, in pScopeLen."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pScopeCount",
        "description": "Pointer to the number of scopes returned in pScopeList."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The  McastGenUID function generates a unique identifier, subsequently used by clients to request and renew addresses.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "The  McastGenUID function returns the status of the operation. ",
    "remarks": "",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastGenUID",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPMCAST_CLIENT_UID",
        "name": "pRequestID",
        "description": "Pointer to the  MCAST_CLIENT_UID structure into which the unique identifier is stored. The size of the buffer to which pRequestID points must be at least MCAST_CLIENT_ID_LEN in size."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  McastReleaseAddress function releases leased multicast addresses from the MCAST server.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "The  McastReleaseAddress function returns the status of the operation. ",
    "remarks": "",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastReleaseAddress",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IP_ADDR_FAMILY",
        "name": "AddrFamily",
        "description": "Designates the address family. Use AF_INET for Internet Protocol version 4 (IPv4), and AF_INET6 for Internet Protocol version 6 (IPv6)."
      },
      {
        "in_out": "_In_",
        "type": "LPMCAST_CLIENT_UID",
        "name": "pRequestID",
        "description": "Unique identifier used when the address or addresses were initially obtained."
      },
      {
        "in_out": "_In_",
        "type": "PMCAST_LEASE_REQUEST",
        "name": "pReleaseRequest",
        "description": "Pointer to the  MCAST_LEASE_REQUEST structure containing multicast parameters associated with the release request."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The  McastRenewAddress function renews one or more multicast addresses from a MADCAP server.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "The  McastRenewAddress function returns the status of the operation. ",
    "remarks": "",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastRenewAddress",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IP_ADDR_FAMILY",
        "name": "AddrFamily",
        "description": "Designates the address family. Use AF_INET for Internet Protocol version 4 (IPv4), and AF_INET6 for Internet Protocol version 6 (IPv6)."
      },
      {
        "in_out": "_In_",
        "type": "LPMCAST_CLIENT_UID",
        "name": "pRequestID",
        "description": "Unique identifier used when the address or addresses were initially obtained."
      },
      {
        "in_out": "_In_",
        "type": "PMCAST_LEASE_REQUEST",
        "name": "pRenewRequest",
        "description": "Pointer to the  MCAST_LEASE_REQUEST structure containing multicast renew\u2013request parameters. ..."
      },
      {
        "in_out": "_Inout_",
        "type": "PMCAST_LEASE_RESPONSE",
        "name": "pRenewResponse",
        "description": "Pointer to a buffer containing response parameters for the multicast address\u2013renew request, in the form of an  MCAST_LEASE_RESPONSE structure. ..."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  McastRequestAddress function requests one or more multicast addresses from a MADCAP server.",
    "library": "Dhcpcsvc.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Madcapcl.h",
    "return_value": "The  McastRequestAddress function returns the status of the operation. ",
    "remarks": "Before the  McastRequestAddress function is called, the scope context must be retrieved by calling the  McastEnumerateScopes function. ",
    "return_type": "DWORD APIENTRY",
    "category": "Multicast Address Dynamic Client Allocation Protocol (MADCAP)",
    "name": "McastRequestAddress",
    "is_callback": 0,
    "dll": "Dhcpcsvc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IP_ADDR_FAMILY",
        "name": "AddrFamily",
        "description": "Specifies the address family to be used in the request, in the form of an  IPNG_ADDRESS structure. Use AF_INET for IPv4 addresses and AF_INET6 for IPv6 addresses."
      },
      {
        "in_out": "_In_",
        "type": "LPMCAST_CLIENT_UID",
        "name": "pRequestID",
        "description": "Pointer to a unique identifier for the request, in the form of an  MCAST_CLIENT_UID structure. Clients are responsible for ensuring that each request contains a unique identifier; unique identifiers can be obtained by calling the  McastGenUID function."
      },
      {
        "in_out": "_In_",
        "type": "PMCAST_SCOPE_CTX",
        "name": "pScopeCtx",
        "description": "Pointer to the context of the scope from which the address is to be allocated, in the form of an  MCAST_SCOPE_CTX structure. The scope context must be retrieved by calling the  McastEnumerateScopes function prior to calling the  McastRequestAddress function."
      },
      {
        "in_out": "_In_",
        "type": "PMCAST_LEASE_REQUEST",
        "name": "pAddrRequest",
        "description": "Pointer to the  MCAST_LEASE_REQUEST structure containing multicast lease\u2013request parameters. ..."
      },
      {
        "in_out": "_Inout_",
        "type": "PMCAST_LEASE_RESPONSE",
        "name": "pAddrResponse",
        "description": "Pointer to a buffer containing response parameters for the multicast address request, in the form of an  MCAST_LEASE_RESPONSE structure. The caller is responsible for allocating sufficient buffer space for the pAddrBuf member of the  MCAST_LEASE_RESPONSE structure to hold the requested number of addresses; the caller is also responsible for setting the pointer to that buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]