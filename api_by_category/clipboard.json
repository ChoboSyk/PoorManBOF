[
  {
    "n_arguments": 1,
    "description": "Places the given window in the system-maintained clipboard format listener list.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. Call GetLastError for additional details. ",
    "remarks": "When a window has been added to the clipboard format listener list, it is posted a WM_CLIPBOARDUPDATE message whenever the contents of the clipboard have changed. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "AddClipboardFormatListener",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window to be placed in the clipboard format listener list."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Removes a specified window from the chain of clipboard viewers.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL The return value indicates the result of passing the WM_CHANGECBCHAIN message to the windows in the clipboard viewer chain. Because a window in the chain typically returns FALSE when it processes WM_CHANGECBCHAIN, the return value from ChangeClipboardChain is typically FALSE. If there is only one window in the chain, the return value is typically TRUE. ",
    "remarks": "The window identified by  \t\t\t\thWndNewNext replaces the  \t\t\t\thWndRemove window in the chain. The SetClipboardViewer function sends a WM_CHANGECBCHAIN message to the first window in the clipboard viewer chain. For an example, see Removing a Window from the Clipboard Viewer Chain. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "ChangeClipboardChain",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndRemove",
        "description": "Type: HWND A handle to the window to be removed from the chain. The handle must have been passed to the SetClipboardViewer function."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndNewNext",
        "description": "Type: HWND A handle to the window that follows the  \t\t\t\t\thWndRemove window in the clipboard viewer chain. (This is the handle returned by SetClipboardViewer, unless the sequence was changed in response to a WM_CHANGECBCHAIN message.)"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Closes the clipboard.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "When the window has finished examining or changing the clipboard, close the clipboard by calling CloseClipboard. This enables other windows to access the clipboard. Do not place an object on the clipboard after calling CloseClipboard. For an example, see Example of a Clipboard Viewer. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "CloseClipboard",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the number of different data formats currently on the clipboard.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the number of different data formats currently on the clipboard. If the function fails, the return value is zero. To get extended error information, call GetLastError. For an example, see Example of a Clipboard Viewer. ",
    "remarks": "",
    "return_type": "int",
    "category": "Clipboard",
    "name": "CountClipboardFormats",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Before calling EmptyClipboard, an application must open the clipboard by using the OpenClipboard function. If the application specifies a NULL window handle when opening the clipboard, EmptyClipboard succeeds but sets the clipboard owner to NULL. Note that this causes SetClipboardData to fail. For an example, see Copying Information to the Clipboard. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "EmptyClipboard",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enumerates the data formats currently available on the clipboard.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the clipboard format that follows the specified format, namely the next available clipboard format. If the function fails, the return value is zero. To get extended error information, call GetLastError. If the clipboard is not open, the function fails. If there are no more clipboard formats to enumerate, the return value is zero. In this case, the  \t\t\t\t\t\tGetLastError function returns the value ERROR_SUCCESS. This lets you distinguish between function failure and the end of enumeration. ",
    "remarks": "You must open the clipboard before enumerating its formats. Use the OpenClipboard function to open the clipboard. The EnumClipboardFormats function fails if the clipboard is not open. The \t\t\t\tEnumClipboardFormats function enumerates formats in the order that they were placed on the clipboard. If you are copying information to the clipboard, add clipboard objects in order from the most descriptive clipboard format to the least descriptive clipboard format. If you are pasting information from the clipboard, retrieve the first clipboard format that you can handle. That will be the most descriptive clipboard format that you can handle. The system provides automatic type conversions for certain clipboard formats. In the case of such a format, this function enumerates the specified format, then enumerates the formats to which it can be converted. For more information, see Standard Clipboard Formats  and Synthesized Clipboard Formats. For an example, see Example of a Clipboard Viewer. ",
    "return_type": "UINT",
    "category": "Clipboard",
    "name": "EnumClipboardFormats",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "format",
        "description": "Type: UINT A clipboard format that is known to be available. To start an enumeration of clipboard formats, set  \t\t\t\t\tformat to zero. When  \t\t\t\t\tformat is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set  \t\t\t\t\tformat to the result of the previous  \t\t\t\t\tEnumClipboardFormats call."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HANDLE If the function succeeds, the return value is the handle to a clipboard object in the specified format. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "An application can enumerate the available formats in advance by using the EnumClipboardFormats function. The clipboard controls the handle that the GetClipboardData function returns, not the application. The application should copy the data immediately. The application must not free the handle nor leave it locked. The application must not use the handle after the EmptyClipboard or CloseClipboard function is called, or after the SetClipboardData function is called with the same clipboard format. The system performs implicit data format conversions between certain clipboard formats when an application calls the GetClipboardData function. For example, if the CF_OEMTEXT format is on the clipboard, a window can retrieve data in the CF_TEXT format. The format on the clipboard is converted to the requested format on demand. For more information, see Synthesized Clipboard Formats. For an example, see Copying Information to the Clipboard. ",
    "return_type": "HANDLE",
    "category": "Clipboard",
    "name": "GetClipboardData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFormat",
        "description": "Type: UINT A clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the length, in  \t\t\t\t\t\tcharacters, of the string copied to the buffer. If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call GetLastError. ",
    "remarks": "Using this function incorrectly might compromise the security of your program. For example, miscalculating the proper size of the lpszFormatName buffer, especially when the application is used in both ANSI and Unicode versions, can cause a buffer overflow. Also, note that the string is truncated if it is longer than the cchMaxCount parameter, which can lead to loss of information. For an example, see Example of a Clipboard Viewer. ",
    "return_type": "int",
    "category": "Clipboard",
    "name": "GetClipboardFormatName",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "format",
        "description": "Type: UINT The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszFormatName",
        "description": "Type: LPTSTR The buffer that is to receive the format name."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchMaxCount",
        "description": "Type: int The maximum length, in  \t\t\t\t\tcharacters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the window handle of the current owner of the clipboard.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND If the function succeeds, the return value is the handle to the window that owns the clipboard. If the clipboard is not owned, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The clipboard can still contain data even if the clipboard is not currently owned. In general, the clipboard owner is the window that last placed data in clipboard. The EmptyClipboard function assigns clipboard ownership. For an example, see Example of a Clipboard Viewer. ",
    "return_type": "HWND",
    "category": "Clipboard",
    "name": "GetClipboardOwner",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the clipboard sequence number for the current window station.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: DWORD The return value is the clipboard sequence number. If you do not have WINSTA_ACCESSCLIPBOARD access to the window station, the function returns zero. ",
    "remarks": "The system keeps a serial number for the clipboard for each window station. This number is incremented whenever the contents of the clipboard change or the clipboard is emptied. You can track this value to determine whether the clipboard contents have changed and optimize creating DataObjects. If clipboard rendering is delayed, the sequence number is not incremented until the changes are rendered. ",
    "return_type": "DWORD",
    "category": "Clipboard",
    "name": "GetClipboardSequenceNumber",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the handle to the first window in the clipboard viewer chain.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND If the function succeeds, the return value is the handle to the first window in the clipboard viewer chain. If there is no clipboard viewer, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Clipboard",
    "name": "GetClipboardViewer",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the handle to the window that currently has the clipboard open.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND If the function succeeds, the return value is the handle to the window that has the clipboard open. If no window has the clipboard open, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "If an application or DLL specifies a NULL window handle when calling the OpenClipboard function, the clipboard is opened but is not associated with a window. In such a case, GetOpenClipboardWindow returns NULL. ",
    "return_type": "HWND",
    "category": "Clipboard",
    "name": "GetOpenClipboardWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the first available clipboard format in the specified list.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the first clipboard format in the list for which data is available. If the clipboard is empty, the return value is NULL. If the clipboard contains data, but not in any of the specified formats, the return value is \u00e2\u0080\u00931. To get extended error information, call GetLastError. For an example, see Example of a Clipboard Viewer. ",
    "remarks": "",
    "return_type": "int",
    "category": "Clipboard",
    "name": "GetPriorityClipboardFormat",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT*",
        "name": "paFormatPriorityList",
        "description": "Type: UINT* The clipboard formats, in priority order. For a description of the standard clipboard formats, see Standard Clipboard Formats ."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cFormats",
        "description": "Type: int The number of entries in the  \t\t\t\t\tpaFormatPriorityList array. This value must not be greater than the number of entries in the list."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the currently supported clipboard formats.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL The function returns TRUE if successful; otherwise, FALSE. Call GetLastError for additional details. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "GetUpdatedClipboardFormats",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PUINT",
        "name": "lpuiFormats",
        "description": "Type: PUINT An array of clipboard formats. For a description of the standard clipboard formats, see Standard Clipboard Formats."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cFormats",
        "description": "Type: UINT The number of entries in the array pointed to by lpuiFormats."
      },
      {
        "in_out": "_Out_",
        "type": "PUINT",
        "name": "pcFormatsOut",
        "description": "Type: PUINT The actual number of clipboard formats in the array pointed to by lpuiFormats."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the clipboard contains data in the specified format.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the clipboard format is available, the return value is nonzero. If the clipboard format is not available, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Typically, an application that recognizes only one clipboard format would call this function when processing the WM_INITMENU or WM_INITMENUPOPUP message. The application would then enable or disable the Paste menu item, depending on the return value. Applications that recognize more than one clipboard format should use the GetPriorityClipboardFormat function for this purpose. For an example, see Pasting Information from the Clipboard. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "IsClipboardFormatAvailable",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "format",
        "description": "Type: UINT A standard or registered clipboard format. For a description of the standard clipboard formats, see Standard Clipboard Formats ."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Opens the clipboard for examination and prevents other applications from modifying the clipboard content.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "OpenClipboard fails if another window has the clipboard open. An application should call the CloseClipboard function after every successful call to OpenClipboard. The window identified by the  \t\t\t\thWndNewOwner parameter does not become the clipboard owner unless the EmptyClipboard function is called. If an application calls OpenClipboard with hwnd set to NULL, EmptyClipboard sets the clipboard owner to NULL; this causes SetClipboardData to fail. For an example, see Copying Information to the Clipboard. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "OpenClipboard",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndNewOwner",
        "description": "Type: HWND A handle to the window to be associated with the open clipboard. If this parameter is NULL, the open clipboard is associated with the current task."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Registers a new clipboard format. This format can then be used as a valid clipboard format.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value identifies the registered clipboard format. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If a registered format with the specified name already exists, a new format is not registered and the return value identifies the existing format. This enables more than one application to copy and paste data using the same registered clipboard format. Note that the format name comparison is case-insensitive. Registered clipboard formats are identified by values in the range 0xC000 through 0xFFFF. When registered clipboard formats are placed on or retrieved from the clipboard, they must be in the form of an  \t\t\t\tHGLOBAL value. For an example, see Registering a Clipboard Format. ",
    "return_type": "UINT",
    "category": "Clipboard",
    "name": "RegisterClipboardFormat",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszFormat",
        "description": "Type: LPCTSTR The name of the new format."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the given window from the system-maintained clipboard format listener list.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. Call GetLastError for additional details. ",
    "remarks": "When a window has been removed from the clipboard format listener list, it will no longer receive WM_CLIPBOARDUPDATE messages. ",
    "return_type": "BOOL",
    "category": "Clipboard",
    "name": "RemoveClipboardFormatListener",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window to remove from the clipboard format listener list."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the OpenClipboard function. (When responding to the WM_RENDERFORMAT and WM_RENDERALLFORMATS messages, the clipboard owner must not call OpenClipboard before calling SetClipboardData.)",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HANDLE If the function succeeds, the return value is the handle to the data. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "Windows 8: Bitmaps to be shared with Windows Store app apps must be in the CF_BITMAP format (device-dependent bitmap). If an application calls SetClipboardData in response to WM_RENDERFORMAT or WM_RENDERALLFORMATS, the application should not use the handle after SetClipboardData has been called. If an application calls OpenClipboard with hwnd set to NULL, EmptyClipboard sets the clipboard owner to NULL; this causes SetClipboardData to fail. The system performs implicit data format conversions between certain clipboard formats when an application calls the GetClipboardData function. For example, if the CF_OEMTEXT format is on the clipboard, a window can retrieve data in the CF_TEXT format. The format on the clipboard is converted to the requested format on demand. For more information, see Synthesized Clipboard Formats. For an example, see Copying Information to the Clipboard. ",
    "return_type": "HANDLE",
    "category": "Clipboard",
    "name": "SetClipboardData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFormat",
        "description": "Type: UINT The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see Standard Clipboard Formats and Registered Clipboard Formats."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hMem",
        "description": "Type: HANDLE A handle to the data in the specified format. This parameter can be NULL, indicating that the window provides data in the specified clipboard format (renders the format) upon request. If a window delays rendering, it must process the WM_RENDERFORMAT and WM_RENDERALLFORMATS messages. If SetClipboardData succeeds, the system owns the object identified by the hMem parameter. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the CloseClipboard function is called. (The memory must be unlocked before the Clipboard is closed.) If the hMem parameter identifies a memory object, the object must have been allocated using the function with the GMEM_MOVEABLE flag."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a WM_DRAWCLIPBOARD message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND If the function succeeds, the return value identifies the next window in the clipboard viewer chain. If an error occurs or there are no other windows in the clipboard viewer chain, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The windows that are part of the clipboard viewer chain, called clipboard viewer windows, must process the clipboard messages WM_CHANGECBCHAIN and WM_DRAWCLIPBOARD. Each clipboard viewer window calls the SendMessage function to pass these messages to the next window in the clipboard viewer chain. A clipboard viewer window must eventually remove itself from the clipboard viewer chain by calling the ChangeClipboardChain function \u00e2\u0080\u0094 for example, in response to the WM_DESTROY message. The SetClipboardViewer function exists to provide backward compatibility with earlier versions of Windows. The clipboard viewer chain can be broken by an application that fails to handle the clipboard chain messages properly. New applications should use more robust techniques such as the clipboard sequence number or the registration of a clipboard format listener. For further details on these alternatives techniques, see Monitoring Clipboard Contents. For an example, see Adding a Window to the Clipboard Viewer Chain. ",
    "return_type": "HWND",
    "category": "Clipboard",
    "name": "SetClipboardViewer",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndNewViewer",
        "description": "Type: HWND A handle to the window to be added to the clipboard chain."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]