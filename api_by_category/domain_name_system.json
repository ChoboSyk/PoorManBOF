[
  {
    "n_arguments": 3,
    "description": "The  DnsAcquireContextHandle function type acquires a context handle to a set of credentials. Like many DNS functions, the  DnsAcquireContextHandle function type is implemented in multiple forms to facilitate different character encoding. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsAcquireContextHandle",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "CredentialFlags",
        "description": "A flag that indicates the character encoding. Set to TRUE for Unicode, FALSE for ANSI."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Credentials",
        "description": "A pointer to a SEC_WINNT_AUTH_IDENTITY_W structure or a SEC_WINNT_AUTH_IDENTITY_A structure that contains the name, domain, and password of the account to be used in a secure dynamic update. If CredentialFlags is set to TRUE, Credentials points to a SEC_WINNT_AUTH_IDENTITY_W structure; otherwise, Credentials points to a SEC_WINNT_AUTH_IDENTITY_A structure. If not specified, the credentials of the calling service are used. This parameter is optional."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "pContext",
        "description": "A pointer to a handle pointing to the returned credentials."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The DnsCancelQuery function can be used to cancel a pending query to the DNS namespace.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, it returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "DnsCancelQuery does not wait for a query to complete before cancelling. Therefore,     applications should track pending queries through their DNS_QUERY_COMPLETION_ROUTINE DNS callbacks. pCancelHandle is valid until the DNS_QUERY_COMPLETION_ROUTINE DNS callback is invoked and DnsCancelQuery completes. ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsCancelQuery",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_QUERY_CANCEL",
        "name": "pCancelHandle",
        "description": "A pointer to a DNS_QUERY_CANCEL structure used to cancel an asynchronous DNS query. The structure must have been returned in the pCancelHandle parameter of a previous call to DnsQueryEx."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  DnsExtractRecordsFromMessage function type extracts resource records (RR) from a DNS message, and stores those records in a  DNS_RECORD structure. Like many DNS functions, the  DnsExtractRecordsFromMessage function type is implemented in multiple forms to facilitate different character encoding. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "The DnsExtractRecordsFromMessage function is designed to operate on messages in host byte order. As such, received messages should be converted from network byte order to host byte order before extraction, or before retransmission onto the network. Use the DNS_BYTE_FLIP_HEADER_COUNTS macro to change  byte ordering. The following declaration for DnsExtractRecordsFromMessage_UTF8 can be found in Windns.h. ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsExtractRecordsFromMessage",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_MESSAGE_BUFFER",
        "name": "pDnsBuffer",
        "description": "A pointer to a DNS_MESSAGE_BUFFER structure that contains the DNS response message."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wMessageLength",
        "description": "The size, in bytes, of the message in  pDnsBuffer."
      },
      {
        "in_out": "_Out_",
        "type": "PDNS_RECORD*",
        "name": "ppRecord",
        "description": "A pointer to a DNS_RECORD structure that contains the list of extracted RRs. To free these records, use the  DnsRecordListFree function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The DnsFree function frees memory allocated for DNS records that was obtained using the  DnsQuery function.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Domain Name System (DNS)",
    "name": "DnsFree",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PVOID",
        "name": "pData",
        "description": "A pointer to the DNS data to be freed."
      },
      {
        "in_out": "_In_",
        "type": "DNS_FREE_TYPE",
        "name": "FreeType",
        "description": "A value that specifies the type of DNS data in pData. For more information and a list of values, see the DNS_FREE_TYPE enumeration."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The  DnsFreeProxyName function frees memory allocated for the proxyName member of a DNS_PROXY_INFORMATION structure obtained using the  DnsGetProxyInformation function.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Domain Name System (DNS)",
    "name": "DnsFreeProxyName",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "proxyName",
        "description": "A pointer to the proxyName string to be freed."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  DnsGetProxyInformation function returns the proxy information for a DNS server's name resolution policy table.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "The  DnsGetProxyInformation function returns the appropriate DNS-specific error code as defined in Winerror.h. The following are possible return values: ",
    "remarks": "",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsGetProxyInformation",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "hostName",
        "description": "A pointer to a string that represents the name of the DNS server whose proxy information is returned."
      },
      {
        "in_out": "_Inout_",
        "type": "DNS_PROXY_INFORMATION*",
        "name": "proxyInformation",
        "description": "A pointer to a DNS_PROXY_INFORMATION structure that contains the proxy information for hostName."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DNS_PROXY_INFORMATION*",
        "name": "defaultProxyInformation",
        "description": "A pointer to a DNS_PROXY_INFORMATION structure that contains the default proxy information for hostName. This proxy information is for the wildcard DNS policy."
      },
      {
        "in_out": "_In_opt_",
        "type": "DNS_PROXY_COMPLETION_ROUTINE",
        "name": "completionRoutine",
        "description": "Reserved. Do not use."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "completionContext",
        "description": "Reserved. Do not use."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The  DnsModifyRecordsInSetfunction adds, modifies or removes a Resource Record (RR) set that may have been previously registered with DNS servers.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, it returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "The  DnsModifyRecordsInSet function type executes in the following steps. To add a new record, provide no records in pDeleteRecords, and provide the record to be added in pAddRecords.  To modify a record, specify the record being modified in pDeleteRecords, then add the modified version of that record by placing it in pAddRecords. To delete records, specify only records to be deleted.  Multiple records can be added or deleted in a single call to DnsModifyRecordsInSet; however, the value of the pName member in each DNS_RECORD must be the same or the call will fail. If a record specified in pAddRecords is already present, no change occurs. If no server list is specified, the default name server is queried. ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsModifyRecordsInSet",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PDNS_RECORD",
        "name": "pAddRecords",
        "description": "A pointer to the  DNS_RECORD structure that contains the RRs to be added to the RR set."
      },
      {
        "in_out": "_In_opt_",
        "type": "PDNS_RECORD",
        "name": "pDeleteRecords",
        "description": "A pointer to the  DNS_RECORD structure that contains the RRs to be deleted from the RR set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Options",
        "description": "A value that contains a bitmap of DNS Update  Options. Options can be combined and all options override DNS_UPDATE_SECURITY_USE_DEFAULT."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hContext",
        "description": "A handle to the credentials of a specific account. Used when secure dynamic update is required. This parameter is optional."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pExtraList",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pReserved",
        "description": "This parameter is reserved for future use and must be set to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  DnsNameCompare function compares two DNS names. Like many DNS functions, the  DnsNameCompare function type is implemented in multiple forms to facilitate different character encoding. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns TRUE if the compared names are equivalent, FALSE if they are not. ",
    "remarks": "Name comparisons are not case sensitive, and trailing dots are ignored. As with other DNS comparison functions, the  DnsNameCompare function deems different encoding as an immediate indication of differing values, and as such, the same names with different characters encoding will not be reported identically. ",
    "return_type": "BOOL",
    "category": "Domain Name System (DNS)",
    "name": "DnsNameCompare",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pName1",
        "description": "A pointer to a string that represents the first DNS name of the comparison pair."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pName2",
        "description": "A pointer to a string that represents the second DNS name of the comparison pair."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The  DnsQuery function type is the generic query interface to the DNS namespace, and provides application developers with a DNS query resolution interface. Like many DNS functions, the  DnsQuery function type is implemented in multiple forms to facilitate different character encoding. \t\tBased on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "Applications that call the  DnsQuery function build a query using a fully qualified DNS name and Resource Record (RR) type, and set query options depending on the type of service desired. When the DNS_QUERY_STANDARD option is set, DNS uses the resolver cache, queries first with UDP, then retries with TCP if the response is truncated, and requests that the server to perform recursive resolution on behalf of the client to resolve the query. Applications must free returned RR sets with the DnsRecordListFree function. Consider the following scenario, in which multiple returned records require additional activity on behalf of the application: A DnsQuery_A function call is made for a multihomed computer and the application finds that the address associated with the first A record is not responding. The application should then attempt to use other IP addresses specified in the (additional) A records returned from the DnsQuery_A function call. If the lpstrName  parameter is set to NULL, the DnsQuery function fails with the error INVALID_PARAMETER. ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsQuery",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "lpstrName",
        "description": "A pointer to a string that represents the DNS name to query."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wType",
        "description": "A value that represents the Resource Record (RR)DNS Record Type that is queried. wType determines the format of data pointed to by ppQueryResultsSet. For example, if the value of wType is DNS_TYPE_A, the format of data pointed to by ppQueryResultsSet is DNS_A_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Options",
        "description": "A value that contains a bitmap of DNS Query  Options to use in the DNS query. Options can be combined and all options override DNS_QUERY_STANDARD."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pExtra",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDNS_RECORD*",
        "name": "ppQueryResultsSet",
        "description": "Optional. A pointer to a pointer that points to the list of RRs that comprise the response. For more information, see the Remarks section."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PVOID*",
        "name": "pReserved",
        "description": "This parameter is reserved for future use and must be set to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The  DnsQueryConfig function enables application programmers to query for the configuration of the local computer or a specific adapter.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsQueryConfig",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DNS_CONFIG_TYPE",
        "name": "Config",
        "description": "A DNS_CONFIG_TYPE value that specifies the configuration type of the information to be queried."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flag",
        "description": "A value that specifies whether to allocate memory for the configuration information. Set Flag to DNS_CONFIG_FLAG_ALLOC  to allocate memory; otherwise, set it to 0.   Note  Free the allocated memory with LocalFree."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pwsAdapterName",
        "description": "A pointer to a string that represents the adapter name against which the query is run."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pReserved",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "pBuffer",
        "description": "A pointer to a buffer that receives the query response. The following table shows the data type of the buffer for each  of the Config parameter values.  Config parameterData type of buffer DnsConfigPrimaryDomainName_WPWCHAR DnsConfigPrimaryDomainName_APCHAR DnsConfigPrimaryDomainName_UTF8PCHAR DnsConfigAdapterDomainName_WNot implemented DnsConfigAdapterDomainName_ANot implemented DnsConfigAdapterDomainName_UTF8Not implemented DnsConfigDnsServerListIP4_ARRAY DnsConfigSearchListNot implemented DnsConfigAdapterInfoNot implemented DnsConfigPrimaryHostNameRegistrationEnabledDWORD DnsConfigAdapterHostNameRegistrationEnabledDWORD DnsConfigAddressRegistrationMaxCountDWORD DnsConfigHostName_WPWCHAR DnsConfigHostName_APCHAR DnsConfigHostName_UTF8PCHAR DnsConfigFullHostName_WPWCHAR DnsConfigFullHostName_APCHAR DnsConfigFullHostName_UTF8PCHAR"
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "pBufferLength",
        "description": "The length of the buffer, in bytes. If the buffer provided is not sufficient, an error is returned and pBufferLength contains the minimum necessary buffer size. Ignored on input if Flag is set to TRUE."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  DnsQueryEx function is the asynchronous generic query interface to the DNS namespace, and provides application developers with a DNS query resolution interface.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "The  DnsQueryEx function has the following possible return values:  ",
    "remarks": "If a call to DnsQueryEx completes synchronously (i.e., the function return value is not DNS_REQUEST_PENDING), the pQueryRecords member of pQueryResults contains a pointer to a list of DNS_RECORDS and DnsQueryEx will return either error or success. The following conditions invoke a synchronous call to DnsQueryEx and do not utilize the DNS callback: If a call to DnsQueryEx completes asynchronously, the results of the query are returned by the DNS_QUERY_COMPLETION_ROUTINE callback in pQueryRequest, the QueryStatus member of pQueryResults contains DNS_REQUEST_PENDING, and DnsQueryEx returns DNS_REQUEST_PENDING. Applications should track the pQueryResults structure that is passed into DnsQueryEx until the DNS callback succeeds. Applications can cancel an asynchronous query using the pCancelHandle handle returned by DnsQueryEx. pCancelHandle returned from an asynchronous call to DnsQueryEx and pQueryContext is valid until the DNS_QUERY_COMPLETION_ROUTINE DNS callback is invoked. ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsQueryEx",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_QUERY_REQUEST",
        "name": "pQueryRequest",
        "description": "A pointer to a DNS_QUERY_REQUEST structure that contains the query request                             information. Note  By omitting the DNS_QUERY_COMPLETION_ROUTINE callback from the pQueryCompleteCallback member of this structure, DnsQueryEx is called synchronously."
      },
      {
        "in_out": "_Inout_",
        "type": "PDNS_QUERY_RESULT",
        "name": "pQueryResults",
        "description": "A pointer to a DNS_QUERY_RESULT structure that contains the results of the query. On input, the version member of  pQueryResults must be DNS_QUERY_REQUEST_VERSION1 and all other members should be NULL. On output, the remaining members will be filled as part of the query complete.  Note  For asynchronous queries, an application should not free                             this structure until the DNS_QUERY_COMPLETION_ROUTINE callback is invoked. When the query completes, the DNS_QUERY_RESULT structure contains a pointer to a list of                             DNS_RECORDS that should be freed using DnsRecordListFree."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PDNS_QUERY_CANCEL",
        "name": "pCancelHandle",
        "description": "A pointer to a DNS_QUERY_CANCEL structure that can be used to cancel a                             pending asynchronous query. Note  An application should not free                             this structure until the DNS_QUERY_COMPLETION_ROUTINE callback is invoked."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  DnsRecordCompare function compares two DNS resource records (RR).",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns TRUE if the compared records are equivalent, FALSE if they are not. ",
    "remarks": "When comparing records, DNS RRs that are stored using different character encoding are treated by the  DnsRecordCompare function as different, even if the records are otherwise equivalent. ",
    "return_type": "BOOL",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordCompare",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_RECORD",
        "name": "pRecord1",
        "description": "A pointer to a DNS_RECORD structure that contains the first DNS RR of the comparison pair."
      },
      {
        "in_out": "_In_",
        "type": "PDNS_RECORD",
        "name": "pRecord2",
        "description": "A pointer to a DNS_RECORD structure that contains the second DNS RR of the comparison pair."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  DnsRecordCopyEx function creates a copy of a specified resource record (RR). The  DnsRecordCopyEx function is also capable of converting the character encoding during the copy operation.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Successful execution returns a pointer to the (newly created) destination record. Otherwise, returns null. ",
    "remarks": "The CharSetIn parameter is used only if the character encoding of the source RR is not specified in pRecord. ",
    "return_type": "PDNS_RECORD",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordCopyEx",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_RECORD",
        "name": "pRecord",
        "description": "A pointer to a DNS_RECORD structure that contains the RR to be copied."
      },
      {
        "in_out": "_In_",
        "type": "DNS_CHARSET",
        "name": "CharSetIn",
        "description": "A DNS_CHARSET value that specifies the character encoding of the source RR."
      },
      {
        "in_out": "_In_",
        "type": "DNS_CHARSET",
        "name": "CharSetOut",
        "description": "A DNS_CHARSET value that specifies the character encoding required of the destination record."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  DnsRecordListFree function frees memory allocated for DNS records obtained using the  DnsQuery function.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The  DnsRecordListFree function can be used to free memory allocated from query results obtained using a  DnsQuery function call; it cannot free memory allocated for DNS record lists created manually. ",
    "return_type": "void",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordListFree",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_opt_",
        "type": "PDNS_RECORD",
        "name": "pRecordList",
        "description": "A pointer to a DNS_RECORD structure that contains the list of DNS records to be freed."
      },
      {
        "in_out": "_In_",
        "type": "DNS_FREE_TYPE",
        "name": "FreeType",
        "description": "A specifier of how the record list should be freed. The only type currently supported is a deep freeing of the entire record list. For more information and a list of values, see the DNS_FREE_TYPE enumeration."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The  DnsRecordSetCompare function compares two RR sets.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns TRUE if the compared record sets are equivalent, FALSE if they are not. ",
    "remarks": "When comparing record sets, DNS resource records that are stored using different character encoding are treated by the  DnsRecordSetCompare function as equivalent. Contrast this to the  DnsRecordCompare function, in which equivalent records with different encoding are not returned as equivalent records. ",
    "return_type": "BOOL",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordSetCompare",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDNS_RECORD",
        "name": "pRR1",
        "description": "A pointer to a DNS_RECORD structure that contains the first DNS RR set of the comparison pair."
      },
      {
        "in_out": "_Inout_",
        "type": "PDNS_RECORD",
        "name": "pRR2",
        "description": "A pointer to a DNS_RECORD structure that contains the second DNS resource record set of the comparison pair."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDNS_RECORD*",
        "name": "ppDiff1",
        "description": "A pointer to a DNS_RECORD pointer that contains the list of resource records built as a result of the arithmetic performed on them: pRRSet1 minus pRRSet2."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDNS_RECORD*",
        "name": "ppDiff2",
        "description": "A pointer to a DNS_RECORD pointer that contains the list of resource records built as a result of the arithmetic performed on them: pRRSet2 minus pRRSet1."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  DnsRecordSetCopyEx function creates a copy of a specified resource record set. The  DnsRecordSetCopyEx function is also capable of converting the character encoding during the copy operation.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Successful execution returns a pointer to the newly created destination record set. Otherwise, it returns null. ",
    "remarks": "The CharSetIn parameter is used only if the character encoding of the source resource record set is not specified in pRecordSet. ",
    "return_type": "PDNS_RECORD",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordSetCopyEx",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_RECORD",
        "name": "pRecordSet",
        "description": "A pointer to a DNS_RECORD structure that contains the resource record set to be copied."
      },
      {
        "in_out": "_In_",
        "type": "DNS_CHARSET",
        "name": "CharSetIn",
        "description": "A DNS_CHARSET value that specifies the character encoding of the source resource record set."
      },
      {
        "in_out": "_In_",
        "type": "DNS_CHARSET",
        "name": "CharSetOut",
        "description": "A DNS_CHARSET value that specifies the character encoding required of the destination record set."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The DnsRecordSetDetach function detaches the first record set from a specified list of DNS records.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "On return, the DnsRecordSetDetach function points to the detached DNS record set. ",
    "remarks": "",
    "return_type": "PDNS_RECORD",
    "category": "Domain Name System (DNS)",
    "name": "DnsRecordSetDetach",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDNS_RECORD",
        "name": "pRR",
        "description": "A pointer, on input, to a DNS_RECORD structure that contains the list prior to the detachment of the first DNS record in the list of DNS records.  A pointer, on output to a DNS_RECORD structure that contains the list subsequent to the detachment of the DNS record."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The  DnsReleaseContextHandle function releases memory used to store the credentials of a specific account.",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Domain Name System (DNS)",
    "name": "DnsReleaseContextHandle",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ContextHandle",
        "description": "The credentials handle of a specific account."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  DnsReplaceRecordSet function type replaces an existing resource record (RR) set. Like many DNS functions, the  DnsReplaceRecordSet function type is implemented in multiple forms to facilitate different character encoding, which is indicated by a suffix. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns success confirmation upon successful completion. Otherwise, returns the appropriate DNS-specific error code as defined in Winerror.h. ",
    "remarks": "",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsReplaceRecordSet",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDNS_RECORD",
        "name": "pNewSet",
        "description": "A pointer to a  DNS_RECORD structure that contains the RR set that replaces the existing set. The specified RR set is replaced with the contents of pNewSet. To delete a RR set, specify the set in pNewSet, but set RDATA to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Options",
        "description": "A value that contains a bitmap of DNS Update  Options. Options can be combined and all options override DNS_UPDATE_SECURITY_USE_DEFAULT."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hContext",
        "description": "The handle to the credentials of a specific account. Used when secure dynamic update is required. This parameter is optional."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pExtraInfo",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pReserved",
        "description": "This parameter is reserved for future use and must be set to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  DnsValidateName function validates the status of a specified DNS name. Like many DNS functions, the  DnsValidateName function type is implemented in multiple forms to facilitate different character encoding. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "The  DnsValidateName function has the following possible return values: ",
    "remarks": "To verify the status of the Computer Host (single label), use the  DnsValidateName function type with DnsNameHostnameLabel in Format. The  DnsValidateName function works in a progression when determining whether an error exists with a given DNS name, and returns upon finding its first error. Therefore, a DNS name that has multiple, different errors may be reported as having the first error, and could be corrected and resubmitted, only then to find the second error. The  DnsValidateName function searches for errors as follows: ",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsValidateName",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszName",
        "description": "A pointer to a string that represents the DNS name to be examined."
      },
      {
        "in_out": "_In_",
        "type": "DNS_NAME_FORMAT",
        "name": "Format",
        "description": "A DNS_NAME_FORMAT value that specifies the format of the name to be examined."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  DnsValidateServerStatus function validates an IP address as a suitable DNS server.",
    "library": "Dnsapi.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Windns.h",
    "return_value": "The  DnsValidateServerStatus function has the following possible return values: ",
    "remarks": "",
    "return_type": "DNS_STATUS",
    "category": "Domain Name System (DNS)",
    "name": "DnsValidateServerStatus",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSOCKADDR",
        "name": "server",
        "description": "A pointer to a SOCKADDR that contains the DNS server IPv4 or IPv6  address to be examined."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "queryName",
        "description": "A pointer to a Unicode string that represents the fully qualified domain name (FQDN) of the owner of the record set that is queried."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "serverStatus",
        "description": "A pointer to a DWORD that represents the query validation status.  ValueMeaning  ERROR_SUCCESS   No errors. The call was successful.   DNS_VALSVR_ERROR_INVALID_ADDR   server IP address was invalid.    DNS_VALSVR_ERROR_INVALID_NAME   queryName FQDN was invalid.    DNS_VALSVR_ERROR_UNREACHABLE   DNS server was unreachable.   DNS_VALSVR_ERROR_NO_RESPONSE   Timeout waiting for the DNS server response.   DNS_VALSVR_ERROR_NO_AUTH   DNS server was not authoritative or queryName was not found.   DNS_VALSVR_ERROR_REFUSED   DNS server refused the query.   DNS_VALSVR_ERROR_NO_TCP   The TCP query did not return ERROR_SUCCESS after the validation system had already completed a successful query to the DNS server using UDP.   DNS_VALSVR_ERROR_UNKNOWN   An unknown error occurred."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The  DnsWriteQuestionToBuffer function type creates a DNS query message and stores it in a  DNS_MESSAGE_BUFFER structure. Like many DNS functions, the  DnsWriteQuestionToBuffer function type is implemented in multiple forms to facilitate different character encoding. Based on the character encoding involved, use one of the following functions:",
    "library": "Dnsapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Windns.h",
    "return_value": "Returns TRUE upon successful execution, otherwise FALSE. ",
    "remarks": "The following declaration for DnsWriteQuestionToBuffer_UTF8 can be found in Windns.h. ",
    "return_type": "BOOL",
    "category": "Domain Name System (DNS)",
    "name": "DnsWriteQuestionToBuffer",
    "is_callback": 0,
    "dll": "Dnsapi.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDNS_MESSAGE_BUFFER",
        "name": "pDnsBuffer",
        "description": "A pointer to a DNS_MESSAGE_BUFFER structure that contains a DNS query message stored in a buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "pdwBufferSize",
        "description": "The size, in bytes, of the buffer allocated to store pDnsBuffer. If the buffer size is insufficient to contain the message, FALSE is returned and pdwBufferSize contains the minimum required buffer size."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszName",
        "description": "A pointer to a string that represents the name of the owner of the record set being queried."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wType",
        "description": "A value that represents the RR DNS Record Type. wType determines the format of Data. For example, if the value of wType is DNS_TYPE_A, the data type of Data is DNS_A_DATA."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "Xid",
        "description": "A value that specifies the unique DNS query identifier."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fRecursionDesired",
        "description": "A BOOL that specifies whether recursive name query should be used  by the DNS name server. Set to TRUE to request recursive name query, FALSE to request iterative name query."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]