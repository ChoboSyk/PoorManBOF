[
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function supports these alternate path forms: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathAllocCanonicalize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to a buffer that contains the original string. This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH.        PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszPathOut",
        "description": "The address of a pointer to a buffer that, when this function returns successfully, receives the canonicalized path string. It is the responsibility of the caller to free this resource, when it is no longer needed, by calling the LocalFree function. This value cannot be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function responds to the strings \".\" and \"..\" embedded in a path. The \"..\" string indicates to remove the immediately preceding path segment. The \".\" string indicates to skip over the next path segment. Note that the root segment of the path cannot be removed. If there are more \"..\" strings than there are path segments, the function returns S_OK and the buffer pointed to by pszPathOut contains a single backslash, \"\\\". All trailing periods are removed from the path, except when preceded by the \"*\" wild card character. In that case, a single period is retained after the '*' character, but all other trailing periods are removed. If the resulting path is a root drive (\"x:\"), a backslash is appended (\"x:\\\"). The following examples show the effect of these strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCanonicalize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the canonicalized path string."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the original path string. If this value points to an empty string, or results in an empty string once the \".\" and \"..\" elements are removed, a single backslash is copied to the buffer pointed to by pszPathOut."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including but not limited to the following.  ",
    "remarks": "This function responds to the strings \".\" and \"..\" embedded in a path. The \"..\" string indicates to remove the immediately preceding path segment. The \".\" string indicates to skip over the next path segment. Note that the root segment of the path cannot be removed. If there are more \"..\" strings than there are path segments, the function returns S_OK and the buffer pointed to by pszPathOut contains a single backslash, \"\\\". All trailing periods are removed from the path, except when preceded by the \"*\" wild card character. In that case, a single period is retained after the '*' character, but all other trailing periods are removed. If the resulting path is a root drive (\"x:\"), a backslash is appended (\"x:\\\"). The following examples show the effect of these strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCanonicalizeEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the edited path string."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the original path string. If this value is NULL, points to an empty string, or results in an empty string once the \".\" and \"..\" elements are removed, a single backslash is copied to the buffer pointed to by pszPathOut."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. If it is not, this flag is ignored.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Simplifies a path by removing navigation elements such as \".\" and \"..\" to produce a direct, well-formed path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if a result has been computed and the content of the lpszDst output buffer is valid. Returns FALSE otherwise, and the contents of the buffer pointed to by lpszDst are invalid. To get extended error information, call GetLastError. ",
    "remarks": "This function allows the user to specify what to remove from a path by inserting special character sequences into the path. The \"..\" sequence indicates to remove a path segment from the current position to the previous path segment. The \".\" sequence indicates to skip over the next path segment to the following path segment. The root segment of the path cannot be removed. If there are more \"..\" sequences than there are path segments, the function returns TRUE and contents of the buffer pointed to by lpszDst contains just the root, \"\\\".  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCanonicalize",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszDst",
        "description": "Type: LPTSTR A pointer to a string that receives the canonicalized path. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszSrc",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be canonicalized."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "While either pszPathIn or pszMore can NULL, they cannot both be NULL. This function supports these alternate path forms: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathAllocCombine",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualified, it is copied directly to the output buffer without being combined with the other path."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the construction of \\\\?\\ paths longer than MAX_PATH.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_ENSURE_TRAILING_SLASH 0x00000020       When combining or normalizing a path, ensure there is a trailing backslash. Note  This value is available starting in Windows 10, version 1703."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszPathOut",
        "description": "The address of a pointer to a buffer that, when this function returns successfully, receives the combined path string. It is the responsibility of the caller to free this resource, when it is no longer needed, by calling the LocalFree function. This value cannot be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "If both pszPathIn and pszMore are NULL or point to empty strings, a single backslash is copied to the buffer pointed to by pszPathOut. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCombine",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualfied, it is copied directly to the output buffer without being combined with the other path. This value can be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "If both pszPathIn and pszMore are NULL or point to empty strings, a single backslash is copied to the buffer pointed to by pszPathOut. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchCombineEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPathOut",
        "description": "A pointer to a buffer that, when this function returns successfully, receives the combined path string. This parameter can point to the same buffer as pszPathIn or pszMore."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPathOut",
        "description": "The size of the buffer pointed to by pszPathOut, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPathIn",
        "description": "A pointer to the first path string. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the second path string. If this path begins with a single backslash, it is combined with only the root of the path pointed to by pszPathIn. If this path is fully qualfied, it is copied directly to the output buffer without being combined with the other path. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the construction of \\\\?\\ paths longer than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. Note that cchPathOut must be greater than MAX_PATH. If it is not, this flag is ignored.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the concatenated path string. This is the same string pointed to by pszPathOut. If this function does not return successfully, this value is NULL. ",
    "remarks": "The directory path should be in the form of A:,B:, ..., Z:. The file path should be in a correct form that represents the file name part of the path. If the directory path ends with a backslash, the backslash will be maintained. Note that while lpszDir and lpszFile are both optional parameters, they cannot both be NULL.  ",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathCombine",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPathOut",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the combined path string. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszPathIn",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the first path. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMore",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the second path. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the path string already ends in a backslash, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddBackslash",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer that, when this function returns successfully, points to the new string's terminating null character. If the backslash could not be appended due to inadequate buffer size, this value is NULL. ",
    "remarks": "",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathAddBackslash",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a buffer with a string that represents a path. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the path string already ends in a backslash, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddBackslashEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended backslash. This value should not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR*",
        "name": "ppszEnd",
        "description": "A value that, when this function returns successfully, receives the address of a pointer to the terminating null character at the end of the string."
      },
      {
        "in_out": "_Out_opt_",
        "type": "size_t*",
        "name": "pcchRemaining",
        "description": "A pointer to a value that, when this function returns successfully, is set to the number of unused characters in the destination buffer, including the terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns an HRESULT code, including the following.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAddExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the buffer contains the string with the appended extension. This value should not be NULL.                           Note  If the original string already has a file name extension present, no new extension will be added and the original string will be unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExt",
        "description": "A pointer to the file name extension string. This string can be given either with or without a preceding period (\".ext\" or \"ext\")."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Adds a file name extension to a path string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if an extension was added, or FALSE otherwise. ",
    "remarks": "If there is already a file name extension present, no extension will be added. If the pszPath points to a NULL string, the result will be the file name extension only. If pszExtension points to a NULL string, an \".exe\" extension will be added. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathAddExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a buffer with the null-terminated string to which the file name extension will be appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszExtension",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the file name extension. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function inserts a backslash between the two strings, if one is not already present. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAppend",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer to the path to append to the end of the path pointed to by pszPath. UNC paths and paths beginning with the \"\\\\?\\\" sequence are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by pszPath instead of being appended to it."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT code, including the following.  ",
    "remarks": "This function inserts a backslash between the two strings, if one is not already present. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchAppendEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to a buffer that, on entry, contains the original path. When this function returns successfully, the buffer contains the original path plus the appended path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszMore",
        "description": "A pointer the path to append to the end of the path pointed to by pszPath. UNC paths and paths that begin with the sequence \\\\?\\ are accepted and recognized as fully-qualified paths. These paths replace the string pointed to by pszPath instead of being appended to it."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "One or more of the following flags:  ValueMeaning      PATHCCH_NONE 0x0000000   Do not allow for the construction of \\\\?\\ paths (ie, long paths) longer than MAX_PATH.    PATHCCH_ALLOW_LONG_PATHS 0x00000001   Allow the building of \\\\?\\ paths longer than MAX_PATH.       PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS 0x00000002   Forces the API to treat the caller as long path enabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with  PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS.  Note  This value is available starting in Windows 10, version 1703.       PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS 0x00000004   Forces the API to treat the caller as long path disabled, independent of the       process's long name enabled state. This option can be used only when PATHCCH_ALLOW_LONG_PATHS is specified, and cannot be used with PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS.   Note  This value is available starting in Windows 10, version 1703.       PATHCCH_DO_NOT_NORMALIZE_SEGMENTS 0x00000008   Disables the normalization of path segments that includes removing trailing dots and spaces.       This enables access to paths that win32 path normalization will block.   Note  This value is available starting in Windows 10, version 1703.           PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH 0x00000010       Converts the input path into the extended length DOS device path form (with the \\\\?\\ prefix)       f not already in that form. This enables access to paths that are otherwise not addressable       due to Win32 normalization rules (that can strip trailing dots and spaces) and path       length limitations. This option implies the same behavior of PATHCCH_DO_NOT_NORMALIZE_SEGMENTS.   Note  This value is available starting in Windows 10, version 1703."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Appends one path to the end of another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "This function automatically inserts a backslash between the two strings, if one is not already present. The path supplied in pszPath cannot begin with \"..\\\\\" or \".\\\\\" to produce a relative path string. If present, those periods are stripped from the output string. For example, appending \"path3\" to \"..\\\\path1\\\\path2\" results in an output of \"\\path1\\path2\\path3\" rather than \"..\\path1\\path2\\path3\".  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathAppend",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string to which the path specified in pszMore is appended. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMore",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be appended."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchFindExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path to search."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_",
        "type": "PCWSTR*",
        "name": "ppszExt",
        "description": "The address of a pointer that, when this function returns successfully, points to the \".\" character that precedes the extension within pszPath. If no extension is found, it points to the string's terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for an extension.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the \".\" that precedes the extension within pszPath if an extension is found, or the address of the terminating null character otherwise. ",
    "remarks": "Note that a valid file name extension cannot contain a space. For more information on valid file name extensions, see File Type Handlers. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathFindExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search, including the extension being searched for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "Returns TRUE if the specified path is a root, or FALSE otherwise. ",
    "remarks": "The following table shows the PathCchIsRoot return value for various paths.  This function returns TRUE for paths such as \"\\\", \"X:\\\" or \"\\\\server\\share\". Paths such as \"..\\path2\" or \"\\\\server\\\" return FALSE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCchIsRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a path string refers to the root of a volume.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the specified path is a root, or FALSE otherwise. ",
    "remarks": "Returns TRUE for paths such as \"\\\", \"X:\\\" or \"\\\\server\\share\". Paths such as \"..\\path2\" or \"\\\\server\\\" return FALSE.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be validated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the string was a root path or if no backslash was found, or an error code otherwise. ",
    "remarks": "This function will not remove the backslash from a root path string, such as \"C:\\\". ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveBackslash",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the trailing backslash from a given path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR A pointer that, when this function returns successfully and if a backslash has been removed, points to the terminating null character that has replaced the backslash at the end of the string. If the path did not include a trailing backslash, this value will point to the final character in the string.  ",
    "remarks": "",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathRemoveBackslash",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the backslash."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if the string was a root path or if no backslash was found, or an error code otherwise. ",
    "remarks": "This function will not remove the backslash from a root path string, such as \"C:\\\". ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveBackslashEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any trailing backslash removed. If no trailing backslash was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR*",
        "name": "ppszEnd",
        "description": "A value that, when this function returns successfully, receives the address of a pointer to end of the new string. If the string is a root path such as \"C:\\\", the pointer points to the backslash; otherwise the pointer points to the string's terminating null character."
      },
      {
        "in_out": "_Out_opt_",
        "type": "size_t*",
        "name": "pcchRemaining",
        "description": "A pointer to a value that, when this function returns successfully, receives the number of unused characters in the destination buffer, including the terminating null character. If the string is a root path such as \"C:\\\", this count includes the backslash in that string."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if no extension was found, or an error code otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the string contains the path with any extension removed. If no extension was found, the string is unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the file name extension from a path, if one is present.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value.  ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathRemoveExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH from which to remove the extension."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the function was successful, S_FALSE if there was nothing to remove, or an error code otherwise. ",
    "remarks": "The following table shows the effect of this function on a selection of path strings.  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRemoveFileSpec",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the fully-qualified path string. When this function returns successfully, the string will have had its last element and its leading backslash removed. This function does not affect root paths such as \"C:\\\". In the case of a root path, the path string is returned unaltered. If a path string ends with a trailing backslash, only that backslash is removed."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the trailing file name and backslash from a path, if they are present.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if something was removed, or zero otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathRemoveFileSpec",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove the file name."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchRenameExtension",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, this value points to the same string, but with the renamed or added extension."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExt",
        "description": "A pointer to the new extension string. The leading '.' character is optional. In the case of an empty string (\"\"), any existing extension in the path string is removed."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero if the new path and extension would exceed MAX_PATH characters. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathRenameExtension",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR Pointer to a null-terminated string of length MAX_PATH in which to replace the extension."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszExt",
        "description": "Type: LPCTSTR Pointer to a character buffer that contains a '.' character followed by the new extension."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchSkipRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      },
      {
        "in_out": "_Out_",
        "type": "PCWSTR*",
        "name": "ppszRootEnd",
        "description": "The address of a pointer that, when this function returns successfully, points to the first character in a path following the drive letter or UNC server/share path elements. If the path consists of only a root, this value will point to the string's terminating null character."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR A pointer that, when this function returns successfully, points to the beginning of the subpath that follows the root (drive letter or UNC server/share). If the function encounters an error, this value will be NULL. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathSkipRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to parse."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the prefix was removed, S_FALSE if the path did not have a prefix to remove, or an HRESULT failure code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchStripPrefix",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, the same path string will have had the prefix removed, if the prefix was present. If no prefix was present, the string will be unchanged."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "This function returns S_OK if the path was truncated, S_FALSE if the path was already just a root, or an HRESULT failure code. ",
    "remarks": "Some examples of the effect of this function:  ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCchStripToRoot",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string. When this function returns successfully, this string contains only the root information taken from that path."
      },
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "cchPath",
        "description": "The size of the buffer pointed to by pszPath, in characters."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes all file and directory elements in a path except for the root information.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if a valid drive letter was found in the path, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathStripToRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "szRoot",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be converted. When this function returns successfully, this string contains only the root information taken from that path."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Pathcch.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Pathcch.h",
    "return_value": "Returns TRUE if the string is a valid UNC path; otherwise, FALSE. This example feeds sample strings to the PathIsUNCEx function to demonstrate its return values. This table summarizes the results of the code above.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNCEx",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "A pointer to the path string."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCWSTR*",
        "name": "ppszServer",
        "description": "A pointer to a string that, when this function returns successfully, receives the server portion of the UNC path. This value can be NULL if you don't need this information."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is a valid UNC path; otherwise, FALSE. This example feeds sample strings to the PathIsUNC function to demonstrate its return value. This table summarizes the results of the code above.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to validate."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves an object that implements an IQueryAssociations interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For systems earlier than Windows Vista, use the AssocCreate function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "AssocCreateForClasses",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const ASSOCIATIONELEMENT*",
        "name": "rgClasses",
        "description": "Type: const ASSOCIATIONELEMENT* A pointer to an array of ASSOCIATIONELEMENT structures."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cClasses",
        "description": "Type: ULONG The number of elements in the array pointed to by rgClasses."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired IID, normally IID_IQueryAssociations."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is normally IQueryAssociations."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is to be used only by implementers of       IShellFolder Namespace Extensions. Other calling applications should use       IShellFolder2::GetDetailsEx to get a value       for a PROPERTYKEY. This function is to be used by       implementers of IShellFolder Namespace Extensions. The provided namespace extension must support the use of this API in one of the following three ways. If the ShellFolder being implemented contains items that are extensible through the file associations mechanism, then you can use this function to retrieve PropertyKeys that are declared for a given file association. For example, if a given Shell folder drives a details pane and you want the properties displayed in that pane to be governed by third party file name extensions, then you can use this function to return PKEY_PropList_PreviewDetails.  This key has a value that is declared in the registry for that file name extension with a semicolon delimited list of properties. There is a list of file name extension defined properties in the registry. This list includes but is not limited to the following: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "AssocGetDetailsOfPropKey",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to the shell folder for which the details of the property key of the file association are being retrieved."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD The PIDL of the child item for which the file associations are being requested."
      },
      {
        "in_out": "_In_",
        "type": "PROPERTYKEY*",
        "name": "pkey",
        "description": "Type: PROPERTYKEY* A pointer to the property key that is being retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pv",
        "description": "Type: VARIANT* When this function returns, contains the details of the given property key."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfFoundPropKey",
        "description": "Type: BOOL* When this function returns, contains a flag that is TRUE if the property key was found, otherwise FALSE."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Creates a context menu for a selected group of file folder objects.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CDefFolderMenu_Create2",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE An ITEMIDLIST structure for the parent folder. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of ITEMIDLIST structures in the array pointed to by apidl."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY*",
        "name": "apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY* A pointer to an array of ITEMIDLIST structures, one for each item that is selected."
      },
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to the parent folder's IShellFolder interface. This IShellFolder must support the IDataObject interface. If it does not, CDefFolderMenu_Create2 fails and returns E_NOINTERFACE. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPFNDFMCALLBACK",
        "name": "lpfn",
        "description": "Type: LPFNDFMCALLBACK The LPFNDFMCALLBACK callback object. This value can be NULL if the callback object is not needed."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "nKeys",
        "description": "Type: UINT The number of registry keys in the array pointed to by ahkeys.  Note  The maximum number of registry keys is 16. Callers must enforce this limit as the API does not. Failing to do so can result in memory corruption."
      },
      {
        "in_out": "_In_opt_",
        "type": "const HKEY*",
        "name": "ahkeys",
        "description": "Type: const HKEY* A pointer to an array of registry keys that specify the context menu handlers used with the menu's entries. For more information on context menu handlers, see Creating Context Menu Handlers. This array can contain a maximum of 16 registry keys."
      },
      {
        "in_out": "_Out_",
        "type": "IContextMenu**",
        "name": "ppcm",
        "description": "Type: IContextMenu** The address of an IContextMenu interface pointer that, when this function returns successfully, points to the IContextMenu object that represents the context menu."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Shuts down the content indexer and closes all open catalogs.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Ntquery.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function does not have an associated header or library file. To use this function, call LoadLibrary with the DLL name (Query.dll) to obtain a module handle, and then call GetProcAddress with that module handle and an architecture-specific function name to get the address of this function. Specify the function name as \"?CIShutdown@@YGXXZ\" for x86 architecture, or as \"?CIShutdown@@YAXXZ\" for x64 architecture. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "CIShutdown",
    "is_callback": 0,
    "dll": "Query.dll (version 5.1 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: LPWSTR* A pointer to an array of LPWSTR values, similar to argv. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The address returned by CommandLineToArgvW is the address of the first element in an array of LPWSTR values; the number of pointers in this array is indicated by pNumArgs. Each pointer to a null-terminated Unicode string represents an individual argument found on the command line. CommandLineToArgvW allocates a block of contiguous memory for pointers to the argument strings, and for the argument strings themselves; the calling application must free the memory used by the argument list when it is no longer needed. To free the memory, use a single call to the LocalFree function. For more information about the argv and argc argument convention, see Argument Definitions and Parsing C++ Command-Line Arguments. The GetCommandLineW function can be used to get a command line string that is suitable for use as the lpCmdLine parameter. This function accepts command lines that contain a program name; the program name can be enclosed in quotation marks or not. CommandLineToArgvW has a special interpretation of backslash characters when they are followed by a quotation mark character (\"), as follows:  The following example demonstrates how to parse a Unicode command-line string. The code frees the memory for the argument list at exit. ",
    "return_type": "LPWSTR*",
    "category": "Windows Shell",
    "name": "CommandLineToArgvW",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpCmdLine",
        "description": "Type: LPCWSTR Pointer to a null-terminated Unicode string that contains the full command line. If this parameter is an empty string the function returns the path to the current executable file."
      },
      {
        "in_out": "_Out_",
        "type": "int*",
        "name": "pNumArgs",
        "description": "Type: int* Pointer to an int that receives the number of array elements returned, similar to argc."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Creates a per-user, per-app profile for Windows Store apps.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "If this function succeeds, it returns a standard HRESULT code, including the following:  ",
    "remarks": "A profile contains folders and registry storage that are per-user and per-app. The folders have ACLs that prevent them from being accessed by other users and apps. These folders can be accessed by calling SHGetKnownFolderPath. The function creates a profile for the current user. To create a profile on behalf of another user, you must impersonate that user. To create profiles for multiple users of the same app, you must call CreateAppContainerProfile for each user. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CreateAppContainerProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name of the app container. To ensure uniqueness, it is recommended that this string contains the app name as well as the publisher. This string can be up to 64 characters in length.  Further, it must fit into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\"."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDisplayName",
        "description": "The display name. This string can be up to 512 characters in length."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDescription",
        "description": "A description for the app container. This string can be up to 2048 characters in length."
      },
      {
        "in_out": "_In_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "pCapabilities",
        "description": "The SIDs that define the requested capabilities."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCapabilityCount",
        "description": "The number of SIDs in pCapabilities."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "ppSidAppContainerSid",
        "description": "The SID for the profile. This buffer must be freed using the FreeSid function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the environment variables for the specified user. This block can then be passed to the CreateProcessAsUser function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "To free the buffer when you have finished with the environment block, call the  DestroyEnvironmentBlock function. If the environment block is passed to  CreateProcessAsUser, you must also specify the CREATE_UNICODE_ENVIRONMENT flag. After CreateProcessAsUser has returned, the new process has a copy of the environment block, and DestroyEnvironmentBlock can be safely called. User-specific environment variables such as %USERPROFILE% are set only when the user's profile is loaded. To load a user's profile, call the  LoadUserProfile function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "CreateEnvironmentBlock",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "lpEnvironment",
        "description": "Type: LPVOID* When this function returns, receives a pointer to the new environment block. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0)."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the  LogonUser function. If this is a primary token, the token must have TOKEN_QUERY and TOKEN_DUPLICATE access. If the token is an impersonation token, it must have TOKEN_QUERY access. For more information, see  Access Rights for Access-Token Objects.                        If this parameter is NULL, the returned environment block contains system variables only."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInherit",
        "description": "Type: BOOL Specifies whether to inherit from the current process' environment. If this value is TRUE, the process inherits the current process' environment. If this value is FALSE, the process does not inherit the current process' environment."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. Note that the function returns before the process has finished initialization. If a required DLL cannot be located or fails to initialize, the process is terminated. To get the termination status of a process, call GetExitCodeProcess. ",
    "remarks": "CreateProcessAsUser must be able to open the primary token of the calling process with the TOKEN_DUPLICATE and TOKEN_IMPERSONATE access rights. By default,  CreateProcessAsUser creates the new process on a noninteractive window station with a desktop that is not visible and cannot receive user input. To enable user interaction with the new process, you must specify the name of the default interactive window station and desktop, \"winsta0\\default\", in the lpDesktop member of the  STARTUPINFO structure. In addition, before calling  CreateProcessAsUser, you must change the discretionary access control list (DACL) of both the default interactive window station and the default desktop. The DACLs for the window station and desktop must grant access to the user or the logon session represented by the hToken parameter. CreateProcessAsUser does not load the specified user's profile into the HKEY_USERS registry key. Therefore, to access the information in the HKEY_CURRENT_USER registry key, you must load the user's profile information into HKEY_USERS with the  LoadUserProfile function before calling  CreateProcessAsUser. Be sure to call UnloadUserProfile after the new process exits. If the lpEnvironment parameter is NULL, the new process inherits the environment of the calling process.  CreateProcessAsUser does not automatically modify the environment block to include environment variables specific to the user represented by hToken. For example, the USERNAME and USERDOMAIN variables are inherited from the calling process if lpEnvironment is NULL. It is your responsibility to prepare the environment block for the new process and specify it in lpEnvironment. The  CreateProcessWithLogonW    and CreateProcessWithTokenW functions are similar to  CreateProcessAsUser, except that the caller does not need to call the  LogonUser function to authenticate the user and get a token. CreateProcessAsUser allows you to access the specified directory and executable image in the security context of the caller or the target user. By default,  CreateProcessAsUser accesses the directory and executable image in the security context of the caller. In this case, if the caller does not have access to the directory and executable image, the function fails. To access the directory and executable image using the security context of the target user, specify hToken in a call to the  ImpersonateLoggedOnUser function before calling  CreateProcessAsUser. The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the process, or specified in the  OpenProcess function to open a handle to the process. The initial thread in the process is also assigned a thread identifier. It can be specified in the  OpenThread function to open a handle to the thread. The identifier is valid until the thread terminates and can be used to uniquely identify the thread within the system. These identifiers are returned in the  PROCESS_INFORMATION structure. The calling thread can use the  WaitForInputIdle function to wait until the new process has finished its initialization and is waiting for user input with no input pending. This can be useful for synchronization between parent and child processes, because  CreateProcessAsUser returns without waiting for the new process to finish its initialization. For example, the creating process would use  WaitForInputIdle before trying to find a window associated with the new process. The preferred way to shut down a process is by using the  ExitProcess function, because this function sends notification of approaching termination to all DLLs attached to the process. Other means of shutting down a process do not notify the attached DLLs. Note that when a thread calls  ExitProcess, other threads of the process are terminated without an opportunity to execute any additional code (including the thread termination code of attached DLLs). For more information, see  Terminating a Process. The lpApplicationName parameter can be NULL, in which case the executable name must be the first white space\u00e2\u0080\u0093delimited string in lpCommandLine. If the executable or path name has a space in it, there is a risk that a different executable could be run because of the way the function parses spaces. The following example is dangerous because the function will attempt to run \"Program.exe\", if it exists, instead of \"MyApp.exe\". If a malicious user were to create an application called \"Program.exe\" on a system, any program that incorrectly calls  CreateProcessAsUser using the Program Files directory will run this application instead of the intended application. To avoid this problem, do not pass NULL for lpApplicationName. If you do pass NULL for lpApplicationName, use quotation marks around the executable path in lpCommandLine, as shown in the example below. PowerShell:  When the CreateProcessAsUser function is used to implement a cmdlet in PowerShell version 2.0, the cmdlet operates correctly for both fan-in and fan-out remote sessions. Because of certain security scenarios, however, a cmdlet implemented with CreateProcessAsUser only operates correctly in PowerShell version 3.0 for fan-in remote sessions; fan-out remote sessions will fail because of insufficient client security privileges. To implement a cmdlet that works for both fan-in and fan-out remote sessions in PowerShell version 3.0, use the CreateProcess function. For an example, see  Starting an Interactive Client Process. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "CreateProcessAsUser",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "A handle to the primary token that represents a user. The handle must have the TOKEN_QUERY, TOKEN_DUPLICATE, and TOKEN_ASSIGN_PRIMARY access rights. For more information, see  Access Rights for Access-Token Objects. The user represented by the token must have read and execute access to the application specified by the lpApplicationName or the lpCommandLine parameter.     To get a primary token that represents the specified user, call the  LogonUser function. Alternatively, you can call the  DuplicateTokenEx function to convert an impersonation token into a primary token. This allows a server application that is impersonating a client to create a process that has the security context of the client. If hToken is a restricted version of the caller's primary token, the SE_ASSIGNPRIMARYTOKEN_NAME privilege is not required. If the necessary privileges are not already enabled,  CreateProcessAsUser enables them for the duration of the call. For more information, see  Running with Special Privileges. Terminal Services:  The process is run in the session specified in the token. By default, this is the same session that called LogonUser. To change the session, use the  SetTokenInformation function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpApplicationName",
        "description": "The name of the module to be executed. ..."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPTSTR",
        "name": "lpCommandLine",
        "description": "The command line to be executed. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpProcessAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new process object and determines whether child processes can inherit the returned handle to the process. If lpProcessAttributes is NULL or lpSecurityDescriptor is NULL, the process gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller, in which case the process may not be opened again after it is run. The process handle is valid and will continue to have full access rights."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpThreadAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread object and determines whether child processes can inherit the returned handle to the thread. If lpThreadAttributes is NULL or lpSecurityDescriptor is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The default security descriptor is that of the user referenced in the hToken parameter. This security descriptor may not allow access for the caller."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInheritHandles",
        "description": "If this parameter is TRUE, each inheritable handle in the calling process is inherited by the new process. If the parameter is FALSE, the handles are not inherited. Note that inherited handles have the same value and access rights as the original handles. Terminal Services:  You cannot inherit handles across sessions. Additionally, if this parameter is TRUE, you must create the process in the same session as the caller."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "The flags that control the priority class and the creation of the process. For a list of values, see  Process Creation Flags.     This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see  GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the creating process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process receives the default priority class of the calling process."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "A pointer to an environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process.     An environment block consists of a null-terminated block of null-terminated strings. Each string is in the following form: name=value\\0 Because the equal sign is used as a separator, it must not be used in the name of an environment variable. An environment block can contain either Unicode or ANSI characters. If the environment block pointed to by lpEnvironment contains Unicode characters, be sure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT.  If this parameter is NULL and the environment block of the parent process contains Unicode characters, you must also ensure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. The ANSI version of this function, CreateProcessAsUserA fails if the total size of the environment block for the process exceeds 32,767 characters. Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block. Windows Server 2003 and Windows XP:  If the size of the combined user and system environment variable exceeds 8192 bytes, the process created by CreateProcessAsUser no longer runs with the environment block passed to the function by the parent process. Instead, the child process runs with the environment block returned by the CreateEnvironmentBlock function.  To retrieve a copy of the environment block for a given user, use the  CreateEnvironmentBlock function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpCurrentDirectory",
        "description": "The full path to the current directory for the process. The string can also specify a UNC path.  If this parameter is NULL, the new process will have the same current drive and directory as the calling process. (This feature is provided primarily for shells that need to start an application and specify its initial drive and working directory.)"
      },
      {
        "in_out": "_In_",
        "type": "LPSTARTUPINFO",
        "name": "lpStartupInfo",
        "description": "A pointer to a  STARTUPINFO or STARTUPINFOEX structure. The user must have full access to both the specified window station and desktop. If you want the process to be interactive, specify winsta0\\default. If the lpDesktop member is NULL, the new process inherits the desktop and window station of its parent process.  If this member is an empty string, \"\", the new process connects to a window station using the rules described in Process Connection to a Window Station. To set extended attributes, use a STARTUPINFOEX structure and specify EXTENDED_STARTUPINFO_PRESENT in the dwCreationFlags parameter. Handles in  STARTUPINFO or STARTUPINFOEX must be closed with  CloseHandle when they are no longer needed. Important  The caller is responsible for ensuring that the standard handle fields in STARTUPINFO contain valid handle values. These fields are copied unchanged to the child process without validation, even when the dwFlags member specifies STARTF_USESTDHANDLES. Incorrect values can cause the child process to misbehave or crash. Use the Application Verifier runtime verification tool to detect invalid handles."
      },
      {
        "in_out": "_Out_",
        "type": "LPPROCESS_INFORMATION",
        "name": "lpProcessInformation",
        "description": "A pointer to a  PROCESS_INFORMATION structure that receives identification information about the new process.     Handles in  PROCESS_INFORMATION must be closed with  CloseHandle when they are no longer needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a new most recently used (MRU) list.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns a handle to the new MRU list, or 0 in case of an error. ",
    "remarks": "This function is not included in a public header or library. It can be accessed through GetProcAddress or extracted from comctl32.dll by its ordinal, which is 400 for CreateMRUListW. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "CreateMRUListW",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPMRUINFO",
        "name": "lpmi",
        "description": "Type: LPMRUINFO A pointer to an MRUINFO structure defining the MRU list."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a new user profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "The caller must have administrator privileges to call this function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CreateProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszUserSid",
        "description": "Type: LPCWSTR Pointer to the SID of the user as a string."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszUserName",
        "description": "Type: LPCWSTR The user name of the new user. This name is used as the base name for the profile directory."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pszProfilePath",
        "description": "Type: LPWSTR When this function returns, contains a pointer to the full path of the profile."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchProfilePath",
        "description": "Type: DWORD Size of the buffer pointed to by pszProfilePath, in characters."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Provides default processing for any messages that a screen saver application does not process.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: LONG The return value specifies the result of the message processing and depends on the message sent. ",
    "remarks": "A screen saver application's ScreenSaverProc window procedure should use DefScreenSaverProc instead of the DefWindowProc function to provide default message processing. The DefScreenSaverProc function passes any messages that do not affect screen saver operation to DefWindowProc. The following table describes how the DefScreenSaverProc processes a variety of window messages.  ",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "DefScreenSaverProc",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The identifier of the screen saver window."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT The message to be processed. The DefScreenSaverProc function responds to messages that affect the screen saver's operation, as detailed in the Remarks section. If a screen saver application must perform a different action in response to any of these messages, the application's ScreenSaverProc window procedure should process the message."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: LRESULT The returned value is specific to the message sent. This value should be ignored. ",
    "remarks": "You do not need to call the default window procedure; this function calls it automatically. The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API. A subclass callback is identified by a unique pairing of a callback function pointer and an unsigned ID value. Each callback can also store a single DWORD of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "LRESULT",
    "category": "Windows Shell",
    "name": "DefSubclassProc",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT A value of type unsigned int that specifies a window message."
      },
      {
        "in_out": "_In_",
        "type": "WPARAM",
        "name": "WPARAM",
        "description": "Type: WPARAM Specifies additional message information. The contents of this parameter depend on the value of the window message."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "LPARAM",
        "description": "Type: LPARAM Specifies additional message information. The contents of this parameter depend on the value of the window message. Note: On 64-bit versions of Windows LPARAM is a 64-bit value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Deletes the specified per-user, per-app profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "If this function succeeds, it returns a standard HRESULT code, including the following:  ",
    "remarks": "To ensure the best results, close all file handles in the profile storage locations before calling the DeleteAppContainerProfile function. Otherwise, this function may not be able to completely remove the storage locations for the profile. This function deletes the profile for the current user. To delete the profile for another user, you must impersonate that user. If the function fails, the status of the profile is undetermined, and you should call DeleteAppContainerProfile again to complete the operation. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "DeleteAppContainerProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name given to the profile in the call to the CreateAppContainerProfile function. This string is at most 64 characters in length, and  fits into the pattern described by the regular expression \"[-_. A-Za-z0-9]+\"."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Deletes the user profile and all user-related settings from the specified computer. The caller must have administrative privileges to delete a user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "DeleteProfile might fail when passed the security identifier (SID) of the local system account (S-1-5-18). For more information, see KB890212. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DeleteProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSidString",
        "description": "Type: LPCTSTR Pointer to a string that specifies the user      SID."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpProfilePath",
        "description": "Type: LPCTSTR Pointer to a string that specifies the profile path. If this parameter is NULL, the function obtains the path from the registry."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpComputerName",
        "description": "Type: LPCTSTR Pointer to a string that specifies the name of the computer from which the profile is to be deleted. If this parameter is NULL, the local computer name is used.                               Note  As of Windows Vista, this parameter must be NULL. If it is not, this function fails with the error code ERROR_INVALID_PARAMETER."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees environment variables created by the CreateEnvironmentBlock function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DestroyEnvironmentBlock",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "Type: LPVOID Pointer to the environment block created by  CreateEnvironmentBlock. The environment block is an array of null-terminated Unicode strings. The list ends with two nulls (\\0\\0)."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the SID of the specified profile.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "DeriveAppContainerSidFromAppContainerName",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerName",
        "description": "The name of the profile."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "ppsidAppContainerSid",
        "description": "The SID for the profile. This buffer must be freed using the FreeSid function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName is reserved for future use.]",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Reserved. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "psidAppContainerSid",
        "description": "Reserved."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszRestrictedAppContainerName",
        "description": "Reserved."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "ppsidRestrictedAppContainerSid",
        "description": "Reserved."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Implemented by many of the Windows Shell DLLs to allow applications to obtain DLL-specific version information.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is exported by name from each DLL that implements it. Currently, most of the Windows Shell and controls DLLs implement DllGetVersion. These include, but are not limited to, Shell32.dll, Comctl32.dll, Shdocvw.dll, and Shlwapi.dll. To call this function, use the LoadLibrary and GetProcAddress functions to obtain the function pointer. The DLLGETVERSIONPROC type is used as the data type to define a pointer to a DllGetVersion function. Use the pointer when calling the function dynamically by loading the library and getting the function's address. See Shell and Shlwapi DLL Versions for a detailed discussion of the different file versions, and how to use DllGetVersion. ",
    "return_type": "HRESULT CALLBACK",
    "category": "Windows Shell",
    "name": "DllGetVersion",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "DLLVERSIONINFO*",
        "name": "pdvi",
        "description": "Type: DLLVERSIONINFO* A pointer to a DLLVERSIONINFO structure that receives the version information. The cbSize member must be filled in before you call this function.  Version 5.0. DLLs that are shipped with Windows 2000 or later systems may return a DLLVERSIONINFO2 structure. To maintain backward compatibility, the first member of a DLLVERSIONINFO2 structure is a DLLVERSIONINFO structure."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Registers whether a window accepts dropped files.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "No return value. ",
    "remarks": "An application that calls DragAcceptFiles with the fAccept parameter set to TRUE has identified itself as able to process the WM_DROPFILES message from File Manager. ",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "DragAcceptFiles",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The identifier of the window that is registering whether it will accept dropped files."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fAccept",
        "description": "Type: BOOL A value that indicates if the window identified by the hWnd parameter accepts dropped files. This value is TRUE to accept dropped files or FALSE to discontinue accepting dropped files."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Releases memory that the system allocated for use in transferring file names to the application.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "No return value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "DragFinish",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Identifier of the structure that describes dropped files. This handle is retrieved from the wParam parameter of the WM_DROPFILES message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the names of dropped files that result from a successful drag-and-drop operation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: UINT A nonzero value indicates a successful call. When the function copies a file name to the buffer, the return value is a count of the characters copied, not including the terminating null character. If the index value is 0xFFFFFFFF, the return value is a count of the dropped files. Note that the index variable itself returns unchanged, and therefore remains 0xFFFFFFFF. If the index value is between zero and the total number of dropped files, and the lpszFile buffer address is NULL, the return value is the required size, in characters, of the buffer, not including the terminating null character. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "DragQueryFile",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Identifier of the structure that contains the file names of the dropped files."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "iFile",
        "description": "Type: UINT Index of the file to query. If the value of this parameter is 0xFFFFFFFF, DragQueryFile returns a count of the files dropped. If the value of this parameter is between zero and the total number of files dropped, DragQueryFile copies the file name with the corresponding value to the buffer pointed to by the lpszFile parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszFile",
        "description": "Type: LPTSTR The address of a buffer that receives the file name of a dropped file when the function returns. This file name is a null-terminated string. If this parameter is NULL, DragQueryFile returns the required size, in characters, of this buffer."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cch",
        "description": "Type: UINT The size, in characters, of the lpszFile buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL TRUE if the drop occurred in the client area of the window; otherwise FALSE. ",
    "remarks": "The window for which coordinates are returned is the window that received the WM_DROPFILES message. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DragQueryPoint",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDROP",
        "name": "hDrop",
        "description": "Type: HDROP Handle of the drop structure that describes the dropped file."
      },
      {
        "in_out": "_Out_",
        "type": "POINT*",
        "name": "lppt",
        "description": "Type: POINT* Pointer to a POINT structure that, when this function returns successfully, receives the coordinates of the mouse pointer at the time the file was dropped."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Expands the source string by using the environment block established for the specified user.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example source string: When ExpandEnvironmentStringsForUser returns, the destination string expands as follows: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ExpandEnvironmentStringsForUser",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_QUERY access. In addition, as of Windows 7 the token must also have TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects.  If hToken is NULL, the environment block contains system variables only."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSrc",
        "description": "Type: LPCTSTR Pointer to the null-terminated source string to be expanded."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpDest",
        "description": "Type: LPTSTR Pointer to a buffer that receives the expanded strings."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Type: DWORD Specifies the size of the lpDest buffer, in TCHARs."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Initializes or reinitializes the system image list.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL TRUE if the cache was successfully refreshed, FALSE if the initialization failed. ",
    "remarks": "If you are using system image lists in your own process, you must call FileIconInit at the following times: FileIconInit is not included in a header file. You must call it directly from Shell32.dll, using ordinal 660. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "FileIconInit",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fRestoreCache",
        "description": "Type: BOOL TRUE to restore the system image cache from disk; FALSE otherwise."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HINSTANCE Returns a value greater than 32 if successful, or a value less than or equal to 32 representing an error. The following table lists possible error values.  ",
    "remarks": "Use FindExecutable for documents. If you want to retrieve the path of an executable file, use the following: Here, pszExecutableName is a pointer to a null-terminated string that specifies the name of the executable file, pszPath is a pointer to the null-terminated string buffer that receives the path to the executable file, and pcchOut is a pointer to a DWORD that specifies the number of characters in the pszPath buffer. When the function returns, pcchOut is set to the number of characters actually placed in the buffer. See AssocQueryString for more information. When FindExecutable returns, the lpResult parameter may contain the path to the Dynamic Data Exchange (DDE) server started if a server does not respond to a request to initiate a DDE conversation with the DDE client application. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "FindExecutable",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFile",
        "description": "Type: LPCTSTR The address of a null-terminated string that specifies a file name. This file should be a document."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpDirectory",
        "description": "Type: LPCTSTR The address of a null-terminated string that specifies the default directory. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpResult",
        "description": "Type: LPTSTR The address of a buffer that receives the file name of the associated executable file. This file name is a null-terminated string that specifies the executable file started when an \"open\" by association is run on the file specified in the lpFile parameter. Put simply, this is the application that is launched when the document file is directly double-clicked or when Open is chosen from the file's shortcut menu. This parameter must contain a valid non-null value and is assumed to be of length MAX_PATH. Responsibility for validating the value is left to the programmer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the resources that have been allocated for a CONFIRM_CONFLICT_ITEM structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Syncmgr.idl",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeConfirmConflictItem",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "CONFIRM_CONFLICT_ITEM*",
        "name": "pcci",
        "description": "Type: CONFIRM_CONFLICT_ITEM* A pointer to a CONFIRM_CONFLICT_ITEM structure that stores pointers to the items for which memory is to be freed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the memory used by an pointer to an item identifier list (PIDL) list array.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArray",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_RELATIVE*",
        "name": "ppidls",
        "description": "Type: PIDLIST_RELATIVE* A pointer to the list of cItems PIDLs, stored as an array."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Releases the memory space for the array of pointers to child item IDs. This releases both the PITEMID_CHILDs within the array and the array itself.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArrayChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PITEMID_CHILD*",
        "name": "ppidls",
        "description": "Type: PITEMID_CHILD* A pointer to the PIDL list, stored as an array of cItems elements."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Releases the memory space for the pointer to an item identifier list (PIDL) array. This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeIDListArrayFull",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidls",
        "description": "Type: PIDLIST_ABSOLUTE* A pointer to the PIDL list, stored as an array of cItems elements."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cItems",
        "description": "Type: UINT The number of items in the array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This is an inline helper function that calls CoTaskMemFree on the fields in the structure that need to be freed. Its implementation can be seen in the header file. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "FreeKnownFolderDefinitionFields",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "KNOWNFOLDER_DEFINITION*",
        "name": "pKFD",
        "description": "Type: KNOWNFOLDER_DEFINITION* A pointer to a KNOWNFOLDER_DEFINITION structure that contains information about the given known folder."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the handle associated with the most recently used (MRU) list and writes cached data to the registry.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns a non-negative value if successful, -1 otherwise. ",
    "remarks": "If the MRU list was created using the MRU_CACHEWRITE flag, calling FreeMRUList causes any changes not yet written to the version of the MRU list stored in registry to be written at this time. This function is not included in a public header or library. It must be extracted from comctl32.dll by ordinal 152. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "FreeMRUList",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hMRU",
        "description": "Type: HANDLE The handle of the MRU list to free."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root of the directory that contains program data shared by all users.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetAllUsersProfileDirectory in Windows XP: The following is an example of the path returned by GetAllUsersProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetAllUsersProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path. Set this value to NULL to determine the required size of the buffer, including the terminating null character."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD A pointer to the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the path of the local app data folder for the specified app container.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "This function returns an HRESULT code, including but not limited to the following:  ",
    "remarks": "The path retrieved through this function is the same path that you would get by calling the SHGetKnownFolderPath function with FOLDERID_LocalAppData. If a thread token is set, this function uses the app container for the current user. If no thread token is set, this function uses the app container associated with the process identity. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "GetAppContainerFolderPath",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAppContainerSid",
        "description": "A pointer to the SID of the app container."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszPath",
        "description": "The address of a pointer to a string that, when this function returns successfully, receives the path of the local folder. It is the responsibility of the caller to free this string when it is no longer needed by calling the CoTaskMemFree function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the location of the registry storage associated with an app container.",
    "library": "Userenv.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: HRESULT This function returns an HRESULT code, including but not limited to the following:  ",
    "remarks": "The function gets the registry storage for the current user. To get the registry storage for another user, you must impersonate that user. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "GetAppContainerRegistryLocation",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REGSAM",
        "name": "desiredAccess",
        "description": "Type: REGSAM The desired registry access."
      },
      {
        "in_out": "_Out_",
        "type": "PHKEY",
        "name": "phAppContainerKey",
        "description": "Type: PHKEY A pointer to an HKEY that, when this function returns successfully, receives the registry storage location for the current profile."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a window that has been set as a delegate for an app's primary foreground window for the purpose of associating the delegate window with the app's contracts.  Use this function if you are a developer writing a Windows Store app in native C++.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HWND The handle of the delegate window. ",
    "remarks": "This is an inline function, with the source code included in the header file. It is not included in a .lib or .dll file. ",
    "return_type": "HWND",
    "category": "Windows Shell",
    "name": "GetContractDelegateWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndSource",
        "description": "Type: HWND The handle of the window whose delegate should be retrieved."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the application-defined, explicit Application User Model ID (AppUserModelID) for the current process.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The AppUserModelID retrieved by this function was set earlier through SetCurrentProcessExplicitAppUserModelID. An application can only retrieve an AppUserModelID that has been explicitly set. System-assigned default AppUserModelIDs cannot be retrieved. If the application requires knowledge of its AppUserModelID it should set one explicitly. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "GetCurrentProcessExplicitAppUserModelID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "AppID",
        "description": "Type: PWSTR* A pointer that receives the address of the AppUserModelID assigned to the process. The caller is responsible for freeing this string with CoTaskMemFree when it is no longer needed."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root of the default user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetDefaultUserProfileDirectory in Windows XP: The following is an example of the path returned by GetDefaultUserProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetDefaultUserProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the default user's profile directory. Set this value to NULL to determine the required size of the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the dots per inch (dpi) occupied by a SHELL_UI_COMPONENT based on the current scale factor and PROCESS_DPI_AWARENESS.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "The DPI required for an icon of this type. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "GetDpiForShellUiComponent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHELL_UI_COMPONENT",
        "name": "component",
        "description": "The type of shell component."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the Help context identifier associated with the specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: DWORD Returns the Help context identifier if the menu has one, or zero otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "GetMenuContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu for which the Help context identifier is to be retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the path to the root directory where user profiles are stored.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetProfilesDirectory in Windows XP: The following is an example of the path returned by GetProfilesDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetProfilesDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpProfilesDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the profiles directory. Set this value to NULL to determine the required size of the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfilesDir buffer, in TCHARs.                               If the buffer specified by lpProfilesDir is not large enough or lpProfilesDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the type of profile loaded for the current user.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "If the user profile is not already loaded, the function fails. Note that the caller must have KEY_READ access to HKEY_LOCAL_MACHINE. This access right is granted by default. For more information, see Registry Key Security and Access Rights. If the profile type is PT_ROAMING_PREEXISTING, Explorer will not reinitialize default programs associations when a profile is loaded on a machine for the first time. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetProfileType",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "Type: DWORD* Pointer to a variable that receives the profile type. If the function succeeds, it sets one or more of the following values:  PT_MANDATORY   The user has a Mandatory User Profiles.  PT_ROAMING   The user has a Roaming User Profiles.  PT_ROAMING_PREEXISTING    \t\t\t\t\t\tThe user has a Roaming User Profile that was created on another PC and is being downloaded. \t\t\t\t\t\tThis profile type implies PT_ROAMING. \t\t\t\t\t  PT_TEMPORARY   The user has a Temporary User Profiles; it will be deleted at logoff."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Gets the preferred scale factor for a display device.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: DEVICE_SCALE_FACTOR A value that indicates the scale factor that should be used with the specified DISPLAY_DEVICE_TYPE.  ",
    "remarks": "The default DEVICE_SCALE_FACTOR is SCALE_100_PERCENT. Use the scale factor that is returned to scale point values for fonts and pixel values. ",
    "return_type": "STDAPI_(DEVICE_SCALE_FACTOR)",
    "category": "Windows Shell",
    "name": "GetScaleFactorForDevice",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "deviceType",
        "description": "Type: DISPLAY_DEVICE_TYPE The value that indicates the type of the display device."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the scale factor of a specific monitor. This function replaces GetScaleFactorForDevice.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Your code needs to handle the WM_WINDOWPOSCHANGED message in addition to the scale change event registered through RegisterScaleChangeEvent, because the app window can be moved between monitors. In response to the WM_WINDOWPOSCHANGED message, call MonitorFromWindow, followed by GetScaleFactorForMonitor to get the scale factor of the monitor which the app window is on. Your code can then react to any dots per inch (dpi) change by reloading assets and changing layout. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "GetScaleFactorForMonitor",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMONITOR",
        "name": "hMon",
        "description": "The monitor's handle."
      },
      {
        "in_out": "_Out_",
        "type": "DEVICE_SCALE_FACTOR*",
        "name": "pScale",
        "description": "When this function returns successfully, this value points to one of the DEVICE_SCALE_FACTOR values that specify the scale factor of the specified monitor.                          If the function call fails, this value points to a valid scale factor so that apps can opt to continue on with incorrectly sized resources."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the path to the root directory of the specified user's profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "The following is an example of the path returned by GetUserProfileDirectory in Windows XP: The following is an example of the path returned by GetUserProfileDirectory in Windows 7: To obtain the paths of subdirectories of this directory, use the SHGetFolderPath (Windows XP and earlier) or SHGetKnownFolderPath (Windows Vista) function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetUserProfileDirectory",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE A token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or  OpenThreadToken function. The token must have TOKEN_QUERY access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR A pointer to a buffer that, when this function returns successfully, receives the path to the specified user's profile directory."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcchSize",
        "description": "Type: LPDWORD Specifies the size of the lpProfileDir buffer, in TCHARs.                               If the buffer specified by lpProfileDir is not large enough or lpProfileDir is NULL, the function fails and this parameter receives the necessary buffer size, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the Help context identifier, if any, associated with the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: DWORD Returns the Help context identifier if the window has one, or zero otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "GetWindowContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window for which the Help context identifier is to be retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the reference data for the specified window subclass callback.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL  ",
    "remarks": "To use GetWindowSubclass, specify Comctl32.dll version 6 in the manifest. For more information on manifests, see Enabling Visual Styles. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR UINT_PTR subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD_PTR*",
        "name": "pdwRefData",
        "description": "Type: DWORD_PTR* A pointer to a DWORD which will return the reference data. Note: On 64-bit versions of Windows, pointers are 64-bit values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Verifies that the container structure of an IDList is valid.",
    "library": "",
    "min_server": "",
    "header": "Shlobj.h",
    "return_value": "TRUE if the IDList structure is valid; otherwise, FALSE. ",
    "remarks": "This function should be used by any code that reads an IDList from a persisted format to ensure that invalid forms do not lead to a security exploit in the code that interprets the IDList. Shell data sources are responsible for validating private sections of the ITEMIDs. Hidden data is validated by the functions that interpret that data. ",
    "return_type": "BOOL __inline",
    "category": "Windows Shell",
    "name": "IDListContainerIsConsistent",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "A pointer to the IDList to validate."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbAlloc",
        "description": "The size, in bytes, of the PIDL specified in the pidl parameter."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_RELATIVE Returns the ITEMIDLIST structure specified by pidl, with pmkid appended or prepended. Returns NULL on failure. ",
    "remarks": "",
    "return_type": "PIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILAppendID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE A pointer to an ITEMIDLIST structure. When the function returns, the SHITEMID structure specified by pmkid is appended or prepended."
      },
      {
        "in_out": "_In_",
        "type": "LPSHITEMID",
        "name": "pmkid",
        "description": "Type: LPSHITEMID A pointer to a SHITEMID structure to be appended or prepended to pidl."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fAppend",
        "description": "Type: BOOL Value that is set to TRUE to append pmkid to pidl. Set this value to FALSE to prepend pmkid to pidl."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_RELATIVE Returns a pointer to a copy of the ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILClone",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones a child ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUITEMID_CHILD A pointer to a copy of the child ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PCUITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILCloneChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to the child ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones the first SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PITEMID_CHILD A pointer to an ITEMIDLIST structure that contains the first SHITEMID structure from the ITEMIDLIST structure specified by pidl. Returns NULL on failure. ",
    "remarks": "",
    "return_type": "PITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILCloneFirst",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure that you want to clone."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clones a full, or absolute, ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE A pointer to a copy of the ITEMIDLIST structure pointed to by pidl. ",
    "remarks": "When you are finished with the cloned ITEMIDLIST structure, release it with ILFree to avoid memory leaks. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCloneFull",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_ABSOLUTE A pointer to the full, or absolute, ITEMIDLIST structure to be cloned."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Combines two ITEMIDLIST structures.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns an ITEMIDLIST containing the combined structures. If you set either pidl1 or pidl2 to NULL, the returned ITEMIDLIST structure is a clone of the non-NULL parameter. Returns NULL if pidl1 and pidl2 are both set to NULL. ",
    "remarks": "",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCombine",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the first ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl2",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the second ITEMIDLIST structure. This structure is appended to the structure pointed to by pidl1."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the ITEMIDLIST structure associated with a specified file path.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a pointer to an ITEMIDLIST structure that corresponds to the path. ",
    "remarks": "Call ILFree to release the ITEMIDLIST when you are finished with it. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "ILCreateFromPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszPath",
        "description": "Type: PCTSTR A pointer to a null-terminated Unicode string that contains the path. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines whether a specified ITEMIDLIST structure is the child of another ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE Returns a pointer to the child's simple ITEMIDLIST structure if pidlChild is a child of pidlParent. The returned structure consists of pidlChild, minus the SHITEMID structures that make up pidlParent. Returns NULL if pidlChild is not a child of pidlParent. ",
    "remarks": "",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILFindChild",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the parent ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlChild",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to the child ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUITEMID_CHILD A pointer to the last SHITEMID structure in pidl. ",
    "remarks": "This function does not clone the last item, so you do not have to call ILFree to release the returned pointer. ",
    "return_type": "PUITEMID_CHILD",
    "category": "Windows Shell",
    "name": "ILFindLastID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees an ITEMIDLIST structure allocated by the Shell.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "ILFree is often used with ITEMIDLIST structures allocated by one of the other IL functions, but it can be used to free any such structure returned by the Shell\u00e2\u0080\u0094for example, the ITEMIDLIST structure returned by SHBrowseForFolder or used in a call to SHGetFolderLocation. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "ILFree",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be freed. This parameter can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE Returns a pointer to the SHITEMID structure that follows the one specified by pidl. Returns NULL if pidl points to the last SHITEMID structure. ",
    "remarks": "",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILGetNext",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to a particular SHITEMID structure in a larger ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the size, in bytes, of an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: UINT The size of the ITEMIDLIST structure specified by pidl, in bytes. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "ILGetSize",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to an ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether a constant ITEMIDLIST is aligned on a pointer boundary, which is a DWORD on 32-bit architectures and a QWORD on 64-bit architectures.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if aligned; otherwise, FALSE. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsAligned",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant PIDL relative to a parent folder that is being checked for alignment."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether a pointer to an item identifier list (PIDL) is a child PIDL, which is a PIDL with exactly one SHITEMID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the given PIDL is a child PIDL; otherwise, FALSE. ",
    "remarks": "This function does not guarantee that the PIDL is non-NULL or non-empty. For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsChild",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL that is being checked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies whether an ITEMIDLIST structure is empty.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the pidl parameter is NULL or the ITEMIDLIST structure pointed to by pidl is empty; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsEmpty",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUID_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUID_RELATIVE A pointer to the ITEMIDLIST structure to be checked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Tests whether two ITEMIDLIST structures are equal in a binary comparison.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the two structures are equal, FALSE otherwise. ",
    "remarks": "ILIsEqual performs a binary comparison of the item data. It is possible for two ITEMIDLIST structures to differ at the binary level while referring to the same item. IShellFolder::CompareIDs should be used to perform a non-binary comparison. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsEqual",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE The first ITEMIDLIST structure."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl2",
        "description": "Type: PCIDLIST_ABSOLUTE The second ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if pidl1 is a parent of pidl2. If fImmediate is set to TRUE, the function only returns TRUE if pidl1 is the immediate parent of pidl2. Otherwise, the function returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILIsParent",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl1",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) structure that specifies the parent. This must be an absolute PIDL."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl2",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) structure that specifies the child. This must be an absolute PIDL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fImmediate",
        "description": "Type: BOOL A Boolean value that is set to TRUE to test for immediate parents of pidl2, or FALSE to test for any parents of pidl2."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUIDLIST_RELATIVE When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it contains a pointer to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals the end of the PIDL. For other values of pidl, the return value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. To verify if the return value is NULL, use ILIsEmpty. ",
    "return_type": "PCUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILNext(PCUIDLIST_RELATIVE)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL for which the next SHITEMID structure is being retrieved."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the next SHITEMID structure in an ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE When this function returns, contains one of three results: If pidl is valid and not the last SHITEMID in the ITEMIDLIST, then it contains a pointer to the next ITEMIDLIST structure. If the last ITEMIDLIST structure is passed, it contains NULL, which signals the end of the PIDL. For other values of pidl, the return value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. To verify if the return value is NULL, use ILIsEmpty. ",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILNext(PUIDLIST_RELATIVE)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL for which the next SHITEMID structure is being retrieved."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the last SHITEMID structure from an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ILRemoveLastID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_opt_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be shortened. When the function returns, this variable points to the shortened structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Saves an ITEMIDLIST structure to a stream.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a COM error value otherwise. ",
    "remarks": "The stream must be opened for writing, or ILSaveToStream returns an error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILSaveToStream",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream *",
        "name": "pstm",
        "description": "Type: IStream * A pointer to the IStream interface where the ITEMIDLIST is saved."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to the ITEMIDLIST structure to be saved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Skips a given number of bytes in a constant, unaligned, relative ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PCUIDLIST_RELATIVE When this function returns, if pidl and cb are valid, contains a constant pointer to the ITEMIDLIST structure that results after the skip. Otherwise, the value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "PCUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILSkip(PCUIDLIST_RELATIVE, UINT)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A constant, unaligned, relative PIDL in which bytes are to be skipped."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The number of bytes to skip."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Skips a given number of bytes in an unaligned, relative ITEMIDLIST structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PUIDLIST_RELATIVE When this function returns, if pidl and cb are valid, contains a pointer to the ITEMIDLIST structure that results after the skip. Otherwise, the value is meaningless. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "PUIDLIST_RELATIVE",
    "category": "Windows Shell",
    "name": "ILSkip(PUIDLIST_RELATIVE, UINT)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PUIDLIST_RELATIVE An unaligned, relative PIDL in which bytes are to be skipped."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The number of bytes to skip."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the system is connected to the Internet.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: BOOL Returns TRUE if the local system is not currently connected to the Internet. Returns FALSE if the local system is connected to the Internet or if no attempt has yet been made to connect to the Internet. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "InetIsOffline",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The input flags for the function. This must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Initializes the network address control window class.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL TRUE if the initialization succeeded; or FALSE otherwise. ",
    "remarks": "The network address control looks like an edit control and offers the additional functionality of network address verification. The control uses a balloon tip to display error messages. This function initializes class WC_NETADDRESS. If this function returns TRUE, the control can be created. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "InitNetworkAddressControl",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Loads the specified user's profile. The profile can be a  local user profile or a  roaming user profile.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. The function fails and returns ERROR_INVALID_PARAMETER if the dwSize member of the structure at lpProfileInfo is not set to sizeof(PROFILEINFO) or if the lpUserName member is NULL. ",
    "remarks": "When a user logs on interactively, the system automatically loads the user's profile. If a service or an application impersonates a user, the system does not load the user's profile. Therefore, the service or application should load the user's profile with LoadUserProfile. Services and applications that call LoadUserProfile should check to see if the user has a roaming profile. If the user has a roaming profile, specify its path as the lpProfilePath member of  PROFILEINFO. To retrieve the user's roaming profile path, you can call the  NetUserGetInfo function, specifying information level 3 or 4. Upon successful return, the hProfile member of PROFILEINFO is a registry key handle opened to the root of the user's hive. It has been opened with full access (KEY_ALL_ACCESS). If a service that is impersonating a user needs to read or write to the user's registry file, use this handle instead of HKEY_CURRENT_USER. Do not close the hProfile handle. Instead, pass it to the  UnloadUserProfile function. This function closes the handle. You should ensure that all handles to keys in the user's registry hive are closed. If you do not close all open registry handles, the user's profile fails to unload. For more information, see  Registry Key Security and Access Rights and Registry Hives. Note that it is your responsibility to load the user's registry hive into the HKEY_USERS registry key with the LoadUserProfile function before you call CreateProcessAsUser. This is because CreateProcessAsUser does not load the specified user's profile into HKEY_USERS. This means that access to information in the HKEY_CURRENT_USER registry key may not produce results consistent with a normal interactive logon. The calling process must have the SE_RESTORE_NAME and SE_BACKUP_NAME privileges. For more information, see Running with Special Privileges. Starting with Windows XP Service Pack 2 (SP2) and Windows Server 2003, the caller must be an administrator or the LocalSystem account. It is not sufficient for the caller to merely impersonate the administrator or LocalSystem account. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "LoadUserProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, which is returned by the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_QUERY, TOKEN_IMPERSONATE, and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_Inout_",
        "type": "LPPROFILEINFO",
        "name": "lpProfileInfo",
        "description": "Type: LPPROFILEINFO Pointer to a PROFILEINFO structure. LoadUserProfile fails and returns ERROR_INVALID_PARAMETER if the dwSize member of the structure is not set to sizeof(PROFILEINFO) or if the lpUserName member is NULL. For more information, see Remarks."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Runs the unregistered MIME content type dialog box.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT In supported systems, returns S_OK if the content type was successfully associated with the extension. In this case, the extension is associated as the default for the content type, and pszAppBuf points to the string that contains the path of the specified application. The function returns S_FALSE if nothing was registered. Otherwise, the return value will be one of the following:  ",
    "remarks": "This function does not validate the syntax of the input content type string at pcszMIMEContentType. A successful return value does not indicate that the specified MIME content type is valid. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "MIMEAssociationDialog",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window of any posted child windows."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD A bit flag value that specifies if an association is to be registered. The bit flag is the value MIMEASSOCDLG_FL_REGISTER_ASSOC (0x0001). If this bit is set, the selected application is registered as the handler for the given MIME type. If this bit is clear, no association is registered. An application is registered only if this flag is set and the user indicates that a persistent association is to be made. Registration is impossible if the string at pcszFile does not contain an extension."
      },
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszFile",
        "description": "Type: PCTSTR The address of a null-terminated string that contains the name of the target file. This file must conform to the content type described by the pcszMIMEContentType parameter."
      },
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszMIMEContentType",
        "description": "Type: PCTSTR The address of a null-terminated string that contains the unregistered content type."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszAppBuf",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the path of the application specified by the user."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "ucAppBufLen",
        "description": "Type: UINT Size of pszAppBuf, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a unique path name from a template.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "This function generates a new unique file name based on the templates specified by pszTemplate, for drives that require the 8.3 format, and pszLongPlate for drives that support long file names. For example, if you specify \"My New Filename\" for pszLongPlate, PathMakeUniqueName returns names such as \"My New Filename (1)\", \"My New Filename (2)\", and so on. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszUniqueName",
        "description": "Type: PWSTR A buffer that receives a null-terminated Unicode string that contains the unique path name. It should be at least MAX_PATH characters in length."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The number of characters in the buffer pointed to by pszUniqueName."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszTemplate",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that require file names with the 8.3 format. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszLongPlate",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains a template that is used to construct the unique name. This template is used for drives that support long file names. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszDir",
        "description": "Type: PCWSTR A null-terminated string that contains the directory in which the new file resides. This string should be no more than MAX_PATH characters in length, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a unique filename based on an existing filename.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if a unique name was successfully created; otherwise FALSE. ",
    "remarks": "If the generated path exceeds MAX_PATH characters, this function may return a truncated string in PathYetAnotherMakeUniqueName. In that case, the function returns FALSE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathYetAnotherMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszUniqueName",
        "description": "Type: PWSTR A string buffer that receives a null-terminated Unicode string that contains the fully qualified path of the unique file name. This buffer should be at least MAX_PATH characters long to avoid causing a buffer overrun."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the fully qualified path of folder that will contain the new file. If pszShort is set to NULL, this string must contain a full destination path, ending with the long file name that the new file name will be base on."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszShort",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the short file name that the unique name will be based on. Set this value to NULL to create a name based on the long file name."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszFileSpec",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the long file name that the unique name will be based on."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state. The app can use this information to perform any necessary operations, such as preserving state, that should be performed at that point.",
    "library": "Appnotify.lib",
    "min_server": "",
    "header": "Appnotify.h",
    "return_value": "A standard Win32 status code. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Windows Shell",
    "name": "RegisterAppStateChangeNotification",
    "is_callback": 0,
    "dll": "Twinapi.core.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PAPPSTATE_CHANGE_ROUTINE",
        "name": "Routine",
        "description": "A pointer to a callback function that is called when the app enters or leaves the suspended state. See PAPPSTATE_CHANGE_ROUTINE for more detail on this function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Context",
        "description": "App-specific context information that the app uses when going into or out of a suspended state. This is commonly a \"this\" pointer."
      },
      {
        "in_out": "_Out_",
        "type": "PAPPSTATE_REGISTRATION*",
        "name": "Registration",
        "description": "When this function returns successfully, this parameter receives the address of a pointer to a value that can be used to identify the registration. Store this value to use with UnregisterAppStateChangeNotification."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Registers any nonstandard window classes required by a screen saver's configuration dialog box.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "The RegisterDialogClasses function should not be exported. It is called by routines defined in the Scrnsave.lib file. If a screen saver does not register any special window classes for the configuration dialog box, the RegisterDialogClasses function must return TRUE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "RegisterDialogClasses",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HANDLE",
        "name": "hInst",
        "description": "Type: HANDLE An identifier of an instance of the module registering the window classes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Registers for an event that is triggered when the scale has possibly changed. This function replaces RegisterScaleChangeNotifications.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The event is raised whenever something that can affect scale changes, but just because the scale can be affected doesn't mean that it has been. Callers can cache the scale factor to verify that the monitor's scale actually has changed. The event handle will be duplicated, so callers can close their handle at any time. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RegisterScaleChangeEvent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEvent",
        "description": "Handle of the event to register for scale change notifications."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD_PTR*",
        "name": "pdwCookie",
        "description": "When this function returns successfully, this value receives the address of a pointer to a cookie that can be used later to unregister for the scale change notifications through UnregisterScaleChangeEvent."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Registers a window to receive callbacks when scaling information changes.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: STDAPI If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This message specified by uMsgNotify is posted to the registered window through PostMessage. The wParam of the message can contain a combination of SCALE_CHANGE_FLAGS that describe  the change that occurred. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RegisterScaleChangeNotifications",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "displayDevice",
        "description": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndNotify",
        "description": "Type: HWND The handle of the window that will receive the notifications."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uMsgNotify",
        "description": "Type: UINT An application-defined message that is passed to the window specified by hwndNotify when scaling information changes.  Typically, this should be set to WM_APP+x, where x is an integer value."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwCookie",
        "description": "Type: DWORD* Pointer to a value that, when this function returns successfully, receives a registration token. This token is used to revoke notifications by calling RevokeScaleChangeNotifications."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Removes a subclass callback from a window.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL TRUE if the subclass callback was successfully removed; otherwise, FALSE. ",
    "remarks": "Subclass callbacks are identified by their combination of the callback address and the subclass ID defined by the calling process. The SUBCLASS module defines helper functions that are used to subclass windows. The code maintains a single property on the subclassed window and dispatches various subclass callbacks to its clients as required. The client is provided reference data and a default processing API. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "RemoveWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see SUBCLASSPROC."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR The UINT_PTR subclass ID. This ID and the callback pointer uniquely identify this subclass callback. Note: On 64-bit versions of Windows this is a 64-bit value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "Type: STDAPI If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "RevokeScaleChangeNotifications",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DISPLAY_DEVICE_TYPE",
        "name": "displayDevice",
        "description": "Type: DISPLAY_DEVICE_TYPE The enum value that indicates which display device to receive notifications about."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCookie",
        "description": "Type: DWORD The registration token returned by a previous call to RegisterScaleChangeNotifications."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters for the scale change event registered through RegisterScaleChangeEvent. This function replaces RevokeScaleChangeNotifications.",
    "library": "Shcore.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "ShellScalingAPI.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "UnregisterScaleChangeEvent",
    "is_callback": 0,
    "dll": "Shcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwCookie",
        "description": "A pointer to the cookie retrieved in the call to RegisterScaleChangeEvent."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Receives messages sent to a screen saver's configuration dialog box. A screen saver that allows user configuration must define this function.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: BOOL If the function successfully processes the message, it should return TRUE. If not, it should return FALSE, except in response to a WM_INITDIALOG message. In response to a WM_INITDIALOG message, ScreenSaverConfigureDialog should return FALSE if it calls the SetFocus function to set the keyboard focus to one of the controls in the dialog box. Otherwise, the function should return TRUE, in which case the system sets the keyboard focus to the first control in the dialog box that can be given the focus. ",
    "remarks": "The dialog box template for the configuration dialog box must have the DLG_SCRNSAVECONFIGURE identifier. The dialog box procedure is used only if the application specifies the default window class (WC_DIALOG) for the dialog box. The application uses the default class if no explicit class is given in the dialog box template. Although the dialog box procedure is similar to a window procedure, it must not call the DefWindowProc function to process unwanted messages. Unwanted messages are processed internally by the default dialog box procedure. The ScreenSaverConfigureDialog function must be exported by including it in the EXPORTS statement in the application's module-definition (.def) file. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ScreenSaverConfigureDialog",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hDlg",
        "description": "Type: HWND The identifier of the configuration dialog box."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT A message that was sent to the screen saver's configuration dialog box."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Receives messages sent to the specified screen saver window.",
    "library": "Scrnsave.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Scrnsave.h",
    "return_value": "Type: LONG The return value is the result of the message processing and depends on the message sent. ",
    "remarks": "A screen saver's ScreenSaverProc window procedure should use the DefScreenSaverProc function instead of the DefWindowProc function to provide default message processing. The DefScreenSaverProc function passes any messages that do not affect screen saver operations to DefWindowProc. The ScreenSaverProc function must be exported by including it in the EXPORTS statement in the application's module-definition (.def) file. ",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "ScreenSaverProc",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND An identifier of the window."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT A message sent to the screen saver window."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates an app window other than the primary foreground window with an app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This is an inline function, with the source code included in the header file. It is not included in a .lib or .dll file. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SetContractDelegateWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndSource",
        "description": "Type: HWND The handle of the app window normally associated with its contracts."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndDelegate",
        "description": "Type: HWND The handle of another of the app's windows that will act as the contract delegate for hwndSource. Set this value to NULL to remove the delegate connection."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies a unique application-defined Application User Model ID (AppUserModelID) that identifies the current process to the taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This method must be called during an application's initial startup routine before the application presents any UI or makes any manipulation of its Jump Lists. This includes any call to SHAddToRecentDocs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SetCurrentProcessExplicitAppUserModelID",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "AppID",
        "description": "Type: PCWSTR Pointer to the AppUserModelID to assign to the current process."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates a Help context identifier with a menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "All items in the menu share this identifier. Help context identifiers can't be attached to individual menu items. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetMenuContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu with which to associate the Help context identifier."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwContextHelpId",
        "description": "Type: DWORD The help context identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Associates a Help context identifier with the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "If a child window does not have a Help context identifier, it inherits the identifier of its parent window. Likewise, if an owned window does not have a Help context identifier, it inherits the identifier of its owner window. This inheritance of Help context identifiers allows an application to set just one identifier for a dialog box and all of its controls. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetWindowContextHelpId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window with which to associate the Help context identifier."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwContextHelpId",
        "description": "Type: DWORD The Help context identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Installs or updates a window subclass callback.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL TRUE if the subclass callback was successfully installed; otherwise, FALSE. ",
    "remarks": "Subclass callbacks are identified by the combination of the callback address and the caller-defined subclass ID. If the callback address and ID pair have not yet been installed, then this function installs the subclass. If the pair has already been installed, then this function just updates the reference data. Each callback can store a single DWORD of reference data, which is passed to the callback function when it is called to filter messages. No reference counting is performed for the callback; it may repeatedly call SetWindowSubclass to alter the value of its reference data element. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SetWindowSubclass",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.8 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND The handle of the window being subclassed."
      },
      {
        "in_out": "_In_",
        "type": "SUBCLASSPROC",
        "name": "pfnSubclass",
        "description": "Type: SUBCLASSPROC A pointer to a window procedure. This pointer and the subclass ID uniquely identify this subclass callback. For the callback function prototype, see SUBCLASSPROC."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIdSubclass",
        "description": "Type: UINT_PTR The subclass ID. This ID together with the subclass procedure uniquely identify a subclass. To remove a subclass, pass the subclass procedure and this value to the RemoveWindowSubclass function. This value is passed to the subclass procedure in the uIdSubclass parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwRefData",
        "description": "Type: DWORD_PTR DWORD_PTR to reference data. The meaning of this value is determined by the calling application. This value is passed to the subclass procedure in the dwRefData parameter. A different dwRefData is associated with each combination of window handle, subclass procedure and uIdSubclass."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The usage statistics gathered through calls to this method are used to determine lists of items accessed most recently and most frequently. These lists are seen in the Start menu and, in Windows 7 and later, in an application's Jump List. When this method is called, it affects the following areas: Items represented by an IShellLink are not added to the Recent folder, although they are reflected in an application's Jump List. In some cases, notably when a user opens an item through Windows Explorer or uses the common file dialog to open, save, or create a file, the Shell calls SHAddToRecentDocs on behalf of the application. An application that has a custom UI for selecting items should call SHAddToRecentDocs explicitly to ensure accurate statistics. Duplicate calls are accounted for by the system so there is no risk of skewing the data by doing so. Executable (.exe) files are filtered from the recently used documents list in Windows XP and later versions. Although SHAddToRecentDocs will accept the path of an executable file, that file will not appear in the Recent Items list. Folders are also accepted by SHAddToRecentDocs, but appear only in the Jump List for the Windows Explorer taskbar button. Folders do not appear in any other application's Jump List. In certain cases, SHAddToRecentDocs attempts to register an application to handle a file type that it is not registered to handle. This occurs under these circumstances: This registration is done per-user. A set of requirements must be met for the registration to be accomplished successfully: In versions of Windows before Windows 7, a file type could set the FTA_NoRecentDocs flag to prevent that file type from being added to the Recent folder. This mechanism is also supported under Windows 7 and later. See File Types for more information. SHAddToRecentDocs tracks document usage statistics through the verbs that are invoked to access those documents. Verbs supplied by registered IContextMenu handlers are tracked, those items appear in My Recent Documents (Windows XP) and Recent Items (Windows Vista). In Windows 7, the parent folders of the documents appear in the Jump List for the Windows Explorer taskbar button. However, the documents accessed through those IContextMenu verbs do not appear in application Jump Lists. For those items to appear in an application's Jump List, an application must call SHAddToRecentDocs explicitly. Prior to Windows 7, only the open verb resulted in a call to SHAddToRecentDocs. In Windows 7 and later, other verbs can also generate usage statistics. This information is used to make a Jump List's destinations more complete and accurate. However, some classes of file type association registrations or individual IContextMenu implementations are not appropriate for this sort of tracking. The point of usage tracking is to generate a list of items that the user is likely to want to access again. If a particular verb\u00e2\u0080\u0094delete, for instance\u00e2\u0080\u0094is inherently invoked on an item that the user will not access again, or is a secondary action such as a virus scan on a file, that verb is not appropriate for tracking. File type classes should remove themselves from this tracking through the registry entry NoRecentDocs. NoRecentDocs is of type REG_SZ and has no associated data. Its presence is all that is required to prevent the call to SHAddToRecentDocs. For example, context menu extensions and static verbs registered under HKEY_CLASSES_ROOT in classes such as \"*\", \"AllFileSystemObjects\", or \"Folder\" should not be tracked. In cases such as these, the NoRecentDocs entry is added to the root of the class key as shown here to suppress tracking of documents launched through any verb or extension registered to that class:  The NoRecentDocs entry is assigned by default to the *, AllFileSystemObjects, Folder, Directory, and DesktopBackground class subkeys. Individual IContextMenu implementations can opt out of tracking by adding a NoRecentDocs subkey to its Component Object Model (COM) object's registration, in its shellex subkey, as shown here:  This subkey is not present by default on any IContextMenu implementation. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHAddToRecentDocs",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A value from the SHARD enumeration that indicates the form of the information pointed to by the pv parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "pv",
        "description": "Type: LPCVOID A pointer to data that identifies the item that has been accessed. The item can be specified in this parameter in one of the following forms:                                 A null-terminated string that contains the path and file name of the item. A PIDL that identifies the item's file object. Windows 7 and later only. A SHARDAPPIDINFO, SHARDAPPIDINFOIDLIST, or SHARDAPPIDINFOLINK structure that identifies the item through an AppUserModelID. See Application User Model IDs (AppUserModelIDs) for more information. Windows 7 and later only. An IShellLink object that identifies the item through a shortcut.  Set this parameter to NULL to clear all usage data on all items."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sends an appbar message to the system.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: UINT_PTR This function returns a message-dependent value. For more information, see the Windows SDK documentation for the specific appbar message sent. Links to those documents are given in the See Also section. ",
    "remarks": "",
    "return_type": "UINT_PTR",
    "category": "Windows Shell",
    "name": "SHAppBarMessage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMessage",
        "description": "Type: DWORD Appbar message value to send. ..."
      },
      {
        "in_out": "_Inout_",
        "type": "PAPPBARDATA",
        "name": "pData",
        "description": "Type: PAPPBARDATA A pointer to an APPBARDATA structure. The content of the structure on entry and on exit depends on the value set in the dwMessage parameter. See the individual message pages for specifics."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns an enumeration object for a specified set of file name extension handlers.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHAssocEnumHandlers",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExtra",
        "description": "Type: PCWSTR A pointer to a null-terminated buffer that contains a single file type extension, for instance \".jpg\". Only handlers associated with the given extension are enumerated. If this value is NULL, all handlers for all extensions are enumerated."
      },
      {
        "in_out": "_In_",
        "type": "ASSOC_FILTER",
        "name": "afFilter",
        "description": "Type: ASSOC_FILTER Specifies the enumeration handler filter applied to the full list of handlers that results from the value given in pszExtra. One of the following values.  ASSOC_FILTER_NONE   Return all handlers.  ASSOC_FILTER_RECOMMENDED   Return only recommended handlers. A handler sets its recommended status in the registry when it is installed. An initial status of non-recommended can later be promoted to recommended as a result of user action."
      },
      {
        "in_out": "_Out_",
        "type": "IEnumAssocHandlers**",
        "name": "ppEnumHandler",
        "description": "Type: IEnumAssocHandlers** When this method returns, contains the address of a pointer to an IEnumAssocHandlers object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Gets an enumeration interface that provides access to handlers associated with a given protocol.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and enumHandlers parameters. This macro provides the correct IID based on the interface pointed to by the value in enumHandlers, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHAssocEnumHandlersForProtocolByApplication",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "protocol",
        "description": "Type: PCWSTR Pointer to a string that specifies the protocol."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through enumHandlers, typically IID_IEnumAssocHandlers."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "enumHandlers",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IEnumAssocHandlers."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToFolderIDListParent",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder*",
        "name": "psfRoot",
        "description": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A PIDL to bind to, relative to psfRoot. If psfRoot is NULL, this is an absolute IDList relative to the desktop folder."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCUITEMID_CHILD*",
        "name": "ppidlLast",
        "description": "Type: PCUITEMID_CHILD* A pointer to the last ID of the pidl parameter, and is a child ID relative to the parent folder returned in ppv. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToFolderIDListParentEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder*",
        "name": "psfRoot",
        "description": "Type: IShellFolder* A pointer to a Shell folder object. If psfRoot is NULL, indicates that the IDList passed is relative to the desktop."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A PIDL to bind to, relative to psfRoot. If psfRoot is NULL, this is an absolute IDList relative to the desktop folder."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx*",
        "name": "ppbc",
        "description": "Type: IBindCtx* A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it to NULL, which is equivalent to calling the SHBindToFolderIDListParent function. Because support for pbc is optional for folder object implementations, some folders may not support the use of bind contexts."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired interface ID. This is typically IID_IShellFolder or IID_IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid. This is typically IShellFolder or IShellFolder2, but can be anything supported by the target folder."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCUITEMID_CHILD*",
        "name": "ppidlLast",
        "description": "Type: PCUITEMID_CHILD* A pointer to the last ID of the pidl parameter, and is a child ID relative to the parent folder returned in ppv. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to IShellFolder. This parameter can be NULL.   If psf is NULL,  this indicates  parameter pidl is relative to the desktop. In this case, pidl must specify an absolute ITEMIDLIST."
      },
      {
        "in_out": "",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidl",
        "description": "Type: PCUIDLIST_RELATIVE A pointer to a constant ITEMIDLIST to bind to that is relative to psf. If psf is NULL, this is an absolute ITEMIDLIST relative to the desktop folder."
      },
      {
        "in_out": "_In_",
        "type": "IBindCtx*",
        "name": "pbc",
        "description": "Type: IBindCtx* A pointer to IBindCtx interface on a bind context object to be used during this operation. If this parameter is not used, set it to NULL. Because support for pbc is optional for folder object implementations, some folders may not support the use of bind contexts."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Identifier of the interface to return."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer as specified in riid to the bound object. If an error occurs, contains a NULL pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. The following code fragment uses SHBindToParent to retrieve the display name from an item's PIDL. The StrRetToBuf function is used to convert the STRRET structure returned by IShellFolder::GetDisplayNameOf into a string. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHBindToParent",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The item's PIDL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID The REFIID of one of the interfaces exposed by the item's parent object."
      },
      {
        "in_out": "_Out_",
        "type": "VOID**",
        "name": "ppv",
        "description": "Type: VOID** A pointer to the interface specified by riid. You must release the object when you are finished."
      },
      {
        "in_out": "_Out_",
        "type": "PCUITEMID_CHILD*",
        "name": "ppidlLast",
        "description": "Type: PCUITEMID_CHILD* The item's PIDL relative to the parent folder. This PIDL can be used with many of the methods supported by the parent folder's interfaces. If you set ppidlLast to NULL, the PIDL is not returned.  Note  SHBindToParent does not allocate a new PIDL; it simply receives a pointer through this parameter. Therefore, you are not responsible for freeing this resource."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Displays a dialog box that enables the user to select a Shell folder.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a PIDL that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the Cancel button in the dialog box, the return value is NULL. It is possible that the PIDL returned is that of a folder shortcut rather than a folder. For a full discussion of this case, see the Remarks section. ",
    "remarks": "For Windows Vista or later, it is recommended that you use IFileDialog with the FOS_PICKFOLDERS option rather than the SHBrowseForFolder function. This uses the Open Files dialog in pick folders mode and is the preferred implementation. You must initialize Component Object Model (COM) before you call SHBrowseForFolder. If you initialize COM using CoInitializeEx, you must set the COINIT_APARTMENTTHREADED flag in its dwCoInit parameter. You can also use CoInitialize or OleInitialize, which always use apartment threading. If you require drag-and-drop functionality, OleInitialize is recommended because it initializes the required OLE as well as COM. It is the responsibility of the calling application to call CoTaskMemFree to free the IDList returned by SHBrowseForFolder when it is no longer needed. There are two styles of dialog box available. The older style is displayed by default and is not resizable. The newer style provides a number of additional features, including drag-and-drop capability within the dialog box, reordering, deletion, shortcut menus, the ability to create new folders, and other shortcut menu commands. Initially, it is larger than the older dialog box, but the user can resize it. To specify a dialog box using the newer style, set the BIF_USENEWUI flag in the ulFlags member of the BROWSEINFO structure. If you implement a callback function, specified in the lpfn member of the BROWSEINFO structure, you receive a handle to the dialog box. One use of this window handle is to modify the layout or contents of the dialog box. Because it is not resizable, modifying the older style dialog box is relatively straightforward. Modifying the newer style dialog box is much more difficult, and not recommended. Not only does it have a different size and layout than the old style, but its dimensions and the positions of its controls change every time it is resized by the user. If the BIF_RETURNONLYFSDIRS flag is set in the ulFlags member of the BROWSEINFO structure, the OK button remains enabled for \"\\\\server\" items, as well as \"\\\\server\\share\" and directory items. However, if the user selects a \"\\\\server\" item, passing the PIDL returned by SHBrowseForFolder to SHGetPathFromIDList fails. As of Windows XP, SHBrowseForFolder supports custom filtering on the contents of the dialog box. To create a custom filter, follow these steps. If SHBrowseForFolder returns a PIDL to a shortcut, sending that PIDL to SHGetPathFromIDList returns the path of the shortcut itself rather than the path of its target. The path to the shortcut's target can be obtained by using the IShellLink interface as shown in this example. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "SHBrowseForFolder",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPBROWSEINFO",
        "name": "lpbi",
        "description": "Type: LPBROWSEINFO A pointer to a BROWSEINFO structure that contains information used to display the dialog box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Locks the shared memory associated with a Shell change notification event.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HANDLE Returns a handle (HLOCK) to the locked memory. Pass this value to SHChangeNotification_Unlock when finished. ",
    "remarks": "",
    "return_type": "HANDLE",
    "category": "Windows Shell",
    "name": "SHChangeNotification_Lock",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hChange",
        "description": "Type: HANDLE A handle to a window received as a wParam in the specified Shell change notification message."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwProcId",
        "description": "Type: DWORD The process ID (lParam in the message callback)."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PIDLIST_ABSOLUTE**",
        "name": "pppidl",
        "description": "Type: PIDLIST_ABSOLUTE** The address of a pointer to a PIDLIST_ABSOLUTE that, when this function returns successfully, receives the list of affected PIDLs."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LONG*",
        "name": "plEvent",
        "description": "Type: LONG* A pointer to a LONG value that, when this function returns successfully, receives the Shell change notification ID of the event that took place."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unlocks shared memory for a change notification.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE on success; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHChangeNotification_Unlock",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hLock",
        "description": "Type: HANDLE A handle to the memory lock. This is the handle returned by SHChangeNotification_Lock when it locked the memory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Applications that register new handlers of any type must call SHChangeNotify with the SHCNE_ASSOCCHANGED flag to instruct the Shell to invalidate the icon and thumbnail cache. This will also load new icon and thumbnail handlers that have been registered. Note, however, that icon overlay handlers are not reloaded. The strings pointed to by dwItem1 and dwItem2 can be either ANSI or Unicode. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHChangeNotify",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LONG",
        "name": "wEventId",
        "description": "Type: LONG Describes the event that has occurred. Typically, only one event is specified at a time. If more than one event is specified, the values contained in the dwItem1 and dwItem2 parameters must be the same, respectively, for all specified events. This parameter can be one or more of the following values:   SHCNE_ALLEVENTS   All events have occurred.  SHCNE_ASSOCCHANGED   A file type association has changed. SHCNF_IDLIST must be specified in the uFlags parameter. dwItem1 and dwItem2 are not used and must be NULL. This event should also be sent for registered protocols.  SHCNE_ATTRIBUTES   The attributes of an item or folder have changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item or folder that has changed. dwItem2 is not used and should be NULL.  SHCNE_CREATE   A nonfolder item has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was created. dwItem2 is not used and should be NULL.  SHCNE_DELETE   A nonfolder item has been deleted. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that was deleted. dwItem2 is not used and should be NULL.  SHCNE_DRIVEADD   A drive has been added. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was added. dwItem2 is not used and should be NULL.  SHCNE_DRIVEADDGUI   Windows XP and later: Not used.  SHCNE_DRIVEREMOVED   A drive has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that was removed. dwItem2 is not used and should be NULL.  SHCNE_EXTENDED_EVENT   Not currently used.  SHCNE_FREESPACE   The amount of free space on a drive has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive on which the free space changed. dwItem2 is not used and should be NULL.  SHCNE_MEDIAINSERTED   Storage media has been inserted into a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive that contains the new media. dwItem2 is not used and should be NULL.  SHCNE_MEDIAREMOVED   Storage media has been removed from a drive. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the root of the drive from which the media was removed. dwItem2 is not used and should be NULL.  SHCNE_MKDIR   A folder has been created. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was created. dwItem2 is not used and should be NULL.  SHCNE_NETSHARE   A folder on the local computer is being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is being shared. dwItem2 is not used and should be NULL.  SHCNE_NETUNSHARE   A folder on the local computer is no longer being shared via the network. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that is no longer being shared. dwItem2 is not used and should be NULL.  SHCNE_RENAMEFOLDER   The name of a folder has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the folder. dwItem2 contains the new PIDL or name of the folder.  SHCNE_RENAMEITEM   The name of a nonfolder item has changed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the previous PIDL or name of the item. dwItem2 contains the new PIDL or name of the item.  SHCNE_RMDIR   A folder has been removed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that was removed. dwItem2 is not used and should be NULL.  SHCNE_SERVERDISCONNECT   The computer has disconnected from a server. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the server from which the computer was disconnected. dwItem2 is not used and should be NULL.  SHCNE_UPDATEDIR   The contents of an existing folder have changed, but the folder still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the folder that has changed. dwItem2 is not used and should be NULL. If a folder has been created, deleted, or renamed, use SHCNE_MKDIR, SHCNE_RMDIR, or SHCNE_RENAMEFOLDER, respectively.  SHCNE_UPDATEIMAGE   An image in the system image list has changed. SHCNF_DWORD must be specified in uFlags. dwItem2 contains the index in the system image list that has changed. dwItem1 is not used and should be NULL.  SHCNE_UPDATEITEM   An existing item (a folder or a nonfolder) has changed, but the item still exists and has not been renamed. SHCNF_IDLIST or SHCNF_PATH must be specified in uFlags. dwItem1 contains the item that has changed. dwItem2 is not used and should be NULL. If a nonfolder item has been created, deleted, or renamed, use SHCNE_CREATE, SHCNE_DELETE, or SHCNE_RENAMEITEM, respectively, instead.  SHCNE_DISKEVENTS   Specifies a combination of all of the disk event identifiers.  SHCNE_GLOBALEVENTS   Specifies a combination of all of the global event identifiers.  SHCNE_INTERRUPT   The specified event occurred as a result of a system interrupt. As this value modifies other event values, it cannot be used alone."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Flags that, when combined bitwise with SHCNF_TYPE, indicate the meaning of the dwItem1 and dwItem2 parameters. The uFlags parameter must be one of the following values.  SHCNF_DWORD   The dwItem1 and dwItem2 parameters are DWORD values.  SHCNF_IDLIST   dwItem1 and dwItem2 are the addresses of ITEMIDLIST structures that represent the item(s) affected by the change. Each ITEMIDLIST must be relative to the desktop folder.  SHCNF_PATH   dwItem1 and dwItem2 are the addresses of null-terminated strings of maximum length MAX_PATH that contain the full path names of the items affected by the change.  SHCNF_PRINTER   dwItem1 and dwItem2 are the addresses of null-terminated strings that represent the friendly names of the printer(s) affected by the change.  SHCNF_FLUSH   The function should not return until the notification has been delivered to all affected components. As this flag modifies other data-type flags, it cannot be used by itself.  SHCNF_FLUSHNOWAIT   The function should begin delivering notifications to all affected components but should return as soon as the notification process has begun. As this flag modifies other data-type flags, it cannot by used by itself. This flag includes SHCNF_FLUSH.  SHCNF_NOTIFYRECURSIVE   Notify clients registered for all children."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "dwItem1",
        "description": "Type: LPCVOID Optional. First event-dependent value."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCVOID",
        "name": "dwItem2",
        "description": "Type: LPCVOID Optional. Second event-dependent value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters the client's window process from receiving SHChangeNotify messages.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the specified client was found and removed; otherwise FALSE. ",
    "remarks": "See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use of this function. The NTSHChangeNotifyDeregister function, which is no longer available for use as of Windows Vista, was equivalent to SHChangeNotifyDeregister. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHChangeNotifyDeregister",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "ULONG",
        "name": "ulID",
        "description": "Type: ULONG A value of type ULONG that specifies the registration ID returned by SHChangeNotifyRegister."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: ULONG Returns a positive integer registration ID. Returns 0 if out of memory or in response to invalid parameters. ",
    "remarks": "See the Change Notify Watcher Sample in the Windows Software Development Kit (SDK) for a full example that demonstrates the use of this function. When a change notification event is raised, the message indicated by wMsg is delivered to the window specified by the hwnd parameter. When a relevant file system event takes place and the hwnd parameter is not NULL, then the message indicated by wMsg is posted to the specified window. Otherwise, if the pshcne parameter is not NULL, then that notification entry is used. For performance reasons, multiple notifications can be combined into a single notification. For example, if a large number of SHCNE_UPDATEITEM notifications are generated for files in the same folder, they can be joined into a single SHCNE_UPDATEDIR notification. The NTSHChangeNotifyRegister function, which is no longer available as of Windows Vista, was equivalent to SHChangeNotifyRegister with the SHCNRF_NewDelivery flag. ",
    "return_type": "ULONG",
    "category": "Windows Shell",
    "name": "SHChangeNotifyRegister",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window that receives the change or notification messages."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "fSources",
        "description": "Type: int One or more of the following values that indicate the type of events for which to receive notifications. ..."
      },
      {
        "in_out": "",
        "type": "LONG",
        "name": "fEvents",
        "description": "Type: LONG Change notification events for which to receive notification. See the SHCNE flags listed in SHChangeNotify for possible values."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "wMsg",
        "description": "Type: UINT Message to be posted to the window procedure."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cEntries",
        "description": "Type: int Number of entries in the pshcne array."
      },
      {
        "in_out": "_In_",
        "type": "const SHChangeNotifyEntry*",
        "name": "pshcne",
        "description": "Type: const SHChangeNotifyEntry* Array of SHChangeNotifyEntry structures that contain the notifications. This array should always be set to one when calling SHChangeNotifyRegister or SHChangeNotifyDeregister will not work properly."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables asynchronous register and deregister of a thread.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHChangeNotifyRegisterThread",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "SCNRT_STATUS",
        "name": "status",
        "description": "Type: SCNRT_STATUS Indicates whether the function is being used to register or deregister the thread. One of the values of SCNRT_STATUS."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateAssociationRegistration",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the requested interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the address of a pointer to the IApplicationAssociationRegistration object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Creates a data object in a parent folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is typically called when implementing method IShellFolder::GetUIObjectOf. When an interface pointer of interface ID  IID_IDataObject is requested (using parameter riid), the implementer can return the interface pointer on the object created with SHCreateDataObject in response. This function supports the CFSTR_SHELLIDLIST (also known as HIDA) clipboard format and also has generic support for arbitrary clipboard formats through IDataObject::SetData. For more information on clipboard formats, see Shell Clipboard Formats. The new data object is intended to be used in operations such as drag-and-drop, in which the data is stored in the clipboard with a given format. We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an ITEMIDLIST (PIDL) of the parent folder that contains the data object."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of file objects or subfolders specified in the apidl parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY An array of pointers to constant ITEMIDLIST structures, each of which uniquely identifies a file object or subfolder relative to the parent folder. Each item identifier list must contain exactly one SHITEMID structure followed by a terminating zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "IDataObject*",
        "name": "pdtInner",
        "description": "Type: IDataObject* A pointer to interface IDataObject. This parameter can be NULL. Specify pdtInner only if the data object created needs to support additional FORMATETC  clipboard formats beyond the default formats it is assigned at creation.  Alternatively, provide support for populating the created data object using non-default clipboard formats by calling method IDataObject::SetData and specifying the format in the FORMATETC structure passed in parameter pFormatetc."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv. This must be IID_IDataObject."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns successfully, contains the IDataObject interface pointer requested in riid."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an object that represents the Shell's default context menu implementation.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is typically used in the implementation of IShellFolder::GetUIObjectOf. GetUIObjectOf creates a context menu that merges IContextMenu handlers specified by the DEFCONTEXTMENU structure, and can optionally provide default context menu verb implementations such as open, explore, delete, and copy. The operation of this function is controlled by the input specified in the DEFCONTEXTMENU structure.The APICDefFolderMenu_Create2 is another way to construct the default context menu implementation. It is less expressive than SHCreateDefaultContextMenu but it exists in platforms prior to Windows Vista. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultContextMenu",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DEFCONTEXTMENU*",
        "name": "pdcm",
        "description": "Type: const DEFCONTEXTMENU* A pointer to a constant DEFCONTEXTMENU structure."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the interface ID of the interface on which to base the object. This is typically the IID of IContextMenu, IContextMenu2, or IContextMenu3."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The intended usage for this function is as follows: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultExtractIcon",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** The address of IDefaultExtractIconInit interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a file operation that sets the default properties on the Shell item that have not already been set.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The list of properties to set a default value comes from the SetDefaultsFor registry entry under the ProgID for the file association of the item. The list is prefixed by prop: and contains the canonical names of the properties to set the default value, for example, prop:System.Author;System.Document.DateCreated. The possible properties for this list are System.Author, System.Document.DateCreated, and System.Photo.DateTaken. If the SetDefaultsFor entry does not exist on the ProgID, this function uses the default found on the SetDefaultsFor entry of HKEY_CLASSES_ROOT\\*. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateDefaultPropertiesOp",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psi",
        "description": "Type: IShellItem* A pointer to the source shell item. See IShellItem."
      },
      {
        "in_out": "_Out_",
        "type": "IFileOperation**",
        "name": "ppFileOp",
        "description": "Type: IFileOperation** The address of the IFileOperation interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates and initializes a Shell item object from a pointer to an item identifier list (PIDL). The resulting shell item object supports the IShellItem interface.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The source PIDL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the requested interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will typically be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates and initializes a Shell item object from a parsing name.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromParsingName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a display name."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx*",
        "name": "pbc",
        "description": "Type: IBindCtx* Optional. A pointer to a bind context used to pass parameters as inputs and outputs to the parsing function. These passed parameters are often specific to the data source and are documented by the data source owners. For example, the file system data source accepts the name being parsed (as a WIN32_FIND_DATA structure), using the STR_FILE_SYS_BIND_DATA bind context parameter.  STR_PARSE_PREFER_FOLDER_BROWSING can be passed to indicate that URLs are parsed using the file system data source when possible. Construct a bind context object using CreateBindCtx and populate the values using IBindCtx::RegisterObjectParam. See Bind Context String Keys for a complete list of these. See the Parsing With Parameters Sample for an example of the use of this parameter.  If no data is being passed to or received from the parsing function, this value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns successfully, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates and initializes a Shell item object from a relative parsing name.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemFromRelativeName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psiParent",
        "description": "Type: IShellItem* A pointer to the parent Shell item."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszName",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies a display name that is relative to the psiParent."
      },
      {
        "in_out": "_In_",
        "type": "IBindCtx*",
        "name": "pbc",
        "description": "Type: IBindCtx* A pointer to a bind context that controls the parsing operation. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to an interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will usually be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a Shell item object for a single file that exists inside a known folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemInKnownFolder",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "kfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwKFFlags",
        "description": "Type: DWORD Flags that specify special options in the object retrieval. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszItem",
        "description": "Type: PCWSTR A pointer to a null-terminated buffer that contains the file name of the new item as a Unicode string. This parameter can also be NULL. In this case, an IShellItem that represents the known folder itself is created."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface that represents the item, retrieved through ppv. This value is typically IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns successfully, contains the interface pointer requested in riid. This is typically IShellItem or IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Create a Shell item, given a parent folder and a child item ID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateItemWithParent",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE The IDList of the parent folder of the item being created; the IDList of psfParent. This parameter can be NULL, if psfParent is specified."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psfParent",
        "description": "Type: IShellFolder* A pointer to IShellFolder interface that specifies the shell data source of the child item specified by the pidl.This parameter can be NULL, if pidlParent is specified."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A child item ID relative to its parent folder specified by psfParent or pidlParent."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to an interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvItem",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid.  This will typically be IShellItem or          IShellItem2."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new instance of the default Shell folder view object (DefView).",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellFolderView is recommended over SHCreateShellFolderViewEx because of the greater flexibility of its elements to participate in various scenarios, provide new functionality to the view, and interact with other objects. When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do so, call QueryInterface on the object using the IID_CDefView IID. This call succeeds only when made on the default Shell folder view object. Data sources that use the default Shell folder view object must implement these interfaces: Optionally, they can also implement IPersistFolder3. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellFolderView",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SFV_CREATE*",
        "name": "pcsfv",
        "description": "Type: const SFV_CREATE* Pointer to a SFV_CREATE structure that describes the particulars used in creating this instance of the Shell folder view object."
      },
      {
        "in_out": "_Out_",
        "type": "IShellView**",
        "name": "ppsv",
        "description": "Type: IShellView** When this function returns successfully, contains an interface pointer to the new IShellView object. On failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new instance of the default Shell folder view object. It is recommended that you use SHCreateShellFolderView rather than this function.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellFolderView is recommended over SHCreateShellFolderViewEx because of the greater flexibility of its elements to participate in various scenarios, provide new functionality to the view, and interact with other objects. When dealing with several instances of IShellView, you might want to verify which is the default Shell folder view object. To do so, call QueryInterface on the object using IID_CDefView. This call succeeds only on the default Shell folder view object. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellFolderViewEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CSFV*",
        "name": "pcsfv",
        "description": "Type: CSFV* Pointer to a structure that describes the details used in creating this instance of the Shell folder view object."
      },
      {
        "in_out": "_Out_",
        "type": "IShellView**",
        "name": "ppsv",
        "description": "Type: IShellView** The address of an IShellView interface pointer that, when this function returns successfully, points to the new view object. On failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an IShellItem object.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateShellItem creates an object that represents a Shell namespace item. The caller must provide parent information in pidlParent or psfParent; alternatively, the caller can provide an absolute IDList in the pidl parameter. There are three valid calling patterns for this function: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL to the parent. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder*",
        "name": "psfParent",
        "description": "Type: IShellFolder* A pointer to the parent IShellFolder. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A PIDL to the requested item. If parent information is not included in pidlParent or psfParent, this must be an absolute PIDL."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItem**",
        "name": "ppsi",
        "description": "Type: IShellItem** When this method returns, contains the interface pointer to the new IShellItem."
      }
    ],
    "min_client": "Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a Shell item array object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArray",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlParent",
        "description": "Type: PCIDLIST_ABSOLUTE The ID list of the parent folder of the items specified in ppidl. If psf is specified, this parameter can be NULL. If this pidlParent is not specified, it is computed from the psf parameter using IPersistFolder2."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* The Shell data source object that is the parent of the child items specified in ppidl. If pidlParent is specified, this parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of elements in the array specified by ppidl."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "ppidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY The list of child item IDs for which the array is being created. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItemArray**",
        "name": "ppsiItemArray",
        "description": "Type: IShellItemArray** When this function returns, contains the address of an IShellItemArray interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a Shell item array object from a data object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is usefull for Shell extensions that implement IShellExtInit and are passed a data object to the IShellExtInit::Initialize method; for example, context menu handlers. This API lets you convert the data object into a Shell item that the handler can consume. It is recommend that handlers use a Shell item array rather than clipboard formats like CF_HDROP and CFSTR_SHELLIDLIST (also known as HIDA) as it leads to simpler code and allows some performance improvements. The resulting shell item array holds a reference to the source data object.  Therefore, that data object must remain valid for the lifetime of the shell item array.  Notably, the data objects passed to IDropTarget methods are no longer valid after the drop operation completes. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject*",
        "name": "pdo",
        "description": "Type: IDataObject* A pointer to IDataObject interface."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the desired interface ID."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItemArray."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a Shell item array object from a list of ITEMIDLIST structures.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromIDLists",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of elements in the array."
      },
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE_ARRAY",
        "name": "rgpidl",
        "description": "Type: PCIDLIST_ABSOLUTE_ARRAY A list of cidl constant pointers to ITEMIDLIST structures."
      },
      {
        "in_out": "_Out_",
        "type": "IShellItemArray**",
        "name": "ppsiItemArray",
        "description": "Type: IShellItemArray** When this function returns, contains an IShellItemArray interface pointer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an array of one element from a single Shell item.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a one-element array from a single item. To create an array from the contents of a folder, use SHCreateShellItemArray. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateShellItemArrayFromShellItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psi",
        "description": "Type: IShellItem* Pointer to IShellItem object that represents the item."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItemArray."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically a pointer to an IShellItemArray."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Provides a default handler to extract an icon from a file.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "It is the responsibility of the caller to free the icon resources created through this function when they are no longer needed. This can be done through the DestroyIcon function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHDefExtractIcon",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszIconFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated buffer that contains the path and name of the file from which the icon is extracted."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIndex",
        "description": "Type: int The location of the icon within the file named in pszIconFile. If this is a positive number, it refers to the zero-based position of the icon in the file. For instance, 0 refers to the 1st icon in the resource file and 2 refers to the 3rd. If this is a negative number, it refers to the icon's resource ID."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A flag that controls the icon extraction.  GIL_SIMULATEDOC   Overlays the extracted icon on the default document icon to create the final icon. This icon can be used when no more appropriate icon can be found or retrieved."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HICON*",
        "name": "phiconLarge",
        "description": "Type: HICON* A pointer to an HICON that, when this function returns successfully, receives the handle of the large version of the icon specified in the LOWORD of nIconSize. This value can be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HICON*",
        "name": "phiconSmall",
        "description": "Type: HICON* A pointer to an HICON that, when this function returns successfully, receives the handle of the small version of the icon specified in the HIWORD of nIconSize."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "nIconSize",
        "description": "Type: UINT A value that contains the large icon size in its LOWORD and the small icon size in its HIWORD. Size is measured in pixels. Pass 0 to specify default large and small sizes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function supports the standard return value E_OUTOFMEMORY, as well as the following values:  ",
    "remarks": "As of Windows Vista, if a drag image is not already stored in the data object pdtobj and a drag image cannot be obtained from the window specified by hwnd, the Shell provides a generic drag image. A drag image can fail to be obtained from the specified window either because hwnd is NULL or the specified window does not support the DI_GETDRAGIMAGE message. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHDoDragDrop",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the window used to obtain the drag image. This value can be NULL. See Remarks for more details."
      },
      {
        "in_out": "_In_",
        "type": "IDataObject*",
        "name": "pdtobj",
        "description": "Type: IDataObject* A pointer to the IDataObject interface on a data object that contains the data being dragged."
      },
      {
        "in_out": "_In_",
        "type": "IDropSource*",
        "name": "pdsrc",
        "description": "Type: IDropSource* A pointer to an implementation of the IDropSource interface, which is used to communicate with the source during the drag operation.                                   As of Windows Vista, if this value is NULL, the Shell creates a drop source object for you."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEffect",
        "description": "Type: DWORD The effects that the source allows in the drag-and-drop operation. The most significant effect is whether the drag-and-drop operation permits a move. For a list of possible values, see DROPEFFECT."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwEffect",
        "description": "Type: DWORD* A pointer to a value that indicates how the drag-and-drop operation affected the source data. The pdwEffect parameter is set only if the operation is not canceled. For a list of possible values, see DROPEFFECT."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sends a message to the taskbar's status area.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. If dwMessage is set to NIM_SETVERSION, the function returns TRUE if the version was successfully changed, or FALSE if the requested version is not supported. ",
    "remarks": "As of Windows 2000 (Shell32.dll version 5.0), if you set the uVersion member of the NOTIFYICONDATA structure pointed to by lpdata to NOTIFYICON_VERSION_4 or higher, Shell_NotifyIcon mouse and keyboard events are handled differently than in earlier versions of Windows. The differences include the following: As of Windows XP (Shell32.dll version 6.0), if a user passes the mouse pointer over an icon with which a balloon notification is associated, the Shell sends the following messages: In addition to those messages, as of Windows Vista (Shell32.dll version 6.0.6), if a user passes the mouse pointer over an icon with which a balloon notification is associated, the Windows Vista Shell also adds the following messages: Regardless of the operating system version, you can select which way the Shell should behave by calling Shell_NotifyIcon with dwMessage set to NIM_SETVERSION. Set the uVersion member of the NOTIFYICONDATA structure pointed to by lpdata to indicate whether you want Windows 2000, Windows Vista, or pre-version 5.0 (Windows 95) behavior. As of Windows XP Service Pack 2 (SP2), a custom icon can be displayed in the notification balloon. This allows the calling process to customize the notification beyond the previously available options of info, warning, and error, and distinguish it from other types of notification for the user. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "Shell_NotifyIcon",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMessage",
        "description": "Type: DWORD A value that specifies the action to be taken by this function. ..."
      },
      {
        "in_out": "_In_",
        "type": "PNOTIFYICONDATA",
        "name": "lpdata",
        "description": "Type: PNOTIFYICONDATA A pointer to a NOTIFYICONDATA structure. The content of the structure depends on the value of dwMessage. It can define an icon to add to the notification area, cause that icon to display a notification, or identify an icon to modify or delete."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the screen coordinates of the bounding rectangle of a notification icon.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "Shell_NotifyIconGetRect",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const NOTIFYICONIDENTIFIER*",
        "name": "identifier",
        "description": "Type: const NOTIFYICONIDENTIFIER* Pointer to a NOTIFYICONIDENTIFIER structure that identifies the icon."
      },
      {
        "in_out": "_Out_",
        "type": "RECT*",
        "name": "iconLocation",
        "description": "Type: RECT* Pointer to a RECT structure that, when this function returns successfully, receives the coordinates of the icon."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Displays a ShellAbout dialog box.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: int TRUE if successful; otherwise, FALSE. ",
    "remarks": "Note that the ShellAbout function dialog box uses text and a default icon that are specific to Windows. To see an example of a ShellAbout dialog box, choose About Windows from the Help menu drop-down list in Windows Explorer. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "ShellAbout",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A window handle to a parent window. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szApp",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains text to be displayed in the title bar of the ShellAbout dialog box and on the first line of the dialog box after the text \"Microsoft\". If the text contains a separator (#) that divides it into two parts, the function displays the first part in the title bar and the second part on the first line after the text \"Microsoft\".                       Windows 2000, Windows XP, Windows Server 2003: If the string pointed to by this parameter contains a separator (#), then the string must be writeable. Windows Vista, Windows Server 2008: This string cannot exceed 200 characters in length."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "szOtherStuff",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains text to be displayed in the dialog box after the version and copyright information. This parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HICON",
        "name": "hIcon",
        "description": "Type: HICON The handle of an icon that the function displays in the dialog box. This parameter can be NULL, in which case the function displays the Windows icon."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Registers the Shell Dynamic Data Exchange (DDE) services in the current process, notifying the system that the current process wishes to host DDE objects.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "The process that calls this function acts as the Shell and is used to view the content of folders opened with the ShellExecute 'open' verb. This function does not have an associated header or library file so it must be called by ordinal value. Call LoadLibrary with the DLL name (Shdocvw.dll) to obtain a module handle. Then call GetProcAddress with that module handle and the function ordinal number 118 to get the address of the function. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "ShellDDEInit",
    "is_callback": 0,
    "dll": "Shdocvw.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "init",
        "description": "Type: BOOL TRUE to register the current process as DDE host; FALSE to unregister it."
      }
    ],
    "min_client": "Windows XP, Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Performs an operation on a specified file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HINSTANCE If the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an int and compared to either 32 or the following error codes below.  ",
    "remarks": "Because ShellExecute can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecute is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here: There are certainly instances where ShellExecute does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initalize COM before using this function. This method allows you to execute any commands in a folder's shortcut menu or stored in the registry. To open a folder, use either of the following calls: or To explore a folder, use the following call: To launch the Shell's Find utility for a directory, use the following call. If lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function  attempts to open or explore the folder. To obtain information about the application that is launched as a result of calling ShellExecute, use ShellExecuteEx. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "ShellExecute",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpOperation",
        "description": "Type: LPCTSTR A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:  edit   Launches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.  explore   Explores a folder specified by lpFile.  find   Initiates a search beginning in the directory specified by lpDirectory.  open   Opens the item specified by the lpFile parameter. The item can be a file or folder.  print   Prints the file specified by lpFile. If lpFile is not a document file, the function fails.  NULL   The default verb is used, if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb. If a relative path is used for the lpDirectory parameter do not use a relative path for lpFile."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpParameters",
        "description": "Type: LPCTSTR If lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpDirectory",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the default (working) directory for the action. If this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do not use a relative path for lpDirectory."
      },
      {
        "in_out": "_In_",
        "type": "INT",
        "name": "nShowCmd",
        "description": "Type: INT The flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. These values are defined in Winuser.h.  SW_HIDE (0)   Hides the window and activates another window.  SW_MAXIMIZE (3)   Maximizes the specified window.  SW_MINIMIZE (6)   Minimizes the specified window and activates the next top-level window in the z-order.  SW_RESTORE (9)   Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when restoring a minimized window.  SW_SHOW (5)   Activates the window and displays it in its current size and position.  SW_SHOWDEFAULT (10)   Sets the show state based on the SW_ flag specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. An application should call ShowWindow with this flag to set the initial show state of its main window.  SW_SHOWMAXIMIZED (3)   Activates the window and displays it as a maximized window.  SW_SHOWMINIMIZED (2)   Activates the window and displays it as a minimized window.  SW_SHOWMINNOACTIVE (7)   Displays the window as a minimized window. The active window remains active.  SW_SHOWNA (8)   Displays the window in its current state. The active window remains active.  SW_SHOWNOACTIVATE (4)   Displays a window in its most recent size and position. The active window remains active.  SW_SHOWNORMAL (1)   Activates and displays a window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when displaying the window for the first time."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Performs an operation on a specified file.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. Call GetLastError for extended error information. ",
    "remarks": "Because ShellExecuteEx can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecuteEx is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here: There are instances where ShellExecuteEx does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initalize COM before using this function. When DLLs are loaded into your process, you acquire a lock known as a loader lock. The DllMain function always executes under the loader lock. It is important that you do not call ShellExecuteEx while you hold a loader lock. Because ShellExecuteEx is extensible, you could load code that does not function properly in the presence of a loader lock, risking a deadlock and therefore an unresponsive thread. With multiple monitors, if you specify an HWND and set the lpVerb member of the SHELLEXECUTEINFO structure pointed to by lpExecInfo to \"Properties\", any windows created by ShellExecuteEx might not appear in the correct position. If the function succeeds, it sets the hInstApp member of the SHELLEXECUTEINFO structure to a value greater than 32. If the function fails, hInstApp is set to the SE_ERR_XXX error value that best indicates the cause of the failure. Although hInstApp is declared as an HINSTANCE for compatibility with 16-bit Windows applications, it is not a true HINSTANCE. It can be cast only to an int and can be compared only to either the value 32 or the SE_ERR_XXX error codes. The SE_ERR_XXX error values are provided for compatibility with ShellExecute. To retrieve more accurate error information, use GetLastError. It may return one of the following values.  Opening items from a URL You can register your application to activate when passed URLs. You can also specify which protocols your application supports. See Application Registration for more info. Site chain support As of Windows 8, you can provide a site chain pointer to the ShellExecuteEx function to support item activation with services from that site. See Launching Applications (ShellExecute, ShellExecuteEx, SHELLEXECUTEINFO) for more information. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ShellExecuteEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 3.51 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "SHELLEXECUTEINFO*",
        "name": "pExecInfo",
        "description": "Type: SHELLEXECUTEINFO* A pointer to a SHELLEXECUTEINFO structure that contains and receives information about the application being executed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Empties the Recycle Bin on the specified drive.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEmptyRecycleBin",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window of any dialog boxes that might be displayed during the operation. This parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszRootPath",
        "description": "Type: LPCTSTR The address of a null-terminated string of maximum length MAX_PATH that contains the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names, for example c:\\windows\\system\\. It can also contain an empty string or NULL. If this value is an empty string or NULL, all Recycle Bins on all drives will be emptied."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD One or more of the following values.  SHERB_NOCONFIRMATION   No dialog box confirming the deletion of the objects will be displayed.  SHERB_NOPROGRESSUI   No dialog box indicating the progress will be displayed.  SHERB_NOSOUND   No sound will be played when the operation is complete."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Enumerates the user accounts that have unread email.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The hKeyUser parameter is the HKEY for the root of the user's information, for example HKEY_CURRENT_USER, or any key enumerated under HKEY_USERS. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEnumerateUnreadMailAccounts",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "hKeyUser",
        "description": "Type: HKEY A valid HKEY for a given user."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Type: DWORD The index of the user account."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPTSTR A pointer to a Unicode string that specifies the email address of an account belonging to the specified user."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchMailAddress",
        "description": "Type: int The number of characters in the email address."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is used when a calling process needs the deterministic behavior from a command template, regardless of execution context. It ignores the current process state, such as the %PATH%, GetCurrentDirectory, and parent process directory. This function is used when the command is hard-coded. This function is used by ShellExecute when handling file associations from HKEY_CLASSES_ROOT. The purpose of this function is to reduce CreateProcess command-line exploits. It is not designed for processing user input and if used for that purpose can generate unexpected failures. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHEvaluateSystemCommandTemplate",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszCmdTemplate",
        "description": "Type: PCWSTR A command line, which may or may not include parameters. If the parameters are substitution parameters, then SHEvaluateSystemCommandTemplate should be called before parameters have been replaced."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszApplication",
        "description": "Type: PWSTR* A pointer to the verified path to the application. This value should be passed as the lpApplication parameter in a call to CreateProcess or as the lpFile parameter in a call to ShellExecute. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR*",
        "name": "ppszCommandLine",
        "description": "Type: PWSTR* A pointer to a command-line string template to be used in a call to CreateProcess. Command-line parameters should be specified based on this template, and then passed as the lpCommandLine parameter to CreateProcess. It is guaranteed to be of a form that PathGetArgs can always read correctly. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.                        This parameter can be NULL if this function is not being used in association with a call to CreateProcess."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR*",
        "name": "ppszParameters",
        "description": "Type: PWSTR* A pointer to a command-line string template to be used in a call to ShellExecute. Command-line parameters should be specified based on this template, and then passed as the lpParameters parameter to ShellExecute. This parameter is identical to calling PathGetArgs. This resource is allocated using CoTaskMemAlloc, and it is the responsibility of the caller to free the resource when it is no longer needed by calling CoTaskMemFree.                        This parameter can be NULL if this function is not being used in association with a call to CreateProcess."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "Creates a new process and its primary thread. The new process runs in the security context of the calling process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h on Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2 (include Windows.h);  Processthreadsapi.h on Windows 8 and Windows Server 2012",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. Note that the function returns before the process has finished initialization. If a required DLL cannot be located or fails to initialize, the process is terminated. To get the termination status of a process, call GetExitCodeProcess. ",
    "remarks": "The process is assigned a process identifier. The identifier is valid until the process terminates. It can be used to identify the process, or specified in the  OpenProcess function to open a handle to the process. The initial thread in the process is also assigned a thread identifier. It can be specified in the  OpenThread function to open a handle to the thread. The identifier is valid until the thread terminates and can be used to uniquely identify the thread within the system. These identifiers are returned in the  PROCESS_INFORMATION structure. The name of the executable in the command line that the operating system provides to a process is not necessarily identical to that in the command line that the calling process gives to the  CreateProcess function. The operating system may prepend a fully qualified path to an executable name that is provided without a fully qualified path. The calling thread can use the  WaitForInputIdle function to wait until the new process has finished its initialization and is waiting for user input with no input pending. This can be useful for synchronization between parent and child processes, because  CreateProcess returns without waiting for the new process to finish its initialization. For example, the creating process would use  WaitForInputIdle before trying to find a window associated with the new process. The preferred way to shut down a process is by using the  ExitProcess function, because this function sends notification of approaching termination to all DLLs attached to the process. Other means of shutting down a process do not notify the attached DLLs. Note that when a thread calls  ExitProcess, other threads of the process are terminated without an opportunity to execute any additional code (including the thread termination code of attached DLLs). For more information, see  Terminating a Process. A  parent process can directly alter the environment variables of a child process during process creation.  This is the only  situation when a process can directly change the environment settings of another process. For more information, see  Changing Environment Variables. If an application provides an environment block, the current directory information of the system drives is not automatically propagated to the new process. For example, there is an environment variable named =C: whose value is the current directory on drive C. An application must manually pass the current directory information to the new process. To do so, the application must explicitly create these environment variable strings, sort them alphabetically (because the system uses a sorted environment), and put them into the environment block. Typically, they will go at the front of the environment block, due to the environment block sort order. One way to obtain the current directory information for a drive X is to make the following call:  GetFullPathName(\"X:\", ...). That avoids an application having to scan the environment block. If the full path returned is X:\\, there is no need to pass that value on as environment data, since the root directory is the default current directory for drive X of a new process. When a process is created with CREATE_NEW_PROCESS_GROUP specified, an implicit call to  SetConsoleCtrlHandler(NULL,TRUE) is made on behalf of the new process; this means that the new process has CTRL+C disabled. This lets shells handle CTRL+C themselves, and selectively pass that signal on to sub-processes. CTRL+BREAK is not disabled, and may be used to interrupt the process/process group. The first parameter, lpApplicationName, can be NULL, in which case the executable name must be in the  white space\u00e2\u0080\u0093delimited string pointed to by lpCommandLine. If the executable or path name has a space in it, there is a risk that a different executable could be run because of the way the function parses spaces. The following example is dangerous because the function will attempt to run \"Program.exe\", if it exists, instead of \"MyApp.exe\". If a malicious user were to create an application called \"Program.exe\" on a system, any program that incorrectly calls  CreateProcess using the Program Files directory will run this application instead of the intended application. To avoid this problem, do not pass NULL for lpApplicationName. If you do pass NULL for lpApplicationName, use quotation marks around the executable path in lpCommandLine, as shown in the example below. For an example, see  Creating Processes. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "CreateProcess",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpApplicationName",
        "description": "The name of the module to be executed. ..."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPTSTR",
        "name": "lpCommandLine",
        "description": "The command line to be executed. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpProcessAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that determines whether the returned handle to the new process object can be inherited by child processes. If lpProcessAttributes is NULL, the handle cannot be inherited.     The lpSecurityDescriptor member of the structure specifies a security descriptor for the new process. If lpProcessAttributes is NULL or lpSecurityDescriptor is NULL, the process gets a default security descriptor. The ACLs in the default security descriptor for a process come from the primary token of the creator.Windows XP:  The ACLs in the default security descriptor for a process come from the primary or impersonation token of the creator. This behavior changed with Windows XP with SP2 and Windows Server 2003."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpThreadAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that determines whether the returned handle to the new thread object can be inherited by child processes. If lpThreadAttributes is NULL, the handle cannot be inherited.     The lpSecurityDescriptor member of the structure specifies a security descriptor for the main thread. If lpThreadAttributes is NULL or lpSecurityDescriptor is NULL, the thread gets a default security descriptor. The ACLs in the default security descriptor for a thread come from the process token.Windows XP:  The ACLs in the default security descriptor for a thread come from the primary or impersonation token of the creator. This behavior changed with Windows XP with SP2 and Windows Server 2003."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bInheritHandles",
        "description": "If this parameter TRUE, each inheritable handle in the calling process is inherited by the new process. If the parameter is FALSE, the handles are not inherited. Note that inherited handles have the same value and access rights as the original handles."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "The flags that control the priority class and the creation of the process. For a list of values, see  Process Creation Flags.     This parameter also controls the new process's priority class, which is used to determine the scheduling priorities of the process's threads. For a list of values, see  GetPriorityClass. If none of the priority class flags is specified, the priority class defaults to NORMAL_PRIORITY_CLASS unless the priority class of the creating process is IDLE_PRIORITY_CLASS or BELOW_NORMAL_PRIORITY_CLASS. In this case, the child process receives the default priority class of the calling process."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpEnvironment",
        "description": "A pointer to the environment block for the new process. If this parameter is NULL, the new process uses the environment of the calling process. An environment block consists of a null-terminated block of null-terminated strings. Each string is in the following form: name=value\\0 Because the equal sign is used as a separator, it must not be used in the name of an environment variable. An environment block can contain either Unicode or ANSI characters. If the environment block pointed to by lpEnvironment contains Unicode characters, be sure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. If this parameter is NULL and the environment block of the parent process contains Unicode characters, you must also ensure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT. The ANSI version of this function, CreateProcessA fails if the total size of the environment block for the process exceeds 32,767 characters. Note that an ANSI environment block is terminated by two zero bytes: one for the last string, one more to terminate the block. A Unicode environment block is terminated by four zero bytes: two for the last string, two more to terminate the block."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpCurrentDirectory",
        "description": "The full path to the current directory for the process. The string can also specify a UNC path. If this parameter is NULL, the new process will have the same current drive and directory as the calling process. (This feature is provided primarily for shells that need to start an application and specify its initial drive and working directory.)"
      },
      {
        "in_out": "_In_",
        "type": "LPSTARTUPINFO",
        "name": "lpStartupInfo",
        "description": "A pointer to a  STARTUPINFO or STARTUPINFOEX structure. To set extended attributes, use a STARTUPINFOEX structure and specify EXTENDED_STARTUPINFO_PRESENT in the dwCreationFlags parameter. Handles in  STARTUPINFO or STARTUPINFOEX must be closed with  CloseHandle when they are no longer needed. Important  The caller is responsible for ensuring that the standard handle fields in STARTUPINFO  contain valid handle values. These fields are copied unchanged to the child process without validation, even when the dwFlags member specifies STARTF_USESTDHANDLES. Incorrect values can cause the child process to misbehave or crash. Use the Application Verifier runtime verification tool to detect invalid handles."
      },
      {
        "in_out": "_Out_",
        "type": "LPPROCESS_INFORMATION",
        "name": "lpProcessInformation",
        "description": "A pointer to a  PROCESS_INFORMATION structure that receives identification information about the new process.     Handles in  PROCESS_INFORMATION must be closed with  CloseHandle when they are no longer needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by IFileOperation.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: int Returns zero if successful; otherwise nonzero. Applications normally should simply check for zero or nonzero. It is good practice to examine the value of the fAnyOperationsAborted member of the SHFILEOPSTRUCT. SHFileOperation can return 0 for success if the user cancels the operation. If you do not check fAnyOperationsAborted as well as the return value, you cannot know that the function accomplished the full task you asked of it and you might proceed under incorrect assumptions. Do not use GetLastError with the return values of this function. To examine the nonzero values for troubleshooting purposes, they largely map to those defined in Winerror.h. However, several of its possible return values are based on pre-Win32 error codes, which in some cases overlap the later Winerror.h values without matching their meaning. Those particular values are detailed here, and for these specific values only these meanings should be accepted over the Winerror.h codes. However, these values are provided with these warnings:   ",
    "remarks": "You should use fully qualified path names with this function. Using it with relative path names is not thread safe. With two exceptions, you cannot use SHFileOperation to move special folders from a local drive to a remote computer by specifying a network path. The exceptions are the My Documents (CSIDL_PERSONAL, CSIDL_DOCUMENTS) and My Pictures folders (CSIDL_MYPICTURES). When used to delete a file, SHFileOperation permanently deletes the file unless you set the FOF_ALLOWUNDO flag in the fFlags member of the SHFILEOPSTRUCT structure pointed to by lpFileOp. Setting that flag sends the file to the Recycle Bin. If you want to simply delete a file and guarantee that it is not placed in the Recycle Bin, use DeleteFile. If a copy callback handler is exposed and registered, SHFileOperation calls it unless you set a flag such as FOF_NOCONFIRMATION in the fFlags member of the structure pointed to by lpFileOp. See ICopyHook::CopyCallback for details on implementing copy callback handlers. File deletion is recursive unless you set the FOF_NORECURSION flag in lpFileOp. With Windows 2000 or later, it is possible to connect an HTML file with a folder that contains related files such as Graphics Interchange Format (GIF) images or style sheets. If file connection is enabled, when you move or copy the HTML file, the connected folder and all of its files are also moved or copied. Conversely, if you move the folder with the related files, the HTML file is also moved. The HTML file must have a .htm or .html extension. You create the connection to the related files by placing the folder that contains them into the same folder as the HTML file. The name of the folder that contains the connected files must be the same as the name of the HTML file followed by \"_files\" or \".files\" (this is case sensitive; for example, \".Files\" does not work). An example is given here. File connection is enabled by default. It can be disabled by adding a REG_DWORD entry, NoFileFolderConnection, as shown here:  Setting NoFileFolderConnection to 1 disables file connection. If the value is set to zero or is missing, file connection is enabled. To move only the specified files and none of the connected files, set the FOF_NO_CONNECTED_ELEMENTS flag in the fFlags member of the structure pointed to by lpFileOp. Note that the use of a folder with a name like \"MyFile_files\" to define a connection may not be valid for localized versions of Windows. The term \"files\" may need to be replaced by the equivalent word in the local language. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHFileOperation",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPSHFILEOPSTRUCT",
        "name": "lpFileOp",
        "description": "Type: LPSHFILEOPSTRUCT A pointer to an SHFILEOPSTRUCT structure that contains information this function needs to carry out the specified operation. This parameter must contain a valid value that is not NULL. You are responsible for validating the value. If you do not validate it, you will experience unexpected results."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees a file name mapping object that was retrieved by the SHFileOperation function.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHFreeNameMappings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hNameMappings",
        "description": "Type: HANDLE A handle to the file name mapping object to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves extended property data from a relative identifier list.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or E_INVALIDARG otherwise. ",
    "remarks": "This function extracts only information that is present in the pointer to an item identifier list (PIDL). Since the content of a PIDL depends on the folder object that created the PIDL, there is no guarantee that all requested information will be available. In addition, the information that is returned reflects the state of the object at the time the PIDL was created. The current state of the object could be different. For example, if you set nFormat to SHGDFIL_FINDDATA, the function might assign meaningful values to only some of the members of the WIN32_FIND_DATA structure. The remaining members will be set to zero. To retrieve complete current information on a file system file or folder, use standard file system functions such as GetFileTime or FindFirstFile. E_INVALIDARG is returned if the psf, pidl, pv, or cb parameter does not match the nFormat parameter, or if nFormat is not one of the specific SHGDFIL_ values shown above. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDataFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* The address of the parent IShellFolder interface. This must be the immediate parent of the ITEMIDLIST structure referenced by the pidl parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to an ITEMIDLIST structure that identifies the object relative to the folder specified in psf."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "nFormat",
        "description": "Type: int The format in which the data is being requested. This parameter must be set to one of the following values.  SHGDFIL_FINDDATA   Format used for file system objects. The pv parameter is the address of a WIN32_FIND_DATA structure.  SHGDFIL_NETRESOURCE   Format used for network resources. The pv parameter is the address of a NETRESOURCE structure.  SHGDFIL_DESCRIPTIONID    Version 4.71. Format used for network resources. The pv parameter is the address of an SHDESCRIPTIONID structure."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pv",
        "description": "Type: void* A pointer to a buffer that, when this function returns successfully, receives the requested data. The format of this buffer is determined by nFormat. If nFormat is SHGDFIL_NETRESOURCE, there are two possible cases. If the buffer is large enough, the net resource's string information (fields for the network name, local name, provider, and comments) will be placed into the buffer. If the buffer is not large enough, only the net resource structure will be placed into the buffer and the string information pointers will be NULL."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cb",
        "description": "Type: int Size of the buffer at pv, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDesktopFolder",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IShellFolder**",
        "name": "ppshf",
        "description": "Type: IShellFolder** When this method returns, receives an IShellFolder interface pointer for the desktop folder. The calling application is responsible for eventually freeing the interface by calling its IUnknown::Release method."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves disk space information for a disk volume.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "In Shell32.dll version 5.0 and later, SHGetDiskFreeSpace does not have its own implementation and is defined in Shellapi.h as shown here. When you call SHGetDiskFreeSpace, you are actually calling SHGetDiskFreeSpaceEx. This function calls the GetDiskFreeSpaceEx function if it is available on the operating system. If GetDiskFreeSpaceEx is not available, it is emulated by calling the GetDiskFreeSpace function and manipulating the return values. For additional information, see the documentation for GetDiskFreeSpaceEx. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetDiskFreeSpace",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCTSTR",
        "name": "pszVolume",
        "description": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive.                       When using Shell32.dll versions previous to version 5.0, this must be an ANSI string. Unicode is not supported in those versions."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER*",
        "name": "pqwFreeCaller",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER*",
        "name": "pqwTot",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the total size of the volume, in bytes."
      },
      {
        "in_out": "",
        "type": "ULARGE_INTEGER*",
        "name": "pqwFree",
        "description": "Type: ULARGE_INTEGER* The address of a ULARGE_INTEGER value that receives the number of bytes of free space on the volume."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves disk space information for a disk volume.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "The similarly named function SHGetDiskFreeSpace is merely an alias for SHGetDiskFreeSpaceEx. When you call SHGetDiskFreeSpace you actually call this function. This function calls the GetDiskFreeSpaceEx function if it is available on the operating system. If GetDiskFreeSpaceEx is not available, it is emulated by calling the GetDiskFreeSpace function and manipulating the return values. For additional information, see the documentation for GetDiskFreeSpaceEx. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetDiskFreeSpaceEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszDirectoryName",
        "description": "Type: LPCTSTR A null-terminated string that specifies the volume for which size information is retrieved. This can be a drive letter, UNC name, or the path of a folder. You cannot use NULL to represent the current drive."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER*",
        "name": "pulFreeBytesAvailableToCaller",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the number of bytes on the volume available to the calling application. If the operating system implements per-user quotas, this value may be less than the total number of free bytes on the volume."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER*",
        "name": "pulTotalNumberOfBytes",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the total size of the volume, in bytes."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ULARGE_INTEGER*",
        "name": "pulTotalNumberOfFreeBytes",
        "description": "Type: ULARGE_INTEGER* Pointer to a value that receives the number of bytes of free space on the volume."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the type of media that is in the given drive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetDriveMedia",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDrive",
        "description": "Type: PCWSTR The drive in which to check the media type."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwMediaContent",
        "description": "Type: DWORD* A pointer to the type of media in the given drive. A combination of ARCONTENT flags."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: DWORD_PTR Returns a value whose meaning depends on the uFlags parameter. If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise. If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file. It will be one of the following values.  ",
    "remarks": "You should call this function from a background thread. Failure to do so could cause the UI to stop responding. If SHGetFileInfo returns an icon handle in the hIcon member of the SHFILEINFO structure pointed to by psfi, you are responsible for freeing it with DestroyIcon when you no longer need it. You must initialize Component Object Model (COM) with CoInitialize or OleInitialize prior to calling SHGetFileInfo. When you use the SHGFI_EXETYPE flag with a Windows application, the Windows version of the executable is given in the HIWORD of the return value. This version is returned as a hexadecimal value. For details on equating this value with a specific Windows version, see Using the Windows Headers. The following code example uses SHGetFileInfo to retrieve the display name of the Recycle Bin, identified by its PIDL. ",
    "return_type": "DWORD_PTR",
    "category": "Windows Shell",
    "name": "SHGetFileInfo",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path and file name. Both absolute and relative paths are valid.          \t\t\t\t\t If the uFlags parameter includes the SHGFI_PIDL flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The PIDL must be a fully qualified PIDL. Relative PIDLs are not allowed. If the uFlags parameter includes the SHGFI_USEFILEATTRIBUTES flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing FILE_ATTRIBUTE_NORMAL in dwFileAttributes. This string can use either short (the 8.3 form) or long file names."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFileAttributes",
        "description": "Type: DWORD A combination of one or more file attribute flags (FILE_ATTRIBUTE_ values as defined in Winnt.h). If uFlags does not include the SHGFI_USEFILEATTRIBUTES flag, this parameter is ignored."
      },
      {
        "in_out": "_Inout_",
        "type": "SHFILEINFO*",
        "name": "psfi",
        "description": "Type: SHFILEINFO* Pointer to a SHFILEINFO structure to receive the file information."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cbFileInfo",
        "description": "Type: UINT The size, in bytes, of the SHFILEINFO structure pointed to by the psfi parameter."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The flags that specify the file information to retrieve. This parameter can be a combination of the following values.  SHGFI_ADDOVERLAYS (0x000000020)    Version 5.0. Apply the appropriate overlays to the file's icon. The SHGFI_ICON flag must also be set.  SHGFI_ATTR_SPECIFIED (0x000020000)   Modify SHGFI_ATTRIBUTES to indicate that the dwAttributes member of the SHFILEINFO structure at psfi contains the specific attributes that are desired. These attributes are passed to IShellFolder::GetAttributesOf. If this flag is not specified, 0xFFFFFFFF is passed to IShellFolder::GetAttributesOf, requesting all attributes. This flag cannot be specified with the SHGFI_ICON flag.  SHGFI_ATTRIBUTES (0x000000800)   Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter. These are the same attributes that are obtained from IShellFolder::GetAttributesOf.  SHGFI_DISPLAYNAME (0x000000200)   Retrieve the display name for the file, which is the name as it appears in Windows Explorer. The name is copied to the szDisplayName member of the structure specified in psfi. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name. Note that the display name can be affected by settings such as whether extensions are shown.  SHGFI_EXETYPE (0x000002000)   Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.  SHGFI_ICON (0x000000100)   Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.  SHGFI_ICONLOCATION (0x000001000)   Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the szDisplayName member of the structure specified by psfi. The icon's index is copied to that structure's iIcon member.  SHGFI_LARGEICON (0x000000000)   Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.  SHGFI_LINKOVERLAY (0x000008000)   Modify SHGFI_ICON, causing the function to add the link overlay to the file's icon. The SHGFI_ICON flag must also be set.  SHGFI_OPENICON (0x000000002)   Modify SHGFI_ICON, causing the function to retrieve the file's open icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.  SHGFI_OVERLAYINDEX (0x000000040)    Version 5.0. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi. This flag requires that the SHGFI_ICON be set as well.  SHGFI_PIDL (0x000000008)   Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.  SHGFI_SELECTED (0x000010000)   Modify SHGFI_ICON, causing the function to blend the file's icon with the system highlight color. The SHGFI_ICON flag must also be set.  SHGFI_SHELLICONSIZE (0x000000004)   Modify SHGFI_ICON, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The SHGFI_ICON flag must also be set.  SHGFI_SMALLICON (0x000000001)   Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains small icon images. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.  SHGFI_SYSICONINDEX (0x000004000)   Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the system image list will result in undefined behavior.  SHGFI_TYPENAME (0x000000400)   Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified in psfi.  SHGFI_USEFILEATTRIBUTES (0x000000010)   Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the SHGFI_ATTRIBUTES, SHGFI_EXETYPE, or SHGFI_PIDL flags."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]",
    "library": "Shell32.lib",
    "min_server": "",
    "header": "Shlobj.h",
    "return_value": "Returns S_OK if successful, or an error value otherwise. ",
    "remarks": "Since SHGetFolderPath is a wrapper for SHGetKnownFolderPath, this function (SHGetFolderPathEx) also serves as an extension to SHGetFolderPath. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetFolderPathEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "A reference to the KNOWNFOLDERID that identifies the folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user. Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pszPath",
        "description": "A null-terminated, Unicode string. This buffer must be of size cchPath. When SHGetFolderPathEx returns successfully, this parameter contains the path for the known folder."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchPath",
        "description": "The size of the ppszPath buffer, in characters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHGetFolderPath. That older function is now simply a wrapper for SHGetKnownFolderPath. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify special retrieval options. This value can be 0; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that represents a particular user. If this parameter is NULL, which is the most common usage, the function requests the known folder for the current user.                                Request a specific user's folder by passing the hToken of that user. This is typically done in the context of a service that has sufficient privileges to retrieve the token of a given user. That token must be opened with TOKEN_QUERY and TOKEN_IMPERSONATE rights. In some cases, you also need to include TOKEN_DUPLICATE. In addition to passing the user's hToken, the registry hive of that specific user must be mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszPath",
        "description": "Type: PWSTR* When this method returns, contains the address of a pointer to a null-terminated Unicode string that specifies the path of the known folder. The calling process is responsible for freeing this resource once it is no longer needed by calling CoTaskMemFree. The returned path does not include a trailing backslash. For example, \"C:\\Users\" is returned rather than \"C:\\Users\\\"."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the index of the overlay icon in the system image list.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the index of the overlay icon in the system image list if successful, or -1 otherwise. ",
    "remarks": "Icon overlays are part of the system image list. They have two identifiers. The first is a one-based overlay index that identifies the overlay relative to other overlays in the image list. The other is an image index that identifies the actual image. These two indexes are equivalent to the values that you assign to the iOverlay and iImage parameters, respectively, when you add an icon overlay to a private image list with ImageList_SetOverlayImage. SHGetIconOverlayIndex returns the overlay index. To convert an overlay index to its equivalent image index, call INDEXTOOVERLAYMASK. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHGetIconOverlayIndex",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszIconPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the fully qualified path of the file that contains the icon."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIconIndex",
        "description": "Type: int The icon's index in the file pointed to by pszIconPath. To request a standard overlay icon, set pszIconPath to NULL, and iIconIndex to one of the following:  IDO_SHGIOI_SHARE (0x0FFFFFFF)   The overlay icon that indicates a shared folder.  IDO_SHGIOI_LINK (0x0FFFFFFE)   The overlay icon that indicates a linked folder or file.  IDO_SHGIOI_SLOWFILE (0x0FFFFFFD)   The overlay icon that indicates a slow file.  IDO_SHGIOI_DEFAULT (0x0FFFFFFC)   Windows 7 and later. The overlay icon that indicates that the item is the default in a set. One example is the default printer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the pointer to an item identifier list (PIDL) of an object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetIDListFromObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown of the object from which to get the PIDL."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* When this function returns, contains a pointer to the PIDL of the given object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves an image list.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The IImageList pointer type, such as that returned in the ppv parameter, can be cast as an HIMAGELIST as needed; for example, for use in a list view. Conversely, an HIMAGELIST can be cast as a pointer to an IImageList. As of Windows Vista, SHIL_SMALL, SHIL_LARGE, and SHIL_EXTRALARGE scale with dots per inch (dpi) if the process is marked as dpi-aware. To set these types to be dpi-aware, call SetProcessDPIAware. SHIL_JUMBO is fixed at 256 pixels regardless of the dpi-aware setting. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetImageList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iImageList",
        "description": "Type: int The image type contained in the list. One of the following values:  SHIL_LARGE (0x0)   0x0. The image size is normally 32x32 pixels. However, if the Use large icons option is selected from the Effects section of the Appearance tab in Display Properties, the image is 48x48 pixels.  SHIL_SMALL (0x1)   0x1. These images are the Shell standard small icon size of 16x16, but the size can be customized by the user.  SHIL_EXTRALARGE (0x2)   0x2. These images are the Shell standard extra-large icon size. This is typically 48x48, but the size can be customized by the user.  SHIL_SYSSMALL (0x3)   0x3. These images are the size specified by GetSystemMetrics called with SM_CXSMICON and GetSystemMetrics called with SM_CYSMICON.  SHIL_JUMBO (0x4)   0x4. Windows Vista and later. The image is normally 256x256 pixels.  SHIL_LAST   The largest valid flag value, for validation purposes."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the image list interface identifier, normally IID_IImageList."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IImageList."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "There are a number of components, such as Shell extension handlers, that are implemented as DLLs and run in a host process such as Windows Explorer (Explorer.exe) or Internet Explorer (Iexplore.exe). Typically, when the user closes the host process, the component is shut down immediately as well. Such an abrupt termination can create problems for some components. For example, if a component is using a background thread to download data or run user-interface functions, it might need additional time to safely shut itself down. SHGetInstanceExplorer allows components that run in a host process to hold a reference on the host process. SHGetInstanceExplorer increments the host's reference count and returns a pointer to the host's IUnknown interface. By holding that reference, a component can prevent the host process from closing prematurely. After the component has completed its necessary processing, it should call (*ppunk)->Release to release the host's reference and allow the process to terminate. SHGetInstanceExplorer succeeds only if it is called from from an application which had previously called SHSetInstanceExplorer to set a process reference. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetInstanceExplorer",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IUnknown**",
        "name": "ppunk",
        "description": "Type: IUnknown** When this function returns successfully, contains the address of the host process' IUnknown interface pointer. This is a free-threaded interface used to prevent the host process from terminating. If the function call fails, this value is set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an IShellItem or related object based on an item specified by an IDataObject.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetItemFromDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject*",
        "name": "pdtobj",
        "description": "Type: IDataObject* A pointer to the source IDataObject instance."
      },
      {
        "in_out": "_In_",
        "type": "DATAOBJ_GET_ITEM_FLAGS",
        "name": "dwFlags",
        "description": "Type: DATAOBJ_GET_ITEM_FLAGS One or more values from the DATAOBJ_GET_ITEM_FLAGS enumeration to specify options regarding the target object. This value can be 0."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItem."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves an IShellItem for an object.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "From the standpoint of performance, this method is preferred to SHGetIDListFromObject in those cases where the IDList is already bound to a folder. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetItemFromObject",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown of the object."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired IID."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IShellItem or a related interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the path of a known folder as an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHGetFolderLocation. That older function is now simply a wrapper for SHGetKnownFolderIDList. Callers using this function must have at least User privileges. Some known folders, for example, the Documents folder, are per-user. Each user has a different path for the Documents folder. If hToken is NULL, the API tries to access the current user's instance of the folder. If hToken is a valid user token, the API tries to impersonate the user using this token, and attempts to access that user's instance of the folder. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID that identifies the folder. The folders associated with the known folder IDs might not exist on a particular system."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify special retrieval options. This value can be 0; otherwise, it is one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetKnownFolderIDList to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* When this method returns, contains a pointer to the PIDL of the folder. This parameter is passed uninitialized. The caller is responsible for freeing the returned PIDL when it is no longer needed by calling ILFree."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves an IShellItem object that represents a known folder.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "The caller of this function must have Administrator privileges. To call this function on public known folders, the caller must have Administrator privileges. For per-user known folders the caller only requires User privileges. Some of the known folders, for example, the Documents folder, are per-user. Every user has a different path for their Documents folder. If hToken is NULL, the API tries to access the calling application's instance of the folder, which is that of the current user. If hToken is a valid user token, the API tries to impersonate the user using this token and tries to access that user's instance. This function cannot be called on folders of type KF_CATEGORY_FIXED and KF_CATEGORY_VIRTUAL. To call this function on a folder of type KF_CATEGORY_COMMON, the calling application must be running with elevated privileges. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetKnownFolderItem",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A reference to the KNOWNFOLDERID, a GUID that identifies the folder that contains the item."
      },
      {
        "in_out": "_In_",
        "type": "KNOWN_FOLDER_FLAG",
        "name": "dwFlags",
        "description": "Type: KNOWN_FOLDER_FLAG Flags that specify special options used in the retrieval of the known folder IShellItem. This value can be KF_FLAG_DEFAULT; otherwise, one or more of the KNOWN_FOLDER_FLAG values."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents.  The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHSetKnownFolderPath to set folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface that represents the item, usually IID_IShellItem or IID_IShellItem2."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the file."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszResModule",
        "description": "Type: PWSTR When this function returns, contains a pointer to a string resource that specifies the localized version of the file name."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cch",
        "description": "Type: UINT When this function returns, contains the size of the string, in WCHARs, at pszResModule."
      },
      {
        "in_out": "_Out_",
        "type": "int*",
        "name": "pidsRes",
        "description": "Type: int* When this function returns, contains a pointer to the ID of the localized file name in the resource file."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the display name of an item identified by its IDList.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is the responsibility of the caller to free the string pointed to by ppszName when it is no longer needed. Call CoTaskMemFree on *ppszName to free the memory. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetNameFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL that identifies the item."
      },
      {
        "in_out": "_In_",
        "type": "SIGDN",
        "name": "sigdnName",
        "description": "Type: SIGDN A value from the SIGDN enumeration that specifies the type of display name to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszName",
        "description": "Type: PWSTR* A value that, when this function returns successfully, receives the address of a pointer to the retrieved display name."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the property's canonical name given its PROPERTYKEY.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetNameFromPropertyKey",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPERTYKEY",
        "name": "propkey",
        "description": "Type: REFPROPERTYKEY A pointer to a PROPERTYKEY structure containing the property's identifiers."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszCanonicalName",
        "description": "Type: PWSTR* The address of a pointer to a buffer that receives the property name as a null-terminated Unicode string. It is the responsibility of the caller to release this string through a call to CoTaskMemFree once it is no longer needed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "SHGetNewLinkInfo determines whether the destination file system supports long file names. If it does, a long file name is used for the shortcut name. If the destination file system does not support long file names, the shortcut name is returned in an 8.3 format. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetNewLinkInfo",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszLinkTo",
        "description": "Type: LPCTSTR A pointer to the path and file name of the shortcut's target. If uFlags does not contain the SHGNLI_PIDL value, this parameter is the address of a null-terminated string that contains the target. If uFlags contains the SHGNLI_PIDL value, this parameter is a PIDL that represents the target."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszDir",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the path of the folder in which the shortcut would be created."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszName",
        "description": "Type: LPTSTR A pointer to a string that receives the null-terminated path and file name for the shortcut. This buffer is assumed to be at least MAX_PATH characters in size."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfMustCopy",
        "description": "Type: BOOL* The address of a BOOL value that receives a flag indicating whether the shortcut would be copied. When a shortcut to another shortcut is created, the Shell simply copies the target shortcut and modifies that copied shortcut appropriately. This parameter receives a nonzero value if the target specified in pszLinkTo specifies a shortcut that will cause the target shortcut to be copied. This parameter receives zero if the target does not specify a shortcut that would be copied."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The options for the function. This can be zero or a combination of the following values.  SHGNLI_PIDL (0x000000001)   0x000000001. The target pointed to by pszLinkTo is a PIDL that represents the target. If this flag is not included, pszLinkTo is regarded as the address of a string that contains the path and file name of the target.  SHGNLI_NOUNIQUE (0x000000002)   0x000000002. Skip the normal checks that ensure that the shortcut name is unique within the destination folder. If this flag is not included, the function creates the shortcut name and then determines whether the name is unique in the destination folder. If a file with the same name already exists in the destination folder, the shortcut name will be modified. This process is repeated until a unique name is found.  SHGNLI_PREFIXNAME (0x000000004)   0x000000004. The created name will be preceded by the string \"Shortcut to \".  SHGNLI_NOLNK (0x000000008)   0x000000008. Version 5.0 Do not add the .lnk file name extension. You must set the _WIN32_IE macro to 5.01 or greater to use this flag. For more information about versioning, see Shell and Common Controls Versions.  SHGNLI_NOLOCNAME (0x000000010)   0x000000010. Windows Vista and later. Use the non-localized parsing name of the target pointed to by pszLinkTo as the name of the shortcut file. If this flag is not set, the localized name is used.  SHGNLI_USEURLEXT (0x000000020)   0x000000020. Windows 7 and later. Append a .url file name extension (rather than .lnk) to the name pointed to by pszName. If this flag is not set, the shortcut name uses a .lnk extension unless SHGNLI_NOLNK is set."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP, Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts an item identifier list to a file system path.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "If the location specified by the pidl parameter is not part of the file system, this function will fail. If the pidl parameter specifies a shortcut, the pszPath will contain the path to the shortcut, not to the shortcut's target. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetPathFromIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE The address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop)."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR The address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts an item identifier list to a file system path. This function extends SHGetPathFromIDList by allowing you to set the initial size of the string buffer and declare the options below.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "Except for UNC printer names, if the location specified by the pidl parameter is not part of the file system, this function fails. If the pidl parameter specifies a shortcut, the pszPath contains the path to the shortcut, not to the shortcut's target. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetPathFromIDListEx",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop)."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "Type: PWSTR When this function is called it is passed a null-terminated, Unicode buffer to receive the file system path. This buffer is of size cchPath.                                                    When this function returns, contains the address of a null-terminated, Unicode buffer that contains the file system path. This buffer is of size cchPath."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cchPath",
        "description": "Type: DWORD The size of the buffer pointed to by pszPath, in characters."
      },
      {
        "in_out": "",
        "type": "GPFIDL_FLAGS",
        "name": "uOpts",
        "description": "Type: GPFIDL_FLAGS These flags determine the type of path returned.  GPFIDL_DEFAULT (0x0000)   Win32 file names, servers, and root drives are included.  GPFIDL_ALTNAME (0x0001)   Uses short file names.  GPFIDL_UNCPRINTER (0x0002)   Include UNC printer names items."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the current Shell option settings.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHGetSettings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPSHELLFLAGSTATE",
        "name": "lpsfs",
        "description": "Type: LPSHELLFLAGSTATE The address of a SHELLFLAGSTATE structure that receives the Shell option settings."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMask",
        "description": "Type: DWORD A set of flags that determine which members of lpsfs are being requested. This can be one or more of the following values.  SSF_DESKTOPHTML   The fDesktopHTML member is being requested.  SSF_DONTPRETTYPATH   The fDontPrettyPath member is being requested.  SSF_DOUBLECLICKINWEBVIEW   The fDoubleClickInWebView member is being requested.  SSF_HIDEICONS   The fHideIcons member is being requested.  SSF_MAPNETDRVBUTTON   The  \t\t\t\t\t\tfMapNetDrvBtn member is being requested.  SSF_NOCONFIRMRECYCLE   The  \t\t\t\t\t\tfNoConfirmRecycle member is being requested.  SSF_SHOWALLOBJECTS   The  \t\t\t\t\t\tfShowAllObjects member is being requested.  SSF_SHOWATTRIBCOL   The  \t\t\t\t\t\tfShowAttribCol member is being requested.  Windows Vista: Not used.   SSF_SHOWCOMPCOLOR   The  \t\t\t\t\t\tfShowCompColor member is being requested.  SSF_SHOWEXTENSIONS   The  \t\t\t\t\t\tfShowExtensions member is being requested.  SSF_SHOWINFOTIP   The  \t\t\t\t\t\tfShowInfoTip member is being requested.  SSF_SHOWSYSFILES   The  \t\t\t\t\t\tfShowSysFiles member is being requested.  SSF_WIN95CLASSIC   The  \t\t\t\t\t\tfWin95Classic member is being requested."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about system-defined Shell icons.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If this function returns an icon handle in the hIcon member of the SHSTOCKICONINFO  structure pointed to by psii, you are responsible for freeing the icon with DestroyIcon when you no longer need it. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetStockIconInfo",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "SHSTOCKICONID",
        "name": "siid",
        "description": "Type: SHSTOCKICONID One of the values from the SHSTOCKICONID enumeration that specifies which icon should be retrieved."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A combination of zero or more of the following flags that specify which information is requested.  SHGSI_ICONLOCATION   The szPath and iIcon members of the SHSTOCKICONINFO structure receive the path and icon index of the requested icon, in a format suitable for passing to the ExtractIcon function. The numerical value of this flag is zero, so you always get the icon location regardless of other flags.  SHGSI_ICON   The hIcon member of the SHSTOCKICONINFO structure receives a handle to the specified icon.  SHGSI_SYSICONINDEX   The iSysImageImage member of the SHSTOCKICONINFO structure receives the index of the specified icon in the system imagelist.  SHGSI_LINKOVERLAY   Modifies the SHGSI_ICON value by causing the function to add the link overlay to the file's icon.  SHGSI_SELECTED   Modifies the SHGSI_ICON value by causing the function to blend the icon with the system highlight color.  SHGSI_LARGEICON   Modifies the SHGSI_ICON value by causing the function to retrieve the large version of the icon, as specified by the SM_CXICON and SM_CYICON system metrics.  SHGSI_SMALLICON   Modifies the SHGSI_ICON value by causing the function to retrieve the small version of the icon, as specified by the SM_CXSMICON and SM_CYSMICON system metrics.  SHGSI_SHELLICONSIZE   Modifies the SHGSI_LARGEICON or SHGSI_SMALLICON values by causing the function to retrieve the Shell-sized icons rather than the sizes specified by the system metrics."
      },
      {
        "in_out": "_Inout_",
        "type": "SHSTOCKICONINFO*",
        "name": "psii",
        "description": "Type: SHSTOCKICONINFO* A pointer to a SHSTOCKICONINFO structure. When this function is called, the cbSize member of this structure needs to be set to the size of the SHSTOCKICONINFO structure. When this function returns, contains a pointer to a SHSTOCKICONINFO structure that contains the requested information."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for the lifetime of the IShellItem object, rather than being persisted back into the item.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetTemporaryPropertyForItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psi",
        "description": "Type: IShellItem* A pointer to the item for which the temporary property is to be retrieved."
      },
      {
        "in_out": "",
        "type": "REFPROPERTYKEY",
        "name": "pk",
        "description": "Type: REFPROPERTYKEY The property key."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvarInk",
        "description": "Type: PROPVARIANT* A pointer to the temporary property for the item."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Retrieves a specified user's unread message count for any or all email accounts.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetUnreadMailCount",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "hKeyUser",
        "description": "Type: HKEY A valid HKEY for a given user. This parameter should be NULL if the function is called in a user's environment, in which case HKEY_CURRENT_USER is used. This parameter should be NULL if the function is called from the SYSTEM context, in which case HKEY_USERS\\{SID} is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that specifies the email address of an account belonging to the specified user. When this parameter is NULL, pdwCount returns the total count of unread messages for all accounts owned by the designated user."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwCount",
        "description": "Type: DWORD* Pointer to a DWORD value which receives the unread message count."
      },
      {
        "in_out": "_Out_opt_",
        "type": "FILETIME*",
        "name": "pFileTime",
        "description": "Type: FILETIME* A pointer to a FILETIME structure.  The use of this parameter is determined by whether pszMailAddress is NULL. If pszMailAddress is NULL, then this parameter is treated as an [in] parameter, which specifies a filter, so that only unread mail newer than the specified time appears. If pszMailAddress is not NULL, then this parameter is treated as an [out] parameter, which points to a FILETIME structure into which the function places the timestamp of the last SHSetUnreadMailCount call for the specified user and email account."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPCTSTR",
        "name": "pszShellExecuteCommand",
        "description": "Type: LPCTSTR A pointer to a string that returns the ShellExecute command statement passed into the last SHSetUnreadMailCount call for the specified user and email account. This command string starts the email application that owns the account referenced by pszMailAddress. If the ShellExecute command is not required, this parameter can be NULL. If pszMailAddress is NULL, this parameter is ignored and must be NULL."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchShellExecuteCommand",
        "description": "Type: int The maximum size, in characters, of the ShellExecute command buffer pointed to by pszShellExecuteCommand. This parameter must be zero for total counts when pszMailAddress is NULL. It can also be NULL whenever the ShellExecute command string is not required."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "If pszPath is a directory, SHIsFileAvailableOffline will not return the OFFLINE_STATUS_INCOMPLETE flag. If SHIsFileAvailableOffline returns both OFFLINE_STATUS_LOCAL and OFFLINE_STATUS_REMOTE, the file or directory is open in both places.  This is common when the server is online. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHIsFileAvailableOffline",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string value that specifies the full path to a network file or directory. This path does not need to be in UNC form. If pszPath is not a network path, the function returns E_INVALIDARG."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "pdwStatus",
        "description": "Type: LPDWORD A pointer to a variable of type DWORD that receives one or more of the following flags if the function succeeds.  OFFLINE_STATUS_LOCAL (0x01)   If the file is open, it is open in the cache.  OFFLINE_STATUS_REMOTE (0x02)   If the file is open, it is open on the server.  OFFLINE_STATUS_INCOMPLETE (0x04)   The local copy is currently incomplete. The file cannot be opened in offline mode until it has been synchronized."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an instance of the specified object class from within the context of the Shell's process.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise. In Windows Vista and later versions, always returns E_NOTIMPL. ",
    "remarks": "This function creates the requested object instance by calling the CoCreateInstance function and immediately releasing the returned object. The associated DLL is unloaded according to standard Component Object Model (COM) rules when it returns S_OK from its DllCanUnloadNow function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLoadInProc",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFCLSID",
        "name": "rclsid",
        "description": "Type: REFCLSID The CLSID of the object class to be created."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT Always returns S_OK. ",
    "remarks": "A call to SHLoadNonloadedIconOverlayIdentifiers does not result in the immediate loading of a Shell extension, nor does it cause an icon overlay handler to be loaded. A call to SHLoadNonloadedIconOverlayIdentifiers results in a situation such that the next code to ask for icon overlay information triggers a comparison of icon overlays in the registry to those that are already loaded. If an icon overlay is newly registered and the system has not already reached its upper limit of fifteen icon overlays, the new overlay is loaded. SHLoadNonloadedIconOverlayIdentifiers alone does not load a new icon overlay; you also need to trigger an action that uses the overlay, such as a refresh of a Windows Explorer view. For more information, see How to Implement Icon Overlay Handlers. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLoadNonloadedIconOverlayIdentifiers",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Makes a copy of a string in newly allocated memory.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLocalStrDup",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "psz",
        "description": "Type: PCTSTR A pointer to a null-terminated, Unicode string to be copied."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTSTR*",
        "name": "ppsz",
        "description": "Type: PTSTR* The address of a pointer to an allocated string that, when this function returns successfully, receives the result. SHLocalStrDup allocates memory for this string with LocalAlloc. You should free the string with LocalFree when it is no longer needed."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays a merged property sheet for a set of files. Property values common to all the files are shown while those that differ display the string (multiple values).",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHMultiFileProperties",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDataObject*",
        "name": "pdtobj",
        "description": "Type: IDataObject* A pointer to a data object that supplies the PIDLs of all of the files for which to display the merged property sheet. The data object must use the CFSTR_SHELLIDLIST clipboard format. The parent folder's implementation of IShellFolder::GetDisplayNameOf must return a fully qualified file system path for each item in response to the SHGDN_FORPARSING flag."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Must be set to 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Opens a Windows Explorer window with specified items in a particular folder selected.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "CoInitialize or CoInitializeEx must be called before using SHOpenFolderAndSelectItems. Not doing so causes SHOpenFolderAndSelectItems to fail. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHOpenFolderAndSelectItems",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE A pointer to a fully qualified item ID list that specifies the folder."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT A count of items in the selection array, apidl. If cidl is zero, then pidlFolder must point to a fully specified ITEMIDLIST describing a single item to select. This function opens the parent folder and selects that item."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD_ARRAY",
        "name": "apidl",
        "description": "Type: PCUITEMID_CHILD_ARRAY A pointer to an array of PIDL structures, each of which is an item to select in the target folder referenced by pidlFolder."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The optional flags. Under Windows XP this parameter is ignored. In Windows Vista, the following flags are defined.  OFASI_EDIT (0x0001)   Select an item and put its name in edit mode. This flag can only be used when a single item is being selected. For multiple item selections, it is ignored.  OFASI_OPENDESKTOP (0x0002)   Select the item or items on the desktop rather than in a Windows Explorer window. Note that if the desktop is obscured behind open windows, it will not be made visible."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays the Open With dialog box.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Starting in Windows 10, the OAIF_ALLOW_REGISTRATION, OAIF_FORCE_REGISTRATION, and OAIF_HIDE_REGISTRATION flags will be ignored by SHOpenWithDialog. The Open With dialog box can no longer be used to change the default program used to open a file extension. You can only use SHOpenWithDialog to open a single file. If SHOpenWithDialog is called without passing OAIF_EXEC, the user will receive a dialog that informs them that they can change the default programs used to open file extensions in their Settings. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHOpenWithDialog",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND The handle of the parent window. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "const OPENASINFO*",
        "name": "poainfo",
        "description": "Type: const OPENASINFO* A pointer to an OPENASINFO structure, which specifies the contents of the resulting dialog."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Displays the Folder Sharing tab on the properties sheet for the specified folder.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: HRESULT This function always returns S_OK. ",
    "remarks": "This function has no associated .lib file. You must use LoadLibrary and GetProcAddress to use it. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ShowShareFolderUI",
    "is_callback": 0,
    "dll": "Ntshrui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window for the property sheet."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszPath",
        "description": "Type: LPCWSTR A pointer to a string that specifies the path to the folder that displays its Folder Sharing tab."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a pointer to an item identifier list (PIDL).",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "You should call this function from a background thread. Failure to do so could cause the UI to stop responding. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHParseDisplayName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszName",
        "description": "Type: LPCWSTR A pointer to a zero-terminated wide string that contains the display name to parse."
      },
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx*",
        "name": "pbc",
        "description": "Type: IBindCtx* A bind context that controls the parsing operation. This parameter is normally set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* The address of a pointer to a variable of type ITEMIDLIST that receives the item identifier list for the object. If an error occurs, then this parameter is set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "SFGAOF",
        "name": "sfgaoIn",
        "description": "Type: SFGAOF A ULONG value that specifies the attributes to query. To query for one or more attributes, initialize this parameter with the flags that represent the attributes of interest. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf."
      },
      {
        "in_out": "_Out_opt_",
        "type": "SFGAOF*",
        "name": "psfgaoOut",
        "description": "Type: SFGAOF* A pointer to a ULONG. On return, those attributes that are true for the object and were requested in sfgaoIn are set. An object's attribute flags can be zero or a combination of SFGAO flags. For a list of available SFGAO flags, see IShellFolder::GetAttributesOf."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if the path is available, or an error code otherwise. Note that a return value of S_OK does not mean that the medium is writable; it simply means that the path is available. ",
    "remarks": "The primary use of this function is for a program to check a path before using it and display the necessary user interface to prompt the user. For example, if the disk in drive A: were missing, a window that prompts the user to insert the disk would appear. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHPathPrepareForWrite",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a window that specifies the parent window to be used for any user interface windows that must be created. If set to NULL, user interface windows are not created."
      },
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punkEnableModless",
        "description": "Type: IUnknown* A pointer to an IUnknown interface that specifies the IOleInPlaceActiveObject object that implements the EnableModeless method."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that specifies the path to be verified as valid for writing. This can be a UNC or file drive path."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that determine behavior options. This parameter can be a combination of the following values.  SHPPFW_NONE   Do not create new directories.  SHPPFW_DEFAULT   Default. Do not prompt the user if a directory needs to be created. This is identical to SHPPFW_DIRCREATE. Do not pass with SHPPFW_ASKDIRCREATE.  SHPPFW_DIRCREATE   Create directories without prompting the user. Do not pass with SHPPFW_ASKDIRCREATE.  SHPPFW_ASKDIRCREATE   Prompt the user before creating directories. Do not pass with SHPPFW_DIRCREATE.  SHPPFW_IGNOREFILENAME   Last item in pszPath is a file name, so ignore. For example, if pszPath=\"C:\\MyDir\\MyFile.doc\", only use \"C:\\MyDir\". If pszPath=\"C:\\MyFirDir\\MySecDir\", only use \"C:\\MyFirDir\".  SHPPFW_NOWRITECHECK   Not currently implemented.  SHPPFW_MEDIACHECKONLY   Windows XP or later. Suppresses the \"not accessible\" error message box, which displays when a failure other than a user cancellation occurs, and hwnd is not NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "With Windows 2000, if NULL is passed in the pszRootPath parameter, the function fails and returns an E_INVALIDARG error code. In earlier versions of the operating system, you can pass an empty string or NULL. If pszRootPath contains an empty string or NULL, information is retrieved for all Recycle Bins on all drives. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHQueryRecycleBin",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszRootPath",
        "description": "Type: LPCTSTR The address of a null-terminated string of maximum length MAX_PATH to contain the path of the root drive on which the Recycle Bin is located. This parameter can contain the address of a string formatted with the drive, folder, and subfolder names (C:\\Windows\\System...)."
      },
      {
        "in_out": "_Inout_",
        "type": "LPSHQUERYRBINFO",
        "name": "pSHQueryRBInfo",
        "description": "Type: LPSHQUERYRBINFO The address of a SHQUERYRBINFO structure that receives the Recycle Bin information. The cbSize member of the structure must be set to the size of the structure before calling this API."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Checks the state of the computer for the current user to determine whether sending a notification is appropriate.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Applications should call SHQueryUserNotificationState and test the return value before displaying any notification UI that is similar to the balloon notifications generated by Shell_NotifyIcon. Notifications should only be displayed if this API returns QNS_ACCEPTS_NOTIFICATIONS. This informs the application whether the user is running processes that should not be interrupted. Top-level windows receive a WM_SETTINGCHANGE message when the user turns presentation settings on or off, and also when the user's session is locked or unlocked. Note that there are no notifications sent when the user starts or stops a full-screen application. If this function returns QUNS_QUIET_TIME, notifications should be displayed only if critical. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHQueryUserNotificationState",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "QUERY_USER_NOTIFICATION_STATE*",
        "name": "pquns",
        "description": "Type: QUERY_USER_NOTIFICATION_STATE* When this function returns, contains a pointer to one of the values of the QUERY_USER_NOTIFICATION_STATE enumeration."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "When a display name string is set by SHSetLocalizedName, Windows Explorer uses that string for display instead of the file name. The path to the file is unchanged. Applications can use the IShellFolder::GetDisplayNameOf method to get the display (localized) name through with the SIGDN_NORMALDISPLAY flag and the parsing (non-localized) name with SIGDN_DESKTOPABSOLUTEPARSING. Calling SHRemoveLocalizedName makes the display name identical to the parsing name. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHRemoveLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string that specifies the fully qualified path of the target file."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Opens a Control Panel item.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the Control Panel item was opened successfully; otherwise, FALSE. As of Windows Vista, this function always returns FALSE. ",
    "remarks": "If the specified Control Panel item is already running, SHRunControlPanel attempts to switch to that instance rather than opening a new instance. Example calls to SHRunControlPanel are shown here. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHRunControlPanel",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "lpcszCmdLine",
        "description": "Type: PCWSTR Pointer to a string that contains the command line that opens the Control Panel item. This command line includes at least the name of the .cpl file. It can also contain any other necessary information such as the property sheet page within the item (either by ordinal or by name). For more information, see Executing Control Panel Items."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndMsgParent",
        "description": "Type: HWND The handle of the parent window, used to display error messages about the opening of the item. This value can be NULL."
      }
    ],
    "min_client": "Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Applies the default set of properties on a Shell item.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The list of properties to set a default value comes from the SetDefaultsFor registry entry under the ProgID for the file association of the item. The list is prefixed by \"prop:\" and contains the canonical names of the properties to set the default value, for example, \"prop:System.Author;System.Document.DateCreated\". The possible properties for this list are System.Author, System.Document.DateCreated, and System.Photo.DateTaken. If the SetDefaultsFor entry does not exist on the ProgID, this function uses the default found on the SetDefaultsFor entry of HKEY_CLASSES_ROOT\\*. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetDefaultProperties",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the item's parent window, which receives error notifications. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psi",
        "description": "Type: IShellItem* A pointer to the IShellItem object that represents the item."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFileOpFlags",
        "description": "Type: DWORD Flags that customize the operation. See IFileOperation::SetOperationFlags for flag values."
      },
      {
        "in_out": "_In_opt_",
        "type": "IFileOperationProgressSink*",
        "name": "pfops",
        "description": "Type: IFileOperationProgressSink* A pointer to an IFileOperationProgressSink object used to follow the progress of the operation. See IFileOperation::Advise for details. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Windows Explorer and Internet Explorer can use SHSetInstanceExplorer to allow components such as Shell extensions to extend the lifetime of the process. Other applications can also use SHSetInstanceExplorer to allow for the same capability. For instance, the browser message loop and the proxy desktop use SHSetInstanceExplorer to let other threads extend their lifetime. Applications other than Windows Explorer and Internet Explorer that call this function might encounter compatibility problems because some components use SHGetInstanceExplorer to detect whether they are being hosted from within Windows Explorer or Internet Explorer. The interface pointer passed to SHSetInstanceExplorer must reference a free-threaded object. Each time a component calls SHGetInstanceExplorer, the system calls the AddRef method before returning the interface pointer to the calling component. The component then calls the IUnknown::Release method when processing is complete. The process that calls SHSetInstanceExplorer must not terminate while the reference count of the provided interface pointer is nonzero. For further information on how components use the process references, see SHGetInstanceExplorer. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHSetInstanceExplorer",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host process from terminating. This value can be NULL, in which case the process reference is no longer made available to components."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Redirects a known folder to a new location.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This function replaces SHSetFolderPath. That older function is now simply a wrapper for SHSetKnownFolderPath. The caller of this function must have Administrator privileges. To call this function on public known folders, the caller must have Administrator privileges. For per-user known folders the caller only requires User privileges. Some of the known folders, for example, the Documents folder, are per-user. Every user has a different path for their Documents folder. If hToken is NULL, the API tries to access the calling application's instance of the folder, which is that of the current user. If hToken is a valid user token, the API tries to impersonate the user using this token and tries to access that user's instance. This function cannot be called on folders of type KF_CATEGORY_FIXED and KF_CATEGORY_VIRTUAL. To call this function on a folder of type KF_CATEGORY_COMMON, the calling application must be running with elevated privileges. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetKnownFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0.6000 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFKNOWNFOLDERID",
        "name": "rfid",
        "description": "Type: REFKNOWNFOLDERID A GUID that identifies the known folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Either 0 or the following value.  KF_FLAG_DONT_UNEXPAND   If this flag is set, portions of the path referenced by pszPath may be represented by environment strings such as %USERPROFILE%."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. \t\t\t             \t\t The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHSetKnownFolderPath to set folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as Documents and Desktop. Any items added to the Default User folder also appear in any new user account. Note that access to the Default User folders requires administrator privileges."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to the folder's new path. This is a null-terminated Unicode string of length MAX_PATH. This path cannot be of zero length."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the localized name of a file in a Shell folder.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "When this string is set, Explorer displays this string instead of the file name. The path to the file is unchanged. Applications can get the display (localized) name with IShellFolder::GetDisplayNameOf with the SIGDN_NORMALDISPLAY flag and the parsing (non-localized) name with IShellItem::GetDisplayName using the SIGDN_DESKTOPABSOLUTEPARSING flag. Calling SHRemoveLocalizedName makes the display name identical to the parsing name. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetLocalizedName",
    "is_callback": 0,
    "dll": "Shell32.dll;  Shell32.dll (version 5.6 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a string that specifies the fully qualified path of the target file."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszResModule",
        "description": "Type: PCWSTR A pointer to a string resource that specifies the localized version of the file name."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "idsRes",
        "description": "Type: int An integer ID that specifies the localized file name in the string resource."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only for the lifetime of the IShellItem object, instead of writing them back into the item.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "A temporary value can only be read with SHGetTemporaryPropertyForItem or by passing GPS_TEMPORARY to IShellItem2::GetPropertyStore. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetTemporaryPropertyForItem",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellItem*",
        "name": "psi",
        "description": "Type: IShellItem* A pointer to the item on which the temporary property is to be set."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPERTYKEY",
        "name": "propkey",
        "description": "Type: REFPROPERTYKEY Reference to the PROPERTYKEY that identifies the temporary property that is being set."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a PROPVARIANT that contains the value of the temporary property."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Stores the current user's unread message count for a specified email account in the registry.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HRESULT HRESULT, which includes the following possible values.  ",
    "remarks": "When this function updates the registry, the new registry entry is automatically stamped with the current time and date. If this function is called by different independent software vendors (ISVs) that specify the same email name, only the last call is saved. That is, calls to this function overwrite any previously saved value for the same email address, even if the calls are made by different ISVs. It is recommended that the count of unread messages be set only for the main Inbox of the users account. Mail in sub-folders such as Drafts or Deleted Items should be ignored. It is important that email clients do not set the number of unread messages to 0 when the application exits, because this causes the number of unread messages to be erroneously reported as 0. Because this function uses HKEY_CURRENT_USER, it should not be called by a system process impersonating a user. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetUnreadMailCount",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.60 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMailAddress",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that contains the current user's full email address."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCount",
        "description": "Type: DWORD The number of unread messages."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszShellExecuteCommand",
        "description": "Type: LPCTSTR A pointer to a string in Unicode that contains the full text of a command that can be passed to ShellExecute. This command should start the email application that owns the account referenced by pszMailAddress."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE on success, FALSE on failure. ",
    "remarks": "This function wraps CheckTokenMembership and only checks local groups. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHTestTokenMembership",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE A handle to the token. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "ulRID",
        "description": "Type: ULONG The RID of the local group for which membership is tested."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CheckTokenMembership function determines whether a specified security identifier (SID) is enabled in an access token. If you want to determine group membership for app container tokens, you need to use the CheckTokenMembershipEx function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The CheckTokenMembership function simplifies the process of determining whether a SID is both present and enabled in an access token. Even if a SID is present in the token, the system may not use the SID in an access check. The SID may be disabled or have the SE_GROUP_USE_FOR_DENY_ONLY attribute. The system uses only enabled SIDs to grant access when performing an access check. For more information, see  SID Attributes in an Access Token. If TokenHandle is a restricted token, or if TokenHandle is NULL and the current effective token of the calling thread is a restricted token, CheckTokenMembership also checks whether the SID is present in the list of restricting SIDs. The following example shows checking a token for membership in the Administrators local group. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "CheckTokenMembership",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token.     If TokenHandle is NULL, CheckTokenMembership uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's primary token to create an impersonation token."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "SidToCheck",
        "description": "A pointer to a  SID structure. The CheckTokenMembership function checks for the presence of this SID in the user and group SIDs of the access token."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOL",
        "name": "IsMember",
        "description": "A pointer to a variable that receives the results of the check. If the SID is present and has the SE_GROUP_ENABLED attribute, IsMember returns TRUE; otherwise, it returns FALSE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Notifies the Shell that an image in the system image list has changed.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "No return value. ",
    "remarks": "If you do not know the index in the system image list of the icon that you want to update, use SHGetFileInfo with the uFlags parameter set to SHGFI_SYSICONINDEX. You must use IExtractIcon::GetIconLocation with the parameters of the old icon that needs to be updated, not those of the new icon you want to replace it with. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHUpdateImage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.7 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszHashItem",
        "description": "Type: LPCTSTR A pointer to a string value that specifies the fully qualified path of the file that contains the icon. Use the path that is returned in the buffer pointed to by the szIconFile parameter of IExtractIcon::GetIconLocation."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iIndex",
        "description": "Type: int An integer that specifies the zero-based index of the icon in the file specified by pszHashItem. Use the value that is pointed to by the piIndex parameter of IExtractIcon::GetIconLocation."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT An unsigned integer that specifies the flags that determine the icon attributes. Set uFlags to the value that is pointed to by the pwFlags parameter of IExtractIcon::GetIconLocation. The flags that are relevant to SHUpdateImage are GIL_NOTFILENAME and GIL_SIMULATEDOC."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iImageIndex",
        "description": "Type: int An integer that specifies the index in the system image list of the icon that is being updated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Displays a standard message box that can be used to notify a user that an application has been updated.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: DWORD Returns one of the following values.  ",
    "remarks": "The preferred way to handle updates is to author a Channel Definition Format (CDF) with an Open Software Description (OSD) vocabulary and make the shortcut OSD-aware. Refer to the Channel Definition Format documentation for details. The SoftwareUpdateMessageBox function is intended to be used in the case where Shell shortcut hooks do not work. One example is an application that was not installed on the start menu. If that application needs to do its own software update check, it should use this function. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "SoftwareUpdateMessageBox",
    "is_callback": 0,
    "dll": "Shdocvw.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDistUnit",
        "description": "Type: PCWSTR The string value containing the identifier for the code distribution unit. For ActiveX controls, pszDistUnit is typically a GUID."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Must be set to zero."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPSOFTDISTINFO",
        "name": "psdi",
        "description": "Type: LPSOFTDISTINFO A pointer to a SOFTDISTINFO structure that, when this method returns successfully, receives the update information. The cbSize member must be initialized to the sizeof(SOFTDISTINFO)."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a unique name for a stream or storage object from a template.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "It is recommended that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StgMakeUniqueName",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStorage*",
        "name": "pstgParent",
        "description": "Type: IStorage* A pointer to an IStorage object."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszFileSpec",
        "description": "Type: PCWSTR The format or template for the name of the stream or storage object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD The access mode to use when opening the stream or storage object. For more information and descriptions of the possible values, see STGM Constants."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv, typically IID_IStorage or IID_IStream."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns, contains the interface pointer requested in riid. This is typically IStorage or IStream."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Finds the first occurrence of a substring within a string. The comparison is case-insensitive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrStrNIW",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszFirst",
        "description": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrch",
        "description": "Type: PCWSTR A pointer to the null-terminated, Unicode substring that is being searched for."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters from the beginning of the searched string in which to search for the substring."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Finds the first occurrence of a substring within a string. The comparison is case-sensitive.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrStrNW",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszFirst",
        "description": "Type: PWSTR A pointer to the null-terminated, Unicode string that is being searched."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrch",
        "description": "Type: PCWSTR A pointer to the null-terminated, Unicode substring that is being searched for."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters from the beginning of the searched string in which to search for the substring."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Applies common translations to a given URL string, creating a new URL string.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT Returns S_OK upon success, or S_FALSE if the URL did not require translation. If an error occurs, the function returns one of the following values.  ",
    "remarks": "This function does not validate the input URL string. A successful return value does not indicate that the URL strings are valid URLs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "TranslateURL",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pcszURL",
        "description": "Type: PCTSTR The address of the URL string to be translated."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD The bit flags that specify how the URL string is to be translated. This value can be a combination of the following:  TRANSLATEURL_FL_GUESS_PROTOCOL   If the protocol scheme is not specified in the pcszURL parameter to TranslateURL, the system automatically chooses a scheme and adds it to the URL.  TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL   If the protocol scheme is not specified in the pcszURL parameter to          \t\t\t\t\t\tTranslateURL, the system adds the default protocol to the URL."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR*",
        "name": "ppszTranslatedURL",
        "description": "Type: PTSTR* A pointer variable that receives the pointer to the newly created, translated URL string, if any. The ppszTranslatedURL parameter is valid only if the function returns S_OK."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Unloads a user's profile that was loaded by the LoadUserProfile function. The caller must have administrative privileges on the computer. For more information, see the Remarks section of the LoadUserProfile function.",
    "library": "Userenv.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Userenv.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "Before calling UnloadUserProfile you should ensure that all handles to keys that you have opened in the user's registry hive are closed. If you do not close all open registry handles, the user's profile fails to unload. For more information, see  Registry Key Security and Access Rights and Registry Hives. For more information about calling functions that require administrator privileges, see Running with Special Privileges. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UnloadUserProfile",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE Token for the user, returned from the LogonUser, CreateRestrictedToken, DuplicateToken, OpenProcessToken, or OpenThreadToken function. The token must have TOKEN_IMPERSONATE and TOKEN_DUPLICATE access. For more information, see Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProfile",
        "description": "Type: HANDLE Handle to the registry key. This value is the hProfile member of the PROFILEINFO structure. For more information see the Remarks section of LoadUserProfile and Registry Key Security and Access Rights."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Cancels a change notification registered through RegisterAppStateChangeNotification.",
    "library": "Appnotify.lib",
    "min_server": "",
    "header": "Appnotify.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void NTAPI",
    "category": "Windows Shell",
    "name": "UnregisterAppStateChangeNotification",
    "is_callback": 0,
    "dll": "Twinapi.core.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PAPPSTATE_REGISTRATION",
        "name": "Registration",
        "description": "A pointer to the registration handle retrieved by RegisterAppStateChangeNotification through its Registration parameter."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 6,
    "description": "Invokes the unregistered URL protocol dialog box. This dialog box allows the user to select an application to associate with a previously unknown protocol.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Intshcut.h",
    "return_value": "Type: HRESULT In supported systems, returns S_OK if the application is registered with the URL protocol, or S_FALSE if nothing is registered. For example, the function returns S_FALSE when the user elects to perform a one-time execution via the selected application. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "URLAssociationDialog",
    "is_callback": 0,
    "dll": "Url.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwInFlags",
        "description": "Type: DWORD The bit flags that specify the behavior of the function. This value can be a combination of the following:  URLASSOCDLG_FL_USE_DEFAULT_NAME   Use the default file name (that is, \"Internet Shortcut\").  URLASSOCDLG_FL_REGISTER_ASSOC   Register the selected application as the handler for the protocol specified in pcszURL. The application is registered only if this flag is set and the user indicates that a persistent association is desired."
      },
      {
        "in_out": "",
        "type": "PTCSTR",
        "name": "pcszFile",
        "description": "Type: PTCSTR The address of a constant zero-terminated string that contains the file name to associate with the URLs protocol."
      },
      {
        "in_out": "",
        "type": "PTCSTR",
        "name": "pcszURL",
        "description": "Type: PTCSTR The address of a constant zero-terminated string that contains the URL with an unknown protocol."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszAppBuf",
        "description": "Type: PTSTR The address of a buffer that receives the path of the application specified by the user."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "ucAppBufLen",
        "description": "Type: UINT The size of pszAppBuf, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is no longer implemented.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Windows Shell",
    "name": "WinExecError",
    "is_callback": 0,
    "dll": "None",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Handle to the window that ran the WinExec function."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "error",
        "description": "Type: int Value of type int that specifies the error."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpstrFileName",
        "description": "Type: LPCTSTR Pointer to a string that contains the name of the file where the error occurred."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpstrTitle",
        "description": "Type: LPCTSTR Pointer to a string that contains the title of the file where the error occurred."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call GetLastError. ",
    "remarks": "Before closing the window that requested help, the application must call WinHelp with the uCommand parameter set to HELP_QUIT. Until all applications have done this, Windows Help will not terminate. Note that calling Windows Help with the HELP_QUIT command is not necessary if you used the HELP_CONTEXTPOPUP command to start Windows Help. This function fails if called from any context but the current user. The following table shows the possible values for the uCommand parameter and the corresponding formats of the dwData parameter.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "WinHelp",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hWndMain",
        "description": "Type: HWND A handle to the window requesting help. The WinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help."
      },
      {
        "in_out": "",
        "type": "LPCTSTR",
        "name": "lpszHelp",
        "description": "Type: LPCTSTR The address of a null-terminated string containing the path, if necessary, and the name of the Help file that WinHelp is to display. \t     \t\t\t\t The file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uCommand",
        "description": "Type: UINT The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section."
      },
      {
        "in_out": "",
        "type": "ULONG_PTR",
        "name": "dwData",
        "description": "Type: ULONG_PTR Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Changes the luminance of a RGB value. Hue and saturation are not affected.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: COLORREF Returns the modified RGB value. ",
    "remarks": "If fScale is set to TRUE, n can range from -1000 to +1000. If fScale is set to FALSE, n can range from 0 to 1000. Available luminance values range from 0 to a maximum. If the requested value is negative or exceeds the maximum, the luminance will be set to either zero or the maximum value, respectively. ",
    "return_type": "COLORREF",
    "category": "Windows Shell",
    "name": "ColorAdjustLuma",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "COLORREF",
        "name": "clrRGB",
        "description": "Type: COLORREF The initial RGB value."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "n",
        "description": "Type: int The luminance in units of 0.1 percent of the total range. For example, a value of n = 50 corresponds to 5 percent of the maximum luminance."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fScale",
        "description": "Type: BOOL If fScale is set to TRUE, n specifies how much to increment or decrement the current luminance. If fScale is set to FALSE, n specifies the absolute luminance."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts colors from hue-luminance-saturation (HLS) to RGB format.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: COLORREF Returns the RGB value. ",
    "remarks": "",
    "return_type": "COLORREF",
    "category": "Windows Shell",
    "name": "ColorHLSToRGB",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "WORD",
        "name": "wHue",
        "description": "Type: WORD The original HLS hue value."
      },
      {
        "in_out": "",
        "type": "WORD",
        "name": "wLuminance",
        "description": "Type: WORD The original HLS luminance value."
      },
      {
        "in_out": "",
        "type": "WORD",
        "name": "wSaturation",
        "description": "Type: WORD The original HLS saturation value."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts colors from RGB to hue-luminance-saturation (HLS) format.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "ColorRGBToHLS",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "COLORREF",
        "name": "clrRGB",
        "description": "Type: COLORREF The original RGB color."
      },
      {
        "in_out": "_Out_",
        "type": "WORD*",
        "name": "pwHue",
        "description": "Type: WORD* A pointer to a value that, when this method returns successfully, receives the HLS hue value."
      },
      {
        "in_out": "_Out_",
        "type": "WORD*",
        "name": "pwLuminance",
        "description": "Type: WORD* A pointer to a value that, when this method returns successfully, receives the HLS luminance value."
      },
      {
        "in_out": "_Out_",
        "type": "WORD*",
        "name": "pwSaturation",
        "description": "Type: WORD* A pointer to a value that, when this method returns successfully, receives the HLS saturation value."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a halftone palette for the specified device context.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HPALETTE Returns the palette if successful; otherwise 0. ",
    "remarks": "This function behaves the same as CreateHalftonePalette. The palette that is returned depends on the device context in the following way: ",
    "return_type": "HPALETTE",
    "category": "Windows Shell",
    "name": "SHCreateShellPalette",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HDC",
        "name": "hdc",
        "description": "Type: HDC The device context."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a root path from a given drive number.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPTSTR Returns the address of the constructed root path. If the call fails for any reason (for example, an invalid drive number), szRoot is returned unchanged.  ",
    "remarks": "",
    "return_type": "LPTSTR",
    "category": "Windows Shell",
    "name": "PathBuildRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szRoot",
        "description": "Type: LPTSTR A pointer to the string that receives the constructed root path. This buffer must be at least four characters in size."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iDrive",
        "description": "Type: int A variable of type int that indicates the desired drive number. It should be between 0 and 25."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Compares two paths to determine if they share a common prefix. A prefix is one of these types: \"C:\\\\\", \".\", \"..\", \"..\\\\\".",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the count of common prefix characters in the path. If the output buffer pointer is not NULL, then these characters are copied to the output buffer.  ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PathCommonPrefix",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile1",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of length MAX_PATH that contains the first path name."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile2",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of length MAX_PATH that contains the second path name."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a buffer that receives the common prefix. This buffer must be at least MAX_PATH characters in size. If there is no common prefix, it is set to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Truncates a file path to fit within a given pixel width by replacing path components with ellipses.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the path was successfully compacted to the specified width. Returns FALSE on failure, or if the base portion of the path would not fit the specified width. ",
    "remarks": "This function uses the font currently selected in hDC to calculate the width of the text. This function will not compact the path beyond the base file name preceded by ellipses.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCompactPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDC",
        "name": "hDC",
        "description": "Type: HDC A handle to the device context used for font metrics. This value can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be modified. On return, this buffer will contain the modified string."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "dx",
        "description": "Type: UINT The width, in pixels, in which the string must fit."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Truncates a path to fit within a certain number of characters by replacing path components with ellipses.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "The '/' separator will be used instead of '\\' if the original string used it. If pszSrc points to a file name that is too long, instead of a path, the file name will be truncated to cchMax characters, including the ellipsis and the terminating NULL character. For example, if the input file name is \"My Filename\" and cchMax is 10, PathCompactPathEx will return \"My Fil...\". ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathCompactPathEx",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszOut",
        "description": "Type: LPTSTR The address of the string that has been altered."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszSrc",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be altered."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters to be contained in the new string, including the terminating null character. For example, if cchMax = 8, the resulting string can contain a maximum of 7 characters plus the terminating null character."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD"
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts a file URL to a Microsoft MS-DOS path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCreateFromUrl",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszUrl",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the MS-DOS path. You must set the size of this buffer to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchPath",
        "description": "Type: DWORD* The number of characters in the pszPath buffer."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Set this parameter to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a path from a file URL.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathCreateFromUrlAlloc",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszIn",
        "description": "Type: PCWSTR A pointer to the URL of a file, represented as a null-terminated, Unicode string."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszOut",
        "description": "Type: PWSTR* The address of a pointer to a buffer of length MAX_PATH that, when this function returns successfully, receives the file path."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved, must be 0."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a path to a file system object such as a file or folder is valid.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if the file exists; otherwise, FALSE. Call GetLastError for extended error information. ",
    "remarks": "This function tests the validity of the path. A path specified by Universal Naming Convention (UNC) is limited to a file only; that is, \\\\server\\share\\file is permitted. A UNC path to a server or server share is not permitted; that is, \\\\server or \\\\server\\share. This function returns FALSE if a mounted remote drive is out of service. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathFileExists",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the full path of the object to verify."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for a file name.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to the address of the string if successful, or a pointer to the beginning of the path otherwise. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathFindFileName",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pPath",
        "description": "Type: PTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Parses a path and returns the portion of that path that follows the first backslash.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to a null-terminated string that contains the truncated path. If pszPath points to the last component in the path, this function returns a pointer to the terminating null character. If pszPath points to the terminating null character or if the call fails, this function returns NULL. ",
    "remarks": "PathFindNextComponent  walks a path string until it encounters a backslash (\"\\\\\"), ignores everything up to that point including the backslash, and returns the rest of the path. Therefore, if a path begins with a backslash (such as \\path1\\path2), the function simply removes the initial backslash and returns the rest (path1\\path2). The following simple console application passes various strings to PathFindNextComponent to demonstrate what the function recognizes as a path component and to show what is returned. To run this code in Visual Studio, you must link to Shlwapi.lib and define UNICODE in the preprocessor commands in the project settings. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathFindNextComponent",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR A pointer to a null-terminated string that contains the path to parse. This string must not be longer than MAX_PATH characters, plus the terminating null character. Path components are delimited by backslashes. For instance, the path \"c:\\path1\\path2\\file.txt\" has four components: c:, path1, path2, and file.txt."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches for a file.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "PathFindOnPath searches for the file specified by pszFile. If no directories are specified in ppszOtherDirs, it attempts to find the file by searching standard directories such as System32 and the directories specified in the PATH environment variable. To expedite the process or enable PathFindOnPath to search a wider range of directories, use the ppszOtherDirs parameter to specify one or more directories to be searched first. If more than one file has the name specified by pszFile, PathFindOnPath returns the first instance it finds. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathFindOnPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszFile",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the file name for which to search. If the search is successful, this parameter is used to return the fully qualified path name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR*",
        "name": "ppszOtherDirs",
        "description": "Type: LPCTSTR* An optional, null-terminated array of directories to be searched first. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines whether a given file name has one of a list of suffixes.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPCTSTR Returns a pointer to a string with the matching suffix if successful, or NULL if pszPath does not end with one of the specified suffixes. ",
    "remarks": "This function uses a case-sensitive comparison. The suffix must match exactly. ",
    "return_type": "LPCTSTR",
    "category": "Windows Shell",
    "name": "PathFindSuffixArray",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file name to be tested. A full path can be used."
      },
      {
        "in_out": "_In_",
        "type": "const LPCTSTR*",
        "name": "apszSuffix",
        "description": "Type: const LPCTSTR* An array of iArraySize string pointers. Each string pointed to is null-terminated and contains one suffix. The strings can be of variable lengths."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iArraySize",
        "description": "Type: int The number of elements in the array pointed to by apszSuffix."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Finds the command line arguments within a given path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to a null-terminated string that contains the arguments portion of the path if successful. If there are no arguments in the path, the function returns a pointer to the end of the input string. If the function is given a NULL argument it returns NULL. ",
    "remarks": "This function should not be used on generic command path templates (from users or the registry), but rather should be used only on templates that the application knows to be well formed. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "PathGetArgs",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszPath",
        "description": "Type: PTSTR Pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines the type of character in relation to a path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: UINT Returns one or more of the following values that define the type of character.  ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "PathGetCharType",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "TUCHAR",
        "name": "ch",
        "description": "Type: TUCHAR The character for which to determine the type."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns 0 through 25 (corresponding to 'A' through 'Z') if the path has a drive letter, or -1 otherwise.  ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PathGetDriveNumber",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpsz",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines if a file's registered content type matches the specified content type. This function obtains the content type for the specified file type and compares that string with the pszContentType. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if the file's registered content type matches pszContentType, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsContentType",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file whose content type will be compared."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszContentType",
        "description": "Type: LPCTSTR The address of a character buffer that contains the null-terminated content type string to which the file's registered content type will be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Verifies that a path is a valid directory.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns (BOOL)FILE_ATTRIBUTE_DIRECTORY if the path is a valid directory; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsDirectory",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to verify."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a specified path is an empty directory.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if pszPath is an empty directory. Returns FALSE if pszPath is not a directory, or if it contains at least one file other than \".\" or \"..\". ",
    "remarks": "\"C:\\\" is considered a directory. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsDirectoryEmpty",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for any path-delimiting characters (for example, ':' or '\\' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if there are no path-delimiting characters within the path, or FALSE if there are path-delimiting characters.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsFileSpec",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if a file is an HTML file. The determination is made based on the content type that is registered for the file's extension.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if the file is an HTML file, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsHTMLFile",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR The address of a character buffer that contains the path and name of the file."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a file name is in long format.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if pszName exceeds the number of characters allowed by the 8.3 format, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsLFNFileSpec",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszName",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file name to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a path string represents a network resource.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string represents a network resource, or FALSE otherwise. ",
    "remarks": "PathIsNetworkPath interprets the following two types of paths as network paths. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsNetworkPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a path to determine if it contains a valid prefix of the type passed by pszPrefix. A prefix is one of these types: \"C:\\\\\", \".\", \"..\", \"..\\\\\".",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the compared path is the full prefix for the path, or FALSE otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsPrefix",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IN LPCTSTR",
        "name": "pszPrefix",
        "description": "Type: IN LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the prefix for which to search."
      },
      {
        "in_out": "_In_",
        "type": "IN LPCTSTR",
        "name": "pszPath",
        "description": "Type: IN LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path and determines if it is relative.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the path is relative, or FALSE if it is absolute.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsRelative",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two paths to determine if they have a common root component.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if both strings have the same root component, or FALSE otherwise. If pszPath1 contains only the server and share, this function also returns FALSE.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsSameRoot",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath1",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the first path to be compared."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath2",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the second path to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines if an existing folder contains the attributes that make it a system folder. Alternately, this function indicates if certain attributes qualify a folder to be a system folder.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if the pszPath or dwAttrb represent a system folder, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsSystemFolder",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the name of an existing folder. The attributes for this folder will be retrieved and compared with those that define a system folder. If this folder contains the attributes to make it a system folder, the function returns nonzero. If this value is NULL, this function determines if the attributes passed in dwAttrb qualify it to be a system folder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttrb",
        "description": "Type: DWORD The file attributes to be compared. Used only if pszPath is NULL. In that case, the attributes passed in this value are compared with those that qualify a folder as a system folder. If the attributes are sufficient to make this a system folder, this function returns nonzero. These attributes are the attributes that are returned from GetFileAttributes."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if a string is a valid Universal Naming Convention (UNC) for a server path only.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is a valid UNC path for a server only (no share name), or FALSE otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNCServer",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to validate."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if a string is a valid Universal Naming Convention (UNC) share path, \\\\server\\share.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is in the form \\\\server\\share, or FALSE otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsUNCServerShare",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be validated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Tests a given string to determine if it conforms to a valid URL format.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if pszPath has a valid URL format, or FALSE otherwise. ",
    "remarks": "This function does not verify that the path points to an existing site\u00e2\u0080\u0094only that it has a valid URL format.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsURL",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the URL path to validate."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the path has been converted, or FALSE otherwise. ",
    "remarks": "This function only operates on paths that are entirely uppercase. For example: C:\\WINDOWS will be converted to c:\\windows, but c:\\Windows will not be changed.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathMakePretty",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be converted."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Gives an existing folder the proper attributes to become a system folder.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathMakeSystemFolder",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the name of an existing folder that will be made into a system folder."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string using a Microsoft MS-DOS wildcard match type.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string matches, or FALSE otherwise.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathMatchSpec",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFile",
        "description": "Type: LPCSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be searched."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszSpec",
        "description": "Type: LPCSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file type for which to search. For example, to test whether pszFile is a .doc file, pszSpec should be set to \"*.doc\"."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Matches a file name from a path against one or more file name patterns.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns one of the following values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "PathMatchSpecEx",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 7.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path from which the file name to be matched is taken."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszSpec",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the file name pattern for which to search. This can be the exact name, or it can contain wildcard characters. If exactly one pattern is specified, set the PMSF_NORMAL flag in dwFlags. If more than one pattern is specified, separate them with semicolons and set the PMSF_MULTIPLE flag."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Modifies the search condition. The following are valid flags.  PMSF_NORMAL (0x00000000)   The pszSpec parameter points to a single file name pattern to be matched.  PMSF_MULTIPLE (0x00000001)   The pszSpec parameter points to a semicolon-delimited list of file name patterns to be matched.  PMSF_DONT_STRIP_SPACES (0x00010000)   If PMSF_NORMAL is used, ignore leading spaces in the string pointed to by pszSpec. If PMSF_MULTIPLE is used, ignore leading spaces in each file type contained in the string pointed to by pszSpec. This flag can be combined with PMSF_NORMAL and PMSF_MULTIPLE."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Parses a file location string that contains a file location and icon index, and returns separate values.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the valid icon index value. ",
    "remarks": "This function is useful for taking a DefaultIcon value retrieved from the registry by SHGetValue and separating the icon index from the path.  ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PathParseIconLocation",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszIconFile",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains a file location string. It should be in the form \"path,iconindex\". When the function returns, pszIconFile will point to the file's path."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Searches a path for spaces. If spaces are found, the entire path is enclosed in quotation marks.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if spaces were found; otherwise, FALSE.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathQuoteSpaces",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpsz",
        "description": "Type: LPTSTR A pointer to a null-terminated string that contains the path to search. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a relative path from one file or folder to another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "This function takes a pair of paths and generates a relative path from one to the other. The paths do not have to be fully qualified, but they must have a common prefix, or the function will fail and return FALSE. For example, let the starting point, pszFrom, be \"c:\\FolderA\\FolderB\\FolderC\", and the ending point, pszTo, be \"c:\\FolderA\\FolderD\\FolderE\". PathRelativePathTo will return the relative path from pszFrom to pszTo as: \"..\\..\\FolderD\\FolderE\". You will get the same result if you set pszFrom to \"\\FolderA\\FolderB\\FolderC\" and pszTo to \"\\FolderA\\FolderD\\FolderE\". On the other hand, \"c:\\FolderA\\FolderB\" and \"a:\\FolderA\\FolderD do not share a common prefix, and the function will fail. Note that \"\\\\\" is not considered a prefix and is ignored. If you set pszFrom to \"\\\\FolderA\\FolderB\", and pszTo to \"\\\\FolderC\\FolderD\", the function will fail.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathRelativePathTo",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a string that receives the relative path. This buffer must be at least MAX_PATH characters in size."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFrom",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path that defines the start of the relative path."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttrFrom",
        "description": "Type: DWORD The file attributes of pszFrom. If this value contains FILE_ATTRIBUTE_DIRECTORY, pszFrom is assumed to be a directory; otherwise, pszFrom is assumed to be a file."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszTo",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path that defines the endpoint of the relative path."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttrTo",
        "description": "Type: DWORD The file attributes of pszTo. If this value contains FILE_ATTRIBUTE_DIRECTORY, pszTo is assumed to be directory; otherwise, pszTo is assumed to be a file."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes any arguments from a given path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function should not be used on generic command path templates (from users or the registry), but rather it should be used only on templates that the application knows to be well formed. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathRemoveArgs",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR Pointer to a null-terminated string of length MAX_PATH that contains the path from which to remove arguments."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes all leading and trailing spaces from a string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value.  ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathRemoveBlanks",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpszString",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH from which to strip all leading and trailing spaces."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines if a given path is correctly formatted and fully qualified.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the path is qualified, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathSearchAndQualify",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pcszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to search."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszFullyQualifiedPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path to be referenced."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchFullyQualifiedPath",
        "description": "Type: UINT The size of the buffer pointed to by pszFullyQualifiedPath, in characters."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathSetDlgItemPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hDlg",
        "description": "Type: HWND A handle to the dialog box or window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "id",
        "description": "Type: int The identifier of the control."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszPath",
        "description": "Type: LPCSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to set in the control."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the path portion of a fully qualified path and file.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. The following examples show the effect of PathStripPath on a series of strings. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathStripPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path and file name. When this function returns successfully, the string contains only the file name, with the path removed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the decoration from a path string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "A decoration consists of a pair of square brackets with one or more digits in between, inserted immediately after the base name and before the file name extension. The following table illustrates how strings are modified by PathUndecorate.  ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathUndecorate",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A null-terminated string of length MAX_PATH that contains the path. When the function returns, pszPath points to the undecorated string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Replaces certain folder names in a fully qualified path with their associated environment string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "The following folder paths are replaced by their equivalent environment string.  The environment variables listed in the above table might not all be set on all systems. If an environment variable is not set, it is not unexpanded. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathUnExpandEnvStrings",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the path to be unexpanded."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszBuf",
        "description": "Type: LPTSTR A pointer to a buffer that, when this method returns successfully, receives the unexpanded string. The size of this buffer must be set to MAX_PATH to ensure that it is large enough to hold the returned string."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size, in characters, in the pszBuf buffer."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the attributes from a folder that make it a system folder. This folder must actually exist in the file system.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathUnmakeSystemFolder",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of maximum length MAX_PATH that contains the name of an existing folder that will have the system folder attributes removed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes quotes from the beginning and end of a path.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "No return value.  ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathUnquoteSpaces",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpsz",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH that contains the path. When the function returns successfully, points to the string with beginning and ending quotation marks removed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Checks a bind context to see if it is safe to bind to a particular component object.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the object specified by pclsid must be skipped, or FALSE otherwise. ",
    "remarks": "This function can be used to avoid infinite cycles in namespace binding. For example, a folder shortcut that refers to a folder above it in the namespace tree can produce an infinitely recursive loop. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHSkipJunction",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IBindCtx*",
        "name": "pbc",
        "description": "Type: IBindCtx* A pointer to an IBindCtx interface that specifies the bind context you want to check. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "const CLSID*",
        "name": "pclsid",
        "description": "Type: const CLSID* A pointer to a variable that specifies the CLSID of the object being tested to see if it must be skipped. Typically, this is the CLSID of the object that IShellFolder::BindToObject is about to create."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns a standard COM return value, including the following.  ",
    "remarks": "If the URL has a valid scheme, the string will not be modified. However, almost any combination of two or more characters followed by a colon will be parsed as a scheme. Valid characters include some common punctuation marks, such as \".\". If your input string fits this description, UrlApplyScheme may treat it as valid and not apply a scheme. To force the function to apply a scheme to a URL, set the URL_APPLY_FORCEAPPLY and URL_APPLY_DEFAULT flags in dwFlags. This combination of flags forces the function to apply a scheme to the URL. Typically, the function will not be able to determine a valid scheme. The second flag guarantees that, if no valid scheme can be determined, the function will apply the default scheme to the URL. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlApplyScheme",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszIn",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a URL."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszOut",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives a null-terminated string set to the URL specified by pszIn and converted to the standard scheme://URL_string format."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchOut",
        "description": "Type: DWORD* The address of a value set to the number of characters in the pszOut buffer. When the function returns, the value depends on whether the function is successful or returns E_POINTER. For other return values, the value of this parameter is meaningless."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that specify how to determine the scheme. The following flags can be combined.  URL_APPLY_DEFAULT   Apply the default scheme if UrlApplyScheme can't determine one. The default prefix is stored in the registry but is typically \"http\".  URL_APPLY_GUESSSCHEME   Attempt to determine the scheme by examining pszIn.  URL_APPLY_GUESSFILE   Attempt to determine a file URL from pszIn.  URL_APPLY_FORCEAPPLY   Force UrlApplyScheme to determine a scheme for pszIn."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts a URL string into canonical form.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function performs such tasks as replacing unsafe characters with their escape sequences and collapsing sequences like \"..\\...\". If a URL string contains \"/../\" or \"/./\", UrlCanonicalize treats the characters as indicating navigation in the URL hierarchy. The function simplifies the URLs before combining them. For instance \"/hello/cruel/../world\" is simplified to \"/hello/world\". Exceptions to this default behavior occur in these cases: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlCanonicalize",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszUrl",
        "description": "Type: PCTSTR A pointer to a null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a URL string. If the string does not refer to a file, it must include a valid scheme such as \"http://\"."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszCanonicalized",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the converted URL as a null-terminated string."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchCanonicalized",
        "description": "Type: DWORD* A pointer to a value that, on entry, is set to the number of characters in the pszCanonicalized buffer."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that specify how the URL is converted to canonical form. The following flags can be combined.  URL_UNESCAPE (0x10000000)   Un-escape any escape sequences that the URLs contain, with two exceptions. The escape sequences for \"?\" and \"#\" are not un-escaped. If one of the URL_ESCAPE_XXX flags is also set, the two URLs are first un-escaped, then combined, then escaped.  URL_ESCAPE_UNSAFE (0x20000000)   Replace unsafe characters with their escape sequences. Unsafe characters are those characters that may be altered during transport across the Internet, and include the (<, >, \", #, {, }, |, \\, ^, [, ], and ') characters. This flag applies to all URLs, including opaque URLs.  URL_PLUGGABLE_PROTOCOL (0x40000000)   Combine URLs with client-defined pluggable protocols, according to the W3C specification. This flag does not apply to standard protocols such as ftp, http, gopher, and so on. If this flag is set, UrlCombine does not simplify URLs, so there is no need to also set URL_DONT_SIMPLIFY.  URL_ESCAPE_SPACES_ONLY (0x04000000)   Replace only spaces with escape sequences. This flag takes precedence over URL_ESCAPE_UNSAFE, but does not apply to opaque URLs.  URL_DONT_SIMPLIFY (0x08000000)   Treat \"/./\" and \"/../\" in a URL string as literal characters, not as shorthand for navigation. See Remarks for further discussion.  URL_NO_META (0x08000000)   Defined to be the same as URL_DONT_SIMPLIFY.  URL_ESCAPE_PERCENT (0x00001000)   Convert any occurrence of \"%\" to its escape sequence.  URL_ESCAPE_AS_UTF8 (0x00040000)   Windows 7 and later. Percent-encode all non-ASCII characters as their UTF-8 equivalents."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "When provided with a relative URL and its base, returns a URL in canonical form.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns standard COM error codes, including the following.  ",
    "remarks": "Items between slashes are treated as hierarchical identifiers; the last item specifies the document itself. You must enter a slash (/) after the document name to append more items; otherwise, UrlCombine exchanges one document for another. For example: The preceding code returns the URL http://xyz/test/bar. If you want the combined URL to be http://xyz/test/abc/bar, use the following call to UrlCombine. If a URL string contains '/../' or '/./', UrlCombine usually treats the characters as if they indicated navigation in the URL hierarchy. The function simplifies the URLs before combining them. For instance, \"/hello/cruel/../world\" is simplified to \"/hello/world\". If the URL_DONT_SIMPLIFY flag is set in dwFlags, the function does not simplify URLs. In this case, \"/hello/cruel/../world\" is left as it is. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlCombine",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszBase",
        "description": "Type: PCTSTR A pointer to a null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the base URL."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszRelative",
        "description": "Type: PCTSTR A pointer to a null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the relative URL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTSTR",
        "name": "pszCombined",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives a null-terminated string that contains the combined URL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchCombined",
        "description": "Type: DWORD* A pointer to a value that, on entry, is set to the number of characters in the pszCombined buffer. When the function returns successfully, the value depends on whether the function is successful or returns E_POINTER. For other return values, the value of this parameter is meaningless."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify how the URL is converted to canonical form. The following flags can be combined.  URL_DONT_SIMPLIFY (0x08000000)   Treat '/./' and '/../' in a URL string as literal characters, not as shorthand for navigation. See Remarks for further discussion.  URL_ESCAPE_PERCENT (0x00001000)   Convert any occurrence of '%' to its escape sequence.  URL_ESCAPE_SPACES_ONLY (0x04000000)   Replace only spaces with escape sequences. This flag takes precedence over URL_ESCAPE_UNSAFE, but does not apply to opaque URLs.  URL_ESCAPE_UNSAFE (0x20000000)   Replace unsafe characters with their escape sequences. Unsafe characters are those characters that may be altered during transport across the Internet, and include the (<, >, \", #, {, }, |, \\, ^, ~, [, ], and ') characters. This flag applies to all URLs, including opaque URLs.  URL_NO_META   Defined to be the same as URL_DONT_SIMPLIFY.  URL_PLUGGABLE_PROTOCOL (0x40000000)   Combine URLs with client-defined pluggable protocols, according to the W3C specification. This flag does not apply to standard protocols such as ftp, http, gopher, and so on. If this flag is set, UrlCombine does not simplify URLs, so there is no need to also set URL_DONT_SIMPLIFY.  URL_UNESCAPE (0x10000000)   Un-escape any escape sequences that the URLs contain, with two exceptions. The escape sequences for '?' and '#' are not un-escaped. If one of the URL_ESCAPE_XXX flags is also set, the two URLs are first un-escaped, then combined, then escaped.  URL_ESCAPE_AS_UTF8 (0x00040000)   Windows 7 and later. Percent-encode all non-ASCII characters as their UTF-8 equivalents."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Makes a case-sensitive comparison of two URL strings.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the two strings are equal. The function will also return zero if fIgnoreSlash is set to TRUE and one of the strings has a trailing '\\' character. The function returns a negative integer if the string pointed to by psz1 is less than the string pointed to by psz2. Otherwise, it returns a positive integer. ",
    "remarks": "For best results, you should first canonicalize the URLs with UrlCanonicalize. Then, compare the canonicalized URLs with UrlCompare. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "UrlCompare",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz1",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the first URL."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the second URL."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fIgnoreSlash",
        "description": "Type: BOOL A value that is set to TRUE to have UrlCompare ignore a trailing '/' character on either or both URLs."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts a Microsoft MS-DOS path to a canonicalized URL.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_FALSE if pszPath is already in URL format. In this case, pszPath will simply be copied to pszUrl. Otherwise, it returns S_OK if successful or a standard COM error value if not. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlCreateFromPath",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszPath",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the MS-DOS path."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszUrl",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the URL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchUrl",
        "description": "Type: DWORD* The number of characters in pszUrl."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Set this parameter to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet (\"unsafe\" characters) into their corresponding escape sequences. Surrogate pairs are characters between U+10000 to U+10FFFF (in UTF-32)  or between DC00 to DFFF (in UTF-16).",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful. If the pcchEscaped buffer was too small to contain the result, E_POINTER is returned, and the value pointed to by pcchEscaped is set to the required buffer size. Otherwise, a standard error value is returned. ",
    "remarks": "For the purposes of this document, a typical URL is divided into three sections: the server, the segment, and the query. For example: The server portion is \"http://microsoft.com/\". The trailing forward slash is considered part of the server portion. The segment portion is any part of the path found following the server portion, but before the first # or ? character, in this case simply \"test.asp\". The query portion is the remainder of the path from the first # or ? character (inclusive) to the end. In the example, it is \"?url=/example/abc.asp?frame=true#fragment\". Unsafe characters are those characters that might be altered during transport across the Internet. This function converts unsafe characters into their equivalent \"%xy\" escape sequences. The following table shows unsafe characters and their escape sequences.  Use of the URL_ESCAPE_SEGMENT_ONLY flag also causes the conversion of the # (%23), ? (%3F), and / (%2F) characters. By default, UrlEscape ignores any text following a # or ? character. The URL_ESCAPE_SEGMENT_ONLY flag overrides this behavior by regarding the entire string as the segment. The URL_ESCAPE_SPACES_ONLY flag overrides this behavior, but only for space characters. The following examples show the effect of the various flags on a URL. The example URL is not valid but is exaggerated for demonstration purposes. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlEscape",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszURL",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains a full or partial URL, as appropriate for the value in dwFlags."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszEscaped",
        "description": "Type: PTSTR The buffer that receives the converted string, with the unsafe characters converted to their escape sequences."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchEscaped",
        "description": "Type: DWORD* A pointer to a DWORD value that, on entry, contains the number of characters in the pszEscaped buffer. Before calling UrlEscape, the calling application must set the value referenced by pcchEscaped to the size of the buffer. When this function returns successfully, the value receives the number of characters written to the buffer, not including the terminating NULL character.                                If an E_POINTER error code is returned, the buffer was too small to hold the result, and the value referenced by pcchEscaped is set to the required number of characters in the buffer. If any other errors are returned, the value referenced by pcchEscaped is undefined."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that indicate which portion of the URL is being provided in pszURL and which characters in that string should be converted to their escape sequences. The following flags are defined.  URL_DONT_ESCAPE_EXTRA_INFO (0x02000000)   Used only in conjunction with URL_ESCAPE_SPACES_ONLY to prevent the conversion of characters in the query (the portion of the URL following the first # or ? character encountered in the string). This flag should not be used alone, nor combined with URL_ESCAPE_SEGMENT_ONLY.  URL_BROWSER_MODE   Defined to be the same as URL_DONT_ESCAPE_EXTRA_INFO.  URL_ESCAPE_SPACES_ONLY (0x04000000)   Convert only space characters to their escape sequences, including those space characters in the query portion of the URL. Other unsafe characters are not converted to their escape sequences. This flag assumes that pszURL does not contain a full URL. It expects only the portions following the server specification.                                           Combine this flag with URL_DONT_ESCAPE_EXTRA_INFO to prevent the conversion of space characters in the query portion of the URL. This flag cannot be combined with URL_ESCAPE_PERCENT or URL_ESCAPE_SEGMENT_ONLY.  URL_ESCAPE_PERCENT (0x00001000)   Convert any % character found in the segment section of the URL (that section falling between the server specification and the first # or ? character). By default, the % character is not converted to its escape sequence. Other unsafe characters in the segment are also converted normally.                                           Combining this flag with URL_ESCAPE_SEGMENT_ONLY includes those % characters in the query portion of the URL. However, as the URL_ESCAPE_SEGMENT_ONLY flag causes the entire string to be considered the segment, any # or ? characters are also converted. This flag cannot be combined with URL_ESCAPE_SPACES_ONLY.  URL_ESCAPE_SEGMENT_ONLY (0x00002000)   Indicates that pszURL contains only that section of the URL following the server component but preceding the query. All unsafe characters in the string are converted. If a full URL is provided when this flag is set, all unsafe characters in the entire string are converted, including # and ? characters.                                           Combine this flag with URL_ESCAPE_PERCENT to include that character in the conversion. This flag cannot be combined with URL_ESCAPE_SPACES_ONLY or URL_DONT_ESCAPE_EXTRA_INFO.  URL_ESCAPE_AS_UTF8 (0x00040000)   Windows 7 and later. Percent-encode all non-ASCII characters as their UTF-8 equivalents.  URL_ESCAPE_ASCII_URI_COMPONENT (0x00080000)   Windows 8 and later. Percent-encode all ASCII characters outside of the unreserved set from URI RFC 3986 (a-zA-Z0-9-.~_)."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "A macro that converts space characters into their corresponding escape sequence.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "UrlEscapeSpaces is equivalent to the following: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlEscapeSpaces",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszURL",
        "description": "Type: LPCTSTR A pointer to a URL string. If it does not refer to a file, it must include a valid scheme such as \"http://\"."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszEscaped",
        "description": "Type: LPTSTR A pointer to a null-terminated string containing the string pointed to by pszURL, with space characters converted to their escape sequence."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcchEscaped",
        "description": "Type: LPDWORD The number of characters in pszEscaped."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the location from a URL.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LPCTSTR Returns a pointer to a null-terminated string with the location, or NULL otherwise. ",
    "remarks": "The location is the segment of the URL starting with a ? or # character. If a file URL has a query string, the returned string includes the query string. ",
    "return_type": "LPCTSTR",
    "category": "Windows Shell",
    "name": "UrlGetLocation",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszURL",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the location."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Accepts a URL string and returns a specified part of that URL.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful. The value pointed to by pcchOut will be set to the number of characters written to the output buffer, excluding the terminating NULL. If the buffer was too small, E_POINTER is returned, and the value pointed to by pcchOut will be set to the minimum number of characters that the buffer must be able to contain, including the terminating NULL character. Otherwise, a COM error value is returned. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlGetPart",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszIn",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszOut",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives a null-terminated string with the specified part of the URL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchOut",
        "description": "Type: DWORD* A pointer to a value that, on entry, is set to the number of characters in the pszOut buffer. When this function returns successfully, the value depends on whether the function is successful or returns E_POINTER. For other return values, the value of this parameter is meaningless."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPart",
        "description": "Type: DWORD The flags that specify which part of the URL to retrieve. It can have one of the following values.  URL_PART_HOSTNAME   The host name.  URL_PART_PASSWORD   The password.  URL_PART_PORT   The port number.  URL_PART_QUERY   The query portion of the URL.  URL_PART_SCHEME   The URL scheme.  URL_PART_USERNAME   The username."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD A flag that can be set to keep the URL scheme, in addition to the part that is specified by dwPart.  URL_PARTFLAG_KEEPSCHEME   Keep the URL scheme."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Hashes a URL string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To hash a URL into a single byte, set cbHash = sizeof(BYTE) and pbHash = (LPBYTE)&bHashedValue, where bHashedValue is a one-byte buffer. To hash a URL into a DWORD, set cbHash = sizeof(DWORD) and pbHash = (LPBYTE)&dwHashedValue, where dwHashedValue is a DWORD buffer. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlHash",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszURL",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbHash",
        "description": "Type: BYTE* A pointere to a buffer that, when this function returns successfully, receives the hashed array."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbHash",
        "description": "Type: DWORD The number of elements in the array at pbHash. It should be no larger than 256."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Tests whether a URL is a specified type.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL For all but one of the URL types, UrlIs returns TRUE if the URL is the specified type, or FALSE if not. If UrlIs is set to URLIS_APPLIABLE, UrlIs will attempt to determine the URL scheme. If the function is able to determine a scheme, it returns TRUE, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UrlIs",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszUrl",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      },
      {
        "in_out": "",
        "type": "URLIS",
        "name": "UrlIs",
        "description": "Type: URLIS The type of URL to be tested for. This parameter can take one of the following values.  URLIS_APPLIABLE   Attempt to determine a valid scheme for the URL.  URLIS_DIRECTORY   Does the URL string end with a directory?  URLIS_FILEURL   Is the URL a file URL?  URLIS_HASQUERY   Does the URL have an appended query string?  URLIS_NOHISTORY   Is the URL a URL that is not typically tracked in navigation history?  URLIS_OPAQUE   Is the URL opaque?  URLIS_URL   Is the URL valid?"
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Tests a URL to determine if it is a file URL.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns a nonzero value if the URL is a file URL, or zero otherwise. ",
    "remarks": "A file URL has the form \"File:// \t\t\t\txxx\". UrlIsFileUrl is actually one of the following macros, depending on whether ANSI or Unicode is selected. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UrlIsFileUrl",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCTSTR",
        "name": "pszUrl",
        "description": "Type: LPCTSTR A pointer to a null-terminated string containing the URL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a URL is a URL that browsers typically do not include in navigation history.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns a nonzero value if the URL is a URL that is not included in navigation history, or zero otherwise. ",
    "remarks": "This function is equivalent to the following: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UrlIsNoHistory",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszURL",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a URL is opaque.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns a nonzero value if the URL is opaque, or zero otherwise. ",
    "remarks": "A URL that has a scheme that is not followed by two slashes (//) is opaque. For example, mailto:xyz@litwareinc.com is an opaque URL. Opaque URLs cannot be separated into the standard URL hierarchy. UrlIsOpaque is equivalent to the following: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UrlIsOpaque",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszURL",
        "description": "Type: PCTSTR A null-terminated string of maximum length INTERNET_MAX_URL_LENGTH that contains the URL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts escape sequences back into ordinary characters.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful. If the URL_UNESCAPE_INPLACE flag is not set, the value pointed to by pcchUnescaped will be set to the number of characters in the output buffer pointed to by pszUnescaped. Returns E_POINTER if the URL_UNESCAPE_INPLACE flag is not set and the output buffer is too small. The pcchUnescaped parameter will be set to the required buffer size. Otherwise, returns a standard error value. ",
    "remarks": "An escape sequence has the form \"%xy\". Input strings cannot be longer than INTERNET_MAX_URL_LENGTH. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlUnescape",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTSTR",
        "name": "pszURL",
        "description": "Type: PTSTR A pointer to a null-terminated string with the URL. If dwFlags is set to URL_UNESCAPE_INPLACE, the converted string is returned through this parameter."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTSTR",
        "name": "pszUnescaped",
        "description": "Type: PTSTR A pointer to a buffer that will receive a null-terminated string that contains the unescaped version of pszURL. If URL_UNESCAPE_INPLACE is set in dwFlags, this parameter is ignored."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcchUnescaped",
        "description": "Type: DWORD* The number of characters in the buffer pointed to by pszUnescaped. On entry, the value pcchUnescaped points to is set to the size of the buffer. If the function returns a success code, the value that pcchUnescaped points to is set to the number of characters written to that buffer, not counting the terminating NULL character. If an E_POINTER error code is returned, the buffer was too small, and the value to which pcchUnescaped points is set to the required number of characters that the buffer must be able to contain. If any other errors are returned, the value to which pcchUnescaped points is undefined."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that control which characters are unescaped. It can be a combination of the following flags.  URL_DONT_UNESCAPE_EXTRA_INFO   Do not convert the # or ? character, or any characters following them in the string.  URL_UNESCAPE_AS_UTF8   Introduced in Windows 8. Decode URLs that were encoded by using the URL_ESCAPE_AS_UTF8 flag.  URL_UNESCAPE_INPLACE   Use pszURL to return the converted string instead of pszUnescaped."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts escape sequences back into ordinary characters and overwrites the original string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a standard OLE error value otherwise. ",
    "remarks": "UrlUnescapeInPlace is equivalent to the following: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlUnescapeInPlace",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszURL",
        "description": "Type: LPTSTR A pointer to a null-terminated string that contains the URL. The converted string is returned through this parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that control which characters are unescaped.  URL_DONT_UNESCAPE_EXTRA_INFO   Do not convert the # or ? character, or any characters following them in the string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves a file's perceived type based on its extension.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function first compares the extension against a hard-coded set of extensions known to Windows. If that search fails to reveal a match, the registered associations under HKEY_CLASSES_ROOT are searched for a key that matches the extension and contains a PerceivedType value. If that value is found, the extension set is again searched for a match. If again no match is found, the perceived type is determined to be PERCEIVED_TYPE_CUSTOM. If either a key that matches the extension or a PerceivedType value is not found, the perceived type is reported as PERCEIVED_TYPE_UNSPECIFIED. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "AssocGetPerceivedType",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszExt",
        "description": "Type: PCWSTR A pointer to a buffer that contains the file's extension. This should include the leading period, for example \".txt\"."
      },
      {
        "in_out": "_Out_",
        "type": "PERCEIVED*",
        "name": "ptype",
        "description": "Type: PERCEIVED* A pointer to a PERCEIVED value that indicates the perceived type."
      },
      {
        "in_out": "_Out_",
        "type": "PERCEIVEDFLAG*",
        "name": "pflag",
        "description": "Type: PERCEIVEDFLAG* A pointer to a value that indicates the source of the perceived type information. One or more of the following values.  PERCEIVEDFLAG_UNDEFINED (0x0000)   No perceived type was found (PERCEIVED_TYPE_UNSPECIFIED).  PERCEIVEDFLAG_SOFTCODED (0x0001)   The perceived type was determined through an association in the registry.  PERCEIVEDFLAG_HARDCODED (0x0002)   The perceived type is inherently known to Windows.  PERCEIVEDFLAG_NATIVESUPPORT (0x0004)   The perceived type was determined through a codec provided with Windows.  PERCEIVEDFLAG_GDIPLUS (0x0010)   The perceived type is supported by the GDI+ library.  PERCEIVEDFLAG_WMSDK (0x0020)   The perceived type is supported by the Windows Media SDK.  PERCEIVEDFLAG_ZIPFOLDER (0x0040)   The perceived type is supported by Windows compressed folders."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PWSTR*",
        "name": "ppszType",
        "description": "Type: PWSTR* If the function returns a success code, this contains the address of a pointer to a buffer that receives the perceived type string, for instance \"text\" or \"video\". This value can be NULL."
      }
    ],
    "min_client": "Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a file type is considered a potential security risk.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the file type is considered dangerous; otherwise, FALSE. ",
    "remarks": "Files that are determined to be potentially dangerous, such as .exe files, should be handled with more care than other files. For example, Windows Internet Explorer version 6.01 or later uses AssocIsDangerous to determine whether it should issue stronger warning language in its download dialog box. ShellExecuteEx uses AssocIsDangerous to trigger zone checking using the methods of the IInternetSecurityManager interface in conjunction with the URLACTION_SHELL_SHELLEXECUTE flag. The determination of a file's potential risk is made by checking its type against several sources, including a list of known dangerous types and the presence of the FTA_AlwaysUnsafe flag in the registry. On systems running Windows XPService Pack 1 (SP1) or later or Windows Server 2003, it also uses the SaferiIsExecutableFileType function to determine whether a file type is executable. Applications that can take advantage of AssocIsDangerous include email programs, browsers, chat clients capable of downloading files, and any application that moves files or data from one zone of trust to another. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "AssocIsDangerous",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.01 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAssoc",
        "description": "Type: PCWSTR A pointer to a string that contains the type of file in question. This may be either an extension such as \".exe\" or a progid such as \"exefile\"."
      }
    ],
    "min_client": "Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves an array of class subkeys associated with an IQueryAssociations object.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "The number of subkeys inserted into the array. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "SHGetAssocKeys",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IQueryAssociations*",
        "name": "pqa",
        "description": "A IQueryAssociations interface pointer to the object you're interested in."
      },
      {
        "in_out": "_Out_",
        "type": "HKEY*",
        "name": "rgKeys",
        "description": "A pointer to an array of HKEY elements that, when this function returns successfully, receives the retrived class subkeys."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cKeys",
        "description": "The number of elements in the rgKeys array. If you are interested in only the primary class subkey, set this value to 1."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Opens a registry value and supplies a stream that can be used to read from or write to the value. This function supersedes SHOpenRegStream.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: IStream* Returns an IStream interface pointer if successful; otherwise, NULL. A NULL value can be caused by several situations, including an invalid hkey or pszSubkey, a subkey named by pszSubkey that does not exist, a caller without sufficient permissions to access the subkey, or an inability to open the stream. ",
    "remarks": "The calling application is responsible for calling the Release method of the returned object when that IStream object is no longer needed. ",
    "return_type": "IStream*",
    "category": "Windows Shell",
    "name": "SHOpenRegStream2",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HKEY",
        "name": "hkey",
        "description": "Type: HKEY Required. The subtree, such as HKEY_LOCAL_MACHINE, that contains the value."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszSubkey",
        "description": "Type: LPCTSTR Optional. Pointer to a null-terminated string that specifies the subkey that contains the value. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszValue",
        "description": "Type: LPCTSTR Pointer to a null-terminated string that specifies the value to be accessed. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD The type of access for the stream. This can be one of the following values:  STGM_READ   Open the stream for reading.  STGM_WRITE   Open the stream for writing.  STGM_READWRITE   Open the stream for reading and writing."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Deprecated. Opens a registry value and supplies a stream that can be used to read from or write to the value.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: IStream* Returns an IStream interface pointer if successful; otherwise, NULL. A NULL value can be caused by several situations, including an invalid hkey or pszSubkey, or an inability to open the stream. ",
    "remarks": "The calling application is responsible for calling the Release method of the returned object when that IStream object is no longer needed. ",
    "return_type": "IStream*",
    "category": "Windows Shell",
    "name": "SHOpenRegStream",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HKEY",
        "name": "hkey",
        "description": "Type: HKEY Required. The subtree, such as HKEY_LOCAL_MACHINE, that contains the value."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszSubkey",
        "description": "Type: LPCTSTR Optional. Pointer to a null-terminated string that specifies the subkey that contains the value. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszValue",
        "description": "Type: LPCTSTR Pointer to a null-terminated string that specifies the value to be accessed. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD The type of access for the stream. This can be one of the following values:  STGM_READ   Open the stream for reading.  STGM_WRITE   Open the stream for writing.  STGM_READWRITE   Open the stream for both reading and writing."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Performs a comparison between two characters. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns zero if the two characters are the same, or nonzero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ChrCmpI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "TCHAR",
        "name": "w1",
        "description": "Type: TCHAR The first character to be compared."
      },
      {
        "in_out": "_In_",
        "type": "TCHAR",
        "name": "w2",
        "description": "Type: TCHAR The second character to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a string used with websites when specifying language preferences.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For those versions of Windows that do not include GetAcceptLanguages in Shlwapi.h, this function's individual ANSI or Unicode version must be called directly from Shlwapi.dll. GetAcceptLanguagesA is ordinal 14 and GetAcceptLanguagesW is ordinal 15. Some websites offer content in multiple languages. You can specify your language preferences in the Internet Options item in Control Panel. GetAcceptLanguages retrieves a string that represents those preferences. That string is sent in an additional language header when negotiating HTTP connections. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "GetAcceptLanguages",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszLanguages",
        "description": "Type: LPTSTR A pointer to a string that, when this function returns successfully, receives the language preferences information. We recommend that this buffer be of size 2048 characters to ensure sufficient space to return the full string. You can also call this function with this parameter set to NULL to retrieve the size of the string that will be returned."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchLanguages",
        "description": "Type: DWORD* A pointer to the size, in characters, of the string at pszLanguages.                                                    On entry, this value is the size of pszLanguages, including the terminating null character. On exit, it is the actual size of pszLanguages, not including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Performs a case-sensitive comparison of a specified number of characters from the beginning of two localized strings.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the first nChar characters are identical, or FALSE otherwise. ",
    "remarks": "This function retrieves the thread locale and uses CompareString to do a case-sensitive comparison of the first nChar characters. It is equivalent to: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IntlStrEqN",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr1",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr2",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters to be compared, starting from the beginning of the strings."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Performs a case-insensitive comparison of a specified number of characters from the beginning of two localized strings.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the first nChar characters are identical, or FALSE otherwise. ",
    "remarks": "This function retrieves the thread locale and uses CompareString to do a case-insensitive comparison of the first nChar characters. It is equivalent to: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IntlStrEqNI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr1",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr2",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters to be compared, starting from the beginning of the strings."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Compares a specified number of characters from the beginning of two localized strings.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the first nChar characters are identical, or FALSE otherwise. ",
    "remarks": "This function retrieves the thread locale and uses CompareString to determine whether the first nChar characters are identical. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IntlStrEqWorker",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fCaseSens",
        "description": "Type: BOOL A value that is set to TRUE for a case-sensitive comparison, or to FALSE for a case-insensitive comparison."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr1",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr2",
        "description": "Type: LPCTSTR A pointer to a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters to be compared, starting from the beginning of the strings."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a character represents a space.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the character is a space; otherwise, FALSE. ",
    "remarks": "For those versions of Windows that do not include IsCharSpace in Shlwapi.h, IsCharSpaceW must be called directly from Shlwapi.dll (ordinal 29), using a WCHAR in the wch parameter. IsCharSpaceA is not available in versions of Windows that do not include IsCharSpace in Shlwapi.h. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IsCharSpace",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "TCHAR",
        "name": "wch",
        "description": "Type: TCHAR A single character."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Makes a copy of a string in newly allocated memory.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a COM error value otherwise. ",
    "remarks": "This function will take either Unicode or ANSI strings as input, but the copied string is always Unicode. This function uses CoTaskMemAlloc to allocate memory for the copied string. You must free this memory with CoTaskMemFree when it is no longer needed. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHStrDup",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszSource",
        "description": "Type: LPCTSTR A pointer to the null-terminated string to be copied."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR*",
        "name": "ppwsz",
        "description": "Type: LPTSTR* A pointer to an allocated Unicode string that contains the result. SHStrDup allocates memory for this string with CoTaskMemAlloc. You should free the string with CoTaskMemFree when it is no longer needed.                       In the case of failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Appends one string to another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to psz1, which holds the combined strings. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The first argument, psz1, must be large enough to hold psz2 and the closing '\\0', otherwise a buffer overrun may occur. Buffer overruns may lead to a denial of service attack against the application if an access violation occurs. In the worst case, a buffer overrun may allow an attacker to inject executable code into your process, especially if psz1 is a stack-based buffer. Consider using one of the following alternatives: StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx, StringCchCat, StringCchCatEx, StringCchCatN, or StringCchCatNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrCat",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTSTR",
        "name": "psz1",
        "description": "Type: PTSTR A pointer to a null-terminated string. When this function returns successfully, this string contains its original content with the string psz2 appended. This buffer must be large enough to hold both strings and the terminating null character."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to a null-terminated string to be appended to psz1."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Copies and appends characters from one string to the end of another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to the destination string. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The final string is not guaranteed to be null-terminated. Consider using one of the following alternatives: StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx, StringCchCat, StringCchCatEx, StringCchCatN, or StringCchCatNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrCatBuff",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTSTR",
        "name": "pszDest",
        "description": "Type: PTSTR A pointer to a null-terminated string. When this function returns successfully, this string contains its original content with the string pszSrc appended."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrc",
        "description": "Type: PCTSTR A pointer to the string to be appended to pszDest."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchDestBuffSize",
        "description": "Type: int The size of the buffer, in characters, pointed to by pszDest. This value must be at least the length of the combined string plus the terminating null character. If the buffer is too small to fit the entire string, the string will be truncated."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Concatenates two Unicode strings. Used when repeated concatenations to the same buffer are required.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: DWORD Returns the offset of the null character after the last character added to pszDst. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The final string is not guaranteed to be null-terminated. Consider using one of the following alternatives: StringCbCatEx, StringCbCatNEx, StringCchCatEx, or StringCchCatNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "StrCatChainW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.5 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszDst",
        "description": "Type: PWSTR A pointer to a buffer that, when this function returns successfully, receives the null-terminated, Unicode string."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cchDst",
        "description": "Type: DWORD The size of the destination buffer, in characters. This buffer must be of sufficient size to hold both strings as well as a terminating null character. If the buffer is too small, the final string is truncated."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "ichAt",
        "description": "Type: DWORD The offset into the destination buffer at which to begin the append action. If the string is not empty, set this value to -1 to have the current number of filled characters (not including the terminating null character) calculated for you."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrc",
        "description": "Type: PCWSTR A pointer to the null-terminated Unicode source string."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string for the first occurrence of a character that matches the specified character. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the first occurrence of the character in the string if successful, or NULL otherwise. ",
    "remarks": "The comparison assumes pszStart points to the start of a null-terminated string. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrChr",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszStart",
        "description": "Type: PTSTR The address of the string to be searched."
      },
      {
        "in_out": "",
        "type": "TCHAR",
        "name": "wMatch",
        "description": "Type: TCHAR The character to be used for comparison."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string for the first occurrence of a character that matches the specified character. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the first occurrence of the character in the string if successful, or NULL otherwise. ",
    "remarks": "The comparison assumes pszStart points to the start of a null-terminated string. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrChrI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszStart",
        "description": "Type: PTSTR A pointer to the string to be searched."
      },
      {
        "in_out": "",
        "type": "TCHAR",
        "name": "wMatch",
        "description": "Type: TCHAR The character to be used for comparison."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Searches a string for the first occurrence of a specified character. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the character in the string if successful, or NULL otherwise. ",
    "remarks": "StrChrNIW searches for wMatch from pszStart to pszStart + cchMax, or until a NULL character is encountered. To help ensure optimal performance, pszStart should be word-aligned. ",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrChrNIW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszStart",
        "description": "Type: PCWSTR A pointer to the string to be searched."
      },
      {
        "in_out": "",
        "type": "WCHAR",
        "name": "wMatch",
        "description": "Type: WCHAR The character to be used for comparison."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters to search."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Searches a string for the first occurrence of a specified character. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns the address of the first occurrence of the character in the string if successful, or NULL otherwise. ",
    "remarks": "StrChrNW searches for wMatch from pszStart to pszStart + cchMax, or until a NULL character is encountered. To help ensure optimal performance, pszStart should be word-aligned. ",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrChrNW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszStart",
        "description": "Type: PWSTR A pointer to the string to be searched."
      },
      {
        "in_out": "",
        "type": "WCHAR",
        "name": "wMatch",
        "description": "Type: WCHAR The character to be used for comparison."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The maximum number of characters to search."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two strings to determine if they are the same. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the string pointed to by psz1 is greater than that pointed to by psz2. Returns a negative value if the string pointed to by psz1 is less than that pointed to by psz2. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmp",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz1",
        "description": "Type: PCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the second null-terminated string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the string pointed to by lpStr1 is alphabetically greater than that pointed to by lpStr2. Returns a negative value if the string pointed to by lpStr1 is alphabetically less than that pointed to by lpStr2. ",
    "remarks": "It is strongly recommended that you use the CompareString function in place of this function. StrCmpC was designed for comparing canonical strings. These strings are not localized and consist only of characters below ASCII value 128. Therefore, it will not function correctly with a double-byte character set (DBCS) or other multiple-character data. This function locates the first unequal characters and returns a positive number if the character from the first string is greater than the character from the second, a negative number if it is less, or zero if they are equal. For example, if lpStr1=\"abczb\" and lpStr2=\"abcdefg\", StrCmpC determines that the first unequal character is at position four (\"z\" in lpStr1 and \"d\" in lpStr2) and returns a positive value since the ASCII code for \"z\" is greater than the ASCII code for \"d\". For those versions of Windows that do not include StrCmpC in Shlwapi.h, this function's individual ANSI or Unicode version must be called directly from Shlwapi.dll. StrCmpCA is ordinal 155 and StrCmpCW is ordinal 156. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPCTSTR",
        "name": "lpStr1",
        "description": "Type: LPCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_Out_",
        "type": "LPCTSTR",
        "name": "lpStr2",
        "description": "Type: LPCTSTR A pointer to the second null-terminated string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two strings to determine if they are the same. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the string pointed to by psz1 is greater than that pointed to by psz2. Returns a negative value if the string pointed to by psz1 is less than that pointed to by psz2. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz1",
        "description": "Type: PCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the second null-terminated string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the string pointed to by lpStr1 is alphabetically greater than that pointed to by lpStr2. Returns a negative value if the string pointed to by lpStr1 is alphabetically less than that pointed to by lpStr2 ",
    "remarks": "It is strongly recommended that you use CompareString in place of this function. StrCmpIC was designed for comparing canonical strings. These strings are not localized and consist only of characters below ASCII value 128. Therefore, it will not function correctly with double-byte character set (DBCS) data. Uppercase characters are converted to lowercase characters before comparing, and the return value is based on comparing the converted values.  This function returns the difference in value of the first unequal characters it encounters, or zero if they are all equal. For example, if lpStr1=\"abczb\" and lpStr2=\"abcdefg\", StrCmpIC determines that \"abczb\" is greater than \"abcdefg\" and returns z - d. For those versions of Windows that do not include StrCmpIC in Shlwapi.h, this function's individual ANSI or Unicode version must be called directly from Shlwapi.dll. StrCmpICA is ordinal 157 and StrCmpICW is ordinal 158. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpIC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpStr1",
        "description": "Type: LPCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpStr2",
        "description": "Type: LPCTSTR A pointer to the second null-terminated string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two Unicode strings. Digits in the strings are considered as numerical content rather than text. This test is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int ",
    "remarks": "This function's ordering schema differs somewhat from StrCmpI, which also compares strings without regard to case sensitivity. Considering digits by their numerical value\u00e2\u0080\u0094as StrCmpLogicalW does\u00e2\u0080\u0094strings are ordered as follows: StrCmpI considers digits in the string only as text so that those same strings are ordered as follows: ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpLogicalW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.5 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz1",
        "description": "Type: PCWSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz2",
        "description": "Type: PCWSTR A pointer to the second null-terminated string to be compared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is case-sensitive. The StrNCmp macro differs from this function in name only.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the first nChar characters of the string pointed to by psz1 are greater than those from the string pointed to by psz2. It returns a negative value if the first nChar characters of the string pointed to by psz1 are less than those from the string pointed to by psz2. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpN",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz1",
        "description": "Type: PCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the second null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters from the beginning of each string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the substrings are identical. Returns a positive value if the string taken from that pointed to by pszStr1 is alphabetically greater than the string taken from that pointed to by pszStr2. Returns a negative value if the string taken from that pointed to by pszStr1 is alphabetically less than the string taken from that pointed to by pszStr2. ",
    "remarks": "Note that StrCmpNC was designed for comparing canonical strings. These strings are not localized and consist only of characters below ASCII value 128. Therefore, it will not function correctly with a double-byte character set (DBCS) or other multiple-character data. This function locates the first unequal characters and returns a positive number if the character from the first string is greater than the character from the second, a negative number if it is less, or zero if they are equal. For example, suppose that pszStr1=\"abczb\", pszStr2=\"abcdefg\", and you are comparing the first four characters from each. StrCmpNC determines that the first unequal character is at position four (\"z\" in pszStr1 and \"d\" in pszStr2) and returns a positive value since the ASCII code for \"z\" is greater than the ASCII code for \"d\". For those versions of Windows that do not include StrCmpNC in Shlwapi.h, this function's individual ANSI or Unicode version must be called directly from Shlwapi.dll. StrCmpNCA is ordinal 151 and StrCmpNCW is ordinal 152. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpNC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr1",
        "description": "Type: LPCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr2",
        "description": "Type: LPCTSTR A pointer to the second null-terminated string to be compared."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters from the beginning of each string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Compares a specified number of characters from the beginning of two strings to determine if they are the same. The comparison is not case-sensitive. The StrNCmpI macro differs from this function in name only.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the strings are identical. Returns a positive value if the first nChar characters of the string pointed to by psz1 are greater than those from the string pointed to by psz2. It returns a negative value if the first nChar characters of the string pointed to by psz1 are less than those from the string pointed to by psz2. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpNI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz1",
        "description": "Type: PCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the second null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters from the beginning of each string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Compares a specified number of characters from the beginning of two strings using C run-time (ASCII) collation rules. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns zero if the substrings are identical. Returns a positive value if the string taken from that pointed to by pszStr1 is alphabetically greater the string taken from that pointed to by pszStr2. Returns a negative value if the string taken from that pointed to by pszStr1 is alphabetically less than the string taken from that pointed to by pszStr2. ",
    "remarks": "Note that StrCmpNIC was designed for comparing canonical strings. These strings are not localized and consist only of characters below ASCII value 128. Therefore, it will not function correctly with a double-byte character set (DBCS) or other multiple-character data. This function locates the first unequal characters and returns a positive number if the character from the first string is greater than the character from the second, a negative number if it is less, or zero if they are equal. For example, suppose that pszStr1=\"abczb\", pszStr2=\"abcdefg\", and you are comparing the first four characters from each. StrCmpNIC determines that the first unequal character is at position four (\"z\" in pszStr1 and \"d\" in pszStr2) and returns a positive value since the ASCII code for \"z\" is greater than the ASCII code for \"d\". For those versions of Windows that do not include StrCmpNIC in Shlwapi.h, this function's individual ANSI or Unicode version must be called directly from Shlwapi.dll. StrCmpNICA is ordinal 153 and StrCmpNICW is ordinal 154. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCmpNIC",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr1",
        "description": "Type: LPCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszStr2",
        "description": "Type: LPCTSTR A pointer to the second null-terminated string to be compared."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters from the beginning of each string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Copies one string to another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to psz1. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The first argument, psz1, must be large enough to hold psz2 and the closing '\\0', otherwise a buffer overrun may occur. Buffer overruns may lead to a denial of service attack against the application if an access violation occurs. In the worst case, a buffer overrun may allow an attacker to inject executable code into your process, especially if psz1 is a stack-based buffer. Consider using one of the following alternatives: StringCbCopy, StringCbCopyEx, StringCbCopyN, StringCbCopyNEx, StringCchCopy, StringCchCopyEx, StringCchCopyN, or StringCchCopyNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrCpy",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "psz1",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the copied string. This string is not guaranteed to be null-terminated."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the null-terminated source string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Copies a specified number of characters from the beginning of one string to another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to pszDst. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The copied string is not guaranteed to be null-terminated.  Consider using one of the following alternatives. StringCbCopy, StringCbCopyEx, StringCbCopyN, StringCbCopyNEx, StringCchCopy, StringCchCopyEx, StringCchCopyN, StringCchCopyNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrCpyN",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszDst",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the copied string. This buffer must be of sufficient size to hold the copied characters. This string is not guaranteed to be null-terminated."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrc",
        "description": "Type: PCTSTR A pointer to the null-terminated source string."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchMax",
        "description": "Type: int The number of characters to be copied, including the terminating null character."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string for the first occurrence of any of a group of characters. The search method is case-sensitive, and the terminating NULL character is included within the search pattern match.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the index of the first occurrence in pszStr of any character from pszSet, or the length of pszStr if no match is found. ",
    "remarks": "The return value of this function is equal to the length of the initial substring in pszStr that does not include any characters from pszSet. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCSpn",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszStr",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be searched."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSet",
        "description": "Type: PCTSTR A pointer to a null-terminated string that contains the characters to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string for the first occurrence of any of a group of characters. The search method is not case-sensitive, and the terminating NULL character is included within the search pattern match.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the index of the first occurrence in pszStr of any character from pszSet, or the length of pszStr if no match is found. ",
    "remarks": "The return value of this function is equal to the length of the initial substring in pszStr that does not include any characters from pszSet. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrCSpnI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszStr",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be searched."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSet",
        "description": "Type: PCTSTR A pointer to a null-terminated string containing the characters to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Duplicates a string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the string that was copied, or NULL if the string cannot be copied. ",
    "remarks": "StrDup will allocate storage the size of the original string. If storage allocation is successful, the original string is copied to the duplicate string. This function uses LocalAlloc to allocate storage space for the copy of the string. The calling application must free this memory by calling the LocalFree function on the pointer returned by the call to StrDup. This simple console application illustrates the use of StrDup. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrDup",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "pszSrch",
        "description": "Type: PCTSTR A pointer to a constant null-terminated character string."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PSTR Returns a pointer to the converted string, or NULL if the conversion fails. ",
    "remarks": "StrFormatByteSize64 can be used for either ANSI or Unicode characters. However, while StrFormatByteSize64A can be called directly, StrFormatByteSize64W is not defined. When StrFormatByteSize64 is called with a Unicode value, StrFormatByteSizeW is used. In Windows 10, size is reported in base 10 rather than  base 2. For example, 1 KB is 1000 bytes rather than 1024. The following table illustrates how this function converts a numeric value into a text string.  ",
    "return_type": "PSTR",
    "category": "Windows Shell",
    "name": "StrFormatByteSize64",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "qdw",
        "description": "Type: LONGLONG The numeric value to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PSTR",
        "name": "pszBuf",
        "description": "Type: PSTR A pointer to a buffer that, when this function returns successfully, receives the converted number."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of the buffer pointed to by pszBuf, in characters."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size. Differs from StrFormatByteSizeW in one parameter type.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PSTR Returns a pointer to the converted string, or NULL if the conversion fails. ",
    "remarks": "The first parameter of this function has a different type for the ANSI and Unicode versions. If your numeric value is a DWORD, you can use StrFormatByteSize with text macros for both cases. The compiler will cast the numerical value to a LONGLONG for the Unicode case. If your numerical value is a LONGLONG, you should use StrFormatByteSizeW explicitly. In Windows 10, size is reported in base 10 rather than  base 2. For example, 1 KB is 1000 bytes rather than 1024. The following table illustrates how this function converts a numeric value into a text string.  ",
    "return_type": "PSTR",
    "category": "Windows Shell",
    "name": "StrFormatByteSizeA",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dw",
        "description": "Type: DWORD The numeric value to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PSTR",
        "name": "pszBuf",
        "description": "Type: PSTR A pointer to a buffer that receives the converted string."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of the buffer pointed to by pszBuf, in characters."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes, depending on the size. Differs from StrFormatByteSizeA in one parameter type.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PWSTR Returns a pointer to the converted string, or NULL if the conversion fails. ",
    "remarks": "The first parameter of this function has different types for the ANSI and Unicode versions. If your numeric value is a DWORD, you can use StrFormatByteSize with text macros for both cases. The compiler will cast the numerical value to a LONGLONG for the Unicode case. If your numerical value is a LONGLONG, you should use StrFormatByteSizeW explicitly. In Windows 10, size is reported in base 10 rather than  base 2. For example, 1 KB is 1000 bytes rather than 1024. The following table illustrates how this function converts a numeric value into a text string.  ",
    "return_type": "PWSTR",
    "category": "Windows Shell",
    "name": "StrFormatByteSizeW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "qdw",
        "description": "Type: LONGLONG The numeric value to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszBuf",
        "description": "Type: PWSTR A pointer to a buffer that, when this function returns successfully, receives the converted number."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of the buffer pointed to by pszBuf, in characters."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts a numeric value into a string that represents the number in bytes, kilobytes, megabytes, or gigabytes, depending on the size. Extends StrFormatByteSizeW by offering the option to round to the nearest displayed digit or to discard undisplayed digits.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The following table illustrates how this function converts a numeric value into a text string in relation to the passed flag.  In Windows 10, size is reported in base 10 rather than  base 2. For example, 1 KB is 1000 bytes rather than 1024. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StrFormatByteSizeEx",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "ULONGLONG",
        "name": "ull",
        "description": "Type: ULONGLONG The numeric value to be converted."
      },
      {
        "in_out": "",
        "type": "SFBS_FLAGS",
        "name": "flags",
        "description": "Type: SFBS_FLAGS One of the SFBS_FLAGS enumeration values that specifies whether to round or truncate undisplayed digits. This value cannot be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszBuf",
        "description": "Type: PWSTR A pointer to a buffer that receives the converted string."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of the buffer pointed to by pszBuf, in characters."
      }
    ],
    "min_client": "Windows Vista with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a numeric value into a string that represents the number expressed as a size value in kilobytes.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to the converted string, or NULL if the conversion fails. ",
    "remarks": "In Windows 10, size is reported in base 10 rather than  base 2. For example, 1 KB is 1000 bytes rather than 1024. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrFormatKBSize",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "qdw",
        "description": "Type: LONGLONG The numeric value to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszBuf",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the converted number."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of pszBuf, in characters."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts a time interval, specified in milliseconds, to a string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of characters in pszOut, excluding the terminating NULL character. ",
    "remarks": "The time value returned in pszOut will always be in the form hh hours mm minutes ss seconds. Times that exceed twenty four hours are not converted to days or months. Fractions of seconds are ignored. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrFromTimeInterval",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszOut",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the converted number."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchMax",
        "description": "Type: UINT The size of pszOut, in characters. If cchMax is set to zero, StrFromTimeInterval will return the minimum size of the character buffer needed to hold the converted string. In this case, pszOut will not contain the converted string."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwTimeMS",
        "description": "Type: DWORD The time interval, in milliseconds."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "digits",
        "description": "Type: int The maximum number of significant digits to be represented in pszOut. Some examples are:                                          dwTimeMSdigitspszOut 34000334 sec 34000234 sec 34000130 sec 7400031 min 14 sec 7400021 min 10 sec 7400011 min"
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Compares a specified number of characters from the beginning of two strings to determine if they are equal.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if the first nChar characters from the two strings are equal; otherwise, FALSE. ",
    "remarks": "You can set case sensitivity with the StrIntlEqN and StrIntlEqNI macros. StrIntlEqN performs a case-sensitive comparison, and StrIntlEqNI performs a case-insensitive comparison. The syntax of the two macros is: ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "StrIsIntlEqual",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fCaseSens",
        "description": "Type: BOOL The case sensitivity of the comparison. If this value is nonzero, the comparison is case-sensitive. If this value is zero, the comparison is not case-sensitive."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszString1",
        "description": "Type: PCTSTR A pointer to the first null-terminated string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszString2",
        "description": "Type: PCTSTR A pointer to the second null-terminated string to be compared."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "nChar",
        "description": "Type: int The number of characters from the beginning of each string to be compared."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Appends a specified number of characters from the beginning of one string to the end of another.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to psz1, which holds the combined string. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The first argument, psz1, must be large enough to hold psz2 and the closing '\\0', otherwise a buffer overrun may occur. Buffer overruns may lead to a denial of service attack against the application if an access violation occurs. In the worst case, a buffer overrun may allow an attacker to inject executable code into your process, especially if psz1 is a stack-based buffer. Be aware that the last argument, cchMax, is the number of characters to copy into psz1, not necessarily the size of the psz1 in bytes. Consider using one of the following alternatives. StringCbCat, StringCbCatEx, StringCbCatN, StringCbCatNEx, StringCchCat, StringCchCatEx, StringCchCatN, or StringCchCatNEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrNCat",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTSTR",
        "name": "psz1",
        "description": "Type: PTSTR A pointer to a null-terminated string to which the function appends the characters from psz2. It must be large enough to hold the combined strings plus the terminating null character."
      },
      {
        "in_out": "",
        "type": "PCTSTR",
        "name": "psz2",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be appended."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchMax",
        "description": "Type: int The number of characters to be appended to psz1 from the beginning of psz2."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Searches a string for the first occurrence of a character contained in a specified buffer. This search does not include the terminating null character.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address in psz of the first occurrence of a character contained in the buffer at pszSet, or NULL if no match is found. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrPBrk",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "psz",
        "description": "Type: PTSTR A pointer to the null-terminated string to be searched."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSet",
        "description": "Type: PCTSTR A pointer to a null-terminated character buffer that contains the characters for which to search."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Searches a string for the last occurrence of a specified character. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to the last occurrence of the character in the string, if successful, or NULL if not. ",
    "remarks": "The comparison assumes that pszEnd points to the end of the string. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrRChr",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszStart",
        "description": "Type: PTSTR A pointer to the null-terminated string to be searched."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCTSTR",
        "name": "pszEnd",
        "description": "Type: PCTSTR A pointer into the source string that defines the range of the search. Set pszEnd to point to a character in the string and the search will stop with the preceding character. Set pszEnd to NULL to search the entire string."
      },
      {
        "in_out": "",
        "type": "TCHAR",
        "name": "wMatch",
        "description": "Type: TCHAR The character to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Searches a string for the last occurrence of a specified character. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns a pointer to the last occurrence of the character in the string, if successful, or NULL if not. ",
    "remarks": "The comparison assumes that pszEnd points to the end of the string. ",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrRChrI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszStart",
        "description": "Type: PTSTR A pointer to the null-terminated string to be searched."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCTSTR",
        "name": "pszEnd",
        "description": "Type: PCTSTR A pointer into the source string that defines the range of the search. Set pszEnd to point to a character in the string and the search will stop with the preceding character. Set pszEnd to NULL to search the entire string."
      },
      {
        "in_out": "",
        "type": "TCHAR",
        "name": "wMatch",
        "description": "Type: TCHAR The character to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Accepts a STRRET structure returned by IShellFolder::GetDisplayNameOf that contains or points to a string, and returns that string as a BSTR.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the uType member of the STRRET structure pointed to by pstr is set to STRRET_WSTR, the pOleStr member of that structure is freed on return. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StrRetToBSTR",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.5 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "STRRET*",
        "name": "pstr",
        "description": "Type: STRRET* A pointer to a STRRET structure. When the function returns, this pointer is longer valid."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to an ITEMIDLIST that uniquely identifies a file object or subfolder relative to the parent folder. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstr",
        "description": "Type: BSTR* A pointer to a variable of type BSTR that receives the converted string."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Converts an STRRET structure returned by IShellFolder::GetDisplayNameOf to a string, and places the result in a buffer.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the uType member of the structure pointed to by pstr is set to STRRET_WSTR, the pOleStr member of that structure will be freed on return. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StrRetToBuf",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "STRRET*",
        "name": "pstr",
        "description": "Type: STRRET* A pointer to the STRRET structure. When the function returns, this pointer will no longer be valid."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to the item's ITEMIDLIST structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszBuf",
        "description": "Type: LPTSTR A buffer to hold the display name. It will be returned as a null-terminated string. If cchBuf is too small, the name will be truncated to fit."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The size of pszBuf, in characters. If cchBuf is too small, the string will be truncated to fit."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf and returns a pointer to an allocated string containing the display name.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "StrRetToStr",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "STRRET*",
        "name": "pstr",
        "description": "Type: STRRET* A pointer to the STRRET structure. When the function returns, this pointer will no longer be valid."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to the item's ITEMIDLIST structure. This value can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR*",
        "name": "ppszName",
        "description": "Type: LPTSTR* A pointer to an allocated string containing the result. StrRetToStr allocates memory for this string with CoTaskMemAlloc. You should free the string with CoTaskMemFree when it is no longer needed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Takes an STRRET structure returned by IShellFolder::GetDisplayNameOf, converts it to a string, and places the result in a buffer.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL TRUE for success, FALSE for failure. ",
    "remarks": "StrRetToStrN is not exported by name. To use it, you must use GetProcAddress and request ordinal 96 from Shell32.dll to obtain a function pointer. If the uType member of the structure pointed to by pStrRet is set to STRRET_WSTR, the pOleStr member of that structure will be freed on return. Note that this function is exported from Shell32.dll rather than Shlwapi.dll. It is also included in Shlobj.h rather than Shlwapi.h. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "StrRetToStrN",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszOut",
        "description": "Type: LPTSTR Buffer to hold the display name. It will be returned as a null-terminated string. If cchOut is too small, the name will be truncated to fit."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchOut",
        "description": "Type: UINT Size of pszOut, in characters. If cchOut is too small, the string will be truncated to fit."
      },
      {
        "in_out": "_Inout_",
        "type": "LPSTRRET",
        "name": "pStrRet",
        "description": "Type: LPSTRRET Pointer to an STRRET structure. When the function returns, this pointer will no longer be valid."
      },
      {
        "in_out": "_In_",
        "type": "LPCITEMIDLIST",
        "name": "pidl",
        "description": "Type: LPCITEMIDLIST Pointer to the item's ITEMIDLIST structure."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Searches for the last occurrence of a specified substring within a string. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the last occurrence of the substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrRStrI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszSource",
        "description": "Type: PTSTR A pointer to a null-terminated source string."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCTSTR",
        "name": "pszLast",
        "description": "Type: PCTSTR A pointer into the source string that defines the range of the search. Set pszLast to point to a character in the source string, and the search will stop with the preceding character. Set pszLast to NULL to search the entire source string."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrch",
        "description": "Type: PCTSTR A pointer to the substring to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Obtains the length of a substring within a string that consists entirely of characters contained in a specified buffer.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the length, in characters, of the matching string or zero if no match is found. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrSpn",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "psz",
        "description": "Type: PCTSTR A pointer to the null-terminated string that is to be searched."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSet",
        "description": "Type: PCTSTR A pointer to a null-terminated character buffer that contains the set of characters for which to search."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Finds the first occurrence of a substring within a string. The comparison is case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrStr",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszFirst",
        "description": "Type: PTSTR A pointer to the null-terminated string to search."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrch",
        "description": "Type: PCTSTR A pointer to the substring to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Finds the first occurrence of a substring within a string. The comparison is not case-sensitive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: PTSTR Returns the address of the first occurrence of the matching substring if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "PTSTR",
    "category": "Windows Shell",
    "name": "StrStrI",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTSTR",
        "name": "pszFirst",
        "description": "Type: PTSTR A pointer to the null-terminated string being searched."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrch",
        "description": "Type: PCTSTR A pointer to the substring to search for."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Converts a string that represents a decimal value to an integer. The StrToLong macro is identical to this function.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the int value represented by pszSrc. For instance, the string \"123\" returns the integer value 123. ",
    "remarks": "If the string pointed to by pszSrc contains an invalid character, that character is considered the end of the string to be converted and the remainder is ignored. For instance, given the invalid decimal string \"12b34\", StrToInt only recognizes \"12\" and returns that integer value. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "StrToInt",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszSrc",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be converted. A valid string representing a decimal value contains only the characters 0-9 and must have the following form to be parsed successfully.                                                 Copy     (optional white space)(optional sign)(one or more decimal digits)     The optional sign can be the character '-' or '+'; if omitted, the sign is assumed to be positive."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a string representing a decimal or hexadecimal value to a 64-bit integer.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is converted; otherwise FALSE. ",
    "remarks": "The string pointed to by the pszString parameter must have one of the following forms to be parsed successfully. The optional sign can be the character '-' or '+'; if omitted, the sign is assumed to be positive. If the string pointed to by pszString contains an invalid character, that character is considered the end of the string to be converted and the remainder is ignored. For instance, given the invalid hexadecimal string \"0x00am123\", StrToInt64Ex only recognizes \"0x00a\", converts it to the integer value 10, and returns TRUE. If pllRet is NULL, the function returns TRUE if the string can be converted, even though it does not perform the conversion. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "StrToInt64Ex",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszString",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be converted. For further details concerning the valid forms of the string, see the Remarks section."
      },
      {
        "in_out": "",
        "type": "STIF_FLAGS",
        "name": "dwFlags",
        "description": "Type: STIF_FLAGS One of the following values that specify how pszString should be parsed for its conversion to a 64-bit integer.  STIF_DEFAULT   The string at pszString contains the representation of a decimal value.  STIF_SUPPORT_HEX   The string at pszString contains the representation of either a decimal or hexadecimal value. Note that in hexadecimal representations, the characters A-F are case-insensitive."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pllRet",
        "description": "Type: LONGLONG* A pointer to a variable of type LONGLONG that receives the 64-bit integer value of the converted string. For instance, in the case of the string \"123\", the integer pointed to by this value receives the value 123.                        If this function returns FALSE, this value is undefined. If the value returned is too large to be contained in a variable of type LONGLONG, this parameter contains the 64 low-order bits of the value. Any high-order bits beyond that are lost."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a string representing a decimal or hexadecimal number to an integer.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the string is converted; otherwise FALSE. ",
    "remarks": "The string pointed to by the pszString parameter must have one of the following forms to be parsed successfully. The optional sign can be the character '-' or '+'; if omitted, the sign is assumed to be positive. If the string pointed to by pszString contains an invalid character, that character is considered the end of the string to be converted and the remainder is ignored. For instance, given the invalid hexadecimal string \"0x00am123\", StrToIntEx only recognizes \"0x00a\", converts it to the integer value 10, and returns TRUE. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "StrToIntEx",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszString",
        "description": "Type: PCTSTR A pointer to the null-terminated string to be converted. For further details concerning the valid forms of the string, see the Remarks section."
      },
      {
        "in_out": "",
        "type": "STIF_FLAGS",
        "name": "dwFlags",
        "description": "Type: STIF_FLAGS One of the following values that specify how pszString should be parsed for its conversion to an integer.  STIF_DEFAULT   The string at pszString contains the representation of a decimal value.  STIF_SUPPORT_HEX   The string at pszString contains the representation of either a decimal or hexadecimal value. Note that in hexadecimal representations, the characters A-F are case-insensitive."
      },
      {
        "in_out": "_Out_",
        "type": "int*",
        "name": "piRet",
        "description": "Type: int* A pointer to an int that receives the converted string. For instance, in the case of the string \"123\", the integer pointed to by this value receives the integer value 123.                                            If this function returns FALSE, this value is undefined. If the value returned is too large to be contained in a variable of type int, this parameter contains the 32 low-order bits of the value. Any high-order bits beyond that are lost."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Removes specified leading and trailing characters from a string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if any characters were removed; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "StrTrim",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTSTR",
        "name": "psz",
        "description": "Type: PTSTR A pointer to the null-terminated string to be trimmed. When this function returns successfully, psz receives the trimmed string."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszTrimChars",
        "description": "Type: PCTSTR A pointer to a null-terminated string that contains the characters to trim from psz."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Takes a variable-length argument list and returns the values of the arguments as a printf-style formatted string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of characters written to the buffer, excluding any terminating NULL characters. A negative value is returned if an error occurs. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The copied string is not guaranteed to be null-terminated. Consider using one of the following alternatives. StringCbPrintf, StringCbPrintfEx, StringCbVPrintf, StringCbVPrintfEx, StringCchPrintf, StringCchPrintfEx, StringCchVPrintf, or StringCchVPrintfEx. You should review Security Considerations: Microsoft Windows Shell before continuing. This is a Windows version of sprintf. It does not support floating-point or pointer types. It supports only the left alignment flag. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "wnsprintf",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszDest",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the output string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchDest",
        "description": "Type: int The maximum number of characters allowed in pszDest."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszFmt",
        "description": "Type: PCTSTR A printf-style format string. The %s format identifier should never be used in an unbounded form. To avoid potential buffer overruns, always specify a size; for instance \"%32s\"."
      },
      {
        "in_out": "",
        "type": "_In_",
        "name": "...",
        "description": "Additional parameters that contain the data to be output."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Takes a list of arguments and returns the values of the arguments as a printf-style formatted string.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of characters written to the buffer, excluding any terminating NULL characters. A negative value is returned if an error occurs. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. The copied string is not guaranteed to be null-terminated. Consider using one of the following alternatives. StringCbPrintf, StringCbPrintfEx, StringCbVPrintf, StringCbVPrintfEx, StringCchPrintf, StringCchPrintfEx, StringCchVPrintf, or StringCchVPrintfEx. You should review Security Considerations: Microsoft Windows Shell before continuing. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "wvnsprintf",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PTSTR",
        "name": "pszDest",
        "description": "Type: PTSTR A pointer to a buffer that, when this function returns successfully, receives the output string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchDest",
        "description": "Type: int The maximum number of characters allowed in pszDest."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszFmt",
        "description": "Type: PCTSTR A printf-style format string. The %s format identifier should never be used in an unbounded form. To avoid potential buffer overruns, always specify a size; for instance \"%32s\"."
      },
      {
        "in_out": "_In_",
        "type": "va_list",
        "name": "arglist",
        "description": "Type: va_list A pointer to a list of command-line parameters used to customize the output."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Handles installation and setup for a DLL.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function may be implemented and exported by name by a DLL for use during application installation or setup. It is invoked by regsvr32 to allow the DLL to perform tasks such as adding information to the registry. DllInstall is used only for application installation and setup. It should not be called by an application. It is similar in purpose to DllRegisterServer or DllUnregisterServer. Unlike these functions, DllInstall takes an input string which can be used to specify a variety of different actions. This allows a DLL to be installed in more than one way, based on any criteria that is appropriate. To use DllInstall with regsvr32, add a \"/i\" flag followed by a colon (:) and a string. The string will be passed to DllInstall as the pszCmdLine parameter. If you omit the colon and string, pszCmdLine will be set to NULL. The following example would be used to install a DLL. regsvr32 /i:\"Install_1\" dllname.dll DllInstall is invoked with bInstall set to TRUE and pszCmdLine set to \"Install_1\". To uninstall a DLL, use the following: regsvr32 /u /i:\"Install_1\" dllname.dll With both of the above examples, DllRegisterServer or DllUnregisterServer will also be called. To call DllInstall only, add a \"/n\" flag. regsvr32 /n /i:\"Install_1\" dllname.dll ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "DllInstall",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "BOOL",
        "name": "bInstall",
        "description": "Type: BOOL TRUE if the DLL is being installed; FALSE if it is being uninstalled."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszCmdLine",
        "description": "Type: PCWSTR A string passed in by regsvr32 that indicates which setup procedure to use. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the process-specific object supplied by SetProcessReference, incrementing the reference count to keep the process alive.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "",
    "remarks": "There are a number of components, such as Shell extension handlers, that are implemented as DLLs and run in a host process such as Windows Explorer (Explorer.exe) or Windows Internet Explorer (Iexplore.exe). Typically, when the user closes the host process, the component is shut down immediately as well. Such an abrupt termination can create problems for some components. For example, if a component is using a background thread to download data or run user-interface functions, it might need additional time to safely shut itself down. GetProcessReference allows components that run in a host process to hold a reference on the host process. GetProcessReference increments the host's reference count and returns a pointer to the host's IUnknown interface. By holding that reference, a component can prevent the host process from closing prematurely. After the component has completed its necessary processing, it should call (*punk)->Release to release the host's reference and allow the process to terminate. GetProcessReference succeeds only if it is called from from an application which had previously called SetProcessReference to set a process reference. ",
    "return_type": "LWSTDAPI",
    "category": "Windows Shell",
    "name": "GetProcessReference",
    "is_callback": 0,
    "dll": "Api-ms-win-shcore-thread-L1-1-0.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IUnknown**",
        "name": "punk",
        "description": "The address of a pointer that, when this function returns successfully, points to the object supplied to the process by SetProcessReference. Your application is responsible for freeing this resource when it is no longer needed. A pointer to a free-threaded IUnknown. Components can use this interface (through SHGetInstanceExplorer) to prevent the host process from terminating. This value can be NULL, in which case the process reference is no longer made available to components."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Provides a Component Object Model (COM) object that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "",
    "remarks": "Windows Explorer and Internet Explorer can use SetProcessReference to allow components such as Shell extensions to extend the lifetime of the process. Other applications can also use SetProcessReference to allow for the same capability. For instance, the browser message loop and the proxy desktop use SetProcessReference to let other threads extend their lifetime. Applications other than Windows Explorer and Internet Explorer that call this function might encounter compatibility problems because some components use SetProcessReference to detect whether they are being hosted from within Windows Explorer or Internet Explorer. The interface pointer passed to SetProcessReference must reference a free-threaded object. Each time a component calls GetProcessReference, the system calls the AddRef method before returning the interface pointer to the calling component. The component then calls the IUnknown::Release method when processing is complete. The process that calls SetProcessReference must not terminate while the reference count of the provided interface pointer is nonzero. For further information on how components use the process references, see GetProcessReference. ",
    "return_type": "LWSTDAPI_(void)",
    "category": "Windows Shell",
    "name": "SetProcessReference",
    "is_callback": 0,
    "dll": "Api-ms-win-shcore-thread-L1-1-0.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "A pointer to the object for which you want to store a reference. This value can be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Hashes an array of data.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "HashData",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "Type: BYTE* A pointer to the data array."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbData",
        "description": "Type: DWORD The number of elements in the array at pbData."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbHash",
        "description": "Type: BYTE* A pointer to a value that, when this function returns successfully, receives the hashed array."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbHash",
        "description": "Type: DWORD The number of elements in pbHash. It should be no larger than 256."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Determines whether Windows Internet Explorer is in the Enhanced Security Configuration.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if Internet Explorer is in the Enhanced Security Configuration, and FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IsInternetESCEnabled",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Checks for specified operating systems and operating system features.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns a nonzero value if the specified operating system or operating system feature is detected, otherwise FALSE. ",
    "remarks": "Values are not provided for Windows Vista and Windows 7. To determine whether either of those operating systems are present, use VerifyVersionInfo. In Windows versions earlier than Windows Vista, IsOS was not exported by name or declared in a public header file. To use it in those cases, you must use GetProcAddress and request ordinal 437 from Shlwapi.dll to obtain a function pointer. Under Windows Vista, IsOS is included in Shlwapi.h and this is not necessary. When referring to server products, \"Windows Server\" refers only to the Standard Edition server. If all server products are covered by a particular flag, it is called out explicitly in the table. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IsOS",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOS",
        "description": "Type: DWORD A value that specifies which operating system or operating system feature to check for. One of the following values (you cannot combine values).                                NameValueDescription OS_WINDOWS0The program is running on one of the following versions of Windows:                                           Windows 95 Windows 98 Windows Me  Equivalent to VER_PLATFORM_WIN32_WINDOWS. Note that none of those systems are supported at this time. OS_WINDOWS returns FALSE on all supported systems.  OS_NT1Always returns TRUE. OS_WIN95ORGREATER2Always returns FALSE. OS_NT4ORGREATER3Always returns FALSE. OS_WIN98ORGREATER5Always returns FALSE. OS_WIN98_GOLD6Always returns FALSE. OS_WIN2000ORGREATER7The program is running on Windows 2000 or one of its successors. OS_WIN2000PRO8Do not use; use OS_PROFESSIONAL. OS_WIN2000SERVER9Do not use; use OS_SERVER. OS_WIN2000ADVSERVER10Do not use; use OS_ADVSERVER. OS_WIN2000DATACENTER11Do not use; use OS_DATACENTER. OS_WIN2000TERMINAL12The program is running on Windows 2000 Terminal Server in either Remote Administration mode or Application Server mode, or Windows Server 2003  (or one of its successors) in Terminal Server mode or Remote Desktop for Administration mode. Consider using a more specific value such as OS_TERMINALSERVER, OS_TERMINALREMOTEADMIN, or  OS_PERSONALTERMINALSERVER. OS_EMBEDDED13The program is running on Windows Embedded, any version. Equivalent to VER_SUITE_EMBEDDEDNT. OS_TERMINALCLIENT14The program is running as a Terminal Server client. Equivalent to GetSystemMetrics(SM_REMOTESESSION). OS_TERMINALREMOTEADMIN15The program is running on Windows 2000 Terminal Server in the Remote Administration mode or Windows Server 2003 (or one of its successors) in the Remote Desktop for Administration mode (these are the default installation modes). This is equivalent to VER_SUITE_TERMINAL && VER_SUITE_SINGLEUSERTS. OS_WIN95_GOLD16Always returns FALSE. OS_MEORGREATER17Always returns FALSE. OS_XPORGREATER18Always returns FALSE. OS_HOME19Always returns FALSE. OS_PROFESSIONAL20The program is running on Windows NT Workstation or Windows 2000 (or one of its successors) Professional. Equivalent to VER_PLATFORM_WIN32_NT && VER_NT_WORKSTATION. OS_DATACENTER21The program is running on Windows Datacenter Server or Windows Server Datacenter Edition, any version. Equivalent to (VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER) && VER_SUITE_DATACENTER. OS_ADVSERVER22The program is running on Windows Advanced Server or Windows Server Enterprise Edition, any version. Equivalent to (VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER) && VER_SUITE_ENTERPRISE && !VER_SUITE_DATACENTER. OS_SERVER23The program is running on Windows Server (Standard) or Windows Server Standard Edition, any version. This value will not return true for VER_SUITE_DATACENTER, VER_SUITE_ENTERPRISE, VER_SUITE_SMALLBUSINESS, or VER_SUITE_SMALLBUSINESS_RESTRICTED. OS_TERMINALSERVER24The program is running on Windows 2000 Terminal Server in Application Server mode, or on Windows Server 2003  (or one of its successors) in Terminal Server mode. This is equivalent to VER_SUITE_TERMINAL && VER_SUITE_SINGLEUSERTS. OS_PERSONALTERMINALSERVER25The program is running on Windows XP (or one of its successors), Home Edition or Professional. This is equivalent to VER_SUITE_SINGLEUSERTS && !VER_SUITE_TERMINAL. OS_FASTUSERSWITCHING26Fast user switching is enabled. OS_WELCOMELOGONUI27Always returns FALSE. OS_DOMAINMEMBER28The computer is joined to a domain. OS_ANYSERVER29The program is running on any Windows Server product. Equivalent to VER_NT_SERVER || VER_NT_DOMAIN_CONTROLLER. OS_WOW643230The program is a 32-bit program running on 64-bit Windows. OS_WEBSERVER31Always returns FALSE. OS_SMALLBUSINESSSERVER32The program is running on Microsoft Small Business Server with restrictive client license in force. Equivalent to VER_SUITE_SMALLBUSINESS_RESTRICTED. OS_TABLETPC33The program is running on Windows XP Tablet PC Edition, or one of its successors. OS_SERVERADMINUI34The user should be presented with administrator UI. It is possible to have server administrative UI on a non-server machine. This value informs the application that an administrator's profile has roamed to a non-server, and UI should be appropriate to an administrator. Otherwise, the user is shown a mix of administrator and nonadministrator settings. OS_MEDIACENTER35The program is running on Windows XP Media Center Edition, or one of its successors. Equivalent to GetSystemMetrics(SM_MEDIACENTER). OS_APPLIANCE36The program is running on Windows Appliance Server."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Copies a stream to another stream.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_Copy",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstmFrom",
        "description": "Type: IStream* A pointer to the source stream."
      },
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstmTo",
        "description": "Type: IStream* A pointer to the destination stream."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "Type: DWORD The number of bytes to copy from the source stream."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Reads bytes from a specified stream and returns a value that indicates whether all bytes were successfully read.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the function successfully reads the specified number of bytes from the stream, or a COM failure code otherwise. In particular, if the read attempt was successful but fewer than cb bytes were read, the function returns E_FAIL. ",
    "remarks": "This function calls the ISequentialStream::Read method to read data from the specified stream into the buffer. If the function fails for any reason, the contents of the output buffer and the position of the read pointer in the input stream are undefined. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_Read",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface of the stream from which to read."
      },
      {
        "in_out": "_Out_",
        "type": "VOID*",
        "name": "pv",
        "description": "Type: VOID* A pointer to a buffer to receive the stream data from pstm. This buffer must be at least cb bytes in size."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cb",
        "description": "Type: ULONG The number of bytes of data that the function should attempt to read from the input stream."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Reads a pointer to an item identifier list (PIDL) from an IStream object into a PIDLIST_RELATIVE object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_ReadPidl",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream from which the PIDL is read."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_RELATIVE*",
        "name": "ppidlOut",
        "description": "Type: PIDLIST_RELATIVE* A pointer to the resulting PIDL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Reads from a stream and writes into a string.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_ReadStr",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the stream from which to read."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppsz",
        "description": "Type: PWSTR* A pointer to the null-terminated, Unicode string into which the stream is written."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Moves the seek position in a specified stream to the beginning of the stream.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK on success or a COM failure code otherwise. See IStream::Seek for further discussion of possible error codes. ",
    "remarks": "This function calls IStream::Seek to move the stream's seek position to the beginning of the stream. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_Reset",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface of the stream whose position is to be reset."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the size, in bytes, of a specified stream.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK on success or a COM failure code otherwise. See IStream::Stat for further discussion of possible error codes. ",
    "remarks": "This function gets the size of the stream by calling the specified stream object's IStream::Stat method. It then copies the value of the cbSize member of the STATSTG structure returned by IStream::Stat to the ULARGE_INTEGER structure pointed to by pui.  If the function fails, the contents of the ULARGE_INTEGER structure are undefined. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_Size",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface of the stream whose size is to be determined."
      },
      {
        "in_out": "_Out_",
        "type": "ULARGE_INTEGER*",
        "name": "pui",
        "description": "Type: ULARGE_INTEGER* A pointer to a ULARGE_INTEGER structure to receive the size of the stream."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Writes data of unknown format from a buffer to a specified stream.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the function successfully wrote the specified number of bytes to the stream, or an error value otherwise. In particular, if less than cb bytes was written to the target stream, even if some data was successfully written, the function returns E_FAIL. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_Write",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* An IStream pointer that specifies the target stream."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pv",
        "description": "Type: const void* Pointer to a buffer that holds the data to send to the target stream. This buffer must be at least cb bytes in size."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cb",
        "description": "Type: ULONG The number of bytes of data to write to the target stream."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Writes a pointer to an item identifier list (PIDL) from a PCUIDLIST_RELATIVE object into an IStream object.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_WritePidl",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream object in which to write."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE",
        "name": "pidlWrite",
        "description": "Type: PCUIDLIST_RELATIVE The source PIDL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Reads from a string and writes into a stream.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IStream_WriteStr",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the stream in which to write."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string from which to read."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Releases a Component Object Model (COM) pointer and sets it to NULL.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "If ppunk points to a NULL pointer, no operation is performed. Otherwise, ppunk is assumed to be the address of a COM interface pointer, derived from IUnknown. The function calls the interface's IUnknown::Release method then sets the interface pointer to NULL. The following example uses IUnknown_AtomicRelease to release the stream, if it exists. If not, it does nothing. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "IUnknown_AtomicRelease",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_opt_",
        "type": "void**",
        "name": "ppunk",
        "description": "Type: void** The address of a pointer to a COM interface."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Calls the specified object's IObjectWithSite::GetSite method.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the site was successfully retrieved or a COM error code otherwise. ",
    "remarks": "This function calls the specified object's QueryInterface method to obtain the IObjectWithSite interface.  If successful, the function calls the interface's IObjectWithSite::GetSite method to obtain the site. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IUnknown_GetSite",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the COM object whose IObjectWithSite::GetSite method is to be called."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID The IID of the interface pointer that should be returned in ppvSite."
      },
      {
        "in_out": "_Out_",
        "type": "VOID**",
        "name": "ppvSite",
        "description": "Type: VOID** The address of the pointer to receive the requested interface pointer. If the function call is successful, ppvSite will contain the requested interface pointer. If no site is available or the requested interface is not supported, ppvSite is set to NULL and the function returns a COM error code."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Attempts to retrieve a window handle from a Component Object Model (COM) object by querying for various interfaces that have a GetWindow method.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if a window handle was successfully returned, or a COM error code otherwise. If no suitable interface was found, the function returns E_NOINTERFACE. Otherwise, the function returns the HRESULT returned by the corresponding interface's GetWindow method. ",
    "remarks": "This function attempts to retrieve the window handle by calling IOleWindow::GetWindow, IInternetSecurityMgrSite::GetWindow, and IShellView::GetWindow. It is possible that future versions of IUnknown_GetWindow may attempt additional interfaces. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IUnknown_GetWindow",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the COM object from which this function will attempt to obtain a window handle."
      },
      {
        "in_out": "_Out_",
        "type": "HWND*",
        "name": "phwnd",
        "description": "Type: HWND* A pointer to a HWND that, when this function returns successfully, receives the window handle. If a window handle was not obtained, this parameter is set to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves an interface for a service from a specified object.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if successful. Returns E_FAIL if the object does not support IServiceProvider. Otherwise, the function returns the HRESULT returned by the object's QueryService method. ",
    "remarks": "If the object passed in the punk parameter supports the IServiceProvider interface, then its QueryService method is invoked, passing the guidService, riid, and ppvOut parameters and propagating the return value. Otherwise, the function returns E_FAIL. For those versions of Windows that do not include IUnknown_QueryService in Shlwapi.h, this function must be called directly from Shlwapi.dll using ordinal 176. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IUnknown_QueryService",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown instance of the COM object that supports the service."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidService",
        "description": "Type: REFGUID The service's unique identifier (SID)."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID The IID of the desired service interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvOut",
        "description": "Type: void** When this method returns, contains the interface pointer requested riid. If successful, the calling application is responsible for calling IUnknown::Release using this value when the service is no longer needed. In the case of failure, this value is NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Changes the value of a Component Object Model (COM) interface pointer and releases the previous interface.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function mimics the behavior of a smart pointer. Conceptually, the function does the following: ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "IUnknown_Set",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "IUnknown**",
        "name": "ppunk",
        "description": "Type: IUnknown** The address of a COM interface pointer to receive the pointer assigned to punk. If the previous value of the pointer is non-NULL, the function releases that interface by calling its IUnkown::Release method."
      },
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* The interface pointer to be copied to ppunk. If the value is non-NULL, the function increments the interface's reference count."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the specified object's site by calling its IObjectWithSite::SetSite method.",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the site was successfully set, or a COM error code otherwise. ",
    "remarks": "This function calls the specified object's IUnknown::QueryInterface method to obtain a pointer to the object's IObjectWithSite interface.  If successful, the function calls IObjectWithSite::SetSite to set or change the site. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "IUnknown_SetSite",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown interface of the object whose site is to be changed."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkSite",
        "description": "Type: IUnknown* A pointer to the IUnknown interface of the new site."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Performs rudimentary parsing of a URL.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK on success, or a COM error code otherwise. The function returns URL_E_INVALID_SYNTAX (defined in Intshcut.h) if the string could not be parsed as a URL. ",
    "remarks": "The parsing performed by ParseURL is fairly rudimentary. For more sophisticated URL parsing, use InternetCrackUrl. This sample console application uses ParseURL to parse several simple URLs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ParseURL",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pcszUrl",
        "description": "Type: LPCTSTR A pointer to a null-terminated string containing the URL to be parsed."
      },
      {
        "in_out": "_Inout_",
        "type": "PARSEDURL*",
        "name": "ppu",
        "description": "Type: PARSEDURL* A pointer to a PARSEDURL structure that receives the parsed results. The calling application must set the structure's cbSize member to the size of the structure before calling ParseURL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "A table-driven implementation of the IUnknown::QueryInterface method.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the requested interface was found in the table or if the requested interface was IUnknown. Returns E_NOINTERFACE if the requested interface was not found. ",
    "remarks": "If the requested interface is IUnknown, then QISearch uses the first entry of the specified array of QITAB structures. Otherwise, QISearch searches the table until it either finds a matching IID or reaches the end of the table.  If a matching IID is found, the function advances the associated interface pointer by the number of bytes specified by the dwOffset member of the interface's QITAB structure and reinterpreted as a COM pointer.  That pointer is assigned to the QISearch function's  ppv parameter. The method also calls IUnknown::AddRef to increment the interface's reference count. If QISearch reaches the end of the table without finding the interface, it returns E_NOINTERFACE and sets ppv to NULL. It is important to include all applicable interfaces in the table. For example, if the object implements a derived interface, you should also include the base interface in the table. We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. The following example illustrates how to use QISearch to implement QueryInterface.  It uses the offsetofclass macro from ATL to compute the offset from the base of the CSample object to a specified interface. This object supports two interfaces aside from IUnknown, so there are two non-NULL entries in the QITAB table. The entry for each interface specifies a pointer to the associated IID (IID_IPersist or IID_IPersistFolder) and the offset of the interface pointer relative to the class's base pointer. The sample uses the offsetofclass macro from ATL to determine that offset. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "QISearch",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "that",
        "description": "Type: void* A pointer to the base of a COM object."
      },
      {
        "in_out": "_In_",
        "type": "LPCQITAB",
        "name": "pqit",
        "description": "Type: LPCQITAB An array of QITAB structures. The last structure in the array must have its piid member set to NULL and its dwOffset member set to 0."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns successfully, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Instructs system edit controls to use AutoComplete to help complete URLs or file system paths.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHAutoComplete works on any system edit control, including the edit control and controls that contain edit controls such as ComboBoxEx controls. To retrieve a handle to an edit control embedded in a ComboBoxEx control, send the ComboBoxEx control a CBEM_GETEDITCONTROL message. An application must have invoked either CoInitialize or OleInitialize prior to calling this function. CoUninitialize or OleUninitialize cannot be called until the edit box has finished processing the WM_DESTROY message for hwndEdit. The maximum number of items that can be displayed in an autosuggest drop-down list box is 1000. On versions of Windows prior to Windows Vista and server versions prior to Windows Server 2008, SHAutoComplete should not be called more than once with the same HWND. Doing so results in a memory leak. It prevents the original resources from being released, including the previous instance of the AutoComplete object, enumerator objects that the previous AutoComplete object has referenced, and Windows Graphics Device Interface (GDI) resources. Rather than call SHAutoComplete again with a different set of flags to change the AutoComplete list, call CoCreateInstance with CLSID_AutoComplete to obtain the AutoComplete object. Then pass the HWND to the object to initialize it and provide your own custom enumerator. You can use CLSID_ACLMulti if you want AutoComplete to use multiple lists. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHAutoComplete",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndEdit",
        "description": "Type: HWND The window handle of a system edit control. Typically, this parameter is the handle of an edit control or the edit control embedded in a ComboBoxEx control."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags to control the operation of SHAutoComplete. The first four flags are used to override the Internet Explorer registry settings. The user can change these settings manually by launching the Internet Options property sheet from the Tools menu and clicking the Advanced tab.  SHACF_AUTOAPPEND_FORCE_OFF (0x80000000)   Ignore the registry default and force the AutoAppend feature off. This flag must be used in combination with one or more of the SHACF_FILESYS* or SHACF_URL* flags.  SHACF_AUTOAPPEND_FORCE_ON (0x40000000)   Ignore the registry value and force the AutoAppend feature on. The completed string will be displayed in the edit box with the added characters highlighted. This flag must be used in combination with one or more of the SHACF_FILESYS* or SHACF_URL* flags.  SHACF_AUTOSUGGEST_FORCE_OFF (0x20000000)   Ignore the registry default and force the AutoSuggest feature off. This flag must be used in combination with one or more of the SHACF_FILESYS* or SHACF_URL* flags.  SHACF_AUTOSUGGEST_FORCE_ON (0x10000000)   Ignore the registry value and force the AutoSuggest feature on. A selection of possible completed strings will be displayed as a drop-down list, below the edit box. This flag must be used in combination with one or more of the SHACF_FILESYS* or SHACF_URL* flags.  SHACF_DEFAULT (0x00000000)   The default setting, equivalent to SHACF_FILESYSTEM | SHACF_URLALL. SHACF_DEFAULT cannot be combined with any other flags.  SHACF_FILESYS_ONLY (0x00000010)   Include the file system only.  SHACF_FILESYS_DIRS (0x00000020)   Include the file system and directories, UNC servers, and UNC server shares.  SHACF_FILESYSTEM (0x00000001)   Include the file system and the rest of the Shell (Desktop, Computer, and Control Panel, for example).  SHACF_URLALL (SHACF_URLHISTORY | SHACF_URLMRU)   Include the URLs in the users History and Recently Used lists. Equivalent to SHACF_URLHISTORY | SHACF_URLMRU.  SHACF_URLHISTORY (0x00000002)   Include the URLs in the user's History list.  SHACF_URLMRU (0x00000004)   Include the URLs in the user's Recently Used list.  SHACF_USETAB (0x00000008)   Allow the user to select from the autosuggest list by pressing the TAB key. If this flag is not set, pressing the TAB key will shift focus to the next control and close the autosuggest list. If SHACF_USETAB is set, pressing the TAB key will select the first item in the list. Pressing TAB again will select the next item in the list, and so on. When the user reaches the end of the list, the next TAB key press will cycle the focus back to the edit control. This flag must be used in combination with one or more of the SHACF_FILESYS* or SHACF_URL* flags listed on this page.  SHACF_VIRTUAL_NAMESPACE (0x00000040)"
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a memory stream using a similar process to CreateStreamOnHGlobal.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: IStream* On success, returns a pointer to the created memory stream. Returns NULL if the stream object could not be allocated. ",
    "remarks": "Prior to Windows Vista, this function was not included in the public Shlwapi.h file, nor was it exported by name from Shlwapi.dll. To use it on earlier systems, you must call it directly from the Shlwapi.dll file as ordinal 12. This function creates a memory stream. This is an implementation of the IStream interface that stores its contents in memory. SHCreateMemStream differs from CreateStreamOnHGlobal in the following ways. ",
    "return_type": "IStream*",
    "category": "Windows Shell",
    "name": "SHCreateMemStream",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const BYTE*",
        "name": "pInit",
        "description": "Type: const BYTE* A pointer to a buffer of size cbInit. The contents of this buffer are used to set the initial contents of the memory stream. If this parameter is NULL, the returned memory stream does not have any initial content."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbInit",
        "description": "Type: UINT The number of bytes in the buffer pointed to by pInit. If pInit is set to NULL, cbInit must be zero."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  CreateStreamOnHGlobalfunction creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the IStream interface.",
    "library": "Ole32.lib",
    "min_server": "Windows 2000 Server [desktop apps | Windows Store apps]",
    "header": "Ole2.h",
    "return_value": "This function supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following. ",
    "remarks": "If hGlobal is NULL, the function allocates a new memory handle and the stream is initially empty. If hGlobal is not NULL, the initial contents of the stream are the current contents of the memory block. Thus, CreateStreamOnHGlobal can be used to open an existing stream in memory. The memory handle and its contents are undisturbed by the creation of the new stream object. The initial size of the stream is the size of hGlobal as returned by the GlobalSize function. Because of rounding, this is not necessarily the same size that was originally allocated for the handle. If the logical size of the stream is important, follow the call to this function with a call to the  IStream::SetSize method. The new stream object's initial seek position is the beginning of the stream. After creating the stream object with  CreateStreamOnHGlobal, call  GetHGlobalFromStream to retrieve the memory handle associated with the stream object. If a memory handle is passed to  CreateStreamOnHGlobal or if GetHGlobalFromStream is called, the memory handle of this function can be directly accessed by the caller while it is still in use by the stream object. Appropriate caution should be exercised in the use of this capability and its implications: If the caller sets the fDeleteOnRelease parameter to FALSE, then the caller must also free the hGlobal after the final release. If the caller sets the fDeleteOnRelease parameter to TRUE, the final release will automatically free the hGlobal. The memory handle passed as the hGlobal parameter must be allocated as movable and nondiscardable, as shown in the following example: CreateStreamOnHGlobal will accept a memory handle allocated with GMEM_FIXED, but this usage is not recommended. HGLOBALs allocated with GMEM_FIXED are not really handles and their value can change when they are reallocated. If the memory handle was allocated with GMEM_FIXED and fDeleteOnRelease is FALSE,  the caller must call GetHGlobalFromStream to get the correct handle in order to free it. Prior to Windows 7 and Windows Server 2008 R2, this implementation did not zero memory when calling GlobalReAlloc to grow the memory block. Increasing the size of the stream with IStream::SetSize or by writing to a location past the current end of the stream may leave portions of the newly allocated memory uninitialized. ",
    "return_type": "WINOLEAPI",
    "category": "Windows Shell",
    "name": "CreateStreamOnHGlobal",
    "is_callback": 0,
    "dll": "Ole32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HGLOBAL",
        "name": "hGlobal",
        "description": "A memory handle allocated by the GlobalAlloc function, or if NULL a new handle is to be allocated instead. The handle must be allocated as moveable and nondiscardable."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDeleteOnRelease",
        "description": "A value that indicates whether the underlying handle for this stream object should be automatically freed when the stream object is released. If set to FALSE, the caller must free the hGlobal after the final release. If set to TRUE, the final release will automatically free the hGlobal parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPSTREAM*",
        "name": "ppstm",
        "description": "The address of  IStream* pointer variable that receives the interface pointer to the new stream object. Its value cannot be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "Opens or creates a file and retrieves a stream to read or write to that file.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The SHCreateStreamOnFileEx function extends the semantics of the STGM flags and produces the same effect as calling the CreateFile function. The grfMode and fCreate parameters work together to specify how the function should behave with respect to existing files.   ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateStreamOnFileEx",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszFile",
        "description": "Type: LPCWSTR A pointer to a null-terminated string that specifies the file name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD One or more STGM values that are used to specify the file access mode and how the object that exposes the stream is created and deleted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttributes",
        "description": "Type: DWORD One or more flag values that specify file attributes in the case that a new file is created. For a complete list of possible values, see the dwFlagsAndAttributes parameter of the CreateFile function."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fCreate",
        "description": "Type: BOOL A BOOL value that helps specify, in conjunction with grfMode, how existing files should be treated when creating the stream. See Remarks for details."
      },
      {
        "in_out": "_Reserved_",
        "type": "IStream*",
        "name": "pstmTemplate",
        "description": "Type: IStream* Reserved."
      },
      {
        "in_out": "_Out_",
        "type": "IStream**",
        "name": "ppstm",
        "description": "Type: IStream** Receives an IStream interface pointer for the stream associated with the file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a thread.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if the thread is successfully created, or FALSE otherwise. On failure, use GetLastError to retrieve the specific error value as shown here. ",
    "remarks": "The function pointed to by pfnThreadProc and pfnCallback must take the following form. The function name is arbitrary. The pData parameter points to an application-defined data structure with initialization information. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHCreateThread",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTHREAD_START_ROUTINE",
        "name": "pfnThreadProc",
        "description": "Type: LPTHREAD_START_ROUTINE A pointer to an application-defined function of the LPTHREAD_START_ROUTINE type. If a new thread was successfully created, this application-defined function is called in the context of that thread. SHCreateThread does not wait for the function pointed to by this parameter to complete before returning to its caller.  The application-defined function's return value is the exit code of the thread."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pData",
        "description": "Type: void* A pointer to an optional application-defined data structure that contains initialization data. It is passed to the function pointed to by pfnThreadProc and, optionally, pfnCallback. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "SHCT_FLAGS",
        "name": "dwFlags",
        "description": "Type: SHCT_FLAGS The flags that control the behavior of the function. One or more of the CTF constants."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTHREAD_START_ROUTINE",
        "name": "pfnCallback",
        "description": "Type: LPTHREAD_START_ROUTINE A pointer to an optional application-defined function of the  \t\t\t\t LPTHREAD_START_ROUTINE type. This function is called  \t\t\t\t in the context of the created thread before the function pointed to by  \t\t\t\t pfnThreadProc is called. It will also receive pData as  \t\t\t\t its argument. SHCreateThread will wait for the  \t\t\t\t function pointed to by pfnCallback to return before returning to its caller. The  \t\t\t\t return value of the function pointed to by pfnCallback is ignored."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a per-thread reference to a Component Object Model (COM) object.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "See Managing Thread References for more details on using the Shlwapi thread APIs. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateThreadRef",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG*",
        "name": "pcRef",
        "description": "Type: LONG* A pointer to a value, usually a local variable in the thread's ThreadProc, that is used by the interface in ppunk as a reference counter."
      },
      {
        "in_out": "_Out_",
        "type": "IUnknown**",
        "name": "ppunk",
        "description": "Type: IUnknown** The address of a pointer to an IUnknown interface. If successful, this parameter holds the thread's IUnknown pointer on return. Your application is responsible for freeing the pointer when it is finished."
      }
    ],
    "min_client": "Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a new thread and retrieves its handle.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if the thread is successfully created; otherwise, FALSE ",
    "remarks": "Prior to Windows 7, this function did not have an associated header or library file. To use this function under those earlier operating systems, call LoadLibrary with the DLL name (Shlwapi.dll) to obtain a module handle. Then call GetProcAddress with that module handle and a function ordinal of 615 to get the address of this function. The function pointed to by pfnThreadProc and pfnCallback must take the following form. The function name is arbitrary. The pData parameter points to an application-defined data structure with initialization information. The following code example provides a function pointer prototype typedef for calling SHCreateThreadWithHandle by ordinal and shows how to accomplish such a call. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHCreateThreadWithHandle",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTHREAD_START_ROUTINE",
        "name": "pfnThreadProc",
        "description": "Type: LPTHREAD_START_ROUTINE A pointer to an application-defined function of type LPTHREAD_START_ROUTINE. If a new thread was successfully created, this application-defined function is called in the context of that thread. SHCreateThreadWithHandle does not wait for the function pointed to by pfnThreadProc to complete before returning to its caller. The return value for the function specified by pfnThreadProc is the exit code of the thread."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pData",
        "description": "Type: void* A pointer to an optional application-defined data structure that contains initialization data. It is passed to the function pointed to by pfnThreadProc and, optionally, the function pointed to by pfnCallback."
      },
      {
        "in_out": "_In_",
        "type": "SHCT_FLAGS",
        "name": "flags",
        "description": "Type: SHCT_FLAGS Flags that control the behavior of the function; one or more of the CTF constants."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTHREAD_START_ROUTINE",
        "name": "pfnCallback",
        "description": "Type: LPTHREAD_START_ROUTINE A pointer to an optional application-defined function of type LPTHREAD_START_ROUTINE. This function is called in the context of the created thread before the function pointed to by pfnThreadProc is called. It will also receive pData as its argument. SHCreateThreadWithHandle waits for the function pointed to by pfnCallback to complete before returning to its caller. The return value for the function specified by pfnCallback is ignored."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HANDLE*",
        "name": "pHandle",
        "description": "Type: HANDLE* A pointer to the HANDLE of the created thread. When it is no longer needed, this handle should be closed by calling the CloseHandle function. This value can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the per-thread object reference set by SHSetThreadRef.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the object reference exists, or E_NOINTERFACE otherwise. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetThreadRef",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later);  ShCore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown**",
        "name": "ppunk",
        "description": "Type: IUnknown** The address of a pointer that, when this function returns successfully, points to the object whose reference is stored. Your application is responsible for freeing this resource when it is no longer needed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Stores a per-thread reference to a Component Object Model (COM) object. This allows the caller to control the thread's lifetime so that it can ensure that Windows won't shut down the thread before the caller is ready.",
    "library": "Shlwapi.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Use SHGetThreadRef to retrieve the IUnknown pointer. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetThreadRef",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later);  ShCore.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown of the object for which you want to store a reference. This value can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Decrements a global counter.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: long The value of the counter after the decrement. ",
    "remarks": "",
    "return_type": "long",
    "category": "Windows Shell",
    "name": "SHGlobalCounterDecrement",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SHGLOBALCOUNTER",
        "name": "id",
        "description": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER to decrement."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Gets the current value of a global counter.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: long The current value of the counter. ",
    "remarks": "",
    "return_type": "long",
    "category": "Windows Shell",
    "name": "SHGlobalCounterGetValue",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SHGLOBALCOUNTER",
        "name": "id",
        "description": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER for which to retrieve the current value."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Increments a global counter.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: long The value of the counter after the increment. ",
    "remarks": "",
    "return_type": "long",
    "category": "Windows Shell",
    "name": "SHGlobalCounterIncrement",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SHGLOBALCOUNTER",
        "name": "id",
        "description": "Type: const SHGLOBALCOUNTER The SHGLOBALCOUNTER to increment."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Releases a thread reference before the thread procedure returns.",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHReleaseThreadRef",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[SHRegGetValue may be altered or unavailable in subsequent versions of the operating system or product. Use RegGetValue in its place.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LSTATUS Returns ERROR_SUCCESS if successful, or a nonzero error code defined in Winerror.h otherwise. You can use the FormatMessage function with the FORMAT_MESSAGE_FROM_SYSTEM flag to retrieve a generic description of the error. ",
    "remarks": "SHRegGetValue provides data type checking, boot mode checking, auto-expansion of REG_EXPAND_SZ data, and guaranteed null-termination of REG_SZ, REG_EXPAND_SZ, and REG_MULTI_SZ data. The key identified by hkey must have been opened with KEY_QUERY_VALUE security access. If pszSubKey is not NULL or an empty string, that key also must be able to be opened with KEY_QUERY_VALUE security access in the current calling context. If the data's type is REG_SZ, REG_EXPAND_SZ or REG_MULTI_SZ, then any returned data includes or takes into account the string's null-termination. For example, if pvData is not NULL, the data returned in that buffer is null-terminated. If pcbData is not NULL, the buffer size that it points to includes the bytes required to hold the terminating null character. Unless the SRRF_NOEXPAND flag is set, string data of type REG_EXPAND_SZ is automatically expanded before being returned. The expanded string's type is reported in pdwType as REG_SZ, the pcbData parameter points to the number of bytes written for the expanded string, and the buffer pointed to by pvData holds the expanded version of the string. If pszSubKey is not NULL or an empty string, that key is opened and closed by this function each time it is accessed. If your application must retrieve a series of values from the same subkey, you will see better performance by opening the key using RegOpenKeyEx before calling SHRegGetValue. Use the key returned in the phkResult parameter of RegOpenKeyEx as the hkey parameter in this function, with pszSubKey set to NULL. The potential for an additional call to the registry to read or re-read the data exists when the data type is REG_EXPAND_SZ and the SRRF_NOEXPAND flag has not been set. The following conditions result in that additional call. ",
    "return_type": "LSTATUS",
    "category": "Windows Shell",
    "name": "SHRegGetValue",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HKEY",
        "name": "hkey",
        "description": "Type: HKEY A handle to the currently open key, or any of the following predefined values. HKEY_CLASSES_ROOTHKEY_CURRENT_CONFIGHKEY_CURRENT_USERHKEY_LOCAL_MACHINEHKEY_PERFORMANCE_DATAHKEY_USERS"
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszSubKey",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the relative path from hkey to the subkey to retrieve the value from. This parameter can be NULL or an empty string, in which case the data is retrieved from the hkey location."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszValue",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the name of the value. This parameter can be NULL or an empty string, in which case the data is retrieved from the Default value."
      },
      {
        "in_out": "_In_",
        "type": "SRRF",
        "name": "srrfFlags",
        "description": "Type: SRRF One or more of the SRRF flags that restricts the data to be retrieved. At least one type restriction (SRRF_RT) value must be specified."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pdwType",
        "description": "Type: LPDWORD A pointer to a DWORD that receives the type of data stored in the retrieved value. When using default values, the input pdwType is the type of the default value. For possible values, see Registry Data Types. If the SRRF_NOEXPAND flag is not set, REG_EXPAND_SZ types are automatically expanded and returned as REG_SZ. If type information is not required, this parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "pvData",
        "description": "Type: LPVOID A pointer to a buffer that receives the value's data. This parameter can be NULL if the data is not needed. For example, if you were testing only for a value's existence, the specific value data would be superfluous."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcbData",
        "description": "Type: LPDWORD A pointer to a DWORD that, on entry, contains the size of the destination data buffer pvData, in bytes. This value can be NULL only if pvData is NULL. On exit, pcbData points to one of these values.                       pvDataReturn ValuepcbData NULLERROR_SUCCESSSize in bytes sufficient to hold the registry data. Note that this is not guaranteed to be the precise size, but only a sufficient size. Non-NULLERROR_SUCCESSExact number of bytes written to pvData. Non-NULLERROR_MORE_DATASize in bytes needed to hold the entire data. Note that this is not guaranteed to be the precise size, but only a sufficient size."
      }
    ],
    "min_client": "Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[CharLowerWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use CharLowerW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: LPWSTR If pch is a character string, the function returns a pointer to the converted string. Since the string is converted in place, the return value is equal to pch. If pch is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character. There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call GetLastError. ",
    "remarks": "The preferred method is to use CharLowerW in conjunction with the Microsoft Layer for Unicode (MSLU). CharLowerWrapW must be called directly from Shlwapi.dll, using ordinal 38. ",
    "return_type": "LPWSTR",
    "category": "Windows Shell",
    "name": "CharLowerWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPWSTR",
        "name": "pch",
        "description": "Type: LPWSTR A pointer to a null-terminated Unicode string or a single character. If the high-order word of this parameter is zero, the low-order word must contain only a single character to be converted."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[CharUpperBuffWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use CharUpperBuffW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: DWORD The number of characters processed. ",
    "remarks": "The preferred method is to use CharUpperBuffW in conjunction with the Microsoft Layer for Unicode (MSLU). CharUpperBuffWrapW must be called directly from Shlwapi.dll, using ordinal 44. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "CharUpperBuffWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pch",
        "description": "Type: LPWSTR A pointer to a buffer that contains one or more Unicode characters to process."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchLength",
        "description": "Type: DWORD Specifies the size, in characters, of the buffer pointed to by pch."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[CompareStringWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use CompareStringW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "Type: int If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError may return one of the following error codes. If the function succeeds, the return value is one of the following values.  ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. Strings that are not compared correctly can produce invalid input. Test strings to make sure they are valid before using them and provide error handlers. For more information, see Security Considerations: International Features The preferred method is to use CompareStringW in conjunction with the Microsoft Layer for Unicode (MSLU). CompareStringWrapW must be called directly from Shlwapi.dll, using ordinal 45. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "CompareStringWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "Locale",
        "description": "Type: LCID A locale identifier used for the comparison. This parameter can be one of the following predefined locale identifiers or a locale identifier created by the MAKELCID macro.  LOCALE_SYSTEM_DEFAULT   The system's default locale.  LOCALE_USER_DEFAULT   The current user's default locale."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCmpFlags",
        "description": "Type: DWORD The flags that indicate how the function compares the two strings. By default, these flags are not set. Set to zero to get the default behavior or to any combination of the following values.  NORM_IGNORECASE   Ignore case.  NORM_IGNOREKANATYPE   Do not differentiate between Hiragana and Katakana characters. Corresponding Hiragana and Katakana characters compare as equal.  NORM_IGNORENONSPACE   Ignore nonspacing characters.  NORM_IGNORESYMBOLS   Ignore symbols.  NORM_IGNOREWIDTH   Do not differentiate between a single-byte character and the same character as a double-byte character.  SORT_STRINGSORT   Treat punctuation the same as symbols."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpString1",
        "description": "Type: LPCWSTR A pointer to the first Unicode string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchCount1",
        "description": "Type: int The number of characters in the string pointed to by the lpString1 parameter. The count does not include the terminating null character. If this parameter is a negative value, the string is assumed to be null-terminated and the length is calculated automatically."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpString2",
        "description": "Type: LPCWSTR A pointer to the second Unicode string to be compared."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchCount2",
        "description": "Type: int The number of characters in the string pointed to by the lpString2 parameter. The count does not include the terminating null character. If this parameter is a negative value, the string is assumed to be null-terminated and the length is calculated automatically."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[DAD_AutoScroll is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "The function is successful and the window scrolls only when the bFull parameter of the AUTO_SCROLL_DATA structure is TRUE. Each time this function is called, as long as bFull is FALSE, the iNextSample parameter is incremented by 1 and the current scroll coordinates and time are returned in the AUTO_SCROLL_DATA structure. When iNextSample is equal to NUM_POINTS, bFull is set to TRUE, the function succeeds, and the window scrolls. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_AutoScroll",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window being scrolled."
      },
      {
        "in_out": "_In_",
        "type": "AUTO_SCROLL_DATA*",
        "name": "pad",
        "description": "Type: AUTO_SCROLL_DATA* A pointer to the AUTO_SCROLL_DATA structure."
      },
      {
        "in_out": "_In_",
        "type": "const POINT*",
        "name": "pptNow",
        "description": "Type: const POINT* A pointer to the current scroll coordinates."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[DAD_DragEnterEx is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_DragEnter instead.       ]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_DragEnterEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndTarget",
        "description": "Type: HWND A handle to the window that owns the drag image."
      },
      {
        "in_out": "const",
        "type": "POINT",
        "name": "ptStart",
        "description": "Type: const POINT The coordinates at which to begin displaying the drag image. The coordinates are relative to the upper-left corner of the window, not the client area."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Displays the drag image at the specified position within the window.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "To begin a drag operation, use the ImageList_BeginDrag function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ImageList_DragEnter",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndLock",
        "description": "Type: HWND A handle to the window that owns the drag image."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "x",
        "description": "Type: int The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "y",
        "description": "Type: int The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[DAD_DragEnterEx2 is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_DragEnter instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful, FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_DragEnterEx2",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndTarget",
        "description": "Type: HWND A handle to the window that owns the drag image."
      },
      {
        "in_out": "const",
        "type": "POINT",
        "name": "ptStart",
        "description": "Type: const POINT Specifies the coordinates at which to begin displaying the drag image. The coordinates are relative to the upper-left corner of the window, not the client area."
      },
      {
        "in_out": "_In_opt_",
        "type": "IDataObject*",
        "name": "pdtObject",
        "description": "Type: IDataObject* A pointer to the IDataObject interface on the data object. This data object contains the data being transferred in the drag-and-drop operation. If the drop occurs, this data object will be incorporated into the target. This parameter may be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[DAD_DragLeave is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_DragLeave instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns SUCCEEDED if successful, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_DragLeave",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unlocks the specified window and hides the drag image, allowing the window to be updated.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ImageList_DragLeave",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndLock",
        "description": "Type: HWND A handle to the window that owns the drag image."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[DAD_DragMove is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_DragMove instead.       ]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_DragMove",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "POINT",
        "name": "pt",
        "description": "Type: POINT The coordinates at which to display the drag image. The coordinates are relative to the upper-left corner of the window, not the client area."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Moves the image that is being dragged during a drag-and-drop operation. This function is typically called in response to a WM_MOUSEMOVE message.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "To begin a drag operation, use the ImageList_BeginDrag function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ImageList_DragMove",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "int",
        "name": "x",
        "description": "Type: int The x-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "y",
        "description": "Type: int The y-coordinate at which to display the drag image. The coordinate is relative to the upper-left corner of the window, not the client area."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[DAD_SetDragImage is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_BeginDrag instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "You can clear the drag image by setting the him parameter to -1 and the pptOffset parameter to NULL. The image must have been set within the same thread. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_SetDragImage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HIMAGELIST",
        "name": "him",
        "description": "Type: HIMAGELIST A handle to an image list. This parameter uses the zero index in the ImageList."
      },
      {
        "in_out": "",
        "type": "POINT*",
        "name": "pptOffset",
        "description": "Type: POINT* A pointer to the coordinates used as the hot spot for dragging the image. The coordinates are relative to upper-left corner of the image."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Begins dragging an image.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "This function creates a temporary image list that is used for dragging. In response to subsequent WM_MOUSEMOVE messages, you can move the drag image by using the ImageList_DragMove function. To end the drag operation, you can use the ImageList_EndDrag function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ImageList_BeginDrag",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HIMAGELIST",
        "name": "himlTrack",
        "description": "Type: HIMAGELIST A handle to the image list."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iTrack",
        "description": "Type: int The index of the image to drag."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "dxHotspot",
        "description": "Type: int The x-coordinate of the location of the drag position relative to the upper-left corner of the image."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "dyHotspot",
        "description": "Type: int The y-coordinate of the location of the drag position relative to the upper-left corner of the image."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[DAD_ShowDragImage is available in Windows 2000 and Windows XP. It might be altered or unavailable in subsequent versions. Use ImageList_DragShowNolock instead.       ]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "This function works on locked windows. It does not work on layered windows. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "DAD_ShowDragImage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fShow",
        "description": "Type: BOOL A value that specifies whether to show or hide the image being dragged.  FALSE   Hides the image.  TRUE   Shows the image."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Shows or hides the image being dragged.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns nonzero if successful, or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ImageList_DragShowNolock",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fShow",
        "description": "Type: BOOL A value specifying whether to show or hide the image being dragged. Specify TRUE to show the image or FALSE to hide the image."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[FindResourceWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use FindResourceW instead.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "Type: HRSRC If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. To get extended error information, call the GetLastError function. ",
    "remarks": "If you need to specify a particular localization, use the FindResourceEx function rather than FindResourceWrapW. FindResourceWrapW provides the ability to use Unicode strings in older operating systems. The preferred method is to use FindResourceW in conjunction with the Microsoft Layer for Unicode (MSLU). FindResourceWrapW must be called directly from Shlwapi.dll, using ordinal 66. ",
    "return_type": "HRSRC",
    "category": "Windows Shell",
    "name": "FindResourceWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "Type: HMODULE A handle to the module whose executable file contains the resource. A value of NULL specifies the module handle associated with the image file that the operating system used to create the current process."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpName",
        "description": "Type: LPCWSTR The name of the resource. For more information, see FindResource."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpType",
        "description": "Type: LPCWSTR A pointer to a string that specifies the resource type. For more information, see FindResource."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines the location of a resource with the specified type and name in the specified module.",
    "library": "Kernel32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Type: HRSRC If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "If IS_INTRESOURCE is TRUE for x = lpName or lpType, x specifies the integer identifier of the name or type of the given resource. Otherwise, those parameters are long pointers to null-terminated strings. If the first character of the string is a pound sign (#), the remaining characters represent a decimal number that specifies the integer identifier of the resource's name or type. For example, the string \"#258\" represents the integer identifier 258. To reduce the amount of memory required for a resource, an application should refer to it by integer identifier instead of by name. An application can use FindResource to find any type of resource, but this function should be used only if the application must access the binary resource data by making subsequent calls to LoadResource and then to LockResource. To use a resource immediately, an application should use one of the following resource-specific functions to find the resource and convert the data into a more usable form.  For example, an application can use the LoadIcon function to load an icon for display on the screen. However, the application should use FindResource and LoadResource if it is loading the icon to copy its data to another application. String resources are stored in sections of up to 16 strings per section. The strings in each section are stored as a sequence of counted (not necessarily null-terminated) Unicode strings. The LoadString function will extract the string resource from its corresponding section. For an example, see Updating Resources. ",
    "return_type": "HRSRC",
    "category": "Windows Shell",
    "name": "FindResource",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "Type: HMODULE A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpName",
        "description": "Type: LPCTSTR The name of the resource. Alternately, rather than a pointer, this parameter can be MAKEINTRESOURCE(ID), where ID is the integer identifier of the resource. For more information, see the Remarks section below."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpType",
        "description": "Type: LPCTSTR The resource type. Alternately, rather than a pointer, this parameter can be MAKEINTRESOURCE(ID), where ID is the integer identifier of the given   resource type. For standard resource types, see Resource Types. For more information, see the Remarks section below."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[GetDateFormatWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use GetDateFormatW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: int If the function succeeds, the return value is the number of characters written to the buffer pointed to by pwzDateStr. If the cchDate parameter is zero, the return value is the number of characters required to hold the formatted date string. The count includes the terminating null character. If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError may return one of the following error codes. ",
    "remarks": "GetDateFormatWrapW provides the ability to use Unicode strings in operating systems earlier than Windows XP. The preferred method is to use GetDateFormatW in conjunction with the Microsoft Layer for Unicode (MSLU). GetDateFormatWrapW must be called directly from Shlwapi.dll, using ordinal 311. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "GetDateFormatWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "Locale",
        "description": "Type: LCID The locale for which the date string is to be formatted. If pwzFormat is NULL, the function formats the string according to the date format for this locale. If pwzFormat is not NULL, the function uses the locale only for information not specified in the format picture string (for example, the locale's day and month names).                               This parameter can be a locale identifier created by the MAKELCID macro, or one of the following predefined values.  LOCALE_SYSTEM_DEFAULT   Default system locale.  LOCALE_USER_DEFAULT   Default user locale."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Specifies various function options. If pwzFormat is not NULL, this parameter must be zero.                               If pwzFormat is NULL, you can specify a combination of the following values. If you do not specify either DATE_YEARMONTH, DATE_SHORTDATE, or DATE_LONGDATE, and pwzFormat is NULL, then DATE_SHORTDATE is used as the default.  LOCALE_NOUSEROVERRIDE   If set, the function formats the string using the system default date format for the specified locale. If not set, the function formats the string using any user overrides to the locale's default date format.  LOCALE_USE_CP_ACP   Uses the system ANSI code page for string translation instead of the locale's code page.  DATE_SHORTDATE   Uses the short date format. This value cannot be used with DATE_LONGDATE or DATE_YEARMONTH.  DATE_LONGDATE   Uses the long date format. This value cannot be used with DATE_SHORTDATE or DATE_YEARMONTH.  DATE_YEARMONTH   Uses the year/month format. This value cannot be used with DATE_SHORTDATE or DATE_LONGDATE.  DATE_USE_ALT_CALENDAR   Uses the alternate calendar, if one exists, to format the date string. If this flag is set, the function uses the default format for that alternate calendar, rather than using any user overrides. The user overrides will be used only in the event that there is no default format for the specified alternate calendar.  DATE_LTRREADING   Adds marks for left-to-right reading layout. This value cannot be used with DATE_RTLREADING.  DATE_RTLREADING   Adds marks for right-to-left reading layout. This value cannot be used with DATE_LTRREADING."
      },
      {
        "in_out": "_In_",
        "type": "const SYSTEMTIME*",
        "name": "lpDate",
        "description": "Type: const SYSTEMTIME* A pointer to a SYSTEMTIME structure that contains the date information to be formatted. If this pointer is NULL, the function uses the current local system date."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwzFormat",
        "description": "Type: LPCWSTR A pointer to a format picture to use to form the date string. If pwzFormat is NULL, the function uses the date format of the specified locale. See GetDateFormat for more details."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pwzDateStr",
        "description": "Type: LPWSTR A pointer to a buffer that receives the formatted date string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchDate",
        "description": "Type: int Specifies the size, in characters, of the pwzDateStr buffer. If cchDate is zero, the function returns the number of characters required to hold the formatted date string, and the buffer pointed to by pwzDateStr is not used."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[GetTimeFormatWrapW is available for use in Windows XP. It may not be available in subsequent versions. You should use GetTimeFormatW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: int If the function succeeds, the return value is the number of characters written to the buffer pointed to by pwzTimeStr. If the cchTime parameter is zero, the return value is the number of characters required to hold the formatted time string. The count includes the terminating null character. If the function fails, the return value is zero. To get extended error information, call GetLastError. GetLastError may return one of the following error codes. ",
    "remarks": "GetTimeFormatWrapW provides the ability to use Unicode strings in operating systems earlier than Windows XP. The preferred method is to use GetTimeFormatW in conjunction with the Microsoft Layer for Unicode (MSLU). GetTimeFormatWrapW must be called directly from Shlwapi.dll, using ordinal 310. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "GetTimeFormatWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "Locale",
        "description": "Type: LCID Specifies the locale for which the time string is to be formatted. If pwzFormat is NULL, the function formats the string according to the time format for this locale. If pwzFormat is not NULL, the function uses the locale only for information not specified in the format picture string (for example, the locale's time markers).                               This parameter can be a locale identifier created by the MAKELCID macro, or one of the following predefined values.  LOCALE_SYSTEM_DEFAULT   Default system locale.  LOCALE_USER_DEFAULT   Default user locale."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Specifies various function options. You can specify a combination of the following values.  LOCALE_NOUSEROVERRIDE   If set, the function formats the string using the system default time format for the specified locale. If not set, the function formats the string using any user overrides to the locale's default time format. This flag can only be set if pwzFormat is NULL.  LOCALE_USE_CP_ACP   Uses the system ANSI code page for string translation instead of the locale code page.  TIME_NOMINUTESORSECONDS   Does not use minutes or seconds.  TIME_NOSECONDS   Does not use seconds.  TIME_NOTIMEMARKER   Does not use a time marker.  TIME_FORCE24HOURFORMAT   Always uses a 24-hour time format."
      },
      {
        "in_out": "_In_",
        "type": "const SYSTEMTIME*",
        "name": "lpTime",
        "description": "Type: const SYSTEMTIME* A pointer to a SYSTEMTIME structure that contains the time information to be formatted. If this pointer is NULL, the function uses the current local system time."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwzFormat",
        "description": "Type: LPCWSTR A pointer to a format to use to form the time string. If pwzFormat is NULL, the function uses the time format of the specified locale. See GetTimeFormat for more details."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pwzTimeStr",
        "description": "Type: LPWSTR A pointer to a buffer that receives the formatted time string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cchTime",
        "description": "Type: int The size, in characters, of the pwzTimeStr buffer. If cchTime is zero, the function returns the number of characters required to hold the formatted time string, and the buffer pointed to by pwzTimeStr is not used."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[GUIDFromString is available through Windows XP with Service Pack 2 (SP2) or Windows Vista. It might be altered or unavailable in subsequent versions. Applications should use CLSIDFromString or IIDFromString in place of this function.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL TRUE if the GUID was created successfully; otherwise, FALSE. ",
    "remarks": "This function is not declared in a header or exported by name from a .dll file. It must be loaded from Shell32.dll as ordinal 703 for GUIDFromStringA and ordinal 704 for GUIDFromStringW. It can also be accessed from Shlwapi.dll as ordinal 269 for GUIDFromStringA and ordinal 270 for GUIDFromStringW. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GUIDFromString",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "psz",
        "description": "Type: LPCTSTR A pointer to the null-terminated string to convert. The string should be in the following form: {00000000-0000-0000-0000-000000000000}"
      },
      {
        "in_out": "_Out_",
        "type": "LPGUID",
        "name": "pguid",
        "description": "Type: LPGUID Pointer to a buffer to receive the GUID when this method returns."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[IsCharAlphaNumericWrapW is available for use in Windows XP. It will not be available in subsequent versions. You should use IsCharAlphaNumericW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL If the character is alphanumeric, the return value is nonzero. If the character is not alphanumeric, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "IsCharAlphaNumericWrapW provides the ability to use Unicode strings in operating systems earlier than Windows XP. The preferred method is to use IsCharAlphaNumericW in conjunction with the Microsoft Layer for Unicode (MSLU). IsCharAlphaNumericWrapW must be called directly from Shlwapi.dll, using ordinal 28. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IsCharAlphaNumericWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WCHAR",
        "name": "ch",
        "description": "Type: WCHAR The Unicode character to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Ensures that the common control DLL (Comctl32.dll) is loaded, and registers specific common control classes from the  DLL. An application must call this function before creating a common control.",
    "library": "Comctl32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Commctrl.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "The effect of each call to InitCommonControlsEx is cumulative. For example, if InitCommonControlsEx is called with the ICC_UPDOWN_CLASS flag, then is later called with the ICC_HOTKEY_CLASS flag, the result is that both the up-down and hot key common control classes are registered and available to the application. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "InitCommonControlsEx",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 4.70 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const LPINITCOMMONCONTROLSEX",
        "name": "lpInitCtrls",
        "description": "Type: const LPINITCOMMONCONTROLSEX A pointer to an INITCOMMONCONTROLSEX structure that contains information specifying which control classes will be registered."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The ParseField function is currently expected to be available for use in the next version of the Microsoft Windows operating system. It might be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Util.h",
    "return_value": "Type: bool Returns TRUE if the function is successful and FALSE if it fails. ",
    "remarks": "The fields in the string must be separated by commas. Leading and trailing spaces are removed. ",
    "return_type": "bool",
    "category": "Windows Shell",
    "name": "ParseField",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR*",
        "name": "szData",
        "description": "Type: LPCTSTR* A pointer to the line from Setup.inf."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "n",
        "description": "Type: int INT that indicates which field to extract.   (0)   Indicates the field before an equals sign (=).   (1)   Indicates the first field."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR*",
        "name": "szBuf",
        "description": "Type: LPTSTR* A pointer to the buffer that receives the extracted field."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iBufLen",
        "description": "Type: int INT that receives the size of the buffer that receives the extracted field."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHCreateProcessAsUserW is not implemented under Windows XP or later systems.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful, or FALSE if not. To retrieve extended error information, call GetLastError. ",
    "remarks": "This function is similar to ShellExecuteEx with runas as the verb. However, SHCreateProcessAsUserW creates a process that runs in the security context of the user represented by the hUserToken member of the structure pointed to by pscpi. The lpProcessInformation member can be used to return a PROCESS_INFORMATION structure with information on the new process. The runas verb must be supported by the executable file's file type. The .exe file type supports runas. Use the AssocQueryString function to check whether runas is supported by other file types. The following code fragment illustrates the syntax. For a discussion of how to use the Shell to launch applications, see Launching Applications. SHCreateProcessAsUserW is not supported under Windows XP. Users requiring similar functionality should examine CreateProcess, CreateProcessAsUser, CreateProcessWithLogonW and ShellExecuteEx, carefully evaluating each based on required functionality and security. IQueryAssociations can be used to extract information used with CreateProcess, if necessary. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHCreateProcessAsUserW",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSHCREATEPROCESSINFOW",
        "name": "pscpi",
        "description": "Type: PSHCREATEPROCESSINFOW A pointer to an SHCREATEPROCESSINFOW structure with information on how to create the process."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHDestroyPropSheetExtArray is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHDestroyPropSheetExtArray",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HPSXA",
        "name": "hpsxa",
        "description": "Type: HPSXA The handle of the array that contains pointers to the property sheet handlers to destroy."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "[SHExtractIconsW is available through Windows XP Service Pack 2 (SP2). It might be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: UINT A nonzero value if successful; otherwise, zero. ",
    "remarks": "SHExtractIconsW extracts from the following file types. Extractions from Windows 3.x 16-bit executable files (.exe or .dll) are also supported. The cxIcon and cyIcon parameters specify the size of the icons to extract. Two sizes can be extracted through each parameter by splitting the value between its LOWORD and HIWORD. Put the first desired size in the LOWORD of the parameter and the second size in the HIWORD. For example, MAKELONG(24, 48) for both cxIcon and cyIcon extracts both 24 and 48 sized icons. The calling process is responsible for destroying all icons extracted through this function by calling the DestroyIcon function. SHExtractIconsW is not exported by name or declared in a public header file. To use it, you must declare a matching prototype and use GetProcAddress to request a function pointer from Shell32.dll that can be used to call this function. ",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "SHExtractIconsW",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszFileName",
        "description": "Type: LPCWSTR A pointer to the file name from which to extract the icons."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nIconIndex",
        "description": "Type: int The index of the first icon to extract from the resource named in pszFileName."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cxIcon",
        "description": "Type: int The desired width of the icon. See Remarks."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cyIcon",
        "description": "Type: int The desired height of the icon. See Remarks."
      },
      {
        "in_out": "_Out_",
        "type": "HICON*",
        "name": "phIcon",
        "description": "Type: HICON* When this function returns, contains a pointer to the array of icon handles."
      },
      {
        "in_out": "_Out_",
        "type": "UINT*",
        "name": "pIconId",
        "description": "Type: UINT* When this function returns, contains a pointer to the resource identifier of the extracted icon that best fits the current display device. If there is no identifier available for this format, it contains 0xFFFFFFFF. If no identifier can be obtained for any other reason, returns zero."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "nIcons",
        "description": "Type: UINT The number of icons to extract from the resource named in pszFileName. This parameter is valid only when the resource is a .exe or .dll file."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "flags",
        "description": "Type: UINT The flags that control this function. For possible values, see the fuLoad parameter of the LoadImage function."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Carries out the clipboard shutdown sequence. It also releases the IDataObject pointer that was placed on the clipboard by the OleSetClipboard function.",
    "library": "Ole32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ole2.h",
    "return_value": "This function returns S_OK on success. Other possible values include the following.  ",
    "remarks": "OleFlushClipboard renders the data from a data object onto the clipboard and releases the IDataObject pointer to the data object. While the application that put the data object on the clipboard is running, the clipboard holds only a pointer to the data object, thus saving memory. If you are writing an application that acts as the source of a clipboard operation, you can call the OleFlushClipboard function when your application is closed, such as when the user exits from your application. Calling OleFlushClipboard enables pasting and paste-linking of OLE objects after application shutdown. Before calling OleFlushClipboard, you can easily determine if your data is still on the clipboard with a call to the OleIsCurrentClipboard function. OleFlushClipboard leaves all formats offered by the data transfer object, including the OLE 1 compatibility formats, on the clipboard so they are available after application shutdown. In addition to OLE 1 compatibility formats, these include all formats offered on a global handle medium (all except for TYMED_FILE) and formatted with a NULL target device. For example, if a data-source application offers a particular clipboard format (say cfFOO) on an IStorage object, and calls the OleFlushClipboard function, the storage object is copied into memory and the hglobal memory handle is put on the clipboard. To retrieve the information on the clipboard, you can call the OleGetClipboard function from another application, which creates a default data object, and the hglobal from the clipboard again becomes a storage object. Furthermore, the FORMATETC enumerator and the IDataObject::QueryGetData method would all correctly indicate that the original clipboard format (cfFOO) is again available on a TYMED_ISTORAGE. To empty the clipboard, call the OleSetClipboard function specifying a NULL value for its parameter. The application should call this when it closes if there is no need to leave data on the clipboard after shutdown, or if data will be placed on the clipboard using the standard Windows clipboard functions. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "OleFlushClipboard",
    "is_callback": 0,
    "dll": "Ole32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHGetMalloc is available through Windows Vista and Windows Server 2003, but may be altered or unavailable in subsequent versions of the operating system or product. See the Remarks section for alternate recommendations.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHGetMalloc was introduced in Windows 95 and Microsoft Windows NT 4.0, but as of Windows 2000 it is no longer necessary. In its place, programs can call the equivalent (and easier to use) CoTaskMemAlloc and CoTaskMemFree. If you find an older reference document that suggests or even requires the use of SHGetMalloc, it is acceptable and encouraged to use CoTaskMemAlloc and CoTaskMemFree instead. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetMalloc",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "LPMALLOC*",
        "name": "ppMalloc",
        "description": "Type: LPMALLOC* The address of a pointer that receives the Shell's IMalloc interface pointer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[SHGetShellStyleHInstance is available for use in the Windows XP operating system up to and including Service Pack 2 (SP2). It is not available in later versions of Windows, such as Windows Vista.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HINSTANCE A handle to Shellstyle.dll. ",
    "remarks": "SHGetShellStyleHInstance first attempts to load the version of Shellstyle.dll from the current active visual style. If that is unsuccessful, the version stored in the System32 directory is used. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "SHGetShellStyleHInstance",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.             ]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns a non-negative value if successful, -1 otherwise. ",
    "remarks": "This function is not included in a public header or library. It can be accessed through GetProcAddress or extracted from comctl32.dll by its ordinal, which is 401 for AddMRUStringW. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "AddMRUStringW",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hMRU",
        "description": "Type: HANDLE The handle of the MRU list."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szString",
        "description": "Type: LPCTSTR A pointer to the data. This can be either a string or, if the MRU list was created with the MRU_BINARY flag, binary data. In the case of binary data, the first DWORD indicates its size."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[This function is available in Windows 2000 and through Windows XP Service Pack 2 (SP2). It is no longer available as of Windows Vista.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns 0. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "CallCPLEntry16",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINSTANCE",
        "name": "hInst",
        "description": "Type: HINSTANCE Ignored."
      },
      {
        "in_out": "_In_",
        "type": "FARPROC16",
        "name": "lpfnEntry",
        "description": "Type: FARPROC16 Ignored."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndCPL",
        "description": "Type: HWND Ignored."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT Ignored."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam1",
        "description": "Type: LPARAM  Ignored."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam2",
        "description": "Type: LPARAM  Ignored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: STDAPI Return values include the following.  ",
    "remarks": "This function has no associated .lib file. You must use LoadLibrary and GetProcAddress to use it. ",
    "return_type": "STDAPI",
    "category": "Windows Shell",
    "name": "CanShareFolderW",
    "is_callback": 0,
    "dll": "Ntshrui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszPath",
        "description": "Type: LPCWSTR A pointer to a string that specifies the path of the folder to test."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[CIDLData_CreateFromIDArray is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The data object created by this function offers the Shell clipboard format identifier CFSTR_SHELLIDLIST. This data object also supports IDataObject::SetData calls to pick up other clipboard formats. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CIDLData_CreateFromIDArray",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE A fully qualified IDLIST for the root of the items specified in apidl."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cidl",
        "description": "Type: UINT The number of entries in the apidl array."
      },
      {
        "in_out": "_In_",
        "type": "PCUIDLIST_RELATIVE_ARRAY",
        "name": "apidl",
        "description": "Type: PCUIDLIST_RELATIVE_ARRAY The array of item IDs relative to pidlFolder. Typically, apidl is an array of child IDs and pidlFolder is a full PIDL for those items. However, pidlFolder can be a null PIDL (desktop IDLISTs). In that case, apidl can contain fully qualified ID lists."
      },
      {
        "in_out": "_Out_",
        "type": "IDataObject**",
        "name": "ppdtobj",
        "description": "Type: IDataObject** The address to a pointer to the object that implements IDataObject."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ConnectToConnectionPoint",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "punk",
        "description": "Type: IUnknown* A pointer to the IUnknown interface of the object to be connected to the connection point container. If you set fConnect to FALSE to indicate that you are disconnecting the object, this parameter is ignored and can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riidEvent",
        "description": "Type: REFIID The IID of the interface on the connection point container whose connection point object is being requested."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fConnect",
        "description": "Type: BOOL TRUE if a connection is being established; FALSE if a connection is being broken."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkTarget",
        "description": "Type: IUnknown* A pointer to the connection point container's IUnknown interface."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwCookie",
        "description": "Type: DWORD* A connection token. If you set fConnect to TRUE to make a new connection, this parameter receives a token that uniquely identifies the connection. If you set fConnect to FALSE to break a connection, this parameter must point to the token that you received when you called ConnectToConnectionPoint to establish the connection."
      },
      {
        "in_out": "_Out_opt_",
        "type": "IConnectionPoint**",
        "name": "ppcpOut",
        "description": "Type: IConnectionPoint** A pointer to the connection point container's IConnectionPoint interface, if the operation was successful. The calling application must release this pointer when it is no longer needed. If the request is unsuccessful, the pointer receives NULL. This parameter is optional and can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Use CreateHardwareEventMoniker when registering running applications so that those applications have access to AutoPlay events. To use AutoPlay events in running applications, you must first create a new component that implements the IHWEventHandler interface. Initialize this interface with the InitCmdLine value from the particular handler's entry under the Handlers key, because AutoPlay does not call the Initialize method. You should call CreateHardwareEventMoniker to get a moniker that represents your component and its event handler. Then, use the value returned in the ppmoniker parameter to register your component in the running object table (ROT) as shown in the example. Note that CreateHardwareEventMoniker is not defined in a header file. To use it in your code, you must obtain a handle to the Shsvcs.dll file through a call to LoadLibrary. You then use that handle in a call to GetProcAddress to obtain an instance of the CreateHardwareEventMoniker function. The call to IRunningObjectTable::Register requires that you enter the following AppID information in the registry. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "CreateHardwareEventMoniker",
    "is_callback": 0,
    "dll": "Shsvcs.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFCLSID",
        "name": "clsid",
        "description": "Type: REFCLSID The ID of the class to which the moniker binds."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszEventHandler",
        "description": "Type: LPCTSTR The name of the event handler."
      },
      {
        "in_out": "_Out_",
        "type": "IMoniker**",
        "name": "ppmoniker",
        "description": "Type: IMoniker** The address of a pointer variable that receives the IMoniker interface pointer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[This function is not available as of Windows Vista.]",
    "library": "",
    "min_server": "",
    "header": "",
    "return_value": "Type: BOOL Returns TRUE if the new user profile was created successfully; otherwise, FALSE. ",
    "remarks": "This function is not declared in the software development kit (SDK) headers and has no associated import library. You must use the LoadLibrary and GetProcAddress functions to link to Userenv.dll. The ANSI version of the function, CreateUserProfileExA is referenced from Userenv.dll as ordinal 153. The Unicode version, CreateUserProfileExW is referenced as ordinal 154. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "CreateUserProfileEx",
    "is_callback": 0,
    "dll": "Userenv.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "Type: PSID The SID of the new user."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpUserName",
        "description": "Type: LPCTSTR Pointer to a buffer that contains the user name of the new user."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpUserHive",
        "description": "Type: LPCTSTR Pointer to a buffer that contains the registry hive to use. This parameter can be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpProfileDir",
        "description": "Type: LPTSTR Pointer to a buffer that, when this function returns, receives the user's profile directory path. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDirSize",
        "description": "Type: DWORD Size of the buffer specified by lpProfileDir, in TCHARs."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bWin9xUpg",
        "description": "Type: BOOL TRUE if the user profile is being created as part of a profile migration from Windows 9x; otherwise, FALSE. ..."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "[This function is deprecated and might be altered or unavailable in subsequent versions.]",
    "library": "Cscapi.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cscsearchapiif.hxx",
    "return_value": "Type: NTSTATUS STATUS_SUCCESS if initialization was successful; otherwise an NTSTATUS value that specifies an error. ",
    "remarks": "This class is not included in a public header or library file in Windows versions before Windows 7. To use this function in earlier versions, call LoadLibrary with the DLL name (Cscapi.dll) to obtain a module handle, and then call GetProcAddress with that module handle and the desired function name to get the address of this function. The following function pointer type definition can be used to call CscSearchApiGetInterface. The following code example provides a function pointer prototype type definition for calling CscSearchApiGetInterface, and shows how to accomplish such a call. ",
    "return_type": "NTSTATUS",
    "category": "Windows Shell",
    "name": "CscSearchApiGetInterface",
    "is_callback": 0,
    "dll": "Cscapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Version",
        "description": "Type: ULONG The interface version of the CCscSearchApiInterface object. Set to _CSC_SEARCHAPI_INTERFACE_VERSION."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Cookie",
        "description": "Type: ULONG The interface cookie for the CCscSearchApiInterface object. Set to _CSC_SEARCHAPI_INTERFACE_COOKIE."
      },
      {
        "in_out": "_Out_",
        "type": "CCscSearchApiInterface**",
        "name": "Interface",
        "description": "Type: CCscSearchApiInterface** The address of a pointer that, when this method returns successfully, points to the created CCscSearchApiInterface object."
      }
    ],
    "min_client": "Windows Vista, Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is retained only for backward compatibility. Use ExpandEnvironmentStrings instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: DWORD If the expanded string fits in the buffer, TRUE is returned in the HIWORD and the length, in characters, of the new pszSrc is returned in the LOWORD. If the expanded string is too large for the buffer, FALSE is returned in the HIWORD and cchSrc in the LOWORD. ",
    "remarks": "Parameters must contain valid, non-NULL values. You must validate these values. Failure to do so can provide unexpected results. Because the string that is returned in pszSrc will typically be longer than the input string, make sure that the buffer is large enough to hold the expanded version of the string. The allotted size of the cchSrc buffer for ANSI strings must be one larger than the buffer for a Unicode string. When dealing with ANSI strings, use the formula buffer size = string length + terminating null character + 1 to determine the minimum correct buffer size. Because environment variables can be added by the user or applications, the complete list is system-dependent. The following environment variables are standard and are available to both interactive applications and services. The following are only available to interactive applications. The environment variables that correspond to file system folders can be mapped to an equivalent CSIDL or KNOWNFOLDERIDvalue can be obtained through SHGetFolderLocation or SHGetKnownFolderPath. CSIDLs and KNOWNFOLDERIDs are more reliable than environment variable names and should be used whenever possible. The following console application demonstrates the use of DoEnvironmentSubstW. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "DoEnvironmentSubst",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "pszSrc",
        "description": "Type: LPTSTR A pointer to a null-terminated string that contains references to one or more environment variables, each in the following form. Case is ignored.      \t\t\t\t\t                                Copy     %VariableName%     Any character in the string that is not enclosed in '%' characters is ignored and returned unchanged. Therefore, if your string contains multiple environment variables, you can use any character other than '%' as a separator, including spaces or no separator. When this function returns successfully, each %VariableName% is replaced with its expanded value. The replacement rules are the same as those used by the command interpreter. If the variable name is not found on the system, the %variableName% is left as it was submitted on entry. If this function fails due to the expanded string being too large for the buffer, the contents of this buffer are left unchanged."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchSrc",
        "description": "Type: UINT The size, in characters, of the buffer pointed to by pszSrc. Note that the buffer must be large enough to hold the returned string."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[DriveType is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns one of the following values.  ",
    "remarks": "DriveType is equivalent to calling RealDriveType. RealDriveType is the preferred function. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "DriveType",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iDrive",
        "description": "Type: int The number of the drive that you want to test. \"A:\" corresponds to 0, \"B:\" to 1, and so on."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.             ]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: int Returns one of the following values. ",
    "remarks": "This function is not included in a public header or library. It can be accessed through GetProcAddress or extracted from comctl32.dll by its ordinal, which is 403 for EnumMRUListW. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "EnumMRUListW",
    "is_callback": 0,
    "dll": "Comctl32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hMRU",
        "description": "Type: HANDLE The handle of the MRU list, obtained when the list was created."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nItem",
        "description": "Type: int The item to return. If this value is less than 0, the function returns the number of items in the MRU list."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "lpData",
        "description": "Type: void* A pointer to a buffer that receives the item requested in nItem. If nItem is less than 0, the contents of this buffer are unchanged."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uLen",
        "description": "Type: UINT The size of the buffer, including the terminating null character. If the MRU list was created with the MRU_BINARY flag, this is the size in bytes. Otherwise, it is the size in characters."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available on Windows XP with Service Pack 2 (SP2) through Windows Vista. It might be altered or unavailable in subsequent versions of Windows. Client applications instead should use IAttachmentExecute to present a user environment that provides safe download and exchange of files through email and messaging attachments.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is not declared in a public header or included in a library file. To use it you must load it directly from Winshfhc.dll by ordinal 101. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "EstimateFileRiskLevel",
    "is_callback": 0,
    "dll": "Winshfhc.dll (version 5.1 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszFilePath",
        "description": "Type: LPCWSTR A pointer to a null-terminated string that contains the path of the file that is being checked against the handler."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszExt",
        "description": "Type: LPCWSTR A pointer to a null-terminated string that contains the extension of the file that is being checked, either with or without its leading period. For instance, \".txt\" or \"txt\"."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszHandler",
        "description": "Type: LPCWSTR A pointer to a null-terminated string that contains the path of the handler for the file."
      },
      {
        "in_out": "_Out_",
        "type": "FILE_RISK_LEVEL*",
        "name": "pfrlEstimate",
        "description": "Type: FILE_RISK_LEVEL* When this function returns successfully, contains a pointer to one of the following values that state the estimated risk.  FRL_NO_OPINION (0)   The format of the file is not identified or the handler is not identified. Insufficient information available for a meaningful answer.  FRL_LOW (1)   The format of the file is completely understood, the handler is known, and there is high confidence that no extraneous code will be executed.  FRL_MODERATE (2)   The format of the file is identified, but it is not sufficiently understood to label as either a high or low risk.  FRL_HIGH (3)   The file format is understood and elevated risk factors have been identified.  FRL_BLOCK (4)   The file format is specifically blocked for this handler."
      }
    ],
    "min_client": "Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[ExtractAssociatedIconEx is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: HICON Returns the icon's handle if successful, otherwise NULL. ",
    "remarks": "The icon handle returned by this function must be released by calling DestroyIcon when it is no longer needed. ",
    "return_type": "HICON",
    "category": "Windows Shell",
    "name": "ExtractAssociatedIconEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Reserved_",
        "type": "HINSTANCE",
        "name": "hInst",
        "description": "Type: HINSTANCE The handle of the module from which to extract the icon."
      },
      {
        "in_out": "_Inout_",
        "type": "LPTSTR",
        "name": "lpIconPath",
        "description": "Type: LPTSTR Pointer to a string that, on entry, specifies the full path and file name of the file that contains the icon. The function extracts the icon handle from that file, or from an executable file associated with that file.                        When this function returns, if the icon handle was obtained from an executable file (either an executable file directly pointed to by this parameter or an associated executable file) the function stores the full path and file name of that executable in the buffer pointed to by this parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "LPWORD",
        "name": "lpiIconIndex",
        "description": "Type: LPWORD Pointer to a WORD value that, on entry, specifies the index of the icon whose handle is to be obtained.                        When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's index in that file."
      },
      {
        "in_out": "_Inout_",
        "type": "LPWORD",
        "name": "lpiIconId",
        "description": "Type: LPWORD Pointer to a WORD value that, on entry, specifies the ID of the icon whose handle is to be obtained.                       When the function returns, if the icon handle was obtained from an executable file (either an executable file pointed to by lpIconPath or an associated executable file), this value points to the icon's ID within that file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL If the user specifies a file name and clicks OK, the return value is TRUE. The buffer that pszFilePath points to contains the full path and file name that the user specifies. If the user cancels or closes the Open dialog box or an error occurs, the return value is FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "GetFileNameFromBrowse",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner."
      },
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszFilePath",
        "description": "Type: PWSTR A null-terminated Unicode string that contains a file name used to initialize the File Name edit control. This string corresponds to the OPENFILENAME structure's lpstrFile member and is used in exactly the same way."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchFilePath",
        "description": "Type: UINT The number of characters in pszFilePath, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszWorkingDir",
        "description": "Type: PCWSTR The fully qualified file path of the initial directory. This string corresponds to the OPENFILENAME structure's lpstrInitialDir member and is used in exactly the same way."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszDefExt",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the default file name extension. This extension is added to pszFilePath if the user does not specify an extension. The string should not contain any '.' characters. If this string is NULL and the user fails to type an extension, no extension is appended."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszFilters",
        "description": "Type: PCWSTR A null-terminated Unicode string that defines the filter. This string corresponds to the OPENFILENAME structure's lpstrFilter member and is used in exactly the same way."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "szTitle",
        "description": "Type: PCWSTR A null-terminated Unicode string that is placed in the title bar of the dialog box. If this value is NULL, the system uses the default title."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[GetMenuPosFromID is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int The item's zero-based position in the menu. ",
    "remarks": "Beginning with Windows Vista, this function is declared in Shlwapi.h. Windows XP:  This function is declared in Shlwapi.dll. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "GetMenuPosFromID",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.82 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU The handle of the menu."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "id",
        "description": "Type: UINT An application-defined 16-bit value that identifies the menu item."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a COM error-code otherwise. ",
    "remarks": "When you are finished with the ITEMIDLIST structure, you must free it by calling ILFree. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILLoadFromStream",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer that indicates the IStream interface that the ITEMIDLIST loads from."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_RELATIVE*",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE* Address of a pointer to an ITEMIDLIST structure. ILLoadFromStream allocates the necessary memory for the structure, and assigns the address to this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[ILLoadFromStreamEx(IStream*, PIDLIST_ABSOLUTE*)      is available for use in the operating systems specified in the Requirements section. It may be altered or      unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILLoadFromStreamEx(IStream*, PIDLIST_ABSOLUTE*)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface from which the absolute        ITEMIDLIST loads."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* When this method returns and succeeds, contains the resulting absolute        ITEMIDLIST. If it fails, contains        NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[ILLoadFromStreamEx(IStream*, PIDLIST_RELATIVE*) is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILLoadFromStreamEx(IStream*, PIDLIST_RELATIVE*)",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface from which the ITEMIDLIST loads."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_RELATIVE*",
        "name": "pidl",
        "description": "Type: PIDLIST_RELATIVE* When this method returns and succeeds, contains the resulting relative ITEMIDLIST. If it fails, contains NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[ILLoadFromStreamEx(IStream*, PITEMID_CHILD*)      is available for use in the operating systems specified in the Requirements section. It may be altered or      unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For use where STRICT_TYPED_ITEMIDS is defined. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "ILLoadFromStreamEx(IStream*, PITEMID_CHILD*)",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pstm",
        "description": "Type: IStream* A pointer to the IStream interface from which the child        PIDL loads."
      },
      {
        "in_out": "_Out_",
        "type": "PITEMID_CHILD*",
        "name": "ppidl",
        "description": "Type: PITEMID_CHILD* When this function returns and succeeds, contains a child PIDL, which contains exactly one        SHITEMID structure. If it fails, contains        NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. Use GetDriveType or WNetGetConnection instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int This function returns one of the following values.  ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "IsNetDrive",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iDrive",
        "description": "Type: int An integer that indicates which drive letter you want to test. Set it to 0 for  A:, 1 for B:, and so on."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[IsUserAnAdmin is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the user is a member of the Administrator's group; otherwise, FALSE. ",
    "remarks": "This function is a wrapper for CheckTokenMembership. It is recommended to call that function directly to determine Administrator group status rather than calling  IsUserAnAdmin. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "IsUserAnAdmin",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[LPFNDFMCALLBACK is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if the message was handled, or an error value otherwise, including the following:  ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Windows Shell",
    "name": "LPFNDFMCALLBACK pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to the IShellFolder object the message applies to. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the window that contains the view. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "IDataObject*",
        "name": "pdtobj",
        "description": "Type: IDataObject*  IDataObject that represents the selection the context menu is based on. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT One of the following notifications.     \t\t\t\t\t                           NotificationUsage  DFM_MERGECONTEXTMENU Sent by the default context menu implementation to allow LPFNDFMCALLBACK to add items to the menu.  DFM_INVOKECOMMAND Sent by the default context menu implementation to request LPFNDFMCALLBACK to invoke a menu command.  DFM_GETDEFSTATICID Sent by the default context menu implementation when the default menu command is being created, allowing an alternate choice to be made."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional information. See the individual notification pages for specific requirements."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional information. See the individual notification pages for specific requirements."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[This interface is supported through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be unsupported in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Windows Shell",
    "name": "LPFNVIEWCALLBACK pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellView*",
        "name": "psvOuter",
        "description": "Type: IShellView* A pointer to the owning instance of IShellView, if applicable. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to the instance of IShellFolder the message applies to."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndMain",
        "description": "Type: HWND The handle of the window that contains the view that receives the message."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT One of the following notifications.  SFVM_ADDPROPERTYPAGES   Allows the callback object to provide a page to add to the Properties property sheet of the selected object.  SFVM_BACKGROUNDENUM   Allows the callback object to request that enumeration be done on a background thread.  SFVM_BACKGROUNDENUMDONE   Notifies the callback object that background enumeration is complete.  SFVM_COLUMNCLICK   Notifies the callback object that the user has clicked a column header to sort the list of objects in the folder view.  SFVM_DEFITEMCOUNT   Allows the callback object to specify the number of items in the folder view.  SFVM_DEFVIEWMODE   Allows the callback object to specify the view mode.  SFVM_DIDDRAGDROP   Notifies the callback function that a drag-and-drop operation has begun.  SFVM_FSNOTIFY   Notifies the callback object that an event has taken place that affects one of its items.  SFVM_GETANIMATION   Allows the callback object to specify that an animation be displayed while items are enumerated on a background thread.  SFVM_GETBUTTONINFO   Allows the callback object to add buttons to the toolbar.  SFVM_GETBUTTONS   Allows the callback object to specify the buttons to be added to the toolbar.  SFVM_GETDETAILSOF   Allows the callback object to provide the details for an item in a Shell folder. Use only if a call to IShellFolder2::GetDetailsOf fails and there is no IShellDetails::GetDetailsOf method available to call.  SFVM_GETHELPTEXT   Allows the callback object to specify a help text string for menu items or toolbar buttons.  SFVM_GETHELPTOPIC   Allows the callback object to specify a Help file and topic.  SFVM_GETNOTIFY   Specifies which events will generate an SFVM_FSNOTIFY message for a given item.  SFVM_GETPANE   Allows the callback object to provide the status bar pane in which to display the Internet zone information.  SFVM_GETSORTDEFAULTS   Allows the callback object to specify default sorting parameters.  SFVM_GETTOOLTIPTEXT   Allows the callback object to specify a tooltip text string for menu items or toolbar buttons.  SFVM_GETZONE   Allows the callback object to provide Internet zone information.  SFVM_INITMENUPOPUP   Allows the callback object to modify an item's context menu.  SFVM_INVOKECOMMAND   Notifies the callback object that one of its toolbar or menu commands has been invoked.  SFVM_MERGEMENU   Allows the callback object to merge menu items into the Windows Explorer menus.  SFVM_QUERYFSNOTIFY   Allows the callback object to register a folder so that changes to that folder's view will generate notifications.  SFVM_SETISFV   Notifies the callback object of the container site. This is used only when IObjectWithSite::SetSite is not supported and SHCreateShellFolderViewEx is used.  SFVM_SIZE   Notifies the callback object that the folder view has been resized.  SFVM_THISIDLIST   Allows the callback object to specify the view's PIDL. This is used only when IPersistIDList::SetIDList and IPersistFolder2::GetCurFolder have failed.  SFVM_UNMERGEMENU   Notifies the callback object that a menu is being removed.  SFVM_UPDATESTATUSBAR   Allows the callback object to request that the status bar be updated.  SFVM_WINDOWCREATED   Notifies the callback object that the folder view window is being created."
      },
      {
        "in_out": "",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional information dependent on the value in uMsg. See the individual notification pages for specific requirements."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional information dependent on the value in uMsg. See the individual notification pages for specific requirements."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. Use InitCommonControlsEx instead.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL Returns TRUE if registration was successful; FALSE otherwise. ",
    "remarks": "This function does not have an associated header or library file so it must be called by ordinal value. Call LoadLibrary with the DLL name Shell32.dll to obtain a module handle. Then call GetProcAddress with that module handle and the ordinal number 258 to use this function. Use LinkWindow_UnregisterClass to unregister the class after use. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "LinkWindow_RegisterClass",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: BOOL Returns TRUE if the operation was successful; FALSE otherwise. ",
    "remarks": "This function does not have an associated header or library file so it must be called by ordinal value. Call LoadLibrary with the DLL name Shell32.dll to obtain a module handle. Then call GetProcAddress with that module handle and the ordinal number 259 to use this function. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "LinkWindow_UnregisterClass",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is not available for use as of Windows 7.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns a nonzero value on success, or zero otherwise. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "MLFreeLibrary",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "Type: HMODULE The handle previously returned by a successful call to the MLLoadLibrary function."
      }
    ],
    "min_client": "Windows XP, Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is not available for use as of Windows 7.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HINSTANCE Returns the module's handle if successful, or NULL otherwise. ",
    "remarks": "The MLLoadLibrary function locates the appropriate library through the following procedure. The instance handle returned by MLLoadLibraryW must be freed with the MLFreeLibrary function.  Do not free it with the FreeLibrary function. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "MLLoadLibrary",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLibFileName",
        "description": "Type: LPCTSTR A null-terminated string with the file name of the resource DLL to be loaded. Do not include any path information. MLLoadLibrary derives that information as described in the Remarks below."
      },
      {
        "in_out": "_In_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "Type: HMODULE A handle to an already-loaded DLL that represents the code library for which the multilingual resource library is being requested."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCrossCodePage",
        "description": "Type: DWORD Reserved. This parameter must be set to zero."
      }
    ],
    "min_client": "Windows XP, Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "Type: HWND Depending on the specified uCommand and the result, MLHtmlHelp returns one or both of the following: ",
    "remarks": "If a problem arises with the path of the help file for the current language, the call is forwarded to HtmlHelp for standard handling. When the help window is closed, focus returns to the owner unless the owner is the desktop. If hwndCaller is the desktop, then the operating system determines where focus is returned. In addition, if MLHtmlHelp sends any notification messages from the help window, the messages are sent to hwndCaller as long as you have enabled notification message tracking in the help window definition. The following example calls the HH_DISPLAY_TOPIC command to open the help file named Help.chm and display its default topic in the help window named Mainwin. Generally, the help window specified in this command is a standard HTML Help Viewer. ",
    "return_type": "HWND",
    "category": "Windows Shell",
    "name": "MLHtmlHelp",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndCaller",
        "description": "Type: HWND A handle to the parent window that calls this function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR A pointer to a buffer that contains the fully qualified path of a compiled help (.chm) file, or a topic file within a specified help file."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uCommand",
        "description": "Type: UINT The command to complete. This function directly supports only HH_DISPLAY_TOPIC and HH_DISPLAY_TEXT_POPUP. In the case of any other command, the call is forwarded without the dwCrossCodePage value to HtmlHelp."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwData",
        "description": "Type: DWORD_PTR Any data that may be required, based on the value of the uCommand parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCrossCodePage",
        "description": "Type: DWORD The DWORD value indicating the code page of the current UI language setting, such as CP_ACP."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "Type: BOOL Returns a nonzero value on success, or zero otherwise. To get extended error information, call GetLastError. ",
    "remarks": "This function is not included in a header file and must be called by ordinal 395 for MLWinHelpA and 397 for MLWinHelpW. MLWinHelp is essentially a wrapper for WinHelp. It attempts to obtain the path to the help file corresponding to the current UI language setting before calling WinHelp. If it succeeds, it passes that path. If it fails, it passes the path pointed to by lpszHelp. This function fails if called from any context but the current user. Before closing the window that requested help, the application must call MLWinHelp with the uCommand parameter set to HELP_QUIT. Until all applications have done this, Windows Help will not terminate. Note that calling Windows Help with the HELP_QUIT command is not necessary if you used the HELP_CONTEXTPOPUP command to start Windows Help. The following table shows the possible values for the uCommand parameter and the corresponding formats of the dwData parameter.  ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "MLWinHelp",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndMain",
        "description": "Type: HWND A handle to the window requesting help. The MLWinHelp function uses this handle to keep track of which applications have requested help. If the uCommand parameter specifies HELP_CONTEXTMENU or HELP_WM_HELP, hWndMain identifies the control requesting help."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszHelp",
        "description": "Type: LPCTSTR The address of a null-terminated string containing the path, if necessary, and the name of the help file that MLWinHelp is to display. The file name can be followed by an angle bracket (>) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the help project (.hpj) file."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uCommand",
        "description": "Type: UINT The type of help requested. For a list of possible values and how they affect the value to place in the dwData parameter, see the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwData",
        "description": "Type: DWORD_PTR Additional data. The value used depends on the value of the uCommand parameter. For a list of possible dwData values, see the Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[OpenRegStream is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use SHOpenRegStream2 or SHOpenRegStream.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: IStream* Returns the address of an IStream interface if successful, or NULL otherwise. ",
    "remarks": "",
    "return_type": "IStream*",
    "category": "Windows Shell",
    "name": "OpenRegStream",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HKEY",
        "name": "hkey",
        "description": "Type: HKEY A handle to the key that is currently open."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszSubkey",
        "description": "Type: PCWSTR A null-terminated Unicode string that specifies the name of the subkey."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszValue",
        "description": "Type: PCWSTR A null-terminated Unicode string that specifies the value to be accessed."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD The type of access for the stream. This can be one of the following values.  STGM_READ   Open the stream for reading.  STGM_WRITE   Open the stream for writing.  STGM_READWRITE   Open the stream for reading and writing."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available for use in Windows XP. It may not be available in subsequent versions. Use OutputDebugStringW in its place.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapip.h",
    "return_value": "This function does not return a value. ",
    "remarks": "OutputDebugStringWrapW provides the ability to use Unicode strings in operating systems prior to Windows XP. The preferred method is to use OutputDebugStringW in conjunction with the Microsoft Layer for Unicode (MSLU). OutputDebugStringWrapW must be called directly from Shlwapi.dll, using ordinal 115. If the application has no debugger, the system debugger displays the string. If the application has no debugger and the system debugger is not active, OutputDebugStringWrapW does nothing. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "OutputDebugStringWrapW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpOutputString",
        "description": "Type: LPCWSTR A pointer to the null-terminated Unicode string to be displayed."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "None",
    "return_value": "None. ",
    "remarks": "The Passport Wizard is used to obtain a default Passport for Windows. A Passport gives the user personalized access to all MSN websites and other Passport-enabled sites using the user's email address. Using PassportWizardRunDll as an entry point into the Netplwiz.dll file through a Rundll32 command allows you to launch the Passport Wizard from a command line as though it were an executable file. PassportWizardRunDll is used solely in the context of a Rundll32.exe command as follows: rundll32.exe netplwiz.dll, PassportWizardRunDll Using an entry point function with Rundll32.exe does not resemble a normal function call. The function name and the name of the .dll file where it is stored are used only as command-line parameters. The function definition shown under Syntax is only a standard prototype for all functions that you can call using Rundll32. The specific values for hwndStub, hAppInstance, and nCmdShow are not provided by the user, but are handled behind the scenes by Rundll32. PassportWizardRunDll does not use the lpszCmdLine value, so no additional data is required. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PassportWizardRunDll",
    "is_callback": 0,
    "dll": "Netplwiz.dll (version 5.60 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndStub",
        "description": "Type: HWND A handle to an owner window. This parameter is typically set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "HINSTANCE",
        "name": "hAppInstance",
        "description": "Type: HINSTANCE A handle to the library file, obtained as a return value from LoadLibrary(\"netplwiz\")."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "lpszCmdLine",
        "description": "Type: LPTSTR Argument data. This value will always be empty."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nCmdShow",
        "description": "Type: int Sets the display mode for the window."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[PathCleanupSpec is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns one or more of the following values.  ",
    "remarks": "The following are considered invalid characters in all names. Control characters are also considered invalid. If long file names are not supported, the semi-colon (;) and comma (,) characters are also invalid. The drive named in pszDir is checked to determine  whether its file system supports long file names. If it does not, the name at pszSpec is truncated to the 8.3 format and the PCS_TRUNCATED value returned. If pszDir is NULL, the drive on which Windows is installed is used to determine long file name support. If the full path\u00e2\u0080\u0094the number of characters in the path at pszDir plus the number of characters in the cleaned name at pszSpec\u00e2\u0080\u0094exceeds MAX_PATH \u00e2\u0080\u0093 1 (to account for the terminating null character), the function returns PCS_PATHTOOLONG. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PathCleanupSpec",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszDir",
        "description": "Type: PCWSTR A pointer to a null-terminated buffer that contains the fully qualified path of the directory that will contain the file or directory named at pszSpec. The path must not exceed MAX_PATH characters in length, including the terminating null character. This path is not altered.                                                   This value can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszSpec",
        "description": "Type: PWSTR A pointer to a null-terminated buffer that contains the file or directory name to be cleaned. In the case of a file, include the file's extension. Note that because '\\' is considered an invalid character and will be removed, this buffer cannot contain a path more than one directory deep.                                               On exit, the buffer contains a null-terminated string that includes the cleaned name. This buffer should be at least MAX_PATH characters in length to avoid the possibility of a buffer overrun."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[PathGetShortPath is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PathGetShortPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszLongPath",
        "description": "Type: PWSTR A pointer to a null-terminated, Unicode string that contains the long path. When the function returns, it contains the equivalent short path."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[PathIsExe is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the file name extension is .cmd, .bat, .pif, .scf, .exe, .com, or .scr; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsExe",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szfile",
        "description": "Type: PCWSTR A pointer to a null-terminated, Unicode string that contains the file path, which includes the name of the file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[PathIsSlow is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the connection is high-latency; otherwise, FALSE. ",
    "remarks": "A path is considered slow if the MultinetGetConnectionPerformance function returns a dwSpeed of 400 or less in its NETCONNECTINFOSTRUCT structure\u00e2\u0080\u0094this is the speed of the media to the network resource, in 100 bits-per-second (bps)\u00e2\u0080\u0094or if FILE_ATTRIBUTE_OFFLINE is set on the file. Note that network conditions can impact function performance time. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "PathIsSlow",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the fully qualified path of the file."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFileAttr",
        "description": "Type: DWORD The file attributes, if known; otherwise, pass \u20131 and this function gets the attributes by calling GetFileAttributes. ..."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Deprecated. Processes a string that contains a command line and generates a suitably quoted string, with arguments attached if required.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: LONG Returns a positive value if successful. If lpDest is set to NULL, the function returns the required buffer size in characters, including the terminating null character. If the call fails, the function returns a negative value. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "PathProcessCommand",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszSrc",
        "description": "Type: PCWSTR A pointer to a null-terminated string that contains the command line to process."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszDest",
        "description": "Type: PWSTR Pointer to a buffer that receives a null-terminated Unicode string with the appropriate quotation marks. To determine how large this buffer must be, set this parameter to NULL. The function returns the required buffer size."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iDestMax",
        "description": "Type: int The maximum number of characters that can be put in pszDest, not including the terminating null character. If this value is too small, the function fails."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that control the procedure. One or more of the following values:  PPCF_ADDQUOTES (0x00000001)   Add quotes if the path requires them.  PPCF_ADDARGUMENTS (0x00000003)   Append trailing arguments to the output string. This value includes PPCF_ADDQUOTES.  PPCF_NODIRECTORIES (0x00000010)   Do not match the input string against folders, only against file objects.  PPCF_FORCEQUALIFY (0x00000040)   Qualify even non-relative file names.  PPCF_LONGESTPOSSIBLE (0x00000080)   Always choose the longest possible executable name."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[PathResolve is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns TRUE, unless PRF_VERIFYEXISTS is set. If that flag is set, the function returns TRUE if the file is verified to exist and FALSE otherwise. It also sets an ERROR_FILE_NOT_FOUND error code that you can retrieve by calling GetLastError. ",
    "remarks": "A FALSE return value does not necessarily mean that the file does not exist. It might mean that the function is simply unable to find the file from the supplied information. If PathResolve cannot resolve the path specified in pszPath, it calls PathFindOnPath using pszPath and dirs as the parameters. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PathResolve",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszPath",
        "description": "Type: PWSTR A null-terminated Unicode string that contains the path to resolve. When the function returns, the string contains the corresponding fully qualified path. This buffer should be at least MAX_PATH characters long."
      },
      {
        "in_out": "_In_opt_",
        "type": "PZPCWSTR",
        "name": "dirs",
        "description": "Type: PZPCWSTR A pointer to an optional null-terminated array of directories to be searched first in the case that the path cannot be resolved from pszPath. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "fFlags",
        "description": "Type: UINT Flags that specify how the function operates.  PRF_VERIFYEXISTS   Return TRUE if the file's existence is verified; otherwise FALSE.  PRF_TRYPROGRAMEXTENSIONS   Look for the specified path with the following extensions appended: .pif, .com, .bat, .cmd, .lnk, and .exe.  PRF_FIRSTDIRDEF   Look first in the directory or directories specified by dirs.  PRF_DONTFINDLNK   Ignore .lnk files.  PRF_REQUIREABSOLUTE   Require an absolute (full) path."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Applications do not need to call this function because the operating system already does so. This function does not have an associated header or library file so it must be called by ordinal value. Call LoadLibrary with the DLL name Mydocs.dll to obtain a module handle. Then call GetProcAddress with that module handle and the ordinal number 7 to use this function. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "PerUserInit",
    "is_callback": 0,
    "dll": "Mydocs.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[This function is not supported as of Windows Vista.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function pointer does not return a value. ",
    "remarks": "",
    "return_type": "typedef void ( CALLBACK",
    "category": "Windows Shell",
    "name": "PFNASYNCICONTASKCALLBACK pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCITEMIDLIST",
        "name": "pidl",
        "description": "Type: LPCITEMIDLIST A pointer to an ITEMIDLIST structure."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "pvData",
        "description": "Type: LPVOID A pointer to user data."
      },
      {
        "in_out": "",
        "type": "LPVOID",
        "name": "pvHint",
        "description": "Type: LPVOID  A pointer to information about user data."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIconIndex",
        "description": "Type: int The icon index for the ITEMIDLIST structure."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iOpenIconIndex",
        "description": "Type: int The icon index for the ITEMIDLIST structure if the icon can be extracted with GIL_OPENICON."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It is not available as of Windows Vista.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHMapIDListToImageListIndexAsync",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "IShellTaskScheduler*",
        "name": "pts",
        "description": "Type: IShellTaskScheduler* The task scheduler interface to create the background task."
      },
      {
        "in_out": "",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* The Shell folder that relates to the pidl."
      },
      {
        "in_out": "",
        "type": "LPCITEMIDLIST",
        "name": "pidl",
        "description": "Type: LPCITEMIDLIST The item whose icon is requested."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "flags",
        "description": "Type: UINT Flags to control the operation.  GIL_OPENICON   Allows containers to specify an \"open\" look.  GIL_FORSHELL   Icon is displayed in a Shell folder.  GIL_ASYNC   Asynchronous extract that returns E_PENDING.  GIL_DEFAULTICON   Get the default icon location if the final one takes too long.  GIL_FORSHORTCUT   The icon is for a shortcut to the object."
      },
      {
        "in_out": "",
        "type": "PFNASYNCICONTASKBALLBACK",
        "name": "pfn",
        "description": "Type: PFNASYNCICONTASKBALLBACK The PFNASYNCICONTASKBALLBACK callback function called when the background task is done."
      },
      {
        "in_out": "",
        "type": "void*",
        "name": "pvData",
        "description": "Type: void* The user data passed back in the PFNASYNCICONTASKBALLBACK callback."
      },
      {
        "in_out": "",
        "type": "void*",
        "name": "pvHint",
        "description": "Type: void* The user data passed back in the PFNASYNCICONTASKBALLBACK callback."
      },
      {
        "in_out": "",
        "type": "int*",
        "name": "piIndex",
        "description": "Type: int* The icon index returned. This is the temporary index if the function returns E_PENDING. The final index is provided through the callback function."
      },
      {
        "in_out": "",
        "type": "int*",
        "name": "piIndexSel",
        "description": "Type: int* Optional icon index for the open icon case (GIL_OPENICON)."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[PickIconDlg is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns 1 if successful; otherwise, 0. The following code example shows the use of PickIconDlg to display a dialog that allows the user to choose an icon embedded in the Shell32.dll file. The dialog box displayed as a result of that call is shown here.  The path and index parameters returned in the PickIconDlg shown above now specify a particular icon. You can use this information in any icon manipulation function or method that accepts those values to name an icon. What you do with them depends entirely on the needs of your application. In this continuation of the earlier example, the values are used to retrieve an icon handle through ExtractIcon. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "PickIconDlg",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the parent window. This value can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszIconPath",
        "description": "Type: PWSTR A pointer to a string that contains the null-terminated, fully qualified path of the default resource that contains the icons. If the user chooses a different resource in the dialog, this buffer contains the path of that file when the function returns. This buffer should be at least MAX_PATH characters in length, or the returned path may be truncated. You should verify that the path is valid before using it."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchIconPath",
        "description": "Type: UINT The number of characters in pszIconPath, including the terminating NULL character."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "int*",
        "name": "piIconIndex",
        "description": "Type: int* A pointer to an integer that on entry specifies the index of the initial selection and, when this function returns successfully, receives the index of the icon that was selected."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[ReadCabinetState is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the returned structure contains information from the registry. Returns FALSE if the structure contains default information. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ReadCabinetState",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "CABINETSTATE*",
        "name": "pcs",
        "description": "Type: CABINETSTATE* When this function returns, contains a pointer to a CABINETSTATE structure that contains either information pulled from the registry or default information."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cLength",
        "description": "Type: int The size of the structure pointed to by pcs, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[RealDriveType is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns one of the following values.  ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "RealDriveType",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iDrive",
        "description": "Type: int The number of the drive that you want to test. \"A:\" corresponds to 0, \"B:\" to 1, and so on."
      },
      {
        "in_out": "_Reserved_",
        "type": "BOOL",
        "name": "fOKToHitNet",
        "description": "Type: BOOL Reserved. Must be set to 0."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the identifier of the button that was pressed to close the dialog box. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "RestartDialog",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPrompt",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the text that displays in the dialog box which prompts the user."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that specify the type of shutdown.  This parameter must include one of the following values.  EWX_LOGOFF   Shuts down all processes running in the security context of the process that called this function, then logs the user off.  EWX_POWEROFF   Shuts down the system and turns off the power. The system must support the power-off feature. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.  EWX_REBOOT   Shuts down the system and then restarts the system. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.  EWX_SHUTDOWN   Shuts down the system to a point at which it is safe to turn off the power. At this point, all file buffers have been flushed to disk, and all running processes have stopped. If the system supports the power-off feature, the power is also turned off. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.    This parameter can optionally include the following values.  EWX_FORCE   Forces processes to terminate. When this flag is set, the system does not send the WM_QUERYENDSESSION and WM_ENDSESSION messages. This can cause the applications to lose data. Therefore, you should only use this flag in an emergency.  EWX_FORCEIFHUNG   Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message. This flag is ignored if EWX_FORCE is used."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Logs off the interactive user, shuts down the system, or shuts down and restarts the system. It sends the  WM_QUERYENDSESSION message to all applications to determine if they can be terminated.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the shutdown has been initiated. It does not indicate whether the shutdown will succeed. It is possible that the system, the user, or another application will abort the shutdown. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The  ExitWindowsEx function returns as soon as it has initiated the shutdown process. The shutdown or logoff then proceeds asynchronously. The function is designed to stop all processes in the caller's logon session. Therefore, if you are not the interactive user, the function can succeed without actually shutting down the computer. If you are not the interactive user, use the  InitiateSystemShutdown or  InitiateSystemShutdownEx function. A non-zero return value does not mean the logoff was or will be successful. The shutdown is an asynchronous process, and it can occur long  after the API call has returned, or not  at all. Even if the timeout value is zero,  the shutdown can still be aborted by applications, services, or even the system. The non-zero return value indicates that the validation of the rights and parameters was  successful and that the system accepted the shutdown request. When this function is called, the caller must specify whether or not applications with unsaved changes should be forcibly closed.  If the caller chooses not to force these applications to close and an application with unsaved changes is running on the console session, the shutdown will remain in progress until the user logged into the console session aborts the shutdown, saves changes, closes the application, or forces the application to close.  During this period, the shutdown may not be aborted except by the console user, and another shutdown may not be initiated. Calling this function with the value of the uFlags parameter set to EWX_FORCE avoids this situation. Remember that doing this  may result in loss of data. To set a shutdown priority for an application relative to other applications in the system, use the  SetProcessShutdownParameters function. During a shutdown or log-off operation, running applications are allowed a specific amount of time to respond to the shutdown request. If this time expires before all applications have stopped, the system displays a user interface that allows the user to forcibly shut down the system or to cancel the shutdown request. If the EWX_FORCE value is specified, the system forces running applications to stop when the time expires. If the EWX_FORCEIFHUNG value is specified, the system forces hung applications to close and does not display the dialog box. Console processes receive a separate notification message, CTRL_SHUTDOWN_EVENT or CTRL_LOGOFF_EVENT, as the situation warrants. A console process routes these messages to its  HandlerRoutine function.  ExitWindowsEx sends these notification messages asynchronously; thus, an application cannot assume that the console notification messages have been handled when a call to  ExitWindowsEx returns. To shut down or restart the system, the calling process must use the  AdjustTokenPrivileges function to enable the SE_SHUTDOWN_NAME privilege. For more information, see  Running with Special Privileges. For an example, see  How to Shut Down the System. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "ExitWindowsEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "The shutdown type. This parameter must include one of the following values.     ValueMeaning  EWX_HYBRID_SHUTDOWN 0x00400000   Beginning with Windows 8:  You can prepare the system for a faster startup by combining the EWX_HYBRID_SHUTDOWN flag with the EWX_SHUTDOWN flag.    EWX_LOGOFF 0   Shuts down all processes running in the logon session of the process that called the  ExitWindowsEx function. Then it logs the user off. This flag can be used only by processes running in an interactive user's logon session.   EWX_POWEROFF 0x00000008   Shuts down the system and turns off the power. The system must support the power-off feature.     The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.   EWX_REBOOT 0x00000002   Shuts down the system and then restarts the system.     The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.   EWX_RESTARTAPPS 0x00000040   Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the RegisterApplicationRestart function. These application receive the WM_QUERYENDSESSION message with lParam set to the ENDSESSION_CLOSEAPP value. For more information, see Guidelines for Applications.   EWX_SHUTDOWN 0x00000001   Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, and all running processes have stopped.  The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section. Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify EWX_POWEROFF to do this.Windows XP with SP1:  If the system supports the power-off feature, specifying this flag turns off the power.     This parameter can optionally include one of the following values.  ValueMeaning  EWX_FORCE 0x00000004   This flag has no effect if terminal services is enabled. Otherwise, the system does not send the  WM_QUERYENDSESSION message. This can cause applications to lose data. Therefore, you should only use this flag in an emergency.   EWX_FORCEIFHUNG 0x00000010   Forces processes to terminate if they do not respond to the  WM_QUERYENDSESSION or  WM_ENDSESSION message within the timeout interval. For more information, see the Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReason",
        "description": "The reason for initiating the shutdown. This parameter must be one of the  system shutdown reason codes. If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code  will not be set and therefore the default action is an undefined shutdown that is logged as \"No title for this reason could be found\". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the identifier of the button that was pressed to close the dialog box. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "RestartDialogEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszPrompt",
        "description": "Type: PCWSTR A null-terminated string that contains the text that displays in the dialog box to prompt the user."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The flags that specify the type of shutdown.  This parameter must include one of the following values.  EWX_LOGOFF   Shuts down all processes running in the security context of the process that called this function. Then logs the user off.  EWX_POWEROFF   Shuts down the system and turns off the power. The system must support the power-off feature. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.  EWX_REBOOT   Shuts down the system and then restarts the system. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.  EWX_SHUTDOWN   Shuts down the system to a point at which it is safe to turn off the power. At this point, all file buffers have been flushed to disk, and all running processes have stopped. If the system supports the power-off feature, the power is also turned off. The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see ExitWindowsEx.    This parameter can optionally include the following values.  EWX_FORCE   Forces processes to terminate. When this flag is set, the system does not send the WM_QUERYENDSESSION and WM_ENDSESSION messages. This can cause the applications to lose data. Therefore, you should only use this flag in an emergency.  EWX_FORCEIFHUNG   Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message. This flag is ignored if EWX_FORCE is used."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwReasonCode",
        "description": "Type: DWORD Windows XP:Specifies the reason for initiating the shutdown. For more information, see System Shutdown Reason Codes.          \t\t\t\t\t Windows 2000: This parameter is ignored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: UINT Returns the number of pages actually added. ",
    "remarks": "This function should be called only once for the property sheet extension array named in hpsxa. This function calls each extension's IShellPropSheetExt::AddPages method. See that page for further details. ",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "SHAddFromPropSheetExtArray",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HPSXA",
        "name": "hpsxa",
        "description": "Type: HPSXA The array of property sheet handlers returned by SHCreatePropSheetExtArray."
      },
      {
        "in_out": "_In_",
        "type": "LPFNADDPROPSHEETPAGE",
        "name": "lpfnAddPage",
        "description": "Type: LPFNADDPROPSHEETPAGE A pointer to an AddPropSheetPageProc callback function. It is called once for each property sheet handler. The callback function then returns the information needed to add a page to the handler's property sheet."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM A pointer to application-defined data. This data is passed to the callback function specified by lpfnAddPage."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHCreatePropSheetExtArray is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HPSXA Returns a handle to an array of property sheet handlers. Pass this value to SHAddFromPropSheetExtArray. You do not access this value directly. ",
    "remarks": "When you are finished with the returned HPSXA handle, destroy it by calling SHDestroyPropSheetExtArray. This function loads up to max_iface property sheet extensions into an array that is then passed to SHAddFromPropSheetExtArray. ",
    "return_type": "HPSXA",
    "category": "Windows Shell",
    "name": "SHCreatePropSheetExtArray",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HKEY",
        "name": "hkey",
        "description": "Type: HKEY The registry root key that contains the subkey with the property sheet extension handlers. For instance, HKEY_LOCAL_MACHINE."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszSubkey",
        "description": "Type: PCWSTR A pointer to a null-terminated string specifying the name of the subkey that contains shellex\\PropertySheetHandlers. For example, if  hkey specifies HKEY_LOCAL_MACHINE and pszSubkey specifies \"Software\\Microsoft\\Windows\\CurrentVersion\\Controls Folder\\Display\", this function returns property sheet extension handlers using the following subkey:  HKEY_LOCAL_MACHINE    SOFTWARE       Microsoft          Windows             CurrentVersion                Controls Folder                   Display                      shellex                         PropertySheetHandlers"
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "max_iface",
        "description": "Type: UINT The maximum number of property sheet handlers to be returned."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. Use CoTaskMemAlloc instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: LPVOID A pointer to the allocated memory. ",
    "remarks": "You can free this memory by calling SHFree. ",
    "return_type": "LPVOID",
    "category": "Windows Shell",
    "name": "SHAlloc",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIZE_T",
        "name": "cb",
        "description": "Type: SIZE_T The number of bytes of memory to allocate."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHAllocShared is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HANDLE Returns a handle to the shared memory for the process specified by dwDestinationProcessId. Returns NULL if unsuccessful. ",
    "remarks": "Use SHFreeShared to free the handle when you are finished. ",
    "return_type": "HANDLE",
    "category": "Windows Shell",
    "name": "SHAllocShared",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const void*",
        "name": "pvData",
        "description": "Type: const void* A pointer to the memory block in the calling process that is to be copied. You can set this parameter to NULL if you want to share a block of memory without copying any data to it."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSize",
        "description": "Type: DWORD The size, in bytes, of the memory block pointed to by pvData."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDestinationProcessId",
        "description": "Type: DWORD The process ID of the process that will share memory block specified by pvData."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of characters written to pszDst, including the terminating null character. Returns 0 if unsuccessful. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. For example, if pszDst buffer is not large enough to contain the number of characters specified by cchBuf, a buffer overrun can occur. Buffer overruns can cause a denial of service attack against an application if an access violation occurs. In the worst case, a buffer overrun might allow an attacker to inject executable code into your process, especially if pszDst is a stack-based buffer. Note that the output string is silently truncated if the buffer is not large enough. This can result in canonicalization or other security vulnerabilities. If the pszDst buffer is not large enough to contain the entire converted output string, the string is truncated to fit the buffer. There is no way to detect that the return string has been truncated. The string will always be null-terminated, even if it has been truncated. This function takes care to not truncate between the lead and trail bytes of a DBCS character pair. In that case, only cchBuf-1 characters are returned. If the pszSrc and pszDst buffers overlap, the function's behavior is undefined. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHAnsiToAnsi",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszSrc",
        "description": "Type: LPCSTR A pointer to a null-terminated ANSI string to be converted to Unicode."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pszDst",
        "description": "Type: LPWSTR A pointer to a buffer that, when this function returns successfully, receives the characters copied from pszSrc. The buffer must be large enough to contain the number of characters specified by the cchBuf parameter, including a room for a terminating null character."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchBuf",
        "description": "Type: int The number of characters that can be contained by the buffer pointed to by pszDst. This parameter must be greater than zero."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of Unicode characters written to pwszDst, including the terminating null character. Returns 0 if unsuccessful. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. For example, if pwszDst buffer is not large enough to contain the number of characters specified by cwchBuf, a buffer overrun can occur. Buffer overruns can cause a denial of service attack against an application if an access violation occurs. In the worst case, a buffer overrun might allow an attacker to inject executable code into your process, especially if pwszDst is a stack-based buffer. When copying an entire string, note that sizeof returns the number of bytes, which is not the correct value to use for the cwchBuf parameter. Instead, use sizeof(pwszDst)/sizeof(WCHAR). Note that this technique assumes that pwszDst is an array, not a pointer. If the pwszDst buffer is not large enough to contain the entire converted output string, the string is truncated to fit the buffer. There is no way to detect that the return string has been truncated.  The string is always null-terminated, even if it has been truncated. This ensures that no more than cwchBuf characters are copied to pwszDst. No attempt is made to avoid truncating the string in the middle of a Unicode surrogate pair. If the pszSrc and pwszDst buffers overlap, the function's behavior is undefined. SHAnsiToTChar is defined to be the same as SHAnsiToUnicode. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHAnsiToUnicode",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCSTR",
        "name": "pszSrc",
        "description": "Type: PCSTR A pointer to a null-terminated ANSI string to be converted to Unicode."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pwszDst",
        "description": "Type: PWSTR A pointer to a buffer that, when this function returns successfully, receives the string specified by pszSrc, after the ANSI characters have been converted to Unicode (WCHAR). The buffer must be large enough to contain the number of Unicode characters specified by the cwchBuf parameter, including a terminating null character."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cwchBuf",
        "description": "Type: int The number of Unicode characters that can be contained by the buffer pointed to by pwszDst. This parameter must be greater than zero."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHCloneSpecialIDList is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use SHGetSpecialFolderLocation.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a pointer to the ITEMIDLIST structure of a special folder specified by csidl. The function creates the folder if fCreate is TRUE. ",
    "remarks": "When finished, you should free the pointer to the cloned folder with ILFree. ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "SHCloneSpecialIDList",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "csidl",
        "description": "Type: int A CSIDL value that identifies the folder of interest."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fCreate",
        "description": "Type: BOOL A value of type BOOL that indicates if the folder should be created if it does not already exist. If  fCreate is TRUE, the folder is created. If it is FALSE, the folder is not created."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHGetSpecialFolderLocation is not supported and may be altered or unavailable in the future. Instead, use SHGetFolderLocation.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetSpecialFolderLocation",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nFolder",
        "description": "Type: int A CSIDL value that identifies the folder of interest."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* A PIDL specifying the folder's location relative to the root of the namespace (the desktop). It is the responsibility of the calling application to free the returned IDList by using CoTaskMemFree."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. Use CLSIDFromString instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCLSIDFromString",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz",
        "description": "Type: PCWSTR A Unicode string that contains the CLSID in the format, {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}."
      },
      {
        "in_out": "_Out_",
        "type": "CLSID*",
        "name": "pcClsid",
        "description": "Type: CLSID* A pointer to a CLSID value that, when this function returns successfully, receives the converted string as a CLSID."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[SHCoCreateInstance is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use CoCreateInstance.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCoCreateInstance",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszCLSID",
        "description": "Type: PCWSTR A pointer to a string to convert to a CLSID. If NULL, pclsid is used as the CLSID."
      },
      {
        "in_out": "_In_opt_",
        "type": "const CLSID*",
        "name": "pclsid",
        "description": "Type: const CLSID* The CLSID to create."
      },
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "pUnkOuter",
        "description": "Type: IUnknown* A pointer to outer IUnknown. Used for aggregation."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns successfully, receives the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[SHCreateDirectory is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned, including those listed here. For values not specifically listed, see System Error Codes.  ",
    "remarks": "This function creates a file system folder whose fully qualified path is given by pszPath. If one or more of the intermediate folders do not exist, it creates them. To set security attributes on a new folder, use SHCreateDirectoryEx. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHCreateDirectory",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a parent window. This parameter can be set to NULL if no user interface is displayed."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string that contains the fully qualified path of the directory. This string should have no more than MAX_PATH characters, including the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns ERROR_SUCCESS if successful. If the operation fails, other error codes can be returned, including those listed here. For values not specifically listed, see System Error Codes.  ",
    "remarks": "This function creates a file system folder whose fully qualified path is given by pszPath. If one or more of the intermediate folders do not exist, they are created as well. SHCreateDirectoryEx also verifies that the files are visible. If they are not visible, expect one of the following: ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHCreateDirectoryEx",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a parent window. This parameter can be set to NULL if no user interface will be displayed."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string specifying the fully qualified path of the directory. This string is of maximum length of 248 characters, including the terminating null character."
      },
      {
        "in_out": "_In_opt_",
        "type": "const SECURITY_ATTRIBUTES*",
        "name": "psa",
        "description": "Type: const SECURITY_ATTRIBUTES*  A pointer to a SECURITY_ATTRIBUTES structure with the directory's security attribute. Set this parameter to NULL if no security attributes need to be set."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHCreateFileExtractIcon is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateFileExtractIcon",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file system object. The buffer must not exceed MAX_PATH characters in length."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFileAttributes",
        "description": "Type: DWORD A combination of one or more file attribute flags (FILE_ATTRIBUTE_* values as defined in Winnt.h) that specify the type of object."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID Reference to the desired interface ID of the icon extractor interface to create. This must be either IID_IExtractIconA or IID_IExtractIconW."
      },
      {
        "in_out": "",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this function returns, contains the interface pointer requested in riid. This is typically IExtractIcon."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is deprecated. Use CreateClassMoniker instead. Note that the CLSID used in the call to CreateClassMoniker must be application-defined. Do not call CreateClassMoniker with a system-defined CLSID.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If successful, SHCreateQueryCancelAutoPlayMoniker calls the interface's AddRef method and increments the reference count. When you are finished, call the interface's Release method to release. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateQueryCancelAutoPlayMoniker",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMoniker**",
        "name": "ppmoniker",
        "description": "Type: IMoniker** The address of a IMoniker interface pointer that, when this function returns successfully, receives the QueryCancelAutoPlay class moniker. If this function call fails, this value is NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHCreateStdEnumFmtEtc is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateStdEnumFmtEtc",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cfmt",
        "description": "Type: UINT The number of entries in the afmt array."
      },
      {
        "in_out": "const",
        "type": "FORMATETC",
        "name": "afmt[]",
        "description": "Type: const FORMATETC[] An array of FORMATETC structures that specifies the clipboard formats of interest."
      },
      {
        "in_out": "_Out_",
        "type": "IEnumFORMATETC**",
        "name": "ppenumFormatEtc",
        "description": "Type: IEnumFORMATETC** When this function returns successfully, receives an IEnumFORMATETC interface pointer. Receives NULL on failure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHCreateStreamOnFile is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use SHCreateStreamOnFileEx.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "SHCreateStreamOnFileEx fully supports all STGM modes and allows the caller to specify file attributes if creating a new file. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHCreateStreamOnFile",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "grfMode",
        "description": "Type: DWORD One or more STGM values that are used to specify the file access mode and how the object that exposes the stream is created and deleted."
      },
      {
        "in_out": "_Out_",
        "type": "IStream**",
        "name": "ppstm",
        "description": "Type: IStream** Receives an IStream interface pointer for the stream associated with the file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[Shell_GetCachedImageIndex is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use Shell_GetCachedImageIndexA or Shell_GetCachedImageIndexW.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the index of the image, or \u00e2\u0080\u00931 on failure. ",
    "remarks": "The Shell_GetCachedImageIndexA and Shell_GetCachedImageIndexW versions of this function were added in Windows Vista. For Unicode strings, call either Shell_GetCachedImageIndexW or Shell_GetCachedImageIndex. For ANSI strings, you must call Shell_GetCachedImageIndexA explicitly. Windows Server 2003 and Windows XP:  Only Shell_GetCachedImageIndex is supported. Shell_GetCachedImageIndex requires a Unicode string. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "Shell_GetCachedImageIndex",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszIconPath",
        "description": "Type: PCWSTR A pointer to a buffer that contains the path to the image file."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iIconIndex",
        "description": "Type: int The index of the image within the file named at pwszIconPath."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uIconFlags",
        "description": "Type: UINT Not used."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE on success. On failure, returns FALSE and the image lists pointed to by phiml and phimlSmall are unchanged. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "Shell_GetImageLists",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HIMAGELIST*",
        "name": "phiml",
        "description": "Type: HIMAGELIST* A pointer to the handle of an image list which, on success, receives the system image list for large (32 x 32) icons."
      },
      {
        "in_out": "_In_",
        "type": "HIMAGELIST*",
        "name": "phimlSmall",
        "description": "Type: HIMAGELIST* A pointer to the handle of an image list which, on success, receives the system image list for small (16 x 16) icons."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[Shell_MergeMenus is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: UINT Returns the next open ID at the end of the menu (the maximum adjusted ID + 1). ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "Shell_MergeMenus",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmDst",
        "description": "Type: HMENU The destination menu to which hmSrc is added."
      },
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmSrc",
        "description": "Type: HMENU The source menu which is added to hmDst."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uInsert",
        "description": "Type: UINT The point in hmDst after which the entries in hmSrc are inserted."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uIDAdjust",
        "description": "Type: UINT This number is added to each menu's ID to give an adjusted ID. Set to 0 for no adjustment. The value for uIDAdjust would typically be the number of items in hmDst. This number can be obtained using the GetMenuItemCount."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uIDAdjustMax",
        "description": "Type: UINT The maximum adjusted ID to add to the menu. Any adjusted ID greater than this value is not added. To allow all IDs, set this parameter to 0xFFFF."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "uFlags",
        "description": "Type: ULONG One or more of the following flags.  MM_ADDSEPARATOR   Add a separator between the items from the two menus if one does not exist already. If you are inserting the entries from hmSrc into the middle of hmDst, a separator is added above and below the hmSrc material.  MM_DONTREMOVESEPS   Do not remove any existing separators in the two menus. Note that this could result in two separators in a row.  MM_SUBMENUSHAVEIDS   Set this flag if the submenus have IDs which should be adjusted."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[ShellMessageBox is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: int An integer value indicating a button that was pressed in the message box. For specific values, see MessageBox. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "ShellMessageBox",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINSTANCE",
        "name": "hInst",
        "description": "Type: HINSTANCE The handle of the module from which to load a string resource named in pszTitle. If pszTitle does not name a string resource, this parameter is ignored. This value must be valid if pszMsg or pszTitle is a resource ID."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the owner window of the message box to be created. If this variable is not NULL, the title of the owner window is used as the title of the message box."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszMsg",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains either the message to be displayed or a resource ID specifying where the message is to be retrieved from."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszTitle",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the dialog box title or a resource ID specifying where the title is to be retrieved. If both this parameter and hWnd are NULL, no title is displayed. If this parameter points to a loadable resource formed with the MAKEINTRESOURCE macro, it overrides hWnd as the title."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "fuStyle",
        "description": "Type: UINT Specifies the contents and behavior of the dialog box. For possible values, see MessageBox."
      },
      {
        "in_out": "",
        "type": "_In_",
        "name": "...",
        "description": "A variable argument list that is combined with pszMsg to form the full text displayed in the message box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHFind_InitMenuPopup is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: IContextMenu* If successful, returns an IContextMenu pointer. On failure, returns NULL. ",
    "remarks": "",
    "return_type": "IContextMenu*",
    "category": "Windows Shell",
    "name": "SHFind_InitMenuPopup",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU The handle of the popup menu."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the popup menu's owner window. This value can be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "idCmdFirst",
        "description": "Type: UINT The ID of the first menu item."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "idCmdLast",
        "description": "Type: UINT The ID of the last menu item."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[SHFindFiles is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful in displaying the Search window; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHFindFiles",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlFolder",
        "description": "Type: PCIDLIST_ABSOLUTE The folder from which to start the search. This folder appears in the Look in: box in the Search window. This folder and all of its subfolders are searched unless users choose other options in the Search window's More Advanced Options. This value can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlSaveFile",
        "description": "Type: PCIDLIST_ABSOLUTE This parameter is not used and must be set to NULL. Windows Server 2003 and Windows XP:  A saved search file (.fnd) to load. You can save search parameters to a .fnd file after the search is begun. This value can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It is not supported under Windows Vista and later. Use OleFlushClipboard instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT For details on possible return values, see OleFlushClipboard. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHFlushClipboard",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Places a pointer to a specific data object onto the clipboard. This makes the data object accessible to the OleGetClipboard function.",
    "library": "Ole32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ole2.h",
    "return_value": "This function returns S_OK on success. Other possible values include the following.  ",
    "remarks": "If you are writing an application that can act as the source of a clipboard operation, you must do the following: All formats are offered on the clipboard using delayed rendering (the clipboard contains only a pointer to the data object unless a call to OleFlushClipboard renders the data onto the clipboard). The formats necessary for OLE 1 compatibility are synthesized from the OLE 2 formats that are present and are also put on the clipboard. The OleSetClipboard function assigns ownership of the clipboard to an internal OLE window handle. The reference count of the data object is increased by 1, to enable delayed rendering. The reference count is decreased by a call to the OleFlushClipboard function or by a subsequent call to OleSetClipboard specifying NULL as the parameter value (which clears the clipboard). When an application opens the clipboard (either directly or indirectly by calling the OpenClipboard function), the clipboard cannot be used by any other application until it is closed. If the clipboard is currently open by another application, OleSetClipboard fails. The internal OLE window handle satisfies WM_RENDERFORMAT messages by delegating them to the IDataObject implementation on the data object that is on the clipboard. Specifying NULL as the parameter value for OleSetClipboard empties the current clipboard. If the contents of the clipboard are the result of a previous OleSetClipboard call and the clipboard has been released, the IDataObject pointer that was passed to the previous call is released. The clipboard owner should use this as a signal that the data it previously offered is no longer on the clipboard. If you need to leave the data on the clipboard after your application is closed, you should call OleFlushClipboard rather than calling OleSetClipboard with a NULL parameter value. If you need to leave the data on the clipboard after your application is closed, you should call OleFlushClipboard rather than calling OleSetClipboard with a NULL parameter value. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "OleSetClipboard",
    "is_callback": 0,
    "dll": "Ole32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDATAOBJECT",
        "name": "pDataObj",
        "description": "Pointer to the IDataObject interface on the data object from which the data to be placed on the clipboard can be obtained. This parameter can be NULL; in which case the clipboard is emptied."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[SHFlushSFCache is available for use in the operating      systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "SHFlushSFCache is called when the path to a special      folder is changed. This ensures that the updated path stored in the registry is used rather than the cached      value. For more information on special folders, see the Special Folders and CSIDLs section      of Getting a Folder's ID. ",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHFlushSFCache",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHFormatDateTime is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of TCHARs written to the buffer, including the terminating null character. On failure, this value is 0. The following code example demonstrates the use of SHFormatDateTime. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHFormatDateTime",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const FILETIME UNALIGNED*",
        "name": "pft",
        "description": "Type: const FILETIME UNALIGNED* A pointer to the FILETIME structure whose time is to be converted to a string."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "Type: DWORD* A pointer to a DWORD value that contains bitwise flags that specify the date and time format.   When you call the function, you can combine zero or more of the following flags, with exceptions as noted. You can also set this parameter to NULL, in which case the function assumes that the FDTF_DEFAULT flag is set.   FDTF_SHORTTIME (0x00000001)   0x00000001. Formats the time of day as specified by the Regional and Language Options application in Control Panel, but without seconds. This flag cannot be combined with FDTF_LONGTIME.  FDTF_SHORTDATE (0x00000002)   0x00000002. Formats the date as specified by the short date format in the Regional and Language Options application in Control Panel.  This flag cannot be combined with FDTF_LONGDATE.  FDTF_DEFAULT   Equivalent to FDTF_SHORTDATE | FDTF_SHORTTIME.  FDTF_LONGDATE (0x00000004)   0x00000004. Formats the date as specified by the long date format in the Regional and Language Options application in Control Panel. This flag cannot be combined with FDTF_SHORTDATE.  FDTF_LONGTIME (0x00000008)   0x00000008. Formats the time of day as specified by the Regional and Language Options application in Control Panel, including seconds. This flag cannot be combined with FDTF_SHORTTIME.  FDTF_RELATIVE (0x00000010)   0x00000010. If the FDTF_LONGDATE flag is set and the date in the FILETIME structure is the same date that SHFormatDateTime is called, then the day of the week (if present) is changed to \"Today\". If the date in the structure is the previous day, then the day of the week (if present) is changed to \"Yesterday\".  FDTF_LTRDATE (0x00000100)   0x00000100. Adds marks for left-to-right reading layout. This flag cannot be combined with FDTF_RTLDATE.  FDTF_RTLDATE (0x00000200)   0x00000200. Adds marks for right-to-left reading layout. This flag cannot be combined with FDTF_LTRDATE.  FDTF_NOAUTOREADINGORDER (0x00000400)   0x00000400. No reading order marks are inserted. Normally, in the absence of the FDTF_LTRDATE or FDTF_RTLDATE flag, SHFormatDateTime determines the reading order from the user's default locale, inserts reading order marks, and updates the pdwFlags output value appropriately. This flag prevents that process from occurring. It is used most commonly by legacy callers of SHFormatDateTime. This flag cannot be combined with FDTF_RTLDATE or FDTF_LTRDATE. Windows Server 2003 and Windows XP:  This value is not available.    When the function returns, the DWORD value pointed to by this parameter can contain zero or more of the following flags.  FDTF_SHORTTIME (0x00000001)   The short time was successfully formatted.  FDTF_SHORTDATE (0x00000002)   The short date was successfully formatted.  FDTF_LONGDATE (0x00000004)   The long date was successfully formatted.  FDTF_LONGTIME (0x00000008)   The long time was successfully formatted.  FDTF_RELATIVE (0x00000010)   Relative notation was used for the date."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszBuf",
        "description": "Type: LPTSTR A pointer to a buffer that receives the formatted date and time. The buffer must be large enough to contain the number of TCHAR characters specified by the cchBuf parameter, including a terminating null character."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT The number of TCHARs that can be contained by the buffer pointed to by pszBuf."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHFormatDrive is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: DWORD Returns the format ID of the last successful format or one of the following values. The LOWORD of this value can be passed on subsequent calls as the fmtID parameter to repeat the last format.  ",
    "remarks": "The format is controlled by the dialog box interface. That is, the user must click the OK button to actually begin the format\u00e2\u0080\u0094the format cannot be started programmatically. This call to SHFormatDrive brings up the Shell's Format dialog box for a disk in drive A, with the default formatting options selected. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "SHFormatDrive",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the parent window of the dialog box. The Format dialog box must have a parent window; therefore, this parameter cannot be NULL."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "drive",
        "description": "Type: UINT The drive to format. The value of this parameter represents a letter drive starting at 0 for the A: drive. For example, a value of 2 stands for the C: drive."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "fmtID",
        "description": "Type: UINT The ID of the physical format. Only the following flag is currently defined.  SHFMT_ID_DEFAULT (0xFFFF)   The default format ID."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "options",
        "description": "Type: UINT This value must be 0 or one of the following values that alter the default format options in the dialog box. This value is regarded as a bitfield and should be treated accordingly.  SHFMT_OPT_FULL (0x0001)   0x001. If this flag is set, then the Quick Format option is selected. This function is included in Shlobj.h only in Windows XP with SP1 and later. Windows XP:  Prior to Windows XP with SP1, this function is accessible through Shell32.lib.  SHFMT_OPT_SYSONLY (0x0002)   0x002. Selects the Create an MS-DOS startup disk option, creating a system boot disk."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows. Use CoTaskMemFree instead.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHFree",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pv",
        "description": "Type: void* A pointer to the memory allocated by SHAlloc."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[SHFreeShared is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHFreeShared",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hData",
        "description": "Type: HANDLE A handle to the mapped memory."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "Type: DWORD The process ID of the process from which the memory was allocated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHGetAttributesFromDataObject is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetAttributesFromDataObject",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IDataObject*",
        "name": "pdo",
        "description": "Type: IDataObject* The data object from which to retrieve the information."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwAttributeMask",
        "description": "Type: DWORD One or more of the SFGAO flags that indicate which pieces of information the calling application wants to retrieve."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwAttributes",
        "description": "Type: DWORD* A pointer to a DWORD value that, when this function returns successfully, receives one or more SFGAO flags that indicate the attributes, among those requested, that are common to all items in pdo. This pointer can be NULL if this information is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "UINT*",
        "name": "pcItems",
        "description": "Type: UINT* A pointer to a UINT that, when this function returns successfully, receives the number of PIDLs in the data object pointed to by pdo. This pointer can be NULL if this information is not needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Deprecated. Retrieves the path of a folder as an ITEMIDLIST structure.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "The SHGetFolderLocation, SHGetFolderPath, SHGetSpecialFolderLocation, and SHGetSpecialFolderPath functions are the preferred ways to obtain handles to folders on systems earlier than Windows Vista. Functions such as ExpandEnvironmentStrings that use the environment variable names directly, in the form %VariableName%, may not be reliable. This function is a superset of SHGetSpecialFolderLocation, included with earlier versions of the Shell. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetFolderLocation",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nFolder",
        "description": "Type: int A CSIDL value that identifies the folder to be located. The folders associated with the CSIDLs might not exist on a particular system."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that can be used to represent a particular user. It is usually set to NULL, but it may be needed when there are multiple users for those folders that are treated as belonging to a single user. The most commonly used folder of this type is My Documents. The calling application is responsible for correct impersonation when hToken is non-NULL. It must have appropriate security privileges for the particular user, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues.          \t\t\t\t\t Assigning the hToken parameter a value of -1 indicates the Default User. This allows clients of SHGetFolderLocation to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "Type: DWORD"
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* The address of a pointer to an item identifier list structure that specifies the folder's location relative to the root of the namespace (the desktop). The ppidl parameter is set to NULL on failure. The calling application is responsible for freeing this resource by calling ILFree."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Deprecated. Gets the path of a folder identified by a CSIDL value.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is a superset of SHGetSpecialFolderPath. Only some CSIDL values are supported, including the following: The following code example uses SHGetFolderPath to find or create a folder and then creates a file in it. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nFolder",
        "description": "Type: int A CSIDL value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder by combining the folder's CSIDL with CSIDL_FLAG_CREATE."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that can be used to represent a particular user.                                Microsoft Windows 2000 and earlier: Always set this parameter to NULL. Windows XP and later: This parameter is usually set to NULL, but you might need to assign a non-NULL value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. The calling process is responsible for correct impersonation when hToken is non-NULL. The calling process must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues. Assigning the hToken parameter a value of -1 indicates the Default User. This enables clients of SHGetFolderPath to find folder locations (such as the Desktop folder) for the Default User. The Default User user profile is duplicated when any new user account is created, and includes special folders such as My Documents and Desktop. Any items added to the Default User folder also appear in any new user account."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Flags that specify the path to be returned. This value is used in cases where the folder associated with a KNOWNFOLDERID (or CSIDL) can be moved, renamed, redirected, or roamed across languages by a user or administrator.                                The known folder system that underlies SHGetFolderPath allows users or administrators to redirect a known folder to a location that suits their needs. This is achieved by calling IKnownFolderManager::Redirect, which sets the \"current\" value of the folder associated with the SHGFP_TYPE_CURRENT flag. The default value of the folder, which is the location of the folder if a user or administrator had not redirected it elsewhere, is retrieved by specifying the SHGFP_TYPE_DEFAULT flag. This value can be used to implement a \"restore defaults\" feature for a known folder. For example, the default value (SHGFP_TYPE_DEFAULT) for FOLDERID_Music (CSIDL_MYMUSIC) is \"C:\\Users\\user name\\Music\". If the folder was redirected, the current value (SHGFP_TYPE_CURRENT) might be \"D:\\Music\". If the folder has not been redirected, then SHGFP_TYPE_DEFAULT and SHGFP_TYPE_CURRENT retrieve the same path.  SHGFP_TYPE_CURRENT   Retrieve the folder's current path.  SHGFP_TYPE_DEFAULT   Retrieve the folder's default path."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string of length MAX_PATH which will receive the path. If an error occurs or S_FALSE is returned, this string will be empty. The returned path does not include a trailing backslash. For example, \"C:\\Users\" is returned rather than \"C:\\Users\\\"."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Gets the path of a folder and appends a user-provided subfolder path.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. The following example shows how to use SHGetFolderPathAndSubDir to locate the System32 subdirectory and then create a file within it. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetFolderPathAndSubDir",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.60 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "csidl",
        "description": "Type: int A CSIDL value that identifies the folder whose path is to be retrieved. Only real folders are valid. If a virtual folder is specified, this function fails. You can force creation of a folder with SHGetFolderPathAndSubDir by combining the folder's CSIDL with CSIDL_FLAG_CREATE."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that represents a particular user. For systems earlier than Windows 2000, set this value to NULL. For later systems, hToken is usually, but not always, set to NULL. You might need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is My Documents."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Specifies whether the path to be returned is the actual path of the folder or the default path. This value is used in cases where the folder associated with a CSIDL value may be moved or renamed by the user.  SHGFP_TYPE_CURRENT   Return the folder's current path.  SHGFP_TYPE_DEFAULT   Return the folder's default path."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszSubDir",
        "description": "Type: LPCTSTR A pointer to the subpath to be appended to the folder's path. This is a null-terminated string of length MAX_PATH. If you are not creating a new directory, this must be an existing subdirectory or the function returns an error. This value can be NULL if no subpath is to be appended."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszPath",
        "description": "Type: LPTSTR When this function returns, this value points to the directory path and appended subpath. This is a null-terminated string of length MAX_PATH. This string is empty when the function returns an error code."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The inverse color mapping table is a table of 32,768 bytes. It contains the indexes of colors in the halftone palette. Each index is stored at a position in the buffer that corresponds to a particular RGB value expressed in 555 format. These pairings allow you to find a color in the halftone palette which is a close approximation of the original color. For example, the method for determining a color in the halftone palette that is a close approximation for the color #306040 is as follows: ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetInverseCMAP",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbMap",
        "description": "Type: BYTE* A pointer to an array of BYTEs that receives the inverse color table mapping, or a pointer to an LPBYTE which receives a pointer to a cached copy of the inverse color table mapping, depending on the value of the cbMap parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbMap",
        "description": "Type: ULONG The size of the buffer pointed to by pbMap, which also defines its contents. Two values are recognized.   (sizeof(BYTE*))   The buffer pointed to by pbMap receives a pointer to a cached copy of the inverse color map table.   (32768)   The buffer pointed to by pbMap receives a copy of the inverse color map table. The buffer must be exactly 32,768 bytes in size."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHGetRealIDL is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetRealIDL",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* A pointer to an instance of IShellFolder whose simple PIDL is to be converted."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidlSimple",
        "description": "Type: PCUITEMID_CHILD The simple PIDL to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PITEMID_CHILD*",
        "name": "ppidlReal",
        "description": "Type: PITEMID_CHILD* When this method returns, contains a pointer to the full converted PIDL. If the function fails, this parameter is set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHGetSetFolderCustomSettings is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Only Unicode strings are supported. Windows Server 2003 and Windows XP:  SHGetSetFolderCustomSettings supports both ANSI and Unicode strings. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetSetFolderCustomSettings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPSHFOLDERCUSTOMSETTINGS",
        "name": "pfcs",
        "description": "Type: LPSHFOLDERCUSTOMSETTINGS A pointer to a SHFOLDERCUSTOMSETTINGS structure that provides or receives the custom folder settings."
      },
      {
        "in_out": "_In_",
        "type": "PCTSTR",
        "name": "pszPath",
        "description": "Type: PCTSTR A pointer to a null-terminated Unicode string that contains the path to the folder. The length of  pszPath must be MAX_PATH or less, including the terminating null character."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwReadWrite",
        "description": "Type: DWORD A flag that controls the action of the function. It may be one of the following values.  FCS_READ (0x00000001)   Retrieve the custom folder settings in pfcs.  FCS_FORCEWRITE (0x00000002)   Use pfcs to set the custom folder's settings regardless of whether the values are already present.  FCS_WRITE (FCS_READ | FCS_FORCEWRITE)   Use pfcs to set the custom folder's settings if the values are not already present."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHGetSetSettings is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Windows Shell",
    "name": "SHGetSetSettings",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPSHELLSTATE",
        "name": "lpss",
        "description": "Type: LPSHELLSTATE A pointer to a SHELLSTATE structure that provides or receives the Shell state settings."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMask",
        "description": "Type: DWORD One or more of the SSF flags that indicate which settings should be set or retrieved."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bSet",
        "description": "Type: BOOL TRUE to indicate that the contents of lpss should be used to set the Shell settings, FALSE to indicate that the Shell settings should be retrieved to lpss."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHGetSpecialFolderPath is not supported. Instead, use ShGetFolderPath.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. ",
    "remarks": "The Microsoft Internet Explorer 4.0 Desktop Update must be installed for this function to be available. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHGetSpecialFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Reserved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszPath",
        "description": "Type: LPTSTR A pointer to a null-terminated string that receives the drive and path of the specified folder. This buffer must be at least MAX_PATH characters in size."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "csidl",
        "description": "Type: int A CSIDL that identifies the folder of interest. If a virtual folder is specified, this function will fail."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fCreate",
        "description": "Type: BOOL Indicates whether the folder should be created if it does not already exist. If this value is nonzero, the folder is created. If this value is zero, the folder is not created."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[SHGetViewStatePropertyBag is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Critical information should not be stored in the view state property bag because the system keeps only a limited number of view states. If a folder is not visited for a long time, its view state is eventually deleted. We recommend that you use the IID_PPV_ARGS macro, defined in Objbase.h, to package the riid and ppv parameters. This macro provides the correct IID based on the interface pointed to by the value in ppv, which eliminates the possibility of a coding error in riid that could lead to unexpected results. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHGetViewStatePropertyBag",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL of the folder for which you are requesting properties. This parameter must be NULL if the SHGVSPB_ALLFOLDERS flag is passed."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pszBagName",
        "description": "Type: PCWSTR A pointer to a string that contains the name of the requested property bag."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD A value that specifies a combination of the following flags.  One value from the following set of flags is required.  SHGVSPB_PERUSER   Returns the per-user properties for the specified pidl.  SHGVSPB_ALLUSERS   Returns the All User properties for the specified pidl.    One value from the following set of flags is required.  SHGVSPB_PERFOLDER   Returns the property bag for the folder specified by the pidl parameter.  SHGVSPB_ALLFOLDERS   Returns the property bag that applies to all folders.  SHGVSPB_INHERIT   Returns the property bag used to provide defaults for subfolders that do not have their property bag.    The following flags are optional.  SHGVSPB_ROAM   Allows the property bag to roam. See Roaming User Profiles. This flag cannot be combined with SHGVSPB_ALLFOLDERS.  SHGVSPB_NOAUTODEFAULTS   Suppresses the search for a suitable default when the property bag cannot be found for the specified folder. By default, if SHGVSPB_INHERIT is not specified and a property bag cannot be found for the specified folder, the system searches for identically named property bags in other locations that may be able to provide default values. For example, the system searches in the ancestors of the folder to see if any of them provide a SHGVSPB_INHERIT property bag. Other places the system searches are in the user defaults and the global defaults.    The following set of flags consists of values that combine some flags listed above, and are used for brevity and convenience.  SHGVSPB_FOLDER   Combines SHGVSPB_PERUSER and SHGVSPB_PERFOLDER.  SHGVSPB_FOLDERNODEFAULTS   Combines SHGVSPB_PERUSER, SHGVSPB_PERFOLDER, and SHGVSPB_NOAUTODEFAULTS.  SHGVSPB_USERDEFAULTS   Combines SHGVSPB_PERUSER and SHGVSPB_ALLFOLDERS.  SHGVSPB_GLOBALDEFAULTS   Combines SHGVSPB_ALLUSERS and SHGVSPB_ALLFOLDERS. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This flag is named SHGVSPB_GLOBALDEAFAULTS."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Type: REFIID A reference to the IID of the interface to retrieve through ppv."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Type: void** When this method returns successfully, contains the interface pointer requested in riid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHHandleUpdateImage is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns -1 on failure or the index of the changed image list entry on success. ",
    "remarks": "Use SHHandleUpdateImage only when the pidl2 parameter received by your change notification callback is non-NULL. The following example demonstrates the use of SHHandleUpdateImage in the implementation of IShellChangeNotify::OnChange. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHHandleUpdateImage",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidlExtra",
        "description": "Type: PCIDLIST_ABSOLUTE The index in the system image list that has changed, specified in the pidl2 parameter of IShellChangeNotify::OnChange."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHILCreateFromPath is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Applications should use SHParseDisplayName instead]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHILCreateFromPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a null-terminated string of maximum length MAX_PATH containing the path to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "PIDLIST_ABSOLUTE*",
        "name": "ppidl",
        "description": "Type: PIDLIST_ABSOLUTE* The path in pszPath expressed as a PIDL."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "rgflnOut",
        "description": "Type: DWORD* A pointer to a DWORD value that, on entry, indicates any attributes of the folder named in pszPath that the calling application would like to retrieve along with the PIDL. On exit, this value contains those requested attributes. For a list of possible attribute flags for this parameter, see IShellFolder::GetAttributesOf."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Executes a command on a printer object.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shellapi.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise, FALSE. ",
    "remarks": "When a printer name is specified by lpBuf1, the name can either be the name of a local printer or the server and share name of a network printer. When specifying a network printer name, the name must be specified in this format: This function is implemented in Shell versions 4.71 and later. In order to maintain backward compatibility with previous Shell versions, this function should not be used explicitly. Instead, the LoadLibrary and GetProcAddress functions should be used to obtain the function address. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHInvokePrinterCommand",
    "is_callback": 0,
    "dll": "Shell32.dll (version 4.71 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the parent window of any windows or dialog boxes that are created during the operation."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uAction",
        "description": "Type: UINT The type of printer operation to perform. One of the following values:   PRINTACTION_OPEN (0)   0x0. Open the printer specified by lpBuf1. The lpBuf2 parameter is ignored.   PRINTACTION_PROPERTIES (1)   0x1. Display the property pages for the printer specified by lpBuf1. The lpBuf2 parameter can be NULL or can name a specific property sheet to display, either by name or number. If the high WORD of lpBuf2 is nonzero, it is assumed that this parameter is a pointer to a buffer that contains the name of the sheet to open. Otherwise, lpBuf2 is seen as the zero-based index of the property sheet to open.  PRINTACTION_NETINSTALL (2)   0x2. Install the network printer specified by lpBuf1. The lpBuf2 parameter is ignored.  PRINTACTION_NETINSTALLLINK (3)   0x3. Create a shortcut to the network printer specified by lpBuf1. The lpBuf2 parameter specifies the drive and path of the folder in which to create the shortcut. The network printer must already have been installed on the local computer.  PRINTACTION_TESTPAGE (4)   0x4. Print a test page on the printer specified by lpBuf1. The lpBuf2 parameter is ignored.  PRINTACTION_OPENNETPRN (5)   0x5. Open the network printer specified by lpBuf1. The lpBuf2 parameter is ignored.  PRINTACTION_DOCUMENTDEFAULTS (6)   0x6. Display the default document properties for the printer specified by lpBuf1. The lpBuf2 parameter is ignored.   PRINTACTION_SERVERPROPERTIES (7)   0x7. Display the properties for the printer server specified by lpBuf1. The lpBuf2 parameter is ignored."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpBuf1",
        "description": "Type: LPCTSTR Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of uAction."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpBuf2",
        "description": "Type: LPCTSTR Pointer to a null-terminated string that contains additional information for the printer command. The information contained in this parameter depends upon the value of uAction."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fModal",
        "description": "Type: BOOL TRUE to specify that SHInvokePrinterCommand should not return until the command is completed; FALSE if the function should return as soon as the command is initialized."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the window specified by hwnd is equal to, a child of, or a descendent of the window specified by hwndParent. Returns S_FALSE if the window specified by hwnd is not equal to, not a child of, and not a descendent of the window specified by hwndParent. The return value is undefined if either window handle is invalid. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHIsChildOrSelf",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the first window."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a window to be tested against hwndParent."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLimitInputEdit",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndEdit",
        "description": "Type: HWND The handle of the edit control."
      },
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* An IShellFolder interface pointer. This object must also implement IItemNameLimits, which supplies a list of invalid characters and a maximum name length."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It is not supported as of Windows Vista.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns S_OK. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHLoadOLE",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM  Ignored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[SHLockShared is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Returns a void pointer to the shared memory. Returns NULL if unsuccessful. ",
    "remarks": "Call SHUnlockShared to unlock the memory that this function maps. Call SHFreeShared to release the memory. ",
    "return_type": "void*",
    "category": "Windows Shell",
    "name": "SHLockShared",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hData",
        "description": "Type: HANDLE A handle to the memory you want to map into the calling process."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "Type: DWORD The process ID of the process from which you want to map the block of memory."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHMapPIDLToSystemImageListIndex is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: int Returns the index of the item's normal icon in the system image list if successful, or -1 otherwise. ",
    "remarks": "",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHMapPIDLToSystemImageListIndex",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IShellFolder*",
        "name": "psf",
        "description": "Type: IShellFolder* An IShellFolder interface pointer for the folder that contains the item."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD A pointer to the item's ITEMIDLIST structure."
      },
      {
        "in_out": "_Out_opt_",
        "type": "int*",
        "name": "piIndex",
        "description": "Type: int* A pointer to an int that, when this function returns successfully, receives the index of the item's open icon in the system image list. If the item does not have a special open icon then the index of its normal icon is returned. If the open icon exists and cannot be obtained, then the value pointed to by piIndex is set to -1. This parameter can be NULL if the calling application is not interested in the open icon."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[SHMessageBoxCheck is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int If the user has already chosen to suppress the message box, the function immediately returns the value assigned to iDefault. If the user clicks the OK, Cancel, Yes, or No button, the function returns IDOK, IDCANCEL, IDYES, or IDNO, respectively. If the user closes the message box by clicking the X button in the caption, the function returns IDCANCEL. This value is returned in this case even if the MB_OKCANCEL flag has not been set. If an error occurs, the return value is normally \u00e2\u0080\u00931. However, under certain low-memory conditions, the function might return iDefault. ",
    "remarks": "Security Warning:  Do not take any dangerous actions if the function returns either \u00e2\u0080\u00931 or iDefault. If an error occurs when attempting to display the message box, SHMessageBoxCheck returns \u00e2\u0080\u00931 or, in some cases, iDefault. Such errors can be caused by insufficient memory or resources.  If you get one of these return values, you should be aware that the user did not necessarily see the dialog box and consequently did not positively agree to any action. Do not confuse \"Do not show this dialog box\" with \"Remember this answer\". SHMessageBoxCheck does not provide \"Remember this answer\" functionality. If the user chooses to suppress the message box again, the function does not preserve which button they clicked. Instead, subsequent invocations of SHMessageBoxCheck simply return the value specified by iDefault. Consider the following example. If the user selects In the future, do not show me this dialog box and clicks the Yes button, SHMessageBoxCheck returns IDYES. However, the next time this code is executed, SHMessageBoxCheck does not return IDYES, even though the user selected Yes originally. Instead, it returns IDNO, because that is the value specified by iDefault. The default button displayed by the message box should agree with your iDefault value. The lack of support for the MB_DEFBUTTON2 flag means that iDefault should be set to IDOK if you have specified the MB_OK or MB_OKCANCEL flag. The iDefault value should be set to IDYES if you have set the MB_YESNO flag. SHMessageBoxCheck records the message boxes that the user has chosen to suppress under the following registry key. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHMessageBoxCheck",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The window handle to the message box's owner. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszText",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the message to be displayed."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszCaption",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains the title of the message box. If this parameter is set to NULL, the title is set to Error!."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uType",
        "description": "Type: UINT The flags that specify the contents and behavior of the message box. This function supports only a subset of the flags supported by MessageBox. If you use any flags that are not listed below, the function's behavior is undefined.  You must specify the buttons to be displayed by setting one and only one of the following flags.  MB_OKCANCEL   Display a message box with OK and Cancel buttons.  MB_YESNO   Display a message box with Yes and No buttons.  MB_OK   Display a message box with an OK button.    You can display an optional icon by setting one and only one of the following flags.  MB_ICONHAND   Display a stop-sign icon.  MB_ICONQUESTION   Display a question-mark icon.  MB_ICONEXCLAMATION   Display an exclamation-point icon.  MB_ICONINFORMATION   Display an icon with a lowercase \"i\" in a circle."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "iDefault",
        "description": "Type: int The value that the function returns when the user has opted not to have the message box displayed again. If the user has not opted to suppress the message box, the message box is displayed and the function ignores iDefault."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszRegVal",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that contains a unique string value to associate with this message. To avoid collisions with values used by Microsoft, this string should include a GUID. This string must not exceed REGSTR_MAX_VALUE_LENGTH characters in length, including the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[SHObjectProperties is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the command is successfully invoked; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHObjectProperties",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The handle of the parent window of the dialog box. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "shopObjectType",
        "description": "Type: DWORD A flag value that specifies the type of object.  SHOP_PRINTERNAME   pszObjectName contains the friendly name of a printer.  SHOP_FILEPATH   pszObjectName contains a fully qualified file name.  SHOP_VOLUMEGUID   pszObjectName contains either (a) a volume name of the form \\\\?\\Volume{GUID}\\, where {GUID} is a globally unique identifier (for example, \"\\\\?\\Volume\\{2eca078d-5cbc-43d3-aff8-7e8511f60d0e}\\)\", or (b) a drive path (for example, \"C:\\\")."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszObjectName",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the object name. The contents of the string are determined by the flag set in shopObjectType."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPropertyPage",
        "description": "Type: PCWSTR A null-terminated Unicode string that contains the name of the property sheet page to be opened initially. Set this parameter to NULL to specify the default page."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[SHOpenPropSheet is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the property sheet was successfully created; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHOpenPropSheet",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszCaption",
        "description": "Type: LPCTSTR A pointer to a string that contains the caption for the property sheet. This value can be NULL if no caption is needed."
      },
      {
        "in_out": "_In_opt_",
        "type": "HKEY",
        "name": "ahkeys[]",
        "description": "Type: HKEY[] An array of registry keys that represent the CLSIDs of the individual property sheets."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "ckeys",
        "description": "Type: UINT UINT value that specifies the number of property sheets in the array specified by ahkeys."
      },
      {
        "in_out": "_In_opt_",
        "type": "const CLSID*",
        "name": "pclsidDef",
        "description": "Type: const CLSID* A pointer to the default CLSID. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IDataObject*",
        "name": "pdtobj",
        "description": "Type: IDataObject* A pointer to an IDataObject, an OLE object that can be used to carry out actions on the property sheet(s)."
      },
      {
        "in_out": "_In_opt_",
        "type": "IShellBrowser*",
        "name": "psb",
        "description": "Type: IShellBrowser* Not used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pStartPage",
        "description": "Type: LPCTSTR A pointer to a string that specifies the start page. This value can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is no longer supported.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL TRUE if the evaluation matches the fDefault value; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHRegGetBoolValueFromHKCUHKLM",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PCWSTR",
        "name": "pszKey",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the path to the key to be checked."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszValue",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the value to be evaluated."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDefault",
        "description": "Type: BOOL The expected state of the evaluation, as defined by the calling function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[This function is no longer supported.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LONG If successful, this function returns ERROR_SUCCESS and all out parameters requested. Returns ERROR_MORE_DATA if the function fails due to insufficient space in a provided non-NULL pvData. In this case  only pdwType and pcbData may contain valid data, pvData will be undefined. Otherwise, returns a nonzero error code defined in Winerror.h . You can use the FormatMessage function with the FORMAT_MESSAGE_FROM_SYSTEM flag to retrieve a generic description of the error. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Windows Shell",
    "name": "SHRegGetValueFromHKCUHKLM",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszKey",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the path to the registry key."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszValue",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string that specifies the key value. This value can be NULL, in which case data is retrieved from the Default value."
      },
      {
        "in_out": "_In_",
        "type": "SRRF",
        "name": "srrfFlags",
        "description": "Type: SRRF The SRRF flag constants. If more than one flag is used they can be combined using a bitwise OR. These flags are used to restrict the type of data returned. This value cannot be 0."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwType",
        "description": "Type: DWORD* When this function returns, contains a pointer to a DWORD which receives a code that indicates the type of data stored in the specified value.  This can be set to NULL if no type information is wanted. If this value is not NULL, and the SRRF_NOEXPAND flag has not been set, data types of REG_EXPAND_SZ will be returned as REG_SZ since they are automatically expanded in this method."
      },
      {
        "in_out": "_In_",
        "type": "LPCVOID",
        "name": "pvData",
        "description": "Type: LPCVOID A pointer to a buffer that contains the value's data. This parameter can be NULL if the data is not needed. This value must contain the size of the pvData buffer on entry.  If pvData is NULL (or if pvData is not NULL, but too small of a buffer to hold the registry data), then on exit it will contain the size required to hold the registry data."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "Type: DWORD* When this function returns, contains a pointer to the size of the data, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is available through Windows XP Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: UINT The number of replacements actually performed. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "SHReplaceFromPropSheetExtArray",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HPSXA",
        "name": "hpsxa",
        "description": "Type: HPSXA A property sheet array handle (HPSXA) returned from a call to SHCreatePropSheetExtArray."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uPageID",
        "description": "Type: UINT The ID of the page to replace."
      },
      {
        "in_out": "_In_",
        "type": "LPFNADDPROPSHEETPAGE",
        "name": "lpfnReplaceWith",
        "description": "Type: LPFNADDPROPSHEETPAGE A pointer to an AddPropSheetPageProc function used by the property sheet extension to add a page to a property sheet."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM An application-defined value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHRestricted is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: DWORD Returns nonzero if the specified restriction is in effect, or zero otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "SHRestricted",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "",
        "type": "RESTRICTIONS",
        "name": "rest",
        "description": "Type: RESTRICTIONS Specifies one of the flags described in the RESTRICTIONS enumerated type."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Deprecated. Assigns a new path to a system folder identified by its CSIDL.",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Returns standard HRESULT codes, including the following:  ",
    "remarks": "SHSetFolderPath is not exported by name from Shell32.dll. To use the function, you must call GetProcAddress with ordinal 231 for SHSetFolderPathA (for ANSI strings) or ordinal 232 for SHSetFolderPathW (for Unicode strings) to obtain a function pointer. It is recommended that the paths be expressed as Unicode strings because folder names might contain Unicode characters not expressible in ANSI. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHSetFolderPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "csidl",
        "description": "Type: int A CSIDL value that identifies the folder whose path is to be set. Only physical folders are valid. If a virtual folder is specified, this function fails. Add the CSIDL_FLAG_DONT_UNEXPAND value to the CSIDL to ensure that the string is written to the registry exactly as provided. If the CSIDL_FLAG_DONT_UNEXPAND flag is not included, portions of the path may be replaced by environment strings, such as %USERPROFILE%."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "Type: HANDLE An access token that can be used to represent a particular user. This parameter is usually set to NULL, in which case the function tries to access the current user's instance of the folder. However, you may need to assign a value to hToken for those folders that can have multiple users but are treated as belonging to a single user. The most commonly used folder of this type is Documents. The calling application is responsible for correct impersonation when hToken is non-null. It must have appropriate security privileges for the particular user, including TOKEN_QUERY and TOKEN_IMPERSONATE, and the user's registry hive must be currently mounted. See Access Control for further discussion of access control issues."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Reserved. Must be set to 0."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszPath",
        "description": "Type: LPCTSTR A pointer to a null-terminated string of length MAX_PATH that contains the folder's new path. This value cannot be NULL, and the string cannot be of zero length."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: LRESULT The return value is not meaningful. ",
    "remarks": "SHSendMessageBroadcast is equivalent to SendMessage with HWND_BROADCAST. To avoid causing the Shell to become unresponsive in the case where there could be a window in the system that is not responding to messages, use SHSendMessageBroadcast. SHSendMessageBroadcast is not exported by name. SHSendMessageBroadcastA is exported from Shlwapi.dll as ordinal 432. SHSendMessageBroadcastW is exported from Shlwapi.dll as ordinal 433. ",
    "return_type": "LRESULT",
    "category": "Windows Shell",
    "name": "SHSendMessageBroadcast",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT The message to send."
      },
      {
        "in_out": "_In_",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message-specific information."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message-specific information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHShellFolderView_Message is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: LRESULT The return value depends on the message passed in uMsg. See individual message topics for more information. ",
    "remarks": "",
    "return_type": "LRESULT",
    "category": "Windows Shell",
    "name": "SHShellFolderView_Message",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndMain",
        "description": "Type: HWND A handle to the window that receives the message."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "uMsg",
        "description": "Type: UINT The message to send. The following is a list of possible messages.  \t\t\t\t\t\t  MessageDescription  SFVM_ADDOBJECT Adds an object to the shell view.  SFVM_GETSELECTEDOBJECTS Retrieves an array of PIDLs for all selected objects.  SFVM_REARRANGE Notifies the IShellView to rearrange its items.  SFVM_REMOVEOBJECT Removes an object from the shell view.  SFVM_SETCLIPBOARD Notifies the IShellView when one of its objects is placed on the clipboard as a result of a menu command.  SFVM_SETITEMPOS Sets the position of an item in the shell view.  SFVM_SETPOINTS Sets the points of the currently selected objects to the data object on copy and cut commands.  SFVM_UPDATEOBJECT Updates an object by passing a pointer to an array of two PIDLs."
      },
      {
        "in_out": "",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Contents of this value depend on the message passed in uMsg. See individual message topics for more information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Deprecated. Returns a pointer to an ITEMIDLIST structure when passed a path.",
    "library": "Shell32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shobjidl.h",
    "return_value": "Type: PIDLIST_ABSOLUTE Returns a pointer to an ITEMIDLIST structure if successful, or NULL otherwise. ",
    "remarks": "Prior to Windows 7, this function was declared in Shlobj.h. In Windows 7 and later versions, it is declared in Shobjidl.h. An alternative to this function is as follows: ",
    "return_type": "PIDLIST_ABSOLUTE",
    "category": "Windows Shell",
    "name": "SHSimpleIDListFromPath",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszPath",
        "description": "Type: PCWSTR A pointer to a null-terminated string that contains the path to be converted to a PIDL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHStartNetConnectionDialog is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: HRESULT Always returns S_OK. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "SHStartNetConnectionDialog",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "pszRemoteName",
        "description": "Type: LPCTSTR A pointer to a null-terminated character string that specifies the remote network name. This value can be set to NULL."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwType",
        "description": "Type: DWORD A bitfield that contains a set of flags that identify the type of resource that the dialog box is set to find. This value can contain one of the following values, defined in Winnetwk.h:  RESOURCETYPE_ANY (0x00000000)   All resources  RESOURCETYPE_DISK (0x00000001)   Disk resources  RESOURCETYPE_PRINT (0x00000002)   Print resources"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: TCHAR Returns the mnemonic character, if one was found. Otherwise, returns 0. ",
    "remarks": "The term \"mnemonic\" is misspelled in the function name. The function supports the following mnemonic formats.  ",
    "return_type": "TCHAR",
    "category": "Windows Shell",
    "name": "SHStripMneumonic",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTSTR*",
        "name": "pszMenu",
        "description": "Type: LPTSTR* A pointer to the null-terminated string that contains the mnemonic marker."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of CHAR values written to the output buffer, including the terminating null character. Returns 0 if unsuccessful. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. For example, if pszDst buffer is not large enough to contain the number of characters specified by cchBuf, a buffer overrun can occur. Buffer overruns can cause a denial of service attack against an application if an access violation occurs. In the worst case, a buffer overrun might allow an attacker to inject executable code into your process, especially if pszDst is a stack-based buffer. In addition, the output string is silently truncated if it is too large for the buffer. This can cause canonicalization or other security vulnerabilities. If the pszDst buffer is not large enough to contain the entire converted output string, the string is truncated to fit the buffer. There is no way to detect that the return string has been truncated. The string will always be null-terminated, even if it has been truncated. This function takes care to not truncate between the lead and trail bytes of a DBCS character pair. In that case, only cchBuf-1 characters are returned. If the pwszSrc and pszDst buffers overlap, the function's behavior is undefined. SHTCharToAnsi is defined to be the same as SHUnicodeToAnsi. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHUnicodeToAnsi",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszSrc",
        "description": "Type: PCWSTR A pointer to the null-terminated Unicode string to be converted to ANSI."
      },
      {
        "in_out": "_Out_",
        "type": "PSTR",
        "name": "pszDst",
        "description": "Type: PSTR A pointer to a buffer that, when this function returns successfully, receives the converted characters. The buffer must be large enough to contain the number of CHAR characters specified by the cchBuf parameter, including room for a terminating null character."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cchBuf",
        "description": "Type: int The number of CHAR values that can be contained by the buffer pointed to by pszDst. The value assigned to parameter must be greater than zero."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is available through Windows XP and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server, Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: int Returns the number of WCHAR characters written to the output buffer, including the terminating null character. Returns 0 if unsuccessful. ",
    "remarks": "Security Warning:  Using this function incorrectly can compromise the security of your application. For example, if pwzDst buffer is not large enough to contain the number of characters specified by cwchBuf, a buffer overrun can occur. Buffer overruns can cause a denial of service attack against an application if an access violation occurs. In the worst case, a buffer overrun might allow an attacker to inject executable code into your process, especially if pwzDst is a stack-based buffer. When copying an entire string, note that sizeof returns the number of bytes, which is not the correct value to use for the cwchBuf parameter. Instead, use sizeof(pwzDst)/sizeof(WCHAR). Note that this technique assumes that pwzDst is an array, not a pointer. Note also that the function silently truncates the output string  if the buffer is not large enough. This can result in canonicalization or other security vulnerabilities. If the pwzDst buffer is not large enough to contain the entire converted output string, the string is truncated to fit the buffer. There is no way to detect that the return string has been truncated.  The string will always be null-terminated, even if it has been truncated. This ensures that no more than cwchBuf characters are copied to pwzDst. No attempt is made to avoid truncating the string in the middle of a Unicode surrogate pair. If the pwzSrc and pwzDst buffers overlap, the function's behavior is undefined. SHTCharToUnicode is defined to be the same as SHUnicodeToUnicode. SHUnicodeToTChar is defined to be the same as SHUnicodeToUnicode. ",
    "return_type": "int",
    "category": "Windows Shell",
    "name": "SHUnicodeToUnicode",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwzSrc",
        "description": "Type: PCWSTR A pointer to a null-terminated Unicode string to be copied to the output buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pwzDst",
        "description": "Type: PWSTR A pointer to an output buffer to receive the copied characters. The buffer must be large enough to contain the number of WCHAR characters specified by cwchBuf, including room for a terminating null character."
      },
      {
        "in_out": "",
        "type": "int",
        "name": "cwchBuf",
        "description": "Type: int The number of WCHAR characters that can be contained by the buffer pointed to by pwzDst parameter. This parameter must be greater than zero."
      }
    ],
    "min_client": "Windows 2000 Professional, Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SHUnlockShared is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shlwapi.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: BOOL If the function succeeds, the return value is TRUE and all modified pages within the specified range are written to the disk with low priority. If the function fails, the return value is FALSE. To get extended error information, call GetLastError. ",
    "remarks": "Call SHFreeShared to free the memory block. ",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHUnlockShared",
    "is_callback": 0,
    "dll": "Shlwapi.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvData",
        "description": "Type: void* A pointer to the shared memory block returned by SHLockShared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SHValidateUNC is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if the UNC path exists; FALSE if the UNC path does not exist or if some other failure occurred. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SHValidateUNC",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.00 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "Type: HWND Handle of the parent window, used to display UI. If this is not needed, this value can be set to NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "PWSTR",
        "name": "pszFile",
        "description": "Type: PWSTR A pointer to a null-terminated Unicode string that specifies the UNC path to validate. Note: This string must not be a constant string."
      },
      {
        "in_out": "",
        "type": "UINT",
        "name": "fConnect",
        "description": "Type: UINT One or more of the following values.  VALIDATEUNC_CONNECT (0x0001)   Connect a drive letter. When this flag is set, the value in pszFile is changed to the local drive to which the UNC is mapped on the local machine.  VALIDATEUNC_NOUI (0x0002)   On either failure or success, display no UI.  VALIDATEUNC_PRINT (0x0004)   Validate as a print share rather than disk share.  VALIDATEUNC_PERSIST (0x0008)   Windows Vista and later. The connection should be made persistent.  VALIDATEUNC_VALID   Mask value used to verify that the flags passed to SHValidateUNC are valid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[SignalFileOpen is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if successful; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "SignalFileOpen",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCIDLIST_ABSOLUTE",
        "name": "pidl",
        "description": "Type: PCIDLIST_ABSOLUTE A PIDL that specifies the file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[StopWatchFlush is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: DWORD ERROR_SUCCESS on success, or an error code on failure. Possible error codes include the following:  ",
    "remarks": "The performance log is written to the shperf.log file in the Windows directory.  If message performance logs are enabled, the message performance log is written to the msgtrace.log file in the Windows directory. If you call StopWatchFlush, you must have permission to create and modify files in the Windows directory. Calling StopWatchFlush clears the performance logs after writing them to the shperf.log file. See the StopWatchMode function for a description of the information that is recorded in the performance log. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "StopWatchFlush",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[StopWatchMode is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: DWORD The current stopwatch mode. If performance information is not being logged, then the stopwatch mode is zero. Otherwise, it consists of one or more of the following flags.  ",
    "remarks": "To enable performance logging, set the following REG_DWORD registry value. You should restart your computer after setting this value, to ensure that the change has taken effect.   The information in the performance log is intended for internal measurement purposes and the exact contents change regularly. Performance logging in its current form is subject to change in the future. Enabling performance logging degrades performance slightly. ",
    "return_type": "DWORD",
    "category": "Windows Shell",
    "name": "StopWatchMode",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Deprecated. Enumerates the URLs of all the Desktop components and then tests to see if they are subscribed to. If they are subscribed to, the subscriptions are delivered.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL Returns TRUE if components are subscribed to; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "UpdateAllDesktopSubscriptions",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IADesktopP2*",
        "name": "padp2",
        "description": "Type: IADesktopP2* A pointer to an IADesktopP2 interface."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[UrlFixupW is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: HRESULT Returns S_OK if the proposed URL was already acceptable or was successfully corrected. The pszTranslatedUrl buffer contains the corrected URL, or the original URL if no correction was needed. Returns S_FALSE if the proposed URL could not be recognized sufficiently to be corrected. Otherwise, returns a standard COM error code. ",
    "remarks": "The UrlFixup function recognizes the schemes specified by the URL_SCHEME enumeration. Priority is given to the first character in the protocol identifier section so htp will be converted to http instead of ftp. This function is available only in a Unicode version. This example shows how to use UrlFixupW. Notice that the last four autocorrections were probably not what the user intended and demonstrate limitations of the heuristic used by the function. ",
    "return_type": "HRESULT",
    "category": "Windows Shell",
    "name": "UrlFixupW",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pcszUrl",
        "description": "Type: PCWSTR A pointer to a null-terminated string that contains the URL to be corrected. This string must not exceed INTERNET_MAX_PATH_LENGTH characters in length, including the terminating NULL character."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszTranslatedUrl",
        "description": "Type: PWSTR A pointer to a buffer that, when this function returns successfully, receives the copied characters. The buffer must be large enough to contain the number of WCHAR characters specified by the cchMax parameter, including the terminating NULL character. This parameter can be equal to the pcszUrl parameter to correct a URL in place. If pszTranslatedUrl is not equal to pcszUrl, the buffer pointed to by pszTranslatedUrl must not overlap the buffer pointed to by pcszUrl."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cchMax",
        "description": "Type: DWORD The number of WCHAR characters that can be contained in the buffer pointed to by pszTranslatedUrl. This parameter must be greater than zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[WhichPlatform is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlwapi.h",
    "return_value": "Type: UINT  ",
    "remarks": "This function always returns PLATFORM_INTEGRATED because Windows XP comes with an integrated shell. ",
    "return_type": "UINT",
    "category": "Windows Shell",
    "name": "WhichPlatform",
    "is_callback": 0,
    "dll": "Shlwapi.dll (version 5.0 or later)",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[Win32DeleteFile is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if the file was successfully deleted; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "Win32DeleteFile",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszFileName",
        "description": "Type: PCWSTR A pointer to a buffer that contains the full name of the file to delete."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[This function is available through Windows XP with Service Pack 2 (SP2) and Windows Server 2003. It might be altered or unavailable in subsequent versions of Windows.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Type: HINSTANCE Returns a value greater than 32 if successful, or an error value that is less than or equal to 32 otherwise. The following table lists the error values. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. The only thing that can be done with the returned HINSTANCE is to cast it to an int and compare it with the value 32 or one of the error codes below.  ",
    "remarks": "WOWShellExecute is not included in a header or .lib file. It is exported from Shell32.dll by name. This method allows you to execute any commands in a folder's shortcut menu or stored in the registry. If lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function  attempts to open or explore the folder. To obtain information about the application that is launched as a result of calling WOWShellExecute, use ShellExecuteEx. ",
    "return_type": "HINSTANCE",
    "category": "Windows Shell",
    "name": "WOWShellExecute",
    "is_callback": 0,
    "dll": "Shell32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the owner window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpOperation",
        "description": "Type: LPCTSTR A pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. For more information about verbs and their availability, see the Object Verbs section of Launching Applications. See Extending Shortcut Menus for further discussion of shortcut menus. The following verbs are commonly used.  edit   Launches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.  explore   Explores the folder specified by lpFile.  find   Initiates a search starting from the specified directory.  open   Opens the file specified by the lpFile parameter. The file can be an executable file, a document file, or a folder.  print   Prints the document file specified by lpFile. If lpFile is not a document file, the function will fail.  NULL   For systems prior to Windows 2000, the default verb is used if it is valid and available in the registry. If not, the \"open\" verb is used. For Windows 2000 and later systems, the default verb is used if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFile",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpParameters",
        "description": "Type: LPCTSTR If the lpFile parameter specifies an executable file, lpParameters is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpDirectory",
        "description": "Type: LPCTSTR A pointer to a null-terminated string that specifies the default directory."
      },
      {
        "in_out": "_In_",
        "type": "INT",
        "name": "nShowCmd",
        "description": "Type: INT The flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it.  SW_HIDE   Hides the window and activates another window.  SW_MAXIMIZE   Maximizes the specified window.  SW_MINIMIZE   Minimizes the specified window and activates the next top-level window in the z-order.  SW_RESTORE   Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when restoring a minimized window.  SW_SHOW   Activates the window and displays it in its current size and position.  SW_SHOWDEFAULT   Sets the show state based on the SW_ flag specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application. An application should call ShowWindow with this flag to set the initial show state of its main window.  SW_SHOWMAXIMIZED   Activates the window and displays it as a maximized window.  SW_SHOWMINIMIZED   Activates the window and displays it as a minimized window.  SW_SHOWMINNOACTIVE   Displays the window as a minimized window. The active window remains active.  SW_SHOWNA   Displays the window in its current state. The active window remains active.  SW_SHOWNOACTIVATE   Displays a window in its most recent size and position. The active window remains active.  SW_SHOWNORMAL   Activates and displays a window. If the window is minimized or maximized, Windows restores it to its original size and position. An application should specify this flag when displaying the window for the first time."
      },
      {
        "in_out": "",
        "type": "void*",
        "name": "lpfnCBWinExec",
        "description": "Type: void* Callback function used to call CreateProcess in the 16-bit kernel."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[WriteCabinetState is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Shell32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Shlobj.h",
    "return_value": "Type: BOOL TRUE if successful; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Shell",
    "name": "WriteCabinetState",
    "is_callback": 0,
    "dll": "Shell32.dll (version 5.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CABINETSTATE*",
        "name": "pcs",
        "description": "Type: CABINETSTATE* A pointer to a CABINETSTATE structure that holds the values to be set."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]