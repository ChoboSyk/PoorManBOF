[
  {
    "n_arguments": 1,
    "description": "The AddIsnsServer function adds a new server to the list of Internet Storage Name Service (iSNS) servers that the iSCSI initiator service uses to discover targets.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. If the operation fails, because of a problem with a socket connection, AddIsnsServer returns a Winsock error code. If the Address parameter does not point to a valid iSNS server name, the AddIsnsServer routine returns ERROR_INVALID_PARAMETER. ",
    "remarks": "When the iSCSI initiator service receives a request from the AddIsnsServer user-mode library function to add an iSNS server, the initiator service saves relevant data about the iSNS server in non-volatile storage. The iSCSI initiator service queries the newly added server for discovered targets immediately after adding it. From that point forward, the iSCSI initiator service automatically queries the iSNS server whenever the initiator service refreshes the target list of the iSNS server. The initiator service also refreshes the target list of the iSNS server at startup or whenever the iSNS server indicates a change. If management software does not call AddIsnsServer to manually add the new iSNS servers to the service list of the iSCSI initiator service, the initiator service must rely on automatic discovery mechanisms, such as DHCP, to add new iSNS servers to the list. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "AddIsnsServer",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "Address",
        "description": "IP address or the DNS name of the server."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The AddIscsiConnection function adds a new iSCSI connection to an existing session.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "AddIscsiConnection",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that, on input, contains the session identifier for the session that was added."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "Reserved",
        "description": "This member should be null on input."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The number of the port on the initiator that the initiator uses to add the connection. A value of ISCSI_ANY_INITIATOR_PORT indicates that the initiator can use any of its ports to add the connection."
      },
      {
        "in_out": "_In_",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "TargetPortal",
        "description": "A pointer to an ISCSI_TARGET_PORTAL-type structure that indicates the target portal to use when adding the connection.  The portal must belong to the same portal group that the initiator used to login to the target, and it must be a portal that the initiator discovered. The iSCSI initiator service does not verify that the target portal meets these requirements."
      },
      {
        "in_out": "_In_opt_",
        "type": "ISCSI_SECURITY_FLAGS",
        "name": "SecurityFlags",
        "description": "A bitmap that specifies the characteristics of the IPsec connection that the initiator uses to establish the connection. If IPsec security policy between the initiator and the target portal is already configured because of the portal group policy or a previous connection to the portal, the existing configuration takes precedence over the configuration specified in SecurityFlags and the security bitmap is ignored.  If the ISCSI_SECURITY_FLAG_VALID flag is set to 0, the iSCSI initiator service uses default values for the security flags that are defined in the registry.  ValueMeaning  ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec tunnel mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec transport mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_PFS_ENABLED   When set to 1, the initiator should make the connection with Perfect Forward Secrecy (PFS) mode enabled; otherwise, the initiator should make the connection with PFS mode disabled.    ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED   When set to 1, the initiator should make the connection with aggressive mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED flag, but not both.    Note  The Microsoft software initiator driver does not support aggressive mode.      ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED   When set to 1, the initiator should make the connection with main mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED flag, but not both.   ISCSI_SECURITY_FLAG_IKE_IPSEC_ENABLED   When set to 1, the initiator should make the connection with the IKE/IPsec protocol enabled; otherwise, the IKE/IPsec protocol is disabled.   ISCSI_SECURITY_FLAG_VALID   When set to 1, the other mask values are valid; otherwise, the iSCSI initiator service will use bitmap values that were previously defined for the target portal, or if none are available, the initiator service uses the default values defined in the registry."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSCSI_LOGIN_OPTIONS",
        "name": "LoginOptions",
        "description": "A pointer to a structure of type ISCSI_LOGIN_OPTIONS that contains the options that specify the characteristics of the login session."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "KeySize",
        "description": "The size, in bytes, of the preshared key that is passed to the target."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCHAR",
        "name": "Key",
        "description": "If the IPsec security policy between the initiator and the target portal is already configured as a result of the portal group policy or a previous connection to the portal, the existing key takes precedence over the key currently specified in this member."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PISCSI_UNIQUE_CONNECTION_ID",
        "name": "ConnectionId",
        "description": "An ISCSI_UNIQUE_CONNECTION_ID-type structure that, on output, receives an opaque value that uniquely identifies the connection that was added to the session."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddIscsiSendTargetPortal function adds a static target portal to the list of target portals to which the iSCSI initiator service transmits SendTargets requests.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "AddIscsiSendTargetPortal",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorName",
        "description": "The initiator that the iSCSI initiator service utilizes to transmit SendTargets requests to the specified target portal. If null, the iSCSI initiator service will use any initiator that can reach the target portal."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The port number to use for the SendTargets request. This port number corresponds to the source IP address on the Host-Bus Adapter (HBA).  A value of ISCSI_ALL_INITIATOR_PORTS indicates that the initiator must select the appropriate port based upon current routing information."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCI_LOGIN_OPTIONS",
        "name": "LoginOptions",
        "description": "A pointer to a structure of type ISCSI_LOGIN_OPTIONS that contains the login options to use with the target portal."
      },
      {
        "in_out": "_In_opt_",
        "type": "ISCSI_SECURITY_FLAGS",
        "name": "SecurityFlags",
        "description": "A bitmap that specifies the characteristics of the IPsec connection that the initiator adds to the session. If IPsec security policy between the initiator and the target portal is already configured as a result  of the portal group policy or a previous connection to the portal, the existing configuration takes precedence over the configuration specified in SecurityFlags and the security bitmap is ignored.  If the ISCSI_SECURITY_FLAG_VALID flag is set to 0, the iSCSI initiator service uses default values for the security flags that are defined in the registry. Caller can set any of the following flags in the bitmap:  ValueMeaning  ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec tunnel mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec transport mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_PFS_ENABLED   When set to 1, the initiator should make the connection with Perfect Forward Secrecy (PFS) mode enabled; otherwise, the initiator should make the connection with PFS mode disabled.    ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED   When set to 1, the initiator should make the connection with aggressive mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED flag, but not both.    Note  The Microsoft software initiator driver does not support aggressive mode.      ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED   When set to 1, the initiator should make the connection with main mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED flag, but not both.   ISCSI_SECURITY_FLAG_IKE_IPSEC_ENABLED   When set to 1, the initiator should make the connection with the IKE/IPsec protocol enabled; otherwise, the IKE/IPsec protocol is disabled.   ISCSI_SECURITY_FLAG_VALID   When set to 1, the other mask values are valid; otherwise, the iSCSI initiator service will use bitmap values that were previously defined for the target portal, or if none are available, the initiator service uses the default values defined in the registry."
      },
      {
        "in_out": "",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "Portal",
        "description": "A pointer to a structure of type ISCSI_TARGET_PORTAL that indicates the portal to which SendTargets will be sent for target discovery."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AddIscsiStaticTarget function adds a target to the list of static targets available to the iSCSI initiator.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "This routine adds a target to the iSCSI initiator service's list of static targets. If the caller specifies a value of true in Persist, the target is stored in the registry and information about the target persists across restarts of the initiator service and reboots of the operating system. By setting the ISCSI_TARGET_FLAG_HIDE_STATIC_TARGET flag, callers can configure default login information for a target prior to its discovery by an iSCSI initiator, the iSNS service, or a SendTargets request. ",
    "return_type": "",
    "category": "iSCSI Discovery Library API",
    "name": "AddIscsiStaticTarget",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "TargetName",
        "description": "The name of the target to add to the static target list."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "TargetAlias",
        "description": "An alias associated with the TargetName."
      },
      {
        "in_out": "_In_",
        "type": "ISCSI_TARGET_FLAGS",
        "name": "TargetFlags",
        "description": "A bitmap of flags that affect how, and under what circumstances, a target is discovered and enumerated.  The following table lists the flags that can be associated with a target and the meaning of each flag.  ValueMeaning  ISCSI_TARGET_FLAG_HIDE_STATIC_TARGET   The target is added to the list of static targets. However, ReportIscsiTargets does not report the target, unless it was also discovered dynamically by the iSCSI initiator, the Internet Storage Name Service (iSNS), or a SendTargets request.   ISCSI_TARGET_FLAG_MERGE_TARGET_INFORMATION   The iSCSI initiator service merges the information (if any) that it already has for this static target with the information that the caller passes to AddIscsiStaticTarget.  If this flag is not set, the iSCSI initiator service overwrites the stored information with the information that the caller passes in."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "Persist",
        "description": "If true, the target information persists across restarts of the iSCSI initiator service."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_TARGET_MAPPING",
        "name": "Mappings",
        "description": "A pointer to a structure of type ISCSI_TARGET_MAPPING that contains a set of mappings that the initiator uses when assigning values for the bus, target, and LUN numbers to the iSCSI LUNs associated with the target.  If Mappings is null, the initiator will select the bus, target, and LUN numbers."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_LOGIN_OPTIONS",
        "name": "LoginOptions",
        "description": "A pointer to a structure of type ISCSI_LOGIN_OPTIONS that contains the options that specify the default login parameters that an initiator uses to login to a target."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_TARGET_PORTAL_GROUP",
        "name": "PortalGroup",
        "description": "A pointer to a structure of type ISCSI_TARGET_PORTAL_GROUP that indicates the group of portals that an initiator can use login to the target."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AddPersistentIscsiDevice function adds a volume device name, drive letter, or mount point symbolic link to the list of iSCSI persistently bound volumes and devices.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns one of the following:  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "AddPersistentiScsiDevice",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "VolumePath",
        "description": "A drive letter or symbolic link for a mount point of the volume."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AddRadiusServer function adds a new Remote Authentication Dial-In User Service (RADIUS)  server to the list referenced by the iSCSI initiator service during authentication.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. Other possible error values include:  ",
    "remarks": "When the iSCSI initiator service receives a request from the AddRadiusServer user-mode library function to add a RADIUS server, the initiator service saves data associated with the server in non-volatile storage. This allows the iSCSI initiator service to utilize the RADIUS server to authenticate targets or obtain authentication information. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "AddRadiusServer",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWCHAR",
        "name": "Address",
        "description": "A string that represents the IP address or DNS name associated with the RADIUS server."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The ClearPersistentIscsiDevices function removes all volumes and devices from the list of persistently bound iSCSI volumes.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "returns ERROR_SUCCESS if the operation succeeds and the appropriate Win32 or iSCSI error code if the operation fails. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ClearPersistentiScsiDevices",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetDevicesForIscsiSession function retrieves information about the devices associated with the current session.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the caller allocated insufficient buffer space for the array in Devices. Otherwise, GetDevicesForIscsiSession returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetDevicesForIscsiSession",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that contains the session identifier for the session."
      },
      {
        "in_out": "_Inout_",
        "type": "ULONG*",
        "name": "DeviceCount",
        "description": "A pointer to a location that, on input, contains the number of elements of type ISCSI_DEVICE_ON_SESSION that can fit in the buffer that Devices points to. If the operation succeeds, the location receives the number of elements retrieved. If GetDevicesForIscsiSession returns ERROR_INSUFFICIENT_BUFFER, the location still receives the number of elements the buffer is capable of containing."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_DEVICE_ON_SESSION",
        "name": "Devices",
        "description": "An array of ISCSI_DEVICE_ON_SESSION-type structures that, on output, receives information about each device associated with the session."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetIscsiIKEInfo function retrieves the IPsec policy and any established pre-shared key values associated with an initiator Host-Bus Adapter (HBA).",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetIscsiIKEInfo",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorName",
        "description": "A string that represents the name of the initiator HBA for which the IPsec policy is established."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PortNumber",
        "description": "A ULONG value that represents the port on the initiator HBA with which to associate the key. If this parameter specifies a value of ISCSI_ALL_INITIATOR_PORTS, all ports on the initiator are associated with the key."
      },
      {
        "in_out": "_In_",
        "type": "PULONG",
        "name": "Reserved",
        "description": "This value is reserved."
      },
      {
        "in_out": "_In_",
        "type": "PIKE_AUTHENTICATION_INFORMATION*",
        "name": "AuthInfo",
        "description": "A pointer to an IKE_AUTHENTICATION_INFORMATION structure that contains data specifying the authentication method. Currently, only the IKE_AUTHENTICATION_PRESHARED_KEY_METHOD is supported."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetIscsiInitiatorNodeName function retrieves the common initiator node name that is used when establishing sessions from the local machine.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and the appropriate Win32 or iSCSI error code if the operation fails. ",
    "remarks": "All initiator Host Bus Adapters, both software and hardware, use the same node name when establishing sessions. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetIscsiInitiatorNodeName",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PTCHAR",
        "name": "InitiatorNodeName",
        "description": "A caller-allocated buffer that, on output, receives the node name. The buffer must be large enough to hold MAX_ISCSI_NAME_LEN+1 bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetIscsiSessionList function retrieves the list of active iSCSI sessions.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the size of the buffer at SessionInfo was insufficient to hold the output data. Otherwise, GetIscsiSessionList returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetIscsiSessionList",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "ULONG*",
        "name": "BufferSize",
        "description": "A pointer to a location that, on input, contains the size, in bytes, of the caller-allocated buffer that SessionInfo points to. If the operation succeeds, the location receives the size, in bytes, of the session information data that was retrieved.  If the operation fails because the output buffer size was insufficient, the location receives the size, in bytes, of the buffer size required to contain the output data."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "SessionCount",
        "description": "A pointer to a location that, on input, contains the number of ISCSI_SESSION_INFO structures that the buffer that SessionInfo points to can contain. If the operation succeeds, the location receives the number of ISCSI_SESSION_INFO structures that were retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_SESSION_INFO",
        "name": "SessionInfo",
        "description": "A pointer to a buffer that contains a series of contiguous structures of type ISCSI_SESSION_INFO that describe the active login sessions."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetIscsiTargetInformation function retrieves information about the specified target.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if successful and ERROR_INSUFFICIENT_BUFFER if the buffer size at Buffer was insufficient to contain the output data. Otherwise, GetIscsiTargetInformation returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "The iSCSI initiator service can acquire information about a single target through multiple discovery mechanisms and initiators, and the information can be different in each case, so the iSCSI initiator service maintains a list of target instances which are organized according to the discovery method. For instance, if a single target is discovered by multiple initiators, each of which uses a different target portal group to discover the target, the iSCSI initiator will create multiple target instances for the target, each of which refers to a different target portal group. Since the information associated with a target is relative to the way in which it was discovered, the caller must specify the discovery mechanism in the DiscoveryMechanism parameter, using a correctly formatted string identifier for the discovery mechanism. The caller can retrieve a list of valid identifiers for discovery mechanisms by setting the InfoClass parameter to null. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetIscsiTargetInformation",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "TargetName",
        "description": "The name of the target for which information is retrieved."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "DiscoveryMechanism",
        "description": "A text description of the mechanism that was used to discover the target (for example, \"iSNS:\", \"SendTargets:\" or \"HBA:\"). A value of null indicates that no discovery mechanism is specified."
      },
      {
        "in_out": "_In_",
        "type": "TARGET_INFORMATION_CLASS",
        "name": "InfoClass",
        "description": "A value of type TARGET_INFORMATION_CLASS that indicates the type of information to retrieve."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSize",
        "description": "A pointer to a location that, on input, contains the size (in bytes) of the buffer that Buffer points to. If the operation succeeds, the location receives the number of bytes retrieved. If the operation fails, the location receives the size of the buffer required to contain the output data."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "Buffer",
        "description": "The buffer that contains the output data. The output data consists in null-terminated strings, with a double null termination after the last string."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetIscsiVersionInformation function retrieves information about the initiator version.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "GetIscsiVersionInformation",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PISCSI_VERSION_INFO",
        "name": "VersionInfo",
        "description": "Pointer to an ISCSI_VERSION_INFO structure that contains  initiator version information."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 13,
    "description": "The LoginIscsiTarget function establishes a full featured login session with the indicated target.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "The LoginIscsiTarget function either establishes a single login session with a target, or creates a persistent login to a target. If LoginIscsiTarget creates a persistent login, the specified initiator should log in to the target each time the initiator is started, typically at system boot. Callers to LoginIscsiTarget can request the creation of a persistent login by setting the IsPersistent parameter to true. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "LoginIscsiTarget",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "TargetName",
        "description": "The name of the target with which to establish a login session. The target must already exist in the list of discovered targets for the iSCSI initiator service."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "IsInformationalSession",
        "description": "If true, the LoginIscsiTarget function establishes a login session, but the operation does not report the LUNs on the target to the \"Plug and Play\" Manager. If the login succeeds, management applications will be able to query the target for information with the SendScsiReportLuns and SendScsiReadCapacity functions, but the storage stack will not enumerate the target or load a driver for it.  If IsInformationalSession is false, LoginIscsiTarget reports the LUNs associated with the target to the \"Plug and Play\" Manager, and the system loads drivers for the LUNs."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorName",
        "description": "The name of the initiator that logs in to the target. If InitiatorName is null, the iSCSI initiator service selects an initiator."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The port number of the Host Bus Adapter (HBA) that initiates the login session. If this parameter is ISCSI_ANY_INITIATOR_PORT, the caller did not specify a port for the initiator HBA to use when logging in to the target.  If InitiatorName is null, InitiatorPortNumber must be ISCSI_ANY_INITIATOR_PORT."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "TargetPortal",
        "description": "Pointer to a structure of type ISCSI_TARGET_PORTAL that indicates the portal that the initiator uses to open the session. The specified portal must belong to a portal group that is associated with the TargetName. If TargetPortal is null, the iSCSI initiator service instructs the initiator to use any portal through which the target is accessible to the initiator. If the caller specifies the value for TargetPortal, the iSCSI initiator service will not verify that the TargetPortal is accessible to the initiator HBA."
      },
      {
        "in_out": "_In_opt_",
        "type": "ISCSI_SECURITY_FLAGS",
        "name": "SecurityFlags",
        "description": "A bitmap that specifies the characteristics of the IPsec connection that the initiator adds to the session. If an IPsec security policy between the initiator and the target portal is already configured as a result of the current portal group policy or a previous connection to the target, the existing configuration takes precedence over the configuration specified in SecurityFlags.  If the ISCSI_SECURITY_FLAG_VALID flag is set to 0, the iSCSI initiator service uses default values for the security flags that are defined in the registry.  Caller can set any of the following flags in the bitmap:     ValueMeaning  ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec tunnel mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_TRANSPORT_MODE_PREFERRED   When set to 1, the initiator should make the connection in IPsec transport mode. Caller should set this flag or the ISCSI_SECURITY_FLAG_TUNNEL_MODE_PREFERRED flag, but not both.   ISCSI_SECURITY_FLAG_PFS_ENABLED   When set to 1, the initiator should make the connection with Perfect Forward Secrecy (PFS) mode enabled; otherwise, the initiator should make the connection with PFS mode disabled.    ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED   When set to 1, the initiator should make the connection with aggressive mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED flag, but not both.    Note  The Microsoft software initiator driver does not support aggressive mode.      ISCSI_SECURITY_FLAG_MAIN_MODE_ENABLED   When set to 1, the initiator should make the connection with main mode enabled. Caller should set this flag or the ISCSI_SECURITY_FLAG_AGGRESSIVE_MODE_ENABLED flag, but not both.   ISCSI_SECURITY_FLAG_IKE_IPSEC_ENABLED   When set to 1, the initiator should make the connection with the IKE/IPsec protocol enabled; otherwise, the IKE/IPsec protocol is disabled.   ISCSI_SECURITY_FLAG_VALID   When set to 1, the other mask values are valid; otherwise, the iSCSI initiator service will use bitmap values that were previously defined for the target portal, or if none are available, the initiator service uses the default values defined in the registry."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_TARGET_MAPPING",
        "name": "Mappings",
        "description": "An array of structures of type ISCSI_TARGET_MAPPING, each of which holds information that the initiator uses to assign bus, target and LUN numbers to the devices that are associated with the target. If Mappings is null, the initiator will select the bus, target and LUN numbers."
      },
      {
        "in_out": "_In_opt_",
        "type": "PISCSI_LOGIN_OPTIONS",
        "name": "LoginOptions",
        "description": "A pointer to a structure of type ISCSI_LOGIN_OPTIONS that contains the options that specify the characteristics of the login session."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "KeySize",
        "description": "The size, in bytes, of the target's preshared key specified by the Key parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCHAR",
        "name": "Key",
        "description": "A preshared key to use when logging in to the target portal that exposes this target.  Note  If an IPsec policy is already associated with the target portal, the IPsec settings in this call are ignored."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "IsPersistent",
        "description": "If true, the initiator should save the characteristics of the login session in non-volatile storage, so that the information persists across restarts of the initiator device and reboots of the operating system. The initiator should not establish the login session until after saving the persistent data.  Whenever the initiator device restarts, it should automatically attempt to re-establish the login session with the same characteristics. If false, the initiator device simply logs in to the target without saving the characteristics of the login session."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that, on return, contains a unique session identifier for the login session."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_UNIQUE_CONNECTION_ID",
        "name": "UniqueConnectionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_CONNECTION_ID that, on return, contains a unique connection identifier for the login session."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The LogoutIscsiTarget routine closes the specified login session.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "If the login session is not for informational purposes, the iSCSI initiator service ensures that all devices associated with the session can be safely removed from the device stack before allowing the initiator to close the session. If the session is an informational session, the iSCSI initiator service closes the session immediately. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "LogoutIscsiTarget",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that contains a unique session identifier for the login session end."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The RefreshIsnsServer function instructs the iSCSI initiator service to query the indicated Internet Storage Name Service (iSNS) server to refresh the list of discovered targets for the iSCSI initiator service.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "If the refresh succeeds, the iSCSI initiator service replaces the previous list of targets discovered by the indicated iSNS server with the updated list. If the iSNS server supports State Change Notifications (SCN), the iSCSI initiator can keep the iSNS target list up to date, without requiring calls of the RefreshIsnsServer function. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RefreshIsnsServer",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "Address",
        "description": "The DNS or IP Address of the iSNS server."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The RefreshIscsiSendTargetPortal function instructs the iSCSI initiator service to establish a discovery session with the indicated target portal and transmit a SendTargets request to refresh the list of discovered targets for the iSCSI initiator service.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RefreshIscsiSendTargetPortal",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorInstance",
        "description": "The name of the Host Bus Adapter (HBA) to use for the SendTargets request. If null, the iSCSI initiator service uses any HBA that can reach the indicated target portal is chosen."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The port number on the HBA to use for the SendTargets request. If the value is ISCSI_ALL_INITIATOR_PORTS, the initiator HBA will choose the appropriate port based upon current routing information."
      },
      {
        "in_out": "_In_",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "Portal",
        "description": "A pointer to a structure of type ISCSI_TARGET_PORTAL  indicating the portal to which the iSCSI initiator service sends the SendTargets request to refresh the list of targets."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The RemoveIsnsServer function removes a server from the list of Internet Storage Name Service (iSNS) servers that the iSCSI initiator service uses to discover targets.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "The RemoveIsnsServer function does not affect the list of discovered targets for the iSCSI initiator service. Targets previously discovered by the iSNS server that is being removed remain on the list of discovered targets. However, the iSNS server is also removed from the persistent list of iSNS servers. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveIsnsServer",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "Address",
        "description": "The DNS or IP Address of the server to remove."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The RemoveIscsiConnection function removes a connection from an active session.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "The RemoveIscsiConnection function will not remove the last connection of a session or the leading connection of a session. The caller must close the session by calling LogoutIscsiTarget to remove the last connection. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveIscsiConnection",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_SESSION_ID that specifies the unique session identifier of the session that the connection belongs to."
      },
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_CONNECTION_ID",
        "name": "UniqueConnectionId",
        "description": "A pointer to a structure of type ISCSI_UNIQUE_CONNECTION_ID that specifies the connection to remove."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The RemoveIscsiPersistentTarget function removes a persistent login for the specified hardware initiator Host Bus Adapter (HBA), initiator port, and target portal.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveIscsiPersistentTarget",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "InitiatorInstance",
        "description": "The name of the initiator that maintains the persistent login to remove."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The port number on which the initiator connects to TargetName. If InitiatorPortNumber is ISCSI_ALL_INITIATOR_PORTS the miniport driver for the initiator HBA removes the TargetName from the persistent login lists for all initiator ports."
      },
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "TargetName",
        "description": "The name of the target."
      },
      {
        "in_out": "_In_",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "Portal",
        "description": "The portal through which the initiator connects to the target. If Portal is null or contains no information, the miniport driver for the initiator HBA removes persistent logins for the target on all portals."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The RemoveIscsiSendTargetPortal function removes a portal from the list of portals to which the iSCSI initiator service sends SendTargets requests for target discovery.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveIscsiSendTargetPortal",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorInstance",
        "description": "The name of the Host Bus Adapter (HBA) that the iSCSI initiator service uses to establish a discovery session and perform SendTargets requests. A value of null indicates that the iSCSI initiator service will use any HBA that is capable of accessing the target portal."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "The port number on the HBA that the iSCSI initiator service use to perform SendTargets requests."
      },
      {
        "in_out": "_In_",
        "type": "PISCSI_TARGET_PORTAL",
        "name": "Portal",
        "description": "A pointer to a structure of type ISCSI_TARGET_PORTAL that specifies the target portal that the iSCSI initiator service removes from its list of portals."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The RemoveIscsiStaticTarget function removes a target from the list of static targets made available to the machine.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveIscsiStaticTarget",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "TargetName",
        "description": "The name of the iSCSI target to remove from the static list."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The RemovePersistentIscsiDevice function removes a device or volume from the list of persistently bound iSCSI volumes.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ISDSC_DEVICE_NOT_FOUND if the volume that is specified by VolumePath is not in the list of persistently bound volumes. Otherwise, RemovePersistentIscsiDevice returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemovePersistentIscsiDevice",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "VolumePath",
        "description": "A drive letter, mount point, or device path for the volume or device."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The RemoveRadiusServer function removes a Remote Authentication Dial-In User Service (RADIUS) server entry from the RADIUS server list with which an iSCSI initiator is configured.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "RemoveRadiusServer",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "Address",
        "description": "A string that represents the IP address or RADIUS server name."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "ReportActiveIscsiTargetMappings function retrieves the target mappings that are currently active for all initiators on the computer.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer is not large enough. Otherwise, ReportActiveIscsiTargetMappings returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "Target mappings associate bus, target and LUN numbers with the LUNs on a target device. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportActiveIscsiTargetMappings",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSize",
        "description": "A pointer to a location that, on input, contains the size, in bytes, of the buffer that Mappings points to. If the operation succeeds, the location receives the size, in bytes, of the mapping data that was retrieved. If the buffer  that Mappings points to is not sufficient to contain the output data, the location receives the buffer size, in bytes, that is required."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "MappingCount",
        "description": "If the operation succeeds, the location pointed to by MappingCount receives the number of mappings that were retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_TARGET_MAPPING",
        "name": "Mappings",
        "description": "A pointer to an array of type ISCSI_TARGET_MAPPING that, on output, is filled with the active target mappings for all initiators."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ReportIsnsServerList function retrieves the list of Internet Storage Name Service (iSNS) servers that the iSCSI initiator service queries for discovered targets.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer is too small to hold the output data. Otherwise, ReportIsnsServerList returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIsnsServerList",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSizeInChar",
        "description": "A ULONG value that specifies the number of list elements contained by the Buffer parameter.  If the operation succeeds, this location receives the size, represented by a number of  elements, that corresponds to the number of retrieved iSNS servrs."
      },
      {
        "in_out": "_Out_",
        "type": "PTCHAR",
        "name": "Buffer",
        "description": "The buffer that holds the list of iSNS servers on output. Each server name is null terminated, except for the last server name, which is double null terminated."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ReportIscsiInitiatorList function retrieves the list of initiator Host Bus Adapters that are running on the machine.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer size of Buffer is insufficient to contain the output data. Otherwise, ReportIscsiInitiatorList returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiInitiatorList",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "ULONG*",
        "name": "BufferSize",
        "description": "A ULONG value that specifies the number of list elements contained by the Buffer parameter.  If the operation succeeds, this location receives the size, represented by a number of elements, that corresponds to the retreived data."
      },
      {
        "in_out": "_Out_",
        "type": "PTCHAR",
        "name": "Buffer",
        "description": "A buffer that, on output, is filled with the list of initiator names. Each initiator name is a null-terminated string, except for the last initiator name, which is double-null terminated."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ReportIscsiPersistentLogins function retrieves the list of persistent login targets.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer specified by PersistentLoginInfo is insufficient to contain the output data. Otherwise, ReportIscsiPersistentLogins returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "The PERSISTENT_ISCSI_LOGIN_INFO structure provides an initiator with the information required to log in to a target each time the initiator device is started. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiPersistentLogins",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "Count",
        "description": "A pointer to the location that receives a count of the elements specified by  PersistentLoginInfo."
      },
      {
        "in_out": "_Inout_",
        "type": "PPERSISTENT_ISCSI_LOGIN_INFO",
        "name": "PersistentLoginInfo",
        "description": "An array of PERSISTENT_ISCSI_LOGIN_INFO structures that, on output, describe the persistent login targets."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSizeInBytes",
        "description": "A pointer to a location that, on input, contains the byte-size of the buffer space that PersistentLoginInfo  specifies. If the buffer size is insufficient, this parameter specifies what is  required to contain the output data."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ReportIscsiSendTargetPortals function retrieves a list of target portals that the iSCSI initiator service uses to perform automatic discovery with SendTarget requests.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer size of Buffer is insufficient to contain the output data. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiSendTargetPortals",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "PortalCount",
        "description": "A pointer to a location that, on input, contains the number of entries in the PortalInfo array. On output, this parameter specifies the number of elements that contain return data."
      },
      {
        "in_out": "_Inout_",
        "type": "PISCSI_TARGET_PORTAL_INFO",
        "name": "PortalInfo",
        "description": "Pointer to an array of elements contained in ISCSI_TARGET_PORTAL_INFO structures that describe the portals that the iSCSI initiator service utilizes to perform discovery with SendTargets requests."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ReportIscsiSendTargetPortalsEx function  retrieves a list of static target portals that the iSCSI initiator service uses to perform automatic discovery with SendTarget requests.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the size of the buffer at PortalInfo is insufficient to contain the output data. Otherwise, ReportIscsiSendTargetPortalsEx returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiSendTargetPortalsEx",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "PortalCount",
        "description": "A pointer to a location that, on input, contains the number of entries in the PortalInfo array. On output, this parameter specifies the number of elements that contain return data."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "PortalInfoSize",
        "description": "A pointer to a location that, on input, contains the byte-size of the buffer specified by PortalInfo. On output, this parameter specifies the number of bytes retrieved."
      },
      {
        "in_out": "_Inout_",
        "type": "PISCSI_TARGET_PORTAL_INFO_EX",
        "name": "PortalInfo",
        "description": "Pointer to an array of elements contained in a ISCSI_TARGET_PORTAL_INFO_EX structure that describe the portals that the iSCSI initiator service utilizes to perform discovery with SendTargets requests."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ReportIscsiTargets function retrieves the list of targets that the iSCSI initiator service has discovered, and can also instruct the iSCSI initiator service to refresh the list.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer size is insufficient to contain  the output data. Otherwise, ReportIscsiTargets returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiTargets",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "ForceUpdate",
        "description": "If true, the iSCSI initiator service updates the list of discovered targets before returning the target list data to the caller."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSize",
        "description": "A ULONG value that specifies the number of list elements contained by the Buffer parameter."
      },
      {
        "in_out": "_Out_",
        "type": "PTCHAR",
        "name": "Buffer",
        "description": "Pointer to a buffer that receives and contains the list of targets. The list consists of null-terminated strings. The last string, however, is double null-terminated."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The ReportIscsiTargetPortals function retrieves target portal information discovered by the iSCSI initiator service.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportIscsiTargetPortals",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PWCHAR",
        "name": "InitiatorName",
        "description": "A string that represents the name of the initiator node."
      },
      {
        "in_out": "_In_",
        "type": "PWCHAR",
        "name": "TargetName",
        "description": "A string that represents the name of the target for which the portal information is retrieved."
      },
      {
        "in_out": "_In_opt_",
        "type": "PUSHORT",
        "name": "TargetPortalTag",
        "description": "A USHORT value that represents a tag associated with the portal."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "ElementCount",
        "description": "A ULONG value that specifies the number of portals currently reported for the specified target."
      },
      {
        "in_out": "_Out_",
        "type": "PISCSI_TARGET_PORTALW",
        "name": "Portals",
        "description": "A variable-length array of an ISCSI_TARGET_PORTALW structure. The number of elements contained in this array is specified by the value of ElementCount."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ReportPersistentIscsiDevices function retrieves the list of persistently bound volumes and devices.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds or ERROR_INSUFFICIENT_BUFFER if the buffer was insufficient to receive the output data. Otherwise, ReportPersistentiScsiDevices returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "",
    "category": "iSCSI Discovery Library API",
    "name": "ReportPersistentIscsiDevices",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSizeInChar",
        "description": "A ULONG value that specifies the number of list elements contained by the Buffer parameter."
      },
      {
        "in_out": "_Out_",
        "type": "PTCHAR",
        "name": "Buffer",
        "description": "Pointer to a buffer that receives the list of volumes and devices that are persistently bound. The list consists of null-terminated strings. The last string, however, is double null-terminated."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ReportRadiusServerList function  retrieves the list of Remote Authentication Dail-In Service (RADIUS) servers the iSCSI initiator service uses during authentication.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "ReportRadiusServerList",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PULONG",
        "name": "BufferSizeInChar",
        "description": "A ULONG value that specifies the number of list elements contained by the Buffer parameter."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTCHAR",
        "name": "Buffer",
        "description": "Pointer to a buffer that receives the list of Remote Authentication Dail-In Service (RADIUS) servers on output. Each server name is null terminated, except for the last server name, which is double null-terminated."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The SendScsiInquiry function sends a SCSI INQUIRY command to the specified target.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer specified by ResponseBuffer is insufficient to contain the sense data. If the device returns a SCSI error while processing the REPORT LUNS request, SendScsiReportLuns returns an error code of ISDSC_SCSI_REQUEST_FAILED, and the locations pointed to by ScsiStatus and SenseBuffer contain information detailing the SCSI error. Otherwise, SendScsiInquiry returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SendScsiInquiry",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID*",
        "name": "UniqueSessionId",
        "description": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure containing the session identifier for the login session specific to the target to which the READ CAPACITY command is sent."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "Lun",
        "description": "The logical unit to query for SCSI inquiry data."
      },
      {
        "in_out": "_In_",
        "type": "UCHAR",
        "name": "EvpdCmddt",
        "description": "The values to assign to the EVP (enable the vital product data) and CmdDt (command support data) bits in the INQUIRY command. Bits 0 (EVP) and 1 (CmdDt) of the EvpdCmddt parameter  are inserted into bits 0 and 1, respectively, of the second byte of the Command Descriptor Block (CDB) of the INQUIRY command."
      },
      {
        "in_out": "_In_",
        "type": "UCHAR",
        "name": "PageCode",
        "description": "The page code. This code is inserted into the third byte of the CDB of the INQUIRY command."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR*",
        "name": "ScsiStatus",
        "description": "A pointer to a location that reports the execution status of the CDB."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "ReponseSize",
        "description": "A pointer to the location that, on input, specifies the byte-size of  ResponseBuffer. On output, this location specifies the number of bytes required to contain the response data for the READ CAPACITY command in the ResponseBuffer."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "ReponseBuffer",
        "description": "The buffer that holds the inquiry data."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "SenseSize",
        "description": "A pointer to a location that, on input, contains the byte-size of SenseBuffer. On output, the location pointed to receives the byte-size required for  SenseBuffer  to contain the sense data. This value will always be greater than or equal to 18 bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "SenseBuffer",
        "description": "The buffer that holds the sense data."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SendScsiReadCapacity function sends a SCSI READ CAPACITY command to the indicated target.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer specified by ResponseBuffer is insufficient to contain the sense data. If the device returns a SCSI error while processing the REPORT LUNS request, SendScsiReportLuns returns an error code of ISDSC_SCSI_REQUEST_FAILED, and the locations pointed to by ScsiStatus and SenseBuffer contain information detailing the SCSI error. Otherwise, this function returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SendScsiReadCapacity",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure containing the session identifier for the login session specific to the target to which the READ CAPACITY command is sent."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "Lun",
        "description": "The logical unit on the target to query with the READ CAPACITY command."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR*",
        "name": "ScsiStatus",
        "description": "A pointer to a location that contains the execution status of the CDB."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "ResponseSize",
        "description": "A pointer to the location that, on input, specifies the byte-size of  ResponseBuffer. On output, this location specifies the number of bytes required to contain the response data for the READ CAPACITY command in the ResponseBuffer."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "ResponseBuffer",
        "description": "The buffer that receives the response data from the READ CAPACITY command."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "SenseSize",
        "description": "A pointer to a location that, on input, contains the byte-size of SenseBuffer. On output, the location pointed to receives the byte-size required for  SenseBuffer  to contain the sense data. This value will always be greater than or equal to 18 bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "SenseBuffer",
        "description": "The buffer that receives the sense data."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "SendScsiReportLuns function sends a SCSI REPORT LUNS command to a specified target.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds and ERROR_INSUFFICIENT_BUFFER if the buffer specified by ResponseBuffer is insufficient to hold the sense data. If the device returns a SCSI error while processing the REPORT LUNS request, SendScsiReportLuns returns an error code of ISDSC_SCSI_REQUEST_FAILED, and the locations pointed to by ScsiStatus and SenseBuffer contain information detailing the SCSI error. Otherwise, this function returns the appropriate Win32 or iSCSI error code on failure. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SendScsiReportLuns",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PISCSI_UNIQUE_SESSION_ID",
        "name": "UniqueSessionId",
        "description": "A pointer to a ISCSI_UNIQUE_SESSION_ID structure that contains the session identifier for the login session of the target to query with the SCSI REPORT LUNS command."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR*",
        "name": "ScsiStatus",
        "description": "A pointer to the location that receives the execution status of the CDB."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "ResponseSize",
        "description": "A pointer to the location that, on input, specifies the byte-size of  ResponseBuffer. On output, this location specifies the number of bytes required to contain the response data for the READ CAPACITY command in the ResponseBuffer."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "ResponseBuffer",
        "description": "The buffer that receives  response data for the READ CAPACITY command."
      },
      {
        "in_out": "_Inout_",
        "type": "PULONG*",
        "name": "SenseSize",
        "description": "A pointer to a location that, on input, contains the byte-size of SenseBuffer. On output, the location pointed to receives the byte-size required for  SenseBuffer  to contain the sense data. This value will always be greater than or equal to 18 bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "SenseBuffer",
        "description": "The buffer that receives the sense data."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetIscsiGroupPresharedKey function establishes the default group preshared key for all initiators on the computer.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiGroupPresharedKey",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "KeyLength",
        "description": "The size, in bytes, of the preshared key."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "Key",
        "description": "The buffer that contains the preshared key."
      },
      {
        "in_out": "",
        "type": "BOOLEAN",
        "name": "Persist",
        "description": "If true, this parameter indicates that the preshared key information will be stored in non-volatile memory and will persist across restarts of the computer or the iSCSI initiator service."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetIscsiIKEInfo function establishes the IPsec policy and preshared key for the indicated initiator to use when performing iSCSI connections.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiIKEInfo",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "InitiatorName",
        "description": "The name of the initiator HBA for which the IPsec policy is established."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PortNumber",
        "description": "The port on the initiator HBA with which to associate the key. If this parameter contains a value of ISCSI_ALL_INITIATOR_PORTS, all ports on the initiator are associated with the key."
      },
      {
        "in_out": "_In_",
        "type": "PIKE_AUTHENTICATION_INFORMATION",
        "name": "AuthInfo",
        "description": "A pointer to a IKE_AUTHENTICATION_INFORMATION structure that contains the authentication method. Currently, only the IKE_AUTHENTICATION_PRESHARED_KEY_METHOD is supported."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "Persist",
        "description": "If true, this parameter indicates that the preshared key information will be stored in non-volatile memory and will persist across restarts of the computer or the iSCSI initiator service."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SetIscsiInitiatorCHAPSharedSecret function establishes the default Challenge Handshake Authentication Protocol (CHAP) shared secret for all initiators on the computer.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "When an initiator attempts to log in to a target, the initiator can issue a challenge if mutual CHAP is used. The target must respond to the challenge with the initiator CHAP shared secret. The SetIscsiInitiatorCHAPSharedSecret function specifies the default CHAP secret that all initiators on the computer use to authenticate a target when performing mutual CHAP. Management software can specify the CHAP secret for the initiator to provide when challenged by the target when the initiator calls the LoginIscsiTarget or AddIscsiStaticTarget function. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiInitiatorCHAPSharedSecret",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "SharedSecretLength",
        "description": "The size, in bytes, of the shared secret contained by the buffer specified by SharedSecret. The shared secret must be at least 96 bits (12 bytes) for non-IPsec connections, at least 8 bits (1 byte) for IPsec connections, and less than 128 bits (16 bytes) for all connection types."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "SharedSecret",
        "description": "The buffer that contains the shared secret."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SetIscsiInitiatorRADIUSSharedSecret function establishes the Remote Authentication Dial-In User Service (RADIUS) shared secret.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation is successful. If the operation fails due to a socket connection error, this function will return a Winsock error code. ",
    "remarks": "When an initiator attempts to log in to a target, the initiator can use the RADIUS server for authentication, or to authenticate a target. During this process the initiator uses the SharedSecret to communicate with the RADIUS server. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiInitiatorRADIUSSharedSecret",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "SharedSecretLength",
        "description": "A ULONG value that represents the size, in bytes, of the shared secret contained by the buffer specified by SharedSecret. The shared secret must be at least 22 bytes, and less than, or equal to, 26 bytes in size."
      },
      {
        "in_out": "_In_",
        "type": "PUCHAR",
        "name": "SharedSecret",
        "description": "A string that specifies the buffer containing the shared secret."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SetIscsiInitiatorNodeName function establishes an initiator node name for the computer. This name is utilized by  any initiator nodes on the computer that are communicating with other nodes.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "The SetIscsiInitiatorNodeName routine does not verify that the format of the name in InitiatorNodeName is correct. Some hardware initiator drivers can respond immediately to a change of the node name, while others must be restarted to finalize the change to the node name. ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiInitiatorNodeName",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "PTCHAR",
        "name": "InitiatorNodeName",
        "description": "The initiator node name. If this parameter is null, initiators use a default initiator node name based upon the computer name."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "SetIscsiTunnelModeOuterAddress function establishes the tunnel-mode outer address that the indicated initiator Host Bus Adapter (HBA) uses when communicating in IPsec tunnel mode through the specified port.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds.Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetIscsiTunnelModeOuterAddress",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTCHAR",
        "name": "InitiatorName",
        "description": "The name of the initiator with which the tunnel-mode outer address will be associated. If this parameter is null, all HBA initiators are configured to use the indicated tunnel-mode outer address."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "InitiatorPortNumber",
        "description": "Indicates the number of the port with which the tunnel-mode outer address is associated. If this parameter contains ISCSI_ALL_PORTS, all ports on the indicated initiator are associated with the tunnel-mode outer address."
      },
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "DestinationAddress",
        "description": "The destination address to associate with the tunnel-mode outer address indicated by OuterModeAddress."
      },
      {
        "in_out": "_In_",
        "type": "PTCHAR",
        "name": "OuterModeAddress",
        "description": "The tunnel-mode outer address to associate with indicated initiators and ports."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "Persist",
        "description": "When true, this parameter indicates that the iSCSI initiator service stores the tunnel-mode outer address in non-volatile memory and that the address will persist across restarts of the initiator and the iSCSI initiator service."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The SetupPersistentIscsiDevices function builds the list of devices and volumes assigned to iSCSI targets that are connected to the computer, and saves this list in non-volatile cache of the iSCSI initiator service.",
    "library": "Iscsidsc.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Iscsidsc.h",
    "return_value": "Returns ERROR_SUCCESS if the operation succeeds. Otherwise, it returns the appropriate Win32 or iSCSI error code. ",
    "remarks": "When the iSCSI Initiator service starts, it does not complete initialization until the storage stack can access and enumerate all persistent iSCSI volumes and devices. If there is a service that is dependent on data stored on a persistent volume or device, it should be configured to have a dependency on the iSCSI service (MSiSCSI). The correct procedure for a system administrator to configure a computer to use external persistent volumes is as follows: ",
    "return_type": "HRESULT",
    "category": "iSCSI Discovery Library API",
    "name": "SetupPersistentIscsiDevices",
    "is_callback": 0,
    "dll": "Iscsidsc.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  }
]