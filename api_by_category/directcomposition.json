[
  {
    "n_arguments": 3,
    "description": "Creates an Interaction/InputSink to route mouse button down and any       subsequent move and up events to the given HWND. There is no move       thresholding; when enabled, all events including and following the down       are unconditionally redirected to the specified window. After calling this       API, the device owning the visual must be committed.",
    "library": "Dcomp.lib",
    "min_server": "",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDAPI",
    "category": "DirectComposition",
    "name": "DCompositionAttachMouseDragToHwnd",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDCompositionVisual*",
        "name": "visual",
        "description": "Type: IDCompositionVisual* The visual to route messages from."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The HWND to route messages to."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "enable",
        "description": "Type: BOOL Boolean value indicating whether to enable or disable routing."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates an Interaction/InputSink to route mouse wheel messages to the         given HWND.  This will fail if there is already an interaction attached         to this visual. After calling this API, the device that owns the visual must         be committed.",
    "library": "Dcomp.lib",
    "min_server": "",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDAPI",
    "category": "DirectComposition",
    "name": "DCompositionAttachMouseWheelToHwnd",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDCompositionVisual*",
        "name": "visual",
        "description": "Type: IDCompositionVisual* The visual to route messages from."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND The HWND to route messages to."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "enable",
        "description": "Type: BOOL Boolean value indicating whether to enable or disable routing."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a new device object that can be used to create other Microsoft DirectComposition objects.",
    "library": "Dcomp.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. See DirectComposition Error Codes  for a list of error codes. ",
    "remarks": "A  device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the IDCompositionDevice::Commit method. The DXGI device specified by dxgiDevice is used to create all DirectComposition surface objects. In particular, the IDCompositionSurface::BeginDraw method returns an interface pointer to a DXGI surface that belongs to the device specified by the dxgiDevice parameter. When creating the DXGI device, developers must specify the D3D11_CREATE_DEVICE BGRA_SUPPORT or D3D10_CREATE_DEVICE_BGRA_SUPPORT flag for Direct2D interoperability with Microsoft Direct3D resources. The iid parameter must be __uuidof(IDCompositionDevice), and the dcompositionDevice parameter receives a pointer to an IDCompositionDevice interface. The following example shows how to create a device object as part of initialing DirectComposition objects. ",
    "return_type": "HRESULT",
    "category": "DirectComposition",
    "name": "DCompositionCreateDevice",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDXGIDevice*",
        "name": "dxgiDevice",
        "description": "Type: IDXGIDevice* The DXGI device to use to create DirectComposition surface objects."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "iid",
        "description": "Type: REFIID The identifier of the interface to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "dcompositionDevice",
        "description": "Type: void** Receives an interface pointer to the newly created device object. The pointer is of the type specified by the iid parameter. This parameter must not be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a new device object that can be used to create other Microsoft DirectComposition objects.",
    "library": "Dcomp.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "Dcomp.h",
    "return_value": "If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. See DirectComposition Error Codes  for a list of error codes. ",
    "remarks": "A device object serves as the factory for all other DirectComposition objects. It also controls transactional composition through the IDCompositionDevice2::Commit method. The renderingDevice parameter may point to a DXGI, Direct3D, Direct2D device object, or it may be NULL. This parameter affects the behavior of the IDCompositionDevice2::CreateSurface, IDCompositionDevice2::CreateVirtualSurface and IDCompositionSurface::BeginDraw methods. If the renderingDevice parameter is NULL then the returned DirectComposition device cannot directly create DirectComposition surface objects. In particular, IDCompositionDevice2::CreateSurface and IDCompositionDevice2::CreateVirtualSurface methods return E_INVALIDARG, regardless of the supplied parameters. However, such a DirectComposition device object can still be used to indirectly create surfaces if the application creates a surface factory object via the IDCompositionDevice2::CreateSurfaceFactory method. If the renderingDevice parameter points to a DXGI device, that device is used to allocate all video memory needed by the IDCompositionDevice2::CreateSurface and IDCompositionDevice2::CreateVirtualSurface methods. Moreover, the IDCompositionSurface::BeginDraw method returns an interface pointer to a DXGI surface that belongs to that same DXGI device. If the renderingDevice parameter points to a Direct2D device object, DirectComposition extracts from it the underlying DXGI device object and uses it as if that DXGI device object had been passed in as the renderingDevice parameter. However, passing in a Direct2D object further causes IDCompositionSurface::BeginDraw to accept __uuidof(ID2D1DeviceContext) for its iid parameter for any objects created with the IDCompositionDevice2::CreateSurface or IDCompositionDevice2::CreateVirtualSurface methods. In that case, the Direct2D device context object returned by IDCompositionSurface::BeginDraw will belong to the same Direct2D device passed as the renderingDevice parameter. If the iid parameter is __uuidof(IDCompositionDevice), then the dcompositionDevice parameter receives a pointer to a Version 1 IDCompositionDevice interface, but the underlying object is a Version 2 desktop device object. The application can later obtain a pointer to either the IDCompositionDevice2 or IDCompositionDesktopDevice interfaces by calling the QueryInterface method on that device. Similarly, all DirectComposition objects created from such a device are Version 2 objects under the covers. For example, the IDCompositionDevice::CreateVisual method will return an IDCompositionVisual interface to the created visual, but the application can obtain a pointer to the IDCompositionVisual2 interface via the QueryInterface method. This behavior allows an application written to the DirectComposition V1 API to incrementally adopt DirectComposition V2 features by changing the device creation method from DCompositionCreateDevice to DCompositionCreateDevice2, while still requesting the IDCompositionDevice2 interface. This allows the rest of the code to remain unchanged, while allowing the application to use QueryInterface in just the places where new functionality is needed. ",
    "return_type": "",
    "category": "DirectComposition",
    "name": "DCompositionCreateDevice2",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "renderingDevice",
        "description": "An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the IDXGIDevice or ID2D1Device interfaces."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "iid",
        "description": "The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice)."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "dcompositionDevice",
        "description": "Receives an interface pointer to the newly created device object. The pointer is of the type specified by the iid parameter. This parameter must not be NULL."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a new DirectComposition device object, which can be used to create other DirectComposition objects.",
    "library": "Dcomp.lib",
    "min_server": "",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDAPI",
    "category": "DirectComposition",
    "name": "DCompositionCreateDevice3",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "IUnknown*",
        "name": "renderingDevice",
        "description": "Type: IUnknown* An optional pointer to a DirectX device to be used to create DirectComposition surface objects. Must be a pointer to an object implementing the IDXGIDevice or ID2D1Device interfaces."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "iid",
        "description": "Type: REFIID The identifier of the interface to retrieve. This must be one of __uuidof(IDCompositionDevice) or __uuidof(IDCompositionDesktopDevice)."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "dcompositionDevice",
        "description": "Type: void** Receives an interface pointer to the newly created device object. The pointer is of the type specified by the iid parameter. This parameter must not be NULL."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a new composition surface object that can be bound to a Microsoft DirectX swap chain or swap buffer and associated with a visual.",
    "library": "Dcomp.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. See DirectComposition Error Codes  for a list of error codes. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "DirectComposition",
    "name": "DCompositionCreateSurfaceHandle",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "desiredAccess",
        "description": "Type: DWORD The requested access to the composition surface object. It can be one of the following values:  ValueMeaning   0x0000L   No access.   COMPOSITIONSURFACE_READ 0x0001L   Read access. For internal use only.   COMPOSITIONSURFACE_WRITE 0x0002L   Write access. For internal use only.   COMPOSITIONSURFACE_ALL_ACCESS 0x0003L   Read/write access. Always specify this flag except when duplicating a surface in another process, in which case set desiredAccess to 0."
      },
      {
        "in_out": "_In_opt_",
        "type": "SECURITY_ATTRIBUTES*",
        "name": "securityAttributes",
        "description": "Type: SECURITY_ATTRIBUTES* Contains the security descriptor for the composition surface object, and specifies whether the handle of the composition surface object is inheritable when a child process is created. If this parameter is NULL, the composition surface object is created with default security attributes  that grant read and write access to the current process,  but do not enable child processes to  inherit the handle."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "surfaceHandle",
        "description": "Type: HANDLE* The handle of the new composition surface object. This parameter must not be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves composition statistics information.",
    "library": "Dcomp.lib",
    "min_server": "",
    "header": "Dcomp.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDAPI",
    "category": "DirectComposition",
    "name": "DCompositionGetFrameStatistics",
    "is_callback": 0,
    "dll": "Dcomp.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DCOMPOSITION_FRAME_STATISTICS*",
        "name": "statistics",
        "description": "Type: DCOMPOSITION_FRAME_STATISTICS* On return, contains the collected composition statistics."
      },
      {
        "in_out": "_Out_opt_",
        "type": "D3D_FEATURE_LEVEL*",
        "name": "minSafeFeaturelLevel",
        "description": "Type: D3D_FEATURE_LEVEL* On return, contains the minimum safe feature level."
      },
      {
        "in_out": "_Out_opt_",
        "type": "D3D_FEATURE_LEVEL*",
        "name": "maxHardwareFeaturelLevel",
        "description": "Type: D3D_FEATURE_LEVEL* On return, contains the maximum hardware feature level."
      }
    ],
    "min_client": ""
  }
]