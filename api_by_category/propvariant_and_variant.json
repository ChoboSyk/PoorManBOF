[
  {
    "n_arguments": 2,
    "description": "Frees the memory and references used by an array of PROPVARIANT structures stored in an array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "No return value. ",
    "remarks": "This function releases the memory and references held by each structure in the array before setting the structures to zero. This function performs the same action as FreePropVariantArray, but FreePropVariantArray returns an HRESULT. The following example, to be included as part of a larger program, demonstrates how to use ClearPropVariantArray ",
    "return_type": "VOID",
    "category": "PROPVARIANT and VARIANT",
    "name": "ClearPropVariantArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PROPVARIANT*",
        "name": "rgPropVar",
        "description": "Type: PROPVARIANT* Array of PROPVARIANT structures to free."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cVars",
        "description": "Type: UINT The number of elements in the array specified by rgPropVar."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the memory and references used by an array of VARIANT structures stored in an array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "No return value. ",
    "remarks": "This function releases the memory and references held by each structure in the array before it sets the structures to zero. The following example, to be included as part of a larger program, demonstrates how to use ClearVariantArray ",
    "return_type": "VOID",
    "category": "PROPVARIANT and VARIANT",
    "name": "ClearVariantArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pvars",
        "description": "Type: VARIANT* Array of VARIANT structures to free."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cVars",
        "description": "Type: UINT The number of elements in the array specified by pvars."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the memory and references used by an array of PROPVARIANT structures.",
    "library": "Ole32.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps | Windows Store apps]",
    "header": "Propidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function releases the memory and references held by each structure in the array before setting the structures to zero. This function performs the same action as ClearPropVariantArray, but returns an HRESULT. The following example, to be included as part of a larger program, demonstrates how to use FreePropVariantArray ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "FreePropVariantArray",
    "is_callback": 0,
    "dll": "Ole32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cVariants",
        "description": "Type: ULONG The number of elements in the array specified by rgvars."
      },
      {
        "in_out": "_Inout_",
        "type": "PROPVARIANT*",
        "name": "rgvars",
        "description": "Type: PROPVARIANT* Array of PROPVARIANT structures to free. When this function successfully returns, the PROPVARIANT structures in the array are zeroed and their type is set to VT_EMPTY."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a given PROPVARIANT structure as a VT_BOOL using a specified Boolean value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. Note that the boolVal member specifically initialized by this function is of type VARIANT_BOOL and therefore can have values VARIANT_TRUE or VARIANT_FALSE. When working with this structure member directly, use these constants instead of TRUE or FALSE because VARIANT_TRUE is not equal to TRUE and sizeof(VARIANT_TRUE) is not the same as sizeof(TRUE). The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromBoolean. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromBoolean",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fVal",
        "description": "Type: BOOL Source BOOL value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure from a specified Boolean vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This creates a VT_BOOL | VT_VECTOR propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromBooleanVector ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromBooleanVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const BOOL*",
        "name": "prgf",
        "description": "Type: const BOOL* Pointer to the Boolean vector used to initialize the structure. If this parameter is NULL, the elements pointed to by the cabool.pElems structure member are initialized with VARIANT_FALSE."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of vector elements."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure using the contents of a buffer.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_UI1 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromBuffer. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromBuffer",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pv",
        "description": "Type: const void* Pointer to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The length of the buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a class identifier (CLSID).",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_CLSID propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromCLSID. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromCLSID",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFCLSID",
        "name": "clsid",
        "description": "Type: REFCLSID Reference to the CLSID."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a specified double value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_R8 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromDouble. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromDouble",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblVal",
        "description": "Type: DOUBLE The source double value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a specified vector of double values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_R8 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromDoubleVector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromDoubleVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const DOUBLE*",
        "name": "prgn",
        "description": "Type: const DOUBLE* Pointer to a double vector. If this value is NULL, the elements pointed to by the cadbl.pElems structure member are initialized with 0.0."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of vector elements."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on information stored in a FILETIME structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_FILETIME propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromFileTime. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromFileTime",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const FILETIME*",
        "name": "pftIn",
        "description": "Type: const FILETIME* Pointer to the date and time as a FILETIME structure."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure from a specified vector of FILETIME values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_FILETIME propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromFileTimeVector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromFileTimeVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const FILETIME*",
        "name": "prgft",
        "description": "Type: const FILETIME* Pointer to the date and time as a FILETIME vector. If this value is NULL, the elements pointed to by the cafiletime.pElems structure member is initialized with (FILETIME)0."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of vector elements."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a GUID. The structure is initialized as VT_VECTOR | VT_UI1.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_UI1 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromGUIDAsBuffer. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromGUIDAsBuffer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guid",
        "description": "Type: REFGUID Reference to the source GUID."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a GUID. The structure is initialized as VT_LPWSTR.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_LPWSTR PROPVARIANT, which formats the GUID in a form similar to {c200e360-38c5-11ce-ae62-08002b2b79ef}. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromGUIDAsString. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromGUIDAsString",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guid",
        "description": "Type: REFGUID Reference to the source GUID."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a 16-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a VT_I2 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt16. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt16",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "nVal",
        "description": "Type: SHORT The source SHORT value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a specified vector of 16-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_I2 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt16Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt16Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SHORT*",
        "name": "prgn",
        "description": "Type: const SHORT* Pointer to a source vector of SHORT values. If this parameter is NULL, the vector is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the vector."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a 32-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_I4 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt32. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt32",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lVal",
        "description": "Type: LONG The source LONG value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a vector of 32-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_I4 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt32Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt32Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const LONG*",
        "name": "prgn",
        "description": "Type: const LONG* Pointer to a source vector of LONG values. If this parameter is NULL, the vector is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of vector elements."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a specified Int64 value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_I8 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt64. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONGLONG",
        "name": "llVal",
        "description": "Type: LONGLONG The source LONGLONG value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a vector of Int64 values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_I8 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromInt64Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromInt64Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const LONGLONG*",
        "name": "prgn",
        "description": "Type: const LONGLONG* Pointer to a source vector of LONGLONG values. If this parameter is NULL, the vector is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the vector."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a specified PROPVARIANT vector element.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: Additional types may be supported in the future. This function extracts a single value from the source PROPVARIANT structure and uses that value to initialize the output PROPVARIANT structure. The calling application must use PropVariantClear to free the PROPVARIANT referred to by ppropvar when it is no longer needed. If the source PROPVARIANT is a vector or array, iElem must be less than the number of elements in the vector or array. If the source PROPVARIANT has a single value, iElem must be 0. If the source PROPVARIANT is empty, this function always returns an error code. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following code example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromPropVariantVectorElem in an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromPropVariantVectorElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT The source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The index of the source PROPVARIANT structure element."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a string resource embedded in an executable file.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a VT_LPWSTR propvariant. If the specified resource does not exist, it initializes the PROPVARIANT with an empty string. Resource strings longer than 1024 characters are truncated and null-terminated. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromResource. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromResource",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINSTANCE",
        "name": "hinst",
        "description": "Type: HINSTANCE Handle to an instance of the module whose executable file contains the string resource."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "id",
        "description": "Type: UINT Integer identifier of the string to be loaded."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a specified string.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromString. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromString",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz",
        "description": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure from a specified string. The string is parsed as a semi-colon delimited list (for example: \"A;B;C\").",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_LPWSTR propvariant. It parses the source string as a semicolon list of values. The string \"a; b; c\" creates a vector with three values. Leading and trailing whitespace are removed, and empty values are omitted. If psz is NULL or contains no values, the PROPVARIANT structure is initialized as VT_EMPTY. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromStringAsVector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromStringAsVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz",
        "description": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure from a specified string vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromStringVector. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromStringVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR*",
        "name": "prgsz",
        "description": "Type: PCWSTR* Pointer to a buffer that contains the source string vector."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of vector elements in prgsz."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a string stored in a STRRET structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_LPWSTR propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromStrRet. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromStrRet",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "STRRET*",
        "name": "pstrret",
        "description": "Type: STRRET* Pointer to a STRRET structure that contains the string."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD PIDL of the item whose details are being retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a 16-bit unsigned integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_UI2 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromUInt16. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromUInt16",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiVal",
        "description": "Type: USHORT Source value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a vector of 16-bit unsigned integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_UI2 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromUInt16Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromUInt16Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const USHORT*",
        "name": "prgn",
        "description": "Type: const USHORT* Pointer to a source vector of USHORT values. If this parameter is NULL, the PROPVARIANT is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG Number of elements in the vector pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a PROPVARIANT structure based on a 32-bit unsigned integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_UI4 propvariant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromUInt32. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromUInt32",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulVal",
        "description": "Type: ULONG Source ULONG value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a vector of 32-bit unsigned integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_UI4 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromUInt32Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromUInt32Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const ULONG*",
        "name": "prgn",
        "description": "Type: const ULONG* Pointer to a source vector of ULONG values. If this parameter is NULL, the PROPVARIANT is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG Number of elements in the vector pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a vector of 64-bit unsigned integers.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_VECTOR | VT_UI8 propvariant. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantFromUInt64Vector. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantFromUInt64Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const ULONGLONG*",
        "name": "prgn",
        "description": "Type: const ULONGLONG* Pointer to a source vector of ULONGLONG values. If this parameter is NULL, the PROPVARIANT is initialized with zeros."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG Number of elements in the vector pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a vector element in a PROPVARIANT structure with a value stored in another PROPVARIANT.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is used to convert a PROPVARIANT structure that contains a single value into a vector value. For simple source types, this function initializes the PROPVARIANT as a vector of one element. For a source that contains a string, this function initializes the PROPVARIANT with zero or more substrings taken from the source string, treating semicolons as delimiters. See InitPropVariantFromStringAsVector for more details. The following input types are supported: Additional types may be supported in the future. The following example, to be included as part of a larger program, demonstrates how to use InitPropVariantVectorFromPropVariant. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitPropVariantVectorFromPropVariant",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarSingle",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure that contains a single value."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvarVector",
        "description": "Type: PROPVARIANT* When this function returns, contains the initialized PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a Boolean value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_BOOL variant. Note that the boolVal structure member initialized by this function is of type VARIANT_BOOL and therefore can have values VARIANT_TRUE or VARIANT_FALSE. When you work with this structure member directly, use these constants instead of TRUE or FALSE because VARIANT_TRUE is not equal to TRUE and sizeof(VARIANT_TRUE) is not the same as sizeof(TRUE). This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromBoolean. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromBoolean",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fVal",
        "description": "Type: BOOL Source BOOL value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure from an array of Boolean values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_BOOL variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromBooleanArray. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromBooleanArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const BOOL*",
        "name": "prgf",
        "description": "Type: const BOOL* Pointer to source array of Boolean values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with the contents of a buffer.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_UI1 variant.. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromBuffer. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromBuffer",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const VOID*",
        "name": "pv",
        "description": "Type: const VOID* Pointer to the source buffer."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The length of the buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure based on an instance of an IDispatch object.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_DISPATCH variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromDispatch. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromDispatch",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdisp",
        "description": "Type: IDispatch* Pointer to the source IDispatch."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with a date and time given in the format used by Microsoft MS-DOS. The date and time values are converted to the format used to store date and time in a VARIANT.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_DATE variant. See DosDateTimeToVariantTime for more information about the formats of wDate, wTime, and of the resulting variant date. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromDosDateTime. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromDosDateTime",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wDate",
        "description": "Type: WORD WORD value that represents an MS-DOS date. See DosDateTimeToVariantTime for more information about this format."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wTime",
        "description": "Type: WORD WORD value that represents an MS-DOS time. See DosDateTimeToVariantTime for more information about this format."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a value of type DOUBLE.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_R8 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromDouble. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromDouble",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblVal",
        "description": "Type: DOUBLE Source value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of values of type DOUBLE.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_R8 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromDoubleArray. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromDoubleArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DOUBLE*",
        "name": "prgn",
        "description": "Type: const DOUBLE* Pointer to the source array of DOUBLE values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with the contents of a FILETIME structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_DATE variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromFileTime. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromFileTime",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const FILETIME*",
        "name": "pft",
        "description": "Type: const FILETIME* Pointer to date and time information stored in a FILETIME structure."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of FILETIME structures.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_DATE variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromFileTimeArray. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromFileTimeArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const FILETIME*",
        "name": "prgft",
        "description": "Type: const FILETIME* Pointer to an array of FILETIME structures."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgft."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure based on a GUID. The structure is initialized as VT_ARRAY | VT_UI1.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromGUIDAsBuffer. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromGUIDAsBuffer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guid",
        "description": "Type: REFGUID Reference to the source GUID."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a 16-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_I2 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt16. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt16",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "iVal",
        "description": "Type: SHORT Source SHORT value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of 16-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_I2 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt16Array. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt16Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SHORT*",
        "name": "prgn",
        "description": "Type: const SHORT* Pointer to the source array of SHORT values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a 32-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_I4 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt32. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt32",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lVal",
        "description": "Type: LONG Source LONG value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of 32-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_I4 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt32Array. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt32Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const LONG*",
        "name": "prgn",
        "description": "Type: const LONG* Pointer to the source array of LONG values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a 64-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_I8 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt64. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONGLONG",
        "name": "llVal",
        "description": "Type: LONGLONG Source LONGLONG value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of 64-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_I8 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromInt64Array. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromInt64Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const LONGLONG*",
        "name": "prgn",
        "description": "Type: const LONGLONG* Pointer to the source array of LONGLONG values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn. The number of array elements."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure based on a string resource imbedded in an executable file.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_BSTR variant. If the resource does not exist, this function initializes the VARIANT as VT_EMPTY and returns a failure code. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromResource. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromResource",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINSTANCE",
        "name": "hinst",
        "description": "Type: HINSTANCE Handle to an instance of the module whose executable file contains the string resource."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "id",
        "description": "Type: UINT Integer identifier of the string to be loaded."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with a string.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_BSTR variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromString. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromString",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "psz",
        "description": "Type: PCWSTR Pointer to a buffer that contains the source Unicode string. If this value is NULL, the function initializes the VARIANT with a NULL BSTR."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of strings.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_BSTR variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromStringArray. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromStringArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR*",
        "name": "prgsz",
        "description": "Type: PCWSTR* Pointer to an array of strings."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgsz."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with a string stored in a STRRET structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_BSTR variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromStrRet. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromStrRet",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "STRRET*",
        "name": "pstrret",
        "description": "Type: STRRET* Pointer to a STRRET structure."
      },
      {
        "in_out": "_In_",
        "type": "PCUITEMID_CHILD",
        "name": "pidl",
        "description": "Type: PCUITEMID_CHILD PIDL of the item whose details are being retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with an unsigned 16-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_UI2 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromUInt16. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromUInt16",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiVal",
        "description": "Type: USHORT Source USHORT value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of unsigned 16-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_UI2 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromUInt16Array. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromUInt16Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const USHORT*",
        "name": "prgn",
        "description": "Type: const USHORT* Pointer to the source array of USHORT values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with an unsigned 32-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_UI4 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromUInt32. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromUInt32",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulVal",
        "description": "Type: ULONG Source ULONG value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with an array of unsigned 32-bit integer values.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_ARRAY | VT_UI4 variant. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromUInt32Array. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromUInt32Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const ULONG*",
        "name": "prgn",
        "description": "Type: const ULONG* Pointer to the source array of ULONG values."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElems",
        "description": "Type: ULONG The number of elements in the array pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes a VARIANT structure with an unsigned 64-bit integer value.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Creates a VT_UI8 variant. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromUInt64. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromUInt64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "ullVal",
        "description": "Type: ULONGLONG Source ULONGLONG value."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure with a value stored in another VARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for VARIANT structures of the following types: Additional types may be supported in the future. This function extracts a single value from the source VARIANT structure and uses that value to initialize the output VARIANT structure. The calling application must use VariantClear to free the VARIANT referred to by pvar when it is no longer needed. If the source VARIANT is an array, iElem must be less than the number of elements in the array. If the source VARIANT has a single value, iElem must be 0. If the source VARIANT is empty, this function always returns an error code. You can use VariantGetElementCount to obtain the number of elements in the array or array. The following example, to be included as part of a larger program, demonstrates how to use InitVariantFromVariantArrayElem in an iteration statement to access the values in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "InitVariantFromVariantArrayElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to the source VARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Index of one of the source VARIANT structure elements."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* When this function returns, contains the initialized VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies whether a specified PROPVARIANT structure is a string type.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if propvar is a VT_LPWSTR or VT_BSTR PROPVARIANT; otherwise, FALSE. ",
    "remarks": "If this function returns TRUE, the PROPVARIANT structure referenced in propvar contains a Unicode string. To retrieve it, call PropVariantToStringWithDefault as shown here: PropVariantToStringWithDefault(propvar, NULL); This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsPropVariantString",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies whether a PROPVARIANT structure has a vector type.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if propvar is a VT_ARRAY | VT_VECTOR PROPVARIANT; otherwise, FALSE. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsPropVariantVector",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the PROPVARIANT structure being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies whether a variant is an array.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if variant is an array. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVariantArray",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to the variant being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies whether a variant is a string.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if variant is a string. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVariantString",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to the variant being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a VARTYPE is a float.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if VARTYPE is a float. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVarTypeFloat",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the VARTYPE being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a VARTYPE is an integer.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if VARTYPE is an integer. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVarTypeInteger",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the VARTYPE being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies whether VARTYPE is a number.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if VARTYPE is a number. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVarTypeNumber",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the VARTYPE being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a VARTYPE is a signed integer.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if VARTYPE is a signed integer; otherwise, FALSE. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVarTypeSignedInteger",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the VARTYPE being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns whether a VARTYPE is an unsigned integer.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns TRUE if VARTYPE is an unsigned integer; otherwise, FALSE. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "IsVarTypeUnsignedInteger",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the VARTYPE being queried."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Coerces a value stored as a PROPVARIANT structure to an equivalent value of a different variant type.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or a standard COM error value otherwise. If the requested coercion is not possible, an error is returned. ",
    "remarks": "Note that the source and destination PROPVARIANT structures must be separate structures. You cannot overwrite the source PROPVARIANT data with the new destination data; attempting to do so will result in an error. PropVariantChangeType converts values between the following types as follows. Numbers refer to conditions explained after the tables.      Converting between vectors (VT_VECTOR) and arrays (VT_ARRAY) is supported in some cases. When it is supported, the count of elements must be the same in each. A single-valued vector can be converted to a non-vector value, but a multi-valued vector cannot be converted to a non-vector type. Coercion between types is performed without respect to property-specific information. Property-specific coercions should be performed using PSCoerceToCanonicalValue. Additionally, if the string form of a value is needed for UI purposes, PSFormatForDisplay should be used to format the value according to locale- and property-specific information rather than using PropVariantChangeType to coerce the value to a string. The following code example, to be included as part of a larger program, demonstrates how to use PropVariantChangeType to initialize a VT_FILETIME value from a string. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantChangeType",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvarDest",
        "description": "Type: PROPVARIANT* A pointer to a PROPVARIANT structure that, when this function returns successfully, receives the coerced value and its new type."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarSrc",
        "description": "Type: REFPROPVARIANT A reference to the source PROPVARIANT structure that contains the value expressed as its original type."
      },
      {
        "in_out": "_In_",
        "type": "PROPVAR_CHANGE_FLAGS",
        "name": "flags",
        "description": "Type: PROPVAR_CHANGE_FLAGS Reserved, must be 0."
      },
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "Type: VARTYPE Specifies the new type for the value. See the tables below for recognized type names."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Clears a PROPVARIANT structure.",
    "library": "Ole32.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps | Windows Store apps]",
    "header": "Propidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantClear",
    "is_callback": 0,
    "dll": "Ole32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PROPVARIANT*",
        "name": "pvar",
        "description": "Type: PROPVARIANT* Pointer to the PROPVARIANT structure to clear. When this function successfully returns, the PROPVARIANT is zeroed and the type is set to VT_EMPTY."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two PROPVARIANT structures, based on default comparison units and settings.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps | Windows Store apps]",
    "header": "Propvarutil.h",
    "return_value": "Type: INT ",
    "remarks": "Calling PropVariantCompare is equivalent to calling PropVariantCompareEx with the PVCHF_DEFAULT flag. This function compares only selected types, not all types. By default, VT_NULL / VT_EMPTY / 0-element vectors are considered to be less than any other vartype. If the vartypes are different, this function attempts to convert propvar2 to the vartype of propvar1 before comparing them. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "INT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantCompare",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar1",
        "description": "Type: REFPROPVARIANT Reference to the first PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar2",
        "description": "Type: REFPROPVARIANT Reference to the second PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Extends PropVariantCompare by allowing the caller to compare two PROPVARIANT structures based on specified comparison units and flags.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps | Windows Store apps]",
    "header": "Propvarutil.h",
    "return_value": "Type: INT ",
    "remarks": "This function does not compare all types; only selected types are currently comparable. By default, VT_NULL / VT_EMPTY / 0-element vectors are considered to be less than any other vartype. If the vartypes are different, this function attempts to convert propvar2 to the vartype of propvar1 before comparing them. ",
    "return_type": "INT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantCompareEx",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar1",
        "description": "Type: REFPROPVARIANT Reference to the first PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar2",
        "description": "Type: REFPROPVARIANT Reference to the second PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "PROPVAR_COMPARE_UNIT",
        "name": "unit",
        "description": "Type: PROPVAR_COMPARE_UNIT Specifies, where appropriate, one of the comparison units defined in PROPVAR_COMPARE_UNIT."
      },
      {
        "in_out": "_In_",
        "type": "PROPVAR_COMPARE_FLAGS",
        "name": "flags",
        "description": "Type: PROPVAR_COMPARE_FLAGS Specifies one of the following:  PVCF_DEFAULT (0x00000000)   When comparing strings, use StrCmpLogical.  PVCF_TREATEMPTYASGREATERTHAN (0x00000001)   Regard empty or null values as greater than non-empty values. This value can be OR-ed with any other value.  PVCF_USESTRCMP (0x00000002)   When comparing strings, use StrCmp.  PVCF_USESTRCMPC (0x00000004)   When comparing strings, use StrCmpC.  PVCF_USESTRCMPI (0x00000008)   When comparing strings, use StrCmpI.  PVCF_USESTRCMPIC (0x00000010)   When comparing strings, use StrCmpIC."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a copy of a PROPVARIANT structure.",
    "library": "Ole32.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps | Windows Store apps]",
    "header": "Propidl.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantCopy",
    "is_callback": 0,
    "dll": "Ole32.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "pvarDest",
        "description": "Type: PROPVARIANT* Pointer to the destination PROPVARIANT structure that receives the copy."
      },
      {
        "in_out": "_In_",
        "type": "const PROPVARIANT*",
        "name": "pvarSrc",
        "description": "Type: const PROPVARIANT* Pointer to the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Boolean element from a PROPVARIANT structure of type VT_BOOL, VT_VECTOR | VT_BOOL, or VT_ARRAY | VT_BOOL.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the source PROPVARIANT structure has type VT_BOOL, iElem must be 0. Otherwise iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example uses this function to loop through the values in a PROPVARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetBooleanElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT A reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies the vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfVal",
        "description": "Type: BOOL* When this function returns, contains the extracted Boolean value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single double element from a PROPVARIANT structure of type VT_R8, VT_VECTOR | VT_R8, or VT_ARRAY | VT_R8.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the source PROPVARIANT has type VT_R8, iElem must be 0. Otherwise iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example uses this function to loop through the values in a PROPVARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetDoubleElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pnVal",
        "description": "Type: DOUBLE* When this function returns, contains the extracted double value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a PROPVARIANT structure based on a specified element in another PROPVARIANT structure.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: Additional types may be supported in the future. This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. This function extracts a single value from the source PROPVARIANT structure and uses that value to initialize the output PROPVARIANT structure. The calling application must use PropVariantClear to free the PROPVARIANT referred to by ppropvar when it is no longer needed. If the source PROPVARIANT is a vector or array, iElem must be less than the number of elements in the vector or array. If the source PROPVARIANT has only a single value, iElem must be 0. If the source PROPVARIANT is empty, this function always returns an error code. The following code example, to be included as part of a larger program, demonstrates how to use PropVariantGetElem in an iteration statement to access the values in PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetElem",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Index of a PROPVARIANT structure element in propvarIn."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* When this function returns, contains a PROPVARIANT with the value specified from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the element count of a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONG Returns the element count of a VT_VECTOR or VT_ARRAY value: for single values, returns 1; for empty structures, returns 0. ",
    "remarks": "This function works for all valid PROPVARIANT types. See PROPVARIANT for the valid type combinations. This function is useful to get the count of elements to iterate through using a looping statement, especially for iterations that call functions such as PropVariantGetUInt32Elem or PropVariantGetElem. ",
    "return_type": "ULONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetElementCount",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single FILETIME element from a PROPVARIANT structure of type VT_FILETIME, VT_VECTOR | VT_FILETIME, or VT_ARRAY | VT_FILETIME.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the source PROPVARIANT has type VT_FILETIME, iElem must be 0; otherwise, iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following code example, to be included as part of a larger program, demonstrates how to use PropVariantGetFileTimeElem in an iteration statement to access the values in PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetFileTimeElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT The source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, this value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "FILETIME*",
        "name": "pftVal",
        "description": "Type: FILETIME* When this function returns, contains the extracted filetime value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int16 element from a PROPVARIANT structure of type VT_I2, VT_VECTOR | VT_I2, or  VT_ARRAY | VT_I2.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types. If the source PROPVARIANT has type VT_I2, iElem must be 0. Otherwise, iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example, to be included as part of a larger program, demonstrates how to use PropVariantGetInt16Elem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetInt16Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, this value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "pnVal",
        "description": "Type: SHORT* When this function returns, contains the extracted Int32 element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int32 element from a PROPVARIANT of type VT_I4, VT_VECTOR | VT_I4, or VT_ARRAY | VT_I4.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: If the source PROPVARIANT has type VT_I4, iElem must be 0. Otherwise, iElem  must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount  to obtain the number of elements in the vector or array. The following example uses this PropVariantGetInt32Elem with an interation statement to access the values in a PROPVARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetInt32Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "pnVal",
        "description": "Type: LONG* When this function, contains the extracted Int32 value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int64 element from a PROPVARIANT structure of type VT_I8, VT_VECTOR | VT_I8, or VT_ARRAY | VT_I8.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works forPROPVARIANTstructures of the following types: If the source PROPVARIANT has type VT_I8, iElem must be 0. Otherwise, iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example, to be included as part of a larger program, demonstrates how to use PropVariantGetInt64Elem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetInt64Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pnVal",
        "description": "Type: LONGLONG* When this function returns, contains the extracted Int64 value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Unicode string element from a PROPVARIANT structure of type VT_LPWSTR, VT_BSTR, VT_VECTOR | VT_LPWSTR, VT_VECTOR | VT_BSTR, or VT_ARRAY | VT_BSTR.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: If the source PROPVARIANT has type VT_LPWSTR or VT_BSTR, iElem must be 0. Otherwise iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. If a BSTR element has a NULL pointer, this function allocates an empty string. The following code example, to be included as part of a larger program, demonstrates how to use PropVariantGetStringElem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetStringElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszVal",
        "description": "Type: PWSTR* When this function returns, contains the extracted string value. The calling application is responsible for freeing this string by calling CoTaskMemFree when it is no longer needed."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int16 element from a PROPVARIANT structure of type VT_U12, VT_VECTOR | VT_U12, or VT_ARRAY | VT_U12.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: If the source PROPVARIANT has type VT_UI2, iElem must be 0. Otherwise iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example, to be included as part of a larger program, demonstrates how to use PropVariantGetUInt16Elem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetUInt16Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "pnVal",
        "description": "Type: USHORT* When this function returns, contains the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int32 element from a PROPVARIANT structure of type VT_UI4, VT_VECTOR | VT_UI4, or VT_ARRAY | VT_UI4.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: If the source PROPVARIANT has type VT_UI4, iElem must be 0. Otherwise, iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example, to be included as part of a larger program, demonstrates how to use PropVariantGetUInt32Elem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetUInt32Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT The source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG A vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pnVal",
        "description": "Type: ULONG* When this function returns, contains the extracted unsigned Int32 value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int64 element from a PROPVARIANT structure of type VT_UI8, VT_VECTOR | VT_UI8, or VT_ARRAY | VT_UI8.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works for PROPVARIANT structures of the following types: If the source PROPVARIANT has type VT_UI8, iElem must be 0. Otherwise iElem must be less than the number of elements in the vector or array. You can use PropVariantGetElementCount to obtain the number of elements in the vector or array. The following example, to be included as part of a larger program, demonstrates how to use PropVariantGetUInt64Elem with an iteration statement to access the values in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantGetUInt64Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT The source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG The vector or array index; otherwise, iElem must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "pnVal",
        "description": "Type: ULONGLONG* When this function returns, contains the extracted Int64 value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a Boolean property value of a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a Boolean value. For instance, an application obtaining values from a property store can use this to safely extract the Boolean value for Boolean properties. If the source PROPVARIANT has type VT_BOOL, this helper function extracts the Boolean value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a Boolean. If a conversion is not possible, PropVariantToBoolean will return a failure code and set pfRet to FALSE. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to FALSE. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBoolean access a Boolean value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBoolean",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfRet",
        "description": "Type: BOOL* When this function returns, contains the extracted property value if one exists; otherwise, contains FALSE."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts a Boolean vector from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used when the calling application expects a PROPVARIANT to hold a Boolean vector value with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_BOOL or VT_ARRAY | VT_BOOL, this helper function extracts up to crgf Boolean values an places them into the buffer pointed to by prgf. If the PROPVARIANT contains more elements than will fit into the prgf buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBooleanVector to access a Boolean vector stored in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBooleanVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "prgf",
        "description": "Type: BOOL* Points to a buffer that contains crgf BOOL values. When this function returns, the buffer has been initialized with pcElem Boolean elements extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgf",
        "description": "Type: ULONG Number of elements in the buffer pointed to by prgf."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of Boolean elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly allocated Boolean vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a Boolean vector value. If the source PROPVARIANT has type VT_VECTOR | VT_BOOL or VT_ARRAY | VT_BOOL, this function extracts a vector of Boolean values into a newly allocated vector of BOOL values. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgf when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBooleanVectorAlloc to access a Boolean vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBooleanVectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL**",
        "name": "pprgf",
        "description": "Type: BOOL** When this function returns, contains a pointer to a vector of Boolean values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of Boolean elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the Boolean property value of a PROPVARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL The extracted Boolean value or the default value. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a Boolean value and would like to use a default value if it does not. For instance, an application that obtains values from a property store can use this to safely extract the Boolean value for Boolean properties. If the source PROPVARIANT has type VT_BOOL, this helper function extracts the Boolean value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a Boolean. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToBooleanWithDefault returns the default provided by fDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBooleanWithDefault to access a Boolean value in a PROPVARIANT. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBooleanWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDefault",
        "description": "Type: BOOL Specifies the default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the BSTR property value of a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a string value. If the source PROPVARIANT has type VT_BSTR or VT_LPWSTR, this function extracts the string as a BSTR value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a string. If a conversion is not possible, PropVariantToBSTR returns a failure code and sets pbstrOut to NULL. See PropVariantChangeType for a list of possible conversions. VT_EMPTY is successfully converted to an allocated BSTR containing \"\". The calling application is responsible for using SysFreeString to release the BSTR pointed to by pbstrOut when it is no longer needed. In addition to the conversions provided by PropVariantChangeType, the following special cases apply to PropVariantToBSTR. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBSTR to access a string value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBSTR",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "Type: BSTR* Pointer to the extracted property value if one exists; otherwise, contains an empty string."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts the buffer value from a PROPVARIANT structure of type VT_VECTOR | VT_UI1 or VT_ARRRAY | VT_UI1.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This function is used in places where the calling application expects aPROPVARIANTto hold a buffer value. The calling application should check that the value has the expected length before calling this function. If the source PROPVARIANT has type VT_VECTOR | VT_UI1 or VT_ARRAY | VT_UI1, this function extracts the first cb bytes from the value and places them in the buffer pointed to by pv. If the value has fewer than cb bytes, then PropVariantToBuffer fails and the buffer is not modified. If the value has more than cb bytes, then PropVariantToBuffer succeeds and truncates the value. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToBuffer to access a structure that has been stored in a PROPVARIANT\". ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToBuffer",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT The source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "VOID*",
        "name": "pv",
        "description": "Type: VOID* Pointer to a buffer of length cb bytes. When this function returns, contains the first cb bytes of the extracted buffer value."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The buffer length, in bytes."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts class identifier (CLSID) property value of a PROPVARIANT structure.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works forPROPVARIANTstructures of the following types: This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. PropVariantToCLSID is used in places where the calling application expects a PROPVARIANT to hold a single CLSID or GUID value. For instance, an application obtaining values from a property store can use this to safely extract the CLSID value for GUID properties. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToCLSID to access a CLSID value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToCLSID",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "CLSID*",
        "name": "pclsid",
        "description": "Type: CLSID* When this function returns, contains the extracted property value if one exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts double value from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a single double floating point value. For instance, an application obtaining values from a property store can use this to safely extract a double value for double properties. If the source PROPVARIANT has type VT_R8, this helper function extracts the double value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a double. If a conversion is not possible, PropVariantToDouble will return a failure code and set pdblRet to 0.0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0.0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToDouble to access a double value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToDouble",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblRet",
        "description": "Type: DOUBLE* When this function returns, contains the extracted property value if one exists; otherwise, contains 0.0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts a vector of doubles from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a double vector value with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_R8 or VT_ARRAY | VT_R8, this helper function extracts up to crgn double values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToDoubleVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "prgn",
        "description": "Type: DOUBLE* Points to a buffer containing crgn DOUBLE values. When this function returns, the buffer has been initialized with pcElem double elements extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size in elements of the buffer pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of double elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated double vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a double vector value. If the source PROPVARIANT has type VT_VECTOR | VT_R8 or VT_ARRAY | VT_R8, this function extracts a vector of double values into a newly allocated vector of DOUBLE values. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToDoubleVector to access a double vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToDoubleVectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE**",
        "name": "pprgn",
        "description": "Type: DOUBLE** When this function returns, contains a pointer to a vector of double values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of double elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a double property value of a PROPVARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: DOUBLE Returns extracted double value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a double value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the double value for double properties. If the source PROPVARIANT has type VT_R8, this helper function extracts the double value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a double. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToDoubleWithDefault will return the default provided by dblDefault. See PropVariantChangeType for a list of possible conversions. ",
    "return_type": "DOUBLE",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToDoubleWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblDefault",
        "description": "Type: DOUBLE Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts the FILETIME structure from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a single filetime value. For instance, an application obtaining values from a property store can use this to safely extract a filetime value for filetime properties. If the source PROPVARIANT has type VT_FILETIME or VT_DATE, this helper function extracts the value as a FILETIME using the timezone specified by pstfOut. If the source PROPVARIANT is VT_EMPTY or any other type, this function returns a failure result. The source PROPVARIANT must be in Coordinated Universal Time (UTC). The PSTF_UTC and PSTF_LOCAL flags allow the calling application to specify what time zone the output should be converted to. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToFileTime to access a FILETIME value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToFileTime",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "PSTIME_FLAGS",
        "name": "pstfOut",
        "description": "Type: PSTIME_FLAGS Specifies one of the following time flags.  PSTF_UTC (0)   Indicates the output will use coordinated universal time.  PSTF_LOCAL (1)   Indicates the output will use local time."
      },
      {
        "in_out": "_Out_",
        "type": "FILETIME*",
        "name": "pftOut",
        "description": "Type: FILETIME*           When this function returns, contains the extracted FILETIME structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a PROPVARIANT structure into a FILETIME vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns one of the following values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a filetime vector value with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_FILETIME, this helper function extracts up to crgft FILETIME values and places them into the buffer pointed to by prgft. If the PROPVARIANT contains more elements than will fit into the prgft buffer, this function returns an error and sets pcElem to 0. The output FILETIMEs will use the same time zone as the source FILETIMEs. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToFileTimeVector to access a FILETIME vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToFileTimeVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "FILETIME*",
        "name": "prgft",
        "description": "Type: FILETIME*  Points to a buffer containing crgft FILETIME values. When this function returns, the buffer has been initialized with pcElem FILETIME elements extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgft",
        "description": "Type: ULONG  Size in elements of the buffer pointed to by prgft."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of FILETIME elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated FILETIME vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns one of the following values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a FILETIME vector value. If the source PROPVARIANT has type VT_VECTOR | VT_FILETIME, this function extracts a vector of FILETIMEs values into a newly allocated vector of FILETIME values. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgft when it is no longer needed. The output FILETIMEs will use the same time zone as the source FILETIMEs. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToFileTimeVectorAlloc to access a FILETIME vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToFileTimeVectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "FILETIME**",
        "name": "pprgft",
        "description": "Type: FILETIME**  When this function returns, contains a pointer to a vector of FILETIME values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of FILETIME elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a GUID value from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function works forPROPVARIANTstructures of the following types: PropVariantToGUID is used in places where the calling application expects a PROPVARIANT to hold a single GUID or GUID value. For instance, an application obtaining values from a property store can use this to safely extract the GUID value for GUID properties. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToGUID",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pguid",
        "description": "Type: GUID* When this function returns, contains the extracted property value if one exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int16 property value of a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int16 value. For instance, an application obtaining values from a property store can use this to safely extract the Int16 value for Int16 properties. If the source PROPVARIANT has type VT_I2, this helper function extracts the Int16 value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into an Int16. If a conversion is not possible, PropVariantToInt16 will return a failure code and set piRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt16 to access an Int16 value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt16",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "piRet",
        "description": "Type: SHORT* When this function returns, contains the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts a vector of Int16 values from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int16 vector value with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_I2 or VT_ARRAY | VT_I2, this helper function extracts up to crgn Int16 values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt16Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "prgn",
        "description": "Type: SHORT*  Points to a buffer containing crgn SHORT values. When this function returns, the buffer has been initialized with pcElem SHORT elements extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of Int16 elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly allocated Int16 vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int16 vector value. If the source PROPVARIANT has type VT_VECTOR | VT_I2 or VT_ARRAY | VT_I2, this function extracts a vector of Int16 values into a newly allocated vector of SHORT values. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int16 vector value. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt16VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT**",
        "name": "pprgn",
        "description": "Type: SHORT** When this function returns, contains a pointer to a vector of Int16 values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG*  When this function returns, contains the count of Int16 elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the Int16 property value of a PROPVARIANT structure. If no value currently exists, then specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: SHORT Returns the extracted short value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int16 value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the SHORT value for Int16 properties. If the source PROPVARIANT has type VT_I2, this helper function extracts the Int16 value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a SHORT. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToInt16WithDefault will return the default provided by iDefault. See PropVariantChangeType for a list of possible conversions. ",
    "return_type": "SHORT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt16WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "iDefault",
        "description": "Type: SHORT Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the Int32 property value of a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int32 value. For instance, an application obtaining values from a property store can use this to safely extract the Int32 value for Int32 properties. If the source PROPVARIANT has type VT_I4, this helper function extracts the long value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a long. If a conversion is not possible, PropVariantToInt32 will return a failure code and set plRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt32",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plRet",
        "description": "Type: LONG* When this function returns, contains the extracted value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts a vector of long values from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of LONG values with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_I4 or VT_ARRAY | VT_I4, this helper function extracts up to crgn   LONG values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt32Vector to access an Int32 vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt32Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "prgn",
        "description": "Type: LONG* Points to a buffer containing crgn   LONG values. When this function returns, the buffer has been initialized with pcElem   LONG elements extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of LONG elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated Int32 vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an Int32 vector value. If the source PROPVARIANT has type VT_VECTOR | VT_I4 or VT_ARRAY | VT_I4, this function extracts a vector of LONG values into a newly allocated vector. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt32VectorAlloc to access an LONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt32VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG**",
        "name": "pprgn",
        "description": "Type: LONG** When this function returns, contains a pointer to a vector of LONG values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of LONG elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int32 value from a PROPVARIANT structure. If no value currently exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: LONG Returns extracted LONG value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a LONG value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the LONG value for Int32 properties. If the source PROPVARIANT has type VT_I4, this helper function extracts the LONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a LONG. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToInt32WithDefault will return the default provided by lDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt32WithDefault to access a LONG value in a PROPVARIANT. ",
    "return_type": "LONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt32WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lDefault",
        "description": "Type: LONG Specifies a default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a LONGLONG value from a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an LONGLONG value. For instance, an application obtaining values from a property store can use this to safely extract the LONGLONG value for Int64 properties. If the source PROPVARIANT has type VT_I8, this helper function extracts the LONGLONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a LONGLONG. If a conversion is not possible, PropVariantToInt64 will return a failure code and set pllRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt64",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pllRet",
        "description": "Type: LONGLONG* When this function returns, contains the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a PROPVARIANT structure into an Int64 vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of LONGLONG values with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_I8 or VT_ARRAY | VT_I8, this helper function extracts up to crgn   LONGLONG values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt64Vector to access an Int64 vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt64Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "prgn",
        "description": "Type: LONGLONG* Points to a buffer containing crgn   LONGLONG values. When this function returns, the buffer has been initialized with pcElem  LONGLONG elements extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of LONGLONG values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated LONGLONG vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a vector of LONGLONG values. If the source PROPVARIANT has type VT_VECTOR | VT_I8 or VT_ARRAY | VT_I8, this function extracts a vector of LONGLONG values into a newly allocated vector. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt64VectorAlloc to access a LONGLONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt64VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG**",
        "name": "pprgn",
        "description": "Type: LONGLONG** When this function returns, contains a pointer to a vector of LONGLONG values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of LONGLONG values extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the Int64 property value of a PROPVARIANT structure. If no value exists, then specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: LONGLONG Returns the extracted LONGLONG value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a LONGLONG value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the LONGLONG value for Int64 properties. If the source PROPVARIANT has type VT_I8, this helper function extracts the LONGLONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a LONGLONG. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToInt64WithDefault will return the default provided by llDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToInt64WithDefault to access a LONGLONG value in a PROPVARIANT. ",
    "return_type": "LONGLONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToInt64WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "LONGLONG",
        "name": "llDefault",
        "description": "Type: LONGLONG Specifies a default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a string value from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a string value. For instance, an application obtaining values from a property store can use this to safely extract a string value for string properties. If the source PROPVARIANT has type VT_LPWSTR or VT_BSTR, this function extracts the string and places it into the provided buffer. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a string. If a conversion is not possible, PropVariantToString will return a failure code and set psz to '\\0'. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to \"\". In addition to the terminating NULL, at most cch-1 characters are written into the buffer pointed to by psz. If the value in the source PROPVARIANT is longer than will fit into the buffer, a truncated NULL Terminated copy of the string is written to the buffer and this function returns STRSAFE_E_INSUFFICIENT_BUFFER. The resulting string will always be NULL terminated. In addition to the conversions provided by PropVariantChangeType, the following special cases apply to PropVariantToString. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToString to access a string value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToString",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "psz",
        "description": "Type: PWSTR Points to a string buffer. When this function returns, the buffer is initialized with a NULL terminated Unicode string value."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cch",
        "description": "Type: UINT Size of the buffer pointed to by psz, in characters."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a string property value from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a string value. If the source PROPVARIANT has type VT_LPWSTR or VT_BSTR, this function extracts the string into a newly allocated buffer. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a string. If a conversion is not possible, PropVariantToStringAlloc will return a failure code and set ppszOut to NULL. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to an allocated buffer containing \"\". The calling application is responsible for using CoTaskMemFree to release the string pointed to by ppszOut when it is no longer needed. In addition to the conversions provided by PropVariantChangeType, the following special cases apply to PropVariantToStringAlloc. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToStringAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszOut",
        "description": "Type: PWSTR* When this function returns, contains a pointer to the extracted property value if one exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts a vector of strings from a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of string values with a fixed number of elements. This function works for the following PROPVARIANT types: If the source PROPVARIANT has a supported type, this helper function extracts up to crgsz string values and places an allocated copy of each into the buffer pointed to by prgsz. If thePROPVARIANTcontains more elements than will fit into the prgsz buffer, this function returns an error and sets pcElem to 0. Since each string in pointed to by the output buffer has been newly allocated, the calling application is responsible for using CoTaskMemFree to free each string in the output buffer when they are no longer needed. If a BSTR in the source PROPVARIANT is NULL, it is converted to a newly allocated string containing \"\" in the output. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToStringVector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "prgsz",
        "description": "Type: PWSTR* Pointer to a vector of string pointers. When this function returns, the buffer has been initialized with pcElem elements pointing to newly allocated strings containing the data extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgsz",
        "description": "Type: ULONG Size of the buffer pointed to by prgsz, in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG*  When this function returns, contains the count of strings extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly allocated strings in a newly allocated vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a vector of string values. This helper function works for the followingPROPVARIANTtypes: If the source PROPVARIANT has a supported type, this function extracts a vector of string values into a newly allocated vector of newly allocated strings. The calling application is responsible for using CoTaskMemFree to release both the strings contained in the output vector, and the output vector itself, when they are no longer needed. If a BSTR in the source PROPVARIANT is NULL, this function will place a newly allocated string containing \"\" into the output vector. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToStringVectorAlloc to access a string vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToStringVectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR**",
        "name": "pprgsz",
        "description": "Type: PWSTR** When this function returns, contains a pointer to a vector of strings extracted from source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, containsthe count of string elements extracted from source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the string property value of a PROPVARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: PCWSTR Returns string value or default, or the default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a string value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the string value for string properties. If the source PROPVARIANT has type VT_LPWSTR or VT_BSTR, this helper function returns a pointer to the value in the source PROPVARIANT. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToStringWithDefault will return the default provided by pszDefault. Note that this function will return pointers to data supplied in the parameters. Thus the application must ensure that the data supplied to the parameters remains valid until the result is no longer in use. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToStringWithDefault to access a string value in a PROPVARIANT. ",
    "return_type": "PCWSTR",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToStringWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszDefault",
        "description": "Type: LPCWSTR Pointer to a default Unicode string value, for use where no value currently exists. May be NULL."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a string from a PROPVARIANT structure and places it into a STRRET structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in applications that wish to convert a string value in a PROPVARIANT structure into a STRRET structure. For instance, an application implementing IShellFolder::GetDisplayNameOf may find this function useful. If the source PROPVARIANT has type VT_LPWSTR or VT_BSTR, this function extracts the string and places it into the STRRET structure. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a string. If a conversion is not possible, PropVariantToString will return a failure code. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to \"\". In addition to the conversions provided by PropVariantChangeType, the following special cases apply to PropVariantToString. If the extraction is successful, the function will initialize uType member of the STRRET structure with STRRET_WSTR and set the pOleStr member of that structure to point to an allocated copy of the string. The calling application is responsible for using CoTaskMemFree or StrRetToStr to free this string when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToString to access a string value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToStrRet",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "STRRET*",
        "name": "pstrret",
        "description": "Type: STRRET* Points to the STRRET structure. When this function returns, the structure has been initialized to contain a copy of the extracted string."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a unsigned short value from a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a unsigned short value. For instance, an application obtaining values from a property store can use this to safely extract the unsigned short value for UInt16 properties. If the source PROPVARIANT has type VT_UI2, this helper function extracts the unsigned short value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a USHORT. If a conversion is not possible, PropVariantToUInt16 will return a failure code and set puiRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt16 to access a unsigned short value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt16",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiRet",
        "description": "Type: USHORT* When this function returns, contains the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a PROPVARIANT structure into an unsigned short vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of unsigned short values with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_UI2 or VT_ARRAY | VT_UI2, this helper function extracts up to crgn   unsigned short values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt16Vector to access an unsigned short vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt16Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "prgn",
        "description": "Type: USHORT* Points to a buffer containing crgn unsigned short values. When this function returns, the buffer has been initialized with pcElem unsigned short elements extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of unsigned short values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated unsigned short vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a vector of unsigned short values. If the source PROPVARIANT has type VT_VECTOR | VT_UI2 or VT_ARRAY | VT_UI2, this function extracts a vector of unsigned short values into a newly allocated vector. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt16VectorAlloc to access a unsigned short vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt16VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT**",
        "name": "pprgn",
        "description": "Type: USHORT** When this function returns, contains a pointer to a vector of unsigned short values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG*  When this function returns, contains the count of unsigned short values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an unsigned short value from a PROPVARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: unsigned short Returns extracted unsigned short value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a  unsigned short   value. For instance, an application obtaining values from a property store can use this to safely extract the  unsigned short  value for UInt16 properties. If the source PROPVARIANT has type VT_UI2, this helper function extracts the unsigned short value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a unsigned short. If a conversion is not possible, PropVariantToUInt16 will return a failure code and set puiRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt16 to access a unsigned short value in a PROPVARIANT. ",
    "return_type": "unsigned short",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt16WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiDefault",
        "description": "Type: USHORT Specifies a default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an ULONG value from a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a ULONG value. For instance, an application obtaining values from a property store can use this to safely extract the ULONG  value for UInt32 properties. If the source PROPVARIANT has type VT_UI4, this helper function extracts the ULONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a ULONG. If a conversion is not possible, PropVariantToUInt32 will return a failure code and set pulRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt32 to access a ULONG value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt32",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT A reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulRet",
        "description": "Type: ULONG* When this function returns, contains the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a PROPVARIANT structure into an ULONG vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of ULONG values with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_UI4 or VT_ARRAY | VT_UI4, this helper function extracts up to crgn   ULONG values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt32Vector to access a ULONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt32Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "prgn",
        "description": "Type: ULONG* Points to a buffer containing crgn   ULONG values. When this function returns, the buffer has been initialized with pcElem   ULONG elements extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn, in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of ULONG values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated ULONG vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a vector of ULONG values. If the source PROPVARIANT has type VT_VECTOR | VT_UI4 or VT_ARRAY | VT_UI4, this function extracts a vector of ULONG values into a newly allocated vector. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt32VectorAlloc to access a ULONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt32VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG**",
        "name": "pprgn",
        "description": "Type: ULONG** When this function returns, contains a pointer to a vector of ULONG values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of ULONG values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a ULONG value from a PROPVARIANT structure. If no value exists, then a specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONG Returns extracted ULONG value, or default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a ULONG value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the ULONG value for UInt32 properties. If the source PROPVARIANT has type VT_UI4, this helper function extracts the ULONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a ULONG. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToUInt32WithDefault will return the default provided by ulDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt32WithDefault to access a ULONG value in a PROPVARIANT. ",
    "return_type": "ULONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt32WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulDefault",
        "description": "Type: ULONG Specifies a default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a UInt64 value from a PROPVARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a ULONGLONG value. For instance, an application obtaining values from a property store can use this to safely extract the ULONGLONG  value for UInt64 properties. If the source PROPVARIANT has type VT_UI8, this helper function extracts the ULONGLONG  value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a ULONGLONG. If a conversion is not possible, PropVariantToUInt64 will return a failure code and set pullRet to 0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt64 to access a ULONGLONG value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt64",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "pullRet",
        "description": "Type: ULONGLONG* When this function returns, contains the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a PROPVARIANT structure into a ULONGLONG vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold an vector of ULONGLONG values with a fixed number of elements. If the source PROPVARIANT has type VT_VECTOR | VT_UI8 or VT_ARRAY | VT_UI8, this helper function extracts up to crgn   ULONGLONG values and places them into the buffer pointed to by prgn. If the PROPVARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt64Vector to access a ULONGLONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt64Vector",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "prgn",
        "description": "Type: ULONGLONG* Points to a buffer containing crgn   ULONGLONG values. When this function returns, the buffer has been initialized with pcElem   ULONGLONG elements extracted from the source PROPVARIANT."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Size of the buffer pointed to by prgn, in elements."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of ULONGLONG values extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a PROPVARIANT structure into a newly-allocated ULONGLONG vector.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT This function can return one of these values.  ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a vector of ULONGLONG values. If the source PROPVARIANT has type VT_VECTOR | VT_UI8 or VT_ARRAY | VT_UI8, this function extracts a vector of ULONGLONG values into a newly allocated vector. The calling application is responsible for using CoTaskMemFree to release the vector pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt64VectorAlloc to access a ULONGLONG vector value in a PROPVARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt64VectorAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvar",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG**",
        "name": "pprgn",
        "description": "Type: ULONGLONG** When this function returns, contains a pointer to a vector of ULONGLONG values extracted from the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of ULONGLONG elements extracted from the source PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts ULONGLONG value from a PROPVARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONGLONG Returns the extracted unsigned LONGLONG value, or a default. ",
    "remarks": "This helper function is used in places where the calling application expects a PROPVARIANT to hold a ULONGLONG value and would like to use a default value if it does not. For instance, an application obtaining values from a property store can use this to safely extract the ULONGLONG value for UInt64 properties. If the source PROPVARIANT has type VT_UI8, this helper function extracts the ULONGLONG value. Otherwise, it attempts to convert the value in the PROPVARIANT structure into a ULONGLONG. If the source PROPVARIANT has type VT_EMPTY or a conversion is not possible, then PropVariantToUInt64WithDefault will return the default provided by ullDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use PropVariantToUInt64WithDefault to access a ULONGLONG value in a PROPVARIANT. ",
    "return_type": "ULONGLONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToUInt64WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFPROPVARIANT",
        "name": "propvarIn",
        "description": "Type: REFPROPVARIANT Reference to a source PROPVARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "ullDefault",
        "description": "Type: ULONGLONG Specifies a default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts the contents of a PROPVARIANT structure to a VARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Normally, the data stored in the PROPVARIANT is copied to the VARIANT without a datatype change. However, in the following cases, there is no direct VARIANT support for the datatype, and they are converted as shown.   The following types cannot be converted with this function. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "PropVariantToVariant",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PROPVARIANT*",
        "name": "pPropVar",
        "description": "Type: const PROPVARIANT* Pointer to a source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pVar",
        "description": "Type: VARIANT* Pointer to a VARIANT structure. When this function returns, the VARIANT contains the converted information."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Deserializes a specified SERIALIZEDPROPERTYVALUE structure, creating a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "StgDeserializePropVariant",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SERIALIZEDPROPERTYVALUE*",
        "name": "pprop",
        "description": "Type: const SERIALIZEDPROPERTYVALUE* Pointer to a SERIALIZEDPROPERTYVALUE structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbMax",
        "description": "Type: ULONG The size of the SERIALIZEDPROPERTYVALUE structure, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: PROPVARIANT* Pointer to the resulting PROPVARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Serializes a specified PROPVARIANT structure, creating a SERIALIZEDPROPERTYVALUE structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "StgSerializePropVariant",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PROPVARIANT*",
        "name": "ppropvar",
        "description": "Type: const PROPVARIANT* A constant pointer to the source PROPVARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "SERIALIZEDPROPERTYVALUE**",
        "name": "ppProp",
        "description": "Type: SERIALIZEDPROPERTYVALUE** The address of a pointer to the SERIALIZEDPROPERTYVALUE structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcb",
        "description": "Type: ULONG*                   A pointer to the value representing the size of the SERIALIZEDPROPERTYVALUE structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares two variant structures, based on default comparison rules.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: INT ",
    "remarks": "By default, VT_NULL / VT_EMPTY / 0-element vectors are considered to be less than any other vartype. ",
    "return_type": "INT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantCompare",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var1",
        "description": "Type: REFVARIANT Reference to a first variant structure."
      },
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var2",
        "description": "Type: REFVARIANT Reference to a second variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Boolean element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetBooleanElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfVal",
        "description": "Type: BOOL* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts one double element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetDoubleElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pnVal",
        "description": "Type: DOUBLE* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a VARIANT structure from a specified variant element.",
    "library": "",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This is an inline function, with its source code provided in the header. It is not included in any .dll or .lib file. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetElem",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies index of source variant structure element. If source structure is empty, then this parameter is not used."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "Type: VARIANT* Pointer to the values specified from the source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the element count of a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONG Returns the element count for values of type VT_ARRAY; otherwise, returns 1. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetElementCount",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int16 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetInt16Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "pnVal",
        "description": "Type: SHORT* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int32 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetInt32Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "pnVal",
        "description": "Type: LONG* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single Int64 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetInt64Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pnVal",
        "description": "Type: LONGLONG* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single wide string element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetStringElem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies a vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppszVal",
        "description": "Type: PWSTR* The address of a pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int16 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetUInt16Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies a vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "pnVal",
        "description": "Type: USHORT* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int32 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetUInt32Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pnVal",
        "description": "Type: ULONG* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a single unsigned Int64 element from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantGetUInt64Elem",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "iElem",
        "description": "Type: ULONG Specifies vector or array index; otherwise, value must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "pnVal",
        "description": "Type: ULONGLONG* Pointer to the extracted element value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the value of a Boolean property from a VARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold a Boolean value. For instance, an application that obtains values from a Shell folder can use this function to safely extract the value from one of the folder's Boolean properties. If the source VARIANT is of type VT_BOOL, this function extracts the BOOL value. If the source VARIANT is not of type VT_BOOL, this function attempts to convert the value in the VARIANT structure into a BOOL. If a conversion is not possible, VariantToBoolean returns a failure code and sets pfRet to FALSE. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to FALSE. The following example, to be included as part of a larger program, demonstrates how to use VariantToBoolean to access a BOOL value in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToBoolean",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfRet",
        "description": "Type: BOOL* When this function returns, contains the extracted value if one exists; otherwise, FALSE."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts an array of Boolean values from a VARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold an array that consists of a fixed number of Boolean values. If the source VARIANT is of type VT_ARRAY | VT_BOOL, this function extracts up to crgn BOOL values and places them into the buffer pointed to by prgf. If the VARIANT contains more elements than will fit into the prgf buffer, this function returns an error and sets *pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use VariantToBooleanArray to access an array of BOOL values stored in a VARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToBooleanArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "prgf",
        "description": "Type: BOOL* Pointer to a buffer that contains crgn Boolean values. When this function returns, the buffer has been initialized with *pcElem BOOL elements extracted from the source  VARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG The number of elements in the buffer pointed to by prgf."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains a pointer to the count of BOOL elements extracted from the source VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Allocates an array of BOOL values then extracts data from a VARIANT structure into that array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold an array of BOOL values. If the source VARIANT is of type VT_ARRAY | VT_BOOL, this function extracts an array of BOOL values into a newly allocated array. The calling application is responsible for using CoTaskMemFree to release the array pointed to by pprgf when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use VariantToBooleanArrayAlloc to access an array of BOOL values stored in a VARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToBooleanArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL**",
        "name": "pprgf",
        "description": "Type: BOOL** When this function returns, contains a pointer to an array of BOOL values extracted from the source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains a pointer to the count of elements extracted from the source VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a BOOL value from a VARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: BOOL Returns the extracted BOOL value; otherwise, the default value specified in fDefault. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold a BOOL value and wants to use a default value if it does not. If the source VARIANT is of type VT_BOOL, this helper extracts the BOOL value. If the source VARIANT is not of type VT_BOOL, the function attempts to convert the value in the VARIANT into a BOOL. If the source VARIANT is of type VT_EMPTY or a conversion is not possible, then VariantToBooleanWithDefault returns the default value provided by fDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use VariantToBooleanWithDefault to access a BOOL value stored in a VARIANT structure. ",
    "return_type": "BOOL",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToBooleanWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDefault",
        "description": "Type: BOOL The default value for use where no extractable value exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts the contents of a buffer stored in a VARIANT structure of type VT_ARRRAY | VT_UI1.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns one of the following values:  ",
    "remarks": "This function is used when the calling application expects a VARIANT to hold a buffer value. The calling application should check that the value has the expected length before it calls this function. If the source VARIANT has type VT_ARRAY | VT_UI1, this function extracts the first cb bytes from the structure and places them in the buffer pointed to by pv. If the stored value has fewer than cb bytes, then VariantToBuffer fails and the buffer is not modified. If the value has more than cb bytes, then VariantToBuffer succeeds and truncates the value. The following example, to be included as part of a larger program, demonstrates how to use VariantToBuffer to access a structure that has been stored in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToBuffer",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "VOID*",
        "name": "pv",
        "description": "Type: VOID* Pointer to a buffer of length cb bytes. When this function returns, contains the first cb bytes of the extracted buffer value."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cb",
        "description": "Type: UINT The size of the pv buffer, in bytes. The buffer should be the same size as the data to be extracted, or smaller."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a date and time value in Microsoft MS-DOS format from a VARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold a datetime value. If the source VARIANT is of type VT_DATE, this function extracts the datetime value. If the source VARIANT is not of type VT_DATE, the function attempts to convert the value in the VARIANT structure into the right format. If a conversion is not possible, VariantToDosDateTime returns a failure code. See PropVariantChangeType for a list of possible conversions. See DosDateTimeToVariantTime for more information about the formats of pwDate, pwTime, and the source datetime value. The following example, to be included as part of a larger program, demonstrates how to use VariantToDosDateTime to access a datetime value in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToDosDateTime",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "WORD*",
        "name": "pwDate",
        "description": "Type: WORD* When this function returns, contains the extracted WORD that represents a MS-DOS date."
      },
      {
        "in_out": "_Out_",
        "type": "WORD*",
        "name": "pwTime",
        "description": "Type: WORD* When this function returns, contains the extracted contains the extracted WORD that represents a MS-DOS time."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a DOUBLE value from a VARIANT structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold a DOUBLE value. For instance, an application that obtains values from a Shell folder can use this function to safely extract the value from one of the folder's properties whose value is stored as a DOUBLE. If the source VARIANT is of type VT_R8, this function extracts the DOUBLE value. If the source VARIANT is not of type VT_R8, the function attempts to convert the value stored in the VARIANT structure into a DOUBLE. If a conversion is not possible, VariantToDouble returns a failure code and sets pdblRet to 0.0. See PropVariantChangeType for a list of possible conversions. Of note, VT_EMPTY is successfully converted to 0.0. The following example, to be included as part of a larger program, demonstrates how to use VariantToDouble to access a DOUBLE value stored in a VARIANT structure. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToDouble",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblRet",
        "description": "Type: DOUBLE* When this function returns, contains the extracted value if one exists; otherwise, 0.0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts an array of DOUBLE values from a VARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT Returns S_OK if successful, or an error value otherwise, including the following:  ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold an array that consists of a fixed number of DOUBLE values. If the source VARIANT has type VT_ARRAY | VT_DOUBLE, this function extracts up to crgn DOUBLE values and places them into the buffer pointed to by prgn. If the VARIANT contains more elements than will fit into the prgn buffer, this function returns an error and sets *pcElem to 0. The following example, to be included as part of a larger program, demonstrates how to use VariantToDoubleArray to access a DOUBLE array stored in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToDoubleArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "prgn",
        "description": "Type: DOUBLE* Pointer to a buffer that contains crgn DOUBLE values. When this function returns, the buffer has been initialized with *pcElem DOUBLE elements extracted from the source VARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG The number of elements in the buffer pointed to by prgn."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains the count of DOUBLE elements extracted from the source VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Allocates an array of DOUBLE values then extracts data from a VARIANT structure into that array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold an array of DOUBLE values. If the source VARIANT is of type VT_ARRAY | VT_R8, this function extracts an array of DOUBLE values into a newly allocated array. The calling application is responsible for using CoTaskMemFree to release the array pointed to by pprgn when it is no longer needed. The following example, to be included as part of a larger program, demonstrates how to use VariantToDoubleArrayAlloc to access a DOUBLE array value in a VARIANT. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToDoubleArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE**",
        "name": "pprgn",
        "description": "Type: DOUBLE** When this function returns, contains a pointer to an array of DOUBLE values extracted from the source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* When this function returns, contains a pointer to the count of elements extracted from the source VARIANT structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a DOUBLE value from a VARIANT structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: DOUBLE Returns the extracted double value; otherwise, the default value specified in dblDefault. ",
    "remarks": "This helper function is used when the calling application expects a VARIANT to hold a DOUBLE value and wants to use a default value if it does not. If the source VARIANT is of type VT_R8, this helper extracts the DOUBLE value. If the source VARIANT is not of type VT_R8, the function attempts to convert the value in the VARIANT into a DOUBLE. If the source VARIANT is of type VT_EMPTY or a conversion is not possible, then VariantToDoubleWithDefault returns the default value provided by dblDefault. See PropVariantChangeType for a list of possible conversions. The following example, to be included as part of a larger program, demonstrates how to use VariantToDoubleWithDefault to access a DOUBLE value stored in a VARIANT structure. ",
    "return_type": "DOUBLE",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToDoubleWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source VARIANT structure."
      },
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblDefault",
        "description": "Type: DOUBLE The default value for use where no extractable value exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts a FILETIME structure from a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "stfOut flags override any property description flags. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToFileTime",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "PSTIME_FLAGS",
        "name": "stfOut",
        "description": "Type: PSTIME_FLAGS Specifies one of the following time flags:  PSTF_UTC (0)   Indicates coordinated universal time.  PSTF_LOCAL (1)   Indicates local time."
      },
      {
        "in_out": "_Out_",
        "type": "FILETIME*",
        "name": "pftOut",
        "description": "Type: FILETIME* Pointer to the extracted FILETIME structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts a GUID property value of a variant structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToGUID",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pguid",
        "description": "Type: GUID* Pointer to the extracted property value."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the Int16 property value of a variant structure. If no value can be extracted, then a default value is assigned by this function.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt16",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "piRet",
        "description": "Type: SHORT* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an Int16 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt16Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "prgn",
        "description": "Type: SHORT* Pointer to the Int16 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies Int16 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int16 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated Int16 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt16ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT**",
        "name": "pprgn",
        "description": "Type: SHORT** Pointer to the address of the Int16 data extracted from source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int16 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int16 property value of a variant structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: SHORT Returns the extracted Int16 value, or default. ",
    "remarks": "",
    "return_type": "SHORT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt16WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "iDefault",
        "description": "Type: SHORT Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int32 property value of a variant structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt32",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plRet",
        "description": "Type: LONG* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an Int32 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt32Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "prgn",
        "description": "Type: LONG* Pointer to the Int32 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies Int32 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int32 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated Int32 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt32ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONG**",
        "name": "pprgn",
        "description": "Type: LONG** Pointer to the address of the Int32 data extracted from source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int32 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int32 property value of a variant structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: LONG Returns the extracted Int32 value, or default. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt32WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lDefault",
        "description": "Type: LONG Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int64 property value of a variant structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt64",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pllRet",
        "description": "Type: LONGLONG* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an Int64 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt64Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "prgn",
        "description": "Type: LONGLONG* Pointer to the Int64 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies Int64 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int64 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated Int64 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt64ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG**",
        "name": "pprgn",
        "description": "Type: LONGLONG** Pointer to the address of the Int64 data extracted from source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of Int64 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an Int64 property value of a variant structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: LONGLONG Returns extracted Int64 value, or default. ",
    "remarks": "",
    "return_type": "LONGLONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToInt64WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "LONGLONG",
        "name": "llDefault",
        "description": "Type: LONGLONG Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Copies the contents of a VARIANT structure to a PROPVARIANT structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The following cannot be handled by this function. ",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToPropVariant",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const VARIANT*",
        "name": "pVar",
        "description": "Type: const VARIANT* Pointer to a source VARIANT structure."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "pPropVar",
        "description": "Type: PROPVARIANT* Pointer to a PROPVARIANT structure. When this function returns, the PROPVARIANT contains the converted information."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts the variant value of a variant structure to a string. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToString",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "pszBuf",
        "description": "Type: PWSTR Pointer to the extracted property value if one exists; otherwise, empty."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchBuf",
        "description": "Type: UINT Specifies string length, in characters."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the variant value of a variant structure to a newly-allocated string. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToStringAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR",
        "name": "ppszBuf",
        "description": "Type: PWSTR Pointer to the extracted property value if one exists; otherwise, empty."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into a String array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToStringArray",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "prgsz",
        "description": "Type: PWSTR* Pointer to the string data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgsz",
        "description": "Type: ULONG Specifies string array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of string elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into a newly-allocated String array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToStringArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR**",
        "name": "pprgsz",
        "description": "Type: PWSTR** The address of a pointer to the string data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgsz",
        "description": "Type: ULONG Specifies string array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of string elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts the string property value of a variant structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: PCWSTR Returns the extracted string value, or default. ",
    "remarks": "",
    "return_type": "PCWSTR",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToStringWithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszDefault",
        "description": "Type: LPCWSTR Pointer to the default Unicode string property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "If the source variant is a VT_BSTR, extracts string and places it into a STRRET structure.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToStrRet",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "STRRET*",
        "name": "pstrret",
        "description": "Type: STRRET* Pointer to the extracted string if one exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an unsigned Int16 property value of a variant structure. If no value can be extracted, then a default value is assigned by this function.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt16",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiRet",
        "description": "Type: USHORT* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an unsigned Int16 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt16Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "prgn",
        "description": "Type: USHORT* Pointer to the unsigned Int16 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies unsigned Int16 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int16 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated unsigned Int16 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt16ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT**",
        "name": "pprgn",
        "description": "Type: USHORT** Pointer to the address of the unsigned Int16 data extracted from the source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int16 elements extracted from the source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an unsigned Int16 property value of a variant structure. If no value exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: USHORT Returns extracted unsigned Int16 value, or default. ",
    "remarks": "",
    "return_type": "USHORT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt16WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiDefault",
        "description": "Type: USHORT Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts unsigned Int32 property value of a variant structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt32",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulRet",
        "description": "Type: ULONG* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an unsigned Int32 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt32Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "prgn",
        "description": "Type: ULONG* Pointer to the unsigned Int32 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies unsigned Int32 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int32 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated unsigned Int32 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt32ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG**",
        "name": "pprgn",
        "description": "Type: ULONG** The address of a pointer to the unsigned Int32 data extracted from source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int32 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an unsigned Int32 property value of a variant structure. If no value currently exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONG Returns extracted unsigned Int32 value, or default. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt32WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulDefault",
        "description": "Type: ULONG Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts unsigned Int64 property value of a variant structure. If no value can be extracted, then a default value is assigned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt64",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "pullRet",
        "description": "Type: ULONGLONG* Pointer to the extracted property value if one exists; otherwise, 0."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Extracts data from a vector structure into an unsigned Int64 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt64Array",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG*",
        "name": "prgn",
        "description": "Type: ULONGLONG* Pointer to the unsigned Int64 data extracted from source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "crgn",
        "description": "Type: ULONG Specifies unsigned Int64 array size."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int64 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Extracts data from a vector structure into a newly-allocated unsigned Int64 array.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: HRESULT If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt64ArrayAlloc",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "var",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONGLONG**",
        "name": "pprgn",
        "description": "Type: ULONGLONG** The address of a pointer to the unsigned Int64 data extracted from source variant structure."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcElem",
        "description": "Type: ULONG* Pointer to the count of unsigned Int64 elements extracted from source variant structure."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Extracts an unsigned Int64 property value of a variant structure. If no value currently exists, then the specified default value is returned.",
    "library": "Propsys.lib",
    "min_server": "Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Propvarutil.h",
    "return_value": "Type: ULONGLONG Returns the extracted unsigned Int64 value, or a default. ",
    "remarks": "",
    "return_type": "ULONGLONG",
    "category": "PROPVARIANT and VARIANT",
    "name": "VariantToUInt64WithDefault",
    "is_callback": 0,
    "dll": "Propsys.dll (version 6.0 or later)",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFVARIANT",
        "name": "varIn",
        "description": "Type: REFVARIANT Reference to a source variant structure."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "ullDefault",
        "description": "Type: ULONGLONG Specifies default property value, for use where no value currently exists."
      }
    ],
    "min_client": "Windows XP with SP2, Windows Vista [desktop apps only]"
  }
]