[
  {
    "n_arguments": 0,
    "description": "The CleanupCredentialCache function is implemented by certain Security Support Providers (SSP) to flush the SSP credential cache.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "TRUE if the function succeeds; otherwise, FALSE. ",
    "remarks": "The CleanupCredentialCache function is implemented by the following SSPs: The implementation of CleanupCredentialCache by these SSPs always returns TRUE. Before attempting to obtain a module handle to export CleanupCredentialCache, the application must verify that the SSP that has been loaded is one of the known SSPs implementing the CleanupCredentialCache function. In order to flush the SSP credential cache, the application must obtain a module handle for the SSP by calling the GetModuleHandle function. After obtaining the module, the application should export the CleanupCredentialCache function implemented by the SSP by calling the GetProcAddress function, passing the module returned by GetModuleHandle and CleanupCredentialCache as input parameters. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "CleanupCredentialCache",
    "is_callback": 0,
    "dll": "MSNSSPC.dll;  MSAPSSPC.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Stores data in the specified file in the Internet cache and associates it with the specified URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The STICKY_CACHE_ENTRY type is used to make cache entries exempt from scavenging. The default exempt time for entries set using  CommitUrlCacheEntryA is ten minutes. The exempt time can be changed by setting the expires time parameter in the INTERNET_CACHE_ENTRY_INFO structure in the call to the  SetUrlCacheEntryInfo function. If the cache storage is full,  CommitUrlCacheEntryA invokes cache cleanup to make space for this new file. If the cache entry already exists, the function overwrites the entry if it is not in use. An entry is in use when it has been retrieved with either  RetrieveUrlCacheEntryStream or  RetrieveUrlCacheEntryFile. Clients that add entries to the cache should set the headers to at least \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; otherwise, Microsoft Internet Explorer and other client applications should disregard the entry. See Caching for example code calling CreateUrlCacheEntryA. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "CommitUrlCacheEntryA",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a string variable that contains the source name of the cache entry. The name string must be unique and should not contain any escape characters."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszLocalFileName",
        "description": "Pointer to a string variable that contains the name of the local file that is being cached. This should be the same name as that returned by  CreateUrlCacheEntryA."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME",
        "name": "ExpireTime",
        "description": "FILETIME structure that contains the expire date and time (in Greenwich mean time) of the file that is being cached. If the expire date and time is unknown, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME",
        "name": "LastModifiedTime",
        "description": "FILETIME structure that contains the last modified date and time (in Greenwich mean time) of the URL that is being cached. If the last modified date and time is unknown, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "CacheEntryType",
        "description": "A bitmask indicating the type of cache entry and its properties. The cache entry types include: history entries (URLHISTORY_CACHE_ENTRY),  cookie entries  (COOKIE_CACHE_ENTRY), and normal cached content (NORMAL_CACHE_ENTRY). This parameter can be zero or more of the following property flags, and  cache type flags listed below.  ValueMeaning   COOKIE_CACHE_ENTRY   Cookie cache entry.    EDITED_CACHE_ENTRY   Cache entry file that has been edited externally. This cache entry type is exempt from scavenging.    NORMAL_CACHE_ENTRY   Normal cache entry; can be deleted to recover space for new entries.    SPARSE_CACHE_ENTRY   Partial response cache entry.    STICKY_CACHE_ENTRY   Sticky cache entry; exempt from scavenging.    TRACK_OFFLINE_CACHE_ENTRY   Not currently implemented.    TRACK_ONLINE_CACHE_ENTRY   Not currently implemented.    URLHISTORY_CACHE_ENTRY   Visited link cache entry."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "lpHeaderInfo",
        "description": "Pointer to the buffer that contains the header information. If this parameter is not NULL, the header information is treated as extended attributes of the URL that are returned in the lpHeaderInfo  member of the INTERNET_CACHE_ENTRY_INFO structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchHeaderInfo",
        "description": "Size of the header information, in TCHARs. If  lpHeaderInfo is not NULL, this value is assumed to indicate the size of the buffer that  stores the header information. An application can maintain headers as part of the data and provide  cchHeaderInfo together with a NULL value for  lpHeaderInfo."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPCSTR",
        "name": "lpszFileExtension",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszOriginalUrl",
        "description": "Pointer to a string  that contains the original URL, if redirection has occurred."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Stores data in the specified file in the Internet cache and associates it with the specified URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The STICKY_CACHE_ENTRY type is used to make cache entries exempt from scavenging. The default exempt time for entries set using  CommitUrlCacheEntryW is ten minutes. The exempt time can be changed by setting the expires time parameter in the INTERNET_CACHE_ENTRY_INFO structure in the call to the  SetUrlCacheEntryInfo function. If the cache storage is full,  CommitUrlCacheEntryW invokes cache cleanup to make space for this new file. If the cache entry already exists, the function overwrites the entry if it is not in use. An entry is in use when it has been retrieved with either  RetrieveUrlCacheEntryStream or  RetrieveUrlCacheEntryFile. Clients that add entries to the cache should set the headers to at least \"HTTP/1.0 200 OK\\r\\n\\r\\n\"; otherwise, Microsoft Internet Explorer and other client applications should disregard the entry. See Caching for example code calling CreateUrlCacheEntryW. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "CommitUrlCacheEntryW",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a string variable that contains the source name of the cache entry. The name string must be unique and should not contain any escape characters."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszLocalFileName",
        "description": "Pointer to a string variable that contains the name of the local file that is being cached. This should be the same name as that returned by  CreateUrlCacheEntryW."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME",
        "name": "ExpireTime",
        "description": "FILETIME structure that contains the expire date and time (in Greenwich mean time) of the file that is being cached. If the expire date and time is unknown, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME",
        "name": "LastModifiedTime",
        "description": "FILETIME structure that contains the last modified date and time (in Greenwich mean time) of the URL that is being cached. If the last modified date and time is unknown, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "CacheEntryType",
        "description": "A bitmask indicating the type of cache entry and its properties. The cache entry types include: history entries (URLHISTORY_CACHE_ENTRY),  cookie entries  (COOKIE_CACHE_ENTRY), and normal cached content (NORMAL_CACHE_ENTRY). This parameter can be zero or more of the following property flags, and  cache type flags listed below.  ValueMeaning   COOKIE_CACHE_ENTRY   Cookie cache entry.    EDITED_CACHE_ENTRY   Cache entry file that has been edited externally. This cache entry type is exempt from scavenging.    NORMAL_CACHE_ENTRY   Normal cache entry; can be deleted to recover space for new entries.    SPARSE_CACHE_ENTRY   Partial response cache entry.    STICKY_CACHE_ENTRY   Sticky cache entry; exempt from scavenging.    TRACK_OFFLINE_CACHE_ENTRY   Not currently implemented.    TRACK_ONLINE_CACHE_ENTRY   Not currently implemented.    URLHISTORY_CACHE_ENTRY   Visited link cache entry."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpHeaderInfo",
        "description": "Pointer to the buffer that contains the header information. If this parameter is not NULL, the header information is treated as extended attributes of the URL that are returned in the  lpHeaderInfo  member of the INTERNET_CACHE_ENTRY_INFO structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchHeaderInfo",
        "description": "Size of the header information, in TCHARs. If  lpHeaderInfo is not NULL, this value is assumed to indicate the size of the buffer that  stores the header information. An application can maintain headers as part of the data and provide  cchHeaderInfo together with a NULL value for  lpHeaderInfo."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPCWSTR",
        "name": "lpszFileExtension",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpszOriginalUrl",
        "description": "Pointer to a string  that contains the original URL, if redirection has occurred."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CreateMD5SSOHash function obtains the default Microsoft Passport password for a specified account or realm, creates an MD5 hash from it using a specified wide-character challenge string, and returns the result as a string of hexadecimal digit bytes.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "Once the CreateMD5SSOHash function successfully obtains the Microsoft Passport password for the specified account or realm, it converts both the challenge string and the password from wide characters to multi-byte (generally 8-bit) characters, concatenates them, and uses the RSA library to generate an MD5 hash from the resulting key. It then converts the hash into a null-terminated string of 8-bit hexadecimal digits (using lowercase letters) which it places in the buffer pointed to by the pbHexHash parameter. The output buffer pointed to by  pbHexHash must therefore be long enough to accept two bytes for each of the 16 bytes of the hash, plus a terminating null character, for a total of 33 bytes. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "CreateMD5SSOHash",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pszChallengeInfo",
        "description": "Pointer to the wide-character challenge string to use for the MD5 hash."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pwszRealm",
        "description": "Pointer to a string that names a realm for which to obtain the password. This parameter is ignored unless pwszTarget is NULL. If both pwszTarget and pwszRealm are NULL, the default realm is used."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "pwszTarget",
        "description": "Pointer to a string that names an account for which to obtain the password. If pwszTarget is NULL, the realm indicated by pwszRealm is used."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbHexHash",
        "description": "Pointer to an output buffer into which the MD5 hash is returned in hex string format. This buffer must be at least 33 bytes long."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a local file name for saving the cache entry based on the specified URL and the file name extension.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "After  CreateUrlCacheEntry is called, the application can write directly into the file in local storage. When the file is completely received, the caller should call  CommitUrlCacheEntry to commit the entry in the cache. WinINet attempts to decode Unicode  parameters according to the system code page. Applications should ensure that  Unicode parameters are properly encoded for the system code page. Applications can set the system code page with InternetSetOption as shown in the following code example: If the Unicode parameter is not properly encoded to the system code page, WinINet attempts UTF8 decoding. When items are retrieved from the cache, the system code page that was used to place the item in the cache must match the current system code page for the user. For applications running under IE6 and earlier, if decoding for the system code page fails, WinINet attempts UTF8 decoding. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "CreateUrlCacheEntry",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a string value that contains the name of the URL. The string must contain a value; an empty string will cause CreateUrlCacheEntry to fail. In addition, the string must not contain any escape characters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwExpectedFileSize",
        "description": "Expected size of the file needed to store the data that corresponds to the source entity, in TCHARs. If the expected size is unknown, set this value to zero."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszFileExtension",
        "description": "Pointer to a string value that contains an extension name of the file in the local storage."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszFileName",
        "description": "Pointer to a buffer that receives the file name. The buffer should be large enough  to store the path of the created file (at least MAX_PATH  characters in length)."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Generates cache group identifications.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid GROUPID if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "GROUPID",
    "category": "Windows Internet (WinINet)",
    "name": "CreateUrlCacheGroup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the creation of the cache group. This parameter can be set to  CACHEGROUP_FLAG_GIDONLY, which causes  CreateUrlCacheGroup to generate a unique GROUPID, but does not create a physical group."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the file associated with the source name from the cache, if the file exists.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible error values include the following.  ",
    "remarks": "",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "DeleteUrlCacheEntry",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a string that contains the name of the source that corresponds to the cache entry."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Releases the specified GROUPID and any associated state in the cache index file.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "DeleteUrlCacheGroup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GROUPID",
        "name": "GroupId",
        "description": "ID of the cache group to be released."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the cache group deletion. This can be set to  any member of the cache group constants. When this parameter is set to CACHEGROUP_FLAG_FLUSHURL_ONDELETE, it causes  DeleteUrlCacheGroup to delete all of the cache entries associated with this group, unless the entry belongs to another group."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Attempts to determine the location of a WPAD autoproxy script.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "DetectAutoProxyUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPSTR",
        "name": "lpszAutoProxyUrl",
        "description": "Pointer to a buffer to receive the URL from which a WPAD autoproxy script can be downloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAutoProxyUrlLength",
        "description": "Size of  the buffer pointed to by lpszAutoProxyUrl, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDetectFlags",
        "description": "Automation detection type. This parameter can be one or both of the following values.  ValueMeaning  PROXY_AUTO_DETECT_TYPE_DHCP   Use a Dynamic Host Configuration Protocol (DHCP) search to identify the proxy.   PROXY_AUTO_DETECT_TYPE_DNS_A   Use a well qualified name search to identify the proxy."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes the specified cache enumeration handle.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "FindCloseUrlCache",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEnumHandle",
        "description": "Handle returned by a previous call to the  FindFirstUrlCacheEntry function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Begins the enumeration of the Internet cache.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a handle that the application can use in the  FindNextUrlCacheEntry function to retrieve subsequent entries in the cache. If the function fails, the return value is NULL. To get extended error information, call  GetLastError. ERROR_INSUFFICIENT_BUFFER indicates that the size of  lpFirstCacheEntryInfo as specified by  lpdwFirstCacheEntryInfoBufferSize is not sufficient to contain all the information. The value returned in  lpdwFirstCacheEntryInfoBufferSize indicates the buffer size necessary to contain all the information. ",
    "remarks": "The handle returned from FindFirstUrlCacheEntry is used in all subsequent calls to FindNextUrlCacheEntry. At the end of the enumeration, the application should call  FindCloseUrlCache. FindFirstUrlCacheEntry and  FindNextUrlCacheEntry return variable size information. If ERROR_INSUFFICIENT_BUFFER is returned, the application should allocate a buffer of the size specified by  lpdwFirstCacheEntryInfoBufferSize. For more information, see  Using Buffers. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HANDLE",
    "category": "Windows Internet (WinINet)",
    "name": "FindFirstUrlCacheEntry",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlSearchPattern",
        "description": "A pointer to a string that contains the source name pattern to search for. This parameter can only be set to \"cookie:\", \"visited:\", or NULL. Set this parameter to \"cookie:\" to enumerate the cookies or \"visited:\" to enumerate the URL History entries in the cache. If this parameter is NULL, FindFirstUrlCacheEntry returns all content entries in the cache."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpFirstCacheEntryInfo",
        "description": "Pointer to an  INTERNET_CACHE_ENTRY_INFO structure."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "Pointer to a variable that specifies the size of the  lpFirstCacheEntryInfo buffer, in bytes. When the function returns, the variable contains the number of bytes copied to the buffer, or the required size needed to retrieve the cache entry, in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Starts a filtered enumeration of the Internet cache.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle if successful, or NULL otherwise. To get specific error information, call  GetLastError. If the function finds no matching files,  GetLastError returns ERROR_NO_MORE_FILES. ",
    "remarks": "The handle returned from FindFirstUrlCacheEntryEx is used in all subsequent calls to FindNextUrlCacheEntryEx. At the end of the enumeration, the application should call  FindCloseUrlCache. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HANDLE",
    "category": "Windows Internet (WinINet)",
    "name": "FindFirstUrlCacheEntryEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlSearchPattern",
        "description": "A pointer to a string that contains the source name pattern to search for. This parameter can only be set to \"cookie:\", \"visited:\", or NULL. Set this parameter to \"cookie:\" to enumerate the cookies or \"visited:\" to enumerate the URL History entries in the cache. If this parameter is NULL, FindFirstUrlCacheEntryEx returns all content entries in the cache."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the enumeration. No flags are currently implemented; this parameter must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFilter",
        "description": "A bitmask indicating the type of cache entry and its properties. The cache entry types include: history entries (URLHISTORY_CACHE_ENTRY),  cookie entries  (COOKIE_CACHE_ENTRY), and normal cached content (NORMAL_CACHE_ENTRY). This parameter can be zero or more of the following property flags, and  cache type flags listed below.  ValueMeaning   COOKIE_CACHE_ENTRY   Cookie cache entry.    EDITED_CACHE_ENTRY   Cache entry file that has been edited externally. This cache entry type is exempt from scavenging.     NORMAL_CACHE_ENTRY   Normal cache entry; can be deleted to recover space for new entries.    SPARSE_CACHE_ENTRY   Partial response cache entry.    STICKY_CACHE_ENTRY   Sticky cache entry; exempt from scavenging.    TRACK_OFFLINE_CACHE_ENTRY   Not currently implemented.    TRACK_ONLINE_CACHE_ENTRY   Not currently implemented.    URLHISTORY_CACHE_ENTRY   Visited link cache entry."
      },
      {
        "in_out": "_In_",
        "type": "GROUPID",
        "name": "GroupId",
        "description": "ID of the cache group to be enumerated. Set this parameter to zero to enumerate all entries that are not grouped."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpFirstCacheEntryInfo",
        "description": "Pointer to a  INTERNET_CACHE_ENTRY_INFO structure to receive the cache entry information."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwEntryInfo",
        "description": "Pointer to variable that indicates the size of  the structure referenced by the lpFirstCacheEntryInfo parameter, in bytes."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpGroupAttributes",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPDWORD",
        "name": "lpcbGroupAttributes",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Initiates the enumeration of the cache groups in the Internet cache.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle to the first item in the enumeration if successful, or NULL otherwise. To get specific error information, call  GetLastError. If the function finds no matching files,  GetLastError returns ERROR_NO_MORE_FILES. ",
    "remarks": "The handle returned from FindFirstUrlCacheGroup is used in subsequent calls to FindNextUrlCacheGroup. At the end of the enumeration, the application should call  FindCloseUrlCache. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HANDLE",
    "category": "Windows Internet (WinINet)",
    "name": "FindFirstUrlCacheGroup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFilter",
        "description": "Filters to be used. This parameter can be zero or one of the following values.  ValueMeaning   CACHEGROUP_SEARCH_ALL   Search all  cache groups.    CACHEGROUP_SEARCH_BYURL   Not currently implemented."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpSearchCondition",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwSearchCondition",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_Out_",
        "type": "GROUPID*",
        "name": "lpGroupId",
        "description": "Pointer to the ID of the first cache group that matches the search criteria."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the next entry in the Internet cache.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible error values include the following.  ",
    "remarks": "Continue to call FindNextUrlCacheEntry until the last item in the cache is returned. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "FindNextUrlCacheEntry",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEnumHandle",
        "description": "Handle to the enumeration obtained from a previous call to  FindFirstUrlCacheEntry."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpNextCacheEntryInfo",
        "description": "Pointer to an  INTERNET_CACHE_ENTRY_INFO structure that receives information about the cache entry."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "Pointer to a variable that specifies the size of the  lpNextCacheEntryInfo buffer, in bytes. When the function returns, the variable contains the number of bytes copied to the buffer, or the size of the buffer required to retrieve the cache entry, in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Finds the next cache entry in a cache enumeration started by the  FindFirstUrlCacheEntryEx function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "Continue to call FindNextUrlCacheEntryEx until the last item in the cache is returned. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FindNextUrlCacheEntryEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEnumHandle",
        "description": "Handle returned by  FindFirstUrlCacheEntryEx, which started a cache enumeration."
      },
      {
        "in_out": "_Inout_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpNextCacheEntryInfo",
        "description": "Pointer to the   INTERNET_CACHE_ENTRY_INFO structure that receives the cache entry information."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbEntryInfo",
        "description": "Pointer to a variable that indicates the size of the buffer, in bytes."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpGroupAttributes",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPDWORD",
        "name": "lpcbGroupAttributes",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the next cache group in a cache group enumeration started by  FindFirstUrlCacheGroup.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "Continue to call FindNextUrlCacheGroup until the last item in the cache is returned. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FindNextUrlCacheGroup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hFind",
        "description": "The cache group enumeration handle, which is returned by  FindFirstUrlCacheGroup."
      },
      {
        "in_out": "_Out_",
        "type": "GROUPID*",
        "name": "lpGroupId",
        "description": "Pointer to a variable that receives the cache group identifier."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The FtpCommand function sends commands directly to an FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "GetLastError can return  ERROR_INTERNET_NO_DIRECT_ACCESS if the client application is offline. If one or more of the parameters are invalid,  GetLastError will return ERROR_INVALID_PARAMETER. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpCommand",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "A handle returned from a call to  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fExpectResponse",
        "description": "A Boolean value that indicates whether the application expects a data connection to be established by the FTP server. This must be set to TRUE if a data connection is expected, or FALSE otherwise."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A parameter that can be set to one of the following values.  ValueMeaning  FTP_TRANSFER_TYPE_ASCII   Transfers the file using the FTP ASCII (Type A) transfer method. Control and formatting data is converted to local equivalents.   FTP_TRANSFER_TYPE_BINARY   Transfers the file using the FTP Image (Type I) transfer method. The file is transferred exactly with no changes. This is the default transfer method."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCommand",
        "description": "A pointer to a string that contains the command to send to the FTP server."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "A pointer to a variable that contains an application-defined value used to identify the application context in callback operations."
      },
      {
        "in_out": "_Out_",
        "type": "HINTERNET*",
        "name": "phFtpCommand",
        "description": "A pointer to a handle that is created if a valid data socket is opened. The  fExpectResponse parameter must be set to TRUE for  phFtpCommand to be filled."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new directory on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. If the error message indicates that the FTP server denied the request to create a directory, use  InternetGetLastResponseInfo to determine why. ",
    "remarks": "An application should use  FtpGetCurrentDirectory to determine the remote site's current working directory instead of assuming that the remote system uses a hierarchical naming scheme for directories. The  lpszDirectory parameter can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpCreateDirectory",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle returned by a previous call to  InternetConnect using INTERNET_SERVICE_FTP."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszDirectory",
        "description": "Pointer to a null-terminated string that contains the name of the directory to be created. This can be either a fully qualified path or a name relative to the current directory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Deletes a file stored on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "The  lpszFileName parameter can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpDeleteFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle returned by a previous call to  InternetConnect using INTERNET_SERVICE_FTP."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszFileName",
        "description": "Pointer to a null-terminated string that contains the name of the file to be deleted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Searches the specified directory of the given FTP session. File and directory entries are returned to the application in the  WIN32_FIND_DATA structure.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle for the request if the directory enumeration was started successfully, or returns NULL otherwise. To get a specific error message, call  GetLastError. If GetLastError returns ERROR_INTERNET_EXTENDED_ERROR, as in the case where the function finds no matching files, call the  InternetGetLastResponseInfo function to retrieve the extended error text, as documented in Handling Errors. ",
    "remarks": "For  FtpFindFirstFile, file times returned in the  WIN32_FIND_DATA structure are in the local time zone, not in a coordinated universal time (UTC) format. FtpFindFirstFile is similar to the FindFirstFile function. Note, however, that only one  FtpFindFirstFile can occur at a time within a given FTP session. The enumerations, therefore, are correlated with the FTP session handle. This is because the FTP protocol allows only a single directory enumeration per session. After calling  FtpFindFirstFile and until calling  InternetCloseHandle, the application cannot call  FtpFindFirstFile again on the given FTP session handle. If a call is made to  FtpFindFirstFile on that handle, the function  fails with  ERROR_FTP_TRANSFER_IN_PROGRESS. After the calling application has finished using the  HINTERNET handle returned by  FtpFindFirstFile, it must be closed using the  InternetCloseHandle function. After beginning a directory enumeration with  FtpFindFirstFile, the  InternetFindNextFile function can be used to continue the enumeration. Because the FTP protocol provides no standard means of enumerating, some of the common information about files, such as file creation date and time, is not always available or correct. When this happens,  FtpFindFirstFile and  InternetFindNextFile fill in unavailable information with a best guess based on available information. For example, creation and last access dates are often  the same as the file's modification date. The application cannot call  FtpFindFirstFile between calls to  FtpOpenFile and  InternetCloseHandle. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "FtpFindFirstFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session returned from  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszSearchFile",
        "description": "Pointer to a null-terminated string that specifies a valid directory path or file name for the FTP server's file system. The string can contain wildcards, but no blank spaces are allowed. If the value of  lpszSearchFile is NULL or if it is an empty string, the function  finds the first file in the current directory on the server."
      },
      {
        "in_out": "_Out_",
        "type": "LPWIN32_FIND_DATA",
        "name": "lpFindFileData",
        "description": "Pointer to a  WIN32_FIND_DATA structure that receives information about the found file or directory."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the behavior of this function. This parameter can be a combination of the following values. INTERNET_FLAG_HYPERLINK INTERNET_FLAG_NEED_FILE INTERNET_FLAG_NO_CACHE_WRITE INTERNET_FLAG_RELOAD INTERNET_FLAG_RESYNCHRONIZE"
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that specifies the application-defined value that associates this search with any application data. This parameter is used only if the application has already called  InternetSetStatusCallback to set up a status callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the current directory for the specified FTP session.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "If the  lpszCurrentDirectory buffer is not large enough,  lpdwCurrentDirectory receives the number of bytes required to retrieve the full, current directory name. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpGetCurrentDirectory",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszCurrentDirectory",
        "description": "Pointer to a null-terminated string that receives the absolute path of the current directory."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwCurrentDirectory",
        "description": "Pointer to a variable that specifies the length of the buffer, in TCHARs. The buffer length must include room for a terminating null character. Using a length of MAX_PATH is sufficient for all paths. When the function returns, the variable receives the number of characters copied into the buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Retrieves a file from the FTP server and stores it under the specified file name, creating a new local file in the process.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "FtpGetFile is a high-level routine that handles all the bookkeeping and overhead associated with reading a file from an FTP server and storing it locally. An application that needs to retrieve file data only or that requires close control over the file transfer should use the  FtpOpenFile and  InternetReadFile functions. If the  dwFlags parameter specifies FTP_TRANSFER_TYPE_ASCII, translation of the file data converts control and formatting characters to local equivalents. The default transfer is binary mode, where the file is downloaded in the same format as it is stored on the server. Both  lpszRemoteFile and  lpszNewFile can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpGetFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszRemoteFile",
        "description": "Pointer to a null-terminated string that contains the name of the file to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszNewFile",
        "description": "Pointer to a null-terminated string that contains the name of the file to be created on the local system."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fFailIfExists",
        "description": "Indicates whether the function should proceed if a local file of the specified name already exists. If  fFailIfExists is TRUE and the local file exists,  FtpGetFile fails."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlagsAndAttributes",
        "description": "File attributes for the new file. This parameter can be any combination of the FILE_ATTRIBUTE_* flags used by the  CreateFile function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls how the function will handle the file download. The first set of flag values indicates the conditions under which the transfer occurs. These transfer type flags can be used in combination with the second set of flags that control caching.  The application can select one of these transfer type values.  ValueMeaning  FTP_TRANSFER_TYPE_ASCII   Transfers the file using FTP's ASCII (Type A) transfer method. Control and formatting information is converted to local equivalents.   FTP_TRANSFER_TYPE_BINARY   Transfers the file using FTP's Image (Type I) transfer method. The file is transferred exactly as it exists with no changes. This is the default transfer method.   FTP_TRANSFER_TYPE_UNKNOWN   Defaults to FTP_TRANSFER_TYPE_BINARY.   INTERNET_FLAG_TRANSFER_ASCII   Transfers the file as ASCII.   INTERNET_FLAG_TRANSFER_BINARY   Transfers the file as binary.      The following flags determine how the caching of this file will be done. Any combination of the following flags can be used with the transfer type flag.  ValueMeaning  INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.   INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.   INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.   INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded. Windows XP and Windows Server 2003 R2 and earlier:  Gopher resources are also reloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains the application-defined value that associates this search with any application data. This is used only if the application has already called  InternetSetStatusCallback to set up a status callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the file size of the requested FTP resource.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns the low-order unsigned long integer of the file size of the requested FTP resource. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "FtpGetFileSize",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned from a call to  FtpOpenFile."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwFileSizeHigh",
        "description": "Pointer to the high-order unsigned long integer of the file size of the requested FTP resource."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Initiates access to a remote file on an FTP server for reading or writing.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a handle if successful, or NULL otherwise. To retrieve a specific error message, call  GetLastError. ",
    "remarks": "After calling  FtpOpenFile and until calling  InternetCloseHandle, all other calls to FTP functions on the same FTP session handle will fail and set the error message to  ERROR_FTP_TRANSFER_IN_PROGRESS. After the calling application has finished using the  HINTERNET handle returned by  FtpOpenFile, it must be closed using the  InternetCloseHandle function. Only one file can be open in a single FTP session. Therefore, no file handle is returned and the application simply uses the FTP session handle when necessary. The  lpszFileName parameter can be either a partially or fully qualified file name relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "FtpOpenFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszFileName",
        "description": "Pointer to a null-terminated string that contains the name of the file to be accessed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAccess",
        "description": "File  access. This parameter can be GENERIC_READ or GENERIC_WRITE, but not both."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Conditions under which the transfers occur. The application should select one transfer type and any of the flags that indicate how the caching of the file will be controlled.  The transfer type can be one of the following values.  ValueMeaning  FTP_TRANSFER_TYPE_ASCII   Transfers the file using FTP's ASCII (Type A) transfer method. Control and formatting information is converted to local equivalents.   FTP_TRANSFER_TYPE_BINARY   Transfers the file using FTP's Image (Type I) transfer method. The file is transferred exactly as it exists with no changes. This is the default transfer method.   FTP_TRANSFER_TYPE_UNKNOWN   Defaults to FTP_TRANSFER_TYPE_BINARY.   INTERNET_FLAG_TRANSFER_ASCII   Transfers the file as ASCII.   INTERNET_FLAG_TRANSFER_BINARY   Transfers the file as binary.      The following values are used to control the caching of the file. The application can use one or more of these values.  ValueMeaning  INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.   INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.   INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.   INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded. Windows XP and Windows Server 2003 R2 and earlier:  Gopher resources are also reloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains the application-defined value that associates this search with any application data. This is only used if the application has already called  InternetSetStatusCallback to set up a status callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Stores a file on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "FtpPutFile is a high-level routine that handles all the bookkeeping and overhead associated with reading a file locally and storing it on an FTP server. An application that needs to send file data only, or that requires close control over the file transfer, should use the  FtpOpenFile and  InternetWriteFile functions. If the  dwFlags parameter specifies FILE_TRANSFER_TYPE_ASCII, translation of the file data converts control and formatting characters to local equivalents. Both  lpszNewRemoteFile and  lpszLocalFile can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpPutFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLocalFile",
        "description": "Pointer to a null-terminated string that contains the name of the file to be sent from the local system."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszNewRemoteFile",
        "description": "Pointer to a null-terminated string that contains the name of the file to be created on the remote system."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Conditions under which the transfers occur. The application should select one transfer type and any of the flags that control how the caching of the file will be controlled.  The transfer type can be any one of the following values.  ValueMeaning  FTP_TRANSFER_TYPE_ASCII   Transfers the file using FTP's ASCII (Type A) transfer method. Control and formatting information is converted to local equivalents.   FTP_TRANSFER_TYPE_BINARY   Transfers the file using FTP's Image (Type I) transfer method. The file is transferred exactly as it exists with no changes. This is the default transfer method.   FTP_TRANSFER_TYPE_UNKNOWN   Defaults to FTP_TRANSFER_TYPE_BINARY.   INTERNET_FLAG_TRANSFER_ASCII   Transfers the file as ASCII.   INTERNET_FLAG_TRANSFER_BINARY   Transfers the file as binary.      The following values are used to control the caching of the file. The application can use one or more of the following values.  ValueMeaning  INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.   INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.   INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.   INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded. Windows XP and Windows Server 2003 R2 and earlier:  Gopher resources are also reloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains the application-defined value that associates this search with any application data. This parameter is used only if the application has already called  InternetSetStatusCallback to set up a status callback."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Removes the specified directory on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. If the error message indicates that the FTP server denied the request to remove a directory, use  InternetGetLastResponseInfo to determine why. ",
    "remarks": "An application should use  FtpGetCurrentDirectory to determine the remote site's current working directory, instead of assuming that the remote system uses a hierarchical naming scheme for directories. The  lpszDirectory parameter can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpRemoveDirectory",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszDirectory",
        "description": "Pointer to a null-terminated string that contains the name of the directory to be removed. This can be either a fully qualified path or a name relative to the current directory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Renames a file stored on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "The  lpszExisting and  lpszNew parameters can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpRenameFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszExisting",
        "description": "Pointer to a null-terminated string that contains the name of the file to be renamed."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszNew",
        "description": "Pointer to a null-terminated string that contains the new name for the remote file."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Changes to a different working directory on the FTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. If the error message indicates that the FTP server denied the request to change a directory, use  InternetGetLastResponseInfo to determine why. ",
    "remarks": "An application should use  FtpGetCurrentDirectory to determine the remote site's current working directory, instead of assuming that the remote system uses a hierarchical naming scheme for directories. The  lpszDirectory parameter can be either partially or fully qualified file names relative to the current directory. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "FtpSetCurrentDirectory",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to an FTP session."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszDirectory",
        "description": "Pointer to a null-terminated string that contains the name of the directory to become the current working directory. This can be either a fully qualified path or a name relative to the current directory."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about a cache entry.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible error values include the following.  ",
    "remarks": "GetUrlCacheEntryInfo does not do any URL parsing, so a URL containing an anchor (#) will not be found in the cache, even if the resource is cached. For example, if the URL http://example.com/example.htm#sample is passed, the function returns ERROR_FILE_NOT_FOUND even if http://example.com/example.htm is in the cache. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GetUrlCacheEntryInfo",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "A pointer to a null-terminated string that contains the name of the cache entry. The name string should not contain any escape characters."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpCacheEntryInfo",
        "description": "A pointer to an  INTERNET_CACHE_ENTRY_INFO structure that receives information about the cache entry. A buffer should be allocated for this parameter.  Since the required size of the buffer is not known in advance,  it is best to allocate a buffer adequate to handle the size of most INTERNET_CACHE_ENTRY_INFO entries. There is no cache entry size limit, so applications that need to enumerate the cache must be prepared to allocate variable-sized buffers."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "A pointer to a variable that specifies the size of the  lpCacheEntryInfo buffer, in bytes. When the function returns, the variable contains the number of bytes copied to the buffer, or the required size of the buffer, in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Retrieves information on the cache entry associated with the specified URL, taking into account any redirections that are applied in offline mode by the  HttpSendRequest function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the URL was located, or FALSE otherwise. Call  GetLastError for specific error information. Possible errors include the following.  ",
    "remarks": "GetUrlCacheEntryInfoEx does not do any URL parsing, so a URL containing an anchor (#) will not be found in the cache, even if the resource is cached. For example, if the URL http://example.com/example.htm#sample is passed, the function returns ERROR_FILE_NOT_FOUND even if http://example.com/example.htm is in the cache. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "GetUrlCacheEntryInfoEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "A pointer to a null-terminated string that contains the name of the cache entry. The name string should not contain any escape characters."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpCacheEntryInfo",
        "description": "A pointer to an  INTERNET_CACHE_ENTRY_INFO structure that receives information about the cache entry. A buffer should be allocated for this parameter.  Since the required size of the buffer is not known in advance,  it is best to allocate a buffer adequate to handle the size of most INTERNET_CACHE_ENTRY_INFO entries. There is no cache entry size limit, so applications that need to enumerate the cache must be prepared to allocate variable-sized buffers."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "Pointer to a variable that specifies the size of the  lpCacheEntryInfo buffer, in bytes. When the function returns, the variable contains the number of bytes copied to the buffer, or the required size of the buffer in bytes."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPTSTR",
        "name": "lpszRedirectUrl",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPDWORD",
        "name": "lpcbRedirectUrl",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Retrieves the attribute information of the specified cache group.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GetUrlCacheGroupAttribute",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GROUPID",
        "name": "gid",
        "description": "Identifier of the cache group."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttributes",
        "description": "Attributes to be retrieved. This can be one of the following values.  ValueMeaning   CACHEGROUP_ATTRIBUTE_BASIC   Retrieves the flags, type, and disk quota attributes of the cache group.    CACHEGROUP_ATTRIBUTE_FLAG   Sets or retrieves the flags associated with the cache group.    CACHEGROUP_ATTRIBUTE_GET_ALL   Retrieves all the attributes of the cache group.    CACHEGROUP_ATTRIBUTE_GROUPNAME   Sets or retrieves the group name of the cache group.    CACHEGROUP_ATTRIBUTE_QUOTA   Sets or retrieves the disk quota associated with the cache group.    CACHEGROUP_ATTRIBUTE_STORAGE   Sets or retrieves the group owner storage associated with the cache group.    CACHEGROUP_ATTRIBUTE_TYPE   Sets or retrieves the cache group type."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_GROUP_INFO",
        "name": "lpGroupInfo",
        "description": "Pointer to an  INTERNET_CACHE_GROUP_INFO structure that receives the requested information."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwGroupInfo",
        "description": "Pointer to a variable that contains the size of the  lpGroupInfo buffer. When the function returns, the variable contains the number of bytes copied to the buffer, or the required size of the buffer, in bytes."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The GopherAttributeEnumerator function is available for use in the operating systems specified in the Requirements section.]",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Return TRUE to continue the enumeration, or FALSE to stop it immediately. This function is primarily used for returning the results of a Gopher+ ASK item. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GopherAttributeEnumerator",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "LPGOPHER_ATTRIBUTE_TYPE",
        "name": "lpAttributeInfo",
        "description": "Pointer to a  GOPHER_ATTRIBUTE_TYPE structure. The  lpBuffer parameter of  GopherGetAttribute is used for storing this structure. The  lpBuffer size must be equal to or greater than the value of MIN_GOPHER_ATTRIBUTE_LENGTH."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwError",
        "description": "Error value. This parameter is NO_ERROR if the attribute was parsed and written to the buffer successfully. If a problem was encountered, an error value is returned."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[The GopherCreateLocator function is available for use in the operating systems specified in the Requirements section.]",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError or  InternetGetLastResponseInfo. ",
    "remarks": "To retrieve information from a Gopher server, an application must first get a Gopher \"locator\" from the Gopher server. The locator, which the application should treat as an opaque token, is normally used for calls to the  GopherFindFirstFile function to retrieve a specific piece of information. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GopherCreateLocator",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszHost",
        "description": "Pointer to a null-terminated string that contains the name of the host, or a dotted-decimal IP address (such as 198.105.232.1)."
      },
      {
        "in_out": "_In_",
        "type": "INTERNET_PORT",
        "name": "nServerPort",
        "description": "Port number on which the Gopher server at  lpszHost lives, in host byte order. If  nServerPort is INTERNET_INVALID_PORT_NUMBER, the default Gopher port is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszDisplayString",
        "description": "Pointer to a null-terminated string that contains the Gopher document or directory to be displayed. If this parameter is NULL, the function returns the default directory for the Gopher server."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszSelectorString",
        "description": "Pointer to the selector string to send to the Gopher server in order to retrieve information. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwGopherType",
        "description": "Determines whether  lpszSelectorString refers to a directory or document, and whether the request is Gopher+ or Gopher. The default value, GOPHER_TYPE_DIRECTORY, is used if the value of  dwGopherType is zero. This can be one of the  gopher type values."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszLocator",
        "description": "Pointer to a buffer  that receives the locator string. If  lpszLocator is NULL,  lpdwBufferLength receives the necessary buffer length, but the function performs no other processing."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "Pointer to a variable that contains the length of the  lpszLocator buffer, in characters. When the function returns, this parameter receives the number of characters written to the  buffer. If  GetLastError returns ERROR_INSUFFICIENT_BUFFER, this parameter receives the number of characters required."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[The GopherFindFirstFile function is available for use in the operating systems specified in the Requirements section.]",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid search handle if successful, or NULL otherwise. To retrieve extended error information, call  GetLastError or  InternetGetLastResponseInfo. ",
    "remarks": "GopherFindFirstFile closely resembles the FindFirstFile function. It creates a connection with a Gopher server, and then returns a single structure containing information about the first Gopher object referenced by the locator string. After calling  GopherFindFirstFile to retrieve the first Gopher object in an enumeration, an application can use the  InternetFindNextFile function to retrieve subsequent Gopher objects. After the calling application has finished using the  HINTERNET handle returned by  GopherFindFirstFile, it must be closed using the  InternetCloseHandle function. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "GopherFindFirstFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to a Gopher session returned by  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLocator",
        "description": "Pointer to a null-terminated string that contains the name of the item to locate. This can be one of the following:  \t\t\t\t\t  Gopher locator returned by a previous call to this function or the  InternetFindNextFile function. NULL pointer or empty string indicating that the topmost information from a Gopher server is being returned. Locator created by the  GopherCreateLocator function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszSearchString",
        "description": "Pointer to a buffer that contains the strings to search, if this request is to an index server. Otherwise, this parameter should be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "LPGOPHER_FIND_DATA",
        "name": "lpFindData",
        "description": "Pointer to a  GOPHER_FIND_DATA structure that receives the information retrieved by this function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the function behavior. This parameter can be a combination of the following values.  ValueMeaning   INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.    INTERNET_FLAG_NO_CACHE_WRITE   Does not add the returned entity to the cache.    INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP and Gopher resources are reloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains the application-defined value that associates this search with any application data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "[The GopherGetAttribute function is available for use in the operating systems specified in the Requirements section.]",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the request is satisfied, or FALSE otherwise. To get extended error information, call  GetLastError or  InternetGetLastResponseInfo. ",
    "remarks": "Generally, applications call this function after calling  GopherFindFirstFile or  InternetFindNextFile. The size of the  lpBuffer parameter must be equal to or greater than the value of MIN_GOPHER_ATTRIBUTE_LENGTH. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GopherGetAttribute",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to a Gopher session returned by  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLocator",
        "description": "Pointer to a null-terminated string that identifies the item at the Gopher server on which to return attribute information."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszAttributeName",
        "description": "Pointer to a space-delimited string specifying the names of attributes to return. If  lpszAttributeName is NULL,  GopherGetAttribute returns information about all attributes."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE",
        "name": "lpBuffer",
        "description": "Pointer to an application-defined buffer from which attribute information is retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwBufferLength",
        "description": "Size of the  lpBuffer buffer, in TCHARs."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwCharactersReturned",
        "description": "Pointer to a variable that contains the number of characters read into the  lpBuffer buffer."
      },
      {
        "in_out": "_In_",
        "type": "GOPHER_ATTRIBUTE_ENUMERATOR",
        "name": "lpfnEnumerator",
        "description": "Pointer to a GopherAttributeEnumerator callback function that enumerates each attribute of the locator. This parameter is optional. If it is NULL, all  Gopher attribute information is placed into  lpBuffer. If  lpfnEnumerator is specified, the callback function is called once for each attribute of the object. \t\t\t\t  The callback function receives the address of a single  GOPHER_ATTRIBUTE_TYPE structure with each call. The enumeration callback function allows the application to avoid having to parse the Gopher attribute information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Application-defined value that associates this operation with any application data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The GopherGetLocatorType function is available for use in the operating systems specified in the Requirements section.]",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "GopherGetLocatorType returns information about the item referenced by a Gopher locator. Note that it is possible for multiple attributes to be set on a file. For example, both GOPHER_TYPE_TEXT_FILE and GOPHER_TYPE_GOPHER_PLUS are set for a text file stored on a Gopher+ server. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "GopherGetLocatorType",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLocator",
        "description": "Pointer to a null-terminated string that specifies the Gopher locator to be parsed."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwGopherType",
        "description": "Pointer to a variable that receives the type of the locator. The type is a bitmask that consists of a combination of the  gopher type values."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The GopherOpenFile function is available for use in the operating systems specified in the Requirements section.]",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a handle if successful, or NULL if the file cannot be opened. To retrieve extended error information, call  GetLastError or  InternetGetLastResponseInfo. ",
    "remarks": "GopherOpenFile opens a file at a Gopher server. Because a file cannot actually be opened or locked at a server, this function simply associates location information with a handle that an application can use for file-based operations such as  InternetReadFile or  GopherGetAttribute. After the calling application has finished using the  HINTERNET handle returned by  GopherOpenFile, it must be closed using the  InternetCloseHandle function. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "GopherOpenFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "Handle to a Gopher session returned by  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszLocator",
        "description": "Pointer to a null-terminated string that specifies the file to be opened. Generally, this locator is returned from a call to  GopherFindFirstFile or  InternetFindNextFile. Because the Gopher protocol has no concept of a current directory, the locator is always fully qualified."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszView",
        "description": "Pointer to a null-terminated string that describes the view to open if several views of the file exist on the server. If  lpszView is NULL, the function uses the default file view."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Conditions under which subsequent transfers occur. This parameter can be any of the following values.  ValueMeaning   INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.    INTERNET_FLAG_NO_CACHE_WRITE   Does not add the returned entity to the cache.    INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP and Gopher resources are reloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains an application-defined value that associates this operation with any application data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Adds one or more HTTP request headers to the HTTP request handle.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "HttpAddRequestHeaders appends additional, free-format headers to the HTTP request handle and is intended for use by sophisticated clients that need detailed control over the exact request sent to the HTTP server. Note that for basic  HttpAddRequestHeaders, the application can pass in multiple headers in a single buffer. If the application is trying to remove or replace a header, only one header can be supplied in  lpszHeaders. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "HttpAddRequestHeaders",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "A handle returned by a call to the  HttpOpenRequest function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszHeaders",
        "description": "A pointer to a string variable containing the headers to append to the request. Each header must be terminated by a CR/LF (carriage return/line feed) pair."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeadersLength",
        "description": "The size of  lpszHeaders, in TCHARs. If this parameter is -1L, the function assumes that  lpszHeaders is zero-terminated (ASCIIZ), and the length is computed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwModifiers",
        "description": "A set of modifiers that control the semantics of this function. This parameter can be a combination of the following values.  ValueMeaning  HTTP_ADDREQ_FLAG_ADD   Adds the header if it does not exist. Used with HTTP_ADDREQ_FLAG_REPLACE.   HTTP_ADDREQ_FLAG_ADD_IF_NEW   Adds the header only if it does not already exist; otherwise, an error is returned.   HTTP_ADDREQ_FLAG_COALESCE   Coalesces headers of the same name.   HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA   Coalesces headers of the same name. For example, adding \"Accept: text/*\" followed by \"Accept: audio/*\" with this flag results in the formation of the single header \"Accept: text/*, audio/*\". This causes the first header found to be coalesced. It is up to the calling application to ensure a cohesive scheme with respect to coalesced/separate headers.   HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON   Coalesces headers of the same name using a semicolon.   HTTP_ADDREQ_FLAG_REPLACE   Replaces or removes a header. If the header value is empty and the header is found, it is removed. If not empty, the header value is replaced."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Ends an HTTP request that was initiated by  HttpSendRequestEx.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "If  lpBuffersOut is not set to NULL,  HttpEndRequest will return ERROR_INVALID_PARAMETER. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "HttpEndRequest",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "Handle returned by  HttpOpenRequest and sent by  HttpSendRequestEx."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPINTERNET_BUFFERS",
        "name": "lpBuffersOut",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to 0."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "This parameter is reserved and must be set to 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Creates an HTTP request handle.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns an HTTP request handle if successful, or NULL otherwise. To retrieve extended error information, call  GetLastError. ",
    "remarks": "The HttpOpenRequest function creates a new HTTP request handle and stores the specified parameters in that handle. An HTTP request handle holds a request to be sent to an HTTP server and contains all RFC822/MIME/HTTP headers to be sent as part of the request. If a verb other than \"GET\" or \"POST\" is specified, HttpOpenRequest automatically sets INTERNET_FLAG_NO_CACHE_WRITE and INTERNET_FLAG_RELOAD for the request. With Microsoft Internet Explorer 5 and later, if  lpszVerb is set to \"HEAD\", the Content-Length header is ignored on responses from HTTP/1.1 servers. On Windows 7, Windows Server 2008 R2, and later, the lpszVersion parameter is overridden by Internet Explorer settings.  The EnableHttp1_1 is a registry value under HKLM\\Software\\Microsoft\\InternetExplorer\\AdvacnedOptions\\HTTP\\GENABLE controlled by Internet Options set in Internet Explorer for the system.  The EnableHttp1_1 value defaults to 1. The HttpOpenRequest function upgrades any HTTP version less than 1.1 to HTTP version 1.1 if EnableHttp1_1 is set to 1. After the calling application has finished using the  HINTERNET handle returned by  HttpOpenRequest, it must be closed using the  InternetCloseHandle function. Note   When a request is sent in asynchronous mode (the dwFlags parameter of InternetOpen specifies INTERNET_FLAG_ASYNC), and the dwContext parameter is zero (INTERNET_NO_CALLBACK), the callback function set with InternetSetStatusCallback on the request handle will not be invoked, however, the call will still be performed in asynchronous mode. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "HttpOpenRequest",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hConnect",
        "description": "A  \t\t\t\t\t\thandle to an HTTP session returned by  InternetConnect."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszVerb",
        "description": "A pointer to a null-terminated string that contains the HTTP verb to use in the request. If this parameter is NULL, the function uses GET as the HTTP verb."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszObjectName",
        "description": "A pointer to a null-terminated string that contains the name of the target object of the specified HTTP verb. This is generally a file name, an executable module, or a search specifier."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszVersion",
        "description": "A pointer to a null-terminated string that contains the HTTP version to use in the request. Settings in Internet Explorer will override the value specified in this parameter.  If this parameter is NULL, the function uses an HTTP version of 1.1 or 1.0, depending on the value of the Internet Explorer settings.   ValueMeaning  HTTP/1.0   HTTP version 1.0   HTTP/1.1   HTTP version 1.1"
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszReferer",
        "description": "A pointer to a null-terminated string that specifies the URL of the document from which the URL in the request (lpszObjectName) was obtained. If this parameter is NULL, no referrer is specified."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR*",
        "name": "lplpszAcceptTypes",
        "description": "A pointer to a null-terminated array of strings that indicates media types accepted by the client. ..."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Internet options. This parameter can be any of the following values.  ValueMeaning   INTERNET_FLAG_CACHE_IF_NET_FAIL   Returns the resource from the cache if the network request for the resource fails due to an ERROR_INTERNET_CONNECTION_RESET (the connection with the server has been reset) or ERROR_INTERNET_CANNOT_CONNECT (the attempt to connect to the server failed).    INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    INTERNET_FLAG_IGNORE_CERT_CN_INVALID   Disables checking of SSL/PCT-based certificates that are returned from the server against the host name given in the request. WinINet functions use a simple check against certificates by comparing for matching host names and simple wildcarding rules.    INTERNET_FLAG_IGNORE_CERT_DATE_INVALID   Disables checking of SSL/PCT-based certificates for proper validity dates.    INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP   Disables detection of this special type of redirect. When this flag is used, WinINet functions transparently allow redirects from HTTPS to HTTP URLs.    INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS   Disables detection of this special type of redirect. When this flag is used, WinINet functions transparently allow redirects from HTTP to HTTPS URLs.    INTERNET_FLAG_KEEP_CONNECTION   Uses keep-alive semantics, if available, for the connection. This flag is required for Microsoft Network (MSN), NT LAN Manager (NTLM), and other types of authentication.    INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.    INTERNET_FLAG_NO_AUTH   Does not attempt authentication automatically.    INTERNET_FLAG_NO_AUTO_REDIRECT   Does not automatically handle redirection in  HttpSendRequest.    INTERNET_FLAG_NO_CACHE_WRITE   Does not add the returned entity to the cache.    INTERNET_FLAG_NO_COOKIES   Does not automatically add cookie headers to requests, and does not automatically add returned cookies to the cookie database.    INTERNET_FLAG_NO_UI   Disables the cookie dialog box.    INTERNET_FLAG_PRAGMA_NOCACHE   Forces the request to be resolved by the origin server, even if a cached copy exists on the proxy.    INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded. Windows XP and Windows Server 2003 R2 and earlier:  Gopher resources are also reloaded.    INTERNET_FLAG_SECURE   Uses secure transaction semantics. This translates to using Secure Sockets Layer/Private Communications Technology (SSL/PCT) and is only meaningful in HTTP requests."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "A pointer to a variable that contains the application-defined value that associates this operation with any application data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves header information associated with an HTTP request.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "You can retrieve the following types of data from  HttpQueryInfo: If your application requires that the data be returned as a data type other than a string, you must include the appropriate modifier with the attribute passed to  dwInfoLevel. The HttpQueryInfo function is available in Microsoft Internet Explorer 3.0 for ISO-8859-1 characters (HttpQueryInfoA function) and in Internet Explorer 4.0 or later for ISO-8859-1 characters (HttpQueryInfoA function)  and for ISO-8859-1  characters converted to UTF-16LE  characters.(the HttpQueryInfoW function). See Retrieving HTTP Headers for an example code calling the HttpQueryInfo function. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "HttpQueryInfo",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "A handle returned by  a call to the HttpOpenRequest or  InternetOpenUrl function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwInfoLevel",
        "description": "A combination of an attribute to be retrieved and flags that modify the request. For a list of possible attribute and modifier values, see  Query Info Flags."
      },
      {
        "in_out": "_Inout_",
        "type": "LPVOID",
        "name": "lpvBuffer",
        "description": "A pointer to a buffer to receive the requested information. This parameter must not be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "A pointer to a variable that contains, on entry, the size in bytes of the buffer pointed to by lpvBuffer.  When the function returns successfully, this variable contains the number of bytes of information written to the buffer. In the case of a string, the byte count does not include the string's terminating null character. When the function   \t\t\t\t\tfails with an extended error code of ERROR_INSUFFICIENT_BUFFER, the variable pointed to by lpdwBufferLength contains on exit the size, in bytes, of a buffer large enough to receive the requested information. The calling application can then allocate a buffer of this size or larger, and call the function again."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwIndex",
        "description": "A pointer to a zero-based header index used to enumerate multiple headers with the same name. When calling the function, this parameter is the index of the specified header to return. When the function returns, this parameter is the index of the next header. If the next index cannot be found, ERROR_HTTP_HEADER_NOT_FOUND is returned."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sends the specified request to the HTTP server, allowing callers to send extra data beyond what is normally passed to HttpSendRequestEx.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "HttpSendRequest sends the specified request to the HTTP server and allows the client to specify additional headers to send along with the request. The function also lets the client specify optional data to send to the HTTP server immediately following the request headers. This feature is generally used for \"write\" operations such as PUT and POST. After the request is sent, the status code and response headers from the HTTP server are read. These headers are maintained internally and are available to client applications through the  HttpQueryInfo function. An application can use the same HTTP request handle in multiple calls to  HttpSendRequest, but the application must read all data returned from the previous call before calling the function again. In offline mode,  HttpSendRequest returns ERROR_FILE_NOT_FOUND if the resource is not found in the Internet cache. There two versions of  HttpSendRequest \t\t\t\t \u00e2\u0080\u0094HttpSendRequestA (used with ANSI builds) and HttpSendRequestW (used with Unicode builds).  If  dwHeadersLength is -1L and  lpszHeaders is not NULL, the following will happen:  If HttpSendRequestA is called, the function assumes that  lpszHeaders is zero-terminated (ASCIIZ), and the length is calculated.  If HttpSendRequestW is called, the function fails with ERROR_INVALID_PARAMETER. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "HttpSendRequest",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "A handle returned by  a call to the HttpOpenRequest function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszHeaders",
        "description": "A pointer to a null-terminated string  that contains the additional headers to be appended to the request. This parameter can be NULL if there are no additional headers to be appended."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeadersLength",
        "description": "The size of the additional headers, in TCHARs. If this parameter is -1L and  lpszHeaders is not NULL, the function assumes that  lpszHeaders is zero-terminated (ASCIIZ), and the length is calculated. See Remarks for specifics."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpOptional",
        "description": "A pointer to a buffer containing any optional data to be sent immediately after the request headers. This parameter is generally used for POST and PUT operations. The optional data can be the resource or information being posted to the server. This parameter can be NULL if there is no optional data to send."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOptionalLength",
        "description": "The size of the optional data, in bytes. This parameter can be zero if there is no optional data to send."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sends the specified request to the HTTP server.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "HttpSendRequestEx performs  both the send and the receive for the response.  This does not allow the application to send any extra data beyond the single buffer that was passed to HttpSendRequestEx. Callers that need to send extra data beyond what is normally passed to HttpSendRequestEx can do so by calling HttpSendRequest instead.   After the call to HttpSendRequestEx, send the remaining data by calling InternetWriteFile.  Finally, follow up with a call to HttpEndRequest. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "HttpSendRequestEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "A  \t\t\t\t\t\thandle returned by  a call to the HttpOpenRequest function."
      },
      {
        "in_out": "_In_",
        "type": "LPINTERNET_BUFFERS",
        "name": "lpBuffersIn",
        "description": "Optional. A pointer to an  INTERNET_BUFFERS structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_BUFFERS",
        "name": "lpBuffersOut",
        "description": "Reserved. Must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved. Must be zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Application-defined context value, if a status callback function has been registered."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Attempts to make a connection to the Internet.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns ERROR_SUCCESS if successful, or a system error code otherwise. ",
    "remarks": "This function allows an application to first attempt to connect before issuing any requests. A client program can use this to evoke the dial-up dialog box. If the attempt fails, the application should enter offline mode. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetAttemptConnect",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Causes the modem to automatically dial the default Internet connection.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. Applications can call GetLastError to retrieve the error code. ",
    "remarks": "InternetAutodial does not support double-dial connections, SmartCard authentication, or connections that require registry-based certification. InternetAutodial does not attempt to dial if there is an existing dial-up connection on the system. Also, if there is an existing LAN connection, and InternetAutodial is not configured to force dial (set the INTERNET_AUTODIAL_FORCE_ONLINE in the dwFlags parameter), InternetAutodial does not attempt to dial the connection and returns TRUE. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetAutodial",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls this operation. This parameter can be one  of the following values.  ValueMeaning  INTERNET_AUTODIAL_FAILIFSECURITYCHECK 0x04   Causes  InternetAutodial to fail if file and printer sharing is disabled for Windows 95 or later. Windows Server 2008 and Windows Vista:  This flag is  obsolete.   INTERNET_AUTODIAL_FORCE_ONLINE  0x01   Forces an online Internet connection.   INTERNET_AUTODIAL_FORCE_UNATTENDED  0x02   Forces an unattended Internet dial-up.   INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT  0x08   Causes InternetAutodial to dial the modem connection even when a network connection to the Internet is present."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Disconnects an automatic dial-up connection.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. Applications can call GetLastError to retrieve the error code. ",
    "remarks": "InternetAutoDialHangup returns TRUE if autodial is not enabled, or if autodial is enabled but does not have an entry configured on the computer. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetAutodialHangup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Canonicalizes a URL, which includes converting unsafe characters and spaces into escape sequences.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  the GetLastError function. Possible errors include the following.  ",
    "remarks": "In Internet Explorer 4.0 and later,  InternetCanonicalizeUrl always functions as if the ICU_BROWSER_MODE flag is set. Client applications that must canonicalize the entire URL should use either  CoInternetParseUrl (with the action PARSE_CANONICALIZE and the flag URL_ESCAPE_UNSAFE) or  UrlCanonicalize. InternetCanonicalizeUrl always encodes by default, even if the ICU_DECODE flag has been specified. To decode without reencoding, use ICU_DECODE | ICU_NO_ENCODE. If the ICU_DECODE flag is used without ICU_NO_ENCODE, the URL is decoded before being parsed; unsafe characters are then  re-encoded after parsing. This function  handles arbitrary protocol schemes, but to do so it must make inferences from the unsafe character set. Applications that call  InternetCanonicalizeUrl when using  Internet Explorer 3.0 (or when setting the ICU_ENCODE_PERCENT flag for Internet Explorer 5 and later) should track the usage of this function on a particular URL. If unsafe characters in a URL have been converted to escape sequences, using  InternetCanonicalizeUrl again on the URL (with no flags)  causes the escape sequences to be converted to another escape sequence. For example, a blank space in a URL would be converted to the escape sequence %20. Calling  InternetCanonicalizeUrl again on the URL would cause the escape sequence %20 to be converted to the escape sequence %2520, because the % sign is an unsafe character that is reserved for escape sequences and is replaced by the function with the escape sequence %25. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCanonicalizeUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "A pointer to the string that contains the URL to canonicalize."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszBuffer",
        "description": "A pointer to the buffer that receives the resulting canonicalized URL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "A pointer to a variable that contains the size, in characters,  of the  lpszBuffer buffer. If the function succeeds, this parameter receives the number of characters actually copied to the  lpszBuffer buffer, which does not include the terminating null character. If the function fails, this parameter receives the required size of the  buffer, in characters, which includes the terminating null character."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls canonicalization. If no flags are specified, the function converts all unsafe characters and meta sequences (such as \\.,\\ .., and \\...) to escape sequences.  This parameter can be one of the following values.  ValueMeaning   ICU_BROWSER_MODE   Does not encode or decode characters after \"#\" or \"?\", and does not remove trailing white space after \"?\". If this value is not specified, the entire URL is encoded and trailing white space is removed.    ICU_DECODE   Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.    ICU_ENCODE_PERCENT   Encodes any percent signs encountered. By default, percent signs are not encoded. This value is available in Microsoft Internet Explorer 5 and later.    ICU_ENCODE_SPACES_ONLY   Encodes spaces only.    ICU_NO_ENCODE   Does not convert unsafe characters to escape sequences.    ICU_NO_META   Does not remove meta sequences (such as \".\" and \"..\") from the URL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Allows an application to check if a connection to the Internet can be established.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if a connection is made successfully, or FALSE otherwise. Use  GetLastError to retrieve the error code. ERROR_NOT_CONNECTED is returned by  GetLastError if a connection cannot be made or if the sockets database is unconditionally offline. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCheckConnection",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "Pointer to a null-terminated string that specifies the URL to use to check the connection. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Options. FLAG_ICC_FORCE_CONNECTION is the only flag that is currently available. If this flag is set, it forces a connection. A sockets connection is attempted in the following order:  If  lpszUrl is non-NULL, the host value is extracted from it and used to ping that specific host. If  lpszUrl is NULL and there is an entry in the internal server database for the nearest server, the host value is extracted from the entry and used to ping that server."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes a single Internet handle.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the handle is successfully closed, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "The function terminates any pending operations on the handle and discards any outstanding data. It is safe to call InternetCloseHandle as long as no API calls are being made or will be made using the handle.  Once an API has returned ERROR_IO_PENDING, it is safe to call InternetCloseHandle to cancel that I/O, as long as no subsequent API calls will be issued with the handle. It is safe to call InternetCloseHandle in a callback for the handle being closed. If there is a status callback registered for the handle being closed, and the handle was created with a non-NULL context value, an INTERNET_STATUS_HANDLE_CLOSING callback will be made. This indication will be the last callback made from a handle and indicates that the handle is being destroyed. If asynchronous requests are pending for the handle or any of its child handles, the handle cannot be closed immediately, but it will be invalidated. Any new requests attempted using the handle will return with an  ERROR_INVALID_HANDLE notification. The asynchronous requests will complete with INTERNET_STATUS_REQUEST_COMPLETE. Applications must be prepared to receive any INTERNET_STATUS_REQUEST_COMPLETE indications on the handle before the final INTERNET_STATUS_HANDLE_CLOSING indication is made, which indicates that the handle is completely closed. An application can call  GetLastError to determine if requests are pending. If  GetLastError returns ERROR_IO_PENDING, there were outstanding requests when the handle was closed. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCloseHandle",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "Handle to be closed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Combines a base and relative URL into a single URL. The resultant URL is canonicalized (see  InternetCanonicalizeUrl).",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible errors include the following.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCombineUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszBaseUrl",
        "description": "Pointer to a null-terminated string  that contains the base URL."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszRelativeUrl",
        "description": "Pointer to a null-terminated string  that contains the relative URL."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszBuffer",
        "description": "Pointer to a buffer that receives the combined URL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "Pointer to a variable that contains the size of the  lpszBuffer buffer, in characters. If the function succeeds, this parameter receives the size of the combined URL, in characters, not including the null-terminating character. If the function fails, this parameter receives the size of the required buffer, in characters (including the null-terminating character)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the operation of the function. This parameter can be one of the following values.  ValueMeaning   ICU_BROWSER_MODE   Does not encode or decode characters after \"#\" or \"?\", and does not remove trailing white space after \"?\". If this value is not specified, the entire URL is encoded and trailing white space is removed.    ICU_DECODE   Converts all %XX sequences to characters, including escape sequences, before the URL is parsed.    ICU_ENCODE_PERCENT   Encodes any percent signs encountered. By default, percent signs are not encoded. This value is available in Microsoft Internet Explorer 5 and later.    ICU_ENCODE_SPACES_ONLY   Encodes spaces only.    ICU_NO_ENCODE   Does not convert unsafe characters to escape sequences.    ICU_NO_META   Does not remove meta sequences (such as \".\" and \"..\") from the URL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Checks for changes between secure and nonsecure URLs. Always inform the user when a change occurs in security between two URLs. Typically, an application should allow the user to acknowledge the change through interaction with a dialog box.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns one of the following values.  ",
    "remarks": "Always inform the user when a change in security level occurs, or you risk subjecting the user to  involuntary information disclosure. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetConfirmZoneCrossing",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window for any required dialog box."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "szUrlPrev",
        "description": "Pointer to a null-terminated string that specifies the URL that was viewed before the current request was made."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "szUrlNew",
        "description": "Pointer to a null-terminated string that specifies the new URL that the user has requested to view."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bPost",
        "description": "Not implemented."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Opens an File Transfer Protocol (FTP) or HTTP session for a given site.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle to the session if the connection is successful, or NULL otherwise. To retrieve extended error information, call  GetLastError. An application can also use  InternetGetLastResponseInfo to determine why access to the service was denied. ",
    "remarks": "The following table describes the behavior for the four possible settings of  lpszUsername and  lpszPassword.  For FTP sites,  InternetConnect actually establishes a connection with the server; for others, the actual connection is not established until the application requests a specific transaction. For maximum efficiency, applications using the HTTP protocols should try to minimize calls to  InternetConnect and avoid calling this function for every transaction requested by the user. One way to accomplish this is to keep a small cache of handles returned from  InternetConnect; when the user makes a request to a previously accessed server, that session handle is still available. After the calling application has finished using the  HINTERNET handle returned by  InternetConnect, it must be closed using the  InternetCloseHandle function.  Note  When a request is sent asynchronous mode (the dwFlags parameter of InternetOpen specifies INTERNET_FLAG_ASYNC), and the dwContext parameter is zero (INTERNET_NO_CALLBACK), the callback function set with InternetSetStatusCallback on the connection handle will not be called, however, the call will still be performed in asynchronous mode.  Examples of InternetConnect usage can be found in the following topics. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "InternetConnect",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "Handle returned by a previous call to  InternetOpen."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszServerName",
        "description": "Pointer to a null-terminated string that specifies the host name of an Internet server. Alternately, the string can contain the IP number of the site, in ASCII dotted-decimal format (for example, 11.0.1.45)."
      },
      {
        "in_out": "_In_",
        "type": "INTERNET_PORT",
        "name": "nServerPort",
        "description": "Transmission Control Protocol/Internet Protocol (TCP/IP) port on the server. These flags set only the port that is used. The service is set by the value of  dwService. This parameter can be one of the following values.  ValueMeaning   INTERNET_DEFAULT_FTP_PORT   Uses the default port for FTP servers (port 21).    INTERNET_DEFAULT_GOPHER_PORT   Uses the default port for Gopher servers (port 70).Note  Windows XP and Windows Server 2003 R2 and earlier only.      INTERNET_DEFAULT_HTTP_PORT   Uses the default port for HTTP servers (port 80).    INTERNET_DEFAULT_HTTPS_PORT   Uses the default port for Secure Hypertext Transfer Protocol (HTTPS) servers (port 443).    INTERNET_DEFAULT_SOCKS_PORT   Uses the default port for SOCKS firewall servers (port 1080).    INTERNET_INVALID_PORT_NUMBER   Uses the default port for the service specified by  dwService."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUsername",
        "description": "Pointer to a null-terminated string that specifies the name of the user to log on. If this parameter is NULL, the function uses an appropriate default. For the FTP protocol, the default is \"anonymous\"."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszPassword",
        "description": "Pointer to a null-terminated string that contains the password to use to log on. If both  lpszPassword and  lpszUsername are NULL, the function uses the default \"anonymous\" password. In the case of FTP, the default password is the user's email name. If  lpszPassword is NULL, but  lpszUsername is not NULL, the function uses a blank password."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwService",
        "description": "Type of service to access. This parameter can be one of the following values.  ValueMeaning   INTERNET_SERVICE_FTP   FTP service.    INTERNET_SERVICE_GOPHER   Gopher service.Note  Windows XP and Windows Server 2003 R2 and earlier only.      INTERNET_SERVICE_HTTP   HTTP service."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Options specific to the service used. If   dwService is INTERNET_SERVICE_FTP,  INTERNET_FLAG_PASSIVE causes the application to use passive FTP semantics."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "Pointer to a variable that contains an application-defined value that is used to identify the application context for the returned handle in callbacks."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Cracks a URL into its component parts.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "The required components are indicated by members of the  URL_COMPONENTS structure. Each component has a pointer to the value and has a member that stores the length of the stored value. If both the value and the length for a component are equal to zero, that component is not returned. Windows Vista and later.:  If the pointer to the value of the component is NULL and the value of its corresponding length member is nonzero, the address of the first character of the corresponding component in the  lpszUrl string is stored in the pointer, and the length of the component is stored in the length member. If the pointer contains the address of the user-supplied buffer, the length member must contain the size of the buffer.  InternetCrackUrl copies the component into the buffer, and the length member is set to the length of the copied component, minus 1 for the trailing string terminator. For  InternetCrackUrl to work properly, the size of the  URL_COMPONENTS structure, in bytes, must be stored in the  dwStructSize member. Note  Do not use InternetCrackUrl on \"file://\" URLs that contain spaces, because  the value returned in the dwUrlPathLength member of the URL_COMPONENTS structure pointed to by lpUrlComponents is too large. This is only the case, however, with \"file://\" URLs that contain space characters. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCrackUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "Pointer to a string that contains the canonical URL to be cracked."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwUrlLength",
        "description": "Size of the  lpszUrl string, in TCHARs, or zero if  lpszUrl is an ASCIIZ string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the operation. This parameter can be one of the following values.  ValueMeaning  ICU_DECODE   Converts encoded characters back to their normal form. This can be used only if the user provides buffers in the  URL_COMPONENTS structure to copy the components into.   ICU_ESCAPE   Converts all escape sequences (%xx) to their corresponding characters. This can be used only if the user provides buffers in the  URL_COMPONENTS structure to copy the components into."
      },
      {
        "in_out": "_Inout_",
        "type": "LPURL_COMPONENTS",
        "name": "lpUrlComponents",
        "description": "Pointer to a  URL_COMPONENTS structure that receives the URL components."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a URL from its component parts.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "When specifying scheme in the URL_COMPONENTS structure passed to lpUrlComponents, if lpszScheme is not NULL it will be used for the scheme.  If lpszScheme is NULL, the scheme can be specified using the INTERNET_SCHEME enumeration by setting nScheme to the required INTERNET_SCHEME or INTERNET_SCHEME_DEFAULT. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetCreateUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPURL_COMPONENTS",
        "name": "lpUrlComponents",
        "description": "Pointer to a  URL_COMPONENTS structure that contains the components from which to create the URL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Controls the operation of this function. ..."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszUrl",
        "description": "Pointer to a buffer that receives the URL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwUrlLength",
        "description": "Pointer to a variable that specifies the size of the  URLlpszUrl buffer, in TCHARs. When the function returns, this parameter receives the size of the URL string, excluding the NULL terminator. If  GetLastError returns ERROR_INSUFFICIENT_BUFFER, this parameter receives the number of bytes required to hold the created URL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the script engine used to process the autoproxy script. This function can only be called by dynamically linking to \"JSProxy.dll\". For autoproxy support, use Microsoft Windows HTTP Services (WinHTTP) version 5.1 instead. For more information, see WinHTTP AutoProxy Support.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "To call InternetDeInitializeAutoProxyDll, you must dynamically link to it using the defined function-pointer type pfnInternetDeInitializeAutoProxyDll. The code snippet below shows how to declare an instance of this function-pointer type and then initialize and call it. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetDeInitializeAutoProxyDll",
    "is_callback": 0,
    "dll": "JSProxy.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "lpszMime",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Initiates a connection to the Internet using a modem.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns ERROR_SUCCESS if successful, or an error value otherwise. The error code can be one of the following values.  ",
    "remarks": "InternetDial does not support double-dial connections, SmartCard authentication, or connections that require registry-based certification. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetDial",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pszEntryName",
        "description": "Pointer to a null-terminated string that specifies the name of the dial-up connection to be used. If this parameter contains the empty string (\"\"), the user chooses the connection. If this parameter is NULL, the function connects to the autodial connection."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Options. This parameter can be one of the following values.  ValueMeaning   INTERNET_AUTODIAL_FORCE_ONLINE   Forces an online connection.    INTERNET_AUTODIAL_FORCE_UNATTENDED   Forces an unattended Internet dial-up. If user intervention is required, the function will fail.    INTERNET_DIAL_FORCE_PROMPT   Ignores the \"dial automatically\" setting and forces the dialing user interface to be displayed.    INTERNET_DIAL_UNATTENDED   Connects to the Internet through a modem, without displaying a user interface, if possible. Otherwise, the function will wait for user input.    INTERNET_DIAL_SHOW_OFFLINE   Shows the Work Offline button instead of the Cancel button in the dialing user interface."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD_PTR*",
        "name": "lpdwConnection",
        "description": "Pointer to a variable that specifies the connection number. This number is a unique indentifier for the connection that can be used in other functions, such as InternetHangUp."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Displays a dialog box for the error that is passed to  InternetErrorDlg, if an appropriate dialog box exists. If the  FLAGS_ERROR_UI_FILTER_FOR_ERRORS flag is used, the function also checks the headers for any hidden errors and displays a dialog box if needed.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns one of the following values, or an error value otherwise.  ",
    "remarks": "Always inform the user  when any of the following events occur: Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetErrorDlg",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Handle to the parent window for any needed dialog box. If no dialog box is needed and FLAGS_ERROR_UI_FLAGS_NO_UI is passed to dwFlags, then this parameter can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "Handle to the Internet connection used in the call to  HttpSendRequest."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwError",
        "description": "Error value for which to display a dialog box. This parameter can be one of the following values.  ValueMeaning   ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION   Allows the user to confirm the redirect.    ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT   Displays a dialog indicating that the auto proxy script is invalid.    ERROR_INTERNET_CHG_POST_IS_NON_SECURE   Displays a dialog asking the user whether to post the given data on a non-secure channel.    ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED   The server is requesting a client certificate. The return value for this error is always  ERROR_SUCCESS, regardless of whether or not the user has selected a certificate. If the user has not selected a certificate then anonymous client authentication will be attempted on the subsequent request.    ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR   Notifies the user of the zone crossing to a secure site.    ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR   Notifies the user of the zone crossing from a secure site.    ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR   Notifies the user that the data being posted is now being redirected to a non-secure site.    ERROR_INTERNET_INCORRECT_PASSWORD   Displays a dialog box requesting the user's name and password.    ERROR_INTERNET_INVALID_CA   Indicates that the SSL certificate Common Name (host name field) is incorrect. Displays an Invalid SSL Common Name dialog box and lets the user view the incorrect certificate.     ERROR_INTERNET_MIXED_SECURITY   Displays a warning to the user concerning mixed secure and non-secure content.      ERROR_INTERNET_POST_IS_NON_SECURE   Displays a dialog asking the user whether to post the given data on a non-secure channel.    ERROR_INTERNET_SEC_CERT_CN_INVALID   Indicates that the SSL certificate Common Name (host name field) is incorrect. Displays an Invalid SSL Common Name dialog box and lets the user view the incorrect certificate. Also allows the user to select a certificate in response to a server request.    ERROR_INTERNET_SEC_CERT_ERRORS   Displays a warning to the user showing the issues with the server certificate.    ERROR_INTERNET_SEC_CERT_DATE_INVALID   Tells the user that the SSL certificate has expired.    ERROR_INTERNET_SEC_CERT_REV_FAILED   Displays a warning to the user showing that the server certificate's revocation check failed.      ERROR_INTERNET_SEC_CERT_REVOKED   Displays a dialog indicating that the server certificate is revoked.    ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT   Displays a dialog indicating that the auto proxy script could not be downloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Actions. This parameter can be one or more of the following values.  ValueMeaning   FLAGS_ERROR_UI_FILTER_FOR_ERRORS   Scans the returned headers for errors. Call InternetErrorDlg with this flag set following a call to  HttpSendRequest so as to detect hidden errors. Authentication errors, for example, are normally hidden because the call to  HttpSendRequest completes successfully, but by scanning the status codes,  InternetErrorDlg can determine that the proxy or server requires authentication.    FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS   If the function succeeds, stores the results of the dialog box in the Internet handle.    FLAGS_ERROR_UI_FLAGS_GENERATE_DATA   Queries the Internet handle for needed information. The function constructs the appropriate data structure for the error. (For example, for Cert CN failures, the function grabs the certificate.)    FLAGS_ERROR_UI_SERIALIZE_DIALOGS   Serializes authentication dialog boxes for concurrent requests on a password cache entry. The  lppvData parameter should contain the address of a pointer to an  INTERNET_AUTH_NOTIFY_DATA structure, and the client should implement a thread-safe, non-blocking callback function.    FLAGS_ERROR_UI_FLAGS_NO_UI   Allows the caller to pass NULL to the hWnd parameter without error.  To be used in circumstances in which no user interface is required."
      },
      {
        "in_out": "_Inout_",
        "type": "LPVOID*",
        "name": "lppvData",
        "description": "Pointer  to the address of a data structure. The structure can be different for each error that needs to be handled."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Continues a file search started as a result of a previous call to  FtpFindFirstFile.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. If the function finds no matching files,  GetLastError returns ERROR_NO_MORE_FILES. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetFindNextFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFind",
        "description": "Handle returned from either  FtpFindFirstFile or   InternetOpenUrl (directories only). Windows XP and Windows Server 2003 R2 and earlier:  Also a handle returned from GopherFindFirstFile."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpvFindData",
        "description": "Pointer to the buffer that receives information about the  file or directory. The format of the information placed in the buffer depends on the protocol in use. The FTP protocol returns a  WIN32_FIND_DATA structure. Windows XP and Windows Server 2003 R2 and earlier:  The Gopher protocol returns a  GOPHER_FIND_DATA structure."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the connected state of the local system.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if there is an active modem or a LAN Internet connection, or FALSE if there is no Internet connection, or if all possible Internet connections are not currently active. For more information, see the Remarks section. When InternetGetConnectedState returns FALSE, the application can call GetLastError  to retrieve the error code. ",
    "remarks": "A return value of TRUE from InternetGetConnectedState indicates that at least one connection to the Internet is available.  It does not guarantee that a connection to a specific host can be established. Applications should always check for errors returned from API calls that connect to a server. InternetCheckConnection can be called to determine if a connection to a specific destination can be established. A return value of TRUE indicates that either the modem connection is active, or a LAN connection is active and a proxy is properly configured for the LAN. A return value of FALSE indicates that neither the modem nor the LAN is connected. If FALSE is returned, the INTERNET_CONNECTION_CONFIGURED flag may be set to indicate that autodial is configured to \"always dial\" but is not currently active. If autodial is not configured, the function returns FALSE. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetConnectedState",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwFlags",
        "description": "Pointer to a variable that receives  the connection description. This parameter may return a valid flag even when the function returns FALSE. This parameter can be one or more of the following values.  ValueMeaning  INTERNET_CONNECTION_CONFIGURED 0x40   Local system has a valid connection to the Internet, but it might or might not be currently connected.   INTERNET_CONNECTION_LAN  0x02   Local system uses a local area network to connect to the Internet.   INTERNET_CONNECTION_MODEM  0x01   Local system uses a modem to connect to the Internet.   INTERNET_CONNECTION_MODEM_BUSY  0x08   No longer used.   INTERNET_CONNECTION_OFFLINE  0x20   Local system is in offline mode.   INTERNET_CONNECTION_PROXY  0x04   Local system uses a proxy server to connect to the Internet.   INTERNET_RAS_INSTALLED  0x10   Local system has RAS installed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the connected state of the specified Internet connection.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if there is an Internet connection, or FALSE if there is no Internet connection, or if all possible Internet connections are not currently active. For more information, see the Remarks section. When InternetGetConnectedState returns FALSE, the application can call GetLastError to retrieve the error code. ",
    "remarks": "A return value of TRUE from InternetGetConnectedState indicates that at least one connection to the Internet is available.  It does not guarantee that a connection to a specific host can be established.    Applications should always check for errors returned from API calls that connect to a server. InternetCheckConnection can be called to determine if a connection to a specific destination can be established. A return value of TRUE indicates that either the modem connection is active, or a LAN connection is active and a proxy is properly configured for the LAN. A return value of FALSE indicates that neither the modem nor the LAN is connected. If FALSE is returned, the INTERNET_CONNECTION_CONFIGURED flag may be set to indicate that autodial is configured to \"always dial\" but is not currently active. If autodial is not configured, the function returns FALSE. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetConnectedStateEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwFlags",
        "description": "Pointer to a variable that receives the connection description. This parameter may return a valid flag even when the function returns FALSE. This parameter can be a combination of the following values.  ValueMeaning  INTERNET_CONNECTION_CONFIGURED 0x40   Local system has a valid connection to the Internet, but it might or might not be currently connected.   INTERNET_CONNECTION_LAN  0x02   Local system uses a local area network to connect to the Internet.   INTERNET_CONNECTION_MODEM  0x01   Local system uses a modem to connect to the Internet.   INTERNET_CONNECTION_MODEM_BUSY  0x08   No longer used.   INTERNET_CONNECTION_OFFLINE  0x20   Local system is in offline mode.   INTERNET_CONNECTION_PROXY  0x04   Local system uses a proxy server to connect to the Internet."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszConnectionName",
        "description": "Pointer to a string value that receives the connection name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNameLen",
        "description": "Size of the  lpszConnectionName string, in TCHARs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the cookie for the specified URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error data, call  GetLastError. The following error values apply to  InternetGetCookie.  ",
    "remarks": "InternetGetCookie does not require a call to  InternetOpen.  InternetGetCookie checks in the windows\\cookies directory for persistent cookies that have an expiration date set sometime in the future.  InternetGetCookie also searches memory for any session cookies, that is, cookies that do not have an expiration date that were created in the same process by  InternetSetCookie, because these cookies are not written to any files. Rules for creating cookie files are internal to the system and can change in the future. As noted in HTTP Cookies, InternetGetCookie does not return cookies that the server marked as non-scriptable with the \"HttpOnly\" attribute in the Set-Cookie header. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetCookie",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "A pointer to a null-terminated string that specifies the URL for which cookies are to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieName",
        "description": "Not implemented."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszCookieData",
        "description": "A pointer to a buffer that receives the cookie data. This parameter can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwSize",
        "description": "A pointer to a variable that specifies the size of the  lpszCookieData parameter buffer, in TCHARs. If the function succeeds, the buffer receives the amount of data copied to the  lpszCookieData buffer. If  lpszCookieData is NULL, this parameter receives a value that specifies the size of the buffer necessary to copy all the cookie data, expressed as a byte count."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The InternetGetCookieEx function retrieves data stored in cookies associated with a specified URL. Unlike InternetGetCookie, InternetGetCookieEx can be used to  restrict data retrieved to a single cookie name or, by policy, associated with untrusted sites or third-party cookies.",
    "library": "Wininet.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get a specific error value, call  GetLastError. If NULL is passed to lpszCookieData, the call will succeed and the function will not set ERROR_INSUFFICIENT_BUFFER. The following error codes may be set by this function.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetCookieEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszURL",
        "description": "A pointer to a null-terminated string that contains the URL with which the cookie to retrieve is associated. This parameter cannot be NULL or InternetGetCookieEx fails and returns an  ERROR_INVALID_PARAMETER error."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieName",
        "description": "A pointer to a null-terminated string that contains the name of the cookie to retrieve. This name is case-sensitive."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPTSTR",
        "name": "lpszCookieData",
        "description": "A pointer to a buffer to receive the cookie data."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwSize",
        "description": "A pointer to a DWORD variable.  On entry, the variable must contain the size, in TCHARs, of the buffer pointed to by the pchCookieData parameter. On exit, if the function is successful, this variable contains the number of TCHARs of cookie data copied into the buffer. If NULL was passed as the lpszCookieData parameter, or if the function fails with an error of ERROR_INSUFFICIENT_BUFFER, the variable contains the size, in BYTEs, of buffer required to receive the cookie data. This parameter cannot be NULL or InternetGetCookieEx fails and returns an  ERROR_INVALID_PARAMETER error."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A flag that controls how the function retrieves cookie data. This parameter can be one of the following values.  ValueMeaning  INTERNET_COOKIE_HTTPONLY   Enables the retrieval of cookies that are marked as \"HTTPOnly\".     Do  not use this flag if you expose a scriptable interface, because this has security implications. It is imperative that you use this flag only if you can guarantee that you will never expose the cookie to third-party code by way of an extensibility mechanism you provide.  Version:  Requires Internet Explorer 8.0 or later.   INTERNET_COOKIE_THIRD_PARTY   Retrieves only third-party cookies if policy explicitly allows all cookies for the specified URL to be retrieved.   INTERNET_FLAG_RESTRICTED_ZONE   Retrieves only cookies that would be allowed if the specified URL were untrusted; that is, if it belonged to the URLZONE_UNTRUSTED zone."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "Reserved for future use. Set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the last error description or server response on the thread calling this function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if error text was successfully written to the buffer, or FALSE otherwise. To get extended error information, call  GetLastError. If the buffer is too small to hold all the error text,  GetLastError returns ERROR_INSUFFICIENT_BUFFER, and the  lpdwBufferLength parameter contains the minimum buffer size required to return all the error text. ",
    "remarks": "The FTP protocols can return additional text information along with most errors. This extended error information can be retrieved by using the  InternetGetLastResponseInfo function whenever  GetLastError returns  ERROR_INTERNET_EXTENDED_ERROR (occurring after an unsuccessful function call). The buffer pointed to by  lpszBuffer must be large enough to hold both the error string and a zero terminator at the end of the string. However, note that the value returned in  lpdwBufferLength does not include the terminating zero. InternetGetLastResponseInfo can be called multiple times until another function is called on this thread. When another function is called, the internal buffer that is storing the last response information is cleared. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetLastResponseInfo",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwError",
        "description": "Pointer to a variable that receives an error message pertaining to the operation that failed."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszBuffer",
        "description": "Pointer to a buffer that receives the error text."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "Pointer to a variable that contains the size of the  lpszBuffer buffer, in TCHARs. When the function returns, this parameter contains the size of the string written to the buffer, not including the terminating zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Retrieves proxy data for accessing specified resources. This function can only be called by dynamically linking to \"JSProxy.dll\". For better autoproxy support, use HTTP Services (WinHTTP) version 5.1 instead. For more information, see WinHTTP AutoProxy Support.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error data, call  GetLastError. ",
    "remarks": "To call InternetGetProxyInfo, you must dynamically link to it using the defined function-pointer type pfnInternetGetProxyInfo. The code snippet below shows how to declare an instance of this function-pointer type and then initialize and call it. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetProxyInfo",
    "is_callback": 0,
    "dll": "JSProxy.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszUrl",
        "description": "A pointer to a null-terminated string that specifies the URL of the target HTTP resource."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwUrlLength",
        "description": "The size, in bytes, of  the URL pointed to by lpszUrl."
      },
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "lpszUrlHostName",
        "description": "A pointer to a null-terminated string  that specifies the host name of the target URL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwUrlHostNameLength",
        "description": "The size, in bytes, of  the host name pointed to by lpszUrlHostName."
      },
      {
        "in_out": "_Out_",
        "type": "LPSTR*",
        "name": "lplpszProxyHostName",
        "description": "A pointer to the address of a buffer that receives the URL of the proxy to use in an HTTP request for the specified resource. The application is responsible for freeing this string."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwProxyHostNameLength",
        "description": "A pointer to a variable that receives the size, in bytes, of  the string returned in the lplpszProxyHostName buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Prompts the user for permission to initiate connection to a URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. Applications can call GetLastError to retrieve the error code. If the functions fails, it can  return the following error code:  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGoOnline",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "lpszURL",
        "description": "Pointer to a null-terminated string that specifies the URL of the website for the connection."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be zero or the following flag.  ValueMeaning  INTERNET_GOONLINE_REFRESH   This flag is not used."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Instructs the modem to disconnect from the Internet.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns ERROR_SUCCESS if successful, or an error value otherwise. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetHangUp",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwConnection",
        "description": "Connection number of  the connection to be disconnected."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "There are two WinINet functions named InternetInitializeAutoProxyDll. The first, which merely refreshes the internal state of proxy configuration information from the registry, has a single parameter as documented directly below.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. In addition to the function with the syntax above, there is another WinINet function of the same name in \"JSProxy.dll\" that initializes WinINet autoproxy functionality using an autoconfiguration script loaded either from a temporary file or from a buffer, and optionally registering autoproxy helper functions. This second version of InternetInitializeAutoProxyDll has the following prototype:  The JSProxy.dll function can be called using an instance of the pfnInternetInitializeAutoProxyDll type that is initialized at runtime as shown in the code snippet below. ",
    "remarks": "Because the InternetInitializeAutoProxyDll function takes time to complete its operation, it should not be called from  a UI thread. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetInitializeAutoProxyDll",
    "is_callback": 0,
    "dll": "JSProxy.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Places a lock on the file that is being used.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "If the  HINTERNET handle passed to  hInternet was created using  INTERNET_FLAG_NO_CACHE_WRITE or  INTERNET_FLAG_DONT_CACHE, the function creates a temporary file with the extension .tmp, unless it is an HTTPS resource. If the handle was created using INTERNET_FLAG_NO_CACHE_WRITE or INTERNET_FLAG_DONT_CACHE and it is accessing an HTTPS resource,  InternetLockRequestFile fails. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetLockRequestFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "Handle returned by  the FtpOpenFile,  GopherOpenFile,  HttpOpenRequest, or  InternetOpenUrl function."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "lphLockReqHandle",
        "description": "Pointer to a handle that receives the lock request handle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Initializes an application's use of the WinINet functions.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle that the application passes to subsequent WinINet functions. If  InternetOpen fails, it returns NULL. To retrieve a specific error message, call  GetLastError. ",
    "remarks": "InternetOpen is the first WinINet function called by an application. It tells the Internet DLL to initialize internal data structures and prepare for future calls from the application. When the application finishes using the Internet functions, it should call  InternetCloseHandle to free the handle and any associated resources. The application can make any number of calls to  InternetOpen, though a single call is normally sufficient. The application might need to define separate behaviors for each  InternetOpen instance, such as different proxy servers configured for each. After the calling application has finished using the  HINTERNET handle returned by  InternetOpen, it must be closed using the  InternetCloseHandle function. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "InternetOpen",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszAgent",
        "description": "Pointer to a null-terminated string  that specifies the name of the application or entity calling the WinINet functions. This name is used as the user agent in the HTTP protocol."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAccessType",
        "description": "Type of access required. This parameter can be one of the following values.  ValueMeaning   INTERNET_OPEN_TYPE_DIRECT   Resolves all host names locally.    INTERNET_OPEN_TYPE_PRECONFIG   Retrieves the proxy or direct configuration from the registry.    INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY   Retrieves the proxy or direct configuration from the registry and prevents the use of a startup Microsoft JScript or Internet Setup (INS) file.    INTERNET_OPEN_TYPE_PROXY   Passes requests to the proxy unless a proxy bypass list is supplied and the name to be resolved bypasses the proxy. In this case, the function uses  INTERNET_OPEN_TYPE_DIRECT."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszProxyName",
        "description": "Pointer to a null-terminated string  that specifies the name of the proxy server(s) to use when proxy access is specified by setting  dwAccessType to  INTERNET_OPEN_TYPE_PROXY. Do not use an empty string, because  InternetOpen will use it as the proxy name. The WinINet functions recognize only CERN type proxies (HTTP only) and the TIS FTP gateway (FTP only). If Microsoft Internet Explorer is installed, these functions also support SOCKS proxies. FTP requests can be made through a CERN type proxy either by changing them to an HTTP request or by using  InternetOpenUrl. If  dwAccessType is not set to  INTERNET_OPEN_TYPE_PROXY, this parameter is ignored and should be NULL. For more information about listing proxy servers, see the  Listing Proxy Servers section of  Enabling Internet Functionality."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszProxyBypass",
        "description": "Pointer to a null-terminated string  that specifies an optional list of host names or IP addresses, or both, that should not be routed through the proxy when  dwAccessType is set to  INTERNET_OPEN_TYPE_PROXY. The list can contain wildcards. Do not use an empty string, because  InternetOpen will use it as the proxy bypass list. If this parameter specifies the \"<local>\" macro, the function bypasses the proxy for any host name that does not contain a period.  By default, WinINet will bypass the proxy for requests that use the host names \"localhost\", \"loopback\", \"127.0.0.1\", or \"[::1]\". This behavior exists because a remote proxy server typically will not resolve these addresses properly.Internet Explorer 9:  You can remove the local computer from the proxy bypass list using the \"<-loopback>\" macro. If  dwAccessType is not set to  INTERNET_OPEN_TYPE_PROXY, this parameter is ignored and should be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Options. This parameter can be a combination of the following values.  ValueMeaning   INTERNET_FLAG_ASYNC   Makes only asynchronous requests on handles descended from the handle returned from this function.    INTERNET_FLAG_FROM_CACHE   Does not make network requests. All entities are returned from the cache. If the requested item is not in the cache, a suitable error, such as ERROR_FILE_NOT_FOUND, is returned.    INTERNET_FLAG_OFFLINE   Identical to  INTERNET_FLAG_FROM_CACHE. Does not make network requests. All entities are returned from the cache. If the requested item is not in the cache, a suitable error, such as ERROR_FILE_NOT_FOUND, is returned."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Opens a resource specified by a complete FTP or HTTP URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a valid handle to the URL if the connection is successfully established, or NULL if the connection fails. To retrieve a specific error message, call  GetLastError. To determine why access to the service was denied, call  InternetGetLastResponseInfo. ",
    "remarks": "Call  InternetCanonicalizeUrl first if the URL being used contains a relative URL and a base URL separated by blank spaces. This is a general function that an application can use to retrieve data over any of the protocols that WinINet supports. This function is especially useful when the application does not need to access the particulars of a protocol, but only requires the data corresponding to a URL. The  InternetOpenUrl function parses the URL string, establishes a connection to the server, and prepares to download the data identified by the URL. The application can then use  InternetReadFile (for files) or  InternetFindNextFile (for directories) to retrieve the URL data. It is not necessary to call  InternetConnect before  InternetOpenUrl. Windows XP and Windows Server 2003 R2 and earlier:  InternetOpenUrl disables Gopher on ports less than 1024, except for port 70\u00e2\u0080\u0094the standard Gopher port\u00e2\u0080\u0094and port 105\u00e2\u0080\u0094typically used for Central Services Organization (CSO) name searches. After the calling application has finished using the  HINTERNET handle returned by  InternetOpenUrl, it must be closed using the  InternetCloseHandle function. Note  When working in asynchronous mode (the dwFlags parameter of InternetOpen specifies INTERNET_FLAG_ASYNC), and the dwContext parameter is zero (INTERNET_NO_CALLBACK), the callback function set with InternetSetStatusCallback on the session handle will not be invoked, however, the call will still be performed in asynchronous mode Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HINTERNET",
    "category": "Windows Internet (WinINet)",
    "name": "InternetOpenUrl",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "The handle to the current Internet session. The handle must have been returned by a previous call to  InternetOpen."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "A pointer to a null-terminated string variable that specifies the URL to begin reading. Only URLs beginning with ftp:, http:, or https: are supported."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszHeaders",
        "description": "A pointer to a null-terminated string  that specifies the headers to be sent to the HTTP server. For more information, see the description of the  lpszHeaders parameter in the  HttpSendRequest function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeadersLength",
        "description": "The size of the additional headers, in TCHARs. If this parameter is -1L and  lpszHeaders is not NULL,  lpszHeaders is assumed to be zero-terminated (ASCIIZ) and the length is calculated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following values.  ValueMeaning   INTERNET_FLAG_EXISTING_CONNECT   Attempts to use an existing InternetConnect object if one exists with the same attributes required to make the request. This is useful only with FTP operations, since FTP is the only protocol that typically performs multiple operations during the same session. The WinINet API caches a single connection handle for each HINTERNET handle generated by InternetOpen.  InternetOpenUrl   uses this flag for HTTP and FTP connections.    INTERNET_FLAG_HYPERLINK   Forces a reload if there was no Expires time and no LastModified time returned from the server when determining whether to reload the item from the network.    INTERNET_FLAG_IGNORE_CERT_CN_INVALID   Disables checking of SSL/PCT-based certificates that are returned from the server against the host name given in the request. WinINet functions use a simple check against certificates by comparing for matching host names and simple wildcarding rules.    INTERNET_FLAG_IGNORE_CERT_DATE_INVALID   Disables checking of SSL/PCT-based certificates for proper validity dates.    INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP   Disables detection of this special type of redirect. When this flag is used, WinINet transparently allows redirects from HTTPS to HTTP URLs.    INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS   Disables the detection of this special type of redirect. When this flag is used, WinINet transparently allows redirects from HTTP to HTTPS URLs.    INTERNET_FLAG_KEEP_CONNECTION   Uses keep-alive semantics, if available, for the connection. This flag is required for Microsoft Network (MSN), NTLM, and other types of authentication.    INTERNET_FLAG_NEED_FILE   Causes a temporary file to be created if the file cannot be cached.    INTERNET_FLAG_NO_AUTH   Does not attempt authentication automatically.    INTERNET_FLAG_NO_AUTO_REDIRECT   Does not automatically handle redirection in  HttpSendRequest.    INTERNET_FLAG_NO_CACHE_WRITE   Does not add the returned entity to the cache.    INTERNET_FLAG_NO_COOKIES   Does not automatically add cookie headers to requests, and does not automatically add returned cookies to the cookie database.    INTERNET_FLAG_NO_UI   Disables the cookie dialog box.    INTERNET_FLAG_PASSIVE   Uses passive FTP semantics.  InternetOpenUrl uses this flag for FTP files and directories.     INTERNET_FLAG_PRAGMA_NOCACHE   Forces the request to be resolved by the origin server, even if a cached copy exists on the proxy.    INTERNET_FLAG_RAW_DATA   Returns the data as a  WIN32_FIND_DATA structure when retrieving FTP directory information. If this flag is not specified or if the call was made through a CERN proxy,  InternetOpenUrl returns the HTML version of the directory.  Windows XP and Windows Server 2003 R2 and earlier:  Also returns data as a GOPHER_FIND_DATA structure when retrieving Gopher directory information.    INTERNET_FLAG_RELOAD   Forces a download of the requested file, object, or directory listing from the origin server, not from the cache.    INTERNET_FLAG_RESYNCHRONIZE   Reloads HTTP resources if the resource has been modified since the last time it was downloaded. All FTP resources are reloaded. Windows XP and Windows Server 2003 R2 and earlier:  Gopher resources are also reloaded.    INTERNET_FLAG_SECURE   Uses secure transaction semantics. This translates to using Secure Sockets Layer/Private Communications Technology (SSL/PCT) and is only meaningful in HTTP requests."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "A pointer to a variable that specifies the application-defined value that is passed, along with the returned handle, to any callback functions."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Queries the server to determine the amount of data available.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. If the function finds no matching files,  GetLastError returns ERROR_NO_MORE_FILES. ",
    "remarks": "This function returns the number of bytes of data that are available to be read immediately by a subsequent call to  InternetReadFile. If there is currently no data available and the end of the file has not been reached, the request waits until data becomes available. The amount of data remaining will not be recalculated until all available data indicated by the call to  InternetQueryDataAvailable is read. For  HINTERNET handles created by  HttpOpenRequest and sent by  HttpSendRequestEx, a call to  HttpEndRequest must be made on the handle before  InternetQueryDataAvailable can be used. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetQueryDataAvailable",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned by  the InternetOpenUrl,  FtpOpenFile,  GopherOpenFile, or  HttpOpenRequest function."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwNumberOfBytesAvailable",
        "description": "Pointer to a variable that receives the number of available bytes. May be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Queries an Internet option on the specified handle.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "GetLastError will return the ERROR_INVALID_PARAMETER if an option flag that is invalid for the specified handle type is passed to the  dwOption parameter. For more  information, see   Setting and Retrieving Internet Options. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetQueryOption",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "Handle on which to query information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOption",
        "description": "Internet option to be queried. This can be one of the  Option Flags values."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "Pointer to a buffer that receives the option setting. Strings returned by  InternetQueryOption are globally allocated, so the calling application must  free them when it  is finished using them."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "Pointer to a variable that contains the size of  lpBuffer, in bytes.  When  InternetQueryOption returns,  lpdwBufferLength specifies the size of the data placed into  lpBuffer. If  GetLastError returns ERROR_INSUFFICIENT_BUFFER, this parameter points to the number of bytes required to hold the requested information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Reads data from a handle opened by the  InternetOpenUrl,  FtpOpenFile,  or  HttpOpenRequest function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. An application can also use  InternetGetLastResponseInfo when necessary. ",
    "remarks": "InternetReadFile operates much like the base  ReadFile function, with a few exceptions. Typically,  InternetReadFile retrieves data from an  HINTERNET handle as a sequential stream of bytes. The amount of data to be read for each call to  InternetReadFile is specified by the  dwNumberOfBytesToRead parameter and the data is returned in the  lpBuffer parameter. A normal read retrieves the specified  dwNumberOfBytesToRead for each call to  InternetReadFile until the end of the file is reached. To ensure all data is retrieved, an application must continue to call the  InternetReadFile function until the function returns TRUE and the  lpdwNumberOfBytesRead parameter equals zero. This is especially important if the requested data is written to the cache, because otherwise the cache will not be properly updated and the file downloaded will not be committed to the cache. Note that caching happens automatically unless the original request to open the data stream set the INTERNET_FLAG_NO_CACHE_WRITE flag. When an application retrieves a handle using  InternetOpenUrl, WinINet attempts to make all data look like a file download, in an effort to make reading from the Internet easier for the application. For some types of information, such as FTP file directory listings, it converts the data to be returned by   InternetReadFile to an HTML stream. It does this on a line-by-line basis. For example, it can convert an FTP directory listing to a line of HTML and return this HTML to the application. WinINet attempts to write the HTML to the  lpBuffer buffer a line at a time. If the application's buffer is too small to fit at least one line of generated HTML, the error code  ERROR_INSUFFICIENT_BUFFER is returned as an indication to the application that it needs a larger buffer. Also, converted lines might not completely fill the buffer, so  InternetReadFile can return with less data in  lpBuffer than requested. Subsequent reads will retrieve all the converted HTML. The application must again check that all data is retrieved as described previously. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. When running asynchronously, if a call to InternetReadFile does not result in a completed transaction, it will return FALSE and a subsequent call to GetLastError will return ERROR_IO_PENDING. When the transaction is completed the InternetStatusCallback specified in a previous call to   InternetSetStatusCallback will be called with INTERNET_STATUS_REQUEST_COMPLETE. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetReadFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned from a previous call to  InternetOpenUrl,  FtpOpenFile,  or  HttpOpenRequest."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "Pointer to a buffer that receives the data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNumberOfBytesToRead",
        "description": "Number of bytes to be read."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwNumberOfBytesRead",
        "description": "Pointer to a variable that receives the number of bytes read.  InternetReadFile sets this value to zero before doing any work or error checking."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Reads data from a handle opened by the  InternetOpenUrl or  HttpOpenRequest function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. An application can also use  InternetGetLastResponseInfo when necessary. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetReadFileEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned by the  InternetOpenUrl or  HttpOpenRequest function."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_BUFFERS",
        "name": "lpBuffersOut",
        "description": "Pointer to an  INTERNET_BUFFERS structure that receives the data downloaded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following values.  ValueMeaning   IRF_ASYNC   Identical to  WININET_API_FLAG_ASYNC.    IRF_SYNC   Identical to WININET_API_FLAG_SYNC.    IRF_USE_CONTEXT   Identical to WININET_API_FLAG_USE_CONTEXT.    IRF_NO_WAIT   Do not wait for data. If there is data available, the function returns either the amount of data requested or the amount of data available (whichever is smaller)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "A caller supplied context value used for asynchronous operations."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a cookie associated with the specified URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "Cookies created by  InternetSetCookie without an expiration date are stored in memory and are available only in the same process that created them. Cookies that include an expiration date are stored in the windows\\cookies directory. Creating a new cookie might cause a dialog box to appear on the screen asking the user if they want to allow or disallow  cookies from this site based on the privacy settings for the user.  Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetCookie",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrl",
        "description": "Pointer to a null-terminated string that specifies the URL for which the cookie should be set."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieName",
        "description": "Pointer to a null-terminated string that specifies the name to be associated with the cookie data. If this parameter is NULL, no name is associated with the cookie."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieData",
        "description": "Pointer to the actual data to be associated with the URL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The InternetSetCookieEx function  \t      creates a cookie with a specified name that is associated with a specified URL. This function differs from  \t      the InternetSetCookie function by being able  \t      to create third-party cookies.",
    "library": "Wininet.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns a member of the InternetCookieState enumeration if successful,  or  FALSE if the function fails. On failure, if a call to  GetLastError returns ERROR_NOT_ENOUGH_MEMORY,  insufficient system memory was available. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetCookieEx",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszURL",
        "description": "Pointer to a null-terminated string that contains the URL for which the cookie should be set.  If this pointer is NULL, InternetSetCookieEx fails with an ERROR_INVALID_PARAMETER error."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieName",
        "description": "Pointer to a null-terminated string that  contains the name to associate with this cookie.       If this pointer is NULL, then no name is associated with the cookie."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszCookieData",
        "description": "Pointer to a null-terminated string that contains the data to be associated with the new cookie. If this pointer is NULL, InternetSetCookieEx fails with an ERROR_INVALID_PARAMETER error."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that control how the function retrieves cookie data:  ValueMeaning  INTERNET_COOKIE_EVALUATE_P3P   If this flag is set and the dwReserved parameter is not NULL, then the dwReserved parameter is cast to an LPCTSTR that points to a Platform-for-Privacy-Protection (P3P) header for the cookie in question.   INTERNET_COOKIE_HTTPONLY   Enables the retrieval of cookies that are marked as \"HTTPOnly\".     Do  not use this flag if you expose a scriptable interface, because this has security implications. If you expose a scriptable interface, you can become an attack vector for cross-site scripting attacks.  It is utterly imperative that you use this flag only if they can guarantee that you will never permit third-party code to set a cookie using this flag by way of an extensibility mechanism you provide.    Version:  Requires Internet Explorer 8.0 or later.   INTERNET_COOKIE_THIRD_PARTY   Indicates that the cookie being set is a third-party cookie.   INTERNET_FLAG_RESTRICTED_ZONE   Indicates that the cookie being set is associated with an untrusted site."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwReserved",
        "description": "NULL, or contains a pointer to a Platform-for-Privacy-Protection (P3P) header to be associated with the cookie."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sets a file position for  InternetReadFile. This is a synchronous call; however, subsequent calls to  InternetReadFile might block or return pending if the data is not available from the cache and the server does not support random access.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "I the function succeeds, it returns the current file position.     A return value of INVALID_SET_FILE_POINTER indicates a potential failure and needs to be followed by be a call to GetLastError. Since INVALID_SET_FILE_POINTER is a valid value for the  low-order DWORD of the new file pointer, the caller must check both the return value of the function and the error code returned by GetLastError to determine whether or not an error has occurred.   If an error has occurred, the return value of InternetSetFilePointer        is INVALID_SET_FILE_POINTER and GetLastError returns a value other than NO_ERROR. If the function succeeds and lpDistanceToMoveHigh is NULL, the return     value is the low-order DWORD of the new file pointer.          Note that if the function returns a value other than         INVALID_SET_FILE_POINTER, the call to InternetSetFilePointer         has succeeded and there is no need to call GetLastError. If the function succeeds and lpDistanceToMoveHigh is not NULL, the     return value is the lower-order DWORD of the new file pointer and     lpDistanceToMoveHigh contains the high order DWORD of the new file     pointer. If a new file pointer is a negative value, the function fails, the file     pointer is not moved, and the code returned by GetLastError is     ERROR_NEGATIVE_SEEK. If lpDistanceToMoveHigh is NULL and the new file position does not fit     in a 32-bit value the function fails and returns INVALID_SET_FILE_POINTER. ",
    "remarks": "This function cannot be used once the end of the file has been reached by  InternetReadFile. For  HINTERNET handles created by  HttpOpenRequest and sent by  HttpSendRequestEx, a call to  HttpEndRequest must be made on the handle before  InternetSetFilePointer is used. InternetSetFilePointer cannot be used reliably if the content length is unknown. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. InternetSetFilePointer has changed over time. In Internet Explorer 7 and earlier, it  used to move the pointer only within the bounds of  a LONG. When calling this older version of the function, lDistanceToMove contains the entire value. A positive value moves the pointer forward in the file; a negative value moves it backward.  lpDistanceToMoveHigh is reserved and is set to 0.  In current versions, lpDistanceToMoveHigh is a significant value and where any negative value would be indicated. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetFilePointer",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned from a previous call to  InternetOpenUrl (on an HTTP or HTTPS \t\t\t\t\t\tURL) or  HttpOpenRequest (using the GET or HEAD HTTP verb and passed to  HttpSendRequest or  HttpSendRequestEx). This handle must not have been created with the  INTERNET_FLAG_DONT_CACHE or  INTERNET_FLAG_NO_CACHE_WRITE value set."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lDistanceToMove",
        "description": "The low order 32-bits of a signed 64-bit number of bytes to move the file pointer. Internet Explorer 7 and earlier:  InternetSetFilePointer used to move the pointer only within the bounds of  a LONG. When calling this older version of the function, lpDistanceToMoveHigh is reserved and should be set to 0. A positive value moves the pointer forward in the file; a negative value moves it backward."
      },
      {
        "in_out": "_Inout_",
        "type": "PLONG",
        "name": "lpDistanceToMoveHigh",
        "description": "A pointer to the high order 32-bits of the signed 64-bit distance         to move. If you do not need the high order 32-bits, this pointer must         be set to NULL.  When not NULL, this parameter also receives the high         order DWORD of the new value of the file pointer. A positive value moves the pointer forward in the file; a negative value moves it backward.Internet Explorer 7 and earlier:  InternetSetFilePointer used to move the pointer only within the bounds of  a LONG. When calling this older version of the function, lpDistanceToMoveHigh is reserved and should be set to 0."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMoveMethod",
        "description": "Starting point for the file pointer move. This parameter can be one of the following values.  ValueMeaning   FILE_BEGIN   Starting point is zero or the beginning of the file. If FILE_BEGIN is specified,  lDistanceToMove is interpreted as an unsigned location for the new file pointer.    FILE_CURRENT   Current value of the file pointer is the starting point.    FILE_END   Current end-of-file position is the starting point. This method fails if the content length is unknown."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Sets an Internet option.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "GetLastError will return the error ERROR_INVALID_PARAMETER if an option flag that cannot be set is specified. For more information, see  Setting and Retrieving Internet Options. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetOption",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "Handle on which to set information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOption",
        "description": "Internet option to be set. This can be one of the  Option Flags values."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "Pointer to a buffer that contains the option setting."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwBufferLength",
        "description": "Size of the  lpBuffer buffer.  If  lpBuffer contains a string,  the size is in TCHARs.  If  lpBuffer contains anything other than a string,  the size is in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The InternetSetStatusCallback function sets up a callback function that WinINet functions can call as progress is made during an operation.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns the previously defined status callback function if successful, NULL if there was no previously defined status callback function, or INTERNET_INVALID_STATUS_CALLBACK if the callback function is not valid. ",
    "remarks": "Both synchronous and asynchronous functions use the callback function to indicate the progress of the request, such as resolving a name, connecting to a server, and so on. The callback function is required for an asynchronous operation. The asynchronous request will call back to the application with INTERNET_STATUS_REQUEST_COMPLETE to indicate the request has been completed. A callback function can be set on any handle, and is inherited by derived handles. A callback function can be changed using  InternetSetStatusCallback, providing there are no pending requests that need to use the previous callback value. Note, however, that changing the callback function on a handle does not change the callbacks on derived handles, such as that returned by  InternetConnect. You must change the callback function at each level. Many of the WinINet functions perform several operations on the network. Each operation can take time to complete, and each can fail. It is sometimes desirable to display status information during a long-term operation. You can display status information by setting up an Internet status callback function that cannot be removed as long as any callbacks or any asynchronous functions are pending. After initiating  InternetSetStatusCallback, the callback function can be accessed from within any WinINet function for monitoring time-intensive network operations. Note  The callback function specified in the lpfnInternetCallback parameter will not be called on asynchronous operations for the request handle when the dwContext parameter of HttpOpenRequest is set to zero (INTERNET_NO_CALLBACK), or the connection handle when the dwContext handle of InternetConnect is set to zero (INTERNET_NO_CALLBACK). Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "INTERNET_STATUS_CALLBACK",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetStatusCallback",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "The \t\t\t\t\t\thandle for which the callback is set."
      },
      {
        "in_out": "_In_",
        "type": "INTERNET_STATUS_CALLBACK",
        "name": "lpfnInternetCallback",
        "description": "A pointer to the callback function to call when progress is made, or  NULL to remove the existing callback function. For more information about the callback function, see  InternetStatusCallback."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Prototype for an application-defined status callback function.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "This callback function does not return a value. ",
    "remarks": "Because callbacks are made during processing of the request, the application should spend little time in the callback function to avoid degrading data throughput on the network. For example, displaying a dialog box in a callback function can be such a lengthy operation that the server terminates the request. The callback function can be called in a thread context different from the thread that initiated the request. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "void CALLBACK",
    "category": "Windows Internet (WinINet)",
    "name": "InternetStatusCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hInternet",
        "description": "The handle for which the callback function is called."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwContext",
        "description": "A pointer to a variable that specifies the application-defined context value associated with  hInternet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwInternetStatus",
        "description": "A status code that indicates why the callback function is called. This parameter can be one of the following values.  ValueMeaning  INTERNET_STATUS_CLOSING_CONNECTION   Closing the connection to the server. The  lpvStatusInformation parameter is NULL.   INTERNET_STATUS_CONNECTED_TO_SERVER   Successfully connected to the socket address (SOCKADDR) pointed to by  lpvStatusInformation.   INTERNET_STATUS_CONNECTING_TO_SERVER   Connecting to the socket address (SOCKADDR) pointed to by  lpvStatusInformation.   INTERNET_STATUS_CONNECTION_CLOSED   Successfully closed the connection to the server. The  lpvStatusInformation parameter is NULL.   INTERNET_STATUS_COOKIE_HISTORY   Retrieving content from the cache. Contains data about past cookie events for the URL such as if cookies were accepted, rejected, downgraded, or leashed.   The  lpvStatusInformation parameter is a pointer to an InternetCookieHistory structure.   INTERNET_STATUS_COOKIE_RECEIVED   Indicates the number of cookies that were accepted, rejected, downgraded (changed from persistent to session cookies), or leashed (will be sent out only in 1st party context). The  lpvStatusInformation parameter is a DWORD with the number of cookies received.   INTERNET_STATUS_COOKIE_SENT   Indicates the number of cookies that were either sent or suppressed, when a request is sent. The  lpvStatusInformation parameter is a DWORD with the number of cookies sent or suppressed.   INTERNET_STATUS_CTL_RESPONSE_RECEIVED   Not implemented.   INTERNET_STATUS_DETECTING_PROXY   Notifies the client application that a proxy has been detected.   INTERNET_STATUS_HANDLE_CLOSING   This handle value has been terminated. pvStatusInformation contains the address of the handle being closed. The lpvStatusInformation parameter contains the address of the handle being closed.   INTERNET_STATUS_HANDLE_CREATED   Used by  InternetConnect to indicate it has created the new handle. This lets the application call  InternetCloseHandle from another thread, if the connect is taking too long. The  lpvStatusInformation parameter contains the address of an  HINTERNET handle.   INTERNET_STATUS_INTERMEDIATE_RESPONSE   Received an intermediate (100 level) status code message from the server.   INTERNET_STATUS_NAME_RESOLVED   Successfully found the IP address of the name contained in  lpvStatusInformation. The lpvStatusInformation parameter points to a PCTSTR containing the host name.   INTERNET_STATUS_P3P_HEADER    The response has a P3P header in it.   INTERNET_STATUS_P3P_POLICYREF   Not implemented.   INTERNET_STATUS_PREFETCH   Not implemented.   INTERNET_STATUS_PRIVACY_IMPACTED    Not implemented.   INTERNET_STATUS_RECEIVING_RESPONSE   Waiting for the server to respond to a request. The  lpvStatusInformation parameter is NULL.   INTERNET_STATUS_REDIRECT   An HTTP request is about to automatically redirect the request. The  lpvStatusInformation parameter points to the new URL. At this point, the application can read any data returned by the server with the redirect response and can query the response headers. It can also cancel the operation by closing the handle. This callback is not made if the original request specified  INTERNET_FLAG_NO_AUTO_REDIRECT.   INTERNET_STATUS_REQUEST_COMPLETE   An asynchronous operation has been completed. The  lpvStatusInformation parameter contains the address of an  INTERNET_ASYNC_RESULT structure.   INTERNET_STATUS_REQUEST_SENT   Successfully sent the information request to the server. The  lpvStatusInformation parameter points to a DWORD value that contains the number of bytes sent.   INTERNET_STATUS_RESOLVING_NAME   Looking up the IP address of the name contained in  lpvStatusInformation. The lpvStatusInformation parameter points to a PCTSTR containing the host name.   INTERNET_STATUS_RESPONSE_RECEIVED   Successfully received a response from the server.    INTERNET_STATUS_SENDING_REQUEST   Sending the information request to the server. The  lpvStatusInformation parameter is NULL.   INTERNET_STATUS_STATE_CHANGE   Moved between a secure (HTTPS) and a nonsecure (HTTP) site. The user must be informed of this change; otherwise, the user is at risk of disclosing sensitive information involuntarily.  When this flag is set, the lpvStatusInformation parameter points to a status  DWORD that contains additional flags."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpvStatusInformation",
        "description": "A pointer to additional status information. When the INTERNET_STATUS_STATE_CHANGE flag is set, lpvStatusInformation points to a DWORD that contains one or more of the following flags:  ValueMeaning  INTERNET_STATE_CONNECTED   Connected state. Mutually exclusive with disconnected state.   INTERNET_STATE_DISCONNECTED   Disconnected state. No network connection could be established.   INTERNET_STATE_DISCONNECTED_BY_USER   Disconnected by user request.   INTERNET_STATE_IDLE   No network requests are being made by Windows Internet.   INTERNET_STATE_BUSY   Network requests are being made by Windows Internet.   INTERNET_STATUS_USER_INPUT_REQUIRED   The request requires user input to be completed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStatusInformationLength",
        "description": "The size, in bytes, of the data pointed to by  lpvStatusInformation."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Formats a date and time according to the HTTP version 1.0 specification.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetTimeFromSystemTime",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const SYSTEMTIME*",
        "name": "pst",
        "description": "Pointer to a  SYSTEMTIME structure that contains the date and time to format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRFC",
        "description": "RFC format used. Currently, the only valid format is INTERNET_RFC1123_FORMAT."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszTime",
        "description": "Pointer to a string buffer that receives the formatted date and time. The buffer should be of size INTERNET_RFC1123_BUFSIZE."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbTime",
        "description": "Size of the  lpszTime buffer, in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts an HTTP time/date string to a  SYSTEMTIME structure.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the string was converted, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetTimeToSystemTime",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszTime",
        "description": "Pointer to a null-terminated string that specifies the date/time to  be converted."
      },
      {
        "in_out": "_Out_",
        "type": "SYSTEMTIME*",
        "name": "pst",
        "description": "Pointer to a  SYSTEMTIME structure that receives the converted time."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unlocks a file that was locked using  InternetLockRequestFile.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get a specific error message, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "InternetUnlockRequestFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hLockRequestInfo",
        "description": "Handle to a lock request that was returned by  InternetLockRequestFile."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Writes data to an open Internet file.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the function succeeds, or FALSE otherwise. To get extended error information, call  GetLastError. An application can also use  InternetGetLastResponseInfo when necessary. ",
    "remarks": "When the application is sending data, it must call  InternetCloseHandle to end the data transfer. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetWriteFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hFile",
        "description": "Handle returned from a previous call to  FtpOpenFile or an  HINTERNET handle sent by  HttpSendRequestEx."
      },
      {
        "in_out": "_In_",
        "type": "LPCVOID",
        "name": "lpBuffer",
        "description": "Pointer to a buffer that contains the data to be written to the file."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNumberOfBytesToWrite",
        "description": "Number of bytes to be written to the file."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwNumberOfBytesWritten",
        "description": "Pointer to a variable that receives the number of bytes written to the file.  InternetWriteFile sets this value to zero before doing any work or error checking."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Reads the cached data from a stream that has been opened using the  RetrieveUrlCacheEntryStream function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "If the buffer size is not sufficient,  GetLastError returns ERROR_INSUFFICIENT_BUFFER and sets  lpdwLen to the size necessary to contain all the information. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "ReadUrlCacheEntryStream",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hUrlCacheStream",
        "description": "Handle that was returned by the  RetrieveUrlCacheEntryStream function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLocation",
        "description": "Offset to be read from."
      },
      {
        "in_out": "_Inout_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "Pointer to a buffer that receives the data."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwLen",
        "description": "Pointer to a  variable that specifies the size of the  lpBuffer buffer, in bytes. When the function returns, the variable contains the number of bytes copied to the buffer, or the required size of the buffer, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ResumeSuspendedDownload function resumes a request that is suspended by a user interface dialog box.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful; otherwise  FALSE. Call GetLastError for extended error information. ",
    "remarks": "Applications that use WinINet functions asynchronously can call ResumeSuspendedDownload to resume a request that is suspended by a user interface dialog box. For example,  call  ResumeSuspendedDownload after a call to InternetErrorDlg, or in an InternetStatusCallback  function when the lpvStatusInformation parameter equals INTERNET_STATUS_USER_INPUT_REQUIRED. The following code example shows you how to use the ResumeSuspendedDownload  function in a callback. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "ResumeSuspendedDownload",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HINTERNET",
        "name": "hRequest",
        "description": "Handle of the request that is suspended by a user interface dialog box."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwResultCode",
        "description": "The error result returned from InternetErrorDlg, or zero if a different dialog  is  invoked."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Locks the cache entry file associated with the specified URL.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible error values include:  ",
    "remarks": "RetrieveUrlCacheEntryFile does not do any URL parsing, so a URL containing an anchor (#) will not be found in the cache, even if the resource is cached. For example, if the URL http://adatum.com/example.htm#sample was passed, the function would return ERROR_FILE_NOT_FOUND even if http://adatum.com/example.htm is in the cache. The file is locked for the caller when it is retrieved; the caller should unlock the file after the caller is finished with the file. The cache manager automatically unlocks the files after a certain interval. While the file is locked, the cache manager will not remove the file from the cache. It is important to note that this function may or may not perform efficiently, depending on the internal implementation of the cache. For instance, if the URL data is stored in a packed file that contains data for other URLs, the cache will make a copy of the data to a file in a temporary directory maintained by the cache. The cache will eventually delete the copy. It is recommended that this function be used only in situations where a file name is needed to launch an application.  RetrieveUrlCacheEntryStream and associated stream functions should be used in most cases. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "RetrieveUrlCacheEntryFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a string that contains the URL of the resource associated with the cache entry. This must be a unique name. The name string should not contain any escape characters."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpCacheEntryInfo",
        "description": "Pointer to a cache entry information buffer. If the buffer is not sufficient, this function returns ERROR_INSUFFICIENT_BUFFER and sets  lpdwCacheEntryInfoBufferSize to the number of bytes required."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "Pointer to an unsigned long integer variable that specifies the size of the  lpCacheEntryInfo buffer, in bytes. When the function returns, the variable contains the size, in bytes, of the actual buffer used or the number of bytes required to retrieve the cache entry file. The caller should check the return value in this parameter. If the return size is less than or equal to the size passed in, all the relevant data has been returned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Provides the most efficient and implementation-independent way to access the cache data.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "If the function succeeds, the function returns a valid handle for use in the  ReadUrlCacheEntryStream and  UnlockUrlCacheEntryStream functions. If the function fails, it returns NULL. To get extended error information, call  GetLastError. Possible error values include the following.  ",
    "remarks": "RetrieveUrlCacheEntryStream does not do any URL parsing, so a URL containing an anchor (#) will not be found in the cache, even if the resource is cached. For example, if the URL http://adatum.com/example.htm#sample is passed, the function returns ERROR_FILE_NOT_FOUND even if http://adatum.com/example.htm is in the cache. Cache clients that do not need URL data in the form of a file should use this function to access the data for a particular URL. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "HANDLE",
    "category": "Windows Internet (WinINet)",
    "name": "RetrieveUrlCacheEntryStream",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a null-terminated string that contains the source name of the cache entry. This must be a unique name. The name string should not contain any escape characters."
      },
      {
        "in_out": "_Out_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpCacheEntryInfo",
        "description": "Pointer to an  INTERNET_CACHE_ENTRY_INFO structure that receives information about the cache entry."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpcbCacheEntryInfo",
        "description": "Pointer to a variable that specifies the size, in bytes, of the  lpCacheEntryInfo buffer. When the function returns, the variable receives the number of bytes copied to the buffer or the required size, in bytes, of the buffer. Note that this buffer size must accommodate both the INTERNET_CACHE_ENTRY_INFO structure and the associated strings that are stored immediately following it."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fRandomRead",
        "description": "Whether the stream is open for random access. Set the flag to TRUE to open the stream for random access."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Adds entries to or removes entries from a cache group.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. ",
    "remarks": "A cache entry can belong to more than one cache group. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "SetUrlCacheEntryGroup",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a null-terminated string value that specifies the URL of the cached resource."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Determines whether the entry is added to or removed from a cache group. This parameter can be one of the following values.  ValueMeaning   INTERNET_CACHE_GROUP_ADD   Adds the cache entry to the cache group.    INTERNET_CACHE_GROUP_REMOVE   Removes the entry from the cache group."
      },
      {
        "in_out": "_In_",
        "type": "GROUPID",
        "name": "GroupId",
        "description": "Identifier of the cache group that the entry will be added to or removed from."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "pbGroupAttributes",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbGroupAttributes",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the specified members of the  INTERNET_CACHE_ENTRY_INFO structure.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. Possible error values include the following.  ",
    "remarks": "",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "SetUrlCacheEntryInfo",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a null-terminated string that specifies the name of the cache entry. The name string should not contain any escape characters."
      },
      {
        "in_out": "_In_",
        "type": "LPINTERNET_CACHE_ENTRY_INFO",
        "name": "lpCacheEntryInfo",
        "description": "Pointer to an  INTERNET_CACHE_ENTRY_INFO structure containing the values to be assigned to the cache entry designated by  lpszUrlName."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFieldControl",
        "description": "Indicates the members that are to be set. This parameter can be a combination of the following values.  ValueMeaning   CACHE_ENTRY_ACCTIME_FC   Sets the last access time.    CACHE_ENTRY_ATTRIBUTE_FC   Sets the cache entry type.    CACHE_ENTRY_EXEMPT_DELTA_FC   Sets the exempt delta.    CACHE_ENTRY_EXPTIME_FC   Sets the expire time.    CACHE_ENTRY_HEADERINFO_FC   Not currently implemented.    CACHE_ENTRY_HITRATE_FC   Sets the hit rate.    CACHE_ENTRY_MODTIME_FC   Sets the last modified time.    CACHE_ENTRY_SYNCTIME_FC   Sets the last sync time."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sets the attribute information of the specified cache group.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get specific error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "SetUrlCacheGroupAttribute",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GROUPID",
        "name": "gid",
        "description": "Identifier of the cache group."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be 0."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAttributes",
        "description": "Attributes to be set. This parameter can be one of the following values.  ValueMeaning   CACHEGROUP_ATTRIBUTE_FLAG   Sets or retrieves the flags associated with the cache group.    CACHEGROUP_ATTRIBUTE_GROUPNAME   Sets or retrieves the group name of the cache group.    CACHEGROUP_ATTRIBUTE_QUOTA   Sets or retrieves the disk quota associated with the cache group.    CACHEGROUP_ATTRIBUTE_STORAGE   Sets or retrieves the group owner storage associated with the cache group.    CACHEGROUP_ATTRIBUTE_TYPE   Sets or retrieves the cache group type.    CACHEGROUP_READWRITE_MASK   Sets the type, disk quota, group name, and owner storage attributes of the cache group."
      },
      {
        "in_out": "_In_",
        "type": "LPINTERNET_CACHE_GROUP_INFO",
        "name": "lpGroupInfo",
        "description": "Pointer to an  INTERNET_CACHE_GROUP_INFO structure that specifies the attribute information to be stored."
      },
      {
        "in_out": "_Inout_",
        "type": "LPVOID",
        "name": "lpReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Unlocks the cache entry that was locked while the file was retrieved for use from the cache.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ERROR_FILE_NOT_FOUND indicates that the cache entry specified by the source name is not found in the cache storage. ",
    "remarks": "The application should not access the file after calling this function. When this function returns, the cache manager is free to delete the cache entry. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "UnlockUrlCacheEntryFile",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpszUrlName",
        "description": "Pointer to a null-terminated string that specifies the source name of the cache entry that is being unlocked. The name string should not contain any escape characters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be 0."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Closes the stream that has been retrieved using the  RetrieveUrlCacheEntryStream function.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if successful, or FALSE otherwise. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLAPI",
    "category": "Windows Internet (WinINet)",
    "name": "UnlockUrlCacheEntryStream",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hUrlCacheStream",
        "description": "Handle that was returned by the  RetrieveUrlCacheEntryStream function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Clears all decisions that were made about cookies on a site by site basis.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if all decisions were cleared and FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetClearAllPerSiteCookieDecisions",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the domains and cookie settings of websites for which site-specific cookie regulations are set.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "TRUE if the function retrieved the cookie setting for the given domain; otherwise, false. FALSE. ",
    "remarks": "InternetEnumPerSiteCookieDecision should be initially called with dwIndex equal to 0. Incrementing the dwIndex parameter steps through the list of websites and cookie settings. The end of the list is reached when InternetEnumPerSiteCookieDecision returns FALSE and produces the wininet error, ERROR_NO_MORE_ITEMS. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetEnumPerSiteCookieDecision",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszSiteName",
        "description": "An LPSTR that receives a string specifying a website domain."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned long*",
        "name": "pcSiteNameSize",
        "description": "A pointer to an unsigned long that specifies the size of the pcSiteNameSize parameter provided to the InternetEnumPerSiteCookieDecision function when it is called. When InternetEnumPerSiteCookieDecision returns, pcSiteNameSize receives the actual length of the domain string returned in pszSiteName."
      },
      {
        "in_out": "_Out_",
        "type": "unsigned long*",
        "name": "pdwDecision",
        "description": "Pointer to an unsigned long that receives the InternetCookieState enumeration value corresponding to pszSiteName."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwIndex",
        "description": "An unsigned long that specifies the index of the website and corresponding cookie setting to retrieve."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a decision on cookies for a given domain.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the decision was retrieved and FALSE otherwise. ",
    "remarks": "A return value of FALSE may indicate that the domain pchHostName does not have any site-specific cookie regulations. WinINet minimizes the domain specified in the pchHostName parameter and sets the cookie policy on the minimimum legal domain. For example, if the specified host name is  widgets.microsoft.com, the policy is set on the minimized host name microsoft.com. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetGetPerSiteCookieDecision",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pchHostName",
        "description": "An LPCTSTR that points to a string containing a domain."
      },
      {
        "in_out": "_Out_",
        "type": "unsigned long*",
        "name": "pResult",
        "description": "A pointer to an unsigned long that contains one of the InternetCookieState enumeration values."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets a decision on cookies for a given domain.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns TRUE if the decision is set and FALSE otherwise. ",
    "remarks": "WinINet minimizes the domain specified in the pchHostName parameter and sets the cookie policy on the minimimum legal domain. For example, if the specified host name is  widgets.microsoft.com, the policy is set on the minimized host name microsoft.com. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "BOOL",
    "category": "Windows Internet (WinINet)",
    "name": "InternetSetPerSiteCookieDecision",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pchHostName",
        "description": "An LPCTSTR that points to a string containing a domain."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDecision",
        "description": "A value of type DWORD that contains one of the InternetCookieState enumeration values."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the privacy settings for a given  URLZONE and PrivacyType.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns zero if successful. Otherwise, one of the Error Messages defined in winerr.h is returned. ",
    "remarks": "These privacy settings for the Internet zone are found on the Privacy tab of the Internet Options dialog box. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": "DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "PrivacyGetZonePreferenceW",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwZone",
        "description": "A value of type DWORD that specifies the URLZONE for which privacy settings are being retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwType",
        "description": "A value of type DWORD that specifies the PrivacyType for which privacy settings are being retrieved."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "pdwTemplate",
        "description": "An LPDWORD that returns a pointer to a DWORD containing which of the PrivacyTemplates is in use for this dwZone and dwType."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "pszBuffer",
        "description": "An  LPWSTR that points to a buffer containing a LPCWSTR representing a string version of the pdwTemplate or a customized string if the pdwTemplate is set to PRIVACY_TEMPLATE_CUSTOM. See PrivacySetZonePreferenceW for a description of a customized privacy preferences string."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPDWORD",
        "name": "pdwBufferLength",
        "description": "An LPDWORD that contains the buffer length in characters. If the buffer length is not sufficient, PrivacyGetZonePreferenceW returns with this parameter set to the number of characters required and with a return value of ERROR_MORE_DATA."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Sets the privacy settings for a given URLZONE and PrivacyType.",
    "library": "Wininet.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wininet.h",
    "return_value": "Returns zero if successful. Otherwise, one of the errors defined in winerr.h is returned. ",
    "remarks": "These privacy settings for the Internet zone are found on the Privacy tab of the Internet Options dialog box. Setting the privacy options for the URLZONE_INTERNET involves setting the privacy templates for both PrivacyTypes. The slider on the Privacy Menu in Internet Options only moves if privacy is set for both PrivacyTypes. Custom privacy preferences for a given URLZONE and PrivacyType can be set through the pszPreference parameter. The pszPreference parameter can contain a series of rules separated by white space describing the privacy preferences. It is important to note that the rules themselves cannot contain white space. The pszPreference has the following structure where there can be multiple logical rules: <signature> <logical-rule> <special-rule>. Currently, the signature must be set to IE6-P3PSettings/V1:. Logical rules have the following format: /<expression>=<decision>/. An expression is a Boolean statement composed of compact policy tokens using the operators & (logical AND) and ! (logical NOT). The compact policy token is case-sensitive. (For more information on Platform for Privacy Preferences (P3P) privacy policies and compact policy tokens, see the W3C: Platform for Privacy Preferences (P3P) Project  specification.) The decision is a single lowercase character that defines the action to take on the cookie whose compact policy contains the specified token(s). The following table lists valid decision characters.  Logical rules are evaluated in the order they are listed. The first logical-rule to be matched, if any, determines the cookie action. An empty expression is also allowed. If an expression is empty, the left side evaluates to true. This form of a logical-rule can be used at the end of a set of rules to catch all situations that did not fall into the other categories. The following examples show valid logical rules. Special rules are specified using the nopolicy, session, and always symbols. The nopolicy symbol is used to specify the action to taken when there is no compact policy. For example nopolicy=d specifies to downgrade all cookies without a compact policy to session cookies. The session symbol is used to specify the action to take on session cookies and can only be set to a. When session=a is specified, all session cookies are accepted regardless of the content of the compact policy. If this rule is not specified, session cookies are subject to the same rules as persistent cookies. Finally, the always symbol is used to specify to perform the same action for everything. For example, always=d specifies to deny all cookies regardless of the existence of a compact policy. Note that always=d is equivalent to /=d/. The following example shows a privacy preferences string that specifies to accept cookies for which the compact policy contains a FIN/CONi token pair, reject cookies with compact policies containing FIN/CON, FIN/CONo, FIN/CONa and GOV/PUB token pairs or a TEL token, and to prompt the user when a cookie's compact policy contains the UNR token. It also specifies to downgrade cookies without a compact policy to session cookies and to accept all cookies that do not match one of the given rules. Note that the first rule that evaluates to true determines the cookie action. Like all other aspects of the WinINet API, this function cannot be safely called from within DllMain or the constructors and destructors of global objects. ",
    "return_type": " DWORD",
    "category": "Windows Internet (WinINet)",
    "name": "PrivacySetZonePreferenceW",
    "is_callback": 0,
    "dll": "Wininet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwZone",
        "description": "Value of type DWORD that specifies the URLZONEfor which privacy settings are being set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwType",
        "description": "Value of type DWORD that specifies the PrivacyType for which privacy settings are being set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTemplate",
        "description": "Value of type DWORD that specifies which of the privacy templates is to be used to set the privacy settings."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pszPreference",
        "description": "If dwTemplate is set to PRIVACY_TEMPLATE_CUSTOM, this parameter is the string representation of the custom preferences. Otherwise, it should be set to NULL. A description of this string representation is included in the Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]