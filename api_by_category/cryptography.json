[
  {
    "n_arguments": 2,
    "description": "Computes the final hash of the data entered by the MD5Update function.",
    "library": "Ntdll.dll",
    "min_server": "",
    "header": "Sha.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function is very similar to SHAFinal, but is called directly from the library, rather than being routed through the cryptography infrastructure. For more information, see Windows NTCryptographic Providers. ",
    "return_type": "VOID RSA32API",
    "category": "Cryptography",
    "name": "A_SHAFinal",
    "is_callback": 0,
    "dll": "Ntdll.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "A_SHA_CTX*",
        "name": "Context",
        "description": "The SHA context."
      },
      {
        "in_out": "_Out_",
        "type": "UNSIGNED CHAR",
        "name": "Result",
        "description": "The resulting hash table."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Initiates the hashing of a stream of data.",
    "library": "Ntdll.dll",
    "min_server": "",
    "header": "Sha.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function is very similar to SHAInit, but is called directly from the library, rather than being routed through the cryptography infrastructure. For more information, see Windows NTCryptographic Providers. ",
    "return_type": "void RSA32API",
    "category": "Cryptography",
    "name": "A_SHAInit",
    "is_callback": 0,
    "dll": "Ntdll.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "A_SHA_CTX*",
        "name": "Context",
        "description": "The SHA context."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Adds data to a specified hash object.",
    "library": "Ntdll.dll",
    "min_server": "",
    "header": "Sha.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function can be called multiple times to compute the hash on long data streams or discontinuous data streams. The A_SHAFinal function must be called before retrieving the hash value. This function is very similar to SHAUpdate, but is called directly from the library, rather than being routed through the cryptography infrastructure. For more information, see Windows NTCryptographic Providers. ",
    "return_type": "void RSA32API",
    "category": "Cryptography",
    "name": "A_SHAUpdate",
    "is_callback": 0,
    "dll": "Ntdll.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "A_SHA_CTX*",
        "name": "Context",
        "description": "The SHA context."
      },
      {
        "in_out": "_Out_",
        "type": "UNSIGNED CHAR*",
        "name": "Buffer",
        "description": "The  hash table."
      },
      {
        "in_out": "UNSIGNED",
        "type": "INT",
        "name": "BufferSize",
        "description": "The size of the buffer."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 9,
    "description": "The CryptXmlCreateReference function creates a reference to an XML signature.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlCreateReference",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hCryptXml",
        "description": "The handle of the XML signature."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies flags that affect how the reference is created.  Currently defined dwFlags values are shown in the following table.  ValueMeaning  CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT 0x00000001   Set this flag to create an Object node and add it to the Signature element. A reference to the Object  node is created in the SignedInfo element. The returned handle is an encapsulated Object node and can be used in subsequent calls to the CryptXmlCreateReference function to create references in the Manifest node."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "wszId",
        "description": "A pointer to a null-terminated Unicode string that contains the value of the ID attribute of the Reference element of the signature. \tIf this parameter is NULL, then the ID attribute is not created. \tIf this parameter is an empty string, then the ID attribute with empty         value is created."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "wszURI",
        "description": "A pointer to a null-terminated Unicode string that contains the value of the URI attribute of the Reference element of the signature.     If this parameter is an empty string,     then the URI attribute with an empty value is created."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "wszType",
        "description": "A pointer to a null-terminated Unicode string that contains the value of the Type attribute of the Reference element of the signature.     The processing engine does not check or use this attribute."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pDigestMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that contains the digest method."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cTransform",
        "description": "The number of elements in the array pointed to by the rgTransform parameter."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "rgTransform",
        "description": "A pointer to an ordered array of CRYPT_XML_ALGORITHM structures that contain transform algorithms to be applied to     the reference data before the digest calculation."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTXML*",
        "name": "phReference",
        "description": "A pointer to a reference handle."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptXmlAddObject function adds the Object element to the Signature in the Document Context opened for encoding.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "When the hSignatureOrObject parameter specifies a handle to a Reference returned      by the CryptXmlCreateReference function, the pEncoded parameter specifies XML content that is included     in the Object node after the optional Manifest element.     The pointer contained in the pEncoded  parameter must be valid until the signature is complete.      Otherwise, use the CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY flag to create an in-memory copy. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlAddObject",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hSignatureOrObject",
        "description": "The handle of a Signature returned by the CryptXmlOpenToEncode function or the handle of a Reference returned by the CryptXmlCreateReference function with     the CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT flag set."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies flags that control the manner in which the object is added.  Currently defined dwFlags values are shown in the following table .  ValueMeaning  CRYPT_XML_ADD_OBJECT_CREATE_REFERENCE    When set, an in-memory copy of the XML part is created and included in the Object element."
      },
      {
        "in_out": "_In_opt_",
        "type": "const CRYPT_XML_PROPERTY*",
        "name": "rgProperty",
        "description": "A pointer to  a  CRYPT_XML_PROPERTY structure that specifies additional properties used to decode the Object element."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cProperty",
        "description": "The number of elements in the array pointed to by the rgProperty property."
      },
      {
        "in_out": "_In_",
        "type": "const PCRYPT_XML_BLOB",
        "name": "pEncoded",
        "description": "A pointer to a CRYPT_XML_BLOB structure that contains the Object element."
      },
      {
        "in_out": "_Out_opt_",
        "type": "const CRYPT_XML_OBJECT**",
        "name": "ppObject",
        "description": "A pointer to  a pointer to a CRYPT_XML_OBJECT structure to receive the decoded structure.     This parameter must be NULL when the hSignatureOrObject parameter contains a handle to the Object."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptXmlClose function closes a cryptographic XML object handle.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "At each call to this function, the reference count on the handle is reduced by one. When the reference count reaches zero, an object encapsulated by the handle is fully released. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlClose",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HXML",
        "name": "hCryptXml",
        "description": "The handle of the cryptographic XML object to be closed."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlDigestReference function is used by an application to digest the resolved reference. This function applies transforms before updating the digest.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "When the CRYPT_XML_REFERENCE_DATA_TRANSFORMED flag is set,     the processing engine adds received data directly to the digest without      applying the transform chain engine. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlDigestReference",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hReference",
        "description": "The  handle of a Reference element."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies values that control how the process applies transforms.  Currently defined dwFlags are shown in the following table.  ValueMeaning  CRYPT_XML_REFERENCE_DATA_TRANSFORMED 0x00000001   Specifies that the processing engine will create the digest without applying the transform chain engine."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_DATA_PROVIDER*",
        "name": "pDataProviderIn",
        "description": "A pointer to a    CRYPT_XML_DATA_PROVIDER structure that specifies the data provider. The CryptXmlDigestReference function always calls the fpnClose function on the data provider."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptXmlDllCloseDigest function frees the CRYPT_XML_DIGEST allocated by the CryptXmlDllCreateDigest function.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllCloseDigest pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_DIGEST",
        "name": "hDigest",
        "description": "The handle of the hash object. This handle is obtained by calling the CryptXmlCreateDigest  function. After the function has been called, the digest handle passed to this function is released and cannot be used again."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlDllCreateDigest function creates a digest object for the specified method.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllCreateDigest pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pDigestMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm to use to create the  digest."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbSize",
        "description": "A pointer to a ULONG variable that receives the size, in bytes, of the digest."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_XML_DIGEST*",
        "name": "phDigest",
        "description": "A pointer to a CRYPT_XML_DIGEST variable  that receives a pointer to the digest. When you have finished using the resources allocated by the call to this function, you must free them by calling the CryptXmlDllCloseDigest function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "the CryptXmlDllCreateKey function parses the KeyValue element and creates a Cryptography API: Next Generation (CNG) BCrypt key handle to verify a signature.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllCreateKey pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_BLOB*",
        "name": "pEncoded",
        "description": "A pointer to a CRYPT_XML_BLOB structure that contains the KeyValue element."
      },
      {
        "in_out": "_Out_",
        "type": "const BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE variable that receives the handle of the key used to verify the signature. When CryptXML has finished using the key, CryptXML frees it by calling the BCryptDestroyKey function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlDllDigestData function puts data into the digest.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllDigestData pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "CRYPT_XML_DIGEST",
        "name": "hDigest",
        "description": "The handle of the hash object used to put data into the digest. This handle is obtained by calling the CryptXmlDllCreateDigest  function."
      },
      {
        "in_out": "",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a block of data to be processed."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cbDigest",
        "description": "The size, in bytes, of the block of data pointed to by the pbData parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptXmlDllEncodeAlgorithm function encodes SignatureMethod or DigestMethod elements  for agile algorithms with default parameters.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllEncodeAlgorithm pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_ALGORITHM_INFO*",
        "name": "pAlgInfo",
        "description": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure."
      },
      {
        "in_out": "",
        "type": "CRYPT_XML_CHARSET",
        "name": "dwCharset",
        "description": "A CRYPT_XML_CHARSET value that specifies the character set of the encoded XML."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "A pointer to an argument that is passed to the callback function pointed to by the pfnWrite parameter."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_XML_WRITE_CALLBACK",
        "name": "pfnWrite",
        "description": "A PFN_CRYPT_XML_WRITE_CALLBACK callback function that receives the encoded XML."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptXmlDllEncodeKeyValue function encodes a KeyValue element.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllEncodeKeyValue pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the key value to encode."
      },
      {
        "in_out": "",
        "type": "CRYPT_XML_CHARSET",
        "name": "dwCharset",
        "description": "A value of the CRYPT_XML_CHARSET enumeration that specifies the character set of the encoded XML."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "A pointer to an argument that is passed to the callback function pointed to by the pfnWrite parameter."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_XML_WRITE_CALLBACK",
        "name": "pfnWrite",
        "description": "An application defined callback function that receives the encoded XML."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlDllFinalizeDigest function retrieves the digest value.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllFinalizeDigest pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_DIGEST",
        "name": "hDigest",
        "description": "The handle of the hash object used to put data into the digest. This handle is obtained by calling the CryptXmlDllCreateDigest  function."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbDigest",
        "description": "A pointer to a buffer that receives the digest value."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cbDigest",
        "description": "The size, in bytes, of the buffer pointed to by the pbDigest parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptXmlDllGetAlgorithmInfo function decodes the XML algorithm and returns information about the algorithm.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllGetAlgorithmInfo pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pXmlAlgorithm",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_XML_ALGORITHM_INFO**",
        "name": "ppAlgInfo",
        "description": "A pointer to a pointer to a  CRYPT_XML_ALGORITHM_INFO structure. When you have finished using the memory pointed to by the ppAlgInfo parameter, free it by calling the LocalFree function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlDllGetInterface function retrieves a pointer to the cryptographic extension functions for the specified algorithm.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "The cryptographic extensions DLL must export the CryptXmlDllGetInterface entry. To get the CRYPT_XML_CRYPTOGRAPHIC_INTERFACE  table, CryptXml loads the registered cryptographic extensions DLL by using the LoadLibrary function, and then it calls the CryptXmlDllGetInterface function. ",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllGetInterface pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM_INFO*",
        "name": "pMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure to retrieve the interface of."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_XML_CRYPTOGRAPHIC_INTERFACE*",
        "name": "pInterface",
        "description": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure to receive the interface information."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptXmlDllSignData function signs data.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllSignData pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pSignatureMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "The handle of the cryptographic service provider (CSP) that creates the signature. This handle must be an HCRYPTPROV handle that was obtained from a call to the CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that was created by using the NCryptOpenKey function. New applications should pass in an NCRYPT_KEY_HANDLE handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "The private key to use from the provider's container. This key can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an NCRYPT_KEY_HANDLE handle is used in the hCryptProvOrNCryptKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbInput",
        "description": "A pointer to a buffer that contains the digest value to sign. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The size, in bytes, of the buffer pointed to by the pbInput parameter."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbOutput",
        "description": "The address of a buffer to receive the signature produced by this function. The cbOutput parameter contains the size of this buffer. If this parameter is NULL, this function will calculate the size needed for the encrypted data and return the size in the location pointed to by the pcbResult parameter."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbOutput",
        "description": "The size, in bytes, of the buffer pointed to by the pbOutput parameter."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbResult",
        "description": "A pointer to a DWORD variable that receives the number of bytes copied to the pbOutput buffer.  If pbOutput is NULL, this receives the size, in bytes, required for the signature."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptXmlDllVerifySignature  function verifies a signature.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "typedef HRESULT (",
    "category": "Cryptography",
    "name": "CryptXmlDllVerifySignature pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pSignatureMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTXML_PROV",
        "name": "hCryptProv",
        "description": "A handle to the cryptographic provider."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTXML_KEY",
        "name": "hKey",
        "description": "A handle to the public key."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbInput",
        "description": "A pointer to a buffer that contains the signed data. The cbInput parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbInput",
        "description": "The size, in bytes, of the buffer pointed to by the pbInput parameter."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSignature",
        "description": "A pointer to a buffer that contains the signature value to be verified. The cbSignature parameter contains the size of this buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSignature",
        "description": "The size, in bytes, of the pbSignature buffer."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptXmlEncode function encodes signature data by using the supplied XML writer callback function.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlEncode",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hCryptXml",
        "description": "The handle of the object to be serialized. The handle can be of Signature, Object, or Reference types."
      },
      {
        "in_out": "",
        "type": "CRYPT_XML_CHARSET",
        "name": "dwCharset",
        "description": "A value of the CRYPT_XML_CHARSET enumeration that specifies the character set of the encoded XML."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_PROPERTY*",
        "name": "rgProperty",
        "description": "A pointer to an array of CRYPT_XML_PROPERTY structures that contain additional properties."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cProperty",
        "description": "A ULONG value that specifies the number of entries in the array pointed to by the rgProperty parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "A pointer to an application defined argument that is passed to the XML writer callback function pointed to by the pfnWrite parameter."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_XML_WRITE_CALLBACK",
        "name": "pfnWrite",
        "description": "An XML writer callback function to receive the application defined argument pointed to by the pvCallbackState parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlGetAlgorithmInfo function decodes the CRYPT_XML_ALGORITHM structure and returns information about the algorithm.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetAlgorithmInfo",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pXmlAlgorithm",
        "description": "A pointer to a CRYPT_XML_ALGORITHM structure that specifies the algorithm about which to return information."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following values.   ValueMeaning  CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest  are used.  When this flag is set, no other registered extensions are loaded."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_XML_ALGORITHM_INFO**",
        "name": "ppAlgInfo",
        "description": "A pointer to a pointer to a  CRYPT_XML_ALGORITHM_INFO structure. When you have finished using the memory pointed to by the ppAlgInfo parameter, free it by calling the LocalFree function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptXmlGetDocContext function returns the  document context specified by the supplied handle.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetDocContext",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hCryptXml",
        "description": "The handle of the document context to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "const CRYPT_XML_DOC_CTXT**",
        "name": "ppStruct",
        "description": "A pointer to a pointer to a  CRYPT_XML_DOC_CTXT structure that contains the returned document context."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptXmlGetReference function returns the   Reference element specified by the supplied handle.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetReference",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "HCRYPTXML",
        "description": "The handle of the Reference element to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "const CRYPT_XML_REFERENCE**",
        "name": "ppStruct",
        "description": "A pointer to a pointer to a CRYPT_XML_REFERENCE structure that contains the returned Reference element."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptXmlGetSignature function returns an XML Signature element.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetSignature",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hCryptXml",
        "description": "The handle of the Signature element."
      },
      {
        "in_out": "_Out_",
        "type": "const PCRYPT_XML_SIGNATURE**",
        "name": "ppStruct",
        "description": "A pointer to a  pointer to a CRYPT_XML_SIGNATURE structure to receive the signature."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptXmlGetStatus function returns a CRYPT_XML_STATUS structure that contains status information about the object specified by the supplied handle.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetStatus",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "HCRYPTXML",
        "name": "hCryptXml",
        "description": "A handle to a CRYPT_XML_SIGNATURE structure, an array  of CRYPT_XML_SIGNATURE structures , a CRYPT_XML_REFERENCE structure, or a  Manifest object about which to get status information."
      },
      {
        "in_out": "",
        "type": "CRYPT_XML_STATUS*",
        "name": "pStatus",
        "description": "A pointer to a CRYPT_XML_STATUS structure to receive the returned status information."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptXmlGetTransforms function returns information about the default transform chain engine.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlGetTransforms",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PCRYPT_XML_TRANSFORM_CHAIN_CONFIG**",
        "name": "pConfig",
        "description": "A pointer to a pointer to a CRYPT_XML_TRANSFORM_CHAIN_CONFIG structure to receive the returned transform information."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlImportPublicKey function imports the public key specified by the supplied handle.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlImportPublicKey",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that controls which CryptXML extensions are loaded. This parameter can be one of the following values.   ValueMeaning  CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest  are used.  When this flag is set, no other registered extensions are loaded."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_KEY_VALUE*",
        "name": "pKeyValue",
        "description": "A pointer to a CRYPT_XML_KEY_VALUE structure to receive the imported key."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to the handle of the key to import."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "If CryptXmlOpenToEncode function opens an XML digital signature to encode and returns a handle of the opened Signature element. The handle encapsulates a document context with a single CRYPT_XML_SIGNATURE structure and remains open until the CryptXmlClose function is called.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlOpenToEncode",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "CRYPT_XML_TRANSFORM_CHAIN_CONFIG*",
        "name": "pConfig",
        "description": "The handle of the transform chain engine. If this parameter is NULL, then a default engine is used to apply transforms."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that controls which CryptXML extensions are loaded and whether the XML is serialized. This parameter can be one of the following values.  ValueMeaning  CRYPT_XML_FLAG_NO_SERIALIZE 0x80000000   Inhibit serialization.  Note  Do not set this flag when multiple threads are accessing a CryptXml object. Serialization ensures mutual exclusion when two or more threads attempt  to simultaneously accept a CryptXml object or memory.     CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest are used. When this flag is set, no other registered extensions are loaded."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "wszId",
        "description": "A pointer to a null-terminated Unicode string that contains the Id attribute of the Signature element. If this parameter is NULL, then a new GUID is generated. If this parameter is an empty string, then no Id attribute is produced."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_PROPERTY*",
        "name": "rgProperty",
        "description": "A pointer to an array of CRYPT_XML_PROPERTY structures that specify additional properties."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cProperty",
        "description": "The number of elements in the array pointed to by the rgProperty parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "CRYPT_XML_BLOB*",
        "name": "pEncoded",
        "description": "A pointer to a CRYPT_XML_BLOB structure that contains the signature to encode."
      },
      {
        "in_out": "",
        "type": "HCRYPTXML*",
        "name": "phSignature",
        "description": "The handle to the Signature element."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptXmlOpenToDecode function opens an XML digital signature to decode   and returns the handle of the document context that encapsulates a CRYPT_XML_SIGNATURE structure.   The document context can include one or more Signature elements.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlOpenToDecode",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "CRYPT_XML_TRANSFORM_CHAIN_CONFIG*",
        "name": "pConfig",
        "description": "The handle of the transform chain engine.      If this parameter is NULL, then a default engine will be      used to apply transforms."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that controls which CryptXML extensions are loaded and whether the XML is serialized. This parameter can be one of the following values.   ValueMeaning  CRYPT_XML_FLAG_NO_SERIALIZE 0x80000000   Inhibit serialization.  Important  Do not set this flag when multiple threads are accessing a CryptXml object. Serialization ensures mutual exclusion when two or more threads attempt  to simultaneously accept a CryptXml object or memory.     CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest are used. When this flag is set, no other registered extensions are loaded."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_PROPERTY*",
        "name": "rgProperty",
        "description": "A pointer to an array of CRYPT_XML_PROPERTY structures that contain additional properties."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cProperty",
        "description": "The number of items in the array pointed to by the rgProperty parameter."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_BLOB*",
        "name": "pEncoded",
        "description": "A pointer to CRYPT_XML_BLOB structure that contains the signature to decode."
      },
      {
        "in_out": "",
        "type": "HCRYPTXML",
        "name": "phCryptXml",
        "description": "The handle of a Document Context object.  When you have finished using the handle, release it by passing it to the CryptXmlClose function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlSetHMACSecret function sets the HMAC secret on the handle before  calling the CryptXmlSign or CryptXmlVerify function.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlSetHMACSecret",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hSignature",
        "description": "The handle of the XML Signature element."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSecret",
        "description": "A pointer to a buffer that contains a block of bytes.      The pointer must be valid during the call to the CryptXmlSign or CryptXmlVerify function."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cbSecret",
        "description": "The size, in bytes, of the buffer pointed to by the pbSecret parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptXmlSign function creates a cryptographic signature of  a SignedInfo element.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlSign",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hSignature",
        "description": "The handle to a CRYPT_XML_SIGNATURE structure."
      },
      {
        "in_out": "_In_opt_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of a private key used to sign the SignedInfo element.     This parameter must be NULL for HMAC-based signature algorithms."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "A DWORD value that specifies the key type. This parameter can be one of the following values.  ValueMeaning  AT_KEYEXCHANGE 1   The key pair is a key exchange pair.   AT_SIGNATURE 2   The key pair is a signature pair.   CERT_NCRYPT_KEY_SPEC 0xFFFFFFFF   The key is a Cryptography API: Next Generation (CNG) key."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that controls how the data is signed. This parameter can be one of the following values.  ValueMeaning  CRYPT_XML_SIGN_ADD_KEYVALUE 0x00000001   Populate the KeyValue element from  the handle specified in the hKey parameter.  Important  The CRYPT_XML_SIGN_ADD_KEYVALUE flag cannot be used when the dwKeyInfoSpec parameter is set to CRYPT_XML_KEYINFO_SPEC_ENCODED.     CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest  are used.  When this flag is set, no other registered extensions are loaded."
      },
      {
        "in_out": "",
        "type": "CRYPT_XML_KEYINFO_SPEC",
        "name": "dwKeyInfoSpec",
        "description": "The type of data structure pointed to by the pvKeyInfoSpec parameter. Here are some possible combinations.  dwKeyInfecpvKeyInfoSpec  CRYPT_XML_KEYINFO_SPEC_NONE  Is set to  NULL   CRYPT_XML_KEYINFO_SPEC_ENCODED  Points to a CRYPT_XML_BLOB structure   CRYPT_XML_KEYINFO_SPEC_PARAM  Points to a CRYPT_XML_KEYINFO_PARAM structure"
      },
      {
        "in_out": "_In_opt_",
        "type": "const void",
        "name": "pvKeyInfoSpec",
        "description": "A pointer to a structure, the type of which is determined by the value of the dwKeyInfoSpec parameter."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM",
        "name": "pSignatureMethod",
        "description": "A pointer to a CRYPT_XML_ALGORITHM     structure that specifies the signature method."
      },
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM",
        "name": "pCanonicalization",
        "description": "A pointer to a CRYPT_XML_ALGORITHM     structure that specifies the canonicalization method."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptXmlVerifySignature function performs a cryptographic signature   validation of a SignedInfo element.",
    "library": "Cryptxml.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CryptXmlVerifySignature",
    "is_callback": 0,
    "dll": "Cryptxml.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTXML",
        "name": "hSignature",
        "description": "The handle of a Signature element."
      },
      {
        "in_out": "_In_opt_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "The handle of the public key to use to verify the signature value on      the SignedInfo element.     This parameter must be NULL for HMAC-based signature algorithms."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that controls which implementations are used. This parameter can be one of the following values.  ValueMeaning  CRYPT_XML_FLAG_DISABLE_EXTENSIONS 0x10000000   Only default implementations for the signature and digest are used. When this flag is set, no other registered extensions are loaded."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFN_CRYPT_XML_WRITE_CALLBACK callback function writes XML data.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT CALLBACK",
    "category": "Cryptography",
    "name": "PFN_CRYPT_XML_WRITE_CALLBACK",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "A pointer to an argument that is passed to the callback function pointed to by the pfnWrite parameter of the CryptXmlDllEncodeAlgorithm function."
      },
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "pbData",
        "description": "A pointer to a block of data to be written."
      },
      {
        "in_out": "",
        "type": "ULONG",
        "name": "cbData",
        "description": "The size, in bytes, of the data pointed to by the pbData parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  PFN_CRYPT_XML_CREATE_TRANSFORM  callback function creates a transform for a specified data provider.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "In the transform chain, the output of a transform is the input of the next transform in the chain.   The implementation of the callback function is responsible for calling the  provider close function on the input transform to release the input provider. ",
    "return_type": "HRESULT CALLBACK",
    "category": "Cryptography",
    "name": "PFN_CRYPT_XML_CREATE_TRANSFORM",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM*",
        "name": "pTransform",
        "description": "A CRYPT_XML_ALGORITHM structure that specifies the transform to apply."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_XML_DATA_PROVIDER*",
        "name": "pProviderIn",
        "description": "A pointer to a CRYPT_XML_DATA_PROVIDER structure that specifies the data provider to use as input for the transform."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_XML_DATA_PROVIDER*",
        "name": "pProviderOut",
        "description": "A pointer to a  CRYPT_XML_DATA_PROVIDER structure to receive the data provider of the transform."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFN_CRYPT_XML_DATA_PROVIDER_READ callback function reads XML data.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "The PFN_CRYPT_XML_DATA_PROVIDER_READ callback function returns a value when one of the      following conditions occurs: If the function succeeds, the function returns NO_ERROR. If the function fails, it returns an HRESULT value that indicates the error. If the value of pcbRead equals zero, then there is no more data available. ",
    "remarks": "The callback function does not return a value unless the number of bytes specified in cbData   is available or  the last block of data has been read. ",
    "return_type": "HRESULT CALLBACK",
    "category": "Cryptography",
    "name": "PFN_CRYPT_XML_DATA_PROVIDER_READ",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "A pointer to an application defined argument that is passed to the calling function."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to the buffer that receives the data to be read."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbData",
        "description": "The size, in bytes, of the data to be read."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pcbRead",
        "description": "A pointer to a variable that receives the number of bytes actually read."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The PFN_CRYPT_XML_DATA_PROVIDER_CLOSE callback function releases the data provider.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns zero. If the function fails, it returns an HRESULT value that indicates the error. ",
    "remarks": "",
    "return_type": "HRESULT CALLBACK",
    "category": "Cryptography",
    "name": "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvCallbackState",
        "description": "An application defined argument for the callback function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The PFN_CRYPT_XML_ENUM_ALG_INFO callback function enumerates predefined and registered   CRYPT_XML_ALGORITHM_INFO entries.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptxml.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. ",
    "remarks": "If the callback function returns FALSE, then stop the enumeration. This function enumerates  either the predefined and registered   entries or the structures identified by a selected URI group. ",
    "return_type": "BOOL CALLBACK",
    "category": "Cryptography",
    "name": "PFN_CRYPT_XML_ENUM_ALG_INFO",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_XML_ALGORITHM_INFO*",
        "name": "pInfo",
        "description": "A pointer to a CRYPT_XML_ALGORITHM_INFO structure."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to an argument that is passed to the callback function from the calling function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The SignerFreeSignerContext function frees a SIGNER_CONTEXT structure allocated by a previous call to the SignerSignEx function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerFreeSignerContext",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIGNER_CONTEXT*",
        "name": "pSignerContext",
        "description": "A pointer to the SIGNER_CONTEXT structure to free."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The SignerSignEx function signs the specified file and returns a pointer to the signed data.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerSignEx",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Modifies the behavior of this function.  If the file to be signed is a portable executable (PE) file, this can be zero or a combination of one or more of the following values. These identifiers are defined in Mssip.h.  ValueMeaning  SPC_EXC_PE_PAGE_HASHES_FLAG 0x10   Exclude page hashes when creating SIP indirect data for the PE file. This flag takes precedence over the SPC_INC_PE_PAGE_HASHES_FLAG flag. If neither the SPC_EXC_PE_PAGE_HASHES_FLAG or the SPC_INC_PE_PAGE_HASHES_FLAG flag is specified, the value set with the WintrustSetDefaultIncludePEPageHashes function is used for this setting. The default for this setting is to exclude page hashes when creating SIP indirect data for PE files. Windows Server 2003 and Windows XP:  This value is not supported.   SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG 0x20   This value is not supported.   SPC_INC_PE_DEBUG_INFO_FLAG 0x40   This value is not supported.   SPC_INC_PE_RESOURCES_FLAG 0x80   This value is not supported.   SPC_INC_PE_PAGE_HASHES_FLAG 0x100   Include page hashes when creating SIP indirect data for the PE file. Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIGNER_SUBJECT_INFO structure that specifies the subject to sign."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_CERT*",
        "name": "pSignerCert",
        "description": "A pointer to a SIGNER_CERT structure that specifies the certificate to use to create the digital signature."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SIGNATURE_INFO*",
        "name": "pSignatureInfo",
        "description": "A pointer to a SIGNER_SIGNATURE_INFO structure that contains information about the digital signature."
      },
      {
        "in_out": "_In_opt_",
        "type": "SIGNER_PROVIDER_INFO*",
        "name": "pProviderInfo",
        "description": "A pointer to a SIGNER_PROVIDER_INFO structure that specifies the cryptographic service provider (CSP) and private key information used to create the digital signature. If the value of this parameter is NULL, the value of the pSignerCert parameter must specify a certificate that is associated with a CSP."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The URL of a time stamp server."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "A pointer to an array of CRYPT_ATTRIBUTE structures that are added to a sign request. This parameter is ignored if the pwszHttpTimeStamp parameter does not contain a valid value that is not NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pSipData",
        "description": "A 32-bit value that is passed as additional data to SIP functions. The format and content of this is defined by the SIP provider."
      },
      {
        "in_out": "_Out_",
        "type": "SIGNER_CONTEXT**",
        "name": "ppSignerContext",
        "description": "The address of a pointer to the SIGNER_CONTEXT structure that contains the signed BLOB. When you have finished using the SIGNER_CONTEXT structure, free the SIGNER_CONTEXT structure by calling the SignerFreeSignerContext function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The SignError function calls      the GetLastError function and converts the return code to an      HRESULT.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds, it returns S_OK. If the method fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignError",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SignerSign function signs the specified file.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerSign",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIGNER_SUBJECT_INFO structure that specifies the subject to sign."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_CERT*",
        "name": "pSignerCert",
        "description": "A pointer to a SIGNER_CERT structure that specifies the certificate to use to create the digital signature."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SIGNATURE_INFO*",
        "name": "pSignatureInfo",
        "description": "A pointer to a SIGNER_SIGNATURE_INFO structure that contains information about the digital signature."
      },
      {
        "in_out": "_In_opt_",
        "type": "SIGNER_PROVIDER_INFO*",
        "name": "pProviderInfo",
        "description": "A pointer to a SIGNER_PROVIDER_INFO structure that specifies the cryptographic service provider (CSP) and private key information used to create the digital signature. If the value of this parameter is NULL, the value of the pSignerCert parameter must specify a certificate that is associated with a CSP."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The URL of a time stamp server."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "A pointer to an array of CRYPT_ATTRIBUTE structures that are added to a sign request. This parameter is ignored if the pwszHttpTimeStamp parameter does not contain a valid value that is not NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pSipData",
        "description": "A 32-bit value that is passed as additional data to SIP functions. The format and content of this is defined by the SIP provider."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 13,
    "description": "The  SignerSignEx2 function signs and time stamps the specified file, allowing multiple nested signatures.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. Possible error codes returned by this function include, but are not limited to, the following. For a list of common error codes, see Common HRESULT Values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerSignEx2",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Modifies the behavior of this function.  If the file to be signed is a portable executable (PE) file, this can be zero or a combination of one or more of the following values.  ValueMeaning  SPC_EXC_PE_PAGE_HASHES_FLAG 0x10   Exclude page hashes when creating SIP indirect data for the PE file. This flag takes precedence over the SPC_INC_PE_PAGE_HASHES_FLAG flag. If neither the SPC_EXC_PE_PAGE_HASHES_FLAG or the SPC_INC_PE_PAGE_HASHES_FLAG flag is specified, the value set with the WintrustSetDefaultIncludePEPageHashes function is used for this setting. The default for this setting is to exclude page hashes when creating SIP indirect data for PE files. This value is defined in the Mssip.h header file. Windows Server 2003 and Windows XP:  This value is not supported.   SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG 0x20   This value is not supported.   SPC_INC_PE_DEBUG_INFO_FLAG 0x40   This value is not supported.   SPC_INC_PE_RESOURCES_FLAG 0x80   This value is not supported.   SPC_INC_PE_PAGE_HASHES_FLAG 0x100   Include page hashes when creating SIP indirect data for the PE file. Windows Server 2003 and Windows XP:  This value is not supported. This value is defined in the Mssip.h header file.   SIG_APPEND 0x1000   The signature will be nested. If you set this flag before any signature has been added, the generated signature will be added as the outer signature. If you do not set this flag, the generated signature replaces the outer signature, deleting all inner signatures."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "Pointer to a SIGNER_SUBJECT_INFO structure that specifies the subject to sign."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_CERT*",
        "name": "pSignerCert",
        "description": "Pointer to a SIGNER_CERT structure that specifies the certificate to use to create the digital signature."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SIGNATURE_INFO*",
        "name": "pSignatureInfo",
        "description": "A pointer to a SIGNER_SIGNATURE_INFO structure that contains information about the digital signature."
      },
      {
        "in_out": "_In_opt_",
        "type": "SIGNER_PROVIDER_INFO*",
        "name": "pProviderInfo",
        "description": "Pointer to a SIGNER_PROVIDER_INFO structure that specifies the cryptographic service provider (CSP) and private key information used to create the digital signature. If the value of this parameter is NULL, the pSignerCert parameter must specify a certificate that is associated with a CSP."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "dwTimestampFlags",
        "description": "Flags that will be passed to SignerTimeStampEx3 if the pwszHttpTimeStamp parameter is not NULL. This can be one of the following values.   ValueMeaning  SIGNER_TIMESTAMP_AUTHENTICODE   Default value. Specifies an Authenticode timestamp.   SIGNER_TIMESTAMP_RFC3161   Specifies an RFC 3161 timestamp.     This parameter is ignored if the pwszHttpTimeStamp parameter is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCSTR",
        "name": "pszTimestampAlgorithmOid",
        "description": "Object identifier of the algorithm to be used for creating an RFC 3161 timestamp. This parameter is ignored for Authenticode time stamps."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "URL of the time stamp server."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "Pointer to an array of CRYPT_ATTRIBUTE structures that are added to a sign request. This parameter is ignored if the pwszHttpTimeStamp parameter does not contain a valid value or is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pSipData",
        "description": "A 32-bit value that is passed as additional data to SIP functions. The format and content of this is defined by the SIP provider."
      },
      {
        "in_out": "_Out_",
        "type": "SIGNER_CONTEXT**",
        "name": "ppSignerContext",
        "description": "The address of a pointer to the SIGNER_CONTEXT structure that contains the signed BLOB. When you have finished using the SIGNER_CONTEXT structure, free the SIGNER_CONTEXT structure by calling the SignerFreeSignerContext function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCERT_STRONG_SIGN_PARA",
        "name": "pCryptoPolicy",
        "description": "If present, a pointer to a CERT_STRONG_SIGN_PARA structure that contains the parameters used to check for strong signatures. If either a certificate or its chain does not pass, the file is not altered in any way. If a URL is passed in to specify a Time Stamping Authority (TSA), this policy is also applied to the time stamp."
      },
      {
        "in_out": "_Reserved_",
        "type": "PVOID",
        "name": "pReserved",
        "description": "Reserved. This value must be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SignerTimeStamp function time stamps the specified subject.  This function supports Authenticode time stamping.  To perform X.509 Public Key Infrastructure (RFC 3161) time stamping, use the SignerTimeStampEx2 function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerTimeStamp",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "The address of a SIGNER_SUBJECT_INFO structure that represents the subject to be time stamped."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The address of a null-terminated Unicode string that contains the URL of a time stamp server."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "The address of a CRYPT_ATTRIBUTES structure that contains additional attributes that are added to the time stamp request. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pSipData",
        "description": "A 32-bit value that is passed as additional data to SIP functions. The format and content of this is defined by the SIP provider. This parameter is optional and can be NULL if it is not included."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SignerTimeStampEx2 function time stamps the specified subject and optionally returns a pointer to  a SIGNER_CONTEXT structure that contains a pointer to a BLOB. This function can be used to perform X.509 Public Key Infrastructure, RFC 3161\u00e2\u0080\u0093compliant, time stamps.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerTimeStampEx2",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Value that specifies  the type of time stamp to generate. ..."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "The address of a SIGNER_SUBJECT_INFO structure that represents the subject to be time stamped."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The address of a null-terminated Unicode string that contains the URL of a time stamp server."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "dwAlgId",
        "description": "Specifies a hash algorithm to be used for performing RFC 3161\u2013compliant time stamps. ..."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "Optional. The address of a CRYPT_ATTRIBUTES structure that contains additional attributes that are added to the time stamp request. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pSipData",
        "description": "Optional. A 32-bit value that is passed as additional data to subject interface package (SIP) functions. The format and content of this parameter is defined by the SIP provider. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_Out_",
        "type": "SIGNER_CONTEXT**",
        "name": "ppSignerContext",
        "description": "Optional. The address of a pointer to the SIGNER_CONTEXT structure that contains the signed BLOB. When you have finished using the SIGNER_CONTEXT structure, free it by calling the SignerFreeSignerContext function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SignerTimeStampEx function time stamps the specified subject and optionally returns a pointer to  a SIGNER_CONTEXT structure that contains a pointer to a BLOB.  This function supports Authenticode time stamping. To perform X.509 Public Key Infrastructure (RFC 3161) time stamping, use the SignerTimeStampEx2 function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerTimeStampEx",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved. This parameter must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "The address of a SIGNER_SUBJECT_INFO structure that represents the subject to be time stamped."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The address of a null-terminated Unicode string that contains the URL of a time stamp server."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "Optional. The address of a CRYPT_ATTRIBUTES structure that contains additional attributes that are added to the time stamp request. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pSipData",
        "description": "Optional. A 32-bit value that is passed as additional data to subject interface package (SIP) functions. The format and content of this parameter is defined by the SIP provider. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_Out_",
        "type": "SIGNER_CONTEXT**",
        "name": "ppSignerContext",
        "description": "Optional. The address of a pointer to the SIGNER_CONTEXT structure that contains the signed BLOB. When you have finished using the SIGNER_CONTEXT structure, free it by calling the SignerFreeSignerContext function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "The  SignerTimeStampEx3 function time stamps the specified subject and supports setting time stamps on multiple signatures.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. Possible error codes returned by this function include, but are not limited to, the following. For a list of common error codes, see Common HRESULT Values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "SignerTimeStampEx3",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag that specifies  the type of time stamp to generate. ..."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Specifies the sequence number of the signature to which the timestamp will be added. If this value is zero (0), the outer signature will be time stamped."
      },
      {
        "in_out": "_In_",
        "type": "SIGNER_SUBJECT_INFO*",
        "name": "pSubjectInfo",
        "description": "The address of a SIGNER_SUBJECT_INFO structure that represents the subject to be time stamped."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszHttpTimeStamp",
        "description": "The address of a null-terminated Unicode string that contains the URL of a time stamp server."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pszAlgorithmOid",
        "description": "A hash algorithm to be used for performing RFC 3161\u2013compliant time stamps. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ATTRIBUTES",
        "name": "psRequest",
        "description": "Optional. The address of a CRYPT_ATTRIBUTES structure that contains additional attributes that are added to the time stamp request. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pSipData",
        "description": "Optional. A 32-bit value that is passed as additional data to subject interface package (SIP) functions. The format and content of this parameter is defined by the SIP provider. This parameter is optional and can be NULL if it is not included."
      },
      {
        "in_out": "_Out_",
        "type": "SIGNER_CONTEXT**",
        "name": "ppSignerContext",
        "description": "Optional. The address of a pointer to the SIGNER_CONTEXT structure that contains the signed BLOB. When you have finished using the SIGNER_CONTEXT structure, free it by calling the SignerFreeSignerContext function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCERT_STRONG_SIGN_PARA",
        "name": "pCryptoPolicy",
        "description": "If present, a pointer to a CERT_STRONG_SIGN_PARA structure that contains the parameters used to check for strong signatures. The time stamp must pass this cryptographic policy."
      },
      {
        "in_out": "_Reserved_",
        "type": "PVOID",
        "name": "pReserved",
        "description": "Reserved. This value must be NULL."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptAcquireContext function is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). This returned handle is used in calls to CryptoAPI functions that use the selected CSP.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes defined in Winerror.h follow.  ",
    "remarks": "The pszContainer parameter specifies the name of the container that is used to hold the key. Each container can contain one key. If  you  specify the name of an existing container when creating keys, the new key will overwrite a previous one. The combination of the CSP name and the key container name uniquely identifies a single key on the system. If one application tries to modify a key container while another application is using it, unpredictable behavior may result. If you set the  pszContainer parameter to NULL, the default key container name is used. When the Microsoft software CSPs are called in this manner, a new container is created each time the CryptAcquireContext function is called. However, different CSPs may behave differently in this regard. In particular, a CSP may have a single default container that is shared by all applications accessing the CSP. Therefore, applications must not use the default key container to store private keys. Instead, either prevent key storage by passing the CRYPT_VERIFYCONTEXT flag in the dwFlags parameter, or use an application-specific container that is unlikely to be used by another application. An application can obtain the name of the key container in use by using the  CryptGetProvParam function to read the PP_CONTAINER value. For performance reasons, we recommend that you set the pszContainer parameter to NULL and the dwFlags parameter to CRYPT_VERIFYCONTEXT in all situations where you do not require a persisted key. In particular, consider setting the  pszContainer parameter to NULL and the dwFlags parameter to CRYPT_VERIFYCONTEXT for the following scenarios: If you plan to perform private key operations, the best way to acquire a context is to try to open the container. If this attempt fails with NTE_BAD_KEYSET, then create the container by using the CRYPT_NEWKEYSET flag. The following example shows acquiring a cryptographic context and access to public/private key pairs in a key container. If the requested key container does not exist, it is created. For an example that includes the complete context for this example, see Example C Program: Creating a Key Container and Generating Keys. For additional examples, see  Example C Program: Using CryptAcquireContext. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptAcquireContext",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "HCRYPTPROV*",
        "name": "phProv",
        "description": "A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the CryptReleaseContext function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszContainer",
        "description": "The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when dwFlags is set to CRYPT_VERIFYCONTEXT, pszContainer must be set to NULL. However, for hardware-based CSPs, such as a smart card CSP, can be access publically available information in the specfied container. For more information about the usage of the pszContainer parameter, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszProvider",
        "description": "A null-terminated string that contains the name of the CSP to be used.     If this parameter is NULL, the user default provider is used. For more information, see  Cryptographic Service Provider Contexts. For a list of available cryptographic providers, see  Cryptographic Provider Names. An application can obtain the name of the CSP in use by using the CryptGetProvParam function to read the PP_NAME CSP value in the dwParam parameter. The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvType",
        "description": "Specifies the type of provider to acquire. Defined provider types are discussed in  Cryptographic Provider Types."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag values. This parameter is usually set to zero, but some applications set one or more of the following flags.  ValueMeaning  CRYPT_VERIFYCONTEXT   This option is intended for applications that are using ephemeral keys, or applications that do not require access to persisted private keys, such as applications that perform only hashing, encryption, and digital signature verification. Only applications that create signatures or decrypt messages need access to a private key. In most cases, this flag should be set. For file-based CSPs, when this flag is set, the pszContainer parameter must be set to NULL. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary public/private key pairs can be created, but they are not persisted. For hardware-based CSPs, such as a smart card CSP, if the pszContainer parameter is NULL or blank, this flag implies that no access to any keys is required, and that no UI should be presented to the user.  This form is used to connect to the CSP to query its capabilities but not to actually use its keys. If the pszContainer parameter is not NULL and not blank, then this flag implies that access to only the publicly available information within the specified container is required.  The CSP should not ask for a PIN.  Attempts to access private information (for example, the CryptSignHash function) will fail. When CryptAcquireContext is called, many CSPs require input from the owning user before granting access to the private keys in the key container. For example, the private keys can be encrypted, requiring a password from the user before they can be used. However, if the CRYPT_VERIFYCONTEXT flag is specified, access to the private keys is not required and the user interface can be bypassed.   CRYPT_NEWKEYSET   Creates a new key container with the name specified by pszContainer. If pszContainer is NULL, a key container with the default name is created.   CRYPT_MACHINE_KEYSET   By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.  Windows XP:  A key container created without this flag by an administrator can be accessed only by the user creating the key container and the local system account. A key container created without this flag by a user that is not an administrator can be accessed only by the user creating the key container and the local system account. The CRYPT_MACHINE_KEYSET flag can be combined with all of the other flags to indicate that the key container of interest is a computer key container and the CSP treats it as such. For Base Providers, this means that the keys are stored locally on the computer that created the key container. If a key container is to be a computer container, the CRYPT_MACHINE_KEYSET flag must be used with all calls to CryptAcquireContext that reference the computer container. The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by a user with administrator privileges unless access rights to the container are granted using  CryptSetProvParam.  Windows XP:  The key container created with CRYPT_MACHINE_KEYSET by an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using  CryptSetProvParam. The key container created with CRYPT_MACHINE_KEYSET by a user that is not an administrator can be accessed only by its creator and by the local system account unless access rights to the container are granted using  CryptSetProvParam. The CRYPT_MACHINE_KEYSET flag is useful when the user is accessing from a service or user account that did not log on interactively. When key containers are created, most CSPs do not automatically create any public/private key pairs. These keys must be created as a separate step with the  CryptGenKey function.   CRYPT_DELETEKEYSET   Delete the key container specified by pszContainer. If pszContainer is NULL, the key container with the default name is deleted. All key pairs in the key container are also destroyed.     When this flag is set, the value returned in phProv is undefined, and thus, the  CryptReleaseContext function need not be called afterward.   CRYPT_SILENT   The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to CryptGenKey with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT. CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.   CRYPT_DEFAULT_CONTAINER_OPTIONAL   Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using CryptSetProvParam. This flag can only be used with smart card CSPs.   Windows Server 2003 and Windows XP:  This flag is not supported."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptContextAddRef function adds one to the reference count of an  HCRYPTPROV cryptographic service provider (CSP) handle. This function should be used if the CSP handle is included as a member of any structure passed to another function. The  CryptReleaseContext function should be called when the CSP handle is no longer needed.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "This function increases the reference count on a  HCRYPTPROV handle so that multiple calls to  CryptReleaseContext are required to actually release the handle. The following example increments the reference count on an acquired CSP handle. For another example that uses this function, see Example C Program: Using CryptAcquireContext. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptContextAddRef",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "HCRYPTPROV handle for which the reference count is being incremented. This handle must have already been created using  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptEnumProviders function retrieves the first or next available cryptographic service providers (CSPs). Used in a loop, this function can retrieve in sequence all of the CSPs available on a computer.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": "This function  enumerates the providers available on a computer. The provider types can be enumerated by using  CryptEnumProviderTypes. The following example shows a loop listing all available cryptographic service providers. For another example that uses the  CryptEnumProviders function, see Example C Program: Enumerating CSP Providers and Provider Types. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEnumProviders",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Index of the next provider to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwProvType",
        "description": "Address of the DWORD value designating the type of the enumerated provider."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszProvName",
        "description": "A pointer to a buffer that receives the data from the enumerated provider. This is a string including the terminating null character. This parameter can be NULL to set the size of the name for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbProvName",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pszProvName parameter. When the function returns, the DWORD value contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptEnumProviderTypes function retrieves the first or next types of cryptographic service provider (CSP) supported on the computer. Used in a loop, this function retrieves in sequence all of the CSP types available on a computer.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": "This function enumerates the provider types available on a computer. Providers for any specific provider type can be enumerated using  CryptEnumProviders. The following example shows a loop listing all available cryptographic service provider types. For another example that uses the CryptEnumProviderTypes function, see Example C Program: Enumerating CSP Providers and Provider Types. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEnumProviderTypes",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Index of the next provider type to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwProvType",
        "description": "Address of the DWORD value designating the enumerated provider type."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszTypeName",
        "description": "A pointer to a buffer that receives the data from the enumerated provider type. This is a string including the terminating NULL character. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by pcbTypeName is zero.     This parameter can be NULL to get the size of the name for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbTypeName",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pszTypeName parameter. When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer. Some provider types do not have display names, and in this case no name is returned and the returned value pointed to by pcbTypeName is zero.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptGetDefaultProvider function finds the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user. The name of the default CSP for the provider type specified in the dwProvType parameter is returned in the pszProvName buffer.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error code prefaced by NTE is generated by the particular CSP being used. Possible error codes include the following.  ",
    "remarks": "This function determines which installed CSP is currently set as the default for the local computer or current user. This information is often displayed to the user. The following example retrieves the name of the default CSP for the PROV_RSA_FULL provider type. For another example that uses this function, see Example C Program: Enumerating CSP Providers and Provider Types. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetDefaultProvider",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvType",
        "description": "The provider type for which the default CSP name is to be found.  Defined provider types are  as follows:   PROV_RSA_FULL   PROV_RSA_SIG   PROV_DSS   PROV_DSS_DH   PROV_DH_SCHANNEL   PROV_FORTEZZA   PROV_MS_EXCHANGE   PROV_RSA_SCHANNEL   PROV_SSL"
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "This parameter is reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined.  ValueMeaning  CRYPT_USER_DEFAULT 0x00000002   Returns the user-context default CSP of the specified type.   CRYPT_MACHINE_DEFAULT 0x00000001   Returns the computer default CSP of the specified type."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszProvName",
        "description": "A pointer to a null-terminated character string buffer to receive the name of the default CSP. To find the size of the buffer for memory allocation purposes, this parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbProvName",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the pszProvName parameter. When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptGetProvParam function retrieves parameters that govern the operations of a cryptographic service provider (CSP).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": "This function must not be used on a thread of a multithreaded program. The following values are returned in pbData if dwParam is PP_IMPTYPE.   The dwFlags parameter is used to pass in the SECURITY_INFORMATION bit flags that indicate the requested security information. The pointer to the security descriptor is returned in the pbData parameter and the length of the security descriptor is returned in the pdwDataLen parameter. Key-container security is handled with  SetFileSecurity and  GetFileSecurity.  The class of an algorithm enumerated with dwParam set to PP_ENUMALGS or PP_ENUMALGS_EX can be determined. This might be done to display a list of encryption algorithms supported and to disregard the rest. The GET_ALG_CLASS(x) macro takes an algorithm identifier as an argument and returns a code indicating the general class of that algorithm. Possible return values include: The following table lists the algorithms supported by the Microsoft Base Cryptographic Provider along with the class of each algorithm.  Applications must not use an algorithm with an algorithm identifier that is not recognized. Using an unknown cryptographic algorithm can produce unpredictable results. The following example shows finding the name of the CSP associated with a cryptographic service provider handle and the name of the key container associated with the handle. For the complete context for this example, see  Example C Program: Using CryptAcquireContext. For another example that  uses this function, see Example C Program: Enumerating CSP Providers and Provider Types. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetProvParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A handle of the CSP target of the query. This handle must have been created by using  the CryptAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "The nature of the query. ..."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer to receive the data. The form of this data varies depending on the value of dwParam. When dwParam is set to PP_USE_HARDWARE_RNG, pbData must be set to NULL. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the pbData parameter. When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.  \t\t\t\t\t\tIf PP_ENUMALGS, or PP_ENUMALGS_EX is set, the pdwDataLen parameter works somewhat differently. If pbData is NULL or the value pointed to by pdwDataLen is too small, the value returned in this parameter is the size of the largest item in the enumeration list instead of the size of the item currently being read. If PP_ENUMCONTAINERS is set, the first call to the function returns the size of the maximum key-container allowed by the current provider. This is in contrast to other possible behaviors, like returning the length of the longest existing container, or the length of the current container. Subsequent enumerating calls will not change the dwLen parameter. For each enumerated container, the caller can determine the length of the null-terminated string programmatically, if desired. If one of the enumeration values is read and the pbData parameter is NULL, the CRYPT_FIRST flag must be specified for the size information to be correctly retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If dwParam is PP_KEYSET_SEC_DESCR, the security descriptor on the key container where the keys are stored is retrieved. For this case, dwFlags is used to pass in the SECURITY_INFORMATION bit flags that indicate the requested security information, as defined in the Platform SDK. SECURITY_INFORMATION bit flags can be combined with a bitwise-OR operation. \t\t\t\t\t\t \t\t\t\t\t  The following values are defined for use with PP_KEYSET_SEC_DESCR.  ValueMeaning  OWNER_SECURITY_INFORMATION   Owner identifier of the object is being referenced.   GROUP_SECURITY_INFORMATION   Primary group identifier of the object is being referenced.   DACL_SECURITY_INFORMATION   Discretionary ACL of the object is being referenced.   SACL_SECURITY_INFORMATION   System ACL of the object is being referenced.      The following values are defined for use with PP_ENUMALGS, PP_ENUMALGS_EX, and PP_ENUMCONTAINERS.  ValueMeaning  CRYPT_FIRST 1 (0x1)   Retrieve the first element in the enumeration. This has the same effect as resetting the enumerator.   CRYPT_NEXT 2 (0x2)   Retrieve the next element in the enumeration. When there are no more elements to retrieve, this function will fail and set the last error to ERROR_NO_MORE_ITEMS.   CRYPT_SGC_ENUM 4 (0x4)   Retrieve server-gated cryptography (SGC) enabled certificates. SGC enabled certificates are no longer supported. For more information, see Microsoft Support Article 875450.   CRYPT_SGC   This flag is not used.   CRYPT_FASTSGC   This flag is not used."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptInstallDefaultContext function installs a specific provider to be the default context provider for the specified algorithm.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "The installed default context providers are stack ordered, thus when searching for a default context provider, the system starts with the most recently installed provider. The per-thread list of providers is searched before the per-process list of providers. After a match is found, the system does not continue to search for other matches. The installed provider handle must remain available for use until CryptUninstallDefaultContext is called, or the thread or process exits. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptInstallDefaultContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "The handle of the cryptographic service provider to be used as the default context. This handle is obtained by using the  CryptAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDefaultType",
        "description": "Specifies the type of context to install. This must be one of the following values.  ValueMeaning  CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID   Installs the default provider used to verify a single certificate signature type.  The pvDefaultPara parameter is the address of a null-terminated ANSI string that contains the object identifier of the certificate signature algorithm to install the provider for, for example, szOID_OIWSEC_md5RSA. If the pvDefaultPara parameter is NULL, the specified provider is used to verify all certificate signatures. The pvDefaultPara parameter cannot be NULL when the CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG flag is set.   CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID   Installs the default provider used to verify multiple certificate signature types.  The pvDefaultPara parameter is the address of a CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA structure that contains an array of object identifiers that identify the certificate signature algorithms to install the specified provider for."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvDefaultPara",
        "description": "Specifies the object or objects to install the default context provider for. The format of this parameter depends on the contents of the dwDefaultType parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG   The provider handle specified by the hCryptProv parameter is released automatically when the process or thread ends. If this flag is not specified, it is the caller's responsibility to release the provider handle by using the CryptReleaseContext function when the handle is no longer needed. The provider handle is not released if the CryptUninstallDefaultContext function is called before the process or thread exits.   CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG   The provider applies to all threads in the process. If this flag is not specified, the provider only applies to the calling thread. The pvDefaultPara parameter cannot be NULL when this flag is set."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved for future use."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTDEFAULTCONTEXT*",
        "name": "phDefaultContext",
        "description": "The address of an HCRYPTDEFAULTCONTEXT variable that receives the default context handle. This handle is passed to the CryptUninstallDefaultContext function to uninstall the default context provider."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptReleaseContext function releases the handle of a cryptographic service provider (CSP) and a key container. At each call to this function, the reference count on the CSP is reduced by one. When the reference count reaches zero, the context is fully released and it can no longer be used by any function in the application.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Some possible error codes are listed in the following table.  ",
    "remarks": "After this function has been called, the CSP session is finished and all existing session keys and hash objects created by using the hProv handle are no longer valid. In practice, all of these objects should be destroyed with calls to  CryptDestroyKey and  CryptDestroyHash before CryptReleaseContext is called. For an example that uses this function, see Example C Program: Creating and Hashing a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptReleaseContext",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "Handle of a cryptographic service provider (CSP) created by a call to  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero. If dwFlags is not set to zero, this function returns FALSE but the CSP is released."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptSetProvider function specifies the current user's default cryptographic service provider (CSP).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Some possible error codes are listed in the following table.  Errors can also be propagated from internal calls to RegCreateKeyEx and RegSetValueEx. ",
    "remarks": "Typical applications do not specify a CSP name when calling  CryptAcquireContext; however, an application does have the option of selecting a specific CSP. This gives a user the freedom to select a CSP with an appropriate level of security. Since calling CryptSetProvider determines the CSP of a specified type used by all applications that run from that point on, this function must not be called without users' consent. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetProvider",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszProvName",
        "description": "Name of the new default CSP. The named CSP must be installed on the computer. For a list of available cryptographic providers, see  Cryptographic Provider Names."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvType",
        "description": "Provider type of the CSP specified by pszProvName."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptSetProviderEx function specifies the default cryptographic service provider (CSP) of a specified provider type for the local computer or current user.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Possible error codes include those shown in the following table.  ",
    "remarks": "Most applications do not specify a CSP name when calling the  CryptAcquireContext function; however, an application can specify a CSP name and thereby select a CSP with an appropriate level of security. Because calls to CryptSetProviderEx determine the CSP of a specified type used by all applications from that point on, CryptSetProviderEx must never be called without a user's consent. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetProviderEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszProvName",
        "description": "The name of the new default CSP. This must be a CSP installed on the computer. For a list of available cryptographic providers, see  Cryptographic Provider Names."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvType",
        "description": "The provider type of the CSP specified by pszProvName."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "This parameter is reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined.  ValueMeaning  CRYPT_DELETE_DEFAULT 0x00000004   Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.   CRYPT_USER_DEFAULT 0x00000002   Causes the user-context default CSP of the specified type to be set.   CRYPT_MACHINE_DEFAULT 0x00000001   Causes the computer default CSP of the specified type to be set."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptSetProvParam function customizes the operations of a cryptographic service provider (CSP). This function is commonly used to set a security descriptor on the key container associated with a CSP to control access to the private keys in that key container.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Error codes include the following.  For an example that uses this function, see  Example C Program: Enumerating CSP Providers and Provider Types. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetProvParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "The handle of a CSP for which to set values. This handle must have already been created by using  the CryptAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "Specifies the parameter to set. This can be one of the following values.  ValueMeaning  PP_CLIENT_HWND 1 (0x1)   Set the window handle that the provider uses as the parent of any dialog boxes it creates. pbData contains a pointer to an HWND that contains the parent window handle. This parameter must be set before calling  CryptAcquireContext because many CSPs will display a user interface when CryptAcquireContext is called. You can pass NULL for the hProv parameter to set this window handle for all cryptographic contexts subsequently acquired within this process.   PP_DELETEKEY 24 (0x18)   Delete the ephemeral key associated with a hash, encryption, or verification context. This will free memory and clear registry settings associated with the key.   PP_KEYEXCHANGE_ALG   This constant is not used.   PP_KEYEXCHANGE_PIN 32 (0x20)   Specifies that the key exchange PIN is contained in pbData. The PIN is represented as a null-terminated ASCII string.   PP_KEYEXCHANGE_KEYSIZE   This constant is not used.   PP_KEYSET_SEC_DESCR 8 (0x8)   Sets the security descriptor on the key storage container. The pbData parameter is the address of a SECURITY_DESCRIPTOR structure that contains the new security descriptor for the key storage container.   PP_PIN_PROMPT_STRING 44 (0x2C)   Sets an alternate prompt string to display to the user when the user's PIN is requested. The pbData parameter  is a pointer to a null-terminated Unicode string.   PP_ROOT_CERTSTORE 46 (0x2E)   Sets the root certificate store for the smart card.  The provider will copy the root certificates from this store onto the smart card. The pbData parameter is an HCERTSTORE variable that contains the handle of the new certificate store. The provider will copy the certificates from the store during this call, so it is safe to close this store after this function is called. Windows XP and Windows Server 2003:  This parameter is not supported.   PP_SIGNATURE_ALG   This constant is not used.   PP_SIGNATURE_PIN 33 (0x21)   Specifies the signature PIN. The pbData parameter is a null-terminated ASCII string that represents the PIN.   PP_SIGNATURE_KEYSIZE   This constant is not used.   PP_UI_PROMPT 21 (0x15)   For a smart card provider, sets the search string that is displayed to the user as a prompt to insert the smart card. This string is passed as the lpstrSearchDesc member of the OPENCARDNAME_EX structure that is passed to the SCardUIDlgSelectCard function. This string is used for the lifetime of the calling process. The pbData parameter is a pointer to a null-terminated Unicode string.   PP_USE_HARDWARE_RNG 38 (0x26)   Specifies that the CSP must exclusively use the hardware random number generator (RNG). When PP_USE_HARDWARE_RNG is set, random values are taken exclusively from the hardware RNG and no other sources are used. If a hardware RNG is supported by the CSP and it can be exclusively used, the function succeeds and returns TRUE; otherwise, the function fails and returns FALSE. The pbData parameter must be NULL and dwFlags must be zero when using this value. None of the Microsoft CSPs currently support using a hardware RNG.   PP_USER_CERTSTORE 42 (0x2A)   Specifies the user certificate store for the smart card. This certificate store contains all of the user certificates that are stored on the smart card. The certificates in this store are encoded by using PKCS_7_ASN_ENCODING or X509_ASN_ENCODING encoding and should contain the CERT_KEY_PROV_INFO_PROP_ID property.  The pbData parameter is an HCERTSTORE variable that receives the handle of an in-memory certificate store. When this handle is no longer needed, the caller must close it by using the CertCloseStore function. Windows Server 2003 and Windows XP:  This parameter is not supported.   PP_SECURE_KEYEXCHANGE_PIN 47 (0x2F)   Specifies that an encrypted key exchange PIN is contained in pbData. The pbData parameter contains a DATA_BLOB.   PP_SECURE_SIGNATURE_PIN 48 (0x30)   Specifies that an encrypted signature PIN is contained in pbData. The pbData parameter contains a DATA_BLOB.   PP_SMARTCARD_READER 43 (0x2B)   Specifies the name of the smart card reader. The pbData parameter is the address of an ANSI character array that contains a null-terminated ANSI string that contains the name of the smart card reader.  Windows Server 2003 and Windows XP:  This parameter is not supported.   PP_SMARTCARD_GUID  45 (0x2D)   Specifies the identifier of the smart card. The pbData parameter is the address of a GUID structure that contains the identifier of the smart card. Windows Server 2003 and Windows XP:  This parameter is not supported."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "A pointer to a data buffer that contains the value to be set as a provider parameter. The form of this data varies depending on the dwParam value. If dwParam contains PP_USE_HARDWARE_RNG, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If dwParam contains PP_KEYSET_SEC_DESCR, dwFlags contains the SECURITY_INFORMATION applicable bit flags, as defined in the Platform SDK. Key-container security is handled by using  SetFileSecurity and  GetFileSecurity. These bit flags can be combined by using a bitwise-OR operation. For more information, see  CryptGetProvParam. If dwParam is PP_USE_HARDWARE_RNG or PP_DELETEKEY, dwFlags must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptUninstallDefaultContext function removes a default context previously installed by CryptInstallDefaultContext. This function will block until any threads currently using this context finish, if the default context was installed with CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG set.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE) .If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUninstallDefaultContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTDEFAULTCONTEXT",
        "name": "hDefaultContext",
        "description": "Handle of the context to be released."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The  FreeCryptProvFromCertEx function releases the handle either to a cryptographic service provider (CSP) or to  a Cryptography API: Next Generation (CNG)  key.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "FreeCryptProvFromCertEx",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fAcquired",
        "description": "A value that specifies whether the provider handle was acquired from the certificate."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hProv",
        "description": "A handle to a CAPICOM CSP or a handle to a CNG key."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "The address of a DWORD variable that receives additional information about the key. This can be one of the following values.  ValueMeaning  AT_KEYEXCHANGE   The key pair is a key exchange pair.   AT_SIGNATURE   The key pair is a signature pair.   CERT_NCRYPT_KEY_SPEC   The key is a CNG key. Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pwszCapiProvider",
        "description": "A pointer to a null-terminated string for the provider name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProviderType",
        "description": "Specifies the CSP type. This can be zero or one of the Cryptographic Provider Types. If this member is zero, the key container is one of the CNG key storage providers."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pwszTmpContainer",
        "description": "A pointer to a null-terminated string for the name of the temporary key container."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptDeriveKey function generates cryptographic session keys derived from a base data value. This function guarantees that when the same cryptographic service provider (CSP) and algorithms are used, the keys generated from the same base data are identical. The base data can be a password or any other user data.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes are listed in the following table.  ",
    "remarks": "When keys are generated for symmetric block ciphers, the key by default is set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk-encrypting data. To change these parameters, use the  CryptSetKeyParam function. The CryptDeriveKey function completes the hash. After CryptDeriveKey has been called, no more data can be added to the hash. Additional calls to  CryptHashData or  CryptHashSessionKey fail. After the application is done with the hash,  CryptDestroyHash must be called to destroy the hash object. To choose an appropriate key length, the following methods are recommended. Let n be the required derived key length, in bytes.  The derived key is the first n bytes of the hash value after the hash computation has been completed by CryptDeriveKey.  If the hash is not a member of the SHA-2 family and the required key is for either 3DES or AES, the key is derived as follows: The default RSA Full Cryptographic Service Provider is the Microsoft RSA Strong Cryptographic Provider. The default DSS Signature Diffie-Hellman Cryptographic Service Provider is the Microsoft Enhanced DSS Diffie-Hellman Cryptographic Provider. Each of these CSPs has a default 128-bit symmetric key length for RC2 and RC4. The following table lists minimum, default, and maximum key lengths for session key by algorithm and provider.  For an example that uses this function, see Example C Program: Deriving a Session Key from a Password. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDeriveKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A HCRYPTPROV handle of a CSP created by a call to  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "Algid",
        "description": "An  \t\t\t\t\t\tALG_ID structure that identifies the symmetric encryption algorithm for which the key is to be generated. The algorithms available will most likely be different for each CSP. For more information about which algorithm identifier is used by the different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE, see  ALG_ID. For more information about ALG_ID values to use with the Microsoft Base Cryptographic Provider, see  Base Provider Algorithms. For more information about ALG_ID values to use with the Microsoft Strong Cryptographic Provider or the Microsoft Enhanced Cryptographic Provider, see  Enhanced Provider Algorithms."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hBaseData",
        "description": "A handle to a hash object that has been fed the exact base data. To obtain this handle, an application must first create a hash object with  CryptCreateHash and then add the base data to the hash object with  CryptHashData. This process is described in detail in  Hashes and Digital Signatures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the type of key generated. The sizes of a session key can be set when the key is generated. The key size, representing the length of the key modulus in bits, is set with the upper 16 bits of this parameter. Thus, if a 128-bit RC4 session key is to be generated, the value 0x00800000 is combined with any other dwFlags predefined value with a bitwise-OR operation. Due to changing export control restrictions, the default CSP and default key length may change between operating system releases. It is important that both the encryption and decryption use the same CSP and that the key length be explicitly set using the dwFlags parameter to ensure interoperability on different operating system platforms. The lower 16 bits of this parameter can be zero or you can specify one or more of the following flags by using the bitwise-OR operator to combine them.  ValueMeaning  CRYPT_CREATE_SALT   Typically, when a session key is made from a hash value, there are a number of leftover bits. For example, if the hash value is 128 bits and the session key is 40 bits, there will be 88 bits left over. If this flag is set, then the key is assigned a salt value based on the unused hash value bits. You can retrieve this salt value by using the  CryptGetKeyParam function with the dwParam parameter set to KP_SALT. If this flag is not set, then the key is given a salt value of zero. When keys with nonzero salt values are exported (by using  CryptExportKey), the salt value must also be obtained and kept with the key BLOB.   CRYPT_EXPORTABLE   If this flag is set, the session key can be transferred out of the CSP into a key BLOB through the  CryptExportKey function. Because keys generally must be exportable, this flag should usually be set. If this flag is not set, then the session key is not exportable. This means the key is available only within the current session and only the application that created it is able to use it. This flag does not apply to public/private key pairs.   CRYPT_NO_SALT   This flag specifies that a no salt value gets allocated for a 40-bit symmetric key. For more information, see  Salt Value Functionality.   CRYPT_UPDATE_KEY   Some CSPs use session keys that are derived from multiple hash values. When this is the case, CryptDeriveKey must be called multiple times. If this flag is set, a new session key is not generated. Instead, the key specified by phKey is modified. The precise behavior of this flag is dependent on the type of key being generated and on the particular CSP being used. Microsoft cryptographic service providers ignore this flag.   CRYPT_SERVER 1024 (0x400)   This flag is used only with Schannel providers. If this flag is set, the key to be generated is a server-write key; otherwise, it is a client-write key."
      },
      {
        "in_out": "_Inout_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "A pointer to  a HCRYPTKEY variable to receive the address of the handle of the newly generated key. When you have finished using the key, release the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptDestroyKey function releases the handle referenced by the hKey parameter. After a key handle has been released, it is no longer valid and cannot be used again.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes are listed in the following table.  ",
    "remarks": "Keys take up both operating system's memory space and the CSP's memory space. Some CSPs are implemented in hardware with limited memory resources. Applications must destroy all keys with the CryptDestroyKey function when they are finished with them. All key handles that have been created or imported by using a specific CSP must be destroyed before that CSP handle is released with the CryptReleaseContext function. For an example that uses the CryptDestroyKey  function, see Example C Program: Creating and Hashing a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDestroyKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "The handle of the key to be destroyed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptDuplicateKey function makes an exact copy of a key and the state of the key.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error code prefaced by \"NTE\" is generated by the particular CSP being used. Some possible error codes are listed in the following table.  ",
    "remarks": "CryptDuplicateKey makes a copy of a key and the exact state of the key. One scenario when this function can be used is when an application needs to encrypt two separate messages with the same key but with different salt values. The original key is generated and then a duplicate key is made by using the CryptDuplicateKey function. The different salt values are then set on the original and duplicate keys with separate calls to the  CryptSetKeyParam function. CryptDestroyKey must be called to destroy any keys that are created by using CryptDuplicateKey. Destroying the original key does not cause the duplicate key to be destroyed. After a duplicate key is made, it is separate from the original key. There is no shared state between the two keys. The following example shows the creation of a session key that is a duplicate of an existing session key. For an example that includes the complete context for this example, see Example C Program: Duplicating a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDuplicateKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the key to be duplicated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "Address of the handle to the duplicated key. When you have finished using the key, release the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptExportKey function exports a cryptographic key or a key pair from a cryptographic service provider (CSP) in a secure manner.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns  nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. The following table shows some of the possible error codes.  ",
    "remarks": "For any of the DES key permutations that use a PLAINTEXTKEYBLOB, only the full key size, including parity bit, may be exported. The following key sizes are supported.  The following example shows how to export a cryptographic key or a key pair in a more secure manner. This example assumes that a cryptographic context has been acquired and that a public key is available for export. For an example that includes the complete context for using this function, see  Example C Program: Signing a Hash and Verifying the Hash Signature. For another example that uses this function, see Example C Program: Exporting a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the key to be exported."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hExpKey",
        "description": "A handle to a cryptographic key of the destination user. The key data within the exported key BLOB is encrypted using this key. This ensures that only the destination user is able to make use of the key BLOB.  Both hExpKey and hKey must come from the same CSP.  Most often, this is the key exchange public key of the destination user. However, certain protocols in some CSPs require that a session key belonging to the destination user be used for this purpose. If the key BLOB type specified by dwBlobType is PUBLICKEYBLOB, this parameter is unused and must be set to zero. If the key BLOB type specified by dwBlobType is PRIVATEKEYBLOB, this is typically a handle to a session key that is to be used to encrypt the key BLOB. Some CSPs allow this parameter to be zero, in which case the application must encrypt the private key BLOB manually so as to protect it. To determine how Microsoft cryptographic service providers respond to this parameter, see the private key BLOB sections of  Microsoft Cryptographic Service Providers. Note  Some CSPs may modify this parameter as a result of the operation. Applications that subsequently use this key for other purposes should call the  CryptDuplicateKey function to create a duplicate key handle. When the application has finished using the handle, release it by calling the CryptDestroyKey function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwBlobType",
        "description": "Specifies the type of key BLOB to be exported in pbData. This must be one of the following constants as discussed in  Cryptographic Key Storage and Exchange.  ValueMeaning  OPAQUEKEYBLOB   Used to store session keys in an Schannel CSP or any other vendor-specific format. OPAQUEKEYBLOBs are nontransferable and must be used within the CSP that generated the BLOB.   PRIVATEKEYBLOB   Used to transport public/private key pairs.   PUBLICKEYBLOB   Used to transport public keys.   SIMPLEBLOB   Used to transport session keys.   PLAINTEXTKEYBLOB   A PLAINTEXTKEYBLOB used to export any key supported by the CSP in use.    SYMMETRICWRAPKEYBLOB   Used to export and import a symmetric key wrapped with another symmetric key. The actual wrapped key is in the format specified in the IETF RFC 3217 standard."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies additional options for the function. This parameter can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_BLOB_VER3 0x00000080   This flag causes this function to export version 3 of a BLOB type.   CRYPT_DESTROYKEY 0x00000004   This flag destroys the original key in the OPAQUEKEYBLOB. This flag is available in Schannel CSPs only.   CRYPT_OAEP 0x00000040   This flag causes PKCS #1 version 2 formatting to be created with the RSA encryption and decryption when exporting SIMPLEBLOBs.   CRYPT_SSL2_FALLBACK 0x00000002   The first eight bytes of the RSA encryption block padding must be set to 0x03 rather than to random data. This prevents version rollback attacks and is discussed in the SSL3 specification. This flag is available for Schannel CSPs only.   CRYPT_Y_ONLY 0x00000001   This flag is not used."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that receives the key BLOB data. The format of this BLOB varies depending on the BLOB type requested in the dwBlobType parameter. For the format for PRIVATEKEYBLOBs, PUBLICKEYBLOBs, and SIMPLEBLOBs, see  Base Provider Key BLOBs. If this parameter is NULL, the required buffer size is placed in the value pointed to by the pdwDataLen parameter. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value that, on entry, contains the size, in bytes, of the buffer pointed to by the pbData parameter. When the function returns, this value contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.   To retrieve the required size of the pbData buffer, pass NULL for pbData. The required buffer size will be placed in the value pointed to by this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptGenKey function generates a random cryptographic session key or a public/private key pair. A handle to the key or key pair is returned in phKey. This handle can then be used as needed with any CryptoAPI function that requires a key handle.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  \t\t\tGetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes are listed in the following table.  ",
    "remarks": "If keys are generated for symmetric block ciphers, the key, by default, is set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk encrypting data. To change these parameters, use the  \t\t\tCryptSetKeyParam function. To choose an appropriate key length, the following methods are recommended: The following example shows the creation of a random session key. For an example that includes the complete context for this example, see Example C Program: Encrypting a File. For another example that uses this function, see Example C Program: Decrypting a File. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGenKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A handle to a cryptographic service provider (CSP) created by a call to  \t\t\t\t\tCryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "Algid",
        "description": "An  \t\t\t\t\t\tALG_ID value that identifies the algorithm for which the key is to be generated. Values for this parameter vary depending on the CSP used. For ALG_ID values to use with the Microsoft Base Cryptographic Provider, see  \t\t\tBase Provider Algorithms. For ALG_ID values to use with the Microsoft Strong Cryptographic Provider or the Microsoft Enhanced Cryptographic Provider, see  \t\t\tEnhanced Provider Algorithms.  For a Diffie-Hellman CSP, use one of the following values.  ValueMeaning  CALG_DH_EPHEM   Specifies an \"Ephemeral\" Diffie-Hellman key.   CALG_DH_SF   Specifies a \"Store and Forward\" Diffie-Hellman key.      In addition to generating session keys for symmetric algorithms, this function can also generate public/private key pairs. Each CryptoAPI client generally possesses two public/private key pairs. To generate one of these key pairs, set the Algid parameter to one of the following values.  ValueMeaning  AT_KEYEXCHANGE   Key exchange   AT_SIGNATURE   Digital signature     Note  When key specifications AT_KEYEXCHANGE and AT_SIGNATURE are specified, the algorithm identifiers that are used to generate the key depend on the provider used. As a result, for these key specifications, the values returned from  \t\t\t\t\tCryptGetKeyParam (when the KP_ALGID parameter is specified) depend on the provider used. To determine which algorithm identifier is used by the different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE, see  \t\t\t\t\tALG_ID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the type of key generated. The sizes of a session key, RSA signature key, and RSA key exchange keys can be set when the key is generated. The key size, representing the length of the key modulus in bits, is set with the upper 16 bits of this parameter. Thus, if a 2,048-bit RSA signature key is to be generated, the value 0x08000000 is combined with any other dwFlags predefined value with a bitwise-OR operation. The upper 16 bits of 0x08000000 is 0x0800, or decimal 2,048. The RSA1024BIT_KEY value can be used to specify a 1024-bit RSA key. Due to changing export control restrictions, the default CSP and default key length may change between operating system versions. It is important that both the encryption and decryption use the same CSP and that the key length be explicitly set using the dwFlags parameter to ensure interoperability on different operating system platforms. In particular, the default RSA Full Cryptographic Service Provider is the Microsoft RSA Strong Cryptographic Provider. The default DSS Signature Diffie-Hellman Cryptographic Service Provider is the Microsoft Enhanced DSS Diffie-Hellman Cryptographic Provider. Each of these CSPs has a default 128-bit symmetric key length for RC2 and RC4 and a 1,024-bit default key length for public key algorithms.  If the upper 16 bits is zero, the default key size is generated. If a key larger than the maximum or smaller than the minimum is specified, the call fails with the ERROR_INVALID_PARAMETER code. The following table lists minimum, default, and maximum signature and exchange key lengths beginning with Windows XP.  Key type and providerMinimum lengthDefault lengthMaximum length  RSA Base Provider Signature and ExchangeKeys  384  512  16,384   RSA Strong and Enhanced Providers Signature and Exchange Keys  384  1,024  16,384   DSS Base Providers Signature Keys  512  1,024  1,024   DSS Base Providers Exchange Keys  Not applicable  Not applicable  Not applicable   DSS/DH Base Providers Signature Keys  512  1,024  1,024   DSS/DH Base Providers Exchange Keys  512  512  1,024   DSS/DH Enhanced Providers Signature Keys  512  1,024  1,024   DSS/DH Enhanced Providers Exchange Keys  512  1,024  4,096     For session key lengths, see CryptDeriveKey. For more information about keys generated using Microsoft providers, see  \t\t\tMicrosoft Cryptographic Service Providers.  The lower 16-bits of this parameter can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_ARCHIVABLE   If this flag is set, the key can be exported until its handle is closed by a call to CryptDestroyKey. This allows newly generated keys to be exported upon creation for archiving or key recovery. After the handle is closed, the key is no longer exportable.   CRYPT_CREATE_IV   This flag is not used.   CRYPT_CREATE_SALT   If this flag is set, then the key is assigned a random salt value automatically. You can retrieve this salt value by using the  \t\t\t\t\t\t\tCryptGetKeyParam function with the dwParam parameter set to KP_SALT. If this flag is not set, then the key is given a salt value of zero. When keys with nonzero salt values are exported (through  \t\t\tCryptExportKey), then the salt value must also be obtained and kept with the key BLOB.   CRYPT_DATA_KEY   This flag is not used.   CRYPT_EXPORTABLE   If this flag is set, then the key can be transferred out of the CSP into a key BLOB by using the  \t\t\t\t\t\t\tCryptExportKey function. Because session keys generally must be exportable, this flag should usually be set when they are created. If this flag is not set, then the key is not exportable. For a session key, this means that the key is available only within the current session and only the application that created it will be able to use it. For a public/private key pair, this means that the private key cannot be transported or backed up. This flag applies only to session key and private key BLOBs. It does not apply to public keys, which are always exportable.   CRYPT_FORCE_KEY_PROTECTION_HIGH   This flag specifies strong key protection. When this flag is set, the user is prompted to enter a password for the key when the key is created. The user will be prompted to enter the password whenever this key is used.  This flag is only used by the CSPs that are provided by Microsoft. Third party CSPs will define their own behavior for strong key protection. Specifying this flag causes the same result as calling this function with the CRYPT_USER_PROTECTED flag when strong key protection is specified in the system registry. If this flag is specified and the provider handle in the hProv parameter was created by using the CRYPT_VERIFYCONTEXT or CRYPT_SILENT flag, this function will set the last error to NTE_SILENT_CONTEXT and return zero. Windows Server 2003 and Windows XP:  This flag is not supported.   CRYPT_KEK   This flag is not used.   CRYPT_INITIATOR   This flag is not used.   CRYPT_NO_SALT   This flag specifies that a no salt value gets allocated for a forty-bit symmetric key. For more information, see  \t\t\t\t\t\t\tSalt Value Functionality.   CRYPT_ONLINE   This flag is not used.   CRYPT_PREGEN   This flag specifies an initial Diffie-Hellman or DSS key generation. This flag is useful only with Diffie-Hellman and DSS CSPs. When used, a default key length will be used unless a key length is specified in the upper 16 bits of the dwFlags parameter. If parameters that involve key lengths are set on a PREGEN Diffie-Hellman or DSS key using CryptSetKeyParam, the key lengths must be compatible with the key length set here.   CRYPT_RECIPIENT   This flag is not used.   CRYPT_SF   This flag is not used.   CRYPT_SGCKEY   This flag is not used.   CRYPT_USER_PROTECTED   If this flag is set, the user is notified through a dialog box or another method when certain actions are attempting to use this key. The precise behavior is specified by the CSP being used. If the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.   CRYPT_VOLATILE   This flag is not used."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "Address to which the function copies the handle of the newly generated key. When you have finished  using the key, delete  the handle to the key by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptGenRandom function fills a buffer with cryptographically random bytes.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes are listed in the following table.  ",
    "remarks": "The data produced by this function is cryptographically random. It is far more random than the data generated by the typical random number generator such as the one shipped with your C compiler. This function is often used to generate random initialization vectors and salt values. Software random number generators work in fundamentally the same way. They start with a random number, known as the seed, and then use an algorithm to generate a pseudo-random sequence of bits based on it. The most difficult part of this process is to get a seed that is truly random. This is usually based on user input latency, or the jitter from one or more hardware components. With Microsoft CSPs, CryptGenRandom uses the same random number generator used by other security components. This allows numerous processes to contribute to a system-wide seed. CryptoAPI stores an intermediate random seed with every user. To form the seed for the random number generator, a calling application supplies bits it might have\u00e2\u0080\u0094for instance, mouse or keyboard timing input\u00e2\u0080\u0094that are then combined with both the stored seed and various system data and user data such as the process ID and thread ID, the system clock, the system time, the system counter, memory status, free disk clusters, the hashed user environment block. This result is used to seed the pseudorandom number generator (PRNG). In Windows Vista with Service Pack 1 (SP1) and later, an implementation of the AES counter-mode based PRNG specified in NIST Special Publication 800-90 is used. In Windows Vista, Windows Storage Server 2003, and Windows XP, the PRNG specified in Federal Information Processing Standard (FIPS) 186-2 is used. If an application has access to a good random source, it can fill the pbBuffer buffer with some random data before calling CryptGenRandom. The CSP then uses this data to further randomize its internal seed. It is acceptable to omit the step of initializing the pbBuffer buffer before calling CryptGenRandom. The following example shows the generation of 8 random bytes. These can be used to create cryptographic keys or for any application that uses random numbers. For an example that includes the complete context for this example, see Example C Program: Duplicating a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGenRandom",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "Handle of a cryptographic service provider (CSP) created by a call to  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLen",
        "description": "Number of bytes of random data to be generated."
      },
      {
        "in_out": "_Inout_",
        "type": "BYTE*",
        "name": "pbBuffer",
        "description": "Buffer to receive the returned data. This buffer must be at least dwLen bytes in length.     Optionally, the application can fill this buffer with data to use as an auxiliary random seed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptGetKeyParam function retrieves data that governs the operations of a key. If the  Microsoft Cryptographic Service Provider is used, the base symmetric keying material is not obtainable by this or any other function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes include the following.  For an example that uses the CryptGetKeyParam function, see  Example C Program: Setting and Getting Session Key Parameters. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetKeyParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "The handle of the key being queried."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "Specifies the type of query being made.  \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t   \t\t\t\t\t\tFor all key types, this parameter can contain one of the following values.  ValueMeaning  KP_ALGID   Retrieve the key algorithm. The pbData parameter is a pointer to  an  ALG_ID value that receives the identifier of the algorithm that was specified when the key was created. When AT_KEYEXCHANGE or AT_SIGNATURE is specified for the Algid parameter of the CryptGenKey function, the algorithm identifiers that are used to generate the key depend on the provider used. For more information, see  ALG_ID.   KP_BLOCKLEN   If a session key is specified by the hKey parameter, retrieve the block length of the key cipher. The pbData parameter is a pointer to a DWORD value that receives the block length, in bits. For stream ciphers, this value is always zero. If a public/private key pair is specified by hKey, retrieve the encryption granularity of the key pair. The pbData parameter is a pointer to a DWORD value that receives the encryption granularity, in bits. For example, the Microsoft Base Cryptographic Provider generates 512-bit RSA key pairs, so a value of 512 is returned for these keys. If the public key algorithm does not support encryption, the value retrieved is undefined.   KP_CERTIFICATE   pbData is the address of a buffer that receives the X.509 certificate that has been encoded by using Distinguished Encoding Rules (DER). The public key in the certificate must match the corresponding signature or exchange key.    KP_GET_USE_COUNT   This value is not used.   KP_KEYLEN   Retrieve the actual length of the key. The pbData parameter is a pointer to a DWORD value that receives the key length, in bits. KP_KEYLEN can be used to get the length of any key type. Microsoft cryptographic service providers (CSPs) return a key length of 64 bits for CALG_DES, 128 bits for CALG_3DES_112, and 192 bits for CALG_3DES. These lengths are different from the lengths returned when you are enumerating algorithms with the dwParam value of the CryptGetProvParam function set to PP_ENUMALGS. The length returned by this call is the actual size of the key, including the parity bits included in the key. Microsoft CSPs that support the CALG_CYLINK_MEK ALG_ID return 64 bits for that algorithm. CALG_CYLINK_MEK is a 40-bit key but has parity and zeroed key bits to make the key length 64 bits.   KP_SALT   Retrieve the salt value of the key. The pbData parameter is a pointer to a BYTE array that receives the salt value in little-endian form. The size of the salt value varies depending on the CSP and algorithm being used. Salt values do not apply to public/private key pairs.   KP_PERMISSIONS   Retrieve the key permissions. The pbData parameter is a pointer to a DWORD value that receives the permission flags for the key.  The following permission identifiers are currently defined. The key permissions can be zero or a combination of one or more of the following values.  CRYPT_ARCHIVE  Allow export during the lifetime of the handle of the key. This permission can be set only if it is already set in the internal permissions field of the key. Attempts to clear this permission are ignored.  CRYPT_DECRYPT  Allow decryption.  CRYPT_ENCRYPT  Allow encryption.  CRYPT_EXPORT  Allow the key to be exported.  CRYPT_EXPORT_KEY  Allow the key to be used for exporting keys.  CRYPT_IMPORT_KEY  Allow the key to be used for importing keys.  CRYPT_MAC  Allow Message Authentication Codes (MACs) to be used with key.  CRYPT_READ  Allow values to be read.  CRYPT_WRITE  Allow values to be set.         \t\t\t\t\t\t\tIf a Digital Signature Standard (DSS) key is specified by the hKey parameter, the dwParam value can also be set to one of the following values.  ValueMeaning  KP_P   Retrieve the modulus prime number P of the DSS key. The pbData parameter is a pointer to a buffer that receives the value in little-endian form. The pdwDataLen parameter contains the size of the buffer, in bytes.   KP_Q   Retrieve the modulus prime number Q of the DSS key. The pbData parameter is a pointer to a buffer that receives the value in little-endian form. The pdwDataLen parameter contains the size of the buffer, in bytes.   KP_G   Retrieve the generator G of the DSS key. The pbData parameter is a pointer to a buffer that receives the value in little-endian form. The pdwDataLen parameter contains the size of the buffer, in bytes.       \t\t\t\t\t\t\tIf a block cipher session key is specified by the hKey parameter, the dwParam value can also be set to one of the following values.  ValueMeaning  KP_EFFECTIVE_KEYLEN   Retrieve the effective key length of an RC2 key. The pbData parameter is a pointer to a DWORD value that receives the effective key length.   KP_IV   Retrieve the initialization vector of the key. The pbData parameter is a pointer to a BYTE array that receives the initialization vector. The size of this array is the block size, in bytes. For example, if the block length is 64 bits, the initialization vector consists of 8 bytes.   KP_PADDING   Retrieve the padding mode. The pbData parameter is a pointer to a DWORD value that receives a numeric identifier that identifies the padding method used by the cipher. This can be one of the following values.   PKCS5_PADDING  Specifies the PKCS 5 (sec 6.2) padding method.  RANDOM_PADDING  The padding uses random numbers. This padding method is not supported by the Microsoft supplied CSPs.  ZERO_PADDING  The padding uses zeros. This padding method is not supported by the Microsoft supplied CSPs.     KP_MODE   Retrieve the cipher mode. The pbData parameter is a pointer to a DWORD value that receives a cipher mode identifier. For more information about cipher modes, see  Data Encryption and Decryption.  The following cipher mode identifiers are currently defined.  CRYPT_MODE_CBC  The cipher mode is cipher block chaining.  CRYPT_MODE_CFB  The cipher mode is cipher feedback (CFB). Microsoft CSPs currently support only 8-bit feedback in cipher feedback mode.  CRYPT_MODE_ECB  The cipher mode is electronic codebook.  CRYPT_MODE_OFB  The cipher mode is Output Feedback (OFB). Microsoft CSPs currently do not support Output Feedback Mode.  CRYPT_MODE_CTS  The cipher mode is ciphertext stealing mode.     KP_MODE_BITS   Retrieve the number of bits to feed back. The pbData parameter is a pointer to a DWORD value that receives the number of bits that are processed per cycle when the OFB or CFB cipher modes are used.      If a Diffie-Hellman algorithm or Digital Signature Algorithm (DSA) key is specified by hKey, the dwParam value can also be set to the following value.  ValueMeaning  KP_VERIFY_PARAMS   Verifies the parameters of a Diffie-Hellman algorithm or DSA key. The pbData parameter is not used, and the value pointed to by pdwDataLen receives zero. This function returns a nonzero value if the key parameters are valid or zero otherwise.   KP_KEYVAL   This value is not used. Windows Vista, Windows Server 2003 and Windows XP:  Retrieve the secret agreement value from an imported Diffie-Hellman algorithm key of type CALG_AGREEDKEY_ANY. The pbData parameter is the address of a buffer that receives the secret agreement value, in little-endian format. This buffer must be the same length as the key. The dwFlags parameter must be set to  0xF42A19B6. This property can only be retrieved by a thread running under the local system account.This property is available for use in the operating systems listed above. It may be altered or unavailable in subsequent versions.      If a certificate is specified by hKey, the dwParam value can also be set to the following value.  ValueMeaning  KP_CERTIFICATE   A buffer that contains the DER-encoded X.509 certificate. The pbData parameter is not used, and the value pointed to by pdwDataLen receives zero. This function returns a nonzero value if the key parameters are valid or zero otherwise."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that receives the data. The form of this data depends on the value of dwParam. If the size of  this buffer is not known, the required size can be retrieved at run time by passing NULL for this parameter and setting the value pointed to by pdwDataLen to zero. This function will place the required size of the buffer, in bytes, in the value pointed to by pdwDataLen. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value that, on entry, contains the size, in bytes, of the buffer pointed to by the pbData parameter. When the function returns, the DWORD value contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are sometimes specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptGetUserKey function retrieves a handle of one of a user's two public/private key pairs. This function is used only by the owner of the public/private key pairs and only when the handle of a cryptographic service provider (CSP) and its associated key container is available. If the CSP handle is not available and the user's certificate is, use  CryptAcquireCertificatePrivateKey.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes follow.  For examples that use this function, see Example C Program: Signing a Hash and Verifying the Hash Signature and Example C Program: Exporting a Session Key. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetUserKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "HCRYPTPROV handle of a cryptographic service provider (CSP) created by a call to  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the key container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.     Additionally, some providers allow access to other user-specific keys through this function. For details, see the documentation on the specific provider."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phUserKey",
        "description": "A pointer to the  HCRYPTKEY handle of the retrieved keys. When you have finished using the key, delete the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptImportKey function transfers a cryptographic key from a key BLOB into a cryptographic service provider (CSP). This function can be used to import an Schannel session key, regular session key, public key, or public/private key pair. For all but the public key, the key or key pair is encrypted.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. Error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": "When importing a Hash-Based Message Authentication Code (HMAC) key, the caller must identify the imported key as a PLAINTEXTKEYBLOB type and set the appropriate algorithm identifier in the aiKeyAlg field of the PUBLICKEYSTRUC BLOB header. The CryptImportKey function can be used to import a plaintext key for symmetric algorithms; however, we recommend that, for ease of use, you use the CryptGenKey function instead. When you import a plaintext key, the structure of the key BLOB that is passed in the pbData parameter is a PLAINTEXTKEYBLOB. You can use the PLAINTEXTKEYBLOB type with any algorithm or type of key combination supported by the CSP in use.   For an example of importing a plaintext key, see Example C Program: Importing a Plaintext Key. The following example shows how you can set the header fields. The length of the key is specified in keyBlob.keyLength, which is followed by the actual key data. For any of the Data Encryption Standard (DES) key permutations that use PLAINTEXTKEYBLOB, only the full key size, including parity bit, can be imported. The following key sizes are supported.  The following example shows how to import a key from a key BLOB. For a full example for this function, see  Example C Program: Signing a Hash and Verifying the Hash Signature. For additional code that uses this function, see  \t\t\t\t\t\tExample C Program: Decrypting a File. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptImportKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "The handle of a CSP obtained with the CryptAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A BYTE array that contains a  PUBLICKEYSTRUC BLOB header followed by the encrypted key. This key BLOB is created by the  CryptExportKey function, either in this application or by another application possibly running on a different computer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDataLen",
        "description": "Contains the length, in bytes, of the key BLOB."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hPubKey",
        "description": "A handle to the cryptographic key that decrypts the key stored in pbData.  This key must come from the same CSP to which hProv refers. The meaning of this parameter differs depending on the CSP type and the type of key BLOB being imported:  If the key BLOB is encrypted with the key exchange key pair, for example, a SIMPLEBLOB, this parameter can be the handle to the key exchange key. If the key BLOB is encrypted with a session key, for example, an encrypted PRIVATEKEYBLOB, this parameter contains the handle of this session key. If the key BLOB is not encrypted, for example, a PUBLICKEYBLOB, this parameter is not used and must be zero. If the key BLOB is encrypted with a session key in an Schannel CSP, for example, an encrypted OPAQUEKEYBLOB or any other vendor-specific OPAQUEKEYBLOB, this parameter is not used and must be set to zero.  Note  Some CSPs may modify this parameter as a result of the operation. Applications that subsequently use this key for other purposes should call the  CryptDuplicateKey function to create a duplicate key handle.  When the application has finished using the handle, release it by calling the CryptDestroyKey function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently used only when a public/private key pair in the form of a PRIVATEKEYBLOB is imported into the CSP.     \t\t\t\t\t\t \t\t\t\t\tThis parameter can be one of the following values.  ValueMeaning  CRYPT_EXPORTABLE   The key being imported is eventually to be reexported. If this flag is not used, then calls to  CryptExportKey with the key handle fail.   CRYPT_OAEP   This flag causes PKCS #1 version 2 formatting to be checked with  RSA encryption and decryption when importing SIMPLEBLOBs.   CRYPT_NO_SALT   A no-salt value gets allocated for a 40-bit symmetric key. For more information, see  Salt Value Functionality.   CRYPT_USER_PROTECTED   If this flag is set, the CSP notifies the user through a dialog box or some other method when certain actions are attempted using this key. The precise behavior is specified by the CSP or the CSP type used.  If the provider context was acquired with CRYPT_SILENT set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.   CRYPT_IPSEC_HMAC_KEY   Allows for the import of an RC2 key that is larger than 16 bytes. If this flag is not set, calls to the CryptImportKey function with RC2 keys that are greater than 16 bytes fail, and a call to GetLastError will return NTE_BAD_DATA."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "A pointer to a HCRYPTKEY value that receives the handle of the imported key. When you have finished using the key, release the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptSetKeyParam function customizes various aspects of a session key's operations. The values set by this function are not persisted to memory and can only be used with in a single session.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": "If the KP_Q, KP_P, or KP_X parameters are set on a PREGEN Diffie-Hellman or DSS key, the key lengths must be compatible with the key length set using the upper 16 bits of the dwFlags parameter when the key was created using CryptGenKey. If no key length was set in CryptGenKey, the default key length was used. This will create an error if a nondefault key length is used to set P, Q, or X. For an example that uses this function, see Example C Program: Duplicating a Session Key. For more code that uses this function, see  \t\t\t\t\t\tExample C Program: Setting and Getting Session Key Parameters . ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetKeyParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the key for which values are to be set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "The following tables contain predefined values that can be used.       \t\t\t\t\t\tFor all key types, this parameter can contain one of the following values.  ValueMeaning  KP_ALGID   pbData points to an appropriate  ALG_ID. This is used when exchanging session keys with the Microsoft Base Digital Signature Standard (DSS), Diffie-Hellman Cryptographic Provider, or compatible CSPs. After a key is agreed upon with the  CryptImportKey function, the session key is enabled for use by setting its algorithm type.   KP_CERTIFICATE   pbData is the address of a buffer that contains the X.509 certificate that has been encoded by using Distinguished Encoding Rules (DER). The public key in the certificate must match the corresponding signature or exchange key.   KP_PERMISSIONS   pbData points to a DWORD value that specifies zero or more permission flags. For a description of these flags, see  CryptGetKeyParam.   KP_SALT   pbData points to a BYTE array that specifies a new salt value to be made part of the session key. The size of the salt value varies depending on the CSP being used. Before setting this value, determine the size of the salt value by calling  the CryptGetKeyParam function. Salt values are used to make the session keys more unique, which makes dictionary attacks more difficult. The salt value is zero by default for Microsoft Base Cryptographic Provider.   KP_SALT_EX   pbData points to a  CRYPT_INTEGER_BLOB structure that contains the salt. For more information, see  Specifying a Salt Value.       \t\t\t\t\t\t\tIf a Digital Signature Standard (DSS) key is specified by the hKey parameter, the dwParam value can also be set to one of the following values.  ValueMeaning  KP_G   pbData points to the generator G from the DSS key BLOB. The data is in the form of a  CRYPT_INTEGER_BLOB structure, where the pbData member is the value, and the cbData member is the length of the value. The value is expected with no header information and in little-endian form.   KP_P   pbData points to the prime modulus P of a DSS key BLOB. The data is in the form of a  CRYPT_INTEGER_BLOB structure. The pbData member is the value, and the cbData member is the length of the value. The value is expected with no header information and in little-endian form.   KP_Q   pbData points to the prime Q of a DSS key BLOB. The data is in the form of a CRYPT_INTEGER_BLOB structure where the pbData member is the value, and the cbData member is the length of the value. The value is expected with no header information and in little-endian form.   KP_X   After the P, Q, and G values have been set, a call that specifies the KP_X value for dwParam and NULL for the pbData parameter can be made to the CryptSetKeyParam function. This causes the X and Y values to be generated.      If a Diffie-Hellman algorithm or Digital Signature Algorithm (DSA) key is specified by hKey, the dwParam value can also be set to one of the following values.  ValueMeaning  KP_CMS_DH_KEY_INFO   Sets the information for an imported Diffie-Hellman key. The pbData parameter is the address of a CMS_DH_KEY_INFO structure that contains the key information to be set.   KP_PUB_PARAMS   Sets the public parameters (P, Q, G, and so on) of a DSS or Diffie-Hellman key. The key handle for this key must be in the PREGEN state, generated with the CRYPT_PREGEN flag. The pbData parameter must be a pointer to a DATA_BLOB structure where the data in this structure is a DHPUBKEY_VER3 or DSSPUBKEY_VER3 BLOB. The function copies the public parameters from this CRYPT_INTEGER_BLOB structure to the key handle. After this call is made, the KP_X parameter value should be used with CryptSetKeyParam to create the actual private key. The KP_PUB_PARAMS parameter is used as one call rather than multiple calls with the parameter values KP_P, KP_Q, and KP_G.       \t\t\t\t\t\t\tIf a block cipher session key is specified by the hKey parameter, the dwParam value can also be set to one of the following values.  ValueMeaning  KP_EFFECTIVE_KEYLEN   This value type can only be used with RC2 keys and has been added because of the implementation of the CryptSetKeyParam function in the Microsoft Enhanced Cryptographic Provider prior to Windows 2000. In the previous implementation, the RC2 keys in the Enhanced Provider were 128 bits in strength, but the effective key length used to expand keys into the key table was only 40 bits. This reduced the strength of the algorithm to 40 bits. To maintain backward compatibility, the previous implementation will remain as is. However, the effective key length can be set to be greater than 40 bits by using KP_EFFECTIVE_KEYLEN in the CryptSetKeyParam call. The effective key length is passed in the pbData parameter as a pointer to a DWORD value with the effective key length value. The minimum effective key length on the Microsoft Base Cryptographic Provider is one, and the maximum is 40. In the Microsoft Enhanced Cryptographic Provider, the minimum is one and the maximum is 1,024. The key length must be set prior to encrypting or decrypting with the key.   KP_HIGHEST_VERSION   Sets the highest Transport Layer Security (TLS) version allowed. This property only applies to SSL and TLS keys. The pbData parameter is the address of a DWORD variable that contains the highest TLS version number supported.   KP_IV   pbData points to a BYTE array that specifies the initialization vector. This array must contain BlockLength/8 elements. For example, if the block length is 64 bits, the initialization vector consists of 8 bytes.     The initialization vector is set to zero by default for the Microsoft Base Cryptographic Provider.   KP_KEYVAL   Set the key value for a Data Encryption Standard (DES) key. The pbData parameter is the address of a buffer that contains the key. This buffer must be the same length as the key. This property only applies to DES keys.   KP_PADDING   Set the padding mode. The pbData parameter is a pointer to a DWORD value that receives a numeric identifier that identifies the padding method used by the cipher. This can be one of the following values.   PKCS5_PADDING  Specifies the PKCS 5 (sec 6.2) padding method.  RANDOM_PADDING  The padding uses a random number. This padding method is not supported by the Microsoft supplied CSPs.  ZERO_PADDING  The padding uses zeros. This padding method is not supported by the Microsoft supplied CSPs.     KP_MODE   pbData points to a DWORD value that specifies the cipher mode to be used. For a list of the defined cipher modes, see  CryptGetKeyParam. The cipher mode is set to CRYPT_MODE_CBC by default for the Microsoft Base Cryptographic Provider.   KP_MODE_BITS   pbData points to a DWORD value that indicates the number of bits processed per cycle when the Output Feedback (OFB) or Cipher Feedback (CFB) cipher mode is used. The number of bits processed per cycle is set to 8 by default for the Microsoft Base Cryptographic Provider.      If an RSA key is specified in the hKey parameter, the dwParam parameter value can be the following value.  ValueMeaning  KP_OAEP_PARAMS   Set the Optimal Asymmetric Encryption Padding (OAEP)  (PKCS #1 version 2) parameters for the key. The pbData parameter is the address of a CRYPT_DATA_BLOB structure that contains the OAEP label. This property only applies to RSA keys.     Note that the following values are not used:  KP_ADMIN_PIN KP_CMS_KEY_INFO KP_INFO KP_KEYEXCHANGE_PIN KP_PRECOMP_MD5 KP_PRECOMP_SHA KP_PREHASH KP_PUB_EX_LEN KP_PUB_EX_VAL KP_RA KP_RB KP_ROUNDS KP_RP KP_SIGNATURE_PIN KP_Y"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer initialized with the value to be set before calling CryptSetKeyParam. The form of this data varies depending on the value of dwParam."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Used only when dwParam is KP_ALGID. The dwFlags parameter is used to pass in flag values for the enabled key. The dwFlags parameter can hold values such as the key size and the other flag values allowed when generating the same type of key with CryptGenKey. For information about allowable flag values, see  CryptGenKey."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptDecodeObject function decodes a structure of the type indicated by the lpszStructType parameter. The use of  CryptDecodeObjectEx is recommended as an API that performs the same function with significant performance improvements.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Some possible error codes are listed in the following table.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating NULL character is included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating NULL character is not retained. For an example that uses this function, see  Example C Program: ASN.1 Encoding and Decoding. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecodeObject",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING  Note  Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to an OID defining the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string. For more information about object identifier strings, their predefined constants and corresponding structures, see  Constants for CryptEncodeObject and CryptDecodeObject."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to the encoded structure to be decoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "Number of bytes pointed to by pbEncoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flags are defined. They can be combined with a bitwise-OR operation.  ValueMeaning  CRYPT_DECODE_NOCOPY_FLAG   This flag can be set to indicate that \"no copy\" optimization is enabled. This optimization, where applicable, updates the pvStructInfo parameter to point to content residing within pbEncoded instead of making a copy of the content and appending it to pvStructInfo. For applicable cases, less memory needs to be allocated by the calling application and execution is faster because a copy is not being made. Note that the trade-off when performing a \"no copy\" decoding is that pbEncoded cannot be freed until pvStructInfo is freed.   CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG   This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as eight-bit characters.   CRYPT_DECODE_TO_BE_SIGNED_FLAG   By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag is set, the buffer includes only the \"to be signed\" content. This flag is applicable to X509_CERT_TO_BE_SIGNED, X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.   CRYPT_DECODE_SHARE_OID_STRING_FLAG   When this flag is set, the OID stings are allocated in Crypt32.dll and shared instead of being copied into the returned data structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.   CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG   By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvStructInfo",
        "description": "A pointer to a buffer to receive the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo. This parameter can be NULL to retrieve the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbStructInfo",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pvStructInfo parameter. When the function returns, this DWORD value contains the size of the decoded data copied to pvStructInfo. The size contained in the variable pointed to by pcbStructInfo can indicate a size larger than the decoded structure, as the decoded structure can include pointers to other structures. This size is the sum of the size needed by the decoded structure and other structures pointed to.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptDecodeObjectEx function decodes a structure of the type indicated by the lpszStructType parameter. CryptDecodeObjectEx offers a significant performance improvement over  CryptDecodeObject by supporting memory allocation with the CRYPT_DECODE_ALLOC_FLAG value.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The following table shows some possible error codes.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating NULL character is included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating NULL character is not retained. Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure  pointed to, directly or indirectly, has a reference to a CERT_ALT_NAME_ENTRY structure. The CRYPT_DECODE_ENABLE_PUNYCODE_FLAG flag, in conjunction with the value of the dwAltNameChoice member of the CERT_ALT_NAME_ENTRY structure, determines the manner in which strings are encoded.  Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure  pointed to, directly or indirectly, has a reference to a CERT_HASHED_URL structure. When decoding the CERT_HASHED_URL  structure value, the URI is decoded.  If the host name contains a Punycode encoded host name, it is converted to the Unicode equivalent. Each X509_UNICODE_NAME constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. If the pszObjId member of the CERT_RDN_ATTR structure is set to szOID_RSA_emailAddr and the email address in the Value member contains Punycode encoded string, it is converted to the Unicode equivalent. For an example that uses this function, see Example C Program: ASN.1 Encoding and Decoding. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecodeObjectEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING  Note  Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to an object identifier (OID) that defines the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string. For more information about object identifier strings, their predefined constants, and corresponding structures, see  Constants for CryptEncodeObject and CryptDecodeObject."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to the data to be decoded. The structure must be of the type specified by lpszStructType."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The number of bytes pointed to by pbEncoded. This is the number of bytes to be decoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one or more of the following flags. The flags can be combined by using a bitwise-OR operation.  ValueMeaning  CRYPT_DECODE_ALLOC_FLAG   The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in pvStructInfo. If pDecodePara or the pfnAlloc  member of pDecodePara is NULL, then LocalAlloc is called for the allocation and LocalFree must be called to free the memory. If pDecodePara and the pfnAlloc  member of pDecodePara are not NULL, then the function pointed to by pfnAlloc is called for the allocation and the function pointed to by the pfnFree  member of pDecodePara must be called to free the memory.   CRYPT_DECODE_ENABLE_PUNYCODE_FLAG 33554432 (0x2000000)   This flag is applicable for enabling Punycode decoding of Unicode string values. For more information, see Remarks. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This flag is not supported.   CRYPT_DECODE_NOCOPY_FLAG   This flag can be set to enable a \"no copy\" optimization. This optimization updates the pvStructInfo members to point to content that resides within pbEncoded instead of making a copy of the content and appending it to pvStructInfo. The calling application needs to allocate less memory and execution is faster because a copy is not made. Note that when performing \"no copy\" decoding, pbEncoded cannot be freed until pvStructInfo is freed.   CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG   This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as eight-bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8 and decodes the value as eight-bit characters.   CRYPT_DECODE_TO_BE_SIGNED_FLAG   By default, the contents of the buffer pointed to by pbEncoded included the signed content and the signature. If this flag is set, the buffer includes only the \"to be signed\" content. This flag is applicable to X509_CERT_TO_BE_SIGNED, X509_CERT_CRL_TO_BE_SIGNED, X509_CRT_REQUEST_TO_BE_SIGNED, and X509_KEYGEN_REQUEST_TO_BE_SIGNED objects.   CRYPT_DECODE_SHARE_OID_STRING_FLAG   When this flag is set, the OID strings are allocated in Crypt32.dll and shared instead of being copied into the returned data structure. This flag can be set if Crypt32.dll is not unloaded before the caller is unloaded.   CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG   By default, the signature bytes are reversed. If this flag is set, this byte reversal is inhibited."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_DECODE_PARA",
        "name": "pDecodePara",
        "description": "A pointer to a CRYPT_DECODE_PARA structure that contains decoding paragraph information. If pDecodePara is set to NULL, then LocalAlloc and LocalFree are used to allocate and free memory. If pDecodePara points to a CRYPT_DECODE_PARA structure, that structure passes in callback functions to allocate and free memory. These callback functions override the default memory allocation of LocalAlloc and LocalFree."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvStructInfo",
        "description": "If the dwFlags CRYPT_ENCODE_ALLOC_FLAG is set, pvStructInfo is not a pointer to a buffer but is the address of a pointer to the buffer. Because memory is allocated inside the function and the pointer is stored at *pvStructInfo, pvStructInfo must never be NULL. If CRYPT_ENCODE_ALLOC_FLAG is not set, pvStructInfo is a pointer to a buffer that receives the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbStructInfo. This parameter can be NULL to retrieve the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbStructInfo",
        "description": "A pointer to a DWORD variable that contains the size, in bytes, of the buffer pointed to by the pvStructInfo parameter. When the function returns, the DWORD value contains the number of bytes stored in the buffer. The size contained in the variable pointed to by pcbStructInfo can indicate a size larger than the decoded structure because the decoded structure can include pointers to auxiliary data. This size is the sum of the size needed by the decoded structure and the auxiliary data. When CRYPT_DECODE_ALLOC_FLAG is set, the initial value of *pcbStructInfo is not used by the function, and on return, *pcbStructInfo contains the number of bytes allocated for pvStructInfo. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptEncodeObject function encodes a structure of the type indicated by the value of the lpszStructType parameter. The use of  CryptEncodeObjectEx is recommended as an API that performs the same function with significant performance improvements.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Some possible error codes are listed in the following table.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating NULL character is included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating NULL character is not retained. For an example that uses this function, see  Example C Program: Making a Certificate Request and  Example C Program: ASN.1 Encoding and Decoding. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEncodeObject",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING  Note  Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used. Otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to an OID defining the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order word specifies the integer identifier for the type of the specified structure. Otherwise, this parameter is a long pointer to a null-terminated string. For more information about object identifier strings, their predefined constants and corresponding structures, see  Constants for CryptEncodeObject and CryptDecodeObject."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvStructInfo",
        "description": "A pointer to the structure to be encoded. The structure must be of a type specified by lpszStructType."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to a buffer to receive the encoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncoded. This parameter can be NULL to retrieve the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD variable that contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When the function returns, the DWORD value contains the number of allocated encoded bytes stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptEncodeObjectEx function encodes a structure of the type indicated by the value of the lpszStructType parameter. This function offers a significant performance improvement over  CryptEncodeObject by supporting memory allocation with the CRYPT_ENCODE_ALLOC_FLAG value.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  GetLastError. The following table shows some possible error codes that can be returned from GetLastError when CryptEncodeObjectEx fails.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "When encoding a cryptographic object using the preferred CryptEncodeObjectEx function, the terminating NULL character is included. When decoding, using the preferred CryptDecodeObjectEx function, the terminating NULL character is not retained. CryptEncodeObjectEx first looks for an installable extended encoding function. If no extended encoding function is found, the old, nonextended, installable function is located. When direct IA5String encoding of the object is not possible, you can specify Punycode encoding by setting the dwFlag parameter to the CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG value. Setting the CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG flag has different effects based on the structure type being encoded as specified by the value of the lpszStructType parameter. Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure  pointed to, directly or indirectly, has a reference to a CERT_ALT_NAME_ENTRY structure. The CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG flag, in conjunction with the value of the dwAltNameChoice member of the CERT_ALT_NAME_ENTRY structure, determines the manner in which strings are encoded.  Each constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. The structure  pointed to, directly or indirectly, has a reference to a CERT_HASHED_URL structure. When encoding the CERT_HASHED_URL structure value, if the server host name of the URI contains Unicode characters outside of the ASCII character set, and the CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG is set, the host name portion of URI is encoded in Punycode.  Then the resultant URI is escaped, and the URL is then  encoded as an IA5String string. Each X509_UNICODE_NAME constant in the list below has an associated structure type that is pointed to by the pvStructInfo parameter. If the pszObjId member of the CERT_RDN_ATTR structure is set to szOID_RSA_emailAddr and the email address in the Value member contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. Then the resultant email address is then  encoded as an IA5String string. In all cases, the Punycode encoding of the host name is performed on a label-by-label basis. The following example shows initializing and encoding an X509_NAME structure using CryptEncodeObjectEx. For an example that includes the complete context for this example, see Example C Program: ASN.1 Encoding and Decoding. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEncodeObjectEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type and message encoding type to use to encode the object. This parameter can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS 7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to an object identifier (OID) that defines the structure type. If the high-order word of the lpszStructType parameter is zero, the low-order word specifies an integer identifier for the type of the specified structure. Otherwise, this parameter is a pointer to a null-terminated string that contains the string representation of the OID. For more information about object identifier strings, their predefined constants and corresponding structures, see  Constants for CryptEncodeObject and CryptDecodeObject."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvStructInfo",
        "description": "A pointer to the structure to be encoded. The structure must be of the type specified by lpszStructType."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies options for the encoding. This parameter can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_ENCODE_ALLOC_FLAG 32768 (0x8000)   The called encoding function allocates memory for the encoded bytes. A pointer to the allocated bytes is returned in pvEncoded.   CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG 131072 (0x20000)   This flag is applicable for enabling Punycode encoding of Unicode string values. For more information, see Remarks. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This flag is not supported.   CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG 1073741824 (0x40000000)   This flag is applicable when encoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. If this flag is set, the characters are not checked to determine whether they are valid for the specified value type.   CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG 2147483648 (0x80000000)   This flag is applicable when encoding X509_UNICODE_NAME. If this flag is set and all the Unicode characters are <= 0xFF, the CERT_RDN_T61_STRING is selected instead of the CERT_RDN_UNICODE_STRING.   CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG 536870912 (0x20000000)   This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_UNICODE_STRING.   CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG  268435456 (0x10000000)   This flag is applicable when encoding an X509_UNICODE_NAME. When set, CERT_RDN_UTF8_STRING is selected instead of CERT_RDN_PRINTABLE_STRING for directory string types. Also, this flag enables CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ENCODE_PARA",
        "name": "pEncodePara",
        "description": "A pointer to a  CRYPT_ENCODE_PARA structure that contains encoding information. This parameter can be NULL. If either pEncodePara or the pfnAlloc member of pEncodePara is NULL, then LocalAlloc is used for the allocation and LocalFree must be called to free the memory. If both pEncodePara and the pfnAlloc member of pEncodePara are not NULL, then the function pointed to by the pfnAlloc member of the CRYPT_ENCODE_PARA structure pointed to by pEncodePara is called for the allocation. The function pointed to by the pfnFree member of pEncodePara must be called to free the memory."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvEncoded",
        "description": "A pointer to a buffer to receive the encoded structure. The size of this buffer is specified in the pcbEncoded parameter. When the buffer that is specified is not large enough to receive the decoded structure, the function sets the ERROR_MORE_DATA code and stores the required buffer size, in bytes, in the variable pointed to by pcbEncoded. This parameter can be NULL to retrieve the size of the buffer for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length. If dwFlags contains the CRYPT_ENCODE_ALLOC_FLAG flag, pvEncoded is not a pointer to a buffer but is the address of a pointer to the buffer. Because memory is allocated inside the function and the pointer is stored in pvEncoded, pvEncoded cannot be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD variable that contains the size, in bytes, of the buffer pointed to by the pvEncoded parameter. When the function returns, the variable pointed to by the pcbEncoded parameter contains the number of allocated, encoded bytes stored in the buffer. When dwFlags contains the CRYPT_ENCODE_ALLOC_FLAG flag, pcbEncoded is the address of a pointer to the DWORD value that is updated. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptEncrypt function encrypts data. The algorithm used to encrypt the data is designated by the key held by the CSP module and is referenced by the hKey parameter.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": " If a large amount of data is to be encrypted, it can be done in sections by calling CryptEncrypt repeatedly. The Final parameter must be set to TRUE on the last call to CryptEncrypt, so that the encryption engine can properly finish the encryption process. The following extra actions are performed when Final is TRUE: There is no way to set the cipher's feedback register to the KP_IV value of the key without setting the Final parameter to TRUE. If this is necessary, as in the case where you do not want to add an additional padding block or change the size of each block, you can simulate this by creating a duplicate of the original key by using the CryptDuplicateKey function, and passing the duplicate key to the CryptEncrypt function. This causes the KP_IV of the original key to be placed in the duplicate key. After you create or import the original key, you cannot use the original key for encryption because the feedback register of the key will be changed. The following pseudocode shows how this can be done. The Microsoft Enhanced Cryptographic Provider supports direct encryption with RSA public keys and decryption with RSA private keys. The encryption uses PKCS #1 padding. On decryption, this padding is verified. The length of plaintext data that can be encrypted with a call to CryptEncrypt with an RSA key is the length of the key modulus minus eleven bytes. The eleven bytes is the chosen minimum for PKCS #1 padding. The ciphertext is returned in little-endian format. For examples that use this function, see  Example C Program: Encrypting a File  and Example C Program: Decrypting a File. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEncrypt",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the encryption key. An application obtains this handle by using either the  CryptGenKey or the  CryptImportKey function. The key specifies the encryption algorithm used."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "A handle to a hash object. If data is to be hashed and encrypted simultaneously, a handle to a hash object can be passed in the hHash parameter. The hash value is updated with the plaintext passed in. This option is useful when generating signed and encrypted text. Before calling CryptEncrypt, the application must obtain a handle to the hash object by calling the  CryptCreateHash function. After the encryption is complete, the hash value can be obtained by using the  CryptGetHashParam function, or the hash can be signed by using the  CryptSignHash function. If no hash is to be done, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "Final",
        "description": "A Boolean value that specifies whether this is the last section in a series being encrypted. Final is set to TRUE for the last or only block and to FALSE if there are more blocks to be encrypted. For more information, see  Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following dwFlags value is defined but reserved for future use.  ValueMeaning  CRYPT_OAEP   Use Optimal Asymmetric Encryption Padding (OAEP)  (PKCS #1 version 2). This flag is only supported by the Microsoft Enhanced Cryptographic Provider with RSA encryption/decryption."
      },
      {
        "in_out": "_Inout_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that contains the plaintext to be encrypted.  The plaintext in this buffer is overwritten with the ciphertext created by this function. The pdwDataLen parameter points to a variable that contains the length, in bytes, of the plaintext. The dwBufLen parameter contains the total size, in bytes, of this buffer. If this parameter contains NULL, this function will calculate the required size for the ciphertext and place that in the value pointed to by the pdwDataLen parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value that , on entry, contains the length, in bytes, of the plaintext in the pbData buffer. On exit, this DWORD contains the length, in bytes, of the ciphertext written to the pbData buffer. If the buffer allocated for pbData is not large enough to hold the encrypted data,  GetLastError returns ERROR_MORE_DATA and stores the required buffer size, in bytes, in the DWORD value pointed to by pdwDataLen. If pbData is NULL, no error is returned, and the function stores the size of the encrypted data, in bytes, in the DWORD value pointed to by pdwDataLen. This allows an application to determine the correct buffer size. When a block cipher is used, this data length must be a multiple of the block size unless this is the final section of data to be encrypted and the Final parameter is TRUE."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwBufLen",
        "description": "Specifies the total size, in bytes, of the input pbData buffer. Note that, depending on the algorithm used, the encrypted text can be larger than the original plaintext. In this case, the pbData buffer needs to be large enough to contain the encrypted text and any padding. As a rule, if a stream cipher is used, the ciphertext is the same size as the plaintext. If a block cipher is used, the ciphertext is up to a block length larger than the plaintext."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptDecrypt function decrypts data previously encrypted by using  the CryptEncrypt function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP being used. Some possible error codes follow.  ",
    "remarks": " If a large amount of data is to be decrypted, it can be done in sections by calling CryptDecrypt repeatedly. The Final parameter must be set to TRUE only on the last call to CryptDecrypt, so that the decryption engine can properly finish the decryption process. The following extra actions are performed when Final is TRUE: There is no way to set the cipher's feedback register to the KP_IV value of the key without setting the Final parameter to TRUE. If this is necessary, as in the case where you do not want to add an additional padding block or change the size of each block, you can simulate this by creating a duplicate of the original key by using the CryptDuplicateKey function, and passing the duplicate key to the CryptDecrypt function. This causes the KP_IV of the original key to be placed in the duplicate key. After you create or import the original key, you cannot use the original key for encryption because the feedback register of the key will be changed. The following pseudocode shows how this can be done. The Microsoft Enhanced Cryptographic Provider supports direct encryption with RSA public keys and decryption with RSA private keys. The encryption uses PKCS #1 padding. On decryption, this padding is verified. The length of ciphertext data to be decrypted must be the same length as the modulus of the RSA key used to decrypt the data. If the ciphertext has zeros in the most significant bytes, these bytes must be included in the input data buffer and in the input buffer length. The ciphertext must be in little-endian format. For an example that uses this function, see Example C Program: Decrypting a File. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecrypt",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the key to use for the decryption. An application obtains this handle by using either the  CryptGenKey or  CryptImportKey function.     This key specifies the decryption algorithm to be used."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "A handle to a hash object. If data is to be decrypted and hashed simultaneously, a handle to a hash object is passed in this parameter. The hash value is updated with the decrypted plaintext. This option is useful when simultaneously decrypting and verifying a signature.     Before calling CryptDecrypt, the application must obtain a handle to the hash object by calling the  CryptCreateHash function. After the decryption is complete, the hash value can be obtained by using the  CryptGetHashParam function, it can also be signed by using  the CryptSignHash function, or it can be used to verify a digital signature by using  the CryptVerifySignature function. If no hash is to be done, this parameter must be zero."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "Final",
        "description": "A Boolean value that specifies whether this is the last section in a series being decrypted. This value is TRUE if this is the last or only block. If this is not the last block, this value is FALSE. For more information, see  Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined.  ValueMeaning  CRYPT_OAEP 0x00000040   Use Optimal Asymmetric Encryption Padding (OAEP)  (PKCS #1 version 2). This flag is only supported by the Microsoft Enhanced Cryptographic Provider with RSA encryption/decryption. This flag cannot be combined with the CRYPT_DECRYPT_RSA_NO_PADDING_CHECK flag.   CRYPT_DECRYPT_RSA_NO_PADDING_CHECK 0x00000020   Perform the decryption on the BLOB without checking the padding. This flag is only supported by the Microsoft Enhanced Cryptographic Provider with RSA encryption/decryption. This flag cannot be combined with the CRYPT_OAEP flag."
      },
      {
        "in_out": "_Inout_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that contains the data to be decrypted. After the decryption has been performed, the plaintext is placed back into this same buffer.     The number of encrypted bytes in this buffer is specified by pdwDataLen."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value that indicates the length of the pbData buffer. Before calling this function, the calling application sets the DWORD value to the number of bytes to be decrypted. Upon return, the DWORD value contains the number of bytes of the decrypted plaintext.     When a block cipher is used, this data length must be a multiple of the block size unless this is the final section of data to be decrypted and the Final parameter is TRUE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptProtectData function performs encryption on the data in a  DATA_BLOB structure. Typically, only a user with the same logon credential as the user who encrypted the data can decrypt the data. In addition, the encryption and decryption usually must be done on the same computer. For information about exceptions, see  Remarks.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Dpapi.h;  Wincrypt.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. ",
    "remarks": "Typically, only a user with logon credentials that match those of the user who encrypted the data can decrypt the data. In addition, decryption usually can only be done on the computer where the data was encrypted. However, a user with a roaming profile can decrypt the data from another computer on the network. If the CRYPTPROTECT_LOCAL_MACHINE flag is set when the data is encrypted, any user on the computer where the encryption was done can decrypt the data. The function creates a session key to perform the encryption. The session key is derived again when the data is to be decrypted. The function also adds a Message Authentication Code (MAC) (keyed integrity check) to the encrypted data to guard against data tampering. To encrypt memory for temporary use in the same process or across processes, call the CryptProtectMemory function. The following example shows encryption of the data in a DATA_BLOB structure. The CryptProtectData function does the encryption by using a session key that the function creates by using the user's logon credentials. For another example that uses this function, see  Example C Program: Using CryptProtectData. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptProtectData",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATA_BLOB*",
        "name": "pDataIn",
        "description": "A pointer to a  DATA_BLOB structure that contains the plaintext to be encrypted."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "szDataDescr",
        "description": "A string with a readable description of the data to be encrypted. This description string is included with the encrypted data. This parameter is optional and can be set to NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "DATA_BLOB*",
        "name": "pOptionalEntropy",
        "description": "A pointer to a DATA_BLOB structure that contains a password or other additional entropy used to encrypt the data. The DATA_BLOB structure used in the encryption phase must also be used in the decryption phase. This parameter can be set to NULL for no additional entropy. For information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_Reserved_",
        "type": "PVOID",
        "name": "pvReserved",
        "description": "Reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "CRYPTPROTECT_PROMPTSTRUCT*",
        "name": "pPromptStruct",
        "description": "A pointer to a  CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed and what the content of those prompts should be. This parameter can be set to NULL in both the encryption and decryption phases."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following flags.  ValueMeaning  CRYPTPROTECT_LOCAL_MACHINE   When this flag is set, it associates the data encrypted with the current computer instead of with an individual user. Any user on the computer on which CryptProtectData is called can use  CryptUnprotectData to decrypt the data.   CRYPTPROTECT_UI_FORBIDDEN   This flag is used for remote situations where presenting a user interface (UI) is not an option. When this flag is set and a UI is specified for either the protect or unprotect operation, the operation fails and  GetLastError returns the ERROR_PASSWORD_RESTRICTION code.   CRYPTPROTECT_AUDIT   This flag generates an audit on protect and unprotect operations."
      },
      {
        "in_out": "_Out_",
        "type": "DATA_BLOB*",
        "name": "pDataOut",
        "description": "A pointer to a  DATA_BLOB structure that receives the encrypted data. When you have finished using the DATA_BLOB structure, free its pbData member by calling the   LocalFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptProtectMemory function encrypts memory to prevent others from viewing sensitive information in your process. For example, use the CryptProtectMemory function to encrypt memory that contains a password. Encrypting the password prevents others from viewing it when the process is paged out to the swap file. Otherwise, the password is in plaintext and viewable by others.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Dpapi.h;  Wincrypt.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "Using  CryptProtectMemory and CryptUnprotectMemory for password encryption is not secure because the data exists as plaintext in memory before it is encrypted and at any time the caller decrypts it for use. Typically, you use the CryptProtectMemory function to encrypt sensitive information that you are going to decrypt while your process is running.  Do not use this function to save data that you want to decrypt later; you will not be able to decrypt the data if the computer is restarted. To save encrypted data to a file to decrypt later, use the CryptProtectData function. Call the CryptUnprotectMemory function to decrypt memory encrypted with the CryptProtectMemory function.  When you have finished using the sensitive information, clear it from memory by calling the SecureZeroMemory function. Use the CRYPTPROTECTMEMORY_CROSS_PROCESS or CRYPTPROTECTMEMORY_SAME_LOGON flag if you use RPC or LRPC to pass encrypted data to another process. The receiving process must specify the same flag to decrypt the data. Also, use these flags if you use shared memory. If the client uses the CRYPTPROTECTMEMORY_SAME_LOGON flag, the server must impersonate the client (RpcImpersonateClient) before decrypting the memory. The following example calls  the CryptProtectMemory function to encrypt data that is in memory. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptProtectMemory",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPVOID",
        "name": "pData",
        "description": "A pointer to the block of memory to encrypt. The cbData parameter specifies the number of bytes that will be encrypted. If the data contained in the memory space is smaller than the number of bytes specified, data outside of the intended block will be encrypted. If it is larger than cbData bytes, then only the first cbData bytes will be encrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "Number of bytes of memory pointed to by the pData parameter to encrypt. The number of bytes must be a multiple of the CRYPTPROTECTMEMORY_BLOCK_SIZE constant defined in Wincrypt.h."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following flags. You must specify the same flag when encrypting and decrypting the memory.  ValueMeaning  CRYPTPROTECTMEMORY_SAME_PROCESS   Encrypt and decrypt memory in the same process. An application running in a different process will not be able to decrypt the data.   CRYPTPROTECTMEMORY_CROSS_PROCESS   Encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data.   CRYPTPROTECTMEMORY_SAME_LOGON   Use the same logon credentials to encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data. However, the process must run as the same user that encrypted the data and in the same logon session."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptUnprotectData function decrypts and does an integrity check of the data in a  DATA_BLOB structure. Usually, the only user who can decrypt the data is a user with the same logon credentials as the user who encrypted the data. In addition, the encryption and decryption must be done on the same computer. For information about exceptions, see the Remarks section of  CryptProtectData.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Dpapi.h;  Wincrypt.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP",
    "return_value": "If the function succeeds, the function returns  TRUE. If the function fails, it returns  FALSE. ",
    "remarks": "The  CryptProtectData function creates a session key when the data is encrypted. That key is derived again and used to decrypt the data BLOB. The Message Authentication Code (MAC) hash added to the encrypted data can be used to determine whether the encrypted data was altered in any way. Any tampering results in the return of the ERROR_INVALID_DATA code. When you have finished using the DATA_BLOB structure, free its pbData member by calling the  LocalFree function. Any ppszDataDescr that is not NULL must also be freed by using LocalFree. When you have finished using sensitive information, clear it from memory by calling the SecureZeroMemory function. The following example shows decrypting encrypted data in a  DATA_BLOB structure. This function does the decryption by using a session key that the function creates by using the user's logon credentials. For another example that uses this function, see  Example C Program: Using CryptProtectData. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUnprotectData",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATA_BLOB*",
        "name": "pDataIn",
        "description": "A pointer to a  DATA_BLOB structure that holds the encrypted data. The DATA_BLOB structure's cbData member holds the length of the pbData member's byte string that contains the text to be encrypted."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "ppszDataDescr",
        "description": "A pointer to a string-readable description of the encrypted data included with the encrypted data. This parameter can be set to NULL.  When you have finished using ppszDataDescr, free it by calling the  LocalFree function."
      },
      {
        "in_out": "_In_opt_",
        "type": "DATA_BLOB*",
        "name": "pOptionalEntropy",
        "description": "A pointer to a DATA_BLOB structure that contains a password or other additional entropy used when the data was encrypted. This parameter can be set to NULL; however, if an optional entropy DATA_BLOB structure was used in the encryption phase, that same DATA_BLOB structure must be used for the decryption phase. For information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_Reserved_",
        "type": "PVOID",
        "name": "pvReserved",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "CRYPTPROTECT_PROMPTSTRUCT*",
        "name": "pPromptStruct",
        "description": "A pointer to a  CRYPTPROTECT_PROMPTSTRUCT structure that provides information about where and when prompts are to be displayed and what the content of those prompts should be. This parameter can be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that specifies options for this function. This parameter can be zero, in which case no option is set, or the following flag.  ValueMeaning  CRYPTPROTECT_UI_FORBIDDEN   This flag is used for remote situations where the user interface (UI) is not an option. When this flag is set and UI is specified for either the protect or unprotect operation, the operation fails and  GetLastError returns the ERROR_PASSWORD_RESTRICTION code.   CRYPTPROTECT_VERIFY_PROTECTION   This flag verifies the protection of a protected BLOB. If the default protection level configured of the host is higher than the current protection level for the BLOB, the function returns CRYPT_I_NEW_PROTECTION_REQUIRED to advise the caller to again protect the plaintext contained in the BLOB."
      },
      {
        "in_out": "_Out_",
        "type": "DATA_BLOB*",
        "name": "pDataOut",
        "description": "A pointer to a DATA_BLOB structure where the function stores the decrypted data. When you have finished using the DATA_BLOB structure, free its pbData member by calling the  LocalFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptUnprotectMemory function decrypts memory that was encrypted using the CryptProtectMemory function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Dpapi.h;  Wincrypt.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista and Windows Server 2003",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "Using  CryptProtectMemory and CryptUnprotectMemory for password encryption is not secure because the data exists as plaintext in memory before it is encrypted and at any time the caller decrypts it for use. You must encrypt and decrypt the memory during the same boot session. If the computer is restarted before you call the CryptUnprotectMemory function, you will not be able to decrypt the data. You must pass the same flag to CryptUnprotectMemory and CryptProtectMemory. If you pass different flags, the CryptUnprotectMemory function succeeds; however, the result is unpredictable. When you have finished using the sensitive information, clear it from memory by calling the SecureZeroMemory function. The following example calls  the CryptUnprotectMemory function to decrypt data that is in memory. The example assumes the variable pEncryptedText points to a string that has been encrypted using the CryptProtectMemory function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUnprotectMemory",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPVOID",
        "name": "pData",
        "description": "A pointer to the block of memory to decrypt. The cbData parameter specifies the number of bytes that the function will attempt to decrypt. If the data contained in the memory space is smaller than the number of bytes specified, the function will attempt to decrypt data outside of the intended block. If it is larger than cbData bytes, then only the first cbData bytes will be decrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "Number of bytes of memory pointed to by the pData parameter to decrypt. The number of bytes must be a multiple of the CRYPTPROTECTMEMORY_BLOCK_SIZE constant defined in Wincrypt.h."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following flags. You must specify the same flag when encrypting and decrypting the memory.  ValueMeaning  CRYPTPROTECTMEMORY_SAME_PROCESS   Encrypt and decrypt memory in the same process. An application running in a different process will not be able to decrypt the data.   CRYPTPROTECTMEMORY_CROSS_PROCESS   Encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data.   CRYPTPROTECTMEMORY_SAME_LOGON   Use the same logon credentials to encrypt and decrypt memory in different processes. An application running in a different process will be able to decrypt the data. However, the process must run as the same user that encrypted the data and in the same logon session."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptCreateHash function initiates the hashing of a stream of data. It creates and returns to the calling application a handle to a cryptographic service provider (CSP) hash object. This handle is used in subsequent calls to  CryptHashData and  CryptHashSessionKey to hash session keys and other streams of data.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The error codes prefaced by NTE are generated by the particular CSP you are using. The following table shows some of the possible error codes.  ",
    "remarks": "For a list of Microsoft service providers and the algorithms they implement, see Microsoft Cryptographic Service Providers. The computation of the actual hash is done with the  CryptHashData and  CryptHashSessionKey functions. These require a handle to the hash object. After all the data has been added to the hash object, any of the following operations can be performed: After one of the functions from this list has been called,  CryptHashData and  CryptHashSessionKey cannot be called. The following example shows initiating the hashing of a stream of data. It creates and returns to the calling application a handle to a hash object. This handle is used in subsequent calls to  CryptHashData and  CryptHashSessionKey to hash any stream of data. For an example that includes the complete context for this example, see  Example C Program: Creating and Hashing a Session Key. For another example that uses this function, see Example C Program: Signing a Hash and Verifying the Hash Signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCreateHash",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A handle to a CSP created by a call to  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "Algid",
        "description": "An ALG_ID value that identifies  the hash algorithm to use. Valid values for this parameter vary, depending on the CSP that is used. For a list of default algorithms, see  Remarks."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "If the type of hash algorithm is a keyed hash, such as the Hash-Based Message Authentication Code (HMAC) or Message Authentication Code (MAC) algorithm, the key for the hash is passed in this parameter. For nonkeyed algorithms, this parameter must be set to zero. For keyed algorithms, the key must be to a block cipher key, such as RC2, that has a cipher mode of Cipher Block Chaining (CBC)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag value is defined.  ValueMeaning  CRYPT_SECRETDIGEST 0x00000001   This flag is not used."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTHASH*",
        "name": "phHash",
        "description": "The address to which the function copies a handle to the new hash object. When you have finished using the hash object, release the handle by calling the CryptDestroyHash function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptDestroyHash function destroys the hash object referenced by the hHash parameter. After a hash object has been destroyed, it can no longer be used.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular cryptographic service provider (CSP) you are using. Some possible error codes follow.  ",
    "remarks": "When a hash object is destroyed, many CSPs overwrite the memory in the CSP where the hash object was held. The CSP memory is then freed. There should be a one-to-one correspondence between calls to  CryptCreateHash and CryptDestroyHash. All hash objects that have been created by using a specific CSP must be destroyed before that CSP handle is released with the CryptReleaseContext function. For an example that uses the CryptDestroyHash function, see Example C Program: Creating and Hashing a Session Key. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDestroyHash",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "The handle of the hash object to be destroyed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptDuplicateHash function makes an exact copy of a hash to the point when the duplication is done. The duplicate hash includes the state of the hash.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The error code prefaced by \"NTE\" is generated by the particular cryptographic service provider (CSP) that you are using. Some possible error codes follow.  ",
    "remarks": "CryptDuplicateHash makes a copy of a hash and the exact state of the hash. This function might be used if a calling application needed to generate two hashes but both hashes had to start with some common data hashed. For example, a hash might be created, the common data hashed, a duplicate made with the CryptDuplicateHash function, and then the data unique to each hash would be added. The CryptDestroyHash function must be called to destroy any hashes that are created with CryptDuplicateHash. Destroying the original hash does not cause the duplicate hash to be destroyed. After a duplicate hash is made, it is separate from the original hash. There is no shared state between the two hashes. The following example shows making an exact copy of a hash. For an example that includes the complete context for this example, see Example C Program: Duplicating a Hash. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDuplicateHash",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "Handle of the hash to be duplicated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwReserved",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTHASH*",
        "name": "phHash",
        "description": "Address of the handle of the duplicated hash. When you have finished using the hash, release the handle by calling the CryptDestroyHash function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptGetHashParam function retrieves data that governs the operations of a hash object. The actual hash value can be retrieved by using this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  For an example that uses the  CryptGetHashParam function, see Example C Program: Duplicating a Hash. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetHashParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "Handle of the hash object to be queried."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "Query type. This parameter can be set to one of the following queries.  \t\t\t\t\t  ValueMeaning  HP_ALGID Hash algorithm   An  ALG_ID that indicates the algorithm specified when the hash object was created. For a list of hash algorithms, see  CryptCreateHash.   HP_HASHSIZE Hash value size   DWORD value indicating the number of bytes in the hash value. This value will vary depending on the hash algorithm. Applications must retrieve this value just before the HP_HASHVAL value so the correct amount of memory can be allocated.   HP_HASHVAL Hash value   The hash value or message hash for the hash object specified by hHash. This value is generated based on the data supplied to the hash object earlier through the  CryptHashData and  CryptHashSessionKey functions.  The CryptGetHashParam function completes the hash. After CryptGetHashParam has been called, no more data can be added to the hash. Additional calls to CryptHashData or CryptHashSessionKey fail. After the application is done with the hash,  CryptDestroyHash should be called to destroy the hash object.     Note  CSPs can add more values that this function can query."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that receives the specified value data. The form of this data varies, depending on the value number.    This parameter can be NULL to determine the memory size required."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataLen",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the pbData buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer.    If pbData is NULL, set the value of pdwDataLen to zero. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptHashData function adds data to a specified hash object. This function and  CryptHashSessionKey can be called multiple times to compute the hash of long or discontinuous data streams.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  The following example shows adding data to a specified hash object already created by CryptCreateHash. For an example that includes the complete context for this example, see Example C Program: Signing a Hash and Verifying the Hash Signature.  \t\t\t\t\t\tFor another example that uses this function, see Example C Program: Deriving a Session Key from a Password. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashData",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "Handle of the hash object."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer that contains the data to be added to the hash object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDataLen",
        "description": "Number of bytes of data to be added. This must be zero if the CRYPT_USERDATA flag is set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined.  ValueMeaning  CRYPT_OWF_REPL_LM_HASH 0x00000001   This flag is not used.   CRYPT_USERDATA 1 (0x1)   All Microsoft Cryptographic Providers ignore this parameter. For any CSP that does not ignore this parameter, if this flag is set, the CSP prompts the user to input data directly. This data is added to the hash. The application is not allowed access to the data. This flag can be used to allow the user to enter a PIN into the system."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptHashSessionKey function computes the cryptographic hash of a session key object. This function can be called multiple times with the same hash handle to compute the hash of multiple keys. Calls to CryptHashSessionKey can be interspersed with calls to  CryptHashData.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  The following example shows computing the cryptographic hash of a session key object. For an example that includes the complete context for this example, see Example C Program: Creating and Hashing a Session Key. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashSessionKey",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "A handle to the hash object."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hKey",
        "description": "A handle to the key object to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag value is defined.      \t\t\t\t\t  ValueMeaning  CRYPT_LITTLE_ENDIAN 0x00000001   When this flag is set, the bytes of the key are hashed in little-endian form. Note that by default (when dwFlags is zero), the bytes of the key are hashed in big-endian form."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptSetHashParam function customizes the operations of a hash object, including setting up initial hash contents and selecting a specific hashing algorithm.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  ",
    "remarks": "Occasionally, a hash value that has been generated elsewhere must be signed. This can be done by using the following sequence of operations: ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetHashParam",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "A handle to the hash object on which to set parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParam",
        "description": "This parameter can be one of the following values.  ValueMeaning  HP_HMAC_INFO.   A pointer to an  HMAC_INFO structure that specifies the cryptographic hash algorithm and the inner and outer strings to be used.   HP_HASHVAL.   A byte array that contains a hash value to place directly into the hash object. Before setting this value, the size of the hash value must be determined by using the  CryptGetHashParam function to read the HP_HASHSIZE value. Some cryptographic service providers (CSPs) do not support this capability.     Note  Some CSP types can add additional values that can be set by using this function."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "A value data buffer. Place the value data in this buffer before calling CryptSetHashParam. The form of this data varies, depending on the value number."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptSignHash function signs data. Because all signature algorithms are asymmetric and thus slow, CryptoAPI does not allow data to be signed directly. Instead, data is first hashed, and CryptSignHash is used to sign the hash.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  ",
    "remarks": "Before calling this function, the  CryptCreateHash function must be called to get a handle to a hash object. The  CryptHashData or  CryptHashSessionKey function is then used to add the data or session keys to the hash object. The CryptSignHash function completes the hash. While the DSS CSP supports hashing with both the MD5 and the SHA hash algorithms, the DSS CSP only supports signing SHA hashes. After this function is called, no more data can be added to the hash. Additional calls to CryptHashData or CryptHashSessionKey fail. After the application finishes using the hash,  destroy the hash object by calling the CryptDestroyHash function. By default, the Microsoft RSA providers use the PKCS #1 padding method for the signature. The hash OID in the DigestInfo element of the signature is automatically set to the algorithm OID associated with the hash object. Using the CRYPT_NOHASHOID flag will cause this OID to be omitted from the signature. Occasionally, a hash value that has been generated elsewhere must be signed. This can be done by using the following sequence of operations: The following example shows signing data by first hashing the data to be signed and then signing the hash by using the CryptSignHash function. For a complete example including the  context for this code, see  Example C Program: Signing a Hash and Verifying the Hash Signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignHash",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "Handle of the hash object to be signed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE.     The signature algorithm used is specified when the key pair is originally created. The only signature algorithm that the Microsoft Base Cryptographic Provider supports is the RSA Public Key algorithm."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "sDescription",
        "description": "This parameter is no longer used and must be set to NULL to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined.      \t\t\t\t\t  ValueMeaning  CRYPT_NOHASHOID 0x00000001   Used with RSA providers. The hash object identifier (OID) is not placed in the RSA public key encryption. If this flag is not set, the hash OID in the default signature is as specified in the definition of DigestInfo in PKCS #1.     \t\t\t\t\t\t\t   CRYPT_TYPE2_FORMAT 0x00000002   This flag is not used.   CRYPT_X931_FORMAT 0x00000004   Use the RSA signature padding method specified in the ANSI X9.31 standard."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignature",
        "description": "A pointer to a buffer receiving the signature data.     This parameter can be NULL to set the buffer size for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwSigLen",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the pbSignature buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The  CryptUIWizDigitalSign function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIWizDigitalSign",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Contains flags that modify the behavior of the function. This can be zero or the following value.  ValueMeaning  CRYPTUI_WIZ_NO_UI 0x0001   This function will sign the document based on the information in the CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure pointed to by the pDigitalSignInfo parameter without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the signing process."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "The handle of the window to use as the parent of the dialog box that  this function creates. This parameter is ignored if the CRYPTUI_WIZ_NO_UI flag is set in dwFlags."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszWizardTitle",
        "description": "A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This parameter is ignored if the CRYPT_WIZ_NO_UI flag is set in dwFlags. If this parameter is NULL, a default title is used."
      },
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO",
        "name": "pDigitalSignInfo",
        "description": "A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_INFO structure that contains information about the signing process."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT*",
        "name": "ppSignContext",
        "description": "A pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure pointer that receives the signed BLOB. When you have finished using this structure, you must free the memory by passing this pointer to the CryptUIWizFreeDigitalSignContext function. This parameter can be NULL if the signed BLOB is not needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptUIWizFreeDigitalSignContext function frees the CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure allocated by the CryptUIWizDigitalSign function.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIWizFreeDigitalSignContext",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT",
        "name": "pSignContext",
        "description": "A pointer to the   CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptVerifySignature function verifies the signature of a hash object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. The error codes prefaced by \"NTE\" are generated by the particular CSP you are using. Some possible error codes follow.  ",
    "remarks": "The CryptVerifySignature function completes the hash. After this call, no more data can be added to the hash. Additional calls to  CryptHashData or  CryptHashSessionKey fail. After the application is done with the hash,  CryptDestroyHash should be called to destroy the hash object. If you generate a signature by using the .NET Framework APIs and try to verify it by using the CryptVerifySignature function, the function will fail and GetLastError will return  NTE_BAD_SIGNATURE. This is due to the different byte orders between the native Win32 API  and the .NET Framework API. The native cryptography API uses little-endian byte order while the .NET Framework API uses big-endian byte order. If you are verifying a  signature generated by using a .NET Framework API, you must swap the order of signature bytes before calling the CryptVerifySignature function to verify the signature. For an example that uses the CryptVerifySignature function, see Example C Program: Signing a Hash and Verifying the Hash Signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifySignature",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTHASH",
        "name": "hHash",
        "description": "A handle to the hash object to verify."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbSignature",
        "description": "The address of the signature data to be verified."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSigLen",
        "description": "The number of bytes in the pbSignature signature data."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTKEY",
        "name": "hPubKey",
        "description": "A handle to the public key to use to authenticate the signature. This public key must belong to the key pair that was originally used to create the digital signature."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "sDescription",
        "description": "This parameter should no longer be used and must be set to NULL to prevent security vulnerabilities. However, it is still supported for backward compatibility in the Microsoft Base Cryptographic Provider."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined. ..."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFNCFILTERPROC function is an application-defined callback function that filters the certificates that appear in the digital signature wizard that are displayed by the CryptUIWizDigitalSign function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "A Boolean value that specifies whether the certificate contained in the CERT_CONTEXT structure pointed to by the pCertContext parameter should be displayed in the digital signature wizard. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFNCFILTERPROC",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a CERT_CONTEXT structure that contains the certificate to filter."
      },
      {
        "in_out": "_In_",
        "type": "BOOL*",
        "name": "pfInitialSelectedCert",
        "description": "A Boolean value that specifies whether  the certificate contained in the CERT_CONTEXT structure pointed to by the pCertContext parameter should be initially selected in the dialog box. This parameter is used only if the filter process returns TRUE."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvCallbackData",
        "description": "A pointer to user-defined data."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddStoreToCollection function adds a sibling certificate store to a collection certificate store. When a certificate store has been added to a collection store, all of the certificates, certificate revocation lists (CRLs), and certificate trust lists (CTLs) in the store that has been added to the collection store can be retrieved by using find or enumerate function calls that use the collection store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero and a new store is added to the collection of stores. If the function fails, it returns zero and the store was not added. ",
    "remarks": "A collection store has the same HCERTSTORE handle as a single store; thus, almost all functions that apply to any certificate store also apply to any collection store. Enumeration and search processes span all of the stores in a collection store; however, functions such as  CertAddCertificateLinkToStore that add links to stores cannot be used with collection stores. When a certificate, CRL, or CTL is added to a collection store, the list of sibling stores in the collection is searched in priority order to find the first store that allows adding. Adding is enabled if CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG was set in the CertAddStoreToCollection call. With any function that adds elements to a store, if a store that allows adding does not return success, the addition function continues on to the next store without providing notification. When a collection store and its sibling stores are closed with  CertCloseStore using CERT_CLOSE_STORE_FORCE_FLAG, the collection store must be closed before its sibling stores. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the stores can be closed in any order. The following example shows adding a sibling certificate store to a collection certificate store. For a full example including the complete context for this example, see  Example C Program: Collection and Sibling Certificate Store Operations. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddStoreToCollection",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCollectionStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_opt_",
        "type": "HCERTSTORE",
        "name": "hSiblingStore",
        "description": "Handle of a sibling store to be added to the collection store. For more information, see  Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwUpdateFlag",
        "description": "Indicates whether certificates, CRLs, and CTLs can be added to the new sibling store member of the collection store. To enable addition, set dwUpdateFlag to CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG.   To disable additions, set dwUpdateFlag to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPriority",
        "description": "Sets a priority level of the new store in the collection, with zero being the lowest priority. If zero is passed for this parameter, the specified store is appended as the last store in the collection. The priority levels of the stores in a collection determine the order in which the stores are enumerated, and the search order of the stores when attempting to retrieve a certificate, CRL, or CTL. Priority levels also determine to which store of a collection a new certificate, CRL, or CTL is added. For more information, see  Remarks."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertCloseStore function closes a certificate store handle and reduces the reference count on the store. There needs to be a corresponding call to CertCloseStore for each successful call to the  CertOpenStore or  CertDuplicateStore functions.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. If CERT_CLOSE_STORE_CHECK_FLAG is not set or if it is set and all contexts associated with the store have been freed, the return value is TRUE. If CERT_CLOSE_STORE_CHECK_FLAG is set and memory for one or more contexts associated with the store remains allocated, the return value is FALSE. The store is always closed even when the function returns FALSE. For details, see  Remarks. GetLastError is set to CRYPT_E_PENDING_CLOSE if memory for contexts associated with the store remains allocated. Any existing value returned by GetLastError is preserved unless CERT_CLOSE_STORE_CHECK_FLAG is set. ",
    "remarks": "While a certificate store is open, contexts from that store can be retrieved or duplicated. When a context is retrieved or duplicated, its reference count is incremented. When a context is freed by passing it to a search or enumeration function as a previous context or by using  CertFreeCertificateContext,  CertFreeCRLContext, or  CertFreeCTLContext, its reference count is decremented. When a context's reference count reaches zero, memory allocated for that context is automatically freed. When the memory allocated for a context has been freed, any pointers to that context become not valid. By default, memory used to store contexts with reference count greater than zero is not freed when a certificate store is closed. References to those contexts remain valid; however, this can cause memory leaks. Also, any changes made to the properties of a context after the store has been closed are not persisted. To force the freeing of memory for all contexts associated with a store, set CERT_CLOSE_STORE_FORCE_FLAG. With this flag set, memory for all contexts associated with the store is freed and all pointers to certificate, CRL, or CTL contexts associated with the store become not valid. This flag should only be set when the store is opened in a function and neither the store handle nor any of its contexts were ever passed to any called functions. The status of reference counts on contexts associated with a store can be checked when the store is closed by using CERT_CLOSE_STORE_CHECK_FLAG. When this flag is set, and all certificate, CRL, or CTL contexts have not been released, the function returns FALSE and  GetLastError returns CRYPT_E_PENDING_CLOSE. Note that the store is still closed when FALSE is returned and the memory for any active contexts is not freed. If CERT_STORE_NO_CRYPT_RELEASE_FLAG was not set when the store was opened, closing a store releases its CSP handle. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCloseStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of the certificate store to be closed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Typically, this parameter uses the default value zero. The default is to close the store with memory remaining allocated for contexts that have not been freed. In this case, no check is made to determine whether memory for contexts remains allocated.     Set flags can force the freeing of memory for all of a store's certificate, certificate revocation list (CRL), and certificate trust list (CTL) contexts when the store is closed. Flags can also be set that check whether all of the store's certificate, CRL, and CTL contexts have been freed. The following values are defined.  ValueMeaning  CERT_CLOSE_STORE_CHECK_FLAG   Checks for nonfreed certificate, CRL, and CTL contexts. A returned error code indicates that one or more store elements is still in use. This flag should only be used as a diagnostic tool in the development of applications.   CERT_CLOSE_STORE_FORCE_FLAG   Forces the freeing of memory for all contexts associated with the store. This flag can be safely used only when the store is opened in a function and neither the store handle nor any of its contexts are passed to any called functions. For details, see  Remarks."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertControlStore function allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage. Differences can occur as another process makes a change that affects the store as it is persisted.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. If dwCtrlType is CERT_STORE_NOTIFY_CHANGE, the function returns nonzero if a handle for the event signal was successfully set up. The function returns zero if the event handle was not set up. If dwCtrlType is CERT_STORE_CTRL_RESYNC, the function returns nonzero if the resynchronization succeeded. The function returns zero if the resynchronization failed. If dwCtrlType is CERT_STORE_CTRL_COMMIT, the function returns nonzero to indicate the successful completion of the commit to persisted storage. The function returns zero if the commit failed. Some providers might not support specific control types. In these cases, CertControlStore returns zero and GetLastError is set to the ERROR_NOT_SUPPORTED code. ",
    "remarks": "Resynchronization of a store can be done at any time. It need not follow a signaled notification change event. CERT_STORE_CTRL_NOTIFY_CHANGE is supported on registry-based store providers by using the RegNotifyChangeKeyValue function. CertControlStore using CERT_STORE_CTRL_NOTIFY_CHANGE is called once for each event handle to be passed with CERT_STORE_CTRL_RESYNC. These calls using CERT_STORE_CTRL_NOTIFY_CHANGE must be made after each event is created and not after an event has been signaled. The following example shows allowing an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage. For the full example including the complete context for this example, see  Example C Program: Setting and Getting Certificate Store Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertControlStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If the dwCtrlType parameter is set to CERT_STORE_CTRL_COMMIT, this parameter can be one of the following values.  ValueMeaning  CERT_STORE_CTRL_COMMIT_FORCE_FLAG   Forces the contents of the cache memory store to be copied to permanent storage even if the cache has not been changed.   CERT_STORE_CTRL_COMMIT_CLEAR_FLAG   Inhibits the copying of the contents of the cache memory store to permanent storage even when the store is closed.   CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG   Inhibits a duplicate handle of the event HANDLE. If this flag is set, CertControlStore with CERT_STORE_CTRL_CANCEL_NOTIFY passed must be called for this event HANDLE before closing the hCertStore handle.     If dwCtrlType is set to CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC, the dwFlags parameter is not used and must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCtrlType",
        "description": "Control action to be taken by CertControlStore. The interpretations of pvCtrlPara and dwFlags depend on the value of dwCtrlType. Currently, the following  actions are defined.  ValueMeaning  CERT_STORE_CTRL_RESYNC   The cached store is resynchronized and made to match the persisted store.   CERT_STORE_CTRL_NOTIFY_CHANGE   A signal is returned in the space pointed to by pvCtrlPara to indicate that the current contents of the cached store differ from the store's persisted state.   CERT_STORE_CTRL_COMMIT   Any changes made to the cached store are copied to persisted storage. If no changes were made since the cached store was opened or since the last commit, the call is ignored. The call is also ignored if the store provider is a provider that automatically persists changes immediately.   CERT_STORE_CTRL_AUTO_RESYNC   At the start of every enumeration or find store call, a check is made to determine whether a change has been made in the store. If the store has changed, a re-synchronization is done. This check is only done on first enumeration or find calls, when the pPrevContext is NULL.  The pvCtrPara member is not used and must be set to NULL.   CERT_STORE_CTRL_CANCEL_NOTIFY   Cancels notification signaling of the event HANDLE passed in a previous CERT_STORE_CTRL_NOTIFY_CHANGE or CERT_STORE_CTRL_RESYNC. The pvCtrlPara parameter points to the event HANDLE to be canceled."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvCtrlPara",
        "description": "If dwCtrlType is CERT_STORE_NOTIFY_CHANGE, pvCtrlPara is set to the address of a handle where the system signals the notification change event when a change from the persisted state of the store is detected. The handle must be initialized with a call to the function CreateEvent. The pvCtrlPara parameter can be set to NULL for registry-based stores. If pvCtrlPara is NULL, an internal notification change event is created and registered to be signaled. Using the internal notification change event allows resynchronization operations only if the store was changed.     If dwCtrlType is CERT_STORE_CTRL_RESYNC, set pvCtrlPara to the address of the event handle to be signaled on the next change in the persisted store. Typically, this address is the address of the event handle passed with CERT_STORE_CTRL_NOTIFY_CHANGE during initialization. The event handle passed is rearmed. If pvCtrlPara is set to NULL, no event is rearmed. If dwCtrlType CERT_STORE_CTRL_COMMIT, pvCtrlPara is not used and must be set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDuplicateStore function duplicates a store handle by incrementing the store's reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Currently, a copy is not made of the handle, and the returned handle is the same as the handle that was input. If NULL is passed in, the called function will raise an access violation exception. The following example shows creating an alias for a store handle and incrementing the store's reference count. For an example that includes the complete context for this example, see  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "HCERTSTORE",
    "category": "Cryptography",
    "name": "CertDuplicateStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of the certificate store for which the reference count is being incremented."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertEnumPhysicalStore function retrieves the physical stores on a computer. The function calls the provided callback function for each physical store found.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds and another physical store was found, the return value is TRUE. If the system store location only supports system stores and does not support physical stores, the function returns FALSE and  GetLastError returns the ERROR_NOT_SUPPORTED code. If the function fails and another physical store was not found, the return value is FALSE. For extended error information, call  GetLastError. ",
    "remarks": "To use CertEnumPhysicalStore, an application must declare and define the ENUM_ARG structure and an enumeration callback function. See  Example C Program: Listing System and Physical Stores. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumPhysicalStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing a ServiceName or ComputerName to the system store name, see  CertRegisterSystemStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the location of the system store. The following flag values are defined:  CERT_SYSTEM_STORE_CURRENT_USER CERT_SYSTEM_STORE_CURRENT_SERVICE CERT_SYSTEM_STORE_LOCAL_MACHINE CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY CERT_SYSTEM_STORE_SERVICES CERT_SYSTEM_STORE_USERS CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE  In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-OR operation with any of the high-word location flags."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to a void that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CERT_ENUM_PHYSICAL_STORE",
        "name": "pfnEnum",
        "description": "A pointer to the callback function used to show the details for each physical store. This callback function determines the content and format for the presentation of information on each physical store. The application must provide the CertEnumPhysicalStoreCallback callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertEnumSystemStore function retrieves the system stores available. The function calls the provided callback function for each system store found.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns  TRUE. If the function fails, it returns  FALSE. ",
    "remarks": "To use CertEnumSystemStore, the application must declare and define the ENUM_ARG structure and the CertEnumSystemStoreCallback callback function. For an example that uses this function, see  Example C Program: Listing System and Physical Stores. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumSystemStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the location of the system store. This parameter can be one of the following flags:      CERT_SYSTEM_STORE_CURRENT_USER CERT_SYSTEM_STORE_CURRENT_SERVICE CERT_SYSTEM_STORE_LOCAL_MACHINE CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY CERT_SYSTEM_STORE_SERVICES CERT_SYSTEM_STORE_USERS CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE  In addition, the CERT_SYSTEM_STORE_RELOCATE_FLAG can be combined, by using a bitwise-OR operation, with any of the high-word location flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvSystemStoreLocationPara",
        "description": "If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStoreLocationPara points to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store. Otherwise, pvSystemStoreLocationPara is a pointer to a Unicode string that names the system store.     For CERT_SYSTEM_STORE_LOCAL_MACHINE or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY, pvSystemStoreLocationPara can optionally be set to a Unicode computer name for enumerating local computer stores on a remote computer, for example \"\\\\computer_name\" or \"computer_name\". The leading backslashes (\\\\) are optional in the computer_name. For CERT_SYSTEM_STORE_SERVICES or CERT_SYSTEM_STORE_USERS, if pvSystemStoreLocationPara is NULL, the function enumerates both the service/user names and the stores for each service/user name. Otherwise, pvSystemStoreLocationPara is a Unicode string that contains a remote computer name and, if available, a service/user name, for example, \"service_name\", \"\\\\computer_name\", or \"computer_name\\\". If only the computer_name is specified, it must have either the leading backslashes (\\\\) or a trailing backslash (\\). Otherwise, it is interpreted as the service_name or user_name."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to a void  that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CERT_ENUM_SYSTEM_STORE",
        "name": "pfnEnum",
        "description": "A pointer to the callback function used to show the details for each system store. This callback function determines the content and format for the presentation of information on each system store. The application must provide the CertEnumSystemStoreCallback callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertEnumSystemStoreLocation function retrieves all of the system store locations. The function calls the provided callback function for each system store location found.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. ",
    "remarks": "To use CertEnumSystemStoreLocation, an application must declare and define the ENUM_ARG structure and an enumeration callback function. For an example that uses this function, see  Example C Program: Listing System and Physical Stores. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumSystemStoreLocation",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use; must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to a void  that allows the application to declare, define, and initialize a structure to hold any information to be passed to the callback enumeration function."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION",
        "name": "pfnEnum",
        "description": "A pointer to the callback function used to show the details for each store location. This callback function determines the content and format for the presentation of information on each store location. For the signature and parameters of the callback function, see CertEnumSystemStoreLocationCallback."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetStoreProperty function retrieves a store property.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. If the store property is found, the function returns nonzero, pvData points to the property, and pcbData points to the length of the string. If the store property is not found, the function returns zero and  GetLastError returns CRYPT_E_NOT_FOUND. ",
    "remarks": "Store property identifiers are properties applicable to an entire store. They are not properties on an individual certificate, certificate revocation list (CRL), or certificate trust list (CTL) context. Currently, no store properties are persisted. To find the localized name of a store, you can also use the CryptFindLocalizedName function. The following example  shows querying a store for its local name property. Similar code can be used to retrieve other store properties. For a complete example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetStoreProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of an open certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates one of a range of store properties. There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store. User defined properties must be outside the current range of values for predefined context properties. Currently, user defined dwPropId values begin at 4,096."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer that receives the data as determined by dwPropId. For CERT_STORE_LOCALIZED_NAME_PROP_ID, this is the localized name of the store, and pvData points to a null-terminated Unicode wide-character string. For other dwPropIds, pvData points to an array of bytes. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the pvData buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CertOpenStore function opens a certificate store by using a specified store provider type. While this function can open a certificate store for most purposes,  CertOpenSystemStore is recommended to open the most common certificate stores. CertOpenStore is required for more complex options and special cases.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a handle to the certificate store. When you have finished using the store, release the handle by calling the CertCloseStore function. If the function fails, it returns NULL. For extended error information, call  GetLastError.  ",
    "remarks": "A system store is a collection that consists of one or more physical sibling stores. For each system store, there are predefined physical sibling stores. After opening a system store such as \"My\" at CERT_SYSTEM_STORE_CURRENT_USER, CertOpenStore is called to open all of the physical stores in the system store collection. Each of these physical stores is added to the system store collection by using  the CertAddStoreToCollection function. All certificates, CRLs, and CTLs in those physical stores are available through the logical system store collection.  The following system store locations can be opened remotely:  System store locations are opened remotely by prefixing the store name in the string passed to pvPara with the computer name. Examples of remote system store names are: For more information about system stores, see  System Store Locations. For more information about the stores that are automatically migrated, see Certificate Store Migration. The following example shows opening several certificate stores of different store provider types.  The example uses the CreateMyDACL function, defined in the Creating a DACL topic, to ensure  the open file is created with a proper DACL. For more examples of opening other store provider types, see  Example C Code for Opening Certificate Stores. ",
    "return_type": "HCERTSTORE",
    "category": "Cryptography",
    "name": "CertOpenStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStoreProvider",
        "description": "A pointer to a null-terminated ANSI string that contains the store provider type. The following values  represent the predefined store types. The store provider type determines the contents of the pvPara parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or registered by using  the CryptInstallOIDFunctionAddress or  CryptRegisterOIDFunction function. For more information about adding store providers, see  Extending CertOpenStore Functionality.      ValueMeaning  CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION   Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to zero. pvPara value:  The pvPara parameter must be NULL.   CERT_STORE_PROV_FILE   Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a serialized store. The file is not closed when the store is closed. pvPara value:  The pvPara parameter must contain a pointer to the handle of a file opened by using CreateFile.    CERT_STORE_PROV_FILENAME_A   Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.  The dwEncodingType parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded certificate, the open operation fails and a call to the GetLastError function will return ERROR_ACCESS_DENIED.          If the CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows:  If the CERT_STORE_CREATE_NEW_FLAG flag is set,           CreateFile uses CREATE_NEW. If the CERT_STORE_OPEN_EXISTING_FLAG flag is set, CreateFile uses OPEN_EXISTING. For all other settings of dwFlags, CreateFile uses OPEN_ALWAYS.  If dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS #7. Otherwise, the file is committed as a serialized store. pvPara value:  The pvPara parameter must contain a pointer to null-terminated ANSI string that contains the name of an existing, unopened file.   CERT_STORE_PROV_FILENAME(_W) sz_CERT_STORE_PROV_FILENAME(_W)   Same as CERT_STORE_PROV_FILENAME_A. pvPara value:  The pvPara parameter must contain a pointer to null-terminated Unicode string that contains the name of an existing, unopened file.   CERT_STORE_PROV_LDAP(_W) sz_CERT_STORE_PROV_LDAP(_W)   Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the store, the query string must specify a BASE query with no filter and a single attribute. pvPara value:  If the dwFlags parameter contains  CERT_LDAP_STORE_OPENED_FLAG, set  pvPara to the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the established LDAP session to use. Otherwise,  set  pvPara to point to a null-terminated Unicode string that contains the LDAP query string. For more information about LDAP query strings, see LDAP Dialect.   CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY   Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to a file or to a memory BLOB by using CertSaveStore. pvPara value:  The pvPara parameter is not used.   CERT_STORE_PROV_MSG   Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter must contain the encoding types used with both messages and certificates. pvPara value:  The pvPara parameter contains an HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode.   CERT_STORE_PROV_PHYSICAL(_W) sz_CERT_STORE_PROV_PHYSICAL(_W)   Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system store. Two names are separated with an intervening backslash (\\), for example \"Root\\.Default\". Here, \"Root\" is the name of the system store and \".Default\" is the name of the physical store. The system and physical store names cannot contain any backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic and see System Store Locations. Some physical store locations can be opened remotely. pvPara value:  The pvPara parameter points to a null-terminated Unicode string that contains both the system store name and physical names.   CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7   Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter must specify the encoding types to be used with both messages and certificates. pvPara value:  The pvPara parameter points to a CRYPT_DATA_BLOB structure that represents the encoded message.   CERT_STORE_PROV_PKCS12 sz_CERT_STORE_PROV_PKCS12   Initializes the store with the contents of a PKCS #12 packet. If the PKCS #12 packet is protected with a NULL or empty password, this function will succeed in opening the store. Beginning with Windows 8 and Windows Server 2012, if the password embedded in the PFX packet was protected to an Active Directory (AD) principal and the current user, as a member of that principal, has permission to decrypt the password, this function will succeed in opening the store. For more information, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. You can protect PFX passwords to an AD principal beginning in Windows 8 and Windows Server 2012. pvPara value:  The pvPara parameter points to a CRYPT_DATA_BLOB structure that represents the PKCS #12 packet.   CERT_STORE_PROV_REG   Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code. pvPara value:  The pvPara parameter contains the handle of an open registry key.   CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED   Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store. pvPara value:  The pvPara parameter points to a CRYPT_DATA_BLOB structure that contains the serialized memory BLOB.   CERT_STORE_PROV_SMART_CARD(_W) sz_CERT_STORE_PROV_SMART_CARD(_W)   Not currently used.   CERT_STORE_PROV_SYSTEM_A   Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical, collection store that consists of one or more physical stores. A physical store associated with a system store is registered with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated with it are also opened by calls to CertOpenStore and are added to the system store collection by using the CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store Locations. Some system store locations can be opened remotely; for more information, see System Store Locations. pvPara value:  The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_SYSTEM(_W) sz_CERT_STORE_PROV_SYSTEM(_W)   Same as CERT_STORE_PROV_SYSTEM_A. pvPara value:  The pvPara parameter points to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_SYSTEM_REGISTRY_A   Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store Locations. pvPara value:  The pvPara parameter points to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\".    CERT_STORE_PROV_SYSTEM_REGISTRY(_W) sz_CERT_STORE_PROV_SYSTEM_REGISTRY(_W)   Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A. pvPara value:  The pvPara parameter points to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\"."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the certificate encoding type and message encoding type. Encoding is used only when the dwSaveAs parameter of  the CertSaveStore function contains CERT_STORE_SAVE_AS_PKCS7. Otherwise, the dwMsgAndCertEncodingType parameter is not used. This parameter is only applicable  when the CERT_STORE_PROV_MSG, CERT_STORE_PROV_PKCS7, or CERT_STORE_PROV_FILENAME provider type is specified in the lpszStoreProvider parameter. For all other provider types, this parameter is unused and should be set to zero.  This parameter can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS #7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle to a cryptographic provider. Passing NULL for this parameter causes an appropriate, default provider to be used. Using the default provider is recommended. The default or specified cryptographic provider is used for all store functions that verify the signature of a subject certificate or CRL.This parameter's data type is HCRYPTPROV."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "These values consist of high-word and low-word values combined by using a bitwise-OR operation.  The low-word portion of dwFlags controls a variety of general characteristics of the certificate store opened. This portion can be used with all store provider types. The low-word portion of dwFlags can be one of the following values.  ValueMeaning  CERT_STORE_BACKUP_RESTORE_FLAG   Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME privileges to open registry or file-based system stores. If the thread does not have these privileges, this function must fail with an access denied error.   CERT_STORE_CREATE_NEW_FLAG   A new store is created if one did not exist. The function fails if the store already exists. If neither CERT_STORE_OPEN_EXISTING_FLAG nor CERT_STORE_CREATE_NEW_FLAG is set, a store is opened if it exists or is created and opened if it did not already exist.   CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG   Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use. The store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to properties of these certificates, CRLs, and CTLs, even after the call to CertCloseStore, are persisted. If this flag is not set and certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the properties of those certificates, CRLs, and CTLs will not be persisted. If this function is called with CERT_CLOSE_STORE_FORCE_FLAG, CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG is ignored. When this flag is set and a non-NULL hCryptProv parameter value is passed, that provider will continue to be used even after the call to  this function.   CERT_STORE_DELETE_FLAG   The store is deleted instead of being opened. This function returns NULL for both success and failure of the deletion. To determine the success of the deletion, call  GetLastError, which returns zero if the store was deleted and a nonzero value if it was not deleted.   CERT_STORE_ENUM_ARCHIVED_FLAG   Normally, an enumeration of all certificates in the store will ignore any certificate with the CERT_ARCHIVED_PROP_ID property set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in the store, including those that have the CERT_ARCHIVED_PROP_ID property.   CERT_STORE_MAXIMUM_ALLOWED_FLAG   Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with write access and if that fails, they are reopened with read-only access.   CERT_STORE_NO_CRYPT_RELEASE_FLAG   This flag is not used when  the hCryptProv parameter is NULL. This flag is only valid when a non-NULL CSP handle is passed as the hCryptProv parameter. Setting this flag prevents the automatic release of a nondefault CSP when the certificate store is closed.   CERT_STORE_OPEN_EXISTING_FLAG   Only open an existing store. If the store does not exist, the function fails.   CERT_STORE_READONLY_FLAG   Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is set and a registry based store provider is being used, the registry subkeys are opened by using RegOpenKey with KEY_READ_ACCESS. Otherwise, the registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS.   CERT_STORE_SET_LOCALIZED_NAME_FLAG   If this flag is supported, the provider sets the store's CERT_STORE_LOCALIZED_NAME_PROP_ID property. The localized name can be retrieved by calling  the CertGetStoreProperty function with dwPropID set to  CERT_STORE_LOCALIZED_NAME_PROP_ID. This flag is supported for providers of types CERT_STORE_PROV_FILENAME, CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and CERT_STORE_PROV_PHYSICAL_W.   CERT_STORE_SHARE_CONTEXT_FLAG   When opening a store multiple times, you can set  this flag  to ensure efficient memory usage by reusing the memory for the encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.   CERT_STORE_UPDATE_KEYID_FLAG   Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the properties of certificates. If the CERT_STORE_UPDATE_KEYID_FLAG is set, then for every key identifier in the store's location that has a CERT_KEY_PROV_INFO_PROP_ID property, that property is automatically updated from the key identifier property CERT_KEY_PROV_INFO_PROP_ID or the CERT_KEY_IDENTIFIER_PROP_ID of the certificate related to that key identifier.      The CERT_STORE_PROV_SYSTEM,  CERT_STORE_PROV_SYSTEM_REGISTRY, and  CERT_STORE_PROV_PHYSICAL provider types use the following high words of dwFlags to specify system store registry locations: CERT_SYSTEM_STORE_CURRENT_SERVICECERT_SYSTEM_STORE_CURRENT_USERCERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICYCERT_SYSTEM_STORE_LOCAL_MACHINECERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISECERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICYCERT_SYSTEM_STORE_SERVICESCERT_SYSTEM_STORE_USERS   By default, a system store location is opened relative to the HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, or HKEY_USERS predefined registry key. For more information, see  System Store Locations. The following high-word flags override this default behavior.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   When set, pvPara must contain a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure rather than a string. The structure indicates both the name of the store and its location in the registry.   CERT_SYSTEM_STORE_UNPROTECTED_FLAG   By default, when the CurrentUser \"Root\" store is opened, any SystemRegistry roots not on the protected root list are deleted from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the SystemRegistry are returned and no check of the protected root list is made.      The CERT_STORE_PROV_REGISTRY provider uses the following high-word flags.  ValueMeaning  CERT_REGISTRY_STORE_REMOTE_FLAG   pvPara contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security permissions on the remote computer must be set to allow access. For more information, see  Remarks.   CERT_REGISTRY_STORE_SERIALIZED_FLAG   The CERT_STORE_PROV_REG provider saves certificates, CRLs, and CTLs in a single serialized store subkey instead of performing the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry subkey under the appropriate subkey. This flag is mainly used for stores downloaded from the group policy template (GPT), such as the CurrentUserGroupPolicy and LocalMachineGroupPolicy stores. When CERT_REGISTRY_STORE_SERIALIZED_FLAG is set, store additions, deletions, or property changes are not persisted until there is a call to either  CertCloseStore or  CertControlStore using CERT_STORE_CTRL_COMMIT.      The CERT_STORE_PROV_FILE and CERT_STORE_PROV_FILENAME provider types use the following high-word flags.  ValueMeaning  CERT_FILE_STORE_COMMIT_ENABLE   Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file store either when  CertCloseStore is called or when  CertControlStore is called with CERT_STORE_CONTROL_COMMIT. CertOpenStore fails with E_INVALIDARG if both CERT_FILE_STORE_COMMIT_ENABLE and CERT_STORE_READONLY_FLAG are set in dwFlags.                         The CERT_STORE_PROV_LDAP provider type uses the following high-word flags.  ValueMeaning  CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG   Performs an A-Record-only DNS lookup on the URL named in the pvPara parameter. This prevents false DNS queries from being generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the pvPara parameter.   CERT_LDAP_STORE_OPENED_FLAG   Use this flag to use an existing LDAP session. When this flag is specified, the pvPara parameter is the address of a CERT_LDAP_STORE_OPENED_PARA structure that contains information about the LDAP session to use.   CERT_LDAP_STORE_SIGN_FLAG   To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the Kerberos authentication protocol.   CERT_LDAP_STORE_UNBIND_FLAG   Use this flag with the CERT_LDAP_STORE_OPENED_FLAG flag to cause the LDAP session to be unbound when the store is closed. The system will unbind the LDAP session by using the ldap_unbind function when the store is closed."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvPara",
        "description": "A 32-bit value that can contain additional information for this function. The contents of this parameter depends on the value of the lpszStoreProvider and other parameters."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertOpenSystemStore function is a simplified function that opens the most common system certificate store. To open certificate stores with more complex requirements, such as file-based or memory-based stores, use CertOpenStore.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a handle to the certificate store. If the function fails, it returns NULL. For extended error information, call GetLastError. ",
    "remarks": "Only current user certificates are accessible using this method, not the local machine store. After the system store is opened, all the standard certificate store functions can be used to manipulate the certificates. After use, the store should be closed by using CertCloseStore. For more information about the stores that are automatically migrated, see Certificate Store Migration. The following example shows a simplified method for opening the most common system certificate stores. For another example that uses this function, see Example C Program: Certificate Store Operations. ",
    "return_type": "HCERTSTORE",
    "category": "Cryptography",
    "name": "CertOpenSystemStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hprov",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle of a cryptographic service provider (CSP). Set hProv to NULL to use the default CSP. If hProv is not NULL, it must be a CSP handle created by using the CryptAcquireContext function.This parameter's data type is HCRYPTPROV."
      },
      {
        "in_out": "_In_",
        "type": "LPTCSTR",
        "name": "szSubsystemProtocol",
        "description": "A string that names a system store. If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used. CertEnumSystemStore can be used to list the names of existing system stores. Some example system stores are listed in the following table.  ValueMeaning  CA   Certification authority certificates.   MY   A certificate store that holds certificates with associated private keys.   ROOT   Root certificates.   SPC   Software Publisher Certificate."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CertRegisterPhysicalStore function adds a physical store to a registry system store collection.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. The following example shows adding a physical store to a registry system store collection. For an example that includes the complete context for this example, see Example C Program: Registering Physical and System Certificate Stores. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertRegisterPhysicalStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "The system store collection to which the physical store is added. This parameter points either to a null-terminated Unicode string or to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on adding a ServiceName or ComputerName before the system store name string, see  CertRegisterSystemStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags and appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see  CertRegisterSystemStore.     The following low-word flags are also defined and can be combined with high-word flags using a bitwise-OR operation.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   The system store is not in its default registry location and the pvSystemStore parameter must be a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure.   CERT_STORE_CREATE_NEW_FLAG   The function fails if the physical store already exists in the store location."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszStoreName",
        "description": "A pointer to a Unicode string that names the physical store to be added to the system store collection. To remove a physical store from the system store collection, call the CertUnregisterPhysicalStore function."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PHYSICAL_STORE_INFO",
        "name": "pStoreInfo",
        "description": "A pointer to a  CERT_PHYSICAL_STORE_INFO structure that provides basic information about the physical store."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertRegisterSystemStore function registers a system store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. ",
    "remarks": "To unregister a system store that has been registered by this function, call CertUnregisterSystemStore. The following example shows adding a system store to a registry system store collection. For an example that includes the complete context for this example, see Example C Program: Listing System and Physical Stores. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertRegisterSystemStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "Identifies the system store to be registered. If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in the dwFlags parameter, pvSystemStore points to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure. Otherwise, it points to a null-terminated Unicode string that names the system store.     With appropriate settings in dwFlags, the identified store can be a system store on a remote local computer. Stores on remote computers can be registered with the computer name as a prefix to the name of the system store. For example, a remote local computer store can be registered with pvSystemStore pointing to the string \"\\\\ComputerName\\Trust\" or \"ComputerName\\Trust\". Leading \"\\\\\" backslashes are optional before a ComputerName."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The high word of the dwFlags parameter is used to specify the location of the system store.     \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t   \t\t\t\t\t\t\tThe following high-word values are defined.  ValueMeaning  CERT_SYSTEM_STORE_CURRENT_SERVICE   pvSystemStore can be a system store name that is prefixed with the ServiceName.   CERT_SYSTEM_STORE_CURRENT_USER   pvSystemStore can be a system store name that is prefixed with the UserName.   CERT_SYSTEM_STORE_LOCAL_MACHINE   pvSystemStore can be a system store that is on a remote computer.   CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY   pvSystemStore is a group policy store and can be on a remote computer.   CERT_SYSTEM_STORE_SERVICES   pvSystemStore must be a system store name prefixed with the ServiceName.   CERT_SYSTEM_STORE_USERS   pvSystemStore must be a system store name that is prefixed with the UserName.     Stores on remote computers can be registered for CERT_SYSTEM_STORE_LOCAL_MACHINE, CERT_SYSTEM_STORE_SERVICES, CERT_SYSTEM_STORE_USERS, or CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY.   \t\t\t\t\t\t\tThe following low-word values are also defined and can be combined using a bitwise-OR operation with high-word values.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   The system store is not in its default register location and pvSystemStore must be a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure.   CERT_STORE_CREATE_NEW_FLAG   The function fails if the system store already exists in the store location."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_SYSTEM_STORE_INFO",
        "name": "pStoreInfo",
        "description": "Reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertRemoveStoreFromCollection function removes a sibling certificate store from a collection store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. The following example  removes a sibling certificate store from a collection store. For another  example that uses this function, see Example C Program: Collection and Sibling Certificate Store Operations . ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "CertRemoveStoreFromCollection",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCollectionStore",
        "description": "A handle of the collection certificate store."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hSiblingStore",
        "description": "Handle of the sibling certificate store to be removed from the collection store."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertSaveStore function saves the certificate store to a file or to a memory BLOB.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. Note that CreateFile or WriteFile errors can be propagated to this function. One possible error code is CRYPT_E_FILE_ERROR which indicates that an error occurred while writing to the file. The following example shows saving a certificate store and its contents to an open file. The example uses the CreateMyDACL example function, defined in the Creating a DACL topic, to ensure  the open file is created with a proper DACL. For other  examples that use this function, see Example C Program: Collection and Sibling Certificate Store Operations, Example C Program: Certificate Store Operations, and Example C Program: Setting and Getting Certificate Store Properties. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSaveStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "The handle of the certificate store to be saved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the certificate encoding type and message encoding type. Encoding is used only when dwSaveAs contains CERT_STORE_SAVE_AS_PKCS7. Otherwise, the dwMsgAndCertEncodingType parameter is not used.  This parameter can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS 7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSaveAs",
        "description": "Specifies how to save the certificate store.  This parameter can be one of the following values.  ValueMeaning  CERT_STORE_SAVE_AS_PKCS7 2   The certificate store can be saved as a PKCS #7 signed message that does not include additional properties. The dwEncodingType parameter specifies the message encoding type.   CERT_STORE_SAVE_AS_STORE 1   The certificate store can be saved as a serialized store containing properties in addition to encoded certificates, certificate revocation lists (CRLs), and certificate trust lists (CTLs). The dwEncodingType parameter is ignored. Note  The CERT_KEY_CONTEXT_PROP_ID property and the related CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_SPEC_PROP_ID values are not saved to a serialized store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSaveTo",
        "description": "Specifies where and how to save the certificate store. The contents of this parameter determines the format of the pvSaveToPara parameter.  This parameter can be one of the following values.  ValueMeaning  CERT_STORE_SAVE_TO_FILE 1   The function saves the certificate store to a file. The pvSaveToPara parameter contains a handle to a file previously obtained by using the CreateFile function. The file must be opened with write permission. After a successful save operation, the file pointer is positioned after the last write operation.   CERT_STORE_SAVE_TO_FILENAME 4   The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.   CERT_STORE_SAVE_TO_FILENAME_A 3   The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated ANSI string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.   CERT_STORE_SAVE_TO_FILENAME_W 4   The function saves the certificate store to a file. The pvSaveToPara parameter contains a pointer to a null-terminated Unicode string that contains the path and file name of the file to save to. The function opens the file, saves to it, and closes it.   CERT_STORE_SAVE_TO_MEMORY 2   The function saves the certificate store to a memory BLOB. The pvSaveToPara parameter contains a pointer to a CERT_BLOB structure. Before use, the CERT_BLOB's pbData and cbData members must be initialized. Upon return, cbData is updated with the actual length. For a length-only calculation, pbData must be set to NULL. If pbData is non-NULL and cbData is not large enough, the function returns zero with a last error code of ERROR_MORE_DATA."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvSaveToPara",
        "description": "A pointer that represents where the store should be saved to. The contents of this parameter depends on the value of the dwSaveTo parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSetStoreProperty function sets a store property.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. ",
    "remarks": "Store property identifiers are properties applicable to an entire store. They are not properties for an individual certificate, CRL, or CTL context. Currently, no store properties are persisted. The following example shows setting the localized name property of an open certificate store. For another  example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetStoreProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle for the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates one of a range of store properties. Values for user-defined properties must be outside the current range of predefined context property values. Currently, user-defined dwPropId values begin at 4,096. There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "The type definition for pvData depends on the dwPropId value. If dwPropId is CERT_STORE_LOCALIZED_NAME_PROP_ID, pvData points to a  CRYPT_DATA_BLOB structure. The pbData member of that structure is a pointer to a null-terminated Unicode character string. The cbData member of that structure is a DWORD value holding the length of the string.     For user-defined dwPropId values, pvData is a pointer to an encoded CRYPT_DATA_BLOB. If a value already exists for the selected property, the old value is replaced. Calling this function with pvData set to NULL deletes a property."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertUnregisterPhysicalStore function removes a physical store from a specified system store collection. CertUnregisterPhysicalStore can also be used to delete the physical store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. See  Example C Program: Listing System and Physical Stores. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertUnregisterPhysicalStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "A pointer to an identifier of the system store collection from which the physical store is to be removed. It is either to a null-terminated Unicode string or to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see  CertRegisterSystemStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see  CertRegisterSystemStore.     \t\t\t\t\t\t \t\t\t\t\t  The following low-word values are also defined. They can be combined using bitwise-OR operations with high-word values.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   The system store is not in its default registry location and pvSystemStore must be a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure.   CERT_STORE_DELETE_FLAG   The physical store is first removed from the system store collection and is then deleted."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszStoreName",
        "description": "Null-terminated Unicode string that contains the name of the physical store."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertUnregisterSystemStore function unregisters a specified system store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. The following example shows deleting a specified system store. For another example that uses this function, see Example C Program: Listing System and Physical Stores . ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertUnregisterSystemStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "Identifies the system store to be unregistered. It points either to a null-terminated Unicode string or to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure. For information about using the structure and on appending a ServiceName or ComputerName to the end of the system store name string, see  CertRegisterSystemStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The high word of the dwFlags parameter specifies the location of the system store. For information about defined high-word flags and on appending ServiceName, UserNames, and ComputerNames to the end of the system store name, see  CertRegisterSystemStore.     The following low-word values are also defined and can be combined with high-word values using a bitwise-OR operation.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   The system store is not in its default registry location and pvSystemStore must be a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure.   CERT_STORE_DELETE_FLAG   The system store is deleted after it has been unregistered."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptUIWizExport function exports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store to a file. The export can be performed with or without user interaction.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  the GetLastError function. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIWizExport",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values. Note  Except for CRYPTUI_WIZ_NO_UI, none of the following constants are defined in a published header file. To use these constants, you must define them by using the specified values.    ValueMeaning  CRYPTUI_WIZ_NO_UI 0x0001   This function will perform the export based on the information in the CRYPTUI_WIZ_EXPORT_INFO structure pointed to by pExportInfo without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the export process.   CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002   Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.   CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003   Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.   CRYPTUI_WIZ_EXPORT_PRIVATE_KEY 0x0100   Skip the Export Private Key page and assume that the private key is to be exported.   CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY 0x0200   Disable the Delete the private key check box in the Export File Format page."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "The handle of the window to use as the parent of the dialog box that this function creates. This parameter is ignored if the CRYPT_WIZ_NO_UI flag is set in dwFlags."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszWizardTitle",
        "description": "A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This parameter is ignored if the CRYPT_WIZ_NO_UI flag is set in dwFlags."
      },
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_WIZ_EXPORT_INFO",
        "name": "pExportInfo",
        "description": "A pointer to a CRYPTUI_WIZ_EXPORT_INFO structure that contains information about producing the export wizard."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvoid",
        "description": "If the dwSubjectChoice member of  the CRYPTUI_WIZ_EXPORT_INFO structure that pExportInfo references is CRYPTUI_WIZ_EXPORT_CERT_CONTEXT, and if the  CRYPTUI_WIZ_NO_UI flag is set in dwFlags, this parameter is a pointer to a CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO structure.  If the CRYPTUI_WIZ_NO_UI flag is not set in dwFlags, this parameter is optional and can be NULL. If this parameter is not NULL, the CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO structure contains the values that are displayed to the user as the default choices."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  function imports a certificate, a certificate trust list (CTL), a certificate revocation list (CRL), or a certificate store to a certificate store. The import can be performed with or without user interaction.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  the GetLastError function. ",
    "remarks": "If none of following three flags are set in dwFlags, import of any type of content is allowed: The CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE and CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER flags are used to force the content of a PFX BLOB into either the local machine store or the current user store. If neither of these flags are set and hDestCertStore is NULL: ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIWizImport",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Contains flags that modify the behavior of the function. This can be zero or a combination of one or more of the following values. Note  Except for CRYPTUI_WIZ_NO_UI, none of the following constants are defined in a published header file. To use these constants, you must define them by using the specified values.    ValueMeaning  CRYPTUI_WIZ_NO_UI 0x0001   This function will perform the import based on the information in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure pointed to by pImportSrc into the store specified by hDestCertStore without displaying any user interface. If this flag is not specified, this function will display a wizard to guide the user through the import process. Beginning with Windows 8 and Windows Server 2012, if you set this flag and are importing a certificate from a PFX BLOB that was protected to an Active Directory (AD) principal, and the current user, as part of that principal, has permission to decrypt the password embedded in the PFX packet, the importation will succeed without requiring that a password be set in the CRYPTUI_WIZ_IMPORT_SRC_INFO structure. For more information about protecting PFX to an AD principal, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function.   CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS 0x0002   Suppress all user interfaces generated by cryptographic service providers (CSPs). This option can be overridden by the CRYPTUI_WIZ_NO_UI_EXCEPT_CSP option.   CRYPTUI_WIZ_NO_UI_EXCEPT_CSP 0x0003   Suppress all user interfaces except those generated by CSPs. This option overrides the CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS option.   CRYPTUI_WIZ_IMPORT_ALLOW_CERT 0x00020000   Allow certificates to be imported.   CRYPTUI_WIZ_IMPORT_ALLOW_CRL 0x00040000   Allow CRLs to be imported.   CRYPTUI_WIZ_IMPORT_ALLOW_CTL 0x00080000   Allow CTLs to be imported.   CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE 0x00010000   Do not allow the user to change the destination certificate store represented by the  hDestCertStore parameter.   CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE 0x00100000   Import the object to the certificate store for the local computer. This  applies only to Personal Information Exchange (PFX) imports.   CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER 0x00200000   Import the object to the certificate store for the current user. This  applies only to PFX imports.   CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE 0x00400000   Import the object to a remote certificate store.  Set this flag if the hDestCertStore parameter represents a remote certificate store."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "The handle of the window to use as the parent of the dialog box that  this function creates. This parameter is ignored if the CRYPTUI_WIZ_NO_UI flag is set in dwFlags."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszWizardTitle",
        "description": "A pointer to a null-terminated Unicode string that contains the title to use in the dialog box that this function creates. This parameter is ignored if the CRYPTUI_WIZ_NO_UI flag is set in dwFlags."
      },
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_WIZ_IMPORT_SRC_INFO",
        "name": "pImportSrc",
        "description": "A pointer to a CRYPTUI_WIZ_IMPORT_SRC_INFO structure that contains information about the object to import. This parameter is required if CRYPTUI_WIZ_NO_UI is set in dwFlags and is optional otherwise."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hDestCertStore",
        "description": "A handle to the certificate store to import to. If this parameter is NULL and the CRYPTUI_WIZ_NO_UI flag is not set in dwFlags, the wizard will prompt the user to select a certificate store."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CertAddSerializedElementToStore function adds a serialized certificate, certificate revocation list (CRL), or certificate trust list (CTL) element to the store. The serialized element contains the encoded certificate, CRL, or CTL and its extended properties. Extended properties are associated with a certificate and are not part of a certificate as issued by a certification authority. Extended properties are not available on a certificate when it is used on a non-Microsoft platform.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. Some possible error codes follow.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. The following example shows adding a serialized certificate to a certificate store. This example uses the serialized form of a certificate  from one store. That serialized form of the certificate is  converted into a full certificate and added to a different store.  In this example, pbElement is the serialized element of a   certificate, and cbElement is the length of pbElement.    For information about retrieval of a certificate and of serializing that  certificate, see Example C Program: Serializing Certificates. For the full example including the complete context for this example, see  Example C Program: Serializing Certificates and Adding Serialized Elements to Stores. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddSerializedElementToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "The handle of a certificate store where the created certificate will be stored. If hCertStore is NULL, the function creates a copy of a certificate, CRL, or CTL context with its extended properties, but the certificate, CRL, or CTL is not persisted in any store."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbElement",
        "description": "A pointer to a buffer that contains the certificate, CRL, or CTL information to be serialized and added to the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbElement",
        "description": "The size, in bytes, of the pbElement buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if the certificate, CRL, or CTL already exists in the store. Currently defined disposition values are shown in the following table.  ValueMeaning  CERT_STORE_ADD_NEW   If the certificate, CRL, or CTL is new, it is created and persisted to the store. The operation fails if an identical certificate, CRL, or CTL already exists in the store. The last error code is set to CRYPT_E_EXISTS.   CERT_STORE_ADD_USE_EXISTING   If the certificate, CRL, or CTL is new, it is added to the store. If an identical certificate, CRL, or CTL already exists, the existing element is used. If ppvContext is not NULL, the existing context is duplicated. The function only adds properties that do not already exist. The SHA-1 and MD5 hash properties are not copied.   CERT_STORE_ADD_REPLACE_EXISTING   If an identical certificate, CRL, or CTL already exists in the store, the existing certificate, CRL, or CTL context is deleted before creating and adding the new context.   CERT_STORE_ADD_ALWAYS   No check is made to determine whether an identical certificate, CRL, or CTL already exists. A new element is always created. This can lead to duplicates in the store. To determine whether the element already exists in the store, call  CertGetCRLFromStore or  CertGetSubjectCertificateFromStore.   CERT_STORE_ADD_NEWER   If a matching CRL or CTL or a link to a matching CRL or CTL exists, the function compares the NotBefore times on the CRL or CTL. If the existing CRL or CTL has a NotBefore time less than the NotBefore time on the new element, the old element or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing element has a NotBefore time greater than or equal to the NotBefore time on the element to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or CTL or a link to a matching CRL or CTL is not found in the store, a new element is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER. However, if an older CRL or CTL is replaced, the properties of the older element are incorporated into the replacement.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context. The new added context inherits properties from the existing certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwContextTypeFlags",
        "description": "Specifics the contexts that can be added. For example, to add either a certificate, CRL, or CTL, set dwContextTypeFlags to CERT_STORE_CERTIFICATE_CONTEXT_FLAG or CERT_STORE_CRL_CONTEXT_FLAG. \t\t\t\t\t\t Currently defined context type flags are shown in the following table.  ValueMeaning  CERT_STORE_ALL_CONTEXT_FLAG   Adds any context.   CERT_STORE_CERTIFICATE_CONTEXT_FLAG   Adds only a certificate context.   CERT_STORE_CRL_CONTEXT_FLAG   Adds only a CRL context.   CERT_STORE_CTL_CONTEXT_FLAG   Adds only a CTL context."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwContextType",
        "description": "A pointer to the context type of the added serialized element. This is an optional parameter and can be NULL, which indicates that the calling application does not require the context type. Currently defined context types are shown in the following table.  ValueMeaning  CERT_STORE_CERTIFICATE_CONTEXT   Certificates   CERT_STORE_CRL_CONTEXT   CRLs   CERT_STORE_CTL_CONTEXT   CTLs"
      },
      {
        "in_out": "_Out_",
        "type": "const void**",
        "name": "ppvContext",
        "description": "A pointer to a pointer to the decoded certificate, CRL, or CTL context. This is an optional parameter and can be NULL, which indicates that the calling application does not require the context of the added or existing certificate, CRL, or CTL. If ppvContext is not NULL, it must be the address of a pointer to a  CERT_CONTEXT,  CRL_CONTEXT, or  CTL_CONTEXT. When the application is finished with the context, the context must be freed by using  CertFreeCertificateContext for a certificate,  CertFreeCRLContext for a CRL, or  CertFreeCTLContext for a CTL."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertCreateContext function creates the specified context from the encoded bytes. The context created does not include any extended properties.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to the newly created context. The pvFree member of pCreatePara must be called to free the created context. If the function fails, the return value is NULL. For extended error information, call  GetLastError. If GetLastError returns ERROR_CANCELLED, this means that the PFN_CERT_CREATE_CONTEXT_SORT_FUNC callback function returned FALSE to stop the sort. ",
    "remarks": "",
    "return_type": "const void*",
    "category": "Cryptography",
    "name": "CertCreateContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwContextType",
        "description": "Specifies the contexts that can be created. For example, to create a certificate context, set dwContextType to CERT_STORE_CERTIFICATE_CONTEXT. \t\t\t\t\t\t Currently defined context type flags are shown in the following table.  ValueMeaning  CERT_STORE_CERTIFICATE_CONTEXT   Certificate context.   CERT_STORE_CRL_CONTEXT   CRL context.   CERT_STORE_CTL_CONTEXT   CTL context."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to a buffer that contains the existing encoded context content to be copied."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The size, in bytes, of the pbEncoded buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flag values are defined and can be combined by using a bitwise-OR operation.  ValueMeaning  CERT_CREATE_CONTEXT_NOCOPY_FLAG   The created context points directly to the content pointed to by pbEncoded instead of an allocated copy.   CERT_CREATE_CONTEXT_SORTED_FLAG   The function creates a context with sorted entries. Currently, this flag only applies to a CTL context. For CTLs, the cCTLEntry member of the returned  CTL_INFO structure is always zero.  CertFindSubjectInSortedCTL and  CertEnumSubjectInSortedCTL must be called to find or enumerate the CTL entries.   CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG   By default, when a CTL context is created, a HCRYTPMSG handle to its SignedData message is created. This flag can be set to improve performance by not creating this handle. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT.   CERT_CREATE_CONTEXT_NO_ENTRY_FLAG   By default, when a CTL context is created, its entries are decoded. When this flag is set, the entries are not decoded and performance is improved. This flag can only be used when dwContextType is CERT_STORE_CTL_CONTEXT."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCERT_CREATE_CONTEXT_PARA",
        "name": "pCreatePara",
        "description": "A pointer to a CERT_CREATE_CONTEXT_PARA structure.     If pCreatePara and its pfnFree member are both non-NULL, the pfnFree member is used to free the memory specified by the pvFree member. If the pvFree member is NULL, the pfnFree member is used to free the pbEncoded pointer. If pCreatePara or its pfnFree member is NULL, no attempt is made to free pbEncoded."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertEnumSubjectInSortedCTL function retrieves the first or next TrustedSubject in a sorted certificate trust list (CTL). A sorted CTL is a CTL created with the CERT_CREATE_CONTEXT_SORTED_FLAG set. Used in a loop, this function can retrieve in sequence all TrustedSubjects in a sorted CTL.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE, with ppvNextSubject updated to point to the next TrustedSubject in the encoded sequence. If the function fails, the return value is FALSE. The return value is FALSE if there are no more subjects or there is an argument that is not valid. ",
    "remarks": "The pbData members of CRYPT_DER_BLOB structures point directly to the encoded bytes. The CRYPT_DER_BLOB structures, themselves, must be allocated and freed by the application, but the memory addressed by the pbData members of these structures is not allocated by the application and must not be freed by the application. If the CTL is not sorted with the CERT_CREATE_CONTEXT_SORTED_FLAG flag set, an error results. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumSubjectInSortedCTL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure to be searched."
      },
      {
        "in_out": "_Inout_",
        "type": "void**",
        "name": "ppvNextSubject",
        "description": "A pointer to the address of the last TrustedSubject found. To start the enumeration, ppvNextSubject must point to a pointer  set to NULL. Upon return, the pointer addressed by ppvNextSubject is updated to point to the next TrustedSubject in the encoded sequence."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_DER_BLOB",
        "name": "pSubjectIdentifier",
        "description": "A pointer to a  CRYPT_DER_BLOB structure, uniquely identifying a TrustedSubject. The information in this structure can be a hash or any unique byte sequence."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_DER_BLOB",
        "name": "pEncodedAttributes",
        "description": "A pointer to a CRYPT_DER_BLOB structure containing a byte count and a pointer to the TrustedSubject's encoded attributes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CertFindSubjectInCTL function attempts to find the specified subject in a certificate trust list (CTL). A subject can be identified either by the certificate's whole context or by any unique identifier of the certificate's subject such as the SHA1 hash of the certificate's issuer and serial number.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is the entry, if it is found. If the function fails, the return value is NULL. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The certificate's hash or the SubjectIdentifier member of the  CTL_ANY_SUBJECT_INFO structure is used as the key in searching the subject entries. A binary memory comparison is done between the key and the entry's SubjectIdentifier. ",
    "return_type": "PCTL_ENTRY",
    "category": "Cryptography",
    "name": "CertFindSubjectInCTL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubjectType",
        "description": "Specifies the type of subject to be searched for in the CTL. May be NULL for a default search.  ValueMeaning  CTL_CERT_SUBJECT_TYPE   pvSubject data type: Pointer to a CERT_CONTEXT structure. The CTL's SubjectAlgorithm is examined to determine the representation of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for SubjectAlgorithm. The appropriate hash property is obtained from the CERT_CONTEXT structure.   CTL_ANY_SUBJECT_TYPE   pvSubject data type: Pointer to a CTL_ANY_SUBJECT_INFO structure. The SubjectAlgorithm member of this structure must match the algorithm type of the CTL, and the SubjectIdentifier member must match one of the CTL entries.     The certificate's hash or the SubjectIdentifier member of the CTL_ANY_SUBJECT_INFO structure is used as the key in searching the subject entries. A binary memory comparison is done between the key and the entry's SubjectIdentifier. If dwSubjectType is set to either preceding value, dwEncodingType is not used."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvSubject",
        "description": "Pointer used in conjunction with the dwSubjectType parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure being searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CertFindSubjectInSortedCTL function attempts to find the specified subject in a sorted certificate trust list (CTL). A subject can be identified either by the certificate's whole context or by any unique identifier of the certificate's subject, such as the SHA1 hash of the certificate's issuer and serial number.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds and the subject identifier exists in the CTL, the return value is TRUE. If the function fails and does not locate a matching subject identifier, the return value is FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertFindSubjectInSortedCTL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_DATA_BLOB",
        "name": "pSubjectIdentifier",
        "description": "A pointer to a  CRYPT_DATA_BLOB structure uniquely identifying the subject. The information in this structure can be a hash or any unique byte sequence."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure to be searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_DER_BLOB",
        "name": "pEncodedAttributes",
        "description": "A pointer to a CRYPT_DER_BLOB structure containing a byte count and a pointer to the subject's encoded attributes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The OpenPersonalTrustDBDialog function displays the Certificates dialog box.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns nonzero if the dialog box was opened successfully or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "OpenPersonalTrustDBDialog",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "The handle of the parent window for the dialog box. If this parameter is NULL, the dialog box has no parent."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The OpenPersonalTrustDBDialogEx function displays the Certificates dialog box.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns nonzero if the dialog box was opened successfully or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "OpenPersonalTrustDBDialogEx",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "The handle of the parent window for the dialog box. If this parameter is NULL, the dialog box has no parent."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or the following value.  ValueMeaning  WT_TRUSTDBDIALOG_ONLY_PUB_TAB_FLAG 2 (0x2)   Only display the          Trusted Publisher tab. By default, all of the user interface tabs are displayed and the Trusted Publisher tab is initially selected."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID*",
        "name": "pvReserved",
        "description": "Not used. Must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCertificateContextToStore function adds a certificate context to the certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  Errors from the called functions,  CertAddEncodedCertificateToStore and  CertSetCertificateContextProperty, can be propagated to this function. ",
    "remarks": "The certificate context is not duplicated using CertDuplicateCertificateContext. Instead, the function creates a new copy of the context and adds it to the store. In addition to the encoded certificate, CertDuplicateCertificateContext also copies the context's properties, with the exception of the CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_CONTEXT_PROP_ID properties. To remove the certificate context from the certificate store, use the  CertDeleteCertificateFromStore function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCertificateContextToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure to be added to the store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching certificate or a link to a matching certificate already exists in the store. Currently defined disposition values and their uses are as follows.      \t\t\t\t\t  ValueMeaning  CERT_STORE_ADD_ALWAYS   The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching certificate or a link to a matching certificate exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.      CERT_STORE_ADD_NEWER   If a matching certificate or a link to a matching certificate exists  and the NotBefore time of the existing context is equal to or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the CRYPT_E_EXISTS code.  If the NotBefore time of the existing context is less than the NotBefore time of the new context being added, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.       If certificate revocation lists (CRLs) or certificate trust list (CTLs) are being compared, the ThisUpdate time is  used.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   If a matching certificate or a link to a matching certificate exists and the NotBefore time of the existing context is equal to or greater than the NotBefore time of the new context being added, the operation fails and GetLastError returns the CRYPT_E_EXISTS code.  If the NotBefore time of the existing context is less than the NotBefore time of the new context being added, the existing context is deleted before creating and adding the new context. The new added context inherits properties from the existing certificate. If CRLs or CTLs are being compared, the ThisUpdate time is  used.   CERT_STORE_ADD_REPLACE_EXISTING   If a link to a matching certificate exists, that existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching certificate exists in the store, the existing context is not replaced. The existing context inherits properties from the new certificate.   CERT_STORE_ADD_USE_EXISTING   If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties from the new certificate are added. The function does not fail, but it does not add a new context. If pCertContext is not NULL, the existing context is duplicated.     If a matching certificate or a link to a matching certificate does not exist, a new certificate is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppStoreContext",
        "description": "A pointer to a pointer to the copy to be made of the certificate that was added to the store.     The ppStoreContext parameter can be NULL, indicating that the calling application does not require a copy of the added certificate. If a copy is made, it must be freed by using  CertFreeCertificateContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCertificateLinkToStore function adds a link in a certificate store to a certificate context in a different store. Instead of creating and adding a duplicate of the certificate context, this function adds a link to the original certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "Because the link provides access to the original certificate context, setting an extended property in the linked certificate context changes that extended property in the certificate's original location and in any other links to that certificate. Links cannot be added to a store opened as a collection. Stores opened as collections include all stores opened with  CertOpenSystemStore or  CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see  CertAddStoreToCollection. If links are used and  CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store that uses links must be closed before the store that contains the original contexts is closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed in either order. To remove the certificate context link from the certificate store, use the  CertDeleteCertificateFromStore function. For an example that uses this function, see Example C Program: Certificate Store Operations. For additional code that uses this function, see Example C Program: Collection and Sibling Certificate Store Operations. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCertificateLinkToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle to the certificate store where the link is to be added."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure to be linked."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action if a matching certificate or a link to a matching certificate already exists in the store. Currently defined disposition values and their uses are as follows.      \t\t\t\t\t  ValueMeaning  CERT_STORE_ADD_ALWAYS   The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching certificate or a link to a matching certificate exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_REPLACE_EXISTING   If a link to a matching certificate exists, that existing link is deleted and a new link is created and added to the store. If no matching certificate or link to a matching certificate exists, one is added.   CERT_STORE_ADD_USE_EXISTING   If a matching certificate or a link to a matching certificate exists, the existing certificate is used. The function does not fail, but no new link is added. If no matching certificate or link to a matching certificate exists, a new link is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppStoreContext",
        "description": "A pointer to a pointer to a copy of the link created. The ppStoreContext parameter can be NULL to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using  the CertFreeCertificateContext function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertAddEncodedCertificateToStore function creates a certificate context from an encoded certificate and adds it to the certificate store. The context created does not include any extended properties.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  If the function fails, GetLastError  returns an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Serializing Certificates. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddEncodedCertificateToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle to the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCertEncoded",
        "description": "A pointer to a buffer containing the encoded certificate that is to be added to the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCertEncoded",
        "description": "The size, in bytes, of the pbCertEncoded buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching certificate or link to a matching certificate exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   The function makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching certificate or a link to a matching certificate exists in the store, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching certificate or link to a matching certificate exists in the store, the existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or link to a matching certificate does not exist, a new certificate is created and added to the store.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching certificate exists in the store, that existing context is deleted before creating and adding the new context. The new context inherits properties from the existing certificate.   CERT_STORE_ADD_USE_EXISTING   If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties from the new certificate are added. The function does not fail, but it does not add a new context. If ppCertContext is not NULL, the existing context is duplicated. If a matching certificate or link to a matching certificate does not exist, a new certificate is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppCertContext",
        "description": "A pointer to a pointer to the decoded certificate context. This is an optional parameter that can be NULL, indicating that the calling application does not require a copy of the new or existing certificate. When a copy is made, its context must be freed by using  CertFreeCertificateContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertAddRefServerOcspResponse function increments the reference count for an HCERT_SERVER_OCSP_RESPONSE handle.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "This function has no return value. ",
    "remarks": "Each CertOpenServerOcspResponse and CertAddRefServerOcspResponse requires a corresponding CertCloseServerOcspResponse. ",
    "return_type": " WINCRYPT32API VOID",
    "category": "Cryptography",
    "name": "CertAddRefServerOcspResponse",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERT_SERVER_OCSP_RESPONSE",
        "name": "hServerOcspResponse",
        "description": "A handle to an HCERT_SERVER_OCSP_RESPONSE returned by CertOpenServerOcspResponse."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CertAddRefServerOcspResponseContext function increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "The function has no return value. ",
    "remarks": "Each call to CertGetServerOcspResponseContext and CertAddRefServerOcspResponseContext requires a corresponding call to CertFreeServerOcspResponseContext. ",
    "return_type": "VOID",
    "category": "Cryptography",
    "name": "CertAddRefServerOcspResponseContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_SERVER_OCSP_RESPONSE_CONTEXT",
        "name": "pServerOcspResponseContext",
        "description": "A pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT returned by CertGetServerOcspResponseContext."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertCloseServerOcspResponse function closes an online certificate status protocol (OCSP) server response handle.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The CertCloseServerOcspResponse function closes a handle returned by either the CertOpenServerOcspResponse or CertAddRefServerOcspResponse function. ",
    "return_type": "VOID",
    "category": "Cryptography",
    "name": "CertCloseServerOcspResponse",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERT_SERVER_OCSP_RESPONSE",
        "name": "hServerOcspResponse",
        "description": "The handle to close for an OCSP server response."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is not used and must be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertCreateCertificateContext function creates a certificate context from an encoded certificate. The created context is not persisted to a certificate store. The function makes a copy of the encoded certificate within the created context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a pointer to a read-only  CERT_CONTEXT. When you have finished using the certificate context, free it by calling the CertFreeCertificateContext function. If the function is unable to decode and create the certificate context, it returns NULL. For extended error information, call  GetLastError. Some possible error codes follow.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "The  CERT_CONTEXT must be freed by calling  CertFreeCertificateContext.  CertDuplicateCertificateContext can be called to make a duplicate.  CertSetCertificateContextProperty and  CertGetCertificateContextProperty can be called to store and read properties for the certificate. The following example shows creating a certificate context from an encoded certificate. The created context is not put in a certificate store. For another example that uses this function, see Example C Program: Certificate Store Operations. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertCreateCertificateContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCertEncoded",
        "description": "A pointer to a buffer that contains the encoded certificate from which the context is to be created."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCertEncoded",
        "description": "The size, in bytes, of the pbCertEncoded buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The CertCreateSelfSignCertificate function builds a self-signed certificate and returns a pointer to a  CERT_CONTEXT structure that represents the certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, a PCCERT_CONTEXT variable that points to the created certificate is returned. If the function fails, it returns NULL. For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertCreateSelfSignCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "A handle of a cryptographic provider used to sign the certificate created. If NULL, information from the pKeyProvInfo parameter is used to acquire the needed handle. If pKeyProvInfo is also NULL, the default provider type, PROV_RSA_FULL provider type, the default key specification, AT_SIGNATURE, and a newly created key container with a unique container name are used. This handle must be an HCRYPTPROV handle that has been created by using the  CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG cryptographic service provider (CSP)."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pSubjectIssuerBlob",
        "description": "A pointer to a BLOB that contains the distinguished name (DN) for the certificate subject. This parameter cannot be NULL. Minimally, a pointer to an empty DN must be provided. This BLOB is normally created by using the  CertStrToName function. It can also be created by using the  CryptEncodeObject function and specifying either the X509_NAME or X509_UNICODE_NAME StructType."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that override the default behavior of this function. This can be zero or a combination of one or more of the following values.  ValueMeaning  CERT_CREATE_SELFSIGN_NO_KEY_INFO 2   By default, the returned PCCERT_CONTEXT references the private keys by setting the CERT_KEY_PROV_INFO_PROP_ID. If you do not want the returned PCCERT_CONTEXT to reference private keys by setting the CERT_KEY_PROV_INFO_PROP_ID, specify CERT_CREATE_SELFSIGN_NO_KEY_INFO.   CERT_CREATE_SELFSIGN_NO_SIGN 1   By default, the certificate being created is signed. If the certificate being created is only a dummy placeholder, the certificate might not need to be signed. Signing of the certificate is skipped if CERT_CREATE_SELFSIGN_NO_SIGN is specified."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_KEY_PROV_INFO",
        "name": "pKeyProvInfo",
        "description": "A pointer to a CRYPT_KEY_PROV_INFO structure. Before a certificate is created, the CSP is queried for the key provider, key provider type, and the key container name. If the CSP queried does not support these queries, the function fails. If the default provider does not support these queries, a pKeyProvInfo value must be specified. The RSA BASE does support these queries. If the pKeyProvInfo parameter is not NULL, the corresponding values are set in the CERT_KEY_PROV_INFO_PROP_ID value of the generated certificate. You must ensure that all parameters of the supplied structure are correctly specified."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure. If NULL, the default algorithm, SHA1RSA, is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSYSTEMTIME",
        "name": "pStartTime",
        "description": "A pointer to a SYSTEMTIME structure. If NULL, the system current time is used by default."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSYSTEMTIME",
        "name": "pEndTime",
        "description": "A pointer to a SYSTEMTIME structure. If NULL, the pStartTime value plus one year will be used by default."
      },
      {
        "in_out": "",
        "type": "PCERT_EXTENSIONS",
        "name": "pExtensions",
        "description": "A pointer to a CERT_EXTENSIONS array of CERT_EXTENSION structures. By default, the array is empty. An alternate subject name, if desired, can be specified as one of these extensions."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDeleteCertificateFromStore function deletes the specified certificate context from the certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "After a certificate is deleted from a store, all subsequent attempts to get or find that certificate in that store will fail. However, memory allocated for the certificate is not freed until all duplicated contexts have also been freed. The CertDeleteCertificateFromStore function always frees pCertContext by calling the CertFreeCertificateContext function, even if an error is encountered. Freeing the context reduces the context's reference count by one. If the reference count reaches zero, memory allocated for the certificate is freed. For an example that uses this function, see Example C Program: Deleting Certificates from a Certificate Store. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertDeleteCertificateFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure to be deleted."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDuplicateCertificateContext function duplicates a certificate context by incrementing its reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Currently, a copy is not made of the context, and the returned pointer to a context has the same value as the pointer to a context that was input. If the pointer passed into this function is NULL, NULL is returned. When you have finished using the duplicate context, decrease its reference count by calling the CertFreeCertificateContext function. The following example shows duplicating a certificate context by incrementing its reference count. For another example that uses this function, see Example C Program: Deleting Certificates from a Certificate Store. ",
    "remarks": "",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertDuplicateCertificateContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure for which the reference count is incremented."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCertificatesInStore function retrieves the first or next certificate in a certificate store. Used in a loop, this function can retrieve in sequence all certificates in a certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns  a pointer to the next  CERT_CONTEXT in the store. If no more certificates exist in the store, the function returns NULL. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The returned pointer is freed when passed as the pPrevCertContext parameter on a subsequent call. Otherwise, the pointer must be freed by calling  CertFreeCertificateContext. A non-NULL pPrevCertContext passed to CertEnumCertificatesInStore is always freed even for an error. A duplicate of the currently enumerated certificate can be made by calling  CertDuplicateCertificateContext. The following  example lists the certificate contexts in the certificate store. For another example that uses this function, see Example C Program: Deleting Certificates from a Certificate Store. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertEnumCertificatesInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pPrevCertContext",
        "description": "A pointer to the  CERT_CONTEXT of the previous certificate context found. This parameter must be NULL to begin the enumeration and get the first certificate in the store. Successive certificates are enumerated by setting pPrevCertContext to the pointer returned by a previous call to the function. This function frees the CERT_CONTEXT referenced by non-NULL values of this parameter. For logical stores, including collection stores, a duplicate of the pCertContext returned by this function cannot be used to begin a new subsequence of enumerations because the duplicated certificate loses the initial enumeration state. The enumeration skips any certificate previously deleted by  CertDeleteCertificateFromStore."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertFindCertificateInStore function finds the first or next certificate context in a certificate store that matches a search criteria established by the dwFindType and its associated pvFindPara. This function can be used in a loop to find all of the certificates in a certificate store that match the specified find criteria.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a pointer to a read-only CERT_CONTEXT structure. If the function fails and a certificate that matches the search criteria is not found, the return value is NULL. A non-NULL CERT_CONTEXT that CertFindCertificateInStore returns must be freed by  CertFreeCertificateContext or by being passed as the pPrevCertContext parameter on a subsequent call to CertFindCertificateInStore. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The dwFindFlags parameter is used to modify the criteria of some search types. The CERT_UNICODE_IS_RDN_ATTRS_FLAG dwFindFlags value is used only with the CERT_FIND_SUBJECT_ATTR and CERT_FIND_ISSUER_ATTR values for dwFindType. CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the CERT_RDN_ATTR structure pointed to by pvFindPara was initialized with Unicode strings. Before any comparison is made, the string to be matched is converted by using X509_UNICODE_NAME to provide for Unicode comparisons. The following dwFindFlags values are used only with the CERT_FIND_ENKEY_USAGE value for dwFindType:  CertDuplicateCertificateContext can be called to make a duplicate of the returned context. The returned context can be added to a different certificate store by using  CertAddCertificateContextToStore, or a link to that certificate context can be added to a store that is not a collection store by using  CertAddCertificateLinkToStore. The returned pointer is freed when passed as the pPrevCertContext parameter on a subsequent call to the function. Otherwise, the pointer must be explicitly freed by calling  CertFreeCertificateContext. A pPrevCertContext that is not NULL is always freed by CertFindCertificateInStore using a call to CertFreeCertificateContext, even if there is an error in the function. The following example shows finding a certificate context in the certificate store meeting a search criterion. For a complete example that includes the  context for this example, see  Example C Program: Certificate Store Operations. For another example that uses this function, see Example C Program: Collection and Sibling Certificate Store Operations. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertFindCertificateInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of the certificate store to be searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindFlags",
        "description": "Used with some dwFindType values to modify the search criteria. For most dwFindType values, dwFindFlags is not used and should be set to zero. For detailed information, see  Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindType",
        "description": "Specifies the type of search being made. The search type determines the data type, contents, and the use of pvFindPara. This parameter can be one of the following values.  ValueMeaning  CERT_FIND_ANY    Data type of pvFindPara: NULL, not used. No search criteria used. Returns the next certificate in the store. Note  The order of the certificate context may not be preserved within the store.  To access a specific certificate you must iterate across the certificates in the store.     CERT_FIND_CERT_ID    Data type of pvFindPara: CERT_ID structure. Find the certificate identified by the specified CERT_ID.   CERT_FIND_CTL_USAGE    Data type of pvFindPara: CTL_USAGE structure. Searches for a certificate that has a szOID_ENHANCED_KEY_USAGE extension or a CERT_CTL_PROP_ID that matches the pszUsageIdentifier member of the CTL_USAGE structure.   CERT_FIND_ENHKEY_USAGE    Data type of pvFindPara: CERT_ENHKEY_USAGE structure. Searches for a certificate in the store that has either an enhanced key usage extension or an enhanced key usage property and a usage identifier that matches the cUsageIdentifier member in the  CERT_ENHKEY_USAGE structure. A certificate has an enhanced key usage extension if it has a CERT_EXTENSION structure with the pszObjId member set to szOID_ENHANCED_KEY_USAGE. A certificate has an enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID identifier is set. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in dwFindFlags, certificates without the key usage extension or property are also matches. Setting this flag takes precedence over passing NULL in pvFindPara. If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the key usage extension. For information about flag modifications to search criteria, see  Remarks.   CERT_FIND_EXISTING    Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate that is an exact match of the specified certificate context.   CERT_FIND_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.   CERT_FIND_HAS_PRIVATE_KEY   Data type of pvFindPara: NULL, not used. Searches for a certificate that has a private key. The key can be ephemeral or saved on disk. The key can be a legacy Cryptography API (CAPI) key or a CNG key. Note  The order of the certificate context may not be preserved within the store. Therefore, to access a specific certificate, you must iterate across all certificates.   Windows 8 and Windows Server 2012:  Support for this flag begins.   CERT_FIND_ISSUER_ATTR    Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified issuer attributes that match attributes in the CERT_RDN structure. If these values are set, the function compares attributes of the issuer in a certificate with elements of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's issuer attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For information about Unicode options, see  Remarks. When these values are set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.   CERT_FIND_ISSUER_NAME    Data type of pvFindPara: CERT_NAME_BLOB structure. Search for a certificate with an exact match of the entire issuer name with the name in CERT_NAME_BLOB The search is restricted to certificates that match the dwCertEncodingType.   CERT_FIND_ISSUER_OF    Data type of pvFindPara: CERT_CONTEXT structure. Searches for a certificate with an subject that matches the issuer in CERT_CONTEXT. Instead of using CertFindCertificateInStore with this value, use the CertGetCertificateChain function.   CERT_FIND_ISSUER_STR    Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified issuer name string. The certificate's issuer member is converted to a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType. If the substring match fails and the subject contains an email RDN with Punycode encoded string, CERT_NAME_STR_ENABLE_PUNYCODE_FLAG is used to convert the subject to a Unicode string and the substring match is performed again.    CERT_FIND_KEY_IDENTIFIER    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a CERT_KEY_IDENTIFIER_PROP_ID property that matches the key identifier in CRYPT_HASH_BLOB.   CERT_FIND_KEY_SPEC    Data type of pvFindPara: DWORD variable that contains a key specification. Searches for a certificate that has a CERT_KEY_SPEC_PROP_ID property that matches the key specification in pvFindPara.   CERT_FIND_MD5_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with an MD5 hash that matches the hash in CRYPT_HASH_BLOB.   CERT_FIND_PROPERTY    Data type of pvFindPara: DWORD variable that contains a property identifier. Searches for a certificate with a property that matches the property identifier specified by the DWORD value in pvFindPara.   CERT_FIND_PUBLIC_KEY    Data type of pvFindPara: CERT_PUBLIC_KEY_INFO structure. Searches for a certificate with a public key that matches the public key in the CERT_PUBLIC_KEY_INFO structure.   CERT_FIND_SHA1_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB structure.   CERT_FIND_SIGNATURE_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Searches for a certificate with a signature hash that matches the signature hash in the CRYPT_HASH_BLOB structure.   CERT_FIND_SUBJECT_ATTR    Data type of pvFindPara: CERT_RDN structure. Searches for a certificate with specified subject attributes that match attributes in the CERT_RDN structure. If RDN values are set, the function compares attributes of the subject in a certificate with elements of the CERT_RDN_ATTR array in this CERT_RDN structure. Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's subject's attributes. If the pszObjId member of CERT_RDN_ATTR is NULL, the attribute object identifier is ignored. If the dwValueType member of CERT_RDN_ATTR is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData member of CERT_RDN_VALUE_BLOB is NULL, any value is a match. Currently only an exact, case-sensitive match is supported. For information about Unicode options, see  Remarks. When these values are set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.   CERT_FIND_SUBJECT_CERT    Data type of pvFindPara: CERT_INFO structure. Searches for a certificate with both an issuer and a serial number that match the issuer and serial number in the CERT_INFO structure.   CERT_FIND_SUBJECT_NAME    Data type of pvFindPara: CERT_NAME_BLOB structure. Searches for a certificate with an exact match of the entire subject name with the name in the CERT_NAME_BLOB structure. The search is restricted to certificates that match the value of dwCertEncodingType.   CERT_FIND_SUBJECT_STR    Data type of pvFindPara: Null-terminated Unicode string. Searches for a certificate that contains the specified subject name string. The certificate's subject member is converted to a name string of the appropriate type using the appropriate form of CertNameToStr formatted as CERT_SIMPLE_NAME_STR. Then a case-insensitive substring-within-a-string match is performed. When this value is set, the search is restricted to certificates whose encoding type matches dwCertEncodingType.   CERT_FIND_CROSS_CERT_DIST_POINTS    Data type of pvFindPara: Not used. Find a certificate that has either a cross certificate distribution point extension or property.   CERT_FIND_PUBKEY_MD5_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB structure. Find a certificate whose MD5-hashed public key matches the specified hash.     Note  There are alternate forms of the value of dwFindType that pass a string in pvFindPara. One form uses a Unicode string, and the other an ASCII string. Values that end in \"_W\" or without a suffix use Unicode. Values that end with \"_A\" use ASCII strings."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvFindPara",
        "description": "Points to a data item or structure used with dwFindType."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pPrevCertContext",
        "description": "A pointer to the last  CERT_CONTEXT structure returned by this function. This parameter must be NULL on the first call of the function. To find successive certificates meeting the search criteria,  set pPrevCertContext to the pointer returned by the previous call to the function. This function frees the CERT_CONTEXT referenced by non-NULL values of this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCertificateContext function frees a certificate context by decrementing its reference count. When the reference count goes to zero, CertFreeCertificateContext frees the memory used by a certificate context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function always returns nonzero. The following example shows how to free a certificate context. For another example that uses this function, see Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertFreeCertificateContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetIssuerCertificateFromStore function retrieves the certificate context from the certificate store for the first or next issuer of the specified subject certificate. The new  Certificate Chain Verification Functions are recommended instead of the use of this function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only issuer CERT_CONTEXT. If the function fails and the first or next issuer certificate is not found, the return value is NULL. Only the last returned CERT_CONTEXT structure must be freed by calling  CertFreeCertificateContext. When the returned CERT_CONTEXT from one call to the function is supplied as the pPrevIssuerContext parameter on a subsequent call, the context is freed as part of the action of the function. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The returned pointer is freed when passed as the pPrevIssuerContext parameter on a subsequent call to the function. Otherwise, the pointer must be explicitly freed by calling  CertFreeCertificateContext. A pPrevIssuerContext that is not NULL is always freed by CertGetIssuerCertificateFromStore using a call to CertFreeCertificateContext, even if there is an error in the function. CertDuplicateCertificateContext can be called to make a duplicate of the issuer certificate. The hexadecimal values for dwFlags can be combined using a bitwise-OR operation to enable multiple verifications. For example, to enable both signature and time validity, the value 0x00000003 is passed in dwFlags on input. In this case, if CERT_STORE_SIGNATURE_FLAG verification succeeds but CERT_STORE_TIME_VALIDITY_FLAG verification fails, dwFlags returns as 0x00000002 on output. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertGetIssuerCertificateFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pSubjectContext",
        "description": "A pointer to a  CERT_CONTEXT structure that contains the subject information. This parameter can be obtained from any certificate store or can be created by the calling application using the  CertCreateCertificateContext function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_CONTEXT",
        "name": "pPrevIssuerContext",
        "description": "A pointer to a CERT_CONTEXT structure that contains the issuer information. An issuer can have multiple certificates, especially when a validity period is about to change. This parameter must be NULL on the call to get the first issuer certificate. To get the next certificate for the issuer, set pPrevIssuerContext to the CERT_CONTEXT structure returned by the previous call.  This function frees the CERT_CONTEXT referenced by non-NULL values of this parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "The following flags enable verification checks on the returned certificate. They can be combined using a bitwise-OR operation to enable multiple verifications.      \t\t\t\t\t\t \t\t\t\t\t  ValueMeaning  CERT_STORE_NO_CRL_FLAG   Indicates no matching CRL was found.   CERT_STORE_NO_ISSUER_FLAG   Indicates no issuer certificate was found.   CERT_STORE_REVOCATION_FLAG   Checks whether the subject certificate is on the issuer's revocation list.   CERT_STORE_SIGNATURE_FLAG   Uses the public key in the issuer's certificate to verify the signature on the subject certificate.   CERT_STORE_TIME_VALIDITY_FLAG   Gets the current time and verifies that it is within the subject certificate's validity period.     If a verification check of an enabled type succeeds, its flag is set to zero. If it fails, its flag remains set upon return. For CERT_STORE_REVOCATION_FLAG, the verification succeeds if the function does not find a CRL related to the subject certificate. If CERT_STORE_REVOCATION_FLAG is set and the issuer does not have a CRL in the store, CERT_STORE_NO_CRL_FLAG is set and CERT_STORE_REVOCATION_FLAG remains set. If CERT_STORE_SIGNATURE_FLAG or CERT_STORE_REVOCATION_FLAG is set, CERT_STORE_NO_ISSUER_FLAG is set if the function does not find an issuer certificate in the store. For more details, see  Remarks. In the case of a verification check failure, a pointer to the issuer's  CERT_CONTEXT is still returned and  GetLastError is not updated."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertGetServerOcspResponseContext function retrieves a non-blocking, time valid online certificate status protocol (OCSP) response context for the specified handle.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, it returns a pointer to a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure. For a response to be time valid, the current time on the system hosting this function call must be less than the next update time for the certificate revocation list (CRL) context. When a time valid OCSP response is not available, this function returns NULL with the last error set to CRYPT_E_REVOCATION_OFFLINE. ",
    "remarks": "If you use the CertGetServerOcspResponseContext function to create multiple references to an OCSP response context, you must call CertAddRefServerOcspResponseContext to increment the reference count for the CERT_SERVER_OCSP_RESPONSE_CONTEXT structure. When you have finished using the structure, you must free it by calling the CertFreeServerOcspResponseContext function. ",
    "return_type": "PCCERT_SERVER_OCSP_RESPONSE_CONTEXT",
    "category": "Cryptography",
    "name": "CertGetServerOcspResponseContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERT_SERVER_OCSP_RESPONSE",
        "name": "hServerOcspResponse",
        "description": "The OCSP server response handle for which to retrieve a response context. This handle is returned by the CertOpenServerOcspResponse function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "pvReserved",
        "description": "This parameter is reserved for future use and must be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertGetSubjectCertificateFromStore function returns from a certificate store a subject certificate context uniquely identified by its issuer and serial number.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a pointer to a read-only  CERT_CONTEXT. The CERT_CONTEXT must be freed by calling  CertFreeCertificateContext. The returned certificate might not be valid. Usually, it is verified when getting its issuer certificate (CertGetIssuerCertificateFromStore). For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "CertDuplicateCertificateContext can be called to make a duplicate certificate. The following example shows retrieving a subject's certificate context, uniquely identified by its issuer and serial number, from the certificate store. For an example that includes the complete context for this example, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CertGetSubjectCertificateFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertId",
        "description": "A pointer to a  CERT_INFO structure. Only the Issuer and SerialNumber members are used."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CertGetValidUsages function returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetValidUsages",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cCerts",
        "description": "The number of certificates in the array to be checked."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT*",
        "name": "rghCerts",
        "description": "An array of certificates to be checked for valid usage."
      },
      {
        "in_out": "_Out_",
        "type": "int*",
        "name": "cNumOIDs",
        "description": "The number of valid usages found as the intersection of the valid usages of all certificates in the array. ..."
      },
      {
        "in_out": "_Out_",
        "type": "LPSTR*",
        "name": "rghOIDs",
        "description": "An array of the object identifiers (OIDs) of the valid usages that are shared by all of the certificates in the rghCerts array. This parameter can be NULL to set the size of this structure for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbOIDs",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the rghOIDs array and the strings pointed to. When the function returns, the DWORD value contains the number of bytes needed for the array."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertOpenServerOcspResponse function opens a handle to an online certificate status protocol (OCSP) response associated with a server certificate chain.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns a handle to the OCSP response associated with a server certificate chain if successful; otherwise, NULL. This handle must be passed to the CertCloseServerOcspResponse function when it is no longer needed. For extended error information, call  GetLastError. Possible error codes returned by the  \t\t       GetLastError function include, but are not limited to, the following.  ",
    "remarks": "The CertOpenServerOcspResponse function tries to retrieve an initial OCSP response before it returns. It blocks its process thread during the retrieval. The CertOpenServerOcspResponse function creates a background thread that prefetches time-valid OCSP responses. The CertOpenServerOcspResponse function increments the reference count for the chain context represented by the pChainContext parameter. When you have finished using the chain context, close the returned handle by calling the CertCloseServerOcspResponse function. The CertOpenServerOcspResponse function initializes configuration settings used by the following functions: First, the CertOpenServerOcspResponse function initializes the settings based on default values in Wincrypt.h. If the function subsequently finds the registry key defined in CERT_CHAIN_CONFIG_REGPATH, it updates the previously initialized values with the registry values. The following configuration setting names and default values are initialized by this function: ",
    "return_type": "HCERT_SERVER_OCSP_RESPONSE",
    "category": "Cryptography",
    "name": "CertOpenServerOcspResponse",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT",
        "name": "pChainContext",
        "description": "The address of a CERT_CHAIN_CONTEXT structure that contains the certificate chain."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is not used and must be zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "pvReserved",
        "description": "This parameter is not used and must be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CertRetrieveLogoOrBiometricInfo function performs a URL retrieval of logo or biometric information specified in either the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT certificate extension. The szOID_BIOMETRIC_EXT extension (IETF RFC 3739) supports the addition of a signature or a pictorial representation of the human holder of the certificate. The szOID_LOGOTYPE_EXT extension (IETF RFC 3709) supports the addition of organizational pictorial representations in certificates.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  GetLastError. Possible error codes returned by the  \t\t       GetLastError function include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertRetrieveLogoOrBiometricInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "The address of a CERT_CONTEXT structure that contains the certificate."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszLogoOrBiometricType",
        "description": "The address of a null-terminated ANSI string that contains an object identifier (OID) string that identifies the type of information to retrieve.  This parameter may also contain one of the following predefined values.  ValueMeaning  CERT_RETRIEVE_ISSUER_LOGO   Retrieve the certificate issuer logotype.   CERT_RETRIEVE_SUBJECT_LOGO   Retrieve the certificate subject logotype.   CERT_RETRIEVE_COMMUNITY_LOGO   Retrieve the certificate community logotype.   CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE   Retrieve the picture associated with the certificate.   CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE   Retrieve the signature associated with the certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRetrievalFlags",
        "description": "A set of flags that specify how the information should be retrieved. This parameter is passed as the dwRetrievalFlags in the CryptRetrieveObjectByUrl function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTimeout",
        "description": "The maximum amount of time, in milliseconds, to wait for the retrieval."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is not used and must be zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is not used and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE**",
        "name": "ppbData",
        "description": "The address of a BYTE pointer that receives the logotype or biometric data. This memory must be freed when it is no longer needed by passing this pointer to the CryptMemFree function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "The address of a DWORD variable that receives the number of bytes in the ppbData buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppwszMimeType",
        "description": "The address of a pointer to a null-terminated Unicode string that receives the Multipurpose Internet Mail Extensions (MIME) type of the data. This parameter can be NULL if this information is not needed. This memory must be freed when it is no longer needed by passing this pointer to the CryptMemFree function. This address always receives NULL for biometric types. You must always ensure that this parameter contains a valid memory address before attempting to access the memory."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CertSelectCertificate function  presents a dialog box that allows the user to select certificates from a set of certificates that match the given criteria.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "CryptDlg.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call the  GetLastError function. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSelectCertificate",
    "is_callback": 0,
    "dll": "CryptDlg.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCERT_SELECT_STRUCT_W",
        "name": "pCertSelectInfo",
        "description": "A pointer to a CERT_SELECT_STRUCT structure that contains criteria that control the displayed certificates for selection and receives the selected certificate."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CertSelectCertificateChains function retrieves certificate chains based on specified selection criteria.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns zero (FALSE). For extended error information, call the GetLastError function. ",
    "remarks": "Selection criteria can  be specified through either the  dwFlags  parameter, through the rgpCriteria parameter, or through both parameters. If no selection criteria are specified, the function  succeeds and returns certificate chains for all certificates in the store specified by the hStore parameter. Certificate chains that are selected are ordered based on the following preference logic: Certain selection criteria require that a certificate chain be built before you can select that criteria for use. If the intermediate certificates required to build the chain are not available locally, a network retrieval is performed for the issuer certificates. This network retrieval is performed if the CERT_SELECT_TRUSTED_ROOT flag is set or for the following criteria: Perform the following actions to enable strong signature checking: When you enable strong signature checking, any certificate chain that returns a CERT_TRUST_IS_NOT_SIGNATURE_VALID error in the dwErrorStatus field of the CERT_TRUST_STATUS structure will be skipped. (The pprgpSelection parameter points to a CERT_CHAIN_CONTEXT structure which, in turn, points to the  CERT_TRUST_STATUS structure.) The CERT_TRUST_HAS_WEAK_SIGNATURE value is also set for a weak signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSelectCertificateChains",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCGUID",
        "name": "pSelectionContext",
        "description": "A pointer to the GUID of the certificate selection scenario to use for this call."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags for controlling the certificate selection process. This parameter can be a combination of zero or more of the following flags:  ValueMeaning  CERT_SELECT_ALLOW_EXPIRED   Select expired certificates that meet selection criteria. By default expired certificates are rejected from selection.   CERT_SELECT_TRUSTED_ROOT   Select certificates on which the error bit in the certificate chain trust status is not set to CERT_TRUST_IS_UNTRUSTED_ROOT, CERT_TRUST_IS_PARTIAL_CHAIN, or CERT_TRUST_IS_NOT_TIME_VALID.  In addition, certificates that have one of the following invalid constraint errors are not selected:  CERT_TRUST_INVALID_POLICY_CONSTRAINTS CERT_TRUST_INVALID_BASIC_CONSTRAINTS CERT_TRUST_INVALID_NAME_CONSTRAINTS    CERT_SELECT_DISALLOW_SELFSIGNED   Select certificates that are not self-issued and self-signed.   CERT_SELECT_HAS_PRIVATE_KEY   Select  certificates that have a value set for the CERT_KEY_PROV_INFO_PROP_ID  property of the certificate.   CERT_SELECT_HAS_KEY_FOR_SIGNATURE   Select certificates on which the value of the dwKeySpec member of  the  CERT_KEY_PROV_INFO_PROP_ID property is set to AT_SIGNATURE.  If this function is being called as part of  a CNG enabled application and the dwKeySpec member of  the  CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which the value of the NCRYPT_KEY_USAGE_PROPERTY property of the associated private key has the NCRYPT_ALLOW_SIGNING_FLAG set.   CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE   Select certificates on which the value of the dwKeySpec member of  the  CERT_KEY_PROV_INFO_PROP_ID property is set to AT_KEYEXCHANGE.  If this function is being called as part of  a CNG enabled application and the dwKeySpec member of  the  CERT_KEY_PROV_INFO_PROP_ID property is set to -1, select certificates on which either NCRYPT_ALLOW_DECRYPT_FLAG or NCRYPT_ALLOW_KEY_AGREEMENT_FLAG is set.   CERT_SELECT_HARDWARE_ONLY   Select certificates on which the value of the PP_IMPTYPE property of the associated private key provider is set to either   CRYPT_IMPL_HARDWARE or CRYPT_IMPL_REMOVABLE. (For CNG providers, NCRYPT_IMPL_TYPE_PROPERTY property value MUST have either the NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG bit set). If this function is being called as part of  a CNG enabled application, select certificates on which the NCRYPT_IMPL_TYPE_PROPERTY property is set to  NCRYPT_IMPL_HARDWARE_FLAG or NCRYPT_IMPL_REMOVABLE_FLAG.   CERT_SELECT_ALLOW_DUPLICATES   Allow the selection of certificates on which the Subject and Subject Alt Name contain the same information  and the certificate template extension value is equivalent.  By default when certificates match this criteria, only the most recent certificate is selected."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_SELECT_CHAIN_PARA",
        "name": "pChainParameters",
        "description": "A pointer to a CERT_SELECT_CHAIN_PARA structure to specify parameters for chain building. If NULL, default parameters will be used. The pChainPara member of the CERT_SELECT_CHAIN_PARA structure points to a CERT_CHAIN_PARA structure that can be used to enable strong signing."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cCriteria",
        "description": "The number of elements in the array pointed to by the rgpCriteria array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_SELECT_CRITERIA",
        "name": "rgpCriteria",
        "description": "A pointer to an array of CERT_SELECT_CRITERIA structures that define the selection criteria. If this parameter is set to NULL, the value of the cCriteria parameter must be zero."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hStore",
        "description": "The handle to a store from which to select the certificates."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pcSelection",
        "description": "A pointer to a DWORD value to receive the number of elements in the array pointed to by the pprgpSelection parameter."
      },
      {
        "in_out": "_Out_",
        "type": "PCCERT_CHAIN_CONTEXT**",
        "name": "pprgpSelection",
        "description": "A pointer to a pointer to a location to receive an array of CERT_CHAIN_CONTEXT structure. The CertSelectCertificateChains function only returns certificate chains that match all the selection criteria. The entries in the array are ordered by quality, i.e. the chain with the highest quality is the first entry.  Storage for the array is allocated by the CertSelectCertificateChains function. To free the allocated memory you must first release each individual chain context in the array by calling the CertFreeCertificateChain function. Then you must  free the memory by calling the CertFreeCertificateChainList function."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertSelectionGetSerializedBlob function is a helper function used to retrieve a serialized certificate BLOB from a CERT_SELECTUI_INPUT structure.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. \tIf both hStore and prgpChain parameters are not NULL, return E_INVALIDARG. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "The returned serialized BLOB is passed to the CredUIPromptForWindowsCredentials function in the pvInAuthBuffer parameter to allow a user to select a certificate by using the credential selection UI. The certificates that are serialized in the BLOB returned in the buffer pointed to by the ppOutBuffer  parameter of this function are dependent on the values  of the hStore and prgpChain members of the CERT_SELECTUI_INPUT structure.  ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSelectionGetSerializedBlob",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCERT_SELECTUI_INPUT",
        "name": "pcsi",
        "description": "A pointer to a CERT_SELECTUI_INPUT structure that contains the certificate store and certificate context chain information."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppOutBuffer",
        "description": "The address of a pointer to a buffer that receives the serialized certificates BLOB."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOutBufferSize",
        "description": "A pointer to a ULONG to receive the size, in bytes, of the BLOB received in the buffer pointed to by the ppOutBuffer parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSerializeCertificateStoreElement function serializes a certificate context's encoded certificate and its encoded properties. The result can be persisted to storage so that the certificate and properties can be retrieved at a later time.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. The following example serializes a certificate context's encoded certificate and the encoded representation of the certificate's properties. For another example that uses this function, see Example C Program: Serializing Certificates. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSerializeCertificateStoreElement",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT to be serialized."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbElement",
        "description": "A pointer to a buffer that receives the serialized output, including the encoded certificate and possibly its properties.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbElement",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pbElement parameter. When the function returns, DWORD value contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertVerifySubjectCertificateContext function performs the enabled verification checks on a certificate by checking the validity of the certificate's issuer. The new  Certificate Chain Verification Functions are recommended instead of this function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For a verification check failure, TRUE is still returned. FALSE is returned only when a bad parameter is passed in. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "The hexadecimal value of the flags can be combined using bitwise-OR operations to enable multiple verifications. For example, to enable both signature and time validity, the value is placed in the pdwFlags DWORD value as an input parameter. If CERT_STORE_SIGNATURE_FLAG verification succeeds, but CERT_STORE_TIME_VALIDITY_FLAG verification fails, pdwFlags is set to CERT_STORE_TIME_VALIDITY_FLAG when the function returns. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifySubjectCertificateContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pSubject",
        "description": "A pointer to a  CERT_CONTEXT structure containing the subject's certificate."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_CONTEXT",
        "name": "pIssuer",
        "description": "A pointer to a CERT_CONTEXT containing the issuer's certificate. When checking just CERT_STORE_TIME_VALIDITY_FLAG, pIssuer can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "A pointer to a DWORD value contain verification check flags. The following flags can be set to enable verification checks on the subject certificate. They can be combined using a bitwise-OR operation to enable multiple verifications.  ValueMeaning  CERT_STORE_REVOCATION_FLAG   Checks whether the subject certificate is on the issuer's revocation list.   CERT_STORE_SIGNATURE_FLAG   Uses the public key in the issuer's certificate to verify the signature on the subject certificate.   CERT_STORE_TIME_VALIDITY_FLAG   Gets the current time and verifies that it is within the subject certificate's validity period.     If an enabled verification check succeeds, its flag is set to zero. If it fails, then its flag is set upon return. If CERT_STORE_REVOCATION_FLAG was enabled and the issuer does not have a CRL in the store, then CERT_STORE_NO_CRL_FLAG is set in addition to CERT_STORE_REVOCATION_FLAG."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptUIDlgCertMgr function displays a dialog box that allows the user to manage certificates.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "The return value is TRUE if the function succeeds; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIDlgCertMgr",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_CERT_MGR_STRUCT",
        "name": "pCryptUICertMgr",
        "description": "A pointer to a CRYPTUI_CERT_MGR_STRUCT structure that contains information about how to create the dialog box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptUIDlgSelectCertificate function displays a dialog box that allows a user to select a certificate.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "A pointer to a CERT_CONTEXT structure that represents the certificate selected by the user. When you have finished using this certificate, you must pass this pointer to the CertFreeCertificateContext function to decrement the reference count of the certificate context. If the dwFlags member of the pcsc structure does not contain the CRYPTUI_SELECTCERT_MULTISELECT flag, a return value of NULL means that the user closed the dialog box without selecting a certificate. If the dwFlags member of the pcsc structure does contain the CRYPTUI_SELECTCERT_MULTISELECT flag, this function always returns NULL. The selected certificates will be contained in the certificate store that is represented by the hSelectedCertStore member of pcsc. If the number of certificates in the store is the same before and after calling CryptUIDlgSelectCertificate, the user closed the dialog box without selecting any certificates. ",
    "remarks": "If the dwFlags member of the CRYPTUI_SELECTCERTIFICATE_STRUCT structure is set to CRYPTUI_SELECTCERT_LEGACY, the legacy dialog is displayed. Otherwise, the current certificate selection dialog is displayed. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CryptUIDlgSelectCertificate",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_SELECTCERTIFICATE_STRUCT",
        "name": "pcsc",
        "description": "A pointer to a CRYPTUI_SELECTCERTIFICATE_STRUCT structure that contains information about the dialog box to display."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptUIDlgSelectCertificateFromStore function displays a dialog box that allows the selection of a certificate from a specified store.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "Returns a pointer to the selected certificate context. If no certificate was selected, NULL is returned. When you have finished using the certificate, free the certificate context by calling the CertFreeCertificateContext function. The following example shows displaying a dialog box that allows the selection of a certificate from a specified store. For another example that uses this function, see Example C Program: Listing the Certificates in a Store. ",
    "remarks": "",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CryptUIDlgSelectCertificateFromStore",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of the certificate store to be searched."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Handle of the window for the display. If NULL, defaults to the desktop window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszTitle",
        "description": "String used as the title of the dialog box. If NULL, the default title, \"Select Certificate,\" is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszDisplayString",
        "description": "Text statement in the selection dialog box. If NULL, the default phrase, \"Select a certificate you want to use,\" is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDontUseColumn",
        "description": "Flags that can be combined to exclude columns of the display.     \t\t\t\t\t  ValueMeaning  CRYPTUI_SELECT_ISSUEDTO_COLUMN   Do not display the ISSUEDTO information.   CRYPTUI_SELECT_ISSUEDBY_COLUMN   Do not display the ISSUEDBY information.   CRYPTUI_SELECT_INTENDEDUSE_COLUMN   Do not display IntendedUse information.   CRYPTUI_SELECT_FRIENDLYNAME_COLUMN   Do not display the display name information.   CRYPTUI_SELECT_LOCATION_COLUMN   Do not display location information.   CRYPTUI_SELECT_EXPIRATION_COLUMN   Do not display expiration information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently not used and should be set to 0."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptUIDlgViewCertificate function presents a dialog box that displays a specified certificate.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call the  GetLastError function. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIDlgViewCertificate",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPTUI_VIEWCERTIFICATE_STRUCTW",
        "name": "pCertViewInfo",
        "description": "A pointer to a CRYPTUI_VIEWCERTIFICATE_STRUCT structure that contains information about the certificate to view."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfPropertiesChanged",
        "description": "Indicates whether any certificate properties were modified by the caller."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptUIDlgViewContext function displays a certificate, CTL, or CRL context.",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Cryptuiapi.h",
    "return_value": "This function returns TRUE on success and FALSE on failure. The following example shows displaying a certificate. For another example that uses this function, see Example C Program: Listing the Certificates in a Store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIDlgViewContext",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwContextType",
        "description": "DWORD indicating whether pvContext is a pointer to a certificate, a CRL, or a CTL context as indicated in the following table.      \t\t\t\t\t  ValueMeaning  CERT_STORE_CERTIFICATE_CONTEXT   PCCERT_CONTEXT   CERT_STORE_CRL_CONTEXT   PCCRL_CONTEXT   CERT_STORE_CTL_CONTEXT   PCCTL_CONTEXT"
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvContext",
        "description": "A pointer to a certificate, CRL, or CTL context to be displayed."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Handle of the window for the display. If NULL, the display defaults to the desktop window."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszTitle",
        "description": "Display title string. If NULL, the default context type is used as the title."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently not used and should be set to 0."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The CryptUIDlgViewSignerInfo function is available for use in  the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. ]",
    "library": "Cryptui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "This function returns a nonzero value on success and zero on failure. For extended error information, call  the GetLastError function.  Possible error codes returned from GetLastError include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUIDlgViewSignerInfo",
    "is_callback": 0,
    "dll": "Cryptui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPTUI_VIEWSIGNERINFO_STRUCT*",
        "name": "pcvsi",
        "description": "A pointer to a CRYPTUI_VIEWSIGNERINFO_STRUCT structure that contains the signer information to display."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The GetFriendlyNameOfCert function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use the CertGetNameString function with the CERT_NAME_FRIENDLY_DISPLAY_TYPE flag.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "CryptDlg.h",
    "return_value": "The return value is the number of characters, including the terminating NULL character, in the returned display name. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "GetFriendlyNameOfCert",
    "is_callback": 0,
    "dll": "CryptDlg.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pccert",
        "description": "A pointer to the certificate context whose display name is being retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pchBuffer",
        "description": "A pointer to a character string that receives the display name for the certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchBuffer",
        "description": "Number of characters allocated for pchBuffer, including the terminating NULL character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The RKeyCloseKeyService function is not supported.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Rkeysvcc.h",
    "return_value": "If the function is successful, the return value is S_OK. If the function fails, the return value is a ULONG that indicates the error. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Cryptography",
    "name": "RKeyCloseKeyService",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "KEYSVCC_HANDLE",
        "name": "hKeySvcCli",
        "description": "A KEYSVCC_HANDLE handle previously opened by RKeyOpenKeyService. This value cannot be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pReserved",
        "description": "Reserved. Set this value to NULL."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 6,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Rkeysvcc.h",
    "return_value": "If the function is successful, the return value is S_OK. If the function fails, the return value is a ULONG that indicates the error. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Cryptography",
    "name": "RKeyOpenKeyService",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "pszMachineName",
        "description": "Long pointer to a null-terminated string that represents the computer where the key service handle will be opened."
      },
      {
        "in_out": "_In_",
        "type": "KEYSVC_TYPE",
        "name": "OwnerType",
        "description": "KEYSVC_TYPE value that represents the key type. The only supported value is KeySvcMachine."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszOwnerName",
        "description": "Reserved. Set this value to NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pAuthentication",
        "description": "A pointer to a void that represents the authentication settings. This pointer can point to a  value of zero or the following value.  ValueMeaning  RKEYSVC_CONNECT_SECURE_ONLY    The client requires mutual authentication. If this value is specified, fallback to NTLM will fail."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pReserved",
        "description": "Reserved. Set this value to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "KEYSVCC_HANDLE*",
        "name": "phKeySvcCli",
        "description": "A pointer to a KEYSVCC_HANDLE that receives the opened key service handle. When you have finished using the handle, free the resource by calling the RKeyCloseKeyService  function."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The RKeyPFXInstall function is not supported.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Rkeysvcc.h",
    "return_value": "If the function is successful, the return value is S_OK. If the function fails, the return value is a ULONG that indicates the error. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Cryptography",
    "name": "RKeyPFXInstall",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "KEYSVCC_HANDLE",
        "name": "hKeySvcCli",
        "description": "A KEYSVCC_HANDLE handle previously opened by RKeyOpenKeyService. The handle represents the remote computer that will receive the certificate.  This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "PKEYSVC_BLOB",
        "name": "pPFX",
        "description": "A pointer to a KEYSVC_BLOB structure that represents the certificate to install. The BLOB is in  PKCS #12 format."
      },
      {
        "in_out": "_In_",
        "type": "PKEYSVC_UNICODE_STRING",
        "name": "pPassword",
        "description": "A pointer to a KEYSVC_UNICODE_STRING structure that represents the password for the BLOB.  When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulFlags",
        "description": "Flags that specify the certificate installation options. This parameter can be a zero or a combination of the following values.  ValueMeaning  CRYPT_EXPORTABLE    Imported keys are marked as exportable.   CRYPT_MACHINE_KEYSET    Private keys are stored under the remote computer  and not under the current user."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCRLContextToStore function adds a certificate revocation list (CRL) context to the specified certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. Errors from the called functions  CertAddEncodedCRLToStore and  CertSetCRLContextProperty can be propagated to this function. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The CRL context is not duplicated using  CertDuplicateCRLContext. Instead, a new copy is created and added to the store. In addition to copying the encoded CRL, the function copies the context's properties. To remove the CRL context from the certificate store, use the  CertDeleteCRLFromStore function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCRLContextToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure to be added."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CRL or a link to a matching CRL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CRL or a link to a matching CRL exists, the function compares the ThisUpdate times on the CRLs. If the existing CRL has a ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CRL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a matching CRL is not found in the store, a new CRL is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are incorporated into the replacement CRL.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching CRL or a link to a matching CRL exists, the existing CRL or link is deleted and a new CRL is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, one is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching CRL exists in the store, the existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CRL.   CERT_STORE_ADD_USE_EXISTING   If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated.     If a matching CRL or a link to a matching CRL does not exist, a new CRL is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCRL_CONTEXT*",
        "name": "ppStoreContext",
        "description": "A pointer to a pointer to the decoded CRL context. This is an optional parameter and can be NULL, indicating that the calling application does not require a copy of the added or existing CRL. If a copy is made, that context must be freed by using  CertFreeCRLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCRLLinkToStore function adds a link in a store to a certificate revocation list (CRL) context in a different store. Instead of creating and adding a duplicate of the CRL, this function adds a link to the original CRL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "Because the link provides access to an original CRL context, setting an extended property in the linked CRL context changes that extended property in the CRL's original location and in any other links to that CRL. Links cannot be added to a store that is opened as a collection. Stores opened as collections include all stores opened with  CertOpenSystemStore or  CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. For more information, see  CertAddStoreToCollection. If links are used and  CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store using links must be closed before the store containing the original contexts can be closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed in either order. To remove the CRL context link from the certificate store, use the  CertDeleteCRLFromStore function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCRLLinkToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store where the link is to be added."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure to be linked."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CRL or a link to a matching CRL exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CRL or link to a matching CRL. A new link is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CRL or a link to a matching CRL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a ThisUpdate time less than the ThisUpdate time on the new CRL, the old link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CRL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code.     If a matching CRL or a link to a matching CRL is not found in the store, a new link is added to the store.   CERT_STORE_ADD_REPLACE_EXISTING   If a link to the matching CRL exists, that existing link is deleted and a new link is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, a new link is added.   CERT_STORE_ADD_USE_EXISTING   If a matching CRL or a link to a matching CRL exists, that existing link is used. The function does not fail, but no new link is added. If a matching CRL or link to a CRL does not exist, a new link is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCRL_CONTEXT*",
        "name": "ppStoreContext",
        "description": "A pointer to a pointer of a copy of the link created. The ppStoreContext parameter can be NULL to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using  CertFreeCRLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertAddEncodedCRLToStore function creates a certificate revocation list (CRL) context from an encoded CRL and adds it to the certificate store. The function makes a copy of the CRL context before adding it to the store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddEncodedCRLToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCrlEncoded",
        "description": "A pointer to a buffer containing the encoded CRL to be added to the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCrlEncoded",
        "description": "The size, in bytes, of the pbCrlEncoded buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CRL or a link to a matching CRL already exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CRL or link to a matching CRL. A new CRL is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CRL or a link to a matching CRL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CRL or a link to a matching CRL exists, the ThisUpdate times on the CRLs are compared. If the existing CRL has a ThisUpdate time less than the ThisUpdate time on the new CRL, the old CRL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CRL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CRL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code. If a matching CRL or a link to a matching CRL is not found in the store, a new CRL is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CRL is replaced, the properties of the older CRL are incorporated into the replacement CRL.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching CRL or a link to a matching CRL exists, that existing CRL or link is deleted and a new CRL is created and added to the store. If a matching CRL or a link to a matching CRL does not exist, one is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching CRL exists in the store, that existing context is deleted before creating and adding the new context. The new context inherits properties from the existing CRL.   CERT_STORE_ADD_USE_EXISTING   If a matching CRL or a link to a matching CRL exists, that existing CRL is used and properties from the new CRL are added. The function does not fail, but no new CRL is added. If ppCertContext is not NULL, the existing context is duplicated.     If a matching CRL or a link to a matching CRL does not exist, a new CRL is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCRL_CONTEXT*",
        "name": "ppCrlContext",
        "description": "A pointer to a pointer to the decoded  CRL_CONTEXT structure. This is an optional parameter that can be NULL, indicating that the calling application does not require a copy of the new or existing CRL. If a copy is made, that context must be freed using  CertFreeCRLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertCreateCRLContext function creates a certificate revocation list (CRL) context from an encoded CRL. The created context is not persisted to a certificate store. It makes a copy of the encoded CRL within the created context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only  CRL_CONTEXT. If the function fails and is unable to decode and create the CRL_CONTEXT, the return value is NULL. For extended error information, call  GetLastError. The following table shows a possible error code.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "The  CRL_CONTEXT must be freed by calling  CertFreeCRLContext.  CertDuplicateCRLContext can be called to make a duplicate.  CertSetCRLContextProperty and  CertGetCRLContextProperty can be called to store and read properties for the CRL. ",
    "return_type": "PCCRL_CONTEXT",
    "category": "Cryptography",
    "name": "CertCreateCRLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCrlEncoded",
        "description": "A pointer to a buffer containing the encoded CRL from which the context is to be created."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCrlEncoded",
        "description": "The size, in bytes, of the pbCrlEncoded buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDeleteCRLFromStore function deletes the specified certificate revocation list (CRL) context from the certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "All subsequent get or find operations for the CRL in this store fail. However, memory allocated for the CRL is not freed until all duplicated contexts have also been freed. The pCrlContext parameter is always freed by this function by using  CertFreeCRLContext, even for an error. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertDeleteCRLFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure to be deleted."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDuplicateCRLContext function duplicates a certificate revocation list (CRL) context by incrementing its reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Currently, a copy is not made of the context, and the returned context is the same as the context that was input. If the pointer passed into this function is NULL, NULL is returned. ",
    "remarks": "",
    "return_type": "PCCRL_CONTEXT",
    "category": "Cryptography",
    "name": "CertDuplicateCRLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure for which the reference count is being incremented."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCRLsInStore function retrieves the first or next certificate revocation list (CRL) context in a certificate store. Used in a loop, this function can retrieve in sequence all CRL contexts in a certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to the next  CRL_CONTEXT in the store. NULL is returned if the function fails. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The returned pointer is freed when it is passed as the pPrevCrlContext on a subsequent call to the function. Otherwise, the pointer must explicitly be freed by calling  CertFreeCRLContext. A pPrevCrlContext that is not NULL is always freed when passed to this function through a call to CertFreeCRLContext, even if the function itself returns an error. A duplicate of the CRL context returned by this function can be made by calling  CertDuplicateCRLContext. ",
    "return_type": "PCCRL_CONTEXT",
    "category": "Cryptography",
    "name": "CertEnumCRLsInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pPrevCrlContext",
        "description": "A pointer to the previous  CRL_CONTEXT structure found. The pPrevCrlContext parameter must be NULL to get the first CRL in the store. Successive CRLs are enumerated by setting pPrevCrlContext to the pointer returned by a previous call to the function.  This function frees the CRL_CONTEXT referenced by non-NULL values of this parameter. The enumeration skips any CRLs previously deleted by  CertDeleteCRLFromStore."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CertFindCertificateInCRL function searches the certificate revocation list (CRL) for the specified certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "TRUE if the list was searched; otherwise FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertFindCertificateInCRL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCert",
        "description": "A pointer to a  CERT_CONTEXT of the certificate to be searched for in the CRL."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT to be searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use. Must be set to zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use. Must be set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "PCRL_ENTRY*",
        "name": "ppCrlEntry",
        "description": "If the certificate is found in the CRL, this pointer is updated with a pointer to the entry. Otherwise, it is set to NULL. The returned entry is not allocated and must not be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertFindCRLInStore function finds the first or next certificate revocation list (CRL) context in a certificate store that matches a search criterion established by the dwFindType parameter and the associated pvFindPara parameter. This function can be used in a loop to find all of the CRL contexts in a certificate store that match the specified find criteria.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a pointer to a read-only CRL context. When you have finished using the returned CRL context, free it by calling  the CertFreeCRLContext function or implicitly free it by passing it as the pPrevCrlContext parameter on a subsequent call to the CertFindCRLInStore function. If the function fails and a CRL that matches the search criteria is not found, the return value is NULL. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The returned pointer is freed when passed as the pPrevCrlContext parameter on a subsequent call to the function. Otherwise, the pointer must be explicitly freed by calling  CertFreeCRLContext. A pPrevCrlContext that is not NULL is always freed by CertFindCRLInStore using a call to CertFreeCRLContext, even if there is an error in the function. CertDuplicateCRLContext can be called to make a duplicate of the returned context. The returned CRL context can be added to a different certificate store by using  CertAddCRLContextToStore, or a link to that CRL context can be added to a noncollection store by using  CertAddCRLLinkToStore. ",
    "return_type": "PCCRL_CONTEXT",
    "category": "Cryptography",
    "name": "CertFindCRLInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "A handle of the certificate store to be searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "This parameter is not currently used. It must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindFlags",
        "description": "If dwFindType is CRL_FIND_ISSUED_BY, by default, only issuer name matching is done. The following flags can be used to do additional filtering.  ValueMeaning  CRL_FIND_ISSUED_BY_AKI_FLAG   Checks for a CRL that has an Authority Key Identifier (AKI) extension. If the CRL has an AKI, only a CRL whose AKI matches the issuer is returned. Note  The AKI extension has the object identifier (OID) value szOID_AUTHORITY_KEY_IDENTIFIER2 and its corresponding data structure.     CRL_FIND_ISSUED_BY_SIGNATURE_FLAG   Use the public key in the issuer's certificate to verify the signature on the CRL. Only returns a CRL that has a valid signature.   CRL_FIND_ISSUED_BY_DELTA_FLAG   Finds and returns a delta CRL.   CRL_FIND_ISSUED_BY_BASE_FLAG   Finds and returns a base CRL.   CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG   The signature is checked for strength after successful verification. This flag applies only when the dwFindType parameter is set to CRL_FIND_ISSUED_FOR. You must also set CRL_FIND_ISSUED_BY_SIGNATURE_FLAG. If successful, the following strong signature properties will be set on the CRL context:  CERT_SIGN_HASH_CNG_ALG_PROP_ID CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID  Windows 8 and Windows Server 2012:  Support for this flag begins."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindType",
        "description": "Specifies the type of search being made. The value of dwFindType determines the data type, contents, and use of the pvFindPara parameter. Currently defined search types and their pvFindPara requirements are as follows.  ValueMeaning  CRL_FIND_ANY The pvFindPara parameter is not used. It must be set to NULL.   No search criteria. The next CRL in the store is returned.   CRL_FIND_ISSUED_BY A pointer to a CERT_CONTEXT.   Searches for the next CRL in the store matching the issuer in the CERT_CONTEXT.   CRL_FIND_EXISTING A pointer to a CRL_CONTEXT.   Searches for the next CRL that matches the CRL_CONTEXT in the following ways:   Both are base or delta CRLs. The issuer-name BLOBs for both are identical. If they exist, the Authority/KeyIdentifier and IssuingDistributionPoint encoded extension BLOBs match.    CRL_FIND_ISSUED_FOR A pointer to a CRL_FIND_ISSUED_FOR_PARA.   Searches for the next CRL in the store that matches the issuer of the subject certificate in the CRL_FIND_ISSUED_FOR_PARA structure. If no CRL is found, searches for the next CRL in the store that matches the issuer in the CRL_FIND_ISSUED_FOR_PARA structure. Note  When using cross certificates, the subject name in the issuer's certificate might not match the issuer name in the subject certificate and its corresponding CRL."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvFindPara",
        "description": "This parameter is determined by the value of dwFindType. For details, see the table earlier in this topic."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pPrevCrlContext",
        "description": "A pointer to the last  CRL_CONTEXT returned by this function. Must be NULL to get the first CRL in the store meeting the search criteria. Successive CRLs meeting the search criteria can be found by setting pPrevCrlContext to the PCCRL_CONTEXT pointer returned by a previous call to the function. The search process skips any CRLs that do not match the search criteria or that have been previously deleted from the store by  CertDeleteCRLFromStore. This function frees the CRL_CONTEXT referenced by values of this parameter that are not NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCRLContext function frees a certificate revocation list (CRL) context by decrementing its reference count. When the reference count goes to zero, CertFreeCRLContext frees the memory used by a CRL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function always returns TRUE. See  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertFreeCRLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetCRLFromStore function gets the first or next certificate revocation list (CRL) context from the certificate store for the specified issuer. The function also performs the enabled verification checks on the CRL. The new  Certificate Chain Verification Functions are recommended instead of this function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only CRL_CONTEXT. If the function fails and the first or next CRL is not found, the return value is NULL. The returned CRL_CONTEXT must be freed by calling  CertFreeCRLContext. However, when the returned CRL_CONTEXT is supplied for pPrevCrlContext on a subsequent call, the function frees it. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "CertDuplicateCRLContext can be called to make a duplicate CRL. The hexadecimal values of the flags can be combined using a bitwise-OR operation to enable both verifications. For example, to enable both verifications, the DWORD value pointed to by pdwFlags is set to value CERT_STORE_SIGNATURE_FLAG | CERT_STORE_TIME_VALIDITY_FLAG. If the CERT_STORE_SIGNATURE_FLAG verification succeeded, but CERT_STORE_TIME_VALIDITY_FLAG verification failed, the DWORD value pointed to by pdwFlags is set to CERT_STORE_TIME_VALIDITY_FLAG when the function returns. ",
    "return_type": "PCCRL_CONTEXT",
    "category": "Cryptography",
    "name": "CertGetCRLFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_CONTEXT",
        "name": "pIssuerContext",
        "description": "A pointer to an issuer  CERT_CONTEXT. The pIssuerContext pointer can come from this store or another store, or could have been created by the calling  CertCreateCertificateContext. If NULL is passed for this parameter, all the CRLs in the store are found."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pPrevCrlContext",
        "description": "A pointer to a  CRL_CONTEXT. An issuer can have multiple CRLs. For example, it can generate delta CRLs by using an X.509 version 3 extension. This parameter must be NULL on the first call to get the CRL. To get the next CRL for the issuer, the parameter is set to the CRL_CONTEXT returned by a previous call. A non-NULLpPrevCrlContext is always freed by this function by calling CertFreeCRLContext, even for an error."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "The following flag values are defined to enable verification checks on the returned CRL. These flags can be combined using a bitwise-OR operation.      \t\t\t\t\t\t  ValueMeaning  CERT_STORE_SIGNATURE_FLAG   Uses the public key in the issuer's certificate to verify the signature on the returned CRL.   CERT_STORE_TIME_VALIDITY_FLAG   Gets the current time and verifies that it is within the time between the CRL's ThisUpdate and NextUpdate.   CERT_STORE_BASE_CRL_FLAG   Gets a base CRL.   CERT_STORE_DELTA_CRL_FLAG   Gets a delta CRL.     If an enabled verification check succeeds, its flag is set to zero.  \t\t\t\t\t\t If an enabled verification check fails, its flag remains set upon return. If pIssuerContext is NULL, then an enabled CERT_STORE_SIGNATURE_FLAG always fails and the CERT_STORE_NO_ISSUER_FLAG is also set. For more details, see  Remarks. If only one of CERT_STORE_BASE_CRL_FLAG or CERT_STORE_DELTA_CRL_FLAG is set, this function returns either a base or delta CRL and the appropriate base or delta flag will be cleared on return. If both flags are set, only one of the flags will be cleared. For a verification check failure, a pointer to the first or next  CRL_CONTEXT is still returned and  GetLastError is not updated."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSerializeCRLStoreElement function serializes an encoded certificate revocation list (CRL) context and the encoded representation of its properties. The result can be persisted to storage so that the CRL and properties can be retrieved at a later time.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. For another example that uses this function, see Example C Program: Serializing Certificates. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSerializeCRLStoreElement",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure being serialized."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbElement",
        "description": "A pointer to a buffer to receive the serialized output, including the encoded CRL, and possibly its properties.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbElement",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pbElement parameter. When the function returns, the DWORD value contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCTLContextToStore function adds a certificate trust list (CTL) context to a certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. Errors from the called functions  CertAddEncodedCRLToStore and  CertSetCRLContextProperty can be propagated to this function. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The CTL context is not duplicated using  CertDuplicateCTLContext. Instead, a new copy is created and added to the store. In addition to the encoded CTL, the context's properties are copied. To remove the CTL context from the certificate store, use the  CertDeleteCTLFromStore function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCTLContextToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure to be added to the store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CTL or a link to a matching CTL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CTL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code. If a matching CTL or a link to a matching CTL is not found in the store, a new CTL is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are incorporated into the replacement CTL.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to the store. If a matching CTL or a link to a matching CTL does not exist, one is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CTL.   CERT_STORE_ADD_USE_EXISTING   If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching CTL or a link to a matching CTL does not exist, a new CTL is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCTL_CONTEXT*",
        "name": "ppStoreContext",
        "description": "Pointer to a pointer to the decoded CTL context. This optional parameter can be NULL indicating that the calling application does not require a copy of the added or existing CTL. If a copy is made, that context must be freed using  CertFreeCTLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertAddCTLLinkToStore function adds a link in a store to a certificate trust list (CTL) context in a different store. Instead of creating and adding a duplicate of a CTL context, this function adds a link to the original CTL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "Because the link provides access to the original CTL context, setting an extended property in the linked CTL context changes that extended property in the original CTL's location and in any other links to that CTL. Links cannot be added to a store that is opened as a collection. Stores opened as collections include all stores opened with  CertOpenSystemStore or  CertOpenStore using CERT_STORE_PROV_SYSTEM or CERT_STORE_PROV_COLLECTION. Also see  CertAddStoreToCollection. When links are used and  CertCloseStore is called with CERT_CLOSE_STORE_FORCE_FLAG, the store using links must be closed before the store containing the original contexts is closed. If CERT_CLOSE_STORE_FORCE_FLAG is not used, the two stores can be closed in either order. To remove the CTL context link from the certificate store, use the  CertDeleteCTLFromStore function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddCTLLinkToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of the certificate store where the link is to be added."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure to be linked."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined disposition values and their uses are as follows.  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CTL or a link to a matching CTL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CTL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code.     If a matching CTL or a link to a matching CTL is not found in the store, a new CTL is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are incorporated into the replacement CTL.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to the store. If a matching CTL or a link to a matching CTL does not exist, one is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CTL.   CERT_STORE_ADD_USE_EXISTING   If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated. If a matching CTL or a link to a matching CTL does not exist, a new CTL is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCTL_CONTEXT*",
        "name": "ppStoreContext",
        "description": "A pointer to a pointer to a copy of the link created. ppStoreContext can be NULL to indicate that a copy of the link is not needed. If a copy of the link is created, that copy must be freed using  CertFreeCTLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertAddEncodedCTLToStore function creates a certificate trust list (CTL) context from an encoded CTL and adds it to the certificate store. The function makes a copy of the CTL context before adding it to the store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes follow.   If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddEncodedCTLToStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are: X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCtlEncoded",
        "description": "A pointer to a buffer containing the encoded CTL to be added to the certificate store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCtlEncoded",
        "description": "The size, in bytes, of the pbCtlEncoded buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAddDisposition",
        "description": "Specifies the action to take if a matching CTL or a link to a matching CTL already exists in the store. Currently defined disposition values and their uses are as follows      \t\t\t\t\t  ValueMeaning  CERT_STORE_ADD_ALWAYS   Makes no check for an existing matching CTL or link to a matching CTL. A new CTL is always added to the store. This can lead to duplicates in a store.   CERT_STORE_ADD_NEW   If a matching CTL or a link to a matching CTL exists, the operation fails.  GetLastError returns the CRYPT_E_EXISTS code.   CERT_STORE_ADD_NEWER   If a matching CTL or a link to a matching CTL exists, the ThisUpdate times on the CTLs are compared. If the existing CTL has a ThisUpdate time less than the ThisUpdate time on the new CTL, the old CTL or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing CTL has a ThisUpdate time greater than or equal to the ThisUpdate time on the CTL to be added, the function fails with  GetLastError returning the CRYPT_E_EXISTS code.     If a matching CTL or a link to a matching CTL is not found in the store, a new CTL is added to the store.   CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES   The action is the same as for CERT_STORE_ADD_NEWER, except that if an older CTL is replaced, the properties of the older CTL are incorporated into the replacement CTL.   CERT_STORE_ADD_REPLACE_EXISTING   If a matching CTL or a link to a matching CTL exists, the existing CTL or link is deleted and a new CTL is created and added to the store. If a matching CTL or a link to a matching CTL does not exist, one is added.   CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES   If a matching CTL exists in the store, that existing context is deleted before creating and adding the new context. The added context inherits properties from the existing CTL.   CERT_STORE_ADD_USE_EXISTING   If a matching CTL or a link to a matching CTL exists, that existing CTL is used and properties from the new CTL are added. The function does not fail, but no new CTL is added. If ppCertContext is not NULL, the existing context is duplicated.     If a matching CTL or a link to a matching CTL does not exist, a new CTL is added."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCTL_CONTEXT*",
        "name": "ppCtlContext",
        "description": "A pointer to a pointer to the decoded  CTL_CONTEXT structure. Can be NULL indicating that the calling application does not require a copy of the added or existing CTL. If a copy is made, it must be freed by using  CertFreeCTLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertCreateCTLContext function creates a certificate trust list (CTL) context from an encoded CTL. The created context is not persisted to a certificate store. The function makes a copy of the encoded CTL within the created context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only  CTL_CONTEXT. If the function fails and is unable to decode and create the CTL_CONTEXT, the return value is NULL. For extended error information, call  GetLastError. The following table shows a possible error code.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "The  CTL_CONTEXT must be freed by calling  CertFreeCTLContext.  CertDuplicateCTLContext can be called to make a duplicate.  CertSetCTLContextProperty and  CertGetCTLContextProperty can be called to store and read properties for the CTL. ",
    "return_type": "PCCTL_CONTEXT",
    "category": "Cryptography",
    "name": "CertCreateCTLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the type of encoding used. Both the certificate and message encoding types must be specified by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbCtlEncoded",
        "description": "A pointer to a buffer containing the encoded CTL from which the context is to be created."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCtlEncoded",
        "description": "The size, in bytes, of the pbCtlEncoded buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDeleteCTLFromStore function deletes the specified certificate trust list (CTL) context from a certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "All subsequent get or find operations for the CTL in this store fail. However, memory allocated for the CTL is not freed until all duplicated contexts have also been freed. The pCtlContext parameter is always freed by this function by using  CertFreeCTLContext, even for an error. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertDeleteCTLFromStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure to be deleted."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDuplicateCTLContext function duplicates a certificate trust list (CTL) context by incrementing its reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Currently, a copy is not made of the context, and the returned pointer to CTL_CONTEXT is the same as pointer input. If the pointer passed into this function is NULL, NULL is returned. ",
    "remarks": "",
    "return_type": "PCCTL_CONTEXT",
    "category": "Cryptography",
    "name": "CertDuplicateCTLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure for which the reference count is being incremented."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCTLsInStore function retrieves the first or next certificate trust list (CTL) context in a certificate store. Used in a loop, this function can retrieve in sequence all CTL contexts in a certificate store.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only  CTL_CONTEXT. If the function fails and a CTL is not found, the return value is NULL. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "The returned pointer is freed when passed as the pPrevCtlContext on a subsequent call. Otherwise, the pointer must be explicitly freed by calling  CertFreeCTLContext. A pPrevCtlContext that is not NULL is always freed by this function (through a call to CertFreeCTLContext), even for an error. A duplicate can be made by calling  CertDuplicateCTLContext. ",
    "return_type": "PCCTL_CONTEXT",
    "category": "Cryptography",
    "name": "CertEnumCTLsInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pPrevCtlContext",
        "description": "A pointer to the previous  CTL_CONTEXT structure found. It must be NULL to get the first CTL in the store. Successive CTLs are enumerated by setting pPrevCtlContext to the pointer returned by a previous call. This function frees the CTL_CONTEXT referenced by non-NULL values of this parameter. The enumeration skips any CTLs previously deleted by  CertDeleteCTLFromStore."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertFindCTLInStore function finds the first or next certificate trust list (CTL) context that matches search criteria established by the dwFindType and its associated pvFindPara. This function can be used in a loop to find all of the CTL contexts in a certificate store that match the specified find criteria.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is a pointer to a read-only CTLcontext. For extended error information, call  GetLastError. Some possible error codes follow.  ",
    "remarks": "A returned pointer is freed when passed as the pPrevCtlContext on a subsequent call to the function. Otherwise, the pointer must be freed by calling  CertFreeCTLContext. A non-NULLpPrevCtlContext passed to the function is always freed with a call to CertFreeCTLContext, even if the function generates an error. CertDuplicateCTLContext can be called to make a duplicate of the returned context. The returned CTL context can be added to a different certificate store using  CertAddCTLContextToStore, or a link to that CTL context can be added to a noncollection store using  CertAddCTLLinkToStore. If a CTL matching the search criteria is not found, NULL is returned. ",
    "return_type": "PCCTL_CONTEXT",
    "category": "Cryptography",
    "name": "CertFindCTLInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "Handle of the certificate store to be searched."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the type of encoding used on the CTL. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING  This parameter is used only when the dwFindType parameter is set to CTL_FIND_USAGE."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindFlags",
        "description": "Can be set when dwFindType is set to CTL_FIND_USAGE. For details, see the comments under CTL_FIND_USAGE, following."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindType",
        "description": "Specifies the type of search being made. The search type determines the data type, contents, and the use of pvFindPara. This parameter can be one of the following values.  ValueMeaning  CTL_FIND_ANY    Data type of pvFindPara: NULL. Any CTL is a match.   CTL_FIND_SHA1_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB. A CTL with a hash matching the hash in the CRYPT_HASH_BLOB structure is found.   CTL_FIND_MD5_HASH    Data type of pvFindPara: CRYPT_HASH_BLOB. A CTL with a hash matching the hash in the CRYPT_HASH_BLOB structure is found.   CTL_FIND_USAGE    Data type of pvFindPara: CTL_FIND_USAGE_PARA. Any CTL is found that has a usage identifier, list identifier, or signer matching the usage identifier, list identifier, or signer in the CTL_FIND_USAGE_PARA structure. If the cUsageIdentifier member is of SubjectUsage size, any CTL is a match. If the cbData member of ListIdentifier member is zero, any list identifier is a match. If the cbData member of ListIdentifier is CTL_FIND_NO_LIST_ID_CBDATA, only a CTL without a list identifier is a match. If the pSigner member in the CTL_FIND_USAGE_PARA structure is NULL, any CTL signer is a match, and only the Issuer and SerialNumber members in the pSigner CERT_INFO structure are used. If pSigner is CTL_FIND_NO_SIGNER_PTR, only a CTL without a signer is a match.   CTL_FIND_SAME_USAGE_FLAG    Data type of pvFindPara: CTL_FIND_USAGE_PARA. Only CTLs with exactly the same usage identifiers are matched. CTLs having additional usage identifiers are not matched. For example, if only \"1.2.3\" is specified in the CTL_FIND_USAGE_PARA structure, then for a match, the CTL must only contain \"1.2.3\" and no additional usage identifiers.   CTL_FIND_EXISTING    Data type of pvFindPara: PCCTL_CONTEXT. Searches for the next CRL that is an exact match of the CTL_CONTEXT.   CTL_FIND_SUBJECT    Data type of pvFindPara: CTL_FIND_SUBJECT_PARA. A CTL having the specified subject is found. CertFindSubjectInCTL can be called to get a pointer to the subject's entry in the CTL. The pUsagePara member in CTL_FIND_SUBJECT_PARA can optionally be set to enable the matching described preceding under CTL_FIND_USAGE."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvFindPara",
        "description": "A pointer to the search value associated with the dwFindType parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pPrevCtlContext",
        "description": "A pointer to the last  CTL_CONTEXT returned by this function. It must be NULL to get the first CTL in the store. Successive CTLs are retrieved by setting pPrevCtlContext to the pointer to the CTL_CONTEXT returned by a previous function call. Any certificates that do not meet the search criteria or that have been previously deleted by  CertDeleteCTLFromStore are skipped. This function frees the CTL_CONTEXT referenced by non-NULL values of this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCTLContext function frees a certificate trust list (CTL) context by decrementing its reference count. When the reference count goes to zero, CertFreeCTLContext frees the memory used by a CTL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function always returns TRUE. See  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertFreeCTLContext",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertModifyCertificatesToTrust function  modifies the set of certificates in a certificate trust list (CTL) for a given purpose.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "CryptDlg.h",
    "return_value": "An HRESULT. A value of S_OK indicates success. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertModifyCertificatesToTrust",
    "is_callback": 0,
    "dll": "CryptDlg.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cCerts",
        "description": "The number of modification requests that are in the rgCerts parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCTL_MODIFY_REQUEST",
        "name": "rgCerts",
        "description": "A pointer to a CTL_MODIFY_REQUEST structure that contains an array of modification requests."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "szPurpose",
        "description": "A pointer to a null-terminated string that contains the string representation of an object identifier (OID). The OID specifies the enhanced key usage (EKU) of the CTL to be modified."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "A handle to the parent window of the dialog boxes that this function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "HCERTSTORE",
        "name": "hcertstoreTrust",
        "description": "A handle to the certificate store in which to modify the list of trusted certificates.  If NULL, the Trusted People store is used with the Current User location."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_CONTEXT",
        "name": "pccertSigner",
        "description": "A pointer to a CERT_CONTEXT structure that contains a certificate. It is used to sign the trust list. The certificate also restricts the set of trust lists that may be modified. If NULL, the trust list is not signed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSerializeCTLStoreElement function serializes an encoded certificate trust list (CTL) context and the encoded representation of its properties. The result can be persisted to storage so that the CTL and properties can be retrieved later.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. See  Example C Program: Serializing Certificates. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSerializeCTLStoreElement",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure being serialized."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbElement",
        "description": "A pointer to a buffer that receives the serialized output, including the encoded CTL and, possibly, its properties.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbElement",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the buffer that is pointed to by the pbElement parameter. When the function returns the DWORD value contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCertificateContextProperties function retrieves the first or next extended property associated with a certificate context. Used in a loop, this function can retrieve in sequence all of the extended properties associated with a certificate context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The return value is a DWORD value that identifies a certificate context's property. The DWORD value returned by one call of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned. ",
    "remarks": "CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_SPEC_PROP_ID properties are stored as members of the CERT_KEY_CONTEXT_PROP_ID property. They are not enumerated individually. See  Example C Program: Listing the Certificates in a Store. ",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertEnumCertificateContextProperties",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure of the certificate containing the properties to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties, dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.     Applications can call  CertGetCertificateContextProperty with the dwPropId returned by this function to retrieve that property's data."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCRLContextProperties function retrieves the first or next extended property associated with a certificate revocation list (CRL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CRL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The return value is a DWORD value that identifies a CRL context's property. The DWORD value returned by one call of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned. See  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertEnumCRLContextProperties",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to a  CRL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties, dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.     Applications can call  CertGetCRLContextProperty with the dwPropId returned by this function to retrieve that property's data."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertEnumCTLContextProperties function retrieves the first or next extended property associated with a certificate trust list (CTL) context. Used in a loop, this function can retrieve in sequence all extended properties associated with a CTL context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The return value is a DWORD value that identifies a CTL context's property. The DWORD value returned by one call of the function can be supplied as the dwPropId in a subsequent call to the function. If there are no more properties to be enumerated or if the function fails, zero is returned. See  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertEnumCTLContextProperties",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Property number of the last property enumerated. To get the first property, dwPropId is zero. To retrieve subsequent properties, dwPropId is set to the property number returned by the last call to the function. To enumerate all the properties, function calls continue until the function returns zero.     Applications can call  CertGetCTLContextProperty with the dwPropId returned by this function to retrieved that property's data."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetCertificateContextProperty function retrieves the information contained in an extended property of a certificate context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. Some possible error codes follow.  Errors from the called function  CryptHashCertificate can be propagated to this function. ",
    "remarks": "Properties are not stored inside a certificate. Typically, they are associated with a certificate after the certificate response is received and then saved with the certificate in the store. For security reasons, we recommend that you validate property values before saving  them and that you save only informational properties such as the CERT_FRIENDLY_NAME_PROP_ID value in user stores. All other property types should be saved in local computer stores. Your code can use a macro to evaluate the class of hash for a certificate context. For more information, see CertSetCertificateContextProperty. For examples that use this function, see  Example C Program: Getting and Setting Certificate Properties and  Example C Program: Listing the Certificates in a Store. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetCertificateContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT structure of the certificate that contains the property to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "The property to be retrieved. ..."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned are also returned following the base structure. Therefore, the size contained in pcbData often exceeds the size of the base structure. This parameter can be NULL to set the size of the information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the pvData parameter. When the function returns, the DWORD value contains the number of bytes to be stored in the buffer. To obtain the required size of a buffer at run time, pass NULL for the pvData parameter, and set the value pointed to by this parameter to zero. If the pvData parameter is not NULL and the size specified in pcbData   is less than the number of bytes required to  contain the data, the function fails, GetLastError returns ERROR_MORE_DATA, and the required size is placed in the variable pointed to by the pcbData parameter. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetCRLContextProperty function gets an extended property for the specified certificate revocation list (CRL) context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. Note that errors from the called function  CryptHashCertificate can be propagated to this function. For extended error information, call  GetLastError. Some possible error codes follow.  See  Example C Program: Getting and Setting Certificate Properties and  Example C Program: Listing the Certificates in a Store. In those examples, extrapolate from a certificate to a CRL. In other words, PCCERT_CONTEXT becomes PCCRL_CONTEXT, pCertContext becomes pCrlContext, CertEnumCertificateContextProperties becomes  CertEnumCRLContextProperties, and  CertGetCertificateContextProperty becomes CertGetCRLContextProperty. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetCRLContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to be retrieved. ..."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned are also returned following the base structure. Therefore, the size contained in pcbData often exceed the size of the base structure.     This parameter can be NULL to set the size of the information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pvData parameter. When the function returns, the DWORD value contains the number of bytes to be stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetCTLContextProperty function retrieves an extended property of a certificate trust list (CTL) context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. Errors from the called function, CryptHashCertificate, can be propagated to this function. For extended error information, call  GetLastError. Some possible error codes follow.  See  Example C Program: Getting and Setting Certificate Properties and  Example C Program: Listing the Certificates in a Store. In those examples, extrapolate from a certificate to a CTL. In other words, PCCERT_CONTEXT becomes PCCTL_CONTEXT, pCertContext becomes pCtlContext, CertEnumCertificateContextProperties becomes  CertEnumCTLContextProperties, and  CertGetCertificateContextProperty becomes CertGetCTLContextProperty. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetCTLContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to be retrieved. Currently defined identifiers and the data type to be returned in pvData are listed in the following table.      \t\t\t\t\t\t \t\t\t\t\t  ValueMeaning  CERT_ACCESS_STATE_PROP_ID   Data type for pvData: pointer to a DWORD Returns a DWORD value indicating whether write operations to the certificate are persisted. The DWORD value is not set if the certificate is in a memory store or in a registry-based store that is opened as read-only.   CERT_ARCHIVED_PROP_ID   Data type for pvData: NULL Indicates the certificate is skipped during enumerations. A certificate with this property set is found with explicit search operations, such as those used to find a certificate with a specific hash or a serial number. No data in pvData is associated with this property.   CERT_AUTO_ENROLL_PROP_ID   Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode string naming the certificate type for which the certificate has been auto enrolled.   CERT_CTL_USAGE_PROP_ID   Data type for pvData: pointer to a BYTE array Returns an array of bytes containing an Abstract Syntax Notation One (ASN.1) encoded CTL_USAGE structure.   CERT_DESCRIPTION_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the property displayed by the certificate UI. This property allows the user to describe the certificate's use.   CERT_ENHKEY_USAGE_PROP_ID   Data type for pvData: pointer to a BYTE array Returns an array of bytes containing an ASN.1 encoded CERT_ENHKEY_USAGE structure.   CERT_FRIENDLY_NAME_PROP_ID   Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode character string that contains the display name for the CTL.   CERT_HASH_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the SHA1 hash. If the hash does not exist, it is computed using  CryptHashCertificate.   CERT_KEY_CONTEXT_PROP_ID   Data type for pvData: pointer to a CERT_KEY_CONTEXT  Returns a  CERT_KEY_CONTEXT structure.   CERT_KEY_IDENTIFIER_PROP_ID   Data type for pvData: pointer to a BYTE array If nonexistent, searches for the szOID_SUBJECT_KEY_IDENTIFIER extension. If that fails, a SHA1 hash is done on the certificate's SubjectPublicKeyInfo member to produce the identifier values.   CERT_KEY_PROV_HANDLE_PROP_ID   Data type for pvData: pointer to an HCRYPTPROV  Returns the provider handle obtained from the CERT_KEY_CONTEXT_PROP_ID.   CERT_KEY_PROV_INFO_PROP_ID   Data type for pvData: pointer to a CRYPT_KEY_PROV_INFO structure Returns a pointer to a CRYPT_KEY_PROV_INFO.   CERT_KEY_SPEC_PROP_ID   Data type for pvData: pointer to a DWORD Returns a DWORD value specifying the private key obtained from CERT_KEY_CONTEXT_PROP_ID property if it exists. Otherwise, if CERT_KEY_PROV_INFO_PROP_ID exists, it is the source of the dwKeySpec. \t\t\t\t\t\t\t   CERT_MD5_HASH_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the MD5 hash. If the hash does not exist, it is computed using  CryptHashCertificate.   CERT_NEXT_UPDATE_LOCATION_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the ASN.1 encoded  CERT_ALT_NAME_INFO structure.     CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.   CERT_PVK_FILE_PROP_ID   Data type for pvData: pointer to a BYTE array Returns a null-terminated Unicode, wide character string specifying the file name containing the private key associated with the certificate's public key.   CERT_SHA1_HASH_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the SHA1 hash. If the hash does not exist, it is computed using  CryptHashCertificate.   CERT_SIGNATURE_HASH_PROP_ID   Data type for pvData: pointer to a BYTE array Returns the signature hash. If the hash does not exist, it is computed with  CryptHashToBeSigned. The length of the hash is 20 bytes for SHA and 16 for MD5.     For all other property identifiers, pvData points to an array of bytes and not a CRYPT_DATA_BLOB as pointed to by the pvData parameter in CertSetCertificateContextProperty. For more information about each property identifier, see the documentation on the dwPropId parameter in  CertSetCertificateContextProperty. CERT_SHA1_HASH_PROP_ID and CERT_NEXT_UPDATE_LOCATION_PROP_ID are the predefined properties of most interest."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to receive the data as determined by dwPropId. Structures pointed to by members of a structure returned are also returned following the base structure. Therefore, the size contained in pcbData often exceed the size of the base structure.     This parameter can be NULL to set the size of the information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD value specifying the size, in bytes, of the buffer pointed to by the pvData parameter. When the function returns, the DWORD value contains the number of bytes to be stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSetCertificateContextProperty function sets an extended property for a specified certificate context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, the function returns FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "If a property already exists, its old value is replaced. Your code can use a macro to evaluate the class of hash for a certificate context. The Wincrypt.h header  defines the following macros for this purpose. These macros are used internally by the CertSetCertificateContextProperty function. Each macro takes the dwPropId (X) value as input and evaluates to a Boolean value. The following table  shows the dwPropId values that evaluate to TRUE for each macro.  The IS_STRONG_SIGN_PROP_ID(x) macro evaluates to TRUE if the CERT_SIGN_HASH_CNG_ALG_PROP_ID, CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID, or CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID properties are set in the dwPropId parameter. For an example that uses this function, see  Example C Program: Getting and Setting Certificate Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetCertificateContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "The property to be set. The value of dwPropId determines the type and content of the pvData parameter. Currently defined identifiers and their related pvData types are as follows. Note  CRYPT_HASH_BLOB and CRYPT_DATA_BLOB are described in the CRYPT_INTEGER_BLOB topic.    CERT_ACCESS_STATE_PROP_ID   Data type of pvData: A pointer to a DWORD value. Returns a DWORD value that indicates whether  \t\t\t    write operations to the certificate are persisted.  \t\t\t\t The DWORD value is not set if the certificate  \t\t\t\t is in a memory store or in a registry-based store  \t\t\t\t that is opened as read-only.  CERT_AIA_URL_RETRIEVED_PROP_ID   This identifier is reserved.  CERT_ARCHIVED_KEY_HASH_PROP_ID   Data type of pvData:    A pointer to a CRYPT_HASH_BLOB structure. This property saves an encrypted key hash for the certificate context.  CERT_ARCHIVED_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Indicates that the certificate is skipped during enumerations. A certificate with this property set is still found with explicit search operations, such as finding a certificate with a specific hash or a specific serial number. This property can be set to the empty BLOB, {0,NULL}.  CERT_AUTHORITY_INFO_ACCESS_PROP_ID   This identifier is reserved.  CERT_AUTO_ENROLL_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. A property that is set after a certificate has been enrolled by using Auto Enroll. The CRYPT_DATA_BLOB structure pointed to by pvData includes a null-terminated Unicode name of the certificate type for which the certificate has been auto enrolled. Any subsequent calls to Auto Enroll for the certificate checks for this property to determine whether the certificate has been enrolled.  CERT_AUTO_ENROLL_RETRY_PROP_ID   This identifier is reserved.  CERT_BACKED_UP_PROP_ID   This identifier is reserved.  CERT_CA_DISABLE_CRL_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Disables certificate revocation list (CRL) retrieval for certificates used by the certification authority (CA). If the CA certificate contains this property, it must also include the CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID property.  CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Contains the list of online certificate status protocol (OCSP) URLs to use for certificates issued by the CA certificate. The array contents are the Abstract Syntax Notation One (ASN.1)-encoded bytes of an X509_AUTHORITY_INFO_ACCESS structure where pszAccessMethod is set to szOID_PKIX_OCSP.  CERT_CROSS_CERT_DIST_POINTS_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Sets the location of the cross certificates. This value is only applicable to certificates and not to certificate revocation lists (CRLs) or certificate trust lists (CTLs). The CRYPT_DATA_BLOB structure contains an Abstract Syntax Notation One (ASN.1)-encoded  CROSS_CERT_DIST_POINTS_INFO structure that is encoded by using  the CryptEncodeObject function with a X509_CROSS_CERT_DIST_POINTS value for the lpszStuctType parameter.  CERT_CTL_USAGE_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure contains an ASN.1-encoded  CTL_USAGE structure. This structure is encoded by using the CryptEncodeObject function with the X509_ENHANCED_KEY_USAGE value set.  CERT_DATE_STAMP_PROP_ID   Data type of pvData: A pointer to a FILETIME structure. This property sets the time that the certificate was added to the store.  CERT_DESCRIPTION_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. A property that is set and displayed by the certificate UI. This property allows the user to describe the certificate's use.  CERT_EFS_PROP_ID   This identifier is reserved.  CERT_ENHKEY_USAGE_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. A property that indicates that the pvData parameter points to a CRYPT_DATA_BLOB structure that contains an ASN.1-encoded CERT_ENHKEY_USAGE structure. This structure is encoded by using the CryptEncodeObject function with the X509_ENHANCED_KEY_USAGE value set.  CERT_ENROLLMENT_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Enrollment information of the pending request that contains  \t\t\tRequestID, CADNSName, CAName, and DisplayName. The data format  \t\t\tis defined as follows. BytesContents  First 4 bytes  Pending request ID   Next 4 bytes  CADNSName size, in characters, including the terminating null character, followed  \t\t\tby CADNSName string with terminating null character   Next 4 bytes  CAName  \t\t\tsize, in characters, including the terminating null character, followed by CAName  \t\t\tstring with terminating null character   Next 4 bytes  DisplayName size, in  \t\t\tcharacters, including the terminating null character, followed by DisplayName  \t\t\tstring with terminating null character      CERT_EXTENDED_ERROR_INFO_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets a string that contains extended error information for the certificate context.  CERT_FORTEZZA_DATA_PROP_ID   This identifier is reserved.  CERT_FRIENDLY_NAME_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure contains the display name of the certificate.  CERT_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property is implicitly set by a call to  the CertGetCertificateContextProperty function.  CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID   Data type of pvData: A pointer to an HCRYPTPROV_OR_NCRYPT_KEY_HANDLE data type. This property calls NCryptIsKeyHandle to determine whether this is an NCRYPT_KEY_HANDLE. For an NCRYPT_KEY_HANDLE,  sets CERT_NCRYPT_KEY_HANDLE_PROP_ID; otherwise, it sets CERT_KEY_PROV_HANDLE_PROP_ID.  CERT_HCRYPTPROV_TRANSFER_PROP_ID   Sets the handle of the CAPI key associated with the certificate.  CERT_IE30_RESERVED_PROP_ID   This identifier is reserved.  CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the MD5 hash of the public key associated with the private key used to sign this certificate.  CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure contains the MD5 hash of the issuer name and serial number from this certificate.  CERT_KEY_CONTEXT_PROP_ID   Data type of pvData: A pointer to a CERT_KEY_CONTEXT structure. The structure specifies the certificate's private key. It contains both the HCRYPTPROV and key specification for the private key. For more information about the hCryptProv member and dwFlags settings, see CERT_KEY_PROV_HANDLE_PROP_ID, later in this topic. Note  More CERT_KEY_CONTEXT structure members can be added for this property. If so, the cbSize member value will be adjusted accordingly. The cbSize member must be set to the size of the CERT_KEY_CONTEXT structure.    CERT_KEY_IDENTIFIER_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property is typically implicitly set by a call to  the CertGetCertificateContextProperty function.  CERT_KEY_PROV_HANDLE_PROP_ID   Data type of pvData:  A  HCRYPTPROV value. The HCRYPTPROV handle for the certificate's private key is set. The hCryptProv member of the CERT_KEY_CONTEXT structure is updated if it exists. If it does not exist, it is created with dwKeySpec and initialized by CERT_KEY_PROV_INFO_PROP_ID. If CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the hCryptProv value is implicitly released either when the property is set to NULL or on the final freeing of the  CERT_CONTEXT structure.  CERT_KEY_PROV_INFO_PROP_ID   Data type of pvData: A pointer to a CRYPT_KEY_PROV_INFO structure. The structure specifies the certificate's private key.  CERT_KEY_SPEC_PROP_ID   Data type of pvData: A pointer to a DWORD value. The DWORD value that specifies the private key. The dwKeySpec member of the CERT_KEY_CONTEXT structure is updated if it exists. If it does not, it is created with hCryptProv set to zero.  CERT_MD5_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure. This property is implicitly set by a call to  the CertGetCertificateContextProperty function.  CERT_NCRYPT_KEY_HANDLE_PROP_ID   Data type of pvData: A pointer to an NCRYPT_KEY_HANDLE data type. This property sets the NCRYPT_KEY_HANDLE for the certificate private key and sets the dwKeySpec  to CERT_NCRYPT_KEY_SPEC.  CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID   Sets the handle of the CNG key associated with the certificate.  CERT_NEW_KEY_PROP_ID   This identifier is reserved.  CERT_NEXT_UPDATE_LOCATION_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure contains an ASN.1-encoded  CERT_ALT_NAME_INFO structure that is encoded by using the CryptEncodeObject function with the X509_ALTERNATE_NAME value set. CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.  CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID   This identifier is reserved.  CERT_OCSP_CACHE_PREFIX_PROP_ID   This identifier is reserved.  CERT_OCSP_RESPONSE_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the encoded online certificate status protocol (OCSP) response from a CERT_SERVER_OCSP_RESPONSE_CONTEXT for this certificate.  CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID   Data type of pvData: Pointer to a  CRYPT_DATA_BLOB structure. This property is implicitly set by calling the CertGetCertificateContextProperty function. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This identifier is not supported.  CERT_PUBKEY_ALG_PARA_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property is used with public keys that support algorithm parameter inheritance. The data BLOB contains the ASN.1-encoded PublicKey Algorithm parameters. For DSS, these are parameters encoded by using  the CryptEncodeObject function. This is used only if CMS_PKCS7 is defined.  CERT_PUBKEY_HASH_RESERVED_PROP_ID   This identifier is reserved.  CERT_PVK_FILE_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure specifies the name of a file that contains the private key associated with the certificate's public key. Inside the CRYPT_DATA_BLOB structure, the pbData member is a pointer to a null-terminated Unicode wide-character string, and the cbData member indicates the length of the string.  CERT_RENEWAL_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property specifies the hash of the renewed certificate.  CERT_REQUEST_ORIGINATOR_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. The CRYPT_DATA_BLOB structure contains a null-terminated Unicode string that contains the DNS computer name for the origination of the certificate context request.  CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Returns a pointer to an encoded CERT_POLICIES_INFO structure that contains the application policies of the root certificate for the context. This property can be decoded by using the CryptDecodeObject function with the lpszStructType parameter set to X509_CERT_POLICIES and the dwCertEncodingType parameter set to a combination of X509_ASN_ENCODING bitwise OR PKCS_7_ASN_ENCODING.  CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID   This identifier is reserved.  CERT_SIGN_HASH_CNG_ALG_PROP_ID   Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure. This property is implicitly set by calling the CertGetCertificateContextProperty function. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This identifier is not supported.  CERT_SHA1_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure. This property is implicitly set by a call to  the CertGetCertificateContextProperty function.  CERT_SIGNATURE_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_HASH_BLOB structure. If a signature hash does not exist, it is computed by using the CryptHashToBeSigned function. pvData points to an existing or computed hash. Usually, the length of the hash is 20 bytes for SHA and 16 for MD5.  CERT_SMART_CARD_DATA_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the smart card data property of a smart card certificate context.  CERT_SMART_CARD_ROOT_INFO_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the information property  of a smart card root certificate context.  CERT_SOURCE_LOCATION_PROP_ID   This identifier is reserved.  CERT_SOURCE_URL_PROP_ID   This identifier is reserved.  CERT_SUBJECT_DISABLE_CRL_PROP_ID   This identifier is reserved.  CERT_SUBJECT_INFO_ACCESS_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the subject information access extension of the certificate context as an encoded CERT_SUBJECT_INFO_ACCESS structure.  CERT_SUBJECT_NAME_MD5_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. Returns an MD5 hash of the encoded subject name of the certificate context.   CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID   This identifier is reserved.  CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID   Data type of pvData: Pointer to a CRYPT_DATA_BLOB structure. This property is implicitly set by calling the CertGetCertificateContextProperty function. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This identifier is not supported.  CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID   Data type of pvData: A pointer to a CRYPT_DATA_BLOB structure. This property sets the MD5 hash of this certificate's public key. pvData is a pointer to a CRYPT_DATA_BLOB structure.   The user can define additional dwPropId types by using DWORD values from CERT_FIRST_USER_PROP_ID to CERT_LAST_USER_PROP_ID. For all user-defined dwPropId types, pvData points to an encoded CRYPT_DATA_BLOB structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties. If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's properties are always set. If CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any context property set is not persisted."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "A pointer to a data type determined by the value of dwPropId. Note  For any dwPropId, setting pvData to NULL deletes the property."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSetCRLContextProperty function sets an extended property for the specified certificate revocation list (CRL) context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "If a property already exists, its old value is replaced. For an example that uses this function, see  Example C Program: Getting and Setting Certificate Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetCRLContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the  CRL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to be set. ..."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties.     If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's properties are always set. If the CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any property set is not persisted."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "A pointer to a data type that is determined by the value passed in dwPropId.     Note  For any dwPropId, setting pvData to NULL deletes the property."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertSetCTLContextProperty function sets an extended property for the specified certificate trust list (CTL) context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. One possible error code is the following.  ",
    "remarks": "If a property already exists, its old value is replaced. See  Example C Program: Getting and Setting Certificate Properties. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetCTLContextProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to the  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to be set. ..."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID dwPropId properties.     If the CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG value is set, any provider-write errors are ignored and the cached context's properties are always set. If CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG is set, any property set is not persisted."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "A pointer to a data type that is determined by the value passed in dwPropId.     Note  For any dwPropId, setting pvData to NULL deletes the property."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The FreeCryptProvFromCert function releases the handle to a cryptographic service provider (CSP) and optionally deletes the temporary container created by the GetCryptProvFromCert function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "FreeCryptProvFromCert",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fAcquired",
        "description": "A value that specifies whether the provider handle was acquired from the certificate."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A pointer to an HCRYPTPROV structure for the CSP."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pwszCapiProvider",
        "description": "A pointer to a null-terminated string for the provider name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProviderType",
        "description": "Specifies the CSP type. This can be zero or one of the Cryptographic Provider Types. If this member is zero, the key container is one of the CNG key storage providers."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pwszTmpContainer",
        "description": "A pointer to a null-terminated string for the name of the temporary key container."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The GetCryptProvFromCert function gets a handle to a cryptographic service provider (CSP)  and a key specification for a certificate context. Use this function to get access to the private key of the certificate issuer.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Upon success, this function returns TRUE. The GetCryptProvFromCert function returns FALSE if it fails. ",
    "remarks": "The MakeCert tool calls GetCryptProvFromCert when you invoke it by using the -is command line option. If the  pfDidCryptAcquire parameter is set to TRUE, the function sets phCryptProv, pdwKeySpec, and pdwProviderType parameters to the provider values. When you have finished using the CSP, free it by calling the  FreeCryptProvFromCert function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "GetCryptProvFromCert",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "The handle of the window to use as the owner of any dialog boxes that are displayed. This member is not currently used and is ignored. It is safe to pass NULL for this parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCert",
        "description": "A pointer to a CERT_CONTEXT structure for the certificate."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTPROV*",
        "name": "phCryptProv",
        "description": "A pointer to an HCRYPTPROV structure that is a handle to the CSP."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwKeySpec",
        "description": "The specification of the private key to retrieve. Possible values include AT_KEYEXCHANGE or AT_SIGNATURE."
      },
      {
        "in_out": "_In_",
        "type": "BOOL*",
        "name": "pfDidCryptAcquire",
        "description": "A value that specifies whether the function acquired the provider handle based on the certificate."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "ppwszTmpContainer",
        "description": "The address of a pointer to a null-terminated string for the temporary key container name. The GetCryptProvFromCert function provides and initializes the temporary container. When calling GetCryptProvFromCert, the address should point to a NULL value."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "ppwszProviderName",
        "description": "The address of a pointer to a null-terminated string for the provider name. The GetCryptProvFromCert function returns the provider name. When calling GetCryptProvFromCert, the address should point to a NULL value."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwProviderType",
        "description": "Specifies the CSP type. This can be zero or one of the Cryptographic Provider Types. If this member is zero, the key container is one of the CNG key storage providers."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PvkFreeCryptProv function releases the handle to a cryptographic service provider (CSP) and optionally deletes the temporary container created by the PvkGetCryptProv function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "PvkFreeCryptProv",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A handle to the CSP."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCapiProvider",
        "description": "A pointer to a null-terminated string for the CSP name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProviderType",
        "description": "A DWORD value that represents the cryptographic provider type. For more information, see Cryptographic Provider Types."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "pwszTmpContainer",
        "description": "A pointer to a null-terminated string for the temporary key container name."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The PvkGetCryptProv function gets a handle to a cryptographic service provider (CSP) based on either a private key file or a key container name.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the method succeeds, it returns S_OK. If the method fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "The PvkGetCryptProv function first tries to get the provider handle from the key container name specified by the pwszKeyContainerName parameter. If you pass NULL for the pwszKeyContainerName parameter, PvkGetCryptProv tries to get the provider from the private key file specified in the pwszPvkFile parameter. When you have finished using the CSP, free the provider handle and temporary key container by calling the PvkFreeCryptProv function. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "PvkGetCryptProv",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "If a password is required to decrypt the private key file, this parameter is a handle to the parent of the password dialog box; otherwise, it is NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCaption",
        "description": "A pointer to a null-terminated string for the dialog box caption."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCapiProvider",
        "description": "A pointer to a null-terminated string for the CSP name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProviderType",
        "description": "A DWORD value that represents the cryptographic provider type. For more information, see Cryptographic Provider Types."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszPvkFile",
        "description": "A pointer to a null-terminated string that contains the name of a private key file."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszKeyContainerName",
        "description": "A pointer to a null-terminated string for the private key container name."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwKeySpec",
        "description": "A pointer to a DWORD value for the type of key of the container returned with phCryptProv and ppwszTmpContainer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "ppwszTmpContainer",
        "description": "The address of a pointer to a null-terminated string for the temporary key container name. The PvkGetCryptProv function provides and initializes the temporary container. When calling PvkGetCryptProv, the address should point to a NULL value."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTPROV*",
        "name": "phCryptProv",
        "description": "A pointer to a handle for the CSP."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The PvkPrivateKeyAcquireContextFromMemory function creates a temporary container in the cryptographic service provider (CSP) and loads a private key from memory into the container.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Upon success, this function returns TRUE. The PvkPrivateKeyAcquireContextFromMemory function returns FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PvkPrivateKeyAcquireContextFromMemory",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszProvName",
        "description": "A pointer to a null-terminated string that contains the name of the CSP whose type is requested in dwProvType."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvType",
        "description": "A DWORD value for the CSP type. For more information about CSP types, see Cryptographic Provider Types."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "A pointer to a buffer to receive the context data. The caller must provide this resource."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "A DWORD value that specifies the size, in bytes, of the pbData buffer. The caller must provide this value."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "If a password is required to decrypt the context data pointed to by the pbData parameter, this parameter is a handle to the parent of the dialog box; otherwise, it is NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszKeyName",
        "description": "A pointer to a null-terminated string that contains the name of the key to retrieve."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pdwKeySpec",
        "description": "A pointer to a DWORD value that specifies the type of key. Possible values include AT_KEYEXCHANGE or AT_SIGNATURE."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTPROV*",
        "name": "phCryptProv",
        "description": "A pointer to a handle for the CSP."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR*",
        "name": "ppwszTmpContainer",
        "description": "The address of a pointer to a null-terminated string for the temporary container name. The PvkPrivateKeyAcquireContextFromMemory function provides the buffer for this string and initializes it. When calling PvkPrivateKeyAcquireContextFromMemory, the address should point to a NULL value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The PvkPrivateKeySave function saves a private key and its corresponding public key to a specified file.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Upon success, this function returns TRUE. The PvkPrivateKeySave function returns FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PvkPrivateKeySave",
    "is_callback": 0,
    "dll": "Mssign32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "A handle to a cryptographic service provider (CSP)."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hFile",
        "description": "A handle to a file created with initial read/write permission and subsequent read-only permission."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "A long integer for the type of key. Possible values include AT_KEYEXCHANGE or AT_SIGNATURE."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "If a password is required to encrypt the private key, this parameter is a handle to the parent of the dialog box; otherwise, it is NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszKeyName",
        "description": "A pointer to a null-terminated string for the name of the key to be saved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that specifies additional options for the function. For more information, see the dwFlags parameter in CryptExportKey."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CertVerifyCTLUsage function verifies that a subject is trusted for a specified usage by finding a signed and time-valid certificate trust list (CTL) with the usage identifiers that contain the subject. A certificate's subject can be identified by either its certificate context or any unique identifier such as the SHA1 hash of the subject's certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the subject is trusted for the specified usage, TRUE is returned. Otherwise, FALSE is returned. GetLastError can return one of the following error codes.  The dwError member of the CTL_VERIFY_USAGE_PARA pointed to by pVerifyUsageStatus is set to the same error code. ",
    "remarks": "CertVerifyCTLUsage is a dispatcher to functions that can be installed by using an object identifier (OID). First, it tries to find an OID function that matches the first usage object identifier in the CLT_USAGE structure pointed to by pSubjectUsage. If this fails, it uses the default CertDllVerifyCTLUsage functions. The CertDllVerifyCTLUsage function in Cryptnet.dll can be installed by using an OID; it has the following properties: ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifyCTLUsage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types can be added in the future. For either current encoding type, use     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubjectType",
        "description": "If the dwSubjectType parameter is set to CTL_CERT_SUBJECT_TYPE, pvSubject points to a  CERT_CONTEXT structure. The structure's SubjectAlgorithm member is examined to determine the representation of the subject's identity. Initially, only SHA1 and MD5 hashes are supported as values for SubjectAlgorithm. The appropriate hash property is obtained from the CERT_CONTEXT structure. If the dwSubjectType parameter is set to CTL_ANY_SUBJECT_TYPE, pvSubject points to the  CTL_ANY_SUBJECT_INFO structure. The SubjectAlgorithm member of this structure must match the algorithm type of the CTL, and the SubjectIdentifier member must match one of the CTL entries. If dwSubjectType is set to either preceding value, dwEncodingType is not used."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvSubject",
        "description": "Value used in conjunction with the dwSubjectType parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCTL_USAGE",
        "name": "pSubjectUsage",
        "description": "A pointer to a  CTL_USAGE structure used to specify the intended usage of the subject."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If the CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG is not set, a CTL whose time is no longer valid in one of the stores specified by rghCtlStore in  CTL_VERIFY_USAGE_PARA can be replaced. When replaced, the CERT_VERIFY_UPDATED_CTL_FLAG is set in the  dwFlags member of pVerifyUsageStatus. If this flag is set, an update will not be made, even if a time-valid, updated CTL is received for a CTL that is in the store and whose time is no longer valid. If the CERT_VERIFY_TRUSTED_SIGNERS_FLAG is set, only the signer stores specified by rghSignerStore in  CTL_VERIFY_USAGE_PARA are searched to find the signer. Otherwise, the signer stores provide additional sources to find the signer's certificate. For more information, see Remarks. If CERT_VERIFY_NO_TIME_CHECK_FLAG is set, the CTLs are not checked for time validity. Otherwise, they are. If CERT_VERIFY_ALLOW_MORE_USAGE_FLAG is set, the CTL can contain usage identifiers in addition to those specified by pSubjectUsage. Otherwise, the found CTL will contain no additional usage identifiers."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCTL_VERIFY_USAGE_PARA",
        "name": "pVerifyUsagePara",
        "description": "A pointer to a  CTL_VERIFY_USAGE_PARA structure that specifies the stores to be searched to find the CTL and the stores that contain acceptable CTL signers. Setting the ListIdentifier member further limits the search."
      },
      {
        "in_out": "_Inout_",
        "type": "PCTL_VERIFY_USAGE_STATUS",
        "name": "pVerifyUsageStatus",
        "description": "A pointer to a  CTL_VERIFY_USAGE_STATUS structure. The cbSize member of the structure must to be set to the size, in bytes, of the structure, and all other fields must be set to zero before CertVerifyCTLUsage is called. For more information, see  CTL_VERIFY_USAGE_STATUS."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptMsgEncodeAndSignCTL function encodes a CTL and creates a signed message containing the encoded CTL.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). To get extended error information, call  GetLastError. Errors can be propagated from calls to  CryptMsgOpenToEncode and  CryptMsgUpdate. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgEncodeAndSignCTL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCTL_INFO",
        "name": "pCtlInfo",
        "description": "A pointer to the  CTL_INFO structure containing the CTL to be encoded and signed."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_SIGNED_ENCODE_INFO",
        "name": "pSignInfo",
        "description": "A pointer to a  CMSG_SIGNED_ENCODE_INFO structure that contains an array of a  CMSG_SIGNER_ENCODE_INFO structures. The message can be encoded without signers if the cbSize member of the structure is set to the size of the structure and all of the other members are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CMSG_ENCODE_SORTED_CTL_FLAG is set if the CTL entries are to be sorted before encoding. This flag is set if the  CertFindSubjectInSortedCTL or CertEnumSubjectInSortedCTL functions will be called. CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG is set if CMSG_ENCODE_SORTED_CTL_FLAG is set, and the identifier for the TrustedSubjects is a hash, such as MD5 or SHA1. If CMS_PKCS7 is defined, dwFlags can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to a buffer that receives the encoded, signed message created. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the pbEncoded buffer. When the function returns, the DWORD contains the number of bytes stored or to be stored in the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptMsgGetAndVerifySigner function verifies a cryptographic message's signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgGetAndVerifySigner",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Handle of a cryptographic message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cSignerStore",
        "description": "Number of stores in the rghSignerStore array."
      },
      {
        "in_out": "_In_opt_",
        "type": "HCERTSTORE*",
        "name": "rghSignerStore",
        "description": "Array of certificate store handles that can be searched for a signer's certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Indicates particular use of the function.      \t\t\t\t\t  ValueMeaning  CMSG_TRUSTED_SIGNER_FLAG   The stores in rghSignerStore are assumed trusted and they are the only stores searched to find the certificate corresponding to the signer's issuer and serial number. Otherwise, signer stores can be provided to supplement the message's store of certificates. If a signer certificate is found, its public key is used to verify the message signature.   CMSG_SIGNER_ONLY_FLAG   Return the signer without doing the signature verification.   CMSG_USE_SIGNER_INDEX_FLAG   Only the signer specified by *pdwSignerIndex is returned. Otherwise, iterate through all the signers until a signature is verified or there are no more signers."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppSigner",
        "description": "If the signature is verified, ppSigner is updated to point to the signer's certificate context. When you have finished using the certificate, free the context by calling the CertFreeCertificateContext function. This parameter can be NULL if the application has no need for the signer's certificate."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pdwSignerIndex",
        "description": "If the signature is verified, pdwSigner is updated to point to the index of the signer in the array of signers. This parameter can be NULL if the application has no need for the index of the signer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptMsgSignCTL function creates a signed message containing an encoded CTL.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. This function can return errors propagated from calls to  CryptMsgOpenToEncode and  CryptMsgUpdate. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgSignCTL",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbCtlContent",
        "description": "The encoded  CTL_INFO that can be a member of a  CTL_CONTEXT structure or can be created using the  CryptEncodeObject function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbCtlContent",
        "description": "The size, in bytes, of the content pointed to by pbCtlContent."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_SIGNED_ENCODE_INFO",
        "name": "pSignInfo",
        "description": "A pointer to a  CMSG_SIGNED_ENCODE_INFO structure containing an array of a  CMSG_SIGNER_ENCODE_INFO structures. The message can be encoded without signers if the cbSize member of the structure is set to the size of the structure and all of the other members are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If CMS_PKCS7 is defined, can be set to CMSG_CMS_ENCAPSULATED_CTL_FLAG to encode a CMS compatible V3 SignedData message."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to a buffer to receives the encoded message. This parameter can be NULL to get the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD specifying the size, in bytes, of the pbEncoded buffer. When the function returns, the DWORD contains the number of bytes stored or to be stored in the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertCreateCertificateChainEngine function creates a new, nondefault chain engine for an application. A chain engine restricts the certificates in the root store that can be used for verification, restricts the certificate stores to be searched for certificates and certificate trust lists (CTLs), sets a time-out limit for searches that involve URLs, and limits the number of certificates checked between checking for a certificate cycle.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The phChainEngine parameter returns the chain engine handle. For an example that uses this function, see  Example C Program: Creating a Certificate Chain. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCreateCertificateChainEngine",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCERT_CHAIN_ENGINE_CONFIG",
        "name": "pConfig",
        "description": "A pointer to a  CERT_CHAIN_ENGINE_CONFIG data structure that specifies the parameters for the chain engine."
      },
      {
        "in_out": "_Out_",
        "type": "HCERTCHAINENGINE*",
        "name": "phChainEngine",
        "description": "A pointer to the handle of the chain engine created. When you have finished using the chain engine, release the chain engine by calling the CertFreeCertificateChainEngine function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CertCreateCTLEntryFromCertificateContextProperties function creates a certificate trust list (CTL) entry whose attributes are the  properties of the certificate context. The SubjectIdentifier in the CTL entry is the SHA1 hash of the certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns  zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCreateCTLEntryFromCertificateContextProperties",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the CERT_CONTEXT used to create the CTL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cOptAttr",
        "description": "A DWORD that specifies the number of additional attributes to be added."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ATTRIBUTE",
        "name": "rgOptAttr",
        "description": "A pointer to any array of CRYPT_ATTRIBUTE attributes to be added to the CTL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD. Can be set to CTL_ENTRY_FROM_PROP_CHAIN_FLAG to force the inclusion of the chain building hash properties as attributes."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "A pointer to a VOID. Reserved for future use."
      },
      {
        "in_out": "_Out_",
        "type": "PCTL_ENTRY",
        "name": "pCtlEntry",
        "description": "Address of a pointer to a CTL_ENTRY structure. Call this function twice to retrieve a CTL entry. Set this parameter to NULL on the first call. When the function returns, use the number of bytes retrieved from the pcbCtlEntry parameter to allocate memory. Call the function again, setting this parameter to the address of the allocated memory."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbCtlEntry",
        "description": "Pointer to a DWORD that contains the number of bytes that must be allocated for the CTL_ENTRY structure.  Call this function twice to retrieve the number of bytes. For the first call, set this parameter to the address of a DWORD value that contains zero and set the pCtlEntry parameter to NULL. If the first call succeeds, the DWORD value will contain the number of bytes that you must allocate for the CTL_ENTRY structure. Allocate the required memory and call the function again, supplying the address of the memory in the pCtlEntry parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CertDuplicateCertificateChain function duplicates a pointer to a certificate chain by incrementing the chain's reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, a pointer is returned to the chain context. This pointer has the same value as the pChainContext passed into the function. When you have finished using the chain context, release the chain context by calling the CertFreeCertificateChain function. If the function fails, NULL is returned. For an example that uses this function, see Example C Program: Creating a Certificate Chain. ",
    "remarks": "",
    "return_type": "PCCERT_CHAIN_CONTEXT",
    "category": "Cryptography",
    "name": "CertDuplicateCertificateChain",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT",
        "name": "pChainContext",
        "description": "A pointer to a  CERT_CHAIN_CONTEXT chain context to be duplicated."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CertFindChainInStore function finds the first or next certificate in a store that meets the specified criteria. It then builds and verifies a certificate chain context for that certificate. The certificate that is found and for which the chain is built is selected according to criteria established by the dwFindFlags, dwFindType, and pvFindPara parameters. This function can be used in a loop to find all of the certificates in a certificate store that match the specified find criteria and to build a certificate chain context for each certificate found.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the first or next chain context is not built, NULL is returned. Otherwise, a pointer to a read-only CERT_CHAIN_CONTEXT structure is returned. The CERT_CHAIN_CONTEXT structure is freed when passed as the pPrevChainContext parameter on a subsequent call to this function. Otherwise, the CERT_CHAIN_CONTEXT structure must be freed explicitly by calling  the CertFreeCertificateChain function. ",
    "remarks": "The pPrevChainContext parameter must be NULL on the first call to build the chain context. To build the next chain context, the pPrevChainContext is set to the CERT_CHAIN_CONTEXT structure returned by a previous call. If pPrevChainContext is not NULL, the structure is always freed by this function by using the CertFreeCertificateChain function, even if an error occurs. ",
    "return_type": "PCCERT_CHAIN_CONTEXT",
    "category": "Cryptography",
    "name": "CertFindChainInStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "The handle of the store to be searched for a certificate upon which a chain is built. This handle is passed as an additional store to  the CertGetCertificateChain function as the chain is built."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type   that was used to encode the store. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindFlags",
        "description": "Contains additional options for the search. The possible values for this parameter depend on the value of the dwFindType parameter.  This parameter can contain zero or a combination of one or more of the following values when dwFindType contains CERT_CHAIN_FIND_BY_ISSUER.  ValueMeaning  CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG   Compares the public key in the certificate with the cryptographic service provider's public key. This comparison is the last check made on the chain when it is built. Because the hCryptProv member of an issuer contains a private key, it might need to be checked several times during this process; to facilitate this checking, the dwAcquirePrivateKeyFlags member can be set in the CERT_CHAIN_FIND_BY_ISSUER_PARA structure to enable caching of that hCryptProv.   CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG   By default, only the first simple chain is checked for issuer name matches. With this flag set, the default is overridden and subsequent simple chains are also checked for issuer name matches.   CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG   Improves the performance of this function by causing it to search only the cached system stores (Root, My, Ca, Trust) to find issuer certificates. If this flag is not set, the function searches the cached system stores and the store represented by the hCertStore parameter.   CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG   Only the URL cache is searched. The Internet is not searched.   CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG   Only opens the Local Machine certificate stores. The certificate stores of the current user are not opened.   CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG   No check is made to determine whether the certificate has an associated private key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFindType",
        "description": "Determines what criteria to use to find a certificate in the store.  This parameter can be the following currently defined value.  CERT_CHAIN_FIND_BY_ISSUER   Finds the certificate based on the name of the issuer. The pvFindPara parameter is a pointer to a  CERT_CHAIN_FIND_BY_ISSUER_PARA structure that contains members that modify the search. The certificate chain is built for a certificate with an available private key. By default, only the issuers in the first simple chain are compared in an issuer name match. If this flag is set, all of the chains are checked for an issuer certificate that matches one of a set of issuer names. This function will compare the name BLOBs passed in the pvFindPara structure to any certification authority (CA) in the chain, not just the certification authority in the root certificate. This function does not perform any revocation checks. If pPrevChainContext is not NULL, this function will return a chain for a different certificate every time the function is called. If there is only one suitable certificate, but there are two matching issuing certificate authorities, one of which is revoked, it is possible for this function to return the revoked chain. If the application then checks for revocation itself through calls to the CertVerifyRevocation function and finds the chain unsuitable, an additional call to the CertFindChainInStore function will not return a chain that includes the same certificate from the valid certification authority. It will instead return a completely different chain with a different certificate or NULL, if no such chain can be found."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvFindPara",
        "description": "A pointer that contains additional search criteria. The type and format of the data this parameter points to depends on the value of the dwFindType parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT",
        "name": "pPrevChainContext",
        "description": "A pointer to a  CERT_CHAIN_CONTEXT structure returned from a previous call to this function. The search is begun from this certificate. For the first call to this function, this parameter must be NULL. In subsequent calls, it is the pointer returned by the previous call to the function.  If this parameter is not NULL, this function will free this structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCertificateChain function frees a certificate chain by reducing its reference count. If the reference count becomes zero, memory allocated for the chain is released.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. For an example that uses this function, see Example C Program: Creating a Certificate Chain. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Cryptography",
    "name": "CertFreeCertificateChain",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT",
        "name": "pChainContext",
        "description": "A pointer to a  CERT_CHAIN_CONTEXT certificate chain context to be freed. If the reference count on the context reaches zero, the storage allocated for the context is freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCertificateChainEngine function frees a certificate trust engine.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. See  Example C Program: Creating a Certificate Chain. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "CertFreeCertificateChainEngine",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTCHAINENGINE",
        "name": "hChainEngine",
        "description": "Handle of the chain engine to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CertFreeCertificateChainList function frees the array of pointers to chain contexts.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. ",
    "remarks": "Before calling the CertFreeCertificateChainList function, you must call the  CertFreeCertificateChain function on each chain context within the array pointed to by the prgpSelection parameter. ",
    "return_type": "VOID",
    "category": "Cryptography",
    "name": "CertFreeCertificateChainList",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT*",
        "name": "prgpSelection",
        "description": "A pointer to a PCCERT_CHAIN_CONTEXT structure returned by the CertSelectCertificateChains function."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The CertGetCertificateChain function builds a certificate chain context starting from an end certificate and going back, if possible, to a trusted root certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns  zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "When an application requests a certificate chain, the structure returned is in the form of a  CERT_CHAIN_CONTEXT. This context contains an array of  CERT_SIMPLE_CHAIN structures where each simple chain goes from an end certificate to a self-signed certificate. The chain context connects simple chains through trust lists. Each simple chain contains the chain of certificates, summary trust information about the chain, and trust information about each certificate element in the chain. The following remarks apply to strong signature checking: For an example that uses this function, see  Example C Program: Creating a Certificate Chain. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetCertificateChain",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HCERTCHAINENGINE",
        "name": "hChainEngine",
        "description": "A handle of the chain engine (namespace and cache) to be used. If hChainEngine is NULL, the default chain engine, HCCE_CURRENT_USER, is used. This parameter can be set to HCCE_LOCAL_MACHINE."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT of the end certificate, the certificate for which a chain is being built. This certificate context will be the zero-index element in the first simple chain."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPFILETIME",
        "name": "pTime",
        "description": "A pointer to a FILETIME variable that indicates the time for which the chain is to be validated. Note that the time does not affect trust list, revocation, or root store checking. The current system time is used if NULL is passed to this parameter. Trust in a particular certificate being a trusted root is based on the current state of the root store and not the state of the root store at a time passed in by this parameter. For revocation, a certificate revocation list (CRL), itself, must be valid at the current time. The value of this parameter is used to determine whether a certificate listed in a CRL has been revoked."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hAdditionalStore",
        "description": "A handle to any additional store to search for supporting certificates and certificate trust lists (CTLs). This parameter can be NULL if no additional store is to be searched."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_CHAIN_PARA",
        "name": "pChainPara",
        "description": "A pointer to a  CERT_CHAIN_PARA structure that includes chain-building parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag values that indicate special processing. This parameter can be a combination of one or more of the  following flags.  ValueMeaning  CERT_CHAIN_CACHE_END_CERT 0x00000001   When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end certificate is not cached, and it would need to be verified each time a chain is built for it.   CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY 0x80000000   Revocation checking only accesses cached URLs.   CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT 0x04000000   This flag is used internally during chain building for an online certificate status protocol (OCSP) signer certificate to prevent cyclic revocation checks. During chain building, if the OCSP response is signed by an independent OCSP signer, then, in addition to the original chain build, there is a second chain built for the OCSP signer certificate itself. This flag is used during this second chain build to inhibit a recursive independent OCSP signer certificate. If the signer certificate contains the szOID_PKIX_OCSP_NOCHECK extension, revocation checking is skipped for the leaf signer certificate. Both OCSP and CRL checking are allowed. Windows Server 2003 and Windows XP:  This value is not supported.   CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL 0x00000004   Uses only cached URLs in building a certificate chain. The Internet and intranet are not searched for URL-based objects.  Note  This flag is not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for revocation checking.   CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING 0x00000040   For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain, and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain paths during the second pass.   CERT_CHAIN_DISABLE_MY_PEER_TRUST 0x00000800   This flag is not supported. Certificates in the \"My\" store are never considered for peer trust.   CERT_CHAIN_ENABLE_PEER_TRUST 0x00000400   End entity certificates in the \"TrustedPeople\" store are trusted without performing any chain building. This function does not set the CERT_TRUST_IS_PARTIAL_CHAIN or CERT_TRUST_IS_UNTRUSTED_ROOT dwErrorStatus member bits of the  ppChainContext parameter. Windows Server 2003 and Windows XP:  This flag is not supported.   CERT_CHAIN_OPT_IN_WEAK_SIGNATURE 0x00010000   Setting this flag indicates the caller wishes to opt into weak signature checks. This flag is available in the rollup update for each OS starting with Windows 7 and Windows Server 2008 R2.   CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS 0x00000080   The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are returned in the cLowerQualityChainContext and rgpLowerQualityChainContext fields of the chain context.   CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE 0x00000100   Setting this flag inhibits the auto update of third-party roots from the Windows Update Web Server.   CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT 0x08000000   When you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT and you also specify a value for the dwUrlRetrievalTimeout member of the CERT_CHAIN_PARA structure, the value you specify in dwUrlRetrievalTimeout represents the cumulative timeout across all revocation URL retrievals. If you set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT but do not specify a dwUrlRetrievalTimeout value, the maximum cumulative timeout is set, by default, to 20 seconds. Each URL tested will timeout after half of the remaining cumulative balance has passed. That is, the first URL times out after 10 seconds, the second after 5 seconds, the third after 2.5 seconds and so on until a URL succeeds, 20 seconds has passed, or there are no more URLs to test. If you do not set CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT, each revocation URL in the chain is assigned a maximum timeout equal to the value specified in dwUrlRetrievalTimeout. If you do not specify a value for the dwUrlRetrievalTimeout member, each revocation URL is assigned a maximum default timeout of 15 seconds.  If no URL succeeds, the maximum cumulative timeout value is 15 seconds multiplied by the number of URLs in the chain. You can set the default values by using Group Policy.   CERT_CHAIN_TIMESTAMP_TIME 0x00000200   When this flag is set, pTime is used as the time stamp time to determine whether the end certificate was time valid. Current time can also be used to determine whether the end certificate remains time valid. All other certification authority (CA) and root certificates in the chain are checked by using current time and not pTime.     You can also set the following revocation flags, but only one flag from this group may be set at a time.  ValueMeaning  CERT_CHAIN_REVOCATION_CHECK_END_CERT 0x10000000   Revocation checking is done on the end certificate and only the end certificate.   CERT_CHAIN_REVOCATION_CHECK_CHAIN 0x20000000   Revocation checking is done on all of the certificates in every chain.   CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT 0x40000000   Revocation checking is done on all certificates in all of the chains except the root certificate."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PCCERT_CHAIN_CONTEXT*",
        "name": "ppChainContext",
        "description": "The address of a pointer to the chain context created. When you have finished using the chain context, release the chain by calling the CertFreeCertificateChain function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertIsValidCRLForCertificate function checks a CRL to find out if it is a CRL that would include a specific certificate if that certificate were revoked. If the CRL has an issuing distribution point (IDP) extension, the function checks whether that IDP is valid for the certificate being checked.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function returns TRUE if the CRL is a valid CRL to be searched for the specific certificate. It returns FALSE if the CRL is not a valid CRL for searching for the certificate. ",
    "remarks": "For the CRL to be valid for the certificate, the CertIsValidCRLForCertificate function does not require the CRL to be issued by the same certification authority (CA) as the issuer of the certificate. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertIsValidCRLForCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCert",
        "description": "A pointer to a certificate context."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCRL",
        "description": "A pointer to a CRL. The function checks this CRL to determine whether it could contain the certificate context pointed to by pCert. The function does not look for the certificate in the CRL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently not used and must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Currently not used and must be set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertSetCertificateContextPropertiesFromCTLEntry function sets the properties on the certificate context by using the attributes in the specified certificate trust list (CTL) entry.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero.  For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetCertificateContextPropertiesFromCTLEntry",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the CERT_CONTEXT whose attributes are to be set."
      },
      {
        "in_out": "_In_",
        "type": "PCTL_ENTRY",
        "name": "pCtlEntry",
        "description": "A pointer to the CTL_ENTRY structure used to set the attributes on the certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD. This parameter can be set to CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG to ignore any persisted error flags."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertVerifyCertificateChainPolicy function checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The return value indicates whether the function was able to check for the policy, it does not indicate whether the policy check failed or passed. If the chain can be verified for the specified policy, TRUE is returned and the dwError member of the pPolicyStatus is updated. A dwError of 0 (ERROR_SUCCESS or S_OK) indicates the chain satisfies the specified policy. If the chain cannot be validated, the return value is  TRUE and you need to verify the pPolicyStatus parameter for the actual error. A value of FALSE  indicates that the function wasn't able to check for the policy. ",
    "remarks": "A dwError member of the  CERT_CHAIN_POLICY_STATUS structure pointed to by pPolicyStatus can apply to a single chain element, to a simple chain, or to an entire chain context. If dwError applies to the entire chain context, both the lChainIndex and the lElementIndex members of the CERT_CHAIN_POLICY_STATUS structure are set to \u00e2\u0080\u00931. If dwError applies to a complete simple chain, lElementIndex is set to \u00e2\u0080\u00931 and lChainIndex is set to the index of the first chain that has an error. If dwError applies to a single certificate element, lChainIndex and lElementIndex index the first certificate that has the error. To get the certificate element use this syntax: pChainContext->rgpChain[lChainIndex]->rgpElement[lElementIndex]; Use the CertGetCertificateChain function to enable and perform certificate revocation checking.  The CertVerifyCertificateChainPolicy function does not check if certificates in the certificate chain are revoked. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifyCertificateChainPolicy",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszPolicyOID",
        "description": "Current predefined verify chain policy structures are listed in the following table. ..."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CHAIN_CONTEXT",
        "name": "pChainContext",
        "description": "A pointer to a  CERT_CHAIN_CONTEXT structure that contains a chain to be verified."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_CHAIN_POLICY_PARA",
        "name": "pPolicyPara",
        "description": "A pointer to a  CERT_CHAIN_POLICY_PARA structure that provides the policy verification criteria for the chain. The dwFlags member of that structure can be set to change the default policy checking behavior.     In addition, policy-specific parameters can also be passed in the pvExtraPolicyPara member of the structure."
      },
      {
        "in_out": "_Inout_",
        "type": "PCERT_CHAIN_POLICY_STATUS",
        "name": "pPolicyStatus",
        "description": "A pointer to a  CERT_CHAIN_POLICY_STATUS structure where status information on the chain is returned. OID-specific extra status can be returned in the pvExtraPolicyStatus member of this structure."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptMsgCalculateEncodedLength function calculates the maximum number of bytes needed for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be encoded. Note that the result will always be greater than or equal to the actual number of bytes needed.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the required length for an encoded cryptographic message. This length might not be the exact length but it will not be less than the required length. Zero is returned if the function fails. To retrieve extended error information, use the GetLastError function. The following table lists the error codes most commonly returned.  For an examples that uses this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  Example C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CryptMsgCalculateEncodedLength",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently defined flags are shown in the following table.  ValueMeaning  CMSG_BARE_CONTENT_FLAG   Indicates that streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed into an enclosing message.   CMSG_DETACHED_FLAG   Indicates that there is detached data being supplied for the subsequent calls to  CryptMsgUpdate.   CMSG_CONTENTS_OCTETS_FLAG   Used to calculate the size of a DER encoding of a message to be nested inside an enveloped message. This is particularly useful when streaming is being performed.   CMSG_CMS_ENCAPSULATED_CONTENT_FLAG   Non-Data type inner content is encapsulated within an OCTET STRING. This flag is applicable for both Signed and Enveloped messages."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgType",
        "description": "Currently defined message types are shown in the following table.  ValueMeaning  CMSG_DATA   An octet (BYTE) string.   CMSG_SIGNED    CMSG_SIGNED_ENCODE_INFO    CMSG_ENVELOPED    CMSG_ENVELOPED_ENCODE_INFO    CMSG_SIGNED_AND_ENVELOPED   Not implemented.   CMSG_HASHED    CMSG_HASHED_ENCODE_INFO    CMSG_ENCRYPTED   Not implemented."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvMsgEncodeInfo",
        "description": "A pointer to the data to be encoded. The type of data pointed to depends on the value of dwMsgType. For details, see the dwMsgType table."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSTR",
        "name": "pszInnerContentObjID",
        "description": "When calling CryptMsgCalculateEncodedLength with data provided to  CryptMsgUpdate already encoded, the appropriate object identifier is passed in pszInnerContentObjID. If pszInnerContentObjID is NULL, the inner content type is assumed not to have been previously encoded, and is encoded as an octet string and given the type CMSG_DATA.     When streaming is being used, pszInnerContentObjID must be either NULL or szOID_RSA_data. The following algorithm object identifiers are commonly used:  szOID_RSA_data szOID_RSA_signedData szOID_RSA_envelopedData szOID_RSA_signEnvData szOID_RSA_digestedData szOID_RSA_encryptedData SPC_INDIRECT_DATA_OBJID  A user can define new inner content usage. The user must ensure that the sender and receiver of the message agree upon the semantics associated with the object identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "The size, in bytes, of the content."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptMsgClose function closes a cryptographic message handle. At each call to this function, the reference count on the message is reduced by one. When the reference count reaches zero, the message is fully released.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. For  examples that use this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  Example C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgClose",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Handle of the cryptographic message to be closed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptMsgControl function performs a control operation after a message has been decoded by a final  call to the CryptMsgUpdate  function. The control operations provided by this function are used for decryption, signature and hash verification, and the addition and deletion of certificates, certificate revocation lists (CRLs), signers, and unauthenticated attributes.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero and the GetLastError function   returns an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. When a streamed, enveloped message is being decoded, errors encountered in the application-defined callback function specified by the pStreamInfo  parameter of the   CryptMsgOpenToDecode function might be propagated to the CryptMsgControl function. If this happens, the SetLastError function is not called by the CryptMsgControl function after the callback function returns. This preserves any errors encountered under the control of the application. It is the responsibility of the callback function (or one of the APIs that it calls) to call the SetLastError function if an error occurs while the application is processing the streamed data. Propagated errors might be encountered from the following functions: The following  error codes are most commonly returned.  The following examples use  \t\t\tthe CryptMsgControl function: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgControl",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "A handle of a cryptographic message for which a control is to be applied."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following value is defined when the dwCtrlType parameter is one of the following:  CMSG_CTRL_DECRYPT CMSG_CTRL_KEY_TRANS_DECRYPT CMSG_CTRL_KEY_AGREE_DECRYPT CMSG_CTRL_MAIL_LIST_DECRYPT   ValueMeaning  CMSG_CRYPT_RELEASE_CONTEXT_FLAG    The handle to the cryptographic provider is released on the final call to the  CryptMsgClose function. This handle is not released if the  CryptMsgControl function  fails.     If the dwCtrlType parameter does not specify a decrypt operation, set this value to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCtrlType",
        "description": "The type of operation to be performed. Currently defined message control types and the type of structure that should be passed to the pvCtrlPara parameter are shown in the following table.  ValueMeaning  CMSG_CTRL_ADD_ATTR_CERT 14 (0xE)   A BLOB  that contains the encoded bytes of attribute certificate.   CMSG_CTRL_ADD_CERT 10 (0xA)   A \t\t\t\t\t\t\t\tCRYPT_INTEGER_BLOB   structure that contains the encoded bytes of the certificate to be added to the message.   CMSG_CTRL_ADD_CMS_SIGNER_INFO 20 (0x14)   A CMSG_CMS_SIGNER_INFO structure that contains signer information. This operation differs from CMSG_CTRL_ADD_SIGNER because the signer information contains the signature.   CMSG_CTRL_ADD_CRL 12 (0xC)   A BLOB  that contains the encoded bytes of the CRL to be added to the message.   CMSG_CTRL_ADD_SIGNER 6 (0x6)    \t\t\t\t\t\t\t\tA CMSG_SIGNER_ENCODE_INFO   structure that contains the signer information to be added to the message.   CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR 8 (0x8)    \t\t\t\t\t\t\t\tA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA   structure that contains the index of the signer and a BLOB  that contains the unauthenticated attribute information to be added to the message.   CMSG_CTRL_DECRYPT 2 (0x2)   A  \t\t\t\t\t\t\t\tCMSG_CTRL_DECRYPT_PARA  structure used to decrypt the message for the specified key transport recipient. This value is applicable to RSA recipients.  This operation specifies that the CryptMsgControl function search the recipient index to obtain the key transport recipient information.  If the function fails, GetLastError will return  CRYPT_E_INVALID_INDEX if no key transport recipient is found.   CMSG_CTRL_DEL_ATTR_CERT 15 (0xF)   The index of the attribute certificate to be removed.   CMSG_CTRL_DEL_CERT 11 (0xB)   The index of the certificate to be deleted from the message.   CMSG_CTRL_DEL_CRL 13 (0xD)   The index of the CRL to be deleted from the message.   CMSG_CTRL_DEL_SIGNER 7 (0x7)   The index of the signer to be deleted.   CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR 9 (0x9)    \t\t\t\t\t\t\t\tA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA   structure that contains an index  that specifies the signer and the index  that specifies the signer's unauthenticated attribute to be deleted.   CMSG_CTRL_ENABLE_STRONG_SIGNATURE 21 (0x15)   A CERT_STRONG_SIGN_PARA structure used to perform strong signature checking. To check for a strong signature, specify this control type before calling CryptMsgGetAndVerifySigner or before calling CryptMsgControl with the following control types set:  CMSG_CTRL_VERIFY_SIGNATURE CMSG_CTRL_VERIFY_SIGNATURE_EX  After the signature is successfully verified, this function checks for a strong signature. If the signature is not strong, the operation will fail and the GetLastError value will be set to NTE_BAD_ALGID.   CMSG_CTRL_KEY_AGREE_DECRYPT 17 (0x11)    \t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\tA CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure used to decrypt the message for the specified key agreement session key. Key agreement is used with Diffie-Hellman encryption/decryption.   CMSG_CTRL_KEY_TRANS_DECRYPT 16 (0x10)    \t\t\t\t\t\t\t\tA CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure used to decrypt the message for the specified key transport recipient. Key transport is used with RSA encryption/decryption.   CMSG_CTRL_MAIL_LIST_DECRYPT 18 (0x12)    \t\t\t\t\t\t\t\tA  \t\t\t\t\t\t\t\tCMSG_CTRL_MAIL_LIST_DECRYPT_PARA structure used to decrypt the message for the specified recipient using a previously distributed key-encryption key (KEK).   CMSG_CTRL_VERIFY_HASH 5 (0x5)   This value is not used.   CMSG_CTRL_VERIFY_SIGNATURE 1 (0x1)   A  \t\t\t\t\t\t\t\tCERT_INFO  structure that identifies the signer of the message whose signature is to be verified.   CMSG_CTRL_VERIFY_SIGNATURE_EX 19 (0x13)    \t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\tA CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA   structure that specifies the signer index and public key to verify the message signature. The signer public key can be a  CERT_PUBLIC_KEY_INFO structure, a certificate context, or a certificate chain context."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvCtrlPara",
        "description": "A pointer to a structure determined by the value of dwCtrlType.  dwCtrlType valueMeaning  CMSG_CTRL_DECRYPT, CMSG_CTRL_KEY_TRANS_DECRYPT, CMSG_CTRL_KEY_AGREE_DECRYPT, or CMSG_CTRL_MAIL_LIST_DECRYPT, and the streamed enveloped message is being decoded   Decoding will be done as if the streamed content were being decrypted. If any encrypted streamed content has accumulated prior to this call, some or all of the plaintext  that results from the decryption of the cipher text is passed back to the application through the callback function specified in the call to  the CryptMsgOpenToDecode function. Note  When streaming an enveloped message, the CryptMsgControl  function is not called until the polling for the availability of the CMSG_ENVELOPE_ALGORITHM_PARAM succeeds. If the polling does not succeed, an error results. For a description of that polling, see  the CryptMsgOpenToDecode function.     CMSG_CTRL_VERIFY_HASH   The hash computed from the content of the message is compared against the hash contained in the message.   CMSG_CTRL_ADD_SIGNER   pvCtrlPara points to a  CMSG_SIGNER_ENCODE_INFO structure that contains the signer information to be added to the message.   CMSG_CTRL_DEL_SIGNER   After a deletion is made, any other signer indices in use for this message are no longer valid and must be reacquired by calling  the CryptMsgGetParam function.   CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR   After a deletion is made, any other unauthenticated attribute indices in use for this signer are no longer valid and must be reacquired by calling the CryptMsgGetParam function.   CMSG_CTRL_DEL_CERT   After a deletion is made, any other certificate indices in use for this message are no longer valid and must be reacquired by calling  the CryptMsgGetParam function.   CMSG_CTRL_DEL_CRL   After a deletion is made, any other CRL indices in use for this message are no longer valid and will need to be reacquired by calling the CryptMsgGetParam function."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptMsgUpdate function adds contents to a cryptographic message. The use of this function allows messages to be constructed piece by piece through repetitive calls of CryptMsgUpdate. The added message content is either encoded or decoded depending on whether the message was opened with  CryptMsgOpenToEncode or  CryptMsgOpenToDecode.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Errors encountered in the application defined callback function specified by pStreamInfo in  CryptMsgOpenToDecode and  CryptMsgOpenToEncode might be propagated to CryptMsgUpdate if streaming is used. If this happens, SetLastError is not called by CryptMsgUpdate after the callback function returns, which preserves any errors encountered under the control of the application. It is the responsibility of the callback function (or one of the APIs that it calls) to call SetLastError if an error occurs while the application is processing the streamed data. The following table lists the error codes most commonly returned by the GetLastError function.  Propagated errors might be encountered from any of the following functions: If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For examples that use this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  \t\t\t\t\tExample C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgUpdate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Cryptographic message handle of the message to be updated."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbData",
        "description": "A pointer to the buffer holding the data to be encoded or decoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "Number of bytes of data in the pbData buffer."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fFinal",
        "description": "Indicates that the last block of data for encoding or decoding is being processed. Correct usage of this flag is dependent upon whether the message being processed has detached data. The inclusion of detached data in a message is indicated by setting dwFlags to CMSG_DETACHED_FLAG in the call to the function that opened the message.     If CMSG_DETACHED_FLAG was not set and the message was opened using either  CryptMsgOpenToDecode or  CryptMsgOpenToEncode, fFinal is set to TRUE, and CryptMsgUpdate is only called once. If the CMSG_DETACHED_FLAG flag was set and a message is opened using CryptMsgOpenToEncode, fFinal is set to TRUE only on the last call to CryptMsgUpdate. If the CMSG_DETACHED_FLAG flag was set and a message is opened using CryptMsgOpenToDecode, fFinal is set to TRUE when the header is processed by a single call to CryptMsgUpdate. It is set to FALSE while processing the detached data in subsequent calls to CryptMsgUpdate until the last detached data block is to be processed. On the last call to CryptMsgUpdate, it is set to TRUE. When detached data is decoded, the header and the content of a message are contained in different BLOBs. Each BLOB requires that fFinal be set to TRUE when the last call to the function is made for that BLOB."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptMsgCountersign function countersigns an existing signature in a message. Countersignatures are used to sign an existing signature's encrypted hash of the message. Countersignatures can be used for various purposes including time stamping a message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. An error can be propagated from \t\t\t\t\t\t\t\tCryptMsgCountersignEncoded. The following error codes are returned most often.   If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Encoding and Decoding a Countersigned Message. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgCountersign",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Cryptographic message handle to be used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Zero-based index of the signer in the signed or signed-and-enveloped message to be countersigned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cCountersigners",
        "description": "Number of countersigners in the rgCountersigners array."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_SIGNER_ENCODE_INFO",
        "name": "rgCountersigners",
        "description": "Array of countersigners'  CMSG_SIGNER_ENCODE_INFO structures."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptMsgCountersignEncoded function countersigns an existing PKCS #7 message signature. The pbCountersignature BYTE buffer it creates is a PKCS #7 encoded SignerInfo that can be used as an unauthenticated Countersignature attribute of a PKCS #9 signed-data or signed-and-enveloped-data message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  Propagated errors might be returned from one of the following functions: If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgCountersignEncoded",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignerInfo",
        "description": "A pointer to the encoded SignerInfo that is to be countersigned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignerInfo",
        "description": "Count, in bytes, of the encoded SignerInfo data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cCountersigners",
        "description": "Number of countersigners in the rgCountersigners array."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_SIGNER_ENCODE_INFO",
        "name": "rgCountersigners",
        "description": "Array of countersigners'  CMSG_SIGNER_ENCODE_INFO structures."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbCountersignature",
        "description": "A pointer to a buffer to receive an encoded PKCS #9 countersignature attribute. On input, this parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "pcbCountersignature",
        "description": "A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbCountersignature parameter. When the function returns, the variable pointed to by the pcbCountersignature parameter contains the number of bytes stored in the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptMsgDuplicate function duplicates a cryptographic message handle by incrementing its reference count.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The returned handle is the same as the handle input. A copy of the message is not created. When you have finished using the duplicated message handle, decrease the reference count by calling the CryptMsgClose function. ",
    "remarks": "CryptMsgDuplicate is used to increase the reference count on an HCRYPTMSG handle so that multiple calls to  CryptMsgClose are required to actually release the handle. For an example that uses this function, see Example C Program: Encoding and Decoding a Hashed Message. ",
    "return_type": "HCRYPTMSG",
    "category": "Cryptography",
    "name": "CryptMsgDuplicate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Handle of the cryptographic message to be duplicated. Duplication is done by incrementing the reference count of the message. A copy of the message is not made."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptMsgGetParam function acquires a message parameter after a cryptographic message has been encoded or decoded. This function is called after the final  CryptMsgUpdate call.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  For dwParamType CMSG_COMPUTED_HASH_PARAM, an error can be propagated from  CryptGetHashParam. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "The following version numbers are returned by calls to CryptMsgGetParam with dwParamType set to CMSG_VERSION_PARAM are defined: For an example that uses this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  Example C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgGetParam",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTMSG",
        "name": "hCryptMsg",
        "description": "Handle of a cryptographic message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwParamType",
        "description": "Indicates the parameter types of data to be retrieved. The type of data to be retrieved determines the type of structure to use for pvData.     For an encoded message, only the CMSG_BARE_CONTENT, CMSG_ENCODE_SIGNER, CMSG_CONTENT_PARAM and CMSG_COMPUTED_HASH_PARAM dwParamTypes are valid.  ValueMeaning  CMSG_ATTR_CERT_COUNT_PARAM   pvData data type: pointer to a DWORD  Returns the count of the attribute certificates in a SIGNED or ENVELOPED message.   CMSG_ATTR_CERT_PARAM   pvData data type: pointer to a BYTE array Retrieves an attribute certificate. To get all the attribute certificates, call CryptMsgGetParam varying dwIndex set to 0 the number of attributes minus one.   CMSG_BARE_CONTENT_PARAM   pvData data type: pointer to a BYTE array Retrieves the encoded content of an encoded cryptographic message, without the outer layer of the CONTENT_INFO structure. That is, only the encoding of the PKCS #7 defined ContentInfo.content field is returned.   CMSG_CERT_COUNT_PARAM   pvData data type: pointer to DWORD Returns the number of certificates in a received SIGNED or ENVELOPED message. \t\t\t\t\t\t\t   CMSG_CERT_PARAM   pvData data type: pointer to a BYTE array Returns a signer's certificate. To get all of the signer's certificates, call CryptMsgGetParam, varying dwIndex from 0 to the number of available certificates minus one.   CMSG_COMPUTED_HASH_PARAM   pvData data type: pointer to a BYTE array Returns the  hash calculated of the data in the message. This type is applicable to both encode and decode.   CMSG_CONTENT_PARAM   pvData data type: pointer to a BYTE array     Returns the whole PKCS #7 message from a message opened to encode. Retrieves the inner content of a message opened to decode. If the message is enveloped, the inner type is data, and CryptMsgControl has been called to decrypt the message, the decrypted content is returned. If the inner type is not data, the encoded BLOB that requires further decoding is returned. If the message is not enveloped and the inner content is DATA, the returned data is the octets of the inner content. This type is applicable to both encode and decode. For decoding, if the type is CMSG_DATA, the content's octets are returned; else, the encoded inner content is returned.   CMSG_CRL_COUNT_PARAM   pvData data type: pointer to DWORD Returns the count of CRLs in a received, SIGNED or ENVELOPED message. \t\t\t\t\t\t\t   CMSG_CRL_PARAM   pvData data type: pointer to a BYTE array Returns a CRL. To get all the CRLs, call CryptMsgGetParam, varying dwIndex from 0 to the number of available CRLs minus one.   CMSG_ENCODED_MESSAGE   pvData data type: pointer to a BYTE array Changes the contents of an already encoded message. The message must first be decoded with a call to CryptMsgOpenToDecode. Then the change to the message is made through a call to CryptMsgControl, CryptMsgCountersign, or CryptMsgCountersignEncoded. The message is then encoded again with a call to CryptMsgGetParam, specifying CMSG_ENCODED_MESSAGE to get a new encoding that reflects the changes made. This can be used, for instance, to add a time-stamp attribute to a message.   CMSG_ENCODED_SIGNER   pvData data type: pointer to a BYTE array Returns the encoded CMSG_SIGNER_INFO signer information for a message signer.   CMSG_ENCRYPTED_DIGEST   pvData data type: pointer to a BYTE array Returns the encrypted hash of a signature. Typically used for performing time-stamping.   CMSG_ENCRYPT_PARAM   pvData data type: pointer to a BYTE array for a  CRYPT_ALGORITHM_IDENTIFIER structure.  Returns the encryption algorithm used to encrypted the message.   CMSG_ENVELOPE_ALGORITHM_PARAM   pvData data type: pointer to a BYTE array for a CRYPT_ALGORITHM_IDENTIFIER structure.  Returns the encryption algorithm used to encrypt an ENVELOPED message.   CMSG_HASH_ALGORITHM_PARAM   pvData data type: pointer to a BYTE array for a CRYPT_ALGORITHM_IDENTIFIER structure.  Returns the hash algorithm used to hash the message when it was created.   CMSG_HASH_DATA_PARAM   pvData data type: pointer to a BYTE array Returns the hash value stored in the message when it was created.   CMSG_INNER_CONTENT_TYPE_PARAM   pvData data type: pointer to a BYTE array to receive a null-terminated object identifier (OID) string. Returns the inner content type of a received message. This type is not applicable to messages of type DATA.   CMSG_RECIPIENT_COUNT_PARAM   pvData data type: pointer to a DWORD Returns the number of key transport recipients of an ENVELOPED received message. \t\t\t\t\t\t\t   CMSG_CMS_RECIPIENT_COUNT_PARAM   pvData data type: pointer to DWORD Returns the total count of all message recipients including key agreement and mail list recipients. \t\t\t\t\t\t\t   CMSG_RECIPIENT_INDEX_PARAM   pvData data type: pointer to a DWORD Returns the index of the key transport recipient used to decrypt an ENVELOPED message. This value is available only after a message has been decrypted. \t\t\t\t\t\t\t   CMSG_CMS_RECIPIENT_INDEX_PARAM   pvData data type: pointer to a DWORD Returns the index of the key transport, key agreement, or mail list recipient used to decrypt an ENVELOPED message.   CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM   pvData data type: pointer to a DWORD Returns the index of the encrypted key of a key agreement recipient used to decrypt an ENVELOPED message. \t\t\t\t\t\t\t   CMSG_RECIPIENT_INFO_PARAM   pvData data type: pointer to a BYTE array to receive a  CERT_INFO structure.  Returns certificate information about a key transport message's recipient. To get certificate information on all key transport message's recipients, repetitively call CryptMsgGetParam, varying dwIndex from 0 to the number of recipients minus one. Only the Issuer, SerialNumber, and PublicKeyAlgorithm members of the CERT_INFO structure returned are available and valid.   CMSG_CMS_RECIPIENT_INFO_PARAM   pvData data type: pointer to a BYTE array to receive a  CMSG_CMS_RECIPIENT_INFO structure. Returns information about a key transport, key agreement, or mail list recipient. It is not limited to key transport message recipients. To get information on all of a message's recipients, repetitively call CryptMsgGetParam, varying dwIndex from 0 to the number of recipients minus one.   CMSG_SIGNER_AUTH_ATTR_PARAM   pvData data type: pointer to a BYTE array to receive a  CRYPT_ATTRIBUTES structure.  Returns the authenticated attributes of a message signer. To retrieve the authenticated attributes for a specified signer, call CryptMsgGetParam with dwIndex equal to that signer's index.   CMSG_SIGNER_CERT_INFO_PARAM   pvData data type: pointer to a BYTE array to receive the  CERT_INFO structure.  Returns information on a message signer needed to identify the signer's certificate. A certificate's Issuer and SerialNumber can be used to uniquely identify a certificate for retrieval. To retrieve information for all the signers, repetitively call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one. Only the Issuer and SerialNumber fields in the CERT_INFO structure returned contain available, valid data.   CMSG_SIGNER_CERT_ID_PARAM   pvData data type: pointer to a BYTE array to receive a CERT_ID structure. Returns information on a message signer needed to identify the signer's public key. This could be a certificate's Issuer and SerialNumber, a KeyID, or a HashId. To retrieve information for all the signers, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.   CMSG_SIGNER_COUNT_PARAM   pvData data type: pointer to a DWORD Returns the number of signers of a received SIGNED message. \t\t\t\t\t\t\t   CMSG_SIGNER_HASH_ALGORITHM_PARAM   pvData data type: pointer to a BYTE array to receive the  CRYPT_ALGORITHM_IDENTIFIER structure.  Returns the hash algorithm used by a signer of the message. To get the hash algorithm for a specified signer, call CryptMsgGetParam with dwIndex equal to that signer's index.   CMSG_SIGNER_INFO_PARAM   pvData data type: pointer to a BYTE array to receive a  CMSG_SIGNER_INFO structure.  Returns information on a message signer. This includes the issuer and serial number of the signer's certificate and authenticated and unauthenticated attributes of the signer's certificate. To retrieve signer information on all of the signers of a message, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.   CMSG_CMS_SIGNER_INFO_PARAM   pvData data type: pointer to a BYTE array to receive a  CMSG_CMS_SIGNER_INFO structure.  Returns information on a message signer. This includes a signerId and authenticated and unauthenticated attributes. To retrieve signer information on all of the signers of a message, call CryptMsgGetParam varying dwIndex from 0 to the number of signers minus one.   CMSG_SIGNER_UNAUTH_ATTR_PARAM   pvData data type: pointer to a BYTE array to receive a  CRYPT_ATTRIBUTES structure.  Returns a message signer's unauthenticated attributes. To retrieve the unauthenticated attributes for a specified signer, call CryptMsgGetParam  with dwIndex equal to that signer's index.   CMSG_TYPE_PARAM   pvData data type: pointer to a DWORD Returns the message type of a decoded message of unknown type. The retrieved message type can be compared to supported types to determine whether processing can continued. For supported message types, see the dwMessageType parameter of CryptMsgOpenToDecode.   CMSG_UNPROTECTED_ATTR_PARAM   pvData data type: pointer to a BYTE array to receive a  CMSG_ATTR structure.  Returns the unprotected attributes in an enveloped message.   CMSG_VERSION_PARAM   pvData data type: pointer to a DWORD  Returns the version of the decoded message. For more information, see the table in the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Index for the parameter being retrieved, where applicable. When a parameter is not being retrieved, this parameter is ignored and is set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer that receives the data retrieved. The form of this data will vary depending on the value of the dwParamType parameter.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length. When processing the data returned in this buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pvData parameter. When the function returns, the variable pointed to by the pcbData parameter contains the number of bytes stored in the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptMsgOpenToDecode function opens a cryptographic message for decoding and returns a handle of the opened message. The message remains open until  the CryptMsgClose function is called.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns the handle of the opened message. If the function fails, it returns NULL. For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  For examples that use this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  Example C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "remarks": "",
    "return_type": "HCRYPTMSG",
    "category": "Cryptography",
    "name": "CryptMsgOpenToDecode",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING  Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following flags.  ValueMeaning  CMSG_DETACHED_FLAG   Indicates that the message to be decoded is detached. If this flag is not set, the message is not detached.   CMSG_CRYPT_RELEASE_CONTEXT_FLAG   If set, the hCryptProv passed to this function is released on the final CryptMsgUpdate. The handle is not released if the function fails."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgType",
        "description": "Specifies the type of message to decode. In most cases, the message type is determined from the message header and zero is passed for this parameter. In some cases, notably with Internet Explorer 3.0, messages do not have headers and the type of message to be decoded must be supplied in this function call. If the header is missing and zero is passed for this parameter, the function fails.  This parameter can be one of the following predefined message types.  ValueMeaning  CMSG_DATA   The message is encoded data.   CMSG_ENVELOPED   The message is an enveloped message.   CMSG_HASHED   The message is a hashed message.   CMSG_SIGNED   The message is a signed message.   CMSG_SIGNED_AND_ENVELOPED   The message is a signed and enveloped message."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  Specifies a handle for the cryptographic provider to use for hashing the message. For signed messages, hCryptProv is used for signature verification.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, set this parameter to NULL. Passing in NULL causes the default RSA or DSS provider to be acquired before performing hash, signature verification, or recipient encryption operations."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pRecipientInfo",
        "description": "This parameter is reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCMSG_STREAM_INFO",
        "name": "pStreamInfo",
        "description": "When streaming is not being used, this parameter must be set to NULL.  Note  Streaming is not used with CMSG_HASHED messages. When dealing with hashed data, this parameter must be set to NULL.   When streaming is being used, the pStreamInfo parameter is a pointer to a  CMSG_STREAM_INFO structure that contains a pointer to a callback to be called when  CryptMsgUpdate is executed or when  CryptMsgControl is executed when decoding a streamed enveloped message. For a signed message, the callback is passed a block of the decoded bytes from the inner content of the message. For an enveloped message, after each call to CryptMsgUpdate, you must check to determine whether the CMSG_ENVELOPE_ALGORITHM_PARAM property is available by calling  the CryptMsgGetParam function. CryptMsgGetParam will fail and GetLastError will return CRYPT_E_STREAM_MSG_NOT_READY until  CryptMsgUpdate has processed enough of the message to make the CMSG_ENVELOPE_ALGORITHM_PARAM property available. When the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you can iterate through the recipients, retrieving a  CERT_INFO structure for each recipient by using the CryptMsgGetParam function to retrieve the CMSG_RECIPIENT_INFO_PARAM property. To prevent a denial of service attack from an enveloped message that has an artificially large header block, you must keep track of the amount of memory that has been passed to the CryptMsgUpdate function during this process.  If the amount of data exceeds an application defined limit before the CMSG_ENVELOPE_ALGORITHM_PARAM property is available, you must stop processing the message and call the CryptMsgClose function to cause the operating system to release any memory that has been allocated for the message. A suggested limit is the maximum allowable size of a message. For example, if the maximum message size is 10 MB, the limit for this test should be 10 MB. The CERT_INFO structure is used to find a matching certificate in a previously opened certificate store by using  the CertGetSubjectCertificateFromStore function. When the correct certificate is found,  the CertGetCertificateContextProperty function with a CERT_KEY_PROV_INFO_PROP_ID parameter is called to retrieve a  CRYPT_KEY_PROV_INFO structure. The structure contains the information necessary to acquire the recipient's private key by calling  CryptAcquireContext, using the pwszContainerName, pwszProvName, dwProvType, and dwFlags members of the CRYPT_KEY_PROV_INFO structure. The hCryptProv acquired and the dwKeySpec member of the CRYPT_KEY_PROV_INFO structure are passed to  the CryptMsgControl structure as a member of the  CMSG_CTRL_DECRYPT_PARA structure to permit the start of the decryption of the inner content. The streaming code will then perform the decryption as the data is input. The resulting blocks of plaintext are passed to the callback function specified by the pfnStreamOutput member of the CMSG_STREAM_INFO structure to handle the output of the decrypted message.  Note  Streamed decoding of an enveloped message queues the ciphertext in memory until CryptMsgControl is called to start the decryption. The application must initiate decrypting in a timely manner so that the data can be saved to disk or routed elsewhere before the accumulated ciphertext becomes too large and the system runs out of memory.   In the case of a signed message enclosed in an enveloped message, the plaintext output from the streaming decode of the enveloped message can be fed into another streaming decode to process the signed message."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptMsgOpenToEncode function opens a cryptographic message for encoding and returns a handle of the opened message. The message remains open until  CryptMsgClose is called.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, it returns a handle to the opened message. This handle must be closed when it is no longer needed by passing it to the CryptMsgClose function. If this function fails, NULL is returned. To retrieve extended error information, use the  GetLastError function. The following table lists the error codes most commonly returned by the GetLastError function.  In addition, if dwMsgType is CMSG_SIGNED, errors can be propagated from  CryptCreateHash. If dwMsgType is CMSG_ENVELOPED, errors can be propagated from  CryptGenKey,  CryptImportKey, and  CryptExportKey. If dwMsgType is CMSG_HASHED, errors can be propagated from  CryptCreateHash. ",
    "remarks": "For functions that perform encryption, the encrypted symmetric keys are reversed from little-endian format to big-endian format after  CryptExportKey is called internally. For functions that perform decryption, the encrypted symmetric keys are reversed from big-endian format to little-endian format before  CryptImportKey is called. CRYPT_NO_SALT is specified when symmetric keys are generated and imported with  CryptGenKey and CryptImportKey. Messages encrypted with the RC2 encryption algorithm use KP_EFFECTIVE_KEYLEN with  CryptGetKeyParam to determine the effective key length of the RC2 key importing or exporting keys. For messages encrypted with the RC2 encryption algorithm, encode and decode operations have been updated to handle ASN RC2 parameters for the ContentEncryptionAlgorithm member of the  CMSG_ENVELOPED_ENCODE_INFO structure. For messages encrypted with the RC4, DES, and 3DES encryption algorithms, encode and decode operations now handle the ASN IV octet string parameter for the ContentEncryptionAlgorithm member of the CMSG_ENVELOPED_ENCODE_INFO structure. For examples that use this function, see  Example C Program: Signing, Encoding, Decoding, and Verifying a Message,  Alternate Code for Encoding an Enveloped Message,  Example C Program: Encoding an Enveloped, Signed Message, and  Example C Program: Encoding and Decoding a Hashed Message. ",
    "return_type": "HCRYPTMSG",
    "category": "Cryptography",
    "name": "CryptMsgOpenToEncode",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Currently defined dwFlags are shown in the following table.  ValueMeaning  CMSG_BARE_CONTENT_FLAG   The streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed into an enclosing message.   CMSG_DETACHED_FLAG   There is detached data being supplied for the subsequent calls to  CryptMsgUpdate.   CMSG_AUTHENTICATED_ATTRIBUTES_FLAG   Authenticated attributes are forced to be included in the SignerInfo (as defined by PKCS #7) in cases where they would not otherwise be required.   CMSG_CONTENTS_OCTETS_FLAG   Used when calculating the size of a message that has been encoded by using Distinguished Encoding Rules (DER) and that is nested inside an enveloped message. This is particularly useful when performing streaming.   CMSG_CMS_ENCAPSULATED_CONTENT_FLAG   When set, non-data type-inner content is encapsulated within an OCTET STRING. Applicable to both signed and enveloped messages.   CMSG_CRYPT_RELEASE_CONTEXT_FLAG   If set, the hCryptProv that is passed to this function is released on the final CryptMsgUpdate. The handle is not released if the function fails.  Note  The hCryptProvs of the envelope recipients are not released."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgType",
        "description": "Indicates the message type. This must be one of the following values.  ValueMeaning  CMSG_DATA   This value is not used.   CMSG_SIGNED    \t\t\t\t\t\t\t\tThe pvMsgEncodeInfo parameter is the address of a CMSG_SIGNED_ENCODE_INFO structure that contains the encoding information.   CMSG_ENVELOPED   The pvMsgEncodeInfo parameter is the address of a CMSG_ENVELOPED_ENCODE_INFO structure that contains the encoding information.   CMSG_SIGNED_AND_ENVELOPED   This value is not currently implemented.   CMSG_HASHED    \t\t\t\t\t\t\t\tThe pvMsgEncodeInfo parameter is the address of a CMSG_HASHED_ENCODE_INFO structure that contains the encoding information."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvMsgEncodeInfo",
        "description": "The address of a structure that contains the encoding information. The type of data depends on the value of the dwMsgType parameter. For details, see dwMsgType."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSTR",
        "name": "pszInnerContentObjID",
        "description": "If CryptMsgCalculateEncodedLength is called and the data for  CryptMsgUpdate has already been message encoded, the appropriate object identifier (OID) is passed in pszInnerContentObjID. If pszInnerContentObjID is NULL, then the inner content type is assumed not to have been previously encoded and is therefore encoded as an octet string and given the type CMSG_DATA. Note  When streaming is being used, pszInnerContentObjID must be either NULL or szOID_RSA_data.   The following algorithm OIDs are commonly used. A user can define new inner content usage by ensuring that the sender and receiver of the message agree upon the semantics associated with the OID.  szOID_RSA_data szOID_RSA_signedData  szOID_RSA_envelopedData szOID_RSA_signEnvData szOID_RSA_digestedData szOID_RSA_encryptedData  SPC_INDIRECT_DATA_OBJID"
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_STREAM_INFO",
        "name": "pStreamInfo",
        "description": "When streaming is being used, this parameter is the address of a  CMSG_STREAM_INFO structure. The callback function specified by the pfnStreamOutput member of the CMSG_STREAM_INFO structure is called when  CryptMsgUpdate is executed. The callback is passed the encoded bytes that result from the encoding. For more information about how to use the callback, see  CMSG_STREAM_INFO. Note  When streaming is being used, the application must not release any data handles that are passed in the pvMsgEncodeInfo parameter, such as the provider handle in the hCryptProv member of the CMSG_SIGNER_ENCODE_INFO structure, until after the message handle returned by this function is closed by using the CryptMsgClose function.   When streaming is not being used, this parameter is set to NULL. Streaming is not used with the CMSG_HASHED message type. When dealing with hashed data, this parameter must be set to NULL. Consider the case of a signed message being enclosed in an enveloped message. The encoded output from the streamed encoding of the signed message feeds into another streaming encoding of the enveloped message. The callback for the streaming encoding calls CryptMsgUpdate to encode the enveloped message. The callback for the enveloped message receives the encoded bytes of the nested signed message."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptMsgVerifyCountersignatureEncoded function verifies a countersignature in terms of the SignerInfo structure (as defined by PKCS #7).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  Propagated errors from the following functions might be returned. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "Countersigner verification is done using the PKCS #7 SIGNERINFO structure. The signature must contain the encrypted hash of the encryptedDigest field of pbSignerInfo. The issuer and serial number of the countersigner must match the countersigner information from pbSignerInfoCountersignature. The only fields referenced from pciCountersigner are SerialNumber, Issuer, and SubjectPublicKeyInfo. The SubjectPublicKeyInfo is used to access the public key that is then used to encrypt the hash from the pciCountersigner so compare it with the hash from the pbSignerInfo. For an example that uses this function, see  Example C Program: Encoding and Decoding a CounterSigned Message. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgVerifyCountersignatureEncoded",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  NULL or the handle of the cryptographic provider to use to hash the encryptedDigest field of pbSignerInfo.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass NULL to cause the default RSA or DSS provider to be used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignerInfo",
        "description": "A pointer to the encoded BLOB that contains the signer of the contents of a message to be countersigned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignerInfo",
        "description": "Count, in bytes, of the encoded BLOB for the signer of the contents."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignerInfoCountersignature",
        "description": "A pointer to the encoded BLOB containing the countersigner information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignerInfoCountersignature",
        "description": "Count, in bytes, of the encoded BLOB for the countersigner of the message."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pciCountersigner",
        "description": "A pointer to a  CERT_INFO that includes with the issuer and serial number of the countersigner. For more information, see Remarks."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 10,
    "description": "The CryptMsgVerifyCountersignatureEncodedEx function verifies that the pbSignerInfoCounterSignature parameter contains the encrypted hash of the encryptedDigest field of the pbSignerInfo parameter structure. The signer can be a CERT_PUBLIC_KEY_INFO structure, a certificate context, or a chain context.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE).  \t\t  For extended error information, call             GetLastError. The following error codes are most commonly returned by the  \t\t       GetLastError function.  Propagated errors from the following functions might be returned. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "Countersigner verification is done using the PKCS #7 SIGNERINFO structure. The signature must contain the encrypted hash of the encryptedDigest field of pbSignerInfo. The issuer and serial number of the countersigner must match the countersigner information from pbSignerInfoCountersignature. The only fields referenced from pciCountersigner are SerialNumber, Issuer, and SubjectPublicKeyInfo. The SubjectPublicKeyInfo is used to access the public key that is then used to encrypt the hash from the pciCountersigner so compare it with the hash from the pbSignerInfo. For an example that uses this function, see        Example C Program: Encoding and Decoding a CounterSigned Message. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptMsgVerifyCountersignatureEncodedEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  NULL or the handle of the cryptographic provider to use to hash the encryptedDigest field of pbSignerInfo.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, pass NULL to cause the default RSA or DSS provider to be used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "The encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use:     X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignerInfo",
        "description": "A pointer to the encoded BLOB that contains the signer of the contents of a message to be countersigned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignerInfo",
        "description": "The count, in bytes, of the encoded BLOB for the signer of the contents."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbSignerInfoCountersignature",
        "description": "A pointer to the encoded BLOB containing the countersigner information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignerInfoCountersignature",
        "description": "The count, in bytes, of the encoded BLOB for the countersigner of the message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSignerType",
        "description": "The structure that contains the signer information. The following table shows the predefined values and the structures indicated.  ValueMeaning   CMSG_VERIFY_SIGNER_PUBKEY   pvSigner is a pointer to a CERT_PUBLIC_KEY_INFO structure.    CMSG_VERIFY_SIGNER_CERT   pvSigner is a pointer to a CERT_CONTEXT structure.    CMSG_VERIFY_SIGNER_CHAIN   pvSigner is a pointer to a CERT_CHAIN_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvSigner",
        "description": "A pointer to a CERT_PUBLIC_KEY_INFO structure, a certificate context, or a chain context depending on the value of dwSignerType."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify the function behavior. This can be zero or the following value.  ValueMeaning  CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG 0x00000001   Performs a strong signature check after successful signature verification. Set the pvExtra parameter to point to a CERT_STRONG_SIGN_PARA structure that contains the parameters needed to check the signature strength.. Windows 8 and Windows Server 2012:  Support for this flag begins."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvExtra",
        "description": "If you set the dwFlags parameter to CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG, set this parameter (pvExtra) to point to a CERT_STRONG_SIGN_PARA structure that contains the parameters used to check the signature strength."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 13,
    "description": "The CryptDecodeMessage function decodes, decrypts, and verifies a cryptographic message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The CryptDecryptMessage,  CryptVerifyMessageSignature, or  CryptVerifyMessageHash functions can be propagated to this function. The following error code is most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "The dwMsgTypeFlags parameter specifies the set of allowable messages. For example, to decode either SIGNED or ENVELOPED messages, set dwMsgTypeFlags to CMSG_SIGNED_FLAG | CMSG_ENVELOPED_FLAG. Either or both of the pDecryptPara or pVerifyPara parameters must be specified. For a successfully decoded or verified message, the certificate context pointers pointed to by ppXchgCert and ppSignerCert are updated. They must be freed by calling  CertFreeCertificateContext. If the function fails, they are set to NULL. The ppXchgCert or ppSignerCert parameters can be set to NULL before the function is called, which indicates that the caller is not interested in getting the exchange certificate or the signer certificate context. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecodeMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgTypeFlags",
        "description": "Indicates the message type. Message types can be combined with the bitwise-OR operator. This parameter can be one of the following message types:  CMSG_DATA_FLAG CMSG_SIGNED_FLAG CMSG_ENVELOPED_FLAG CMSG_SIGNED_AND_ENVELOPED_FLAG CMSG_HASHED_FLAG  Note  After return, the DWORD pointed to by pdwMsgType is set with the type of the message."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_DECRYPT_MESSAGE_PARA",
        "name": "pDecryptPara",
        "description": "A pointer to a  CRYPT_DECRYPT_MESSAGE_PARA structure that contains  decryption parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_VERIFY_MESSAGE_PARA",
        "name": "pVerifyPara",
        "description": "A pointer to a  CRYPT_VERIFY_MESSAGE_PARA structure that contains   verification parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSignerIndex",
        "description": "Indicates which signer, among the possible many signers of a message, is to be verified. This index can be changed in multiple calls to the function to verify additional signers.     dwSignerIndex is set to zero for the first signer. If the function returns FALSE, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call returned the last signer of the message. This parameter is used only with messages of types CMSG_SIGNED_AND_ENVELOPED or CMSG_SIGNED. For all other message types, it should be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncodedBlob",
        "description": "A pointer to the encoded BLOB that is to be decoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncodedBlob",
        "description": "The size, in bytes, of the encoded BLOB."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPrevInnerContentType",
        "description": "Only applicable when processing nested cryptographic messages. When processing an outer cryptographic message, it must be set to zero. When decoding a nested cryptographic message, it is set to the value returned at pdwInnerContentType by a previous calling of  CryptDecodeMessage for the outer message. It can be any of the CMSG types listed in pdwMsgType. For backward compatibility, set dwPrevInnerContentType to zero."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwMsgType",
        "description": "A pointer to a DWORD that specifies the message type returned. This parameter can be one of the following message types:  CMSG_DATA CMSG_SIGNED CMSG_ENVELOPED CMSG_SIGNED_AND_ENVELOPED CMSG_HASHED"
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwInnerContentType",
        "description": "A pointer to a DWORD that specifies the type of an inner message. The message type codes used for pdwMsgType are used here, also.     If there is no cryptographic nesting, CMSG_DATA is returned."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbDecoded",
        "description": "A pointer to a buffer to receive the decoded message.     This parameter can be NULL if the decoded message is not required or to set the size of the decoded message for memory allocation purposes. A decoded message will not be returned if this parameter is NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbDecoded",
        "description": "A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbDecoded parameter. When the function returns, this variable contains the size of the decoded message.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppXchgCert",
        "description": "A pointer to a  pointer to a CERT_CONTEXT structure with a certificate that corresponds to the private exchange key needed to decode the message. This parameter is only set for message types CMSG_ENVELOPED and CMSG_SIGNED_AND_ENVELOPED."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppSignerCert",
        "description": "A pointer to a  pointer to a CERT_CONTEXT structure of the certificate context of the signer. This parameter is only set for message types CMSG_SIGNED and CMSG_SIGNED_AND_ENVELOPED."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptDecryptAndVerifyMessageSignature function decrypts a message and verifies its signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The GetLastError function returns the following error code most often.  ",
    "remarks": "For a successfully decrypted and verified message, the certificate context pointers pointed to by ppXchgCert and ppSignerCert are updated. They must be freed by calling  CertFreeCertificateContext. If the function fails, they are set to NULL. To indicate that the caller is not interested in the exchange certificate or the signer certificate context, set the ppXchgCert and ppSignerCert parameters to NULL. For an example that uses this function, see  Example C Program: Sending and Receiving a Signed and Encrypted Message. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecryptAndVerifyMessageSignature",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_DECRYPT_MESSAGE_PARA",
        "name": "pDecryptPara",
        "description": "A pointer to a  CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_VERIFY_MESSAGE_PARA",
        "name": "pVerifyPara",
        "description": "A pointer to a  CRYPT_VERIFY_MESSAGE_PARA structure that contains  verification parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSignerIndex",
        "description": "Identifies a particular signer of the message. A message can be signed by more than one signer and this function can be called multiple times changing this parameter to check for several signers. It is set to zero for the first signer. If the function returns FALSE, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call received the last signer of the message."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncryptedBlob",
        "description": "A pointer to the signed, encoded, and encrypted message to be decrypted and verified."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncryptedBlob",
        "description": "The size, in bytes, of the encrypted message."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbDecrypted",
        "description": "A pointer to a buffer to receive the decrypted message.     This parameter can be NULL if the decrypted message is not required or to set the size of the decrypted message for memory allocation purposes. A decrypted message will not be returned if this parameter is NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbDecrypted",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbDecrypted parameter. When the function returns, it contains the size of the decrypted message copied to pbDecrypted.     Note  When processing the data returned in the pbDecrypted buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified in pcbDecrypted on input. On output, the variable pointed to by this parameter is set to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppXchgCert",
        "description": "A pointer to a  CERT_CONTEXT structure of the certificate that corresponds to the private exchange key needed to decrypt the message."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppSignerCert",
        "description": "A pointer to a CERT_CONTEXT structure of the certificate of the signer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptDecryptMessage function decodes and decrypts a message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The GetLastError function returns the following error codes most often.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "When NULL is passed for pbDecrypted, and pcbDecrypted is not NULL, NULL is returned for the address passed in ppXchgCert; otherwise, a pointer to a  CERT_CONTEXT is returned. For a successfully decrypted message, this pointer to a CERT_CONTEXT points to the certificate context used to decrypt the message. It must be freed by calling  CertFreeCertificateContext. If the function fails, the value at ppXchgCert is set to NULL. For an example that uses this function, see  Example C Program: Using CryptEncryptMessage and CryptDecryptMessage. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptDecryptMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_DECRYPT_MESSAGE_PARA",
        "name": "pDecryptPara",
        "description": "A pointer to a  CRYPT_DECRYPT_MESSAGE_PARA structure that contains decryption parameters."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncryptedBlob",
        "description": "A pointer to a buffer that contains the encoded and encrypted message to be decrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncryptedBlob",
        "description": "The size, in bytes, of the encoded and encrypted message."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbDecrypted",
        "description": "A pointer to a buffer that receives the decrypted message.     To set the size of this information for memory allocation purposes, this parameter can be NULL. A decrypted message will not be returned if this parameter is NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbDecrypted",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbDecrypted parameter. When the function returns, this variable contains the size, in bytes, of the decrypted message copied to pbDecrypted. \t\t\t\t\t\t Note  When processing the data returned in the pbDecrypted buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified in pcbDecrypted on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the DWORD is updated to the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppXchgCert",
        "description": "A pointer to a  CERT_CONTEXT structure of a certificate that corresponds to the private exchange key needed to decrypt the message. To indicate that the function should not return the certificate context used to decrypt, set this parameter to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptEncryptMessage function encrypts and encodes a message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The GetLastError function returns the following error codes most often.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Using CryptEncryptMessage and CryptDecryptMessage. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEncryptMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_ENCRYPT_MESSAGE_PARA",
        "name": "pEncryptPara",
        "description": "A pointer to a  CRYPT_ENCRYPT_MESSAGE_PARA structure that contains the encryption parameters. The CryptEncryptMessage function does not support the SHA2 OIDs, szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF and  szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cRecipientCert",
        "description": "Number of elements in the rgpRecipientCert array."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "rgpRecipientCert[]",
        "description": "Array of pointers to  CERT_CONTEXT structures that contain the certificates of intended recipients of the message."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbToBeEncrypted",
        "description": "A pointer to a buffer that contains the message that is to be encrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbToBeEncrypted",
        "description": "The size, in bytes, of the message that is to be encrypted."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncryptedBlob",
        "description": "A pointer to BLOB that contains a buffer that receives the encrypted and encoded message.     To set the size of this information for memory allocation purposes, this parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncryptedBlob",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbEncryptedBlob parameter. When the function returns, this variable contains the size, in bytes, of the encrypted and encoded message copied to pbEncryptedBlob.     Note  When processing the data returned in the buffer of the pbEncryptedBlob, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptGetMessageCertificates function returns the handle of an open certificate store containing the message's certificates and CRLs. This function calls  CertOpenStore using provider type CERT_STORE_PROV_PKCS7 as its lpszStoreProvider parameter.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns the certificate store containing the message's certificates and CRLs. For an error, NULL is returned. The following lists the error code most commonly returned by the  \t\t       GetLastError function.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "Use  GetLastError to determine the reason for any errors. For an example that uses this function, see Example C Program: Setting and Getting Certificate Store Properties. ",
    "return_type": "HCERTSTORE",
    "category": "Cryptography",
    "name": "CryptGetMessageCertificates",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgAndCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  Handle of the CSP passed to  CertOpenStore. For more information, see  CertOpenStore.Unless there is a strong reason for passing a specific cryptographic provider in hCryptProv, pass zero to cause the default RSA or DSS provider to be acquired. This parameter's data type is HCRYPTPROV."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags passed to CertOpenStore. For more information, see  CertOpenStore."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffered  CRYPT_INTEGER_BLOB structure that contains the signed message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignedBlob",
        "description": "The size, in bytes, of the signed message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptGetMessageSignerCount function returns the number of signers of a signed message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns the number of signers of a signed message, zero when there are no signers, and minus one (\u00e2\u0080\u00931) for an error. For extended error information, call  GetLastError. The following  error code is most commonly returned.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. See  Example C Program: Setting and Getting Certificate Store Properties. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Cryptography",
    "name": "CryptGetMessageSignerCount",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMsgEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffer containing the signed message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignedBlob",
        "description": "The size, in bytes, of the signed message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptHashMessage function creates a hash of the message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The GetLastError function returns the following error codes most often.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Setting and Getting Certificate Store Properties. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_HASH_MESSAGE_PARA",
        "name": "pHashPara",
        "description": "A pointer to a  CRYPT_HASH_MESSAGE_PARA structure that contains the hash parameters."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDetachedHash",
        "description": "If this parameter is set to TRUE, only pbComputedHash is encoded in pbHashedBlob. Otherwise, both rgpbToBeHashed and pbComputedHash are encoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cToBeHashed",
        "description": "The number of array elements in rgpbToBeHashed and rgcbToBeHashed. This parameter can only be one unless fDetachedHash is set to TRUE."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "rgpbToBeHashed[]",
        "description": "An array of pointers to buffers that contain the contents to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "rgcbToBeHashed[]",
        "description": "An array of sizes, in bytes, of the buffers pointed to by rgpbToBeHashed."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbHashedBlob",
        "description": "A pointer to a buffer to receive the hashed message encoded for transmission.     This parameter can be NULL if the hashed message is not needed for additional processing or to set the size of the hashed message for memory allocation purposes. A hashed message will not be returned if this parameter is NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbHashedBlob",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbHashedBlob parameter. When the function returns, this variable contains the size, in bytes, of the decrypted message copied to pbHashedBlob. This parameter must be the address of a DWORD and not NULL or the length of the buffer will not be returned.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the newly created hash value. This parameter can be NULL if the newly created hash is not needed for additional processing, or to set the size of the hash for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the function returns, this DWORD contains the size, in bytes, of the newly created hash that was copied to pbComputedHash.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptSignAndEncryptMessage function creates a hash of the specified content, signs the hash, encrypts the content, hashes the encrypted contents and the signed hash, and then encodes both the encrypted content and the signed hash. The result is the same as if the hash were first signed and then encrypted.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error code most commonly returned by the  \t\t       GetLastError function.  For an example that uses this function, see  Example C Program: Sending and Receiving a Signed and Encrypted Message. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignAndEncryptMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_SIGN_MESSAGE_PARA",
        "name": "pSignPara",
        "description": "A pointer to a  CRYPT_SIGN_MESSAGE_PARA structure that contains the signature parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ENCRYPT_MESSAGE_PARA",
        "name": "pEncryptPara",
        "description": "A pointer to a  CRYPT_ENCRYPT_MESSAGE_PARA structure containing encryption parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cRecipientCert",
        "description": "Number of array elements in rgpRecipientCert."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "rgpRecipientCert[]",
        "description": "Array of pointers to  CERT_CONTEXT structures. Each structure is the certificate of an intended recipients of the message."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbToBeSignedAndEncrypted",
        "description": "A pointer to a buffer containing the content to be signed and encrypted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbToBeSignedAndEncrypted",
        "description": "The size, in bytes, of the pbToBeSignedAndEncrypted buffer."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignedAndEncryptedBlob",
        "description": "A pointer to a buffer to receive the encrypted and encoded message.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignedAndEncryptedBlob",
        "description": "A pointer to DWORD specifying the size, in bytes, of the buffer pointed to by pbSignedAndEncryptedBlob. When the function returns, this variable contains the size, in bytes, of the signed and encrypted message copied to *pbSignedAndEncryptedBlob.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptSignMessageWithKey function signs a message by using a CSP's private key specified in the parameters. A placeholder SignerId is created and stored in the message.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error codes most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignMessageWithKey",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_KEY_SIGN_MESSAGE_PARA",
        "name": "pSignPara",
        "description": "A pointer to  a CRYPT_KEY_SIGN_MESSAGE_PARA structure that contains the signature parameters."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbToBeSigned",
        "description": "A pointer to a buffer array that contains the message to be signed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cToBeSigned",
        "description": "The number of array elements in the pbToBeSigned buffer array."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffer to receive the encoded signed message.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignedBlob",
        "description": "A pointer to a DWORD value that indicates the size, in bytes, of the pbSignedBlob buffer. When the function returns, this variable contains the size, in bytes, of the signed and encoded message.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptSignMessage function creates a hash of the specified content, signs the hash, and then encodes both the original message content and the signed hash.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error codes most commonly returned by the  \t\t       GetLastError function.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Signing a Message and Verifying a Message Signature. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignMessage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_SIGN_MESSAGE_PARA",
        "name": "pSignPara",
        "description": "A pointer to  CRYPT_SIGN_MESSAGE_PARA structure containing the signature parameters."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fDetachedSignature",
        "description": "TRUE if this is to be a detached signature. Otherwise, FALSE. If this parameter is set to TRUE, only the signed hash is encoded in pbSignedBlob. Otherwise, both rgpbToBeSigned and the signed hash are encoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cToBeSigned",
        "description": "Count of the number of array elements in rgpbToBeSigned and rgpbToBeSigned. This parameter must be set to one unless fDetachedSignature is set to TRUE."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "rgpbToBeSigned[]",
        "description": "Array of pointers to buffers that contain the contents to be signed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "rgcbToBeSigned[]",
        "description": "Array of sizes, in bytes, of the content buffers pointed to in rgpbToBeSigned."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffer to receive the encoded signed hash, if fDetachedSignature is TRUE, or to both the encoded content and signed hash if fDetachedSignature is FALSE.     This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignedBlob",
        "description": "A pointer to a DWORD specifying the size, in bytes, of the pbSignedBlob buffer. When the function returns, this variable contains the size, in bytes, of the signed and encoded message.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptVerifyDetachedMessageHash function verifies a detached hash.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error codes most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyDetachedMessageHash",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_HASH_MESSAGE_PARA",
        "name": "pHashPara",
        "description": "A pointer to a  CRYPT_HASH_MESSAGE_PARA structure containing the hash parameters."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbDetachedHashBlob",
        "description": "A pointer to the encoded, detached hash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbDetachedHashBlob",
        "description": "The size, in bytes, of the detached hash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cToBeHashed",
        "description": "Number of elements in the rgpbToBeHashed and rgcbToBeHashed arrays."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "rgpbToBeHashed[]",
        "description": "Array of pointers to content buffers to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "rgcbToBeHashed[]",
        "description": "Array of sizes, in bytes, for the content buffers pointed to by the elements of the rgcbToBeHashed array."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the computed hash.     This parameter can be NULL if the newly created hash is not needed for additional processing, or to set the size of the hash for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD specifying the size, in bytes, of the pbComputedHash buffer. When the function returns, this DWORD contains the size, in bytes, of the created hash. The hash will not be returned if this parameter is NULL.     Note  When processing the data returned , applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptVerifyDetachedMessageSignature function verifies a signed message containing a detached signature or signatures.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error codes most commonly returned by the  \t\t       GetLastError function.  The following example shows using the CryptVerifyDetachedMessageSignature function to verify a message with a detached signature. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyDetachedMessageSignature",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_VERIFY_MESSAGE_PARA",
        "name": "pVerifyPara",
        "description": "A pointer to a  CRYPT_VERIFY_MESSAGE_PARA structure containing the verification parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSignerIndex",
        "description": "Index of the signature to be verified. A message might have several signers and this function can be called repeatedly, changing dwSignerIndex to verify other signatures. If the function returns FALSE, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call received the last signer of the message."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbDetachedSignBlob",
        "description": "A pointer to a BLOB containing the encoded message signatures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbDetachedSignBlob",
        "description": "The size, in bytes, of the detached signature."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cToBeSigned",
        "description": "Number of array elements in rgpbToBeSigned and rgcbToBeSigned."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "rgpbToBeSigned[]",
        "description": "Array of pointers to buffers containing the contents to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "rgcbToBeSigned[]",
        "description": "Array of sizes, in bytes, for the content buffers pointed to in rgpbToBeSigned."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppSignerCert",
        "description": "A pointer to a  pointer to a CERT_CONTEXT structure of a signer certificate. When you have finished using the certificate context, free it by calling the CertFreeCertificateContext function. A pointer to a CERT_CONTEXT structure will not be returned if this parameter is NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptVerifyMessageHash function verifies the hash of specified content.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following lists the error codes most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyMessageHash",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_HASH_MESSAGE_PARA",
        "name": "pHashPara",
        "description": "A pointer to a  CRYPT_HASH_MESSAGE_PARA structure containing hash parameters."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbHashedBlob",
        "description": "A pointer to a buffer containing original content and its hash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHashedBlob",
        "description": "The size, in bytes, of the original hash buffer."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbToBeHashed",
        "description": "A pointer to a buffer to receive the original content that was hashed.     This parameter can be NULL if the original content is not needed for additional processing, or to set the size of the original content for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbToBeHashed",
        "description": "A pointer to a DWORD specifying the size, in bytes, of the pbToBeHashed buffer. When the function returns, this variable contains the size, in bytes, of the original content copied to pbToBeHashed. The original content will not be returned if this parameter is NULL.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the computed hash. This parameter can be NULL if the created hash is not needed for additional processing, or to set the size of the original content for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD specifying the size, in bytes, of the pbComputedHash buffer. When the function returns, this variable contains the size, in bytes, of the created hash. The hash is not returned if this parameter is NULL.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptVerifyMessageSignature function verifies a signed message's signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. This does not necessarily mean that the signature was verified. In the case of a detached message, the variable pointed to by pcbDecoded will contain zero. In this case, this function will return nonzero, but the signature is not verified. To verify the signature of a detached message, use the CryptVerifyDetachedMessageSignature function. If the function fails, it returns zero. For extended error information, call  GetLastError. The following table shows the error codes most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "For a verified signer and message, ppSignerCert is updated with the  CERT_CONTEXT of the signer. It must be freed by calling  CertFreeCertificateContext. Otherwise, ppSignerCert is set to NULL. For a message that contains only certificates and CRLs, pcbDecoded is set to NULL. For an example that uses this function, see  Example C Program: Signing a Message and Verifying a Message Signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyMessageSignature",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_VERIFY_MESSAGE_PARA",
        "name": "pVerifyPara",
        "description": "A pointer to a  CRYPT_VERIFY_MESSAGE_PARA structure that contains verification parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSignerIndex",
        "description": "The index of the desired signature. There can be more than one signature. CryptVerifyMessageSignature can be called repeatedly, incrementing dwSignerIndex each time. Set this parameter to zero for the first signer, or if there is only one signer. If the function returns FALSE, and GetLastError returns CRYPT_E_NO_SIGNER, the previous call processed the last signer of the message."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffer that contains the signed message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignedBlob",
        "description": "The size, in bytes, of the signed message buffer."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbDecoded",
        "description": "A pointer to a buffer to receive the decoded message.     This parameter can be NULL if the decoded message is not needed for additional processing or to set the size of the message for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbDecoded",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the pbDecoded buffer. When the function returns, this DWORD contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is NULL.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppSignerCert",
        "description": "The address of a CERT_CONTEXT structure pointer that receives the certificate of the signer. When you have finished using this structure, free it by passing this pointer to the CertFreeCertificateContext function. This parameter can be NULL if the signer's certificate is not needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptVerifyMessageSignatureWithKey function verifies a signed message's signature by using specified public key information.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. The following table shows the error codes most commonly returned by the  \t\t       GetLastError function.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyMessageSignatureWithKey",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_KEY_VERIFY_MESSAGE_PARA",
        "name": "pVerifyPara",
        "description": "A pointer to a  CRYPT_KEY_VERIFY_MESSAGE_PARA structure that contains verification parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPublicKeyInfo",
        "description": "A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key that is used to verify the signed message. If NULL, the signature is not verified."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbSignedBlob",
        "description": "A pointer to a buffer that contains the signed message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignedBlob",
        "description": "The size, in bytes, of the signed message buffer."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbDecoded",
        "description": "A pointer to a buffer to receive the decoded message.     This parameter can be NULL if the decoded message is not needed for additional processing or to set the size of the message for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbDecoded",
        "description": "A pointer to a DWORD value that specifies the size, in bytes, of the pbDecoded buffer. When the function returns, this DWORD contains the size, in bytes, of the decoded message. The decoded message will not be returned if this parameter is NULL.     Note  When processing the data returned, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertCompareCertificate function determines whether two certificates are identical by comparing the issuer name and serial number of the certificates.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the certificates are identical and the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For an example that uses this function, see Example C Program: Deleting Certificates from a Certificate Store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCompareCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertId1",
        "description": "A pointer to the  CERT_INFO for the first certificate in the comparison."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertId2",
        "description": "A pointer to the CERT_INFO for the second certificate in the comparison."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertCompareCertificateName function compares two certificate  CERT_NAME_BLOB structures to determine whether they are identical. The CERT_NAME_BLOB structures are used for the subject and the issuer of certificates.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the names are identical and the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For an example that uses this function, see  Example C Program: Deleting Certificates from a Certificate Store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCompareCertificateName",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pCertName1",
        "description": "A pointer to a CERT_NAME_BLOB for the first name in the comparison. For more information, see  CRYPT_INTEGER_BLOB."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pCertName2",
        "description": "A pointer to a CERT_NAME_BLOB for the second name in the comparison."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertCompareIntegerBlob function compares two integer BLOBs to determine whether they represent equal numeric values.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the representations of the integer BLOBs are identical and the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "Before doing the comparison, most significant bytes with a value of 0x00 are removed from a positive number. Positive here means that the most significant bit in the next nonzero byte is not set. Most significant bytes with a value of 0xFF are removed from a negative number. Negative here means that the most significant bit in the next non-0xFF byte is set. This produces the unique representation of that integer, as shown in the following table.  Multiple-byte integers are treated as little-endian. The least significant byte is pbData[0]. The most significant byte is pbData[cbData - 1], that is, 0xFFFFFF88 is stored in four bytes as: {0x88, 0xFF, 0xFF, 0xFF} For an example that uses this function, see  Example C Program: Using CertOIDToAlgId and CertCompareIntegerBlob. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertCompareIntegerBlob",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_INTEGER_BLOB",
        "name": "pInt1",
        "description": "A pointer to a  CRYPT_INTEGER_BLOB structure that contains the first integer in the comparison."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_INTEGER_BLOB",
        "name": "pInt2",
        "description": "A pointer to a CRYPT_INTEGER_BLOB structure that contains the second integer in the comparison."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertComparePublicKeyInfo function compares two encoded public keys to determine whether they are identical.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the public keys are identical and the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For an example that uses this function, see  Example C Program: Deleting Certificates from a Certificate Store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertComparePublicKeyInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPublicKey1",
        "description": "A pointer to the  CERT_PUBLIC_KEY_INFO for the first public key in the comparison."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPublicKey2",
        "description": "A pointer to the CERT_PUBLIC_KEY_INFO for the second public key in the comparison."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertFindAttribute function finds the first attribute in the  CRYPT_ATTRIBUTE array, as identified by its object identifier (OID). This function can be used in the processing of a decoded certificate request. A  CERT_REQUEST_INFO structure is derived from a decoded certificate request. The rgAttribute array is retrieved from that structure and passed to this function in the rgAttr parameter. This function determines whether a particular attribute is in the array, and if so, returns a pointer to it.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to the attribute, if one is found. Otherwise, NULL is returned. ",
    "remarks": "",
    "return_type": "PCRYPT_ATTRIBUTE",
    "category": "Cryptography",
    "name": "CertFindAttribute",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszObjId",
        "description": "A pointer to the object identifier (OID) to use in the search."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cAttr",
        "description": "Number of attributes in the rgAttr array."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_ATTRIBUTE",
        "name": "rgAttr[]",
        "description": "Array of  CRYPT_ATTRIBUTE structures."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CertFindExtension function finds the first extension in the  CERT_EXTENSION array, as identified by its object identifier (OID). This function can be used in the processing of a decoded certificate. A  CERT_INFO structure is derived from a decoded certificate. The CERT_INFO structure's rgExtension member is  passed to CertFindExtension in the rgExtensions parameter. This function determines whether a particular extension is in the array, and if so, returns a pointer to it",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to the extension, if one is found. Otherwise, NULL is returned. ",
    "remarks": "",
    "return_type": "PCERT_EXTENSION",
    "category": "Cryptography",
    "name": "CertFindExtension",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszObjId",
        "description": "A pointer to the object identifier (OID) to use in the search."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cExtensions",
        "description": "Number of extensions in the rgExtensions array."
      },
      {
        "in_out": "_In_",
        "type": "CERT_EXTENSION",
        "name": "rgExtensions[]",
        "description": "Array of  CERT_EXTENSION structures."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertFindRDNAttr function finds the first RDN attribute identified by its object identifier (OID) in a list of the Relative Distinguished Names (RDN).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to the attribute, if one is found. Otherwise, NULL is returned. ",
    "remarks": "",
    "return_type": "PCERT_RDN_ATTR",
    "category": "Cryptography",
    "name": "CertFindRDNAttr",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszObjId",
        "description": "A pointer to the object identifier (OID) to use In the search."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_INFO",
        "name": "pName",
        "description": "A pointer to a  CERT_NAME_INFO structure containing the list of the Relative Distinguished Names to be searched."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetIntendedKeyUsage function acquires the intended key usage bytes from a certificate. The intended key usage can be in either the szOID_KEY_USAGE (\"2.5.29.15\") or szOID_KEY_ATTRIBUTES (\"2.5.29.2\") extension.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the certificate does not have any intended key usage bytes, FALSE is returned and pbKeyUsage is zeroed. Otherwise, TRUE is returned and up to cbKeyUsage number of bytes are copied into pbKeyUsage. Any remaining bytes not copied are zeroed. GetLastError returns zero if none of the required extensions is found. If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetIntendedKeyUsage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertInfo",
        "description": "A pointer to  CERT_INFO structure of the specified certificate."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbKeyUsage",
        "description": "A pointer to a buffer to receive the intended key usage. The following list shows currently defined values. These can be combined by using bitwise-OR operations.  CERT_DATA_ENCIPHERMENT_KEY_USAGE CERT_DIGITAL_SIGNATURE_KEY_USAGE CERT_KEY_AGREEMENT_KEY_USAGE CERT_KEY_CERT_SIGN_KEY_USAGE CERT_KEY_ENCIPHERMENT_KEY_USAGE CERT_NON_REPUDIATION_KEY_USAGE CERT_OFFLINE_CRL_SIGN_KEY_USAGE"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbKeyUsage",
        "description": "The size, in bytes, of the buffer pointed to by pbKeyUsage. Currently, the intended key usage occupies 1 or 2 bytes of data."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertGetPublicKeyLength function acquires the bit length of public/private keys from a public key BLOB.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the length of the public/private keys in bits. If unable to determine the key's length, returns zero. Call GetLastError to see the reason for any failures. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertGetPublicKeyLength",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPublicKey",
        "description": "A pointer to the public key BLOB containing the keys for which the length is being retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CertIsRDNAttrsInCertificateName function compares the attributes in the certificate name with the specified  CERT_RDN to determine whether all attributes are included there. The comparison iterates through the CERT_RDN and looks for an attribute match in any of the CERT_RDNs of the certificate name.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds and all of the RDN values in the specified CERT_RDN are in the certificate name, the return value is nonzero (TRUE). If the function fails, or if there are  RDN values in the specified CERT_RDN that are not in the certificate name, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists some possible error codes.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "Currently, only an exact, case-sensitive match is supported. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertIsRDNAttrsInCertificateName",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the pRDN was initialized with Unicode strings as in  CryptEncodeObject with lpszStructType set to X509_UNICODE_NAME. CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG is set to do a case insensitive match. Otherwise, an exact, case sensitive match is done."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pCertName",
        "description": "A pointer to a  CRYPT_INTEGER_BLOB that contains the encoded subject or issuer name."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_RDN",
        "name": "pRDN",
        "description": "Array of  CERT_RDN structures that contain the attributes to be found in the name. The  CERT_RDN_ATTR member of the CERT_RDN structure behaves according to the following rules.  If pszObjId is NULL, the attribute object identifier (OID) is ignored. If dwValueType is CERT_RDN_ANY_TYPE, the value type is ignored. If the pbData member of Value is  NULL, any value can be a match."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. This function has the following error codes.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertIsStrongHashToSign",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_STRONG_SIGN_PARA",
        "name": "pStrongSignPara",
        "description": "Pointer to a CERT_STRONG_SIGN_PARA structure that contains information about supported signing and hashing algorithms."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGHashAlgid",
        "description": "Pointer to a Unicode string that contains the name of the hashing algorithm. The following algorithms are supported:  L\"MD5\" (BCRYPT_MD5_ALGORITHM) L\"SHA1\" (BCRYPT_SHA1_ALGORITHM) L\"SHA256\" (BCRYPT_SHA256_ALGORITHM) L\"SHA256\" (BCRYPT_SHA256_ALGORITHM) L\"SHA512\" (BCRYPT_SHA512_ALGORITHM)"
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_CONTEXT",
        "name": "pSigningCert",
        "description": "Pointer to a CERT_CONTEXT structure that  contains the signing certificate. The public key algorithm in the signing certificate is checked for strength. The public key (asymmetric) algorithm is used for signing. The following signature algorithms are supported:  L\"RSA\" (BCRYPT_RSA_ALGORITHM) L\"DSA\" (BCRYPT_DSA_ALGORITHM) L\"ECDSA\" (SSL_ECDSA_ALGORITHM)  This parameter can be NULL if you want to check only whether the hashing algorithm is strong."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertVerifyCRLRevocation function check a certificate revocation list (CRL) to determine whether a subject's certificate has or has not been revoked. The new  Certificate Chain Verification Functions are recommended instead of the use of this function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the certificate is not on the CRL and therefore is valid. It returns FALSE if the certificate is on the list and therefore has been revoked and is not valid. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifyCRLRevocation",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertId",
        "description": "A pointer to the  CERT_INFO structure of the certificate to be checked against the CRL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cCrlInfo",
        "description": "Number of  CRL_INFO pointers in the rgpCrlInfo array."
      },
      {
        "in_out": "_In_",
        "type": "PCRL_INFO",
        "name": "rgpCrlInfo[]",
        "description": "Array of pointers to CRL_INFO structures."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertVerifyCRLTimeValidity function verifies the time validity of a CRL.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns a minus one (\u00e2\u0080\u00931) if the comparison time is before the ThisUpdate member of the CRL_INFO pointed to by pCrlInfo. Returns a plus one (+1) if the comparison time is after the NextUpdate time. Returns zero for valid time for the CRL. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Cryptography",
    "name": "CertVerifyCRLTimeValidity",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPFILETIME",
        "name": "pTimeToVerify",
        "description": "A pointer to FILETIME structure containing the time to be used in the verification. If set to NULL, the current time is used."
      },
      {
        "in_out": "_In_",
        "type": "PCRL_INFO",
        "name": "pCrlInfo",
        "description": "A pointer to a  CRL_INFO structure containing the CRL for which the time is to be verified."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CertVerifyRevocation function checks the revocation status of the certificates contained in the rgpvContext array. If a certificate in the list is found to be revoked, no further checking is done. This array can be a chain of certificates propagating upward from an end entity to the root authority, but this nature of the list of certificates is not required or assumed.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function successfully checks all of the contexts and none were revoked, the function returns TRUE. If the function fails, it returns FALSE and updates the CERT_REVOCATION_STATUS structure pointed to by pRevStatus as described in  CERT_REVOCATION_STATUS. When the revocation handler for any of the contexts returns FALSE due to an error, the dwError member in the structure pointed to by pRevStatus will be set by the handler to specify which error was encountered.  GetLastError returns an error code equal to the error specified in the dwError member of the CERT_REVOCATION_STATUS structure. GetLastError can be one of the following values.  ",
    "remarks": "The following example shows how pRevStatus is updated when a revocation verification problem is encountered: Consider the case where cContext is four: If CertVerifyRevocation can verify that rgpvContext[0] and rgpvContext[1] are not revoked, but cannot check rgpvContext[2], the pRevStatus member dwIndex is set to two, indicating that the context at index two has the problem, the dwError member of pRevStatus is set to CRYPT_E_NO_REVOCATION_CHECK, and FALSE is returned. If rgpvContext[2] is found to be revoked, the dwIndex member of pRevStatus is set to two, and the dwError member of pRevStatus is set to CRYPT_E_REVOKED, dwReason is updated, and FALSE is returned. In either case, both rgpvContext[0] and rgpvContext[1] are verified not to be revoked, rgpvContext[2] is the last array index checked, and rgpvContext[3] has not been checked at all. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifyRevocation",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type used. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. For either current encoding type, use X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRevType",
        "description": "Indicates the type of the context structure passed in rgpvContext. Currently only CERT_CONTEXT_REVOCATION_TYPE, the revocation of certificates, is defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cContext",
        "description": "Count of elements in the rgpvContext array."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "rgpvContext[]",
        "description": "When the dwRevType is CERT_CONTEXT_REVOCATION_TYPE, rgpvContext is an array of pointers to  CERT_CONTEXT structures. These contexts must contain sufficient information to allow the installable or registered revocation DLLs to find the revocation server. This information would normally be conveyed in an extension such as the CRLDistributionsPoints extension defined by the Internet Engineering Task Force (IETF) in PKIX Part 1.     For efficiency, the more contexts that are passed in at one time, the better."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Indicates any special processing needs. This parameter can be one of the following flags.  ValueMeaning  CERT_VERIFY_REV_CHAIN_FLAG   Verification of the chain of certificates is done assuming each certificate except the first certificate is the issuer of the certificate that precedes it. If dwRevType is not CERT_CONTEXT_REVOCATION_TYPE, no assumptions are made about the order of the contexts.   CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION   Prevents the revocation handler from accessing any network-based resources for revocation checking.   CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG   When set, dwUrlRetrievalTimeout is the cumulative time-out across all URL wire retrievals.   CERT_VERIFY_REV_SERVER_OCSP_FLAG   When set, this function only uses online certificate status protocol (OCSP) for revocation checking. If the certificate does not have any OCSP AIA URLs, the dwError member of the pRevStatus parameter is set to CRYPT_E_NOT_IN_REVOCATION_DATABASE."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCERT_REVOCATION_PARA",
        "name": "pRevPara",
        "description": "Optionally set to assist in finding the issuer. For details, see the  CERT_REVOCATION_PARA structure."
      },
      {
        "in_out": "_Inout_",
        "type": "PCERT_REVOCATION_STATUS",
        "name": "pRevStatus",
        "description": "Only the cbSize member of the  CERT_REVOCATION_STATUS pointed to by pRevStatus needs to be set before CertVerifyRevocation is called. If the function returns FALSE, this structure's members will contain error status information. For more information, see  CERT_REVOCATION_STATUS. For a description of how pRevStatus is updated when a revocation verification problem is encountered, see Remarks."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertVerifyTimeValidity function verifies the time validity of a certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns a minus one if the comparison time is before the NotBefore member of the  CERT_INFO structure. Returns a plus one if the comparison time is after the NotAfter member. Returns zero for valid time for the certificate. See  Example C Program: Certificate Store Operations. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Cryptography",
    "name": "CertVerifyTimeValidity",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPFILETIME",
        "name": "pTimeToVerify",
        "description": "A pointer to a FILETIME structure containing the comparison time. If NULL, the current time is used."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pCertInfo",
        "description": "A pointer to the  CERT_INFO structure of the certificate for which the time is being verified."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertVerifyValidityNesting function verifies that a subject certificate's time validity nests correctly within its issuer's time validity.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the NotBefore time of the subject's certificate is after the NotBefore time of the issuer's certificate and the NotAfter time of the subject's certificate is not after the NotAfter time of the issuer's certificate. Otherwise, returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertVerifyValidityNesting",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pSubjectInfo",
        "description": "A pointer to the  CERT_INFO structure of the subject certificate."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pIssuerInfo",
        "description": "A pointer to the CERT_INFO structure of the issuer certificate."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[The CryptExportPKCS8  function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use the PFXExportCertStoreEx function.]",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. The following error codes are specific to this function.  If the function fails, GetLastError  may return an ASN.1 encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "This function is only supported for asymmetric keys. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportPKCS8",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "An HCRYPTPROV  variable that contains  the cryptographic service provider (CSP). This is a handle to the CSP obtained by calling CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "A DWORD  variable that contains  the key specification. The following dwKeySpec values are defined for the default provider.  ValueMeaning  AT_KEYEXCHANGE   Keys used to encrypt/decrypt session keys.   AT_SIGNATURE   Keys used to create and verify digital signatures."
      },
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "pszPrivateKeyObjId",
        "description": "An  LPSTR  variable that contains  the private key  object identifier (OID)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter should be zero if pbPrivateKeyBlob is NULL and 0x8000 otherwise."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter must be set to NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbPrivateKeyBlob",
        "description": "A pointer to an  array of BYTE structures to receive the private key  to be exported.    The private key will contain the information in a PKCS #8 PrivateKeyInfo Abstract Syntax Notation One (ASN.1) type found in the PKCS #8 standard. For memory allocation purposes, you can get the size of the private key  to be exported by setting this parameter to NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbPrivateKeyBlob",
        "description": "A pointer to a DWORD that may contain, on input, the size, in  bytes,  of the memory allocation needed to contain the pbPrivateKeyBlob. If pbPrivateKeyBlob is NULL, this parameter will return the size of the memory allocation needed for a second call to the function. For more information, see  Retrieving Data of Unknown Length."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The CryptExportPKCS8Ex function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use the PFXExportCertStoreEx function.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The following error codes are specific to this function.  If the function fails, GetLastError   returns an ASN.1 encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "This function is only supported for asymmetric keys. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportPKCS8Ex",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PKCS8_EXPORT_PARAMS*",
        "name": "psExportParams",
        "description": "A pointer to a CRYPT_PKCS8_EXPORT_PARAMS structure that contains information about the key to export."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter should be zero if pbPrivateKeyBlob is NULL and 0x8000 otherwise."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter must be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbPrivateKeyBlob",
        "description": "A pointer to an  array of BYTE structures to receive the private key  to be exported.    The private key will contain the information in a PKCS #8 PrivateKeyInfo Abstract Syntax Notation One (ASN.1) type found in the PKCS #8 standard. For memory allocation purposes, you can get the size of the private key  to be exported by setting this parameter to NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbPrivateKeyBlob",
        "description": "A pointer to a DWORD that may contain, on input, the size, in  bytes,  of the memory allocation needed to contain the pbPrivateKeyBlob. If pbPrivateKeyBlob is NULL, this parameter will return the size of the memory allocation needed for a second call to the function. For more information, see  Retrieving Data of Unknown Length."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptExportPublicKeyInfo function exports the public key information associated with the corresponding private key of the provider. For an updated version of this function, see  CryptExportPublicKeyInfoEx.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. This function has the following error codes.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Making a Certificate Request. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportPublicKeyInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "Handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been created by using the  CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the container of the provider. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an NCRYPT_KEY_HANDLE is used in the hCryptProvOrNCryptKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_Out_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO  structure to receive the public key information to be exported. To set the size of this information for memory allocation purposes, this parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbInfo",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function returns, the DWORD contains the number of bytes needed for the return buffer. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptExportPublicKeyInfoEx function exports the public key information associated with the provider's corresponding private key. This function allows the application to specify the public key algorithm, overriding the default provided by the cryptographic service provider (CSP).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. This function has the following error codes.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportPublicKeyInfoEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "A handle of the CSP to use when exporting the public key information. This handle must be an HCRYPTPROV handle that has been created by using the  CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an NCRYPT_KEY_HANDLE is used in the hCryptProvOrNCryptKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "pszPublicKeyObjId",
        "description": "Specifies the public key algorithm. Note  pszPublicKeyObjId and dwCertEncodingType are used together to determine the installable CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC to call. If an installable function was not found for the pszPublicKeyObjId parameter, an attempt is made to export the key as an RSA Public Key (szOID_RSA_RSA)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD flag value that indicates how the public key information  is exported. The flag value is passed directly to the CryptFindOIDInfo function when mapping the public key object identifier to the corresponding CNG public key algorithm Unicode string. The following flag values can be set.  ValueMeaning   CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.    CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter is reserved for future use and  must be set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO  structure to receive the public key information to be exported. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbInfo",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptExportPublicKeyInfoFromBCryptKeyHandle function exports the public key information associated with a provider's corresponding  private key.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "The function returns TRUE if it succeeds; otherwise, it returns FALSE. ",
    "remarks": "If the CryptExportPublicKeyInfoFromBCryptKeyHandle function is unable to find an installable OID function for the OID specified by the pszPublicKeyObjId parameter, it attempts to export the key as a RSA Public Key (szOID_RSA_RSA).  If the key is exported as a RSA Public Key, the values of the dwFlags and pvAuxInfo parameters are not used. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptExportPublicKeyInfoFromBCryptKeyHandle",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BCRYPT_KEY_HANDLE",
        "name": "hBCryptKey",
        "description": "The handle of the key from which to export the public key information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type to be matched.      \t\t\t\t\t\t This value can be a bitwise combination of the currently defined encoding types:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSTR",
        "name": "pszPublicKeyObjId",
        "description": "A pointer to the object identifier (OID) that identifies the installable function to  use to export the key. If the high-order word of the OID is nonzero, pszPublicKeyObjId is a pointer to either an OID string such as \"2.5.29.1\" or an ASCII string such as \"file.\" If the high-order word of the OID is zero, the low-order word specifies the integer identifier to be used as the object identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A DWORD value that indicates how the public key information  is exported.  ValueMeaning  CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG 0x80000000   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.    CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG 0x40000000   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag."
      },
      {
        "in_out": "_In_opt_",
        "type": "void",
        "name": "pvAuxInfo",
        "description": "This parameter is reserved for future use and  must be set to NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO  structure to receive the public key information to be exported. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD",
        "name": "pcbInfo",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptFindCertificateKeyProvInfo function enumerates the cryptographic providers and their containers to find the private key that corresponds to the certificate's public key.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "TRUE if the function finds a private key that corresponds to the certificate's public key within a searched container; FALSE if the function fails to find a container or a private key within a container. GetLastError returns the following error:  ",
    "remarks": "This function enumerates the cryptographic providers and their containers to find the private key that corresponds to the certificate's public key. For a match, the function updates the certificate's CERT_KEY_PROV_INFO_PROP_ID property. If the CERT_KEY_PROV_INFO_PROP_ID is already set, it is checked to determine whether it matches the provider's public key. For a match, the function skips the previously mentioned enumeration. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptFindCertificateKeyProvInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCert",
        "description": "A pointer to the  CERT_CONTEXT structure of the certificate to use when exporting public key information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or one of the following values. \t\t\t\t\t\t \t\t\t\t\t  ValueMeaning  CRYPT_FIND_USER_KEYSET_FLAG   Restricts the search to the user container. The default is to search both the user and machine containers.   CRYPT_FIND_MACHINE_KEYSET_FLAG   Restricts the search to the machine container. The default is to search both the user and machine containers.   CRYPT_FIND_SILENT_KEYSET_FLAG   The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error.      The following flags determine which technology is used to obtain the key. If none of these flags is present, this function will only attempt to obtain the key by using CryptoAPI. Windows Server 2003 and Windows XP:  These flags are not supported.  ValueMeaning  CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG   This function will attempt to obtain the key by using CryptoAPI. If that fails, this function will attempt to obtain the key by using the Cryptography API:  Next Generation (CNG).  The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.   CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG    This function will only attempt to obtain the key by using CNG and will not use CryptoAPI to obtain the key.  The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key.   CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG   This function will attempt to obtain the key by using CNG. If that fails, this function will attempt to obtain the key by using CryptoAPI.  The CERT_KEY_PROV_INFO_PROP_ID property of the certificate is set to zero if CNG is used to obtain the key."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptFindLocalizedName function finds the localized name for the specified name, such as the localize name of the \"Root\" system store. This function can be used before displaying any UI that included a name that might have a localized form.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the specified name is found, a pointer to the localized name is returned. The returned pointer must not be freed. If the specified name is not found, NULL is returned. ",
    "remarks": "CryptSetOIDFunctionValue can be called as follows to register additional localized strings. dwEncodingType = CRYPT_LOCALIZED_NAME_ENCODING_TYPE pszFuncName = CRYPT_OID_FIND_LOCALIZED_NAME_FUNC pszOID = CRYPT_LOCALIZED_NAME_OID pwszValueName = Name to be localized, for example, L\"ApplicationStore\" dwValueType = REG_SZ pbValueData = pointer to the Unicode localized string cbValueData = (wcslen(Unicode localized string) + 1) * sizeof(WCHAR) CryptSetOIDFunctionValue can be called as follows to unregister the localized strings. pbValueData = NULL cbValueData = 0. The registered names are searched before the preinstalled names.  For an example that uses this function, see  Example C Program: Setting and Getting Certificate Store Properties. ",
    "return_type": "LPCWSTR",
    "category": "Cryptography",
    "name": "CryptFindLocalizedName",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCryptName",
        "description": "A pointer to a specified name. An internal table is searched to compare a predefined localized name to the specified name. The search matches the localized name by using a case insensitive string comparison.     Note  Localized names for the predefined system stores (\"Root\", \"My\") and predefined physical stores (\".Default\", \".LocalMachine\") are preinstalled as resource strings in Crypt32.dll."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptHashCertificate function hashes the entire encoded content of a certificate including its signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle of the cryptographic service provider (CSP) to use to compute the hash.    This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific CSP in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "Algid",
        "description": "An  \t\t\t\t\t\tALG_ID structure that specifies the hash algorithm to use. If Algid is zero, the default hash algorithm, SHA1, is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Value to be passed to the hash API. For details, see  CryptCreateHash."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "Address of the encoded content to be hashed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The size, in bytes, of the encoded content."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the computed hash.     To set the size of this information for memory allocation purposes, this parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptHashCertificate2 function hashes a block of data by using a CNG hash provider.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. Some of the possible error codes are identified in the following topics. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashCertificate2",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGHashAlgid",
        "description": "The address of a null-terminated Unicode string that contains the CNG hash algorithm identifier of the hash algorithm to use to hash the certificate. This can be one of the CNG Algorithm Identifiers that represents a hash algorithm or any other registered hash algorithm identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. No flags are defined for this function."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "The address of an array of bytes to be hashed. The cbEncoded parameter contains the size of this array."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The number of elements in the pbEncoded array."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "The address of a buffer that receives the computed hash. The variable pointed to by the pcbComputedHash parameter contains the size of this buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "The address of a DWORD variable that, on entry, contains the size, in bytes, of the  pbComputedHash buffer. After this function returns, this variable contains the number of bytes copied to the pbComputedHash buffer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptHashPublicKeyInfo function encodes the public key information in a  CERT_PUBLIC_KEY_INFO structure and computes the hash of the encoded bytes. The hash created is used with  key identifier functions.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashPublicKeyInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle of the cryptographic service provider (CSP) to use to compute the hash.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "Algid",
        "description": "An ALG_ID structure that specifies the CryptoAPI hash algorithm to use. If Algid is zero, the default hash algorithm, SHA1, is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Values to be passed on to  CryptCreateHash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO structure that contains the public key information to be encoded and hashed."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the computed hash. To set the size of this information for memory allocation purposes, this parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptHashToBeSigned function computes the hash of the encoded content from a signed and encoded certificate. The hash is performed on only the \"to be signed\" encoded content and its signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptHashToBeSigned",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle of the cryptographic service provider (CSP) to use to compute the hash.This parameter's data type is HCRYPTPROV. Unless there is a strong reason for passing in a specific cryptographic provider in hCryptProv, zero is passed in. Passing in zero causes the default RSA or Digital Signature Standard (DSS) provider to be acquired before doing hash, signature verification, or recipient encryption operations."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "Address of a buffer that contains the content to be hashed. This is the encoded form of a  CERT_SIGNED_CONTENT_INFO."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The size, in bytes, of the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to a buffer to receive the computed hash. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbComputedHash",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pbComputedHash parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The CryptImportPKCS8 function is no longer available for use as of Windows Server 2008 and Windows Vista. Instead, use the PFXImportCertStore function.]",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. The following error code is specific to this function.  If the function fails, GetLastError  may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "CryptImportPKCS8  calls the PCRYPT_RESOLVE_HCRYPTPROV_FUNC function  by using the CRYPT_PKCS8_IMPORT_PARAMS structure contained in the sPrivateKeyAndParams parameter to retrieve a handle of the provider to which to import the key.  If  PCRYPT_RESOLVE_HCRYPTPROV_FUNC is NULL, then the default provider is used. This function is only supported for asymmetric keys. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptImportPKCS8",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PKCS8_IMPORT_PARAMS",
        "name": "sPrivateKeyAndParams",
        "description": "A CRYPT_PKCS8_IMPORT_PARAMS structure that contains the private key BLOB and corresponding parameters."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A  DWORD  value. This parameter can be one of the following values, a combination of them, or a null value.  ValueMeaning  CRYPT_EXPORTABLE   The key being imported is eventually to be reexported. If this flag is not used, then calls to  CryptExportKey with the key handle fail.   CRYPT_USER_PROTECTED   If this flag is set, the CSP notifies the user through a dialog box or some other method when certain actions are attempted using this key. The precise behavior is specified by the CSP or the CSP type used.  If the provider context was acquired with CRYPT_SILENT set, using this flag causes a failure, and the last error is set to NTE_SILENT_CONTEXT."
      },
      {
        "in_out": "_Out_opt_",
        "type": "HCRYPTPROV*",
        "name": "phCryptProv",
        "description": "A pointer to the HCRYPTPROV  to receive the handle of the provider into which the key is imported by calling the CryptImportPKCS8 function.   When you have finished using the handle, free the handle by calling CryptReleaseContext.  This parameter can be NULL, in which case the handle of the provider is not returned."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptImportPublicKeyInfo function converts and imports the public key information into the provider and returns a handle of the public key.  CryptImportPublicKeyInfoEx provides a revised version of this function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "This function is normally used to retrieve the public key from a certificate. This is done by passing the CERT_PUBLIC_KEY_INFO structure from a filled-in certificate structure as shown in the following pseudocode. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptImportPublicKeyInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "The handle of the cryptographic service provider (CSP) to use when importing the public key. This handle must have already been created using  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "The address of a  CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "The address of an HCRYPTKEY variable that receives the handle of the imported public key. When you have finished using the public key, release the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptImportPublicKeyInfoEx function imports public key information into the cryptographic service provider (CSP) and returns a handle of the public key. Additional parameters to override defaults are provided to supplement those in  CERT_PUBLIC_KEY_INFO.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "This function is normally used to retrieve the public key from a certificate. This is done by passing the CERT_PUBLIC_KEY_INFO structure from a filled-in certificate structure as shown in the following pseudocode. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptImportPublicKeyInfoEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "The handle of the CSP to receive the imported public key. This handle must have already been created using  CryptAcquireContext."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "the address of a  CERT_PUBLIC_KEY_INFO structure that contains the public key to import into the provider. Note  The pzObjId member of the Algorithm member pointed to by the pInfo  and dwCertEncodingType parameters determine an installable CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC callback function. If an installable function is not found, an attempt is made to import the key as an RSA Public Key (szOID_RSA_RSA)."
      },
      {
        "in_out": "_In_",
        "type": "ALG_ID",
        "name": "aiKeyAlg",
        "description": "An ALG_ID structure that contains a CSP-specific algorithm to override the CALG_RSA_KEYX default algorithm."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phKey",
        "description": "The address of an HCRYPTKEY variable that receives the handle of the imported public key. When you have finished using the public key, release the handle by calling the CryptDestroyKey function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptImportPublicKeyInfoEx2 function imports a public key into the CNG asymmetric provider that corresponds to the public key object identifier (OID) and returns a CNG handle to the key.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. Possible error codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptImportPublicKeyInfoEx2",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "The address of a CERT_PUBLIC_KEY_INFO structure that contains the public key information to import into the provider."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.   CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag.     These flags are passed in the dwKeyType parameter of the CryptFindOIDInfo function when mapping the public key object identifier to the corresponding CNG public key algorithm identifier."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "The address of a BCRYPT_KEY_HANDLE variable that receives the handle of the imported key. When this handle is no longer needed, you must release it by calling the BCryptDestroyKey function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptMemAlloc function allocates memory for a buffer. It is used by all Crypt32.lib functions that return allocated buffers.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to the buffer allocated. If the function fails, NULL is returned. When you have finished using the buffer, free the memory by calling the CryptMemFree function. ",
    "remarks": "",
    "return_type": "LPVOID",
    "category": "Cryptography",
    "name": "CryptMemAlloc",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSize",
        "description": "Number of bytes to be allocated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptMemFree function frees memory allocated by  CryptMemAlloc or  CryptMemRealloc.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "CryptMemFree",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pv",
        "description": "A pointer to the buffer to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptMemRealloc function frees the memory currently allocated for a buffer and allocates memory for a new buffer.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to the buffer allocated. If the function fails, NULL is returned. When you have finished using the buffer, free the memory by calling the CryptMemFree function. ",
    "remarks": "",
    "return_type": "LPVOID",
    "category": "Cryptography",
    "name": "CryptMemRealloc",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pv",
        "description": "A pointer to a currently allocated buffer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cbSize",
        "description": "Number of bytes to be allocated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The CryptQueryObject function retrieves information about the contents of a cryptography API object, such as a certificate, a certificate revocation list, or a certificate trust list. The object can either reside in a structure in memory or be contained in a file.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptQueryObject",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwObjectType",
        "description": "Indicates the type of the object to be queried. This must be one of the following values.  ValueMeaning  CERT_QUERY_OBJECT_BLOB   The object is stored in a structure in memory.   CERT_QUERY_OBJECT_FILE   The object is stored in a file."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvObject",
        "description": "A pointer to the object to be queried.  \t\t\t\t\tThe type of data pointer depends on the contents of the dwObjectType parameter.  dwObjectType valueMeaning  CERT_QUERY_OBJECT_BLOB   This parameter is a pointer to a CERT_BLOB, or similar, structure that contains the object to query.   CERT_QUERY_OBJECT_FILE   This parameter is a pointer to a null-terminated Unicode string that contains the path and name of the file to query."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwExpectedContentTypeFlags",
        "description": "Indicates the expected content type. This can be one of the following values.  ValueMeaning  CERT_QUERY_CONTENT_FLAG_ALL   The content can be any type. This does not include the CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD flag. If this flag is specified, this function will attempt to obtain information about the object, trying different content types until the proper content type is found or the content types are exhausted. This is obviously inefficient, so this flag should only be used if the content type is not known.   CERT_QUERY_CONTENT_FLAG_CERT   The content is a single certificate.   CERT_QUERY_CONTENT_FLAG_CERT_PAIR   The content is an Abstract Syntax Notation One (ASN.1) encoded X509_CERT_PAIR (an encoded certificate pair that contains either forward, reverse, or forward and reverse cross certificates).   CERT_QUERY_CONTENT_FLAG_CRL   The content is a single CRL.   CERT_QUERY_CONTENT_FLAG_CTL   The content is a single CTL.   CERT_QUERY_CONTENT_FLAG_PFX   The content is a PFX (PKCS #12) packet, but it will not be loaded by this function. You can use the PFXImportCertStore function to load this into a store.   CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD   The content is a PFX (PKCS #12) packet and will be loaded by this function subject to the conditions specified in the following note. Note  If the PFX packet contains an embedded password that is not an empty string or NULL, and the password was not protected to an Active Directory (AD) principal that includes the calling user, this function will not be able to decrypt the PFX packet. The packet can be decrypted, however, if the password used when the PFX packet was created was encrypted to an AD principal and the user, as part of that principal, has permission to decrypt the password. For more information, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. You can protect PFX passwords to an AD principal beginning in Windows 8 and Windows Server 2012.    Windows Server 2003 and Windows XP:  This value is not supported.   CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED   The content is a PKCS #7 signed message.   CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED   The content is an embedded PKCS #7 signed message.   CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED   The content is a PKCS #7 unsigned message.   CERT_QUERY_CONTENT_FLAG_PKCS10   The content is a PKCS #10 message.   CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT   The content is a serialized single certificate.   CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL   The content is a serialized single CRL.   CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL   The content is serialized single CTL.   CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE   The content is a serialized store."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwExpectedFormatTypeFlags",
        "description": "Indicates the expected format of the returned type. This can be one of the following values.  ValueMeaning  CERT_QUERY_FORMAT_FLAG_ALL   The content can be returned in any format.   CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED   The content should be returned in ASCII hex-encoded format with a \"{ASN}\" prefix.   CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED   The content should be returned in Base64 encoded format.   CERT_QUERY_FORMAT_FLAG_BINARY   The content should be returned in binary format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwMsgAndCertEncodingType",
        "description": "A pointer to a DWORD value that receives the type of encoding used in the message. If this information is not needed, set this parameter to NULL.  This parameter can receives a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS 7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwContentType",
        "description": "A pointer to a DWORD value that receives the actual type of the content. If this information is not needed, set this parameter to NULL. The returned content type can be one of the following values.  ValueMeaning  CERT_QUERY_CONTENT_CERT   The content is a single certificate.   CERT_QUERY_CONTENT_CERT_PAIR   The content is an ASN.1 encoded X509_CERT_pair.   CERT_QUERY_CONTENT_CRL   The content is a single CRL.   CERT_QUERY_CONTENT_CTL   The content is a single CTL.   CERT_QUERY_CONTENT_PFX   The content is a PFX (PKCS #12) packet. This function only verifies that the object is a PKCS #12 packet. The PKCS #12 packet is not loaded into a certificate store.   CERT_QUERY_CONTENT_PFX_AND_LOAD   The content is a PFX (PKCS #12) packet, and it has been loaded into a certificate store. Windows Server 2003 and Windows XP:  This value is not supported.   CERT_QUERY_CONTENT_PKCS7_SIGNED   The content is a PKCS #7 signed message.   CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED   The content is an embedded PKCS #7 signed message.   CERT_QUERY_CONTENT_PKCS7_UNSIGNED   The content is a PKCS #7 unsigned message.   CERT_QUERY_CONTENT_PKCS10   The content is a PKCS #10 message.   CERT_QUERY_CONTENT_SERIALIZED_CERT   The content is a serialized single certificate.   CERT_QUERY_CONTENT_SERIALIZED_CRL   The content is a serialized single CRL.   CERT_QUERY_CONTENT_SERIALIZED_CTL   The content is a serialized single CTL.   CERT_QUERY_CONTENT_SERIALIZED_STORE   The content is a serialized store."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwFormatType",
        "description": "A pointer to a DWORD value that receives the actual format type of the content. If this information is not needed, set this parameter to NULL. The returned format type can be one of the following values.  ValueMeaning  CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED   The content is in ASCII hex-encoded format with an \"{ASN}\" prefix.   CERT_QUERY_FORMAT_BASE64_ENCODED   The content is in Base64 encoded format.   CERT_QUERY_FORMAT_BINARY   The content is in binary format."
      },
      {
        "in_out": "_Out_",
        "type": "HCERTSTORE*",
        "name": "phCertStore",
        "description": "A pointer to an HCERTSTORE value that receives a handle to a certificate store that includes all of the certificates, CRLs, and CTLs in the object.  This parameter only receives a certificate store handle when the dwContentType parameter receives one of the following values. This parameter receives NULL for all other content types. CERT_QUERY_CONTENT_CERTCERT_QUERY_CONTENT_CRLCERT_QUERY_CONTENT_CTLCERT_QUERY_CONTENT_PFX_AND_LOADCERT_QUERY_CONTENT_PKCS7_SIGNEDCERT_QUERY_CONTENT_PKCS7_SIGNED_EMBEDCERT_QUERY_CONTENT_SERIALIZED_CERTCERT_QUERY_CONTENT_SERIALIZED_CRLCERT_QUERY_CONTENT_SERIALIZED_CTLCERT_QUERY_CONTENT_SERIALIZED_STORE  When you have finished using the handle, free it by passing the handle to the CertCloseStore function. If this information is not needed, set this parameter to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTMSG*",
        "name": "phMsg",
        "description": "A pointer to an HCRYPTMSG value that receives the handle of an opened message.  This parameter only receives a message handle when the dwContentType parameter receives one of the following values. This parameter receives NULL for all other content types. CERT_QUERY_CONTENT_PKCS7_SIGNEDCERT_QUERY_CONTENT_PKCS7_SIGNED_EMBEDCERT_QUERY_CONTENT_PKCS7_UNSIGNED  When you have finished using the handle, free it by passing the handle to the CryptMsgClose function. If this information is not needed, set this parameter to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "const void**",
        "name": "ppvContext",
        "description": "A pointer to a pointer that receives additional information about the object.  The format of this data depends on the value received by the dwContentType parameter. The following table lists the format of the data for the specified dwContentType value.  dwContentType valueMeaning  CERT_QUERY_CONTENT_CERT   This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCertificateContext function.   CERT_QUERY_CONTENT_CRL   This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCRLContext function.   CERT_QUERY_CONTENT_CTL   This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCTLContext function.   CERT_QUERY_CONTENT_SERIALIZED_CERT   This parameter receives a pointer to a CERT_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCertificateContext function.   CERT_QUERY_CONTENT_SERIALIZED_CRL   This parameter receives a pointer to a CRL_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCRLContext function.   CERT_QUERY_CONTENT_SERIALIZED_CTL   This parameter receives a pointer to a CTL_CONTEXT structure. When you have finished using the structure, free it by passing this pointer to the CertFreeCTLContext function.     If this information is not needed, set this parameter to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptSignAndEncodeCertificate function encodes and signs a certificate, certificate revocation list (CRL), certificate trust list (CTL), or certificate request.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. Possible error codes include, but are not limited to, the following.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. For an example that uses this function, see  Example C Program: Making a Certificate Request. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignAndEncodeCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "A handle of the cryptographic service provider (CSP) to do the signature. This handle is an HCRYPTPROV handle that has been created by using the  CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in a NCRYPT_KEY_HANDLE handle of a CNG CSP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the provider's container. This must be one of the following values. This parameter is ignored if a CNG key is passed in the hCryptProvOrNCryptKey parameter.  ValueMeaning  AT_KEYEXCHANGE   Use the key exchange key.   AT_SIGNATURE   Use the digital signature key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. This can be the following value. \t\t\t\t\t  ValueMeaning  X509_ASN_ENCODING   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to a null-terminated ANSI string that contains the type of data to be encoded and signed. The following predefined lpszStructType constants are used with encode operations.  ValueMeaning  X509_CERT_CRL_TO_BE_SIGNED   pvStructInfo is the address of a CRL_INFO structure.   X509_CERT_REQUEST_TO_BE_SIGNED   pvStructInfo is the address of a CERT_REQUEST_INFO structure.   X509_CERT_TO_BE_SIGNED   pvStructInfo is the address of a CERT_INFO structure.   X509_KEYGEN_REQUEST_TO_BE_SIGNED   pvStructInfo is the address of a CERT_KEYGEN_REQUEST_INFO structure."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvStructInfo",
        "description": "The address of a structure that contains the data to be signed and encoded. The format of this structure is determined by the lpszStructType parameter."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a  CRYPT_ALGORITHM_IDENTIFIER structure that contains the object identifier (OID) of the signature algorithm and any additional parameters needed. This function uses the following algorithm OIDs:  szOID_RSA_MD5RSA szOID_RSA_SHA1RSA szOID_X957_SHA1DSA  If the signature algorithm is a hash algorithm, the signature contains only the unencrypted hash octets. A private key is not used to encrypt the hash. dwKeySpec is not used and hCryptProvOrNCryptKey can be NULL if an appropriate default CSP can be used for hashing."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvHashAuxInfo",
        "description": "Reserved. Must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE",
        "name": "pbEncoded",
        "description": "A pointer to a buffer to receive the signed and encoded output. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When the function returns, the DWORD contains the number of bytes stored or to be stored in the buffer.     Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptSignCertificate function signs the \"to be signed\" information in the encoded signed content.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. This function has the following error codes.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSignCertificate",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_OR_NCRYPT_KEY_HANDLE",
        "name": "hCryptProvOrNCryptKey",
        "description": "Handle of the CSP that does the signature. This handle must be an HCRYPTPROV handle that has been created by using the  CryptAcquireContext function or an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function. New applications should always pass in the NCRYPT_KEY_HANDLE handle of a CNG CSP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeySpec",
        "description": "Identifies the private key to use from the provider's container. It can be AT_KEYEXCHANGE or AT_SIGNATURE. This parameter is ignored if an NCRYPT_KEY_HANDLE is used in the hCryptProvOrNCryptKey parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncodedToBeSigned",
        "description": "A pointer to the encoded content to be signed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncodedToBeSigned",
        "description": "The size, in bytes, of the encoded content, pbEncodedToBeSigned."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a  CRYPT_ALGORITHM_IDENTIFIER structure with a pszObjId member set to one of the following:  szOID_RSA_MD5RSA szOID_RSA_SHA1RSA szOID_X957_SHA1DSA szOID_RSA_SSA_PSS szOID_ECDSA_SPECIFIED  If the signature algorithm is a hash algorithm, the signature contains only the un-encrypted hash octets. A private key is not used to encrypt the hash. dwKeySpec is not used and hCryptProvOrNCryptKey can be NULL if an appropriate default CSP can be used for hashing."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvHashAuxInfo",
        "description": "Not currently used. Must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignature",
        "description": "A pointer to a buffer to receive the signed hash of the content. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignature",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pbSignature parameter. When the function returns, the DWORD contains the number of bytes stored or to be stored in the buffer. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptSIPAddProvider function registers functions that are exported by a given DLL file that implements  a Subject Interface Package (SIP).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. If the function fails, call the GetLastError function to determine the reason for failure. ",
    "remarks": "Typically, you call this function as part of an in-process COM server registration. The CryptSIPAddProvider function persists the appropriate Registry entries for the SIP provider functions. When you have finished using the added SIP provider, remove it by calling the CryptSIPRemoveProvider function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPAddProvider",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_ADD_NEWPROVIDER*",
        "name": "psNewProv",
        "description": "A pointer to a SIP_ADD_NEWPROVIDER structure that specifies the DLL file and function names to register."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptSIPCreateIndirectData function returns a SIP_INDIRECT_DATA structure that contains  a hash of  the supplied SIP_SUBJECTINFO structure, the digest algorithm, and  an encoding attribute. The hash can be used as an indirect reference to the data.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "The return value is TRUE if the function succeeds; otherwise, FALSE.  If this function returns FALSE, additional error information can be obtained by calling the GetLastError function. GetLastError will return one of the following error codes.  ",
    "remarks": "If pcbIndirectData points to a DWORD and pIndirectData points to NULL, the size of the data will be returned in pcbIndirectData. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPCreateIndirectData",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIP_SUBJECTINFO structure that contains the subject to which the indirect data reference will point."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbIndirectData",
        "description": "A pointer to a DWORD value to receive the size of the returned  SIP_INDIRECT_DATA structure."
      },
      {
        "in_out": "_Out_",
        "type": "SIP_INDIRECT_DATA*",
        "name": "pIndirectData",
        "description": "A pointer to a SIP_INDIRECT_DATA structure to receive the catalog item."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptSIPGetCaps function retrieves the capabilities of a subject interface package (SIP).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "",
    "remarks": "Unlike other SIP functions, CryptSIPGetCaps is not registered in the dispatch table. For more information, see the SIP_DISPATCH_INFO structure. Instead, callers must map the object identifier (OID) to the function entry point. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPGetCaps",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjInfo",
        "description": "Pointer to a SIP_SUBJECTINFO structure that specifies subject information data to the SIP APIs."
      },
      {
        "in_out": "_Inout_",
        "type": "SIP_CAP_SET*",
        "name": "pCaps",
        "description": "Pointer to a SIP_CAP_SET structure that defines the capabilities of an SIP."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptSIPGetSignedDataMsg function retrieves an Authenticode signature from the file.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": " If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. Some possible error codes follow.  ",
    "remarks": "Subjects include, but are not limited to, portable executable images (.exe), cabinet (.cab) images, flat files, and catalog files. Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage and retrieval. Therefore, each subject type has a unique SIP specification. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPGetSignedDataMsg",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwEncodingType",
        "description": "The encoding type of the Authenticode signature.  This parameter can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS #7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "This parameter is reserved and should be set to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignedDataMsg",
        "description": "The length, in bytes, of the buffer pointed to by the pbSignedDataMsg parameter."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignedDataMsg",
        "description": "A pointer to a buffer to receive the returned Authenticode signature.  To determine the size of the buffer needed, set the pbSignedDataMsg parameter to NULL and call the CryptSIPGetSignedDataMsg function. This function will place the required size of the buffer, in bytes, in the value pointed to by pcbSignedDataMsg. For more information, see  Retrieving Data of Unknown Length."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptSIPLoad function loads the dynamic-link library (DLL) that implements a subject interface package (SIP) and assigns appropriate library export functions to a SIP_DISPATCH_INFO structure. The exported functions must have been previously registered by calling the CryptSIPAddProvider function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns  FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPLoad",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pgSubject",
        "description": "A pointer to a GUID returned by calling the CryptSIPRetrieveSubjectGuid function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "SIP_DISPATCH_INFO*",
        "name": "pSipDispatch",
        "description": "A pointer to a SIP_DISPATCH_INFO structure that contains pointers to SIP provider functions that are specific to the subject type. The caller must initialize this structure to binary zeros, and set the cbSize member to sizeof(SIP_DISPATCH_INFO) before calling the CryptSIPLoad function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptSIPPutSignedDataMsg function stores an Authenticode signature in the target file.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": " If the function succeeds, the function returns TRUE. If the function fails, it returns  FALSE. For extended error information, call GetLastError. Some possible error codes follow.  ",
    "remarks": "Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage and retrieval. Therefore, each subject type has a unique SIP specification. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPPutSignedDataMsg",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjectInfo",
        "description": "Pointer to a SIP_SUBJECTINFO structure that contains information about the message subject."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "The encoding type of the message. This can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS #7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwIndex",
        "description": "Pointer to the message index."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignedDataMsg",
        "description": "Length, in bytes, of the buffer pointed to by the pbSignedDataMsg parameter."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbSignedDataMsg",
        "description": "Pointer to the buffer that contains the message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptSIPRemoveProvider function removes registry details of a Subject Interface Package (SIP) DLL file  added by a previous call to the CryptSIPAddProvider function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. If the function fails, call the GetLastError function to determine the reason for failure. ",
    "remarks": "Typically you call this function to unregister an in-process COM server. The CryptSIPRemoveProvider function removes the appropriate Registry entries for the SIP provider functions. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPRemoveProvider",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgProv",
        "description": "A pointer to the GUID that identifies the SIP DLL  to remove."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptSIPRemoveSignedDataMsg function removes a specified Authenticode signature.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns  FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPRemoveSignedDataMsg",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "This parameter is reserved and should be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptSIPRetrieveSubjectGuid function retrieves a GUID based on the header information in  a specified file. The GUID is used by the CryptSIPLoad function to load the subject interface package (SIP) implementation for the given file type.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns  FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPRetrieveSubjectGuid",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "FileName",
        "description": "The name of the file."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hFileIn",
        "description": "A handle to the file to check."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pgSubject",
        "description": "A GUID that identifies the subject."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  CryptSIPRetrieveSubjectGuidForCatalogFile function retrieves the subject GUID associated with the specified file.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "The return value is TRUE if the function succeeds; otherwise, FALSE.  If this function returns FALSE, additional error information can be obtained by calling the GetLastError function. GetLastError will return one of the following error codes.  ",
    "remarks": "This function only supports subject interface packages (SIPs) that are used for portable executable images (.exe), cabinet (.cab) images, and flat files. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPRetrieveSubjectGuidForCatalogFile",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "FileName",
        "description": "The name of the file. If the hFileIn parameter is set, the value in this parameter is ignored."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hFileIn",
        "description": "A handle to the file to check. This parameter must contain a valid handle if the FileName parameter is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pgSubject",
        "description": "A globally unique ID that identifies the subject."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptSIPVerifyIndirectData function validates the indirect hashed data against the supplied subject.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "The return value is TRUE if the function succeeds; otherwise, FALSE.  If this function returns FALSE, additional error information can be obtained by calling the GetLastError function. GetLastError will return one of the following error codes.  ",
    "remarks": "Subjects include, but are not limited to, portable executable images (.exe), cabinet (.cab) images, flat files, and catalog files. Each subject type uses a different subset of its data for hash calculation and requires a different procedure for storage and retrieval. Therefore each subject type has a unique subject interface package specification. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSIPVerifyIndirectData",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjectInfo",
        "description": "A pointer to a SIP_SUBJECTINFO structure that contains information about the message subject."
      },
      {
        "in_out": "_In_",
        "type": "SIP_INDIRECT_DATA*",
        "name": "pIndirectData",
        "description": "A pointer to a SIP_INDIRECT_DATA structure that contains information about the hashed subject information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptUpdateProtectedState function migrates the current user's master keys after the user's security identifier (SID) has changed. This function can be used to preserve encrypted data after a user has been moved from one domain to another.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dpapi.h;  Wincrypt.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. For extended error information, call  GetLastError. Some possible error codes include the following.  ",
    "remarks": "This function decrypts all of the user's master keys in the old master key directory, using the previous password, and stores them in the user's current master key directory, encrypted with the user's current password. This function must be called from the user account that the keys are being migrated to. If this function is able to successfully migrate an old master key, it will automatically delete the old master key.  Master keys that cannot be decrypted are not deleted. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUpdateProtectedState",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pOldSid",
        "description": "The address of a SID structure that contains the user's previous SID. This SID is used to locate the old master keys. If this parameter is NULL, the master keys for the current user SID are migrated. Either this parameter or the pwszOldPassword parameter may be NULL, but not both."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszOldPassword",
        "description": "A pointer to a null-terminated Unicode string that contains the user's password before the SID was changed. This password is used to decrypt the old master keys. If this parameter is NULL, the password of the current user will be used. Either this parameter or the pOldSid parameter may be NULL, but not both."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Not used. Must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwSuccessCount",
        "description": "The address of a DWORD variable that receives the number of master keys that were successfully migrated."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwFailureCount",
        "description": "The address of a DWORD variable that receives the number of master keys that could not be decrypted. It is not necessarily an error if one or more master keys cannot be decrypted. Some users may possess master keys that are stagnant and could not have been decrypted for a long time. One way that this can happen is when the password of a local user has been administratively reset."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptVerifyCertificateSignature function verifies the signature of a certificate, certificate revocation list (CRL), or certificate request  by using the public key in a  CERT_PUBLIC_KEY_INFO structure. The function does not require access to a private key.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  GetLastError. On failure, this function will cause the following error codes to be returned from GetLastError.  If the function fails, GetLastError  may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "This function currently calls the  CryptVerifyCertificateSignatureEx function to perform the verification. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyCertificateSignature",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle to the cryptographic service provider (CSP) used to verify the signature.This parameter's data type is HCRYPTPROV. NULL is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in NULL causes the default RSA or DSS provider to be acquired."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to an encoded BLOB of CERT_SIGNED_CONTENT_INFO content on which the signature is to be verified."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The size, in bytes, of the encoded content in pbEncoded."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPublicKey",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO structure that contains the public key to use when verifying the signature."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptVerifyCertificateSignatureEx function verifies the signature of a subject certificate, certificate revocation list, certificate request, or keygen request by using the issuer's public key. The function does not require access to a private key.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  GetLastError. On failure, this function will cause the following error codes to be returned from GetLastError.  If the function fails, GetLastError may return an Abstract Syntax Notation One (ASN.1) encoding/decoding error. For information about these errors, see  ASN.1 Encoding/Decoding Return Values. ",
    "remarks": "The subject buffer can contain an encoded BLOB or a context for a certificate or CRL. In the case of a certificate context, if the certificate's public key parameters are missing and if these parameters can be inherited from the certificate's issuer for example from the DSS public key parameter, the context's CERT_PUBKEY_ALG_PARA_PROP_ID property is updated with the issuer's public key algorithm parameters for a valid signature. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptVerifyCertificateSignatureEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV_LEGACY",
        "name": "hCryptProv",
        "description": "This parameter is not used and should be set to NULL. Windows Server 2003 and Windows XP:  A handle to the cryptographic service provider used to verify the signature.This parameter's data type is HCRYPTPROV. NULL is passed unless there is a strong reason for passing in a specific cryptographic provider. Passing in NULL causes the default RSA or DSS provider to be acquired."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type   that was used to encrypt the subject. \t\t\t\t\t The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubjectType",
        "description": "The subject type. This parameter can be one of the following subject types.  ValueMeaning  CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB 1 (0x1)    \t\t\t\t\t\t\t\tpvSubject is a pointer to a CRYPT_DATA_BLOB \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT 2 (0x2)    \t\t\t\t\t\t\t\tpvSubject is a pointer to a CCERT_CONTEXT \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL 3 (0x3)    \t\t\t\t\t\t\t\tpvSubject is a pointer to a CCRL_CONTEXT \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE 4 (0x4)    \t\t\t\t\t\t\t\tpvSubject is a pointer to an OCSP_BASIC_SIGNED_RESPONSE_INFO structure. Windows Server 2003 and Windows XP:  This subject type is not supported."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvSubject",
        "description": "A pointer to a structure of the type indicated by dwSubjectType that contains the signature to be verified."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIssuerType",
        "description": "The issuer type. This parameter can be one of the following issuer types.  ValueMeaning  CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY 1 (0x1)    \t\t\t\t\t\t\t\tpvIssuer is a pointer to a CERT_PUBLIC_KEY_INFO \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT 2 (0x2)    \t\t\t\t\t\t\t\tpvIssuer is a pointer to a CCERT_CONTEXT \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN 3 (0x3)    \t\t\t\t\t\t\t\tpvIssuer is a pointer to a CCERT_CHAIN_CONTEXT \t\t\t\t\t\t\tstructure.   CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL 4 (0x4)   pvIssuer must be NULL.     Note  If dwIssuerType is CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL and the signature algorithm is a hashing algorithm, the signature is expected to contain only unencrypted hash octets. Only CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL can be specified in this nonencrypted signature case. If any other dwIssuerType is specified, verification fails and GetLastError returns E_INVALIDARG."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvIssuer",
        "description": "A pointer to a structure of the type indicated by the value of dwIssuerType. The structure contains access to the public key needed to verify the signature."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that modify the function behavior. This can be zero or a bitwise OR of the following values.  ValueMeaning  CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG 0x00000001   If you set this flag and CryptVerifyCertificateSignatureEx detects an MD2 or MD4 algorithm, the function returns FALSE and sets GetLastError to NTE_BAD_ALGID. The signature is still verified, but this combination of errors enables the caller, now knowing that an MD2 or MD4 algorithm was used, to decide whether to trust or reject the signature. Windows 8 and Windows Server 2012:  Support for this flag begins.   CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG 0x00000002   Sets strong signature properties, after successful verification, on the subject pointed to by the pvSubject parameter. The following property is set on the certificate context:  CERT_SIGN_HASH_CNG_ALG_PROP_ID  The following properties are set on the CRL context:  CERT_SIGN_HASH_CNG_ALG_PROP_ID CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID  Note  This flag is only applicable if  CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL is specified in the dwSubjectType parameter.   Windows 8 and Windows Server 2012:  Support for this flag begins.   CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG 0x00000004   Returns a pointer to a CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure in the pvExtra parameter. The structure contains the length, in bits, of the public key and the  names of the signing and hashing algorithms used. You must call CryptMemFree to free the structure. If memory cannot be allocated for the CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure, this function returns successfully but sets the pvExtra parameter to NULL. Note  This flag is only applicable if  CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE is specified in the dwSubjectType parameter.   Windows 8 and Windows Server 2012:  Support for this flag begins."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "void*",
        "name": "pvExtra",
        "description": "Pointer to a CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO structure if the dwFlags parameter is set to CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG. You must call CryptMemFree to free the structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The GetEncSChannel function is no longer available for use as of Windows Server 2003 and Windows XP.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE ",
    "remarks": "",
    "return_type": "BOOL __cdecl",
    "category": "Cryptography",
    "name": "GetEncSChannel",
    "is_callback": 0,
    "dll": "Instrsa5.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "BYTE**",
        "name": "pData",
        "description": "A pointer to a pointer to bytes that receive the encrypted Schannel contents. When you have finished using the Schannel contents, free pData by calling the VirtualFree function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "dwDecSize",
        "description": "Number of bytes allocated for pData."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The pCryptSIPGetCaps function is implemented by an subject interface package (SIP) to report capabilities.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mssip.h",
    "return_value": "",
    "remarks": "",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "pCryptSIPGetCaps pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIP_SUBJECTINFO*",
        "name": "pSubjInfo",
        "description": "Pointer to a SIP_SUBJECTINFO structure that specifies subject information data to the SIP APIs."
      },
      {
        "in_out": "_Inout_",
        "type": "SIP_CAP_SET*",
        "name": "pCaps",
        "description": "Pointer to a SIP_CAP_SET structure that defines the capabilities of an SIP."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG. Use the CRYPT_OID_INFO_CNG_ALGID_KEY value in the dwKeyType parameter of the CryptFindOIDInfo function instead.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns the null-terminated OID string. If no OID string corresponds to the algorithm identifier, the function returns NULL. ",
    "remarks": "",
    "return_type": "LPCSTR",
    "category": "Cryptography",
    "name": "CertAlgIdToOID",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAlgId",
        "description": "Value to be converted to an OID."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertGetNameString function obtains the subject or issuer name from a certificate  CERT_CONTEXT structure and converts it to a null-terminated character string.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the number of characters converted, including the terminating zero character. If pszNameString is NULL or cchNameString is zero, returns the required size of the destination string (including the terminating NULL character). If the specified name type is not found, returns a null-terminated empty string with a returned character count of 1. For an example that uses this function, see Example C Program: Serializing Certificates. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertGetNameString",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT certificate context that includes a subject and issuer name to be converted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwType",
        "description": "DWORD indicating how the name is to be found and how the output is to be formatted.  ValueMeaning  CERT_NAME_EMAIL_TYPE 1   If the certificate has a Subject Alternative Name extension or Issuer Alternative Name, uses the first rfc822Name choice. If no rfc822Name choice is found in the extension, uses the Subject Name field for the Email OID. If either rfc822Name or the Email OID is found, uses the string. Otherwise, returns an empty string (returned character count is 1). pvTypePara is not used and is set to NULL.   CERT_NAME_RDN_TYPE 2   Converts the Subject Name BLOB by calling CertNameToStr. pvTypePara points to a DWORD containing the dwStrType passed to CertNameToStr. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, uses the first directory Name choice from CertNameToStr.   CERT_NAME_ATTR_TYPE 3   pvTypePara points to an object identifier (OID) specifying the name attribute to be returned. For example, if pvTypePara is szOID_COMMON_NAME, uses the Subject Name member. If the Subject Name member is empty and the certificate has a Subject Alternative Name extension, uses the first directoryName choice.   CERT_NAME_SIMPLE_DISPLAY_TYPE 4   Iterates through the following list of name attributes and uses the Subject Name or the Subject Alternative Name extension for the first occurrence of: szOID_COMMON_NAME, szOID_ORGANIZATIONAL_UNIT_NAME, szOID_ORGANIZATION_NAME, or szOID_RSA_emailAddr.     If one of these attributes is not found, uses the Subject Alternative Name extension for a rfc822Name choice. If there is still no match, uses the first attribute. pvTypePara is not used and is set to NULL.   CERT_NAME_FRIENDLY_DISPLAY_TYPE 5   Checks the certificate for a CERT_FRIENDLY_NAME_PROP_ID property. If the certificate has this property, it is returned. If the certificate does not have the property, the CERT_NAME_SIMPLE_DISPLAY_TYPE is returned.   CERT_NAME_DNS_TYPE 6   If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first DNSName choice.     If the DNSName choice is not found in the extension, search the Subject Name field for the CN OID, \"2.5.4.3\". If the DNSName or CN OID is found, return the string. Otherwise, return an empty string.   CERT_NAME_URL_TYPE 7   If the certificate has a Subject Alternative Name extension for issuer, Issuer Alternative Name, search for first URL choice. If the URL choice is found, return the string. Otherwise, return an empty string.   CERT_NAME_UPN_TYPE 8   If the certificate has a Subject Alternative Name extension, search the OtherName choices looking for a pszObjId == szOID_NT_PRINCIPAL_NAME, (\"1.3.6.1.4.1.311.20.2.3\").     If the UPN OID is found, decode the BLOB as a X509_UNICODE_ANY_STRING and return the decoded string. Otherwise, return an empty string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Indicates the type of processing needed.      \t\t\t\t\t  ValueMeaning  CERT_NAME_ISSUER_FLAG 0x1   Acquires the issuer's name. If not set, acquires the subject's name.   CERT_NAME_DISABLE_IE4_UTF8_FLAG 0x00010000   Skips the default initial attempt to decode the value as UTF8 and decodes as 8-bit characters.   CERT_NAME_SEARCH_ALL_NAMES_FLAG 0x2   If the dwType parameter is set to CERT_NAME_DNS_TYPE, all applicable names are returned for the specified DNS value. If there is no DNS name but there is a CN component in the subject, the CN is returned instead. If there is a CN and a DNS name, only the DNS names are returned. This mimics the SSL chain building policy. If you set this flag for a name type other than CERT_NAME_DNS_TYPE, this function returns a null-terminated empty string. Windows 8 and Windows Server 2012:  Support for this flag begins.   CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000   This flag enables decoding of  IA5String strings to Unicode string values based on the dwType parameter value as defined below:  CERT_NAME_EMAIL_TYPE: If the host name portion of the email address contains a Punycode encoded IA5String component, it is converted to the Unicode equivalent. CERT_NAME_SIMPLE_DISPLAY_TYPE: If a Subject Name of szOID_RSA_emailAddr or the rfc822Name from the Subject Alternative Name is returned from the certificate, and the host name portion of the email address a contains Punycode encoded IA5String component, it is converted to the Unicode equivalent. CERT_NAME_DNS_TYPE: If the certificate has an Issuer Alternative Name, with a DNSName choice, and the host name portion of the email address a contains Punycode encoded IA5String component, it is converted to the Unicode equivalent. CERT_NAME_URL_TYPE: The URI is decoded and unescaped. If the server host name of the URI contains a Punycode encoded IA5String component, the host name string is converted to the Unicode equivalent.  Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvTypePara",
        "description": "A pointer to either a DWORD containing the dwStrType or an object identifier (OID) specifying the name attribute. The type pointed to is determined by the value of dwType."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszNameString",
        "description": "A pointer to an allocated buffer to receive the returned string. If pszNameString is not NULL and cchNameString is not zero, pszNameString is a null-terminated string. If CERT_NAME_SEARCH_ALL_NAMES_FLAG is specified in the dwFlags parameter and CERT_NAME_DNS_TYPE is set in the dwType parameter, the returned string will contain all of the DNS names that apply. Each string in the output string is null-terminated and the last string will be double null-terminated. If no DNS names are found, a single null-terminated empty string is returned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchNameString",
        "description": "Size, in characters, allocated for the returned string. The size must include the terminating NULL character."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CertNameToStr function converts an encoded name in a  CERT_NAME_BLOB structure to a null-terminated character string.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the number of characters converted, including the terminating null character. If psz is NULL or csz is zero, returns the required size of the destination string. ",
    "remarks": "If psz is not NULL and csz is not zero, the returned psz is always a null-terminated string. We recommend against using multicomponent RDNs (e.g., CN=James+O=Microsoft) to avoid possible ordering problems when decoding occurs. Instead, consider using single valued RDNs (e.g., CN=James, O=Microsoft). The string representation follows the distinguished name specifications in RFC 1779 except for the deviations described in the following list. In addition, the following X.500 key names are not mentioned in RFC 1779, but may be returned by this API:  For an example that uses this function, see    Example C Program: Converting Names from Certificates to ASN.1 and Back. ",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertNameToStr",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type   that was used to encode the name. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pName",
        "description": "A pointer to the  CERT_NAME_BLOB structure to be converted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStrType",
        "description": "This parameter specifies the format of the output string. This parameter also specifies other options for the contents of the string.  This parameter can be one of the following values.  ValueMeaning  CERT_SIMPLE_NAME_STR 1   All object identifiers (OIDs) are discarded.  CERT_RDN entries are separated by a comma followed by a space (, ). Multiple attributes in a CERT_RDN are separated by a plus sign enclosed within spaces ( + ),  for example, Microsoft, Kim Abercrombie + Programmer.   CERT_OID_NAME_STR 2   OIDs are included with an  equal sign (=) separator from their attribute value. CERT_RDN entries are separated by a comma followed by a space (, ). Multiple attributes in a CERT_RDN are separated by a plus sign followed by a space (+ ).   CERT_X500_NAME_STR 3   OIDs are converted to their X.500 key names; otherwise, they are the same as CERT_OID_NAME_STR. If an OID does not have a corresponding X.500 name, the OID is used with a prefix of OID.      The RDN value is quoted if it contains leading or trailing white space or one of the following characters:  Comma (,) Plus sign (+) Equal sign (=) Inch mark (\") Backslash followed by the letter n (\\n) Less than sign (<) Greater than sign (>) Number sign (#) Semicolon (;)  The quotation character is an inch mark (\"). If the RDN value contains an inch mark, it is enclosed within quotation marks (\"\").      The following options can also be combined with the value above to specify additional options for the string.  ValueMeaning  CERT_NAME_STR_SEMICOLON_FLAG 0x40000000   Replace the comma followed by a space (, ) separator with a semicolon followed by a space (; ) separator.   CERT_NAME_STR_CRLF_FLAG 0x08000000   Replace the comma followed by a space (, ) separator with a backslash followed by the letter r followed by a backslash followed by the letter n (\\r\\n) separator.   CERT_NAME_STR_NO_PLUS_FLAG 0x20000000   Replace the plus sign enclosed within spaces ( + ) separator with a single space separator.   CERT_NAME_STR_NO_QUOTING_FLAG 0x10000000   Disable quoting.   CERT_NAME_STR_REVERSE_FLAG 0x02000000   The order of the RDNs in the  distinguished name string is reversed after decoding. This flag is not set by default.   CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG 0x00010000   By default,  a CERT_RDN_T61_STRING X.500 key string is decoded as UTF8. If UTF8 decoding fails, the X.500 key is decoded as an 8 bit character. Use CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG to  skip the initial attempt to decode as UTF8.   CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000   If the name pointed to by the pName parameter contains an email RDN, and the host name portion of the email address contains a Punycode encoded IA5String, the name is converted to the Unicode equivalent. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "psz",
        "description": "A pointer to a character buffer that receives the returned string. The size of this buffer is specified in the csz parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "csz",
        "description": "The size, in characters, of the psz buffer. The size must include the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Use the CryptFindOIDInfo function instead of this function because ALG_ID identifiers are no longer supported in CNG. Use the CRYPT_OID_INFO_OID_KEY value in the dwKeyType parameter of the CryptFindOIDInfo function instead.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns the  ALG_ID that corresponds to the object identifier (OID) or zero if no ALG_ID corresponds to the OID. See  Example C Program: Using CertOIDToAlgId and CertCompareIntegerBlob. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertOIDToAlgId",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszObjId",
        "description": "Pointer to the ASN.1 OID to be converted to an algorithm identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertRDNValueToStr function converts a name in a  CERT_RDN_VALUE_BLOB to a null-terminated character string.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the number of characters converted, including the terminating NULL character. If psz is NULL or csz is zero, returns the required size of the destination string. ",
    "remarks": "If psz is not NULL and csz is not zero, the returned psz is always a possibly empty null-terminated string. ",
    "return_type": "DWORD",
    "category": "Cryptography",
    "name": "CertRDNValueToStr",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwValueType",
        "description": "Indicates the kind of RDN value to be converted. This can be one of the following values:  CERT_RDN_ANY_TYPE CERT_RDN_ENCODED_BLOB CERT_RDN_OCTET_STRING CERT_RDN_NUMERIC_STRING CERT_RDN_PRINTABLE_STRING CERT_RDN_TELETEX_STRING CERT_RDN_T61_STRING CERT_RDN_VIDEOTEX_STRING CERT_RDN_IA5_STRING CERT_RDN_GRAPHIC_STRING CERT_RDN_VISIBLE_STRING CERT_RDN_ISO646_STRING CERT_RDN_GENERAL_STRING CERT_RDN_UNIVERSAL_STRING CERT_RDN_INT4_STRING CERT_RDN_BMP_STRING CERT_RDN_UNICODE_STRING CERT_RDN_UTF8_STRING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_RDN_VALUE_BLOB",
        "name": "pValue",
        "description": "A pointer to an  CERT_RDN_VALUE_BLOB of a type appropriate for the dwValueType."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "psz",
        "description": "A pointer to a buffer to receive the returned string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "csz",
        "description": "Size, in characters, allocated for the returned string. The size must include the terminating NULL character."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CertStrToName function converts a null-terminated X.500 string to an encoded certificate name.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call  GetLastError. ",
    "remarks": "The following table contains the supported X.500 keys, their corresponding object identifier string, string identifier (from Wincrypt.h), and value types.   If either Printable or T61 is allowed as the RDN value type for the key, Printable is automatically selected if the name string component is a member of the following character sets: The T61 types are UTF8 encoded. For an example that uses this function, see  Example C Program: Converting Names from Certificates to ASN.1 and Back. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStrToName",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type   that was used to encode the string. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszX500",
        "description": "A pointer to the null-terminated X.500 string to be converted. The format of this string is specified by the dwStrType parameter. This string is expected to be formatted the same as the output from  the CertNameToStr function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStrType",
        "description": "This parameter specifies the type of the string. This parameter also specifies other options for the contents of the string.  If no flags are combined with the string type specifier, the string can contain a comma (,) or a semicolon (;) as separators in the relative distinguished name (RDN) and a plus sign (+) as the separator in multiple RDN values. Quotation marks (\"\") are supported. A quotation can be included in a quoted value by using two sets of quotation marks, for example, CN=\"User \"\"one\"\"\".  A value that starts with a number sign (#) is treated as ASCII hexadecimal and converted to a CERT_RDN_OCTET_STRING. Embedded white space is ignored. For example, 1.2.3 = # AB CD 01 is the same as 1.2.3=#ABCD01. White space that surrounds the keys, object identifiers, and values is ignored.  This parameter can be one of the following values.  ValueMeaning  CERT_SIMPLE_NAME_STR 1   This string type is not supported.   CERT_OID_NAME_STR 2    Validates that the string type is supported. The string can be either an object identifier (OID) or an X.500 name. \t\t\t\t\t\t\t   CERT_X500_NAME_STR 3   Identical to  CERT_OID_NAME_STR. Validates that the string type is supported. The string can be either an object identifier (OID) or an X.500 name. \t\t\t\t\t\t\t      The following options can also be combined with the value above to specify additional options for the string.  ValueMeaning  CERT_NAME_STR_COMMA_FLAG 0x04000000   Only a comma (,) is supported as the RDN separator.   CERT_NAME_STR_SEMICOLON_FLAG 0x40000000   Only a semicolon (;) is supported as the RDN separator.   CERT_NAME_STR_CRLF_FLAG 0x08000000   Only a backslash r (\\r) or backslash n (\\n) is supported as the RDN separator.   CERT_NAME_STR_NO_PLUS_FLAG 0x20000000   The plus sign (+) is ignored as a separator, and multiple values per RDN are not supported.   CERT_NAME_STR_NO_QUOTING_FLAG 0x10000000   Quoting is not supported.   CERT_NAME_STR_REVERSE_FLAG 0x02000000   The order of the RDNs in a distinguished name is reversed before encoding. This flag is not set by default.   CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG 0x00020000   The CERT_RDN_T61_STRING encoded value type is used instead of CERT_RDN_UNICODE_STRING. This flag can be used if all the Unicode characters are less than or equal to 0xFF.   CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG 0x00040000   The CERT_RDN_UTF8_STRING encoded value type is used instead of CERT_RDN_UNICODE_STRING.   CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG 0x00080000   Forces the X.500 key to be encoded as a UTF-8 (CERT_RDN_UTF8_STRING) string rather than as a printable  Unicode (CERT_RDN_PRINTABLE_STRING) string. This is the default value for Microsoft certification authorities beginning with Windows Server 2003.   CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG 0x00100000   Prevents forcing a printable Unicode (CERT_RDN_PRINTABLE_STRING) X.500 key to be encoded by using UTF-8 (CERT_RDN_UTF8_STRING). Use to enable encoding of X.500 keys as Unicode values when CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG is set.   CERT_NAME_STR_ENABLE_PUNYCODE_FLAG 0x00200000   If the string contains an email RDN value, and the email address  contains Unicode characters outside of the ASCII character set, the host name portion of the email address is encoded in Punycode. The resultant email address is then encoded as an IA5String string. The Punycode encoding of the host name is performed on a label-by-label basis. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to a buffer that receives the encoded structure.    The size of this buffer is specified in the pcbEncoded parameter. This parameter can be NULL to obtain the required size of the buffer for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncoded",
        "description": "A pointer to a DWORD that, before calling the function, contains the size, in bytes, of the buffer pointed to by the pbEncoded parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. If pbEncoded is NULL, the DWORD receives the size, in bytes, required for the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPCTSTR*",
        "name": "ppszError",
        "description": "A pointer to a string pointer that receives additional error information about an input string that is not valid.    If the pszX500 string is not valid, ppszError is updated by this function to point to the beginning of the character sequence that is not valid. If no errors are detected in the input string, ppszError is set to NULL. \t\t\t\t\t\t If this information is not required, pass NULL for this parameter.  This parameter is updated for the following error codes returned from GetLastError. CRYPT_E_INVALID_X500_STRINGCRYPT_E_INVALID_NUMERIC_STRINGCRYPT_E_INVALID_PRINTABLE_STRINGCRYPT_E_INVALID_IA5_STRING"
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptBinaryToString function converts an array of bytes into a formatted string.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "With the exception of when CRYPT_STRING_BINARY encoding is used, all strings are appended with a new line sequence. By default, the new line sequence is a CR/LF pair (0x0D/0x0A). If the dwFlags parameter contains the CRYPT_STRING_NOCR flag, then the new line sequence is a LF character (0x0A). If the dwFlags parameter contains the CRYPT_STRING_NOCRLF flag, then no new line sequence is appended to the string. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptBinaryToString",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbBinary",
        "description": "A pointer to the array of bytes to be converted into a string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbBinary",
        "description": "The number of elements in the pbBinary array."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the format of the resulting formatted string. This parameter can be one of the following values.  ValueMeaning  CRYPT_STRING_BASE64HEADER 0x00000000   Base64, with certificate beginning and ending headers.   CRYPT_STRING_BASE64 0x00000001   Base64, without headers.   CRYPT_STRING_BINARY 0x00000002   Pure binary copy.   CRYPT_STRING_BASE64REQUESTHEADER 0x00000003   Base64, with request beginning and ending headers.   CRYPT_STRING_HEX 0x00000004   Hexadecimal only.   CRYPT_STRING_HEXASCII 0x00000005   Hexadecimal, with ASCII character display.   CRYPT_STRING_BASE64X509CRLHEADER 0x00000009   Base64, with X.509 CRL beginning and ending headers.   CRYPT_STRING_HEXADDR 0x0000000a   Hexadecimal, with address display.   CRYPT_STRING_HEXASCIIADDR 0x0000000b   Hexadecimal, with ASCII character and address display.   CRYPT_STRING_HEXRAW 0x0000000c   A raw hexadecimal string.  Windows Server 2003 and Windows XP:  This value is not supported.   CRYPT_STRING_STRICT 0x20000000   Enforce strict decoding of ASN.1 text formats.  Some ASN.1 binary BLOBS can have the first few bytes of the BLOB incorrectly interpreted as Base64 text. In this case, the rest of the text is ignored. Use this flag to enforce complete decoding of the BLOB.  Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported.      In addition to the values above, one or more of the following values can be specified to modify the behavior of the function.  ValueMeaning  CRYPT_STRING_NOCRLF 0x40000000   Do not append any new line characters to the encoded string. The default behavior is to use a carriage return/line feed (CR/LF) pair (0x0D/0x0A) to represent a new line.  Windows Server 2003 and Windows XP:  This value is not supported.   CRYPT_STRING_NOCR 0x80000000   Only use the line feed (LF) character (0x0A) for a new line. The default behavior is to use a CR/LF pair (0x0D/0x0A) to represent a new line."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "pszString",
        "description": "A pointer to a buffer that receives the converted string. To calculate the number of characters that must be allocated to hold the returned string, set this parameter to NULL. The function will place the required number of characters, including the terminating NULL character, in the value pointed to by pcchString."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchString",
        "description": "A pointer to a DWORD variable that contains the size, in TCHARs, of the pszString buffer. If pszString is NULL, the function calculates the length of the return string (including the terminating null character) in TCHARs and returns it in this parameter. If pszString is not NULL and big enough, the function converts the binary data into a specified string format including the terminating null character, but pcchString receives the length in TCHARs, not including the terminating null character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptFormatObject function formats the encoded data and returns a Unicode string in the allocated buffer according to the certificate encoding type.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If it does not succeed, the return value is FALSE. To retrieve extended error information, use the GetLastError function. ",
    "remarks": "The default behavior of this function is to return a single-line display of the encoded data, that is, each subfield is concatenated with a comma (,) on one line. If you prefer to display the data in multiple lines, set the CRYPT_FORMAT_STR_MULTI_LINE flag. Each subfield will then be displayed on a separate line. If there is no formatting routine installed or registered for the lpszStructType parameter, the hexadecimal dump of the encoded  CRYPT_INTEGER_BLOB will be returned. A user can set the CRYPT_FORMAT_STR_NO_HEX flag to disable the hexadecimal dump. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptFormatObject",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Type of encoding used on the certificate. The currently defined certificate encoding type used is X509_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormatType",
        "description": "Format type values. Not used. Set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormatStrType",
        "description": "Structure format type values. This parameter can be zero, or you can specify one or more of the following flags by using the bitwise-OR operator to combine them. \t\t\t\t\t  ValueMeaning  0   Display the data in a single line. Each subfield is concatenated with a comma (,). For more information, see Remarks.   CRYPT_FORMAT_STR_MULTI_LINE 0x0001   Display the data in multiple lines rather than single line (the default). For more information, see Remarks.   CRYPT_FORMAT_STR_NO_HEX 0x0010   Disables the hexadecimal dump. For more information, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pFormatStruct",
        "description": "A pointer to the format of the structure. Not used. Set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStructType",
        "description": "A pointer to an OID that defines the encoded data. If the high-order word of the lpszStructType parameter is zero, the low-order word specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a null-terminated string.     The following table lists supported OIDs with their associated OID extension.  ValueMeaning  SPC_FINANCIAL_CRITERIA_OBJID   1.3.6.1.4.1.311.2.1.27   SPC_SP_AGENCY_INFO_OBJID   1.3.6.1.4.1.311.2.1.10   szOID_AUTHORITY_INFO_ACCESS   1.3.6.1.5.5.7.1.1   szOID_AUTHORITY_KEY_IDENTIFIER2   2.5.29.35   szOID_BASIC_CONSTRAINTS2   2.5.29.19   szOID_CERT_POLICIES   2.5.29.32   szOID_CRL_DIST_POINTS   2.5.29.31   szOID_CRL_REASON_CODE   2.5.29.21   szOID_ENHANCED_KEY_USAGE   2.5.29.37   szOID_ISSUER_ALT_NAME2   2.5.29.18   szOID_KEY_ATTRIBUTES   2.5.29.2   szOID_KEY_USAGE   2.5.29.15   szOID_KEY_USAGE_RESTRICTION   2.5.29.4   szOID_NEXT_UPDATE_LOCATION   1.3.6.1.4.1.311.10.2   szOID_RSA_SMIMECapabilities   1.2.840.113549.1.9.15   szOID_SUBJECT_ALT_NAME2   2.5.29.17   szOID_SUBJECT_KEY_IDENTIFIER   2.5.29.14"
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbEncoded",
        "description": "A pointer to the encoded data to be formatted. If lpszStructType is one of the OIDs listed above, the pbEncoded is the encoded extension."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbEncoded",
        "description": "The size, in bytes, of the pbEncoded structure."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pbFormat",
        "description": "A pointer to a buffer that receives the formatted string. When the buffer that is specified is not large enough to receive the decoded structure, the function sets ERROR_MORE_DATA and stores the required buffer size, in bytes, into the variable pointed to by pcbFormat. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbFormat",
        "description": "A pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the pbFormat parameter. When the function returns, the variable pointed to by the pcbFormat parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if pbFormat is NULL.     Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit into the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptStringToBinary function converts a formatted string into an array of bytes.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptStringToBinary",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszString",
        "description": "A pointer to a string that contains the formatted string to be converted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchString",
        "description": "The number of characters of the formatted string to be converted, not including the terminating NULL character. If this parameter is zero,  pszString is considered to be a null-terminated string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Indicates the format of the string to be converted. This can be one of the following values.  ValueMeaning  CRYPT_STRING_BASE64HEADER 0x00000000   Base64, with certificate beginning and ending headers.   CRYPT_STRING_BASE64 0x00000001   Base64, without headers.   CRYPT_STRING_BINARY 0x00000002   Pure binary copy.   CRYPT_STRING_BASE64REQUESTHEADER 0x00000003   Base64, with request beginning and ending headers.   CRYPT_STRING_HEX 0x00000004   Hexadecimal only format.   CRYPT_STRING_HEXASCII 0x00000005   Hexadecimal format with ASCII character display.   CRYPT_STRING_BASE64_ANY 0x00000006   Tries the following, in order:      CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64    CRYPT_STRING_ANY 0x00000007   Tries the following, in order:      CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64 CRYPT_STRING_BINARY    CRYPT_STRING_HEX_ANY 0x00000008   Tries the following, in order:      CRYPT_STRING_HEXADDR CRYPT_STRING_HEXASCIIADDR CRYPT_STRING_HEX CRYPT_STRING_HEXRAW CRYPT_STRING_HEXASCII    CRYPT_STRING_BASE64X509CRLHEADER 0x00000009   Base64, with X.509 certificate revocation list (CRL) beginning and ending headers.   CRYPT_STRING_HEXADDR 0x0000000a   Hex, with address display.   CRYPT_STRING_HEXASCIIADDR 0x0000000b   Hex, with ASCII character and address display.   CRYPT_STRING_HEXRAW 0x0000000c   A raw hexadecimal string. Windows Server 2003 and Windows XP:  This value is not supported.   CRYPT_STRING_STRICT 0x20000000   Set this flag for Base64 data to specify that the end of the binary data contain only white space and at most three equals \"=\" signs. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This value is not supported."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbBinary",
        "description": "A pointer to a buffer that receives the returned sequence of bytes. If this parameter is NULL, the function calculates the length of the buffer needed and returns the size, in bytes, of required memory in the DWORD pointed to by pcbBinary."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbBinary",
        "description": "A pointer to a DWORD variable that, on entry, contains the size, in bytes, of the pbBinary buffer. After the function returns, this variable contains the number of bytes copied to the buffer. If this value is not large enough to contain all of the data, the function fails and GetLastError returns ERROR_MORE_DATA. If pbBinary is NULL, the DWORD pointed to by pcbBinary is ignored."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwSkip",
        "description": "A pointer to a DWORD value that receives the number of characters skipped to reach the beginning of the actual base64 or hexadecimal strings. This parameter is optional and can be NULL if it is not needed."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "A pointer to a DWORD value that receives the flags actually used in the conversion. These are the same flags used for the dwFlags parameter. In many cases, these will be the same flags that were passed in the dwFlags parameter. If dwFlags contains one of the following flags, this value will receive a flag that indicates the actual format of the string. This parameter is optional and can be NULL if it is not needed.  ValueMeaning  CRYPT_STRING_ANY   This variable will receive one of the following values. Each value indicates the actual format of the string.  CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64 CRYPT_STRING_BINARY    CRYPT_STRING_BASE64_ANY   This variable will receive one of the following values. Each value indicates the actual format of the string.  CRYPT_STRING_BASE64HEADER CRYPT_STRING_BASE64    CRYPT_STRING_HEX_ANY   This variable will receive one of the following values. Each value indicates the actual format of the string.  CRYPT_STRING_HEXADDR CRYPT_STRING_HEXASCIIADDR CRYPT_STRING_HEX CRYPT_STRING_HEXRAW CRYPT_STRING_HEXASCII"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertAddEnhancedKeyUsageIdentifier function adds a usage identifier object identifier (OID) to the enhanced key usage (EKU) extended property of the certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. For an example that uses this function, see  Example C Program: Getting and Setting Certificate Properties. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertAddEnhancedKeyUsageIdentifier",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT of the certificate for which the usage identifier is to be added."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszUsageIdentifier",
        "description": "Specifies the usage identifier OID to add."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertGetEnhancedKeyUsage function returns information from the enhanced key usage (EKU) extension or the EKU extended property of a certificate. EKUs indicate valid uses of the certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "If a certificate has an EKU extension, that extension lists object identifiers (OIDs) for valid uses of that certificate. In a Microsoft environment, a certificate might also have EKU extended properties that specify valid uses for the certificate. If dwFlags is set to zero, the cUsageIdentifier member of the CERT_ENHKEY_USAGE structure is set to the number of valid uses of the certificate determined by the value of both the EKU extension and the EKU extended property value. If the cUsageIdentifier member is zero, the certificate might be valid for all uses or the certificate might have no valid uses. The return from a call to GetLastError can be used to determine whether the certificate is good for all uses or for none. If GetLastError returns CRYPT_E_NOT_FOUND, the certificate is good for all uses. If it returns zero, the certificate has no valid uses. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertGetEnhancedKeyUsage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT certificate context."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Indicates whether the function will report on extensions of a certificate, its extended properties, or both. If set to zero, the function returns the valid uses of a certificate based on both the EKU extension and the EKU extended property value of the certificate.     To return only the EKU extension or EKU property value, set the following flags.  ValueMeaning  CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG   Get only the extension.   CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG   Get only the extended property value."
      },
      {
        "in_out": "_Out_",
        "type": "PCERT_ENHKEY_USAGE",
        "name": "pUsage",
        "description": "A pointer to a CERT_ENHKEY_USAGE structure (CERT_ENHKEY_USAGE is an alternate typedef name for the CTL_USAGE structure) that receives the valid uses of the certificate.     This parameter can be NULL to set the size of the key usage for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbUsage",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the structure pointed to by pUsage. When the function returns, the DWORD contains the size, in bytes, of the structure."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CertRemoveEnhancedKeyUsageIdentifier function removes a usage identifier object identifier (OID) from the enhanced key usage (EKU) extended property of the certificate.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertRemoveEnhancedKeyUsageIdentifier",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT of the certificate for which the usage identifier OID is to be removed."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszUsageIdentifier",
        "description": "A pointer to the usage identifier OID to remove."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CertSetEnhancedKeyUsage function sets the enhanced key usage (EKU) property for the certificate. Use of this function replaces any EKUs associated with the certificate. To add a single EKU usage without changing existing usages, use  CertAddEnhancedKeyUsageIdentifier. To delete a single EKU usage, use  CertRemoveEnhancedKeyUsageIdentifier.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertSetEnhancedKeyUsage",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the  CERT_CONTEXT of the specified certificate."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_ENHKEY_USAGE",
        "name": "pUsage",
        "description": "Pointer to a CERT_ENHKEY_USAGE structure (equivalent to a  CTL_USAGE structure) that contains an array of EKU object identifiers (OIDs) to be set as extended properties of the certificate."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptCreateKeyIdentifierFromCSP function creates a key identifier from a cryptographic service provider (CSP) public key CRYPT_INTEGER_BLOB.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. For an example that uses this function, see  Example C Program: Working with Key Identifiers. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCreateKeyIdentifierFromCSP",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszPubKeyOID",
        "description": "A pointer to the public key object identifier (OID). A value that is not NULL overrides the default OID obtained from the aiKeyAlg member of the structure pointed to by pPubKeyStruc. To use the default OID, set pszPubKeyOID to NULL."
      },
      {
        "in_out": "_In_",
        "type": "const PUBLICKEYSTRUC*",
        "name": "pPubKeyStruc",
        "description": "A pointer to a  PUBLICKEYSTRUC structure. In the default case, the aiKeyAlg member of the structure pointed to by pPubKeyStruc is used to find the public key OID. When the value of pszPubKeyOID is not NULL, it overrides the default."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbPubKeyStruc",
        "description": "The size, in bytes, of the PUBLICKEYSTRUC."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbHash",
        "description": "A pointer to a buffer to receive the hash of the public key and the key identifier. To get the size of this information for memory allocation purposes, set this parameter to NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbHash",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbHash parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. Using SHA1 hashing, the length of the required buffer is twenty."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptEnumKeyIdentifierProperties function enumerates key identifiers and their properties. This function is not called in a loop. Rather, it loops internally until the last key identifier property is enumerated or the callback function returns FALSE. If dwPropId is zero or if the properties of the key identifier match the dwPropId, the callback function is called.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "The CryptEnumKeyIdentifierProperties function repeatedly calls the CRYPT_ENUM_KEYID_PROP callback function until the last key identifier is enumerated or the callback function returns FALSE. If the main function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. To continue enumeration, the function returns TRUE. To stop enumeration, the function returns FALSE and sets the last error code. ",
    "remarks": "A key identifier can have the same properties as a certificate context. For an example that uses this function, see  Example C Program: Working with Key Identifiers. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEnumKeyIdentifierProperties",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const CRYPT_HASH_BLOB*",
        "name": "pKeyIdentifier",
        "description": "A pointer to a  CRYPT_HASH_BLOB structure that contains the key identifier.     If pKeyIdentifier is NULL, the function enumerates all key identifiers. If pKeyIdentifier is not NULL, the callback function pfnEnum is only called for the specified key identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates the property identifier to be listed.     If dwPropId is set to zero, this function calls the callback function with all the properties. If dwPropId is not zero and pKeyIdentifier is NULL, the callback function is called only for those key identifiers that have the specified property (sets the cProp parameter of pfnEnum to one). All key identifiers that do not have the property are skipped. Any certificate property identifier can be used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "By default, the list of key identifiers for the CurrentUser is searched. If CRYPT_KEYID_MACHINE_FLAG is set, the list of key identifiers of the LocalMachine (if pwszComputerName is NULL) or of a remote computer (if pwszComputerName is not NULL) is searched. For more information, see pwszComputerName."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszComputerName",
        "description": "A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG is set in dwFlags, the remote computer is searched for a list of key identifiers. If the local computer is to be searched and not a remote computer, pwszComputerName is set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to data to be passed to the callback function. The type is a void that allows the application to declare, define, and initialize a structure or argument to hold any information."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_ENUM_KEYID_PROP",
        "name": "pfnEnum",
        "description": "A pointer to an application-defined callback function that is executed for each key identifier entry that matches the input parameters. For details about the callback functions parameters, see CRYPT_ENUM_KEYID_PROP."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptGetKeyIdentifierProperty acquires a specific property from a specified key identifier.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. For an example that uses this function, see  Example C Program: Working with Key Identifiers. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetKeyIdentifierProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_HASH_BLOB*",
        "name": "pKeyIdentifier",
        "description": "A pointer to the  CRYPT_HASH_BLOB that contains the key identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to retrieve. The value of dwPropId determines the type and content of the pvData parameter. Any certificate property ID can be used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flags can be used. They can be combined with a bitwise-OR operation.      \t\t\t\t\t  ValueMeaning  CRYPT_KEYID_MACHINE_FLAG   Search the list of key identifiers of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is not NULL). For more information, see pwszComputerName.   CRYPT_KEYID_ALLOC_FLAG   The LocalAlloc() function is called to allocate memory for pvData. *pvData is updated with a pointer to the allocated memory. LocalFree() must be called to free the allocated memory."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszComputerName",
        "description": "A pointer to the name of a remote computer to be searched. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the local computer is to be searched and not a remote computer, set pwszComputerName to NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to receive the data as determined by dwPropId. Elements pointed to by fields in the pvData structure follow the structure. Therefore, the size contained in pcbData can exceed the size of the structure.     If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_KEY_PROV_INFO structure that contains the property of the key identifier. If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to an array of bytes that contains the property of the key identifier. To get the size of this information for memory allocation purposes, this parameter can be NULL when the CRYPT_KEYID_ALLOC_FLAG is not set. For more information, see  Retrieving Data of Unknown Length. When the CRYPT_KEYID_ALLOC_FLAG is set, pvData is the address of a pointer to the buffer that will be updated. Because memory is allocated and its pointer is stored at *pvData, pvData must not be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pvData parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. The size contained in the variable pointed to by pcbData can indicate a size larger than the  CRYPT_KEY_PROV_INFO structure because the structure can contain pointers to auxiliary data. This size is the sum of the size needed by the structure and all auxiliary data.     When the CRYPT_KEYID_ALLOC_FLAG is set, pcbData is the address of a pointer to the DWORD that will be updated. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data fits in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptSetKeyIdentifierProperty function sets the property of a specified key identifier. This function can set the property on the computer identified in pwszComputerName.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. For an example that uses this function, see  Example C Program: Working with Key Identifiers. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetKeyIdentifierProperty",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const CRYPT_HASH_BLOB*",
        "name": "pKeyIdentifier",
        "description": "A pointer to a  CRYPT_HASH_BLOB containing the key identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifies the property to be set. The value of dwPropId determines the type and content of the pvData parameter. Any certificate property ID can be used. CERT_KEY_PROV_INFO_PROP_ID is the property of most interest."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The following flags can be set. They can be combined with a bitwise-OR operation.  ValueMeaning  CRYPT_KEYID_MACHINE_FLAG   Sets the property of the LocalMachine (if pwszComputerName is NULL) or remote computer (if pwszComputerName is not NULL). For more information, see pwszComputerName.   CRYPT_KEYID_DELETE_FLAG   The key identifier and all of its properties are deleted.   CRYPT_KEYID_SET_NEW_FLAG   Sets a new key identifier property. If the property already exists, the attempt fails, and FALSE is returned with the last error code set to CRYPT_E_EXISTS."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszComputerName",
        "description": "A pointer to a null-terminated string that contains the name of a remote computer that has the key identifier where the properties are set. If CRYPT_KEYID_MACHINE_FLAG flag is set, searches the remote computer for a list of key identifiers. If the local computer is to be set and not a remote computer, set pwszComputerName to NULL."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "const void*",
        "name": "pvData",
        "description": "If dwPropId is CERT_KEY_PROV_INFO_PROP_ID, pvData points to a  CRYPT_KEY_PROV_INFO structure containing the property of the key identifier.     If dwPropId is not CERT_KEY_PROV_INFO_PROP_ID, pvData points to a CRYPT_DATA_BLOB structure containing the property of the key identifier. Setting pvData to NULL deletes the property."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptEnumOIDFunction function enumerates the registered object identifier (OID) functions. OID functions that are enumerated can be screened to include those identified by their encoding type, function name, OID, or any combination of encoding type, function name, and OID. For each OID function that matches the selection criteria, an application-provided callback function, pfnEnumOIDFunc, is called.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEnumOIDFunction",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note that if CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required. If the low-order word that contains the certificate encoding type is nonzero, it is used; otherwise, the high-order word that contains the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.     Currently defined encoding types are:  CRYPT_ASN_ENCODING X509_ASN_ENCODING PKCS_7_ASN_ENCODING CRYPT_MATCH_ANY_ENCODING_TYPE"
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of a function for which a case insensitive match search is performed. Setting this parameter to NULL results in a match being found for any function name."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "If the high-order word of pszOID is nonzero, pszOID specifies the object identifier for which a case insensitive match search is performed. If the high-order word of pszOID is zero, pszOID is used to match a numeric object identifier. Setting this parameter to NULL matches any object identifier. Setting this parameter to CRYPT_DEFAULT_OID restricts the enumeration to only the default functions."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to arguments to be passed through to the CRYPT_ENUM_OID_FUNCTION callback function."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_ENUM_OID_FUNC",
        "name": "pfnEnumOIDFunc",
        "description": "A pointer to the callback function that is executed for each OID function that matches the input parameters. For details, see CRYPT_ENUM_OID_FUNCTION."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptEnumOIDInfo function enumerates predefined and registered object identifier (OID)  CRYPT_OID_INFO structures. This function enumerates either all of the predefined and registered structures or only structures identified by a selected OID group. For each OID information structure enumerated, an application provided callback function, pfnEnumOIDInfo, is called.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the callback function  completes the enumeration, this function returns TRUE. If the callback function has stopped the enumeration, this function returns FALSE. For an example that uses this function, see Example C Program: Using CertOIDToAlgId and CertCompareIntegerBlob. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptEnumOIDInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwGroupId",
        "description": "Indicates which OID groups to be matched. Setting dwGroupId to zero matches all groups. If dwGroupId is greater than zero, only the OID entries in the specified group are enumerated.     The currently defined OID group IDs are:  CRYPT_HASH_ALG_OID_GROUP_ID CRYPT_ENCRYPT_ALG_OID_GROUP_ID CRYPT_PUBKEY_ALG_OID_GROUP_ID CRYPT_SIGN_ALG_OID_GROUP_ID CRYPT_RDN_ATTR_OID_GROUP_ID CRYPT_EXT_OR_ATTR_OID_GROUP_ID CRYPT_ENHKEY_USAGE_OID_GROUP_ID CRYPT_POLICY_OID_GROUP_ID CRYPT_TEMPLATE_OID_GROUP_ID CRYPT_KDF_OID_GROUP_IDWindows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  The CRYPT_KDF_OID_GROUP_ID value is not supported.  CRYPT_LAST_OID_GROUP_ID CRYPT_FIRST_ALG_OID_GROUP_ID CRYPT_LAST_ALG_OID_GROUP_ID"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use. It must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to arguments to be passed through to the callback function."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_ENUM_OID_INFO",
        "name": "pfnEnumOIDInfo",
        "description": "A pointer to the callback function that is executed for each OID information entry enumerated. For information about the callback parameters, see CRYPT_ENUM_OID_INFO."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptFindOIDInfo function retrieves the first predefined or registered  CRYPT_OID_INFO structure that matches a specified key type and key. The search can be limited to object identifiers (OIDs) within a specified OID group.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns a pointer to a constant structure of type CRYPT_OID_INFO. The returned pointer must not be freed. When the specified key and group is not found, NULL is returned. ",
    "remarks": "The CryptFindOIDInfo function performs a lookup in the active directory to retrieve the friendly names of OIDs under the following conditions: The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical OR operator (|). This is only applicable to the CRYPT_ENCRYPT_ALG_OID_GROUP_ID group entries that have a bit length specified in the ExtraInfo member of the CRYPT_OID_INFO structure. Currently, only the AES encryption algorithms have this. The constant CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT can be used for doing the shift. For example, to find the OID information for BCRYPT_AES_ALGORITHM with bit length equal to 192, call CryptFindOIDInfo as follows. ",
    "return_type": "PCCRYPT_OID_INFO",
    "category": "Cryptography",
    "name": "CryptFindOIDInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKeyType",
        "description": "Specifies the key type to use when finding OID information.    This parameter can be one of the following key types.  CRYPT_OID_INFO_OID_KEY   pvKey is the address of a null-terminated ANSI string that contains the OID string to find.  CRYPT_OID_INFO_NAME_KEY   pvKey is the address of a null-terminated Unicode string that contains the name to find.  CRYPT_OID_INFO_ALGID_KEY   pvKey is the address of an  ALG_ID \t\t\t\t\t\t\tvariable. The following ALG_IDs are supported: Hash Algorithms:  CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2  Symmetric Encryption Algorithms:  CALG_DES CALG_3DES CALG_RC2 CALG_RC4  Public Key Algorithms:  CALG_DSS_SIGN CALG_DH_SF CALG_DH_EPHEM CALG_RSA_KEYX CALG_RSA_SIGN CALG_NO_SIGN  Algorithms that are not listed are supported by using Cryptography API: Next Generation (CNG) only; instead, use CRYPT_OID_INFO_CNG_ALGID_KEY.  CRYPT_OID_INFO_SIGN_KEY   pvKey is the address of an array of two ALG_IDs where the first element contains the hash algorithm identifier and the second element contains the public key algorithm identifier. The following ALG_ID combinations are supported.  Signature algorithm identifierHash algorithm identifier  CALG_RSA_SIGN    CALG_SHA1 CALG_MD5 CALG_MD4 CALG_MD2    CALG_DSS_SIGN    CALG_SHA1    CALG_NO_SIGN    CALG_SHA1 CALG_NO_SIGN      Algorithms that are not listed are supported through CNG only; instead, use CRYPT_OID_INFO_CNG_SIGN_KEY.  CRYPT_OID_INFO_CNG_ALGID_KEY   pvKey is the address of a null-terminated Unicode string that contains the CNG algorithm identifier to find. This can be one of the predefined CNG Algorithm Identifiers or another registered algorithm identifier. Windows Server 2003 R2 and Windows Server 2003:  This key type is not supported.  CRYPT_OID_INFO_CNG_SIGN_KEY   pvKey is the address of an array of two null-terminated Unicode string pointers where the first string contains the hash CNG algorithm identifier and the second string contains the public key CNG algorithm identifier. These can be from the predefined CNG Algorithm Identifiers or another registered algorithm identifier. Windows Server 2003 R2 and Windows Server 2003:  This key type is not supported.    Optionally, the following key types can be specified in the dwKeyType parameter by using the logical OR operator (|).  ValueMeaning  CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG flag.   CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG   Skips public keys in the CRYPT_PUBKEY_ALG_OID_GROUP_ID group that are explicitly flagged with the CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG flag."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvKey",
        "description": "The address of a buffer that contains additional search information. This parameter depends on the value of the dwKeyType parameter. For more information, see the table under dwKeyType."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwGroupId",
        "description": "The group identifier to use when finding OID information. Setting this parameter to zero searches all groups according to the dwKeyType parameter. Otherwise, only the indicated dwGroupId is searched. For information about code that lists the OID information by group identifier, see  CryptEnumOIDInfo.  Optionally, the following flag can be specified in the dwGroupId parameter by using the logical OR operator (|).  ValueMeaning  CRYPT_OID_DISABLE_SEARCH_DS_FLAG   Disables searching the directory server.     The bit length shifted left 16 bits can be specified in the dwGroupId parameter by using the logical OR operator (|). For more information, see Remarks."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptFreeOIDFunctionAddress function releases a handle returned by  CryptGetOIDFunctionAddress or  CryptGetDefaultOIDFunctionAddress by decrementing the reference count on the function handle. In some cases, the DLL file associated with the function is unloaded. For details, see Remarks.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "If the reference count becomes zero and a DLL is loaded for the function being freed, the DLL might be unloaded. If the DLL exports the DLLCanUnloadNow function, that function is called and its return is checked. An S_FALSE return from this function cancels the unloading of the DLL at this time. If the function returns S_TRUE or if the DLL does not export the DLLCanUnloadNow function, an unloading process is started. In this case, actual unloading is deferred for 15 seconds. If another CryptFreeOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress that requires the DLL occurs before the 15 seconds elapse, the deferred unload process is canceled. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptFreeOIDFunctionAddress",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTOIDFUNCADDR",
        "name": "hFuncAddr",
        "description": "Handle of the function previously obtained from a call to  CryptGetOIDFunctionAddress or  CryptGetDefaultOIDFunctionAddress."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptGetOIDFunctionAddress function searches the list of registered and installed functions for an encoding type and object identifier (OID) match. If a match is found, the DLL that contains the function is, if necessary, loaded. If a match is found, a pointer to the function address and a pointer to the function handle are also returned. The reference count on the function handle is incremented.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds and a match is found, the function returns nonzero (TRUE). If the function fails or no match is found, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "You can call CryptGetOIDFunctionAddress with the pszOID argument set to CMSG_DEFAULT_INSTALLABLE_FUNC_OID to get the default installable function for the following callback functions. For retrieval of the default functions, set dwEncodingType to a bitwise OR combination of the following encoding types. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetOIDFunctionAddress",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTOIDFUNCSET",
        "name": "hFuncSet",
        "description": "The function set handle previously obtained from a call to  the CryptInitOIDFunctionSet function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however, additional encoding types can be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING For functions that do not use an encoding type, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "If the high-order word of the OID is nonzero, pszOID is a pointer to either an OID string such as \"2.5.29.1\" or an ASCII string such as \"file\". If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier. This resulting OID maps to the function that was either installed or registered with the same OID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be the following value.  ValueMeaning  CRYPT_GET_INSTALLED_OID_FUNC_FLAG   Searches only the installed list of functions."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvFuncAddr",
        "description": "A pointer to a pointer to a function address. If a match is found, ppvFuncAddr points to the function address."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTOIDFUNCADDR*",
        "name": "phFuncAddr",
        "description": "If a match is found, phFuncAddr points to the function handle. The reference count for the handle is incremented.  When you have finished using the handle, release the handle by calling the CryptFreeOIDFunctionAddress function.     Note  By default, both the registered and installed function lists are searched. To search only the installed list of functions, set CRYPT_GET_INSTALLED_OID_FUNC_FLAG. This flag would be set by a registered function to get the address of a preinstalled function it was replacing. For example, the registered function might handle a new special case and call the preinstalled function to handle the remaining cases."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptGetDefaultOIDFunctionAddress function loads the DLL that contains a default function address. It can also return the address of the first or next installed default object identifier (OID) function in an initialized function set and load the DLL that contains the address  of that function.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetDefaultOIDFunctionAddress",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTOIDFUNCSET",
        "name": "hFuncSet",
        "description": "Function set handle previously obtained from a call to  CryptInitOIDFunctionSet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszDll",
        "description": "Name of the DLL to load. Normally, the DLL name is obtained from the list returned by  CryptGetDefaultOIDDllList. If pwszDll is NULL, a search is performed on the list of installed default functions."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvFuncAddr",
        "description": "A pointer to the address of the return function. If the function fails, a NULL is returned in ppvFuncAddr."
      },
      {
        "in_out": "_Inout_",
        "type": "HCRYPTOIDFUNCADDR*",
        "name": "phFuncAddr",
        "description": "Used only if pwszDll is NULL. On the first call to the function, *phFuncAddr must be NULL to acquire the first installed function.     When this function is successful, *phFuncAddr is set to a function handle. The reference count for the function handle is incremented. After the first call to the function, phFuncAddr is set to the pointer returned by the previous call. This input pointer is always freed within the function through a call to  CryptFreeOIDFunctionAddress by this function. The call to free the pointer is always made even when the main function returns an error. A non-NULLphFuncAddr must be released either through a call to CryptFreeOIDFunctionAddress or by being passed back as input to this function or as input to  CryptGetOIDFunctionAddress. If pwszDll is not NULL, the value of this parameter is ignored and a non-NULL pointer is not freed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptGetDefaultOIDDllList function acquires the list of the names of DLL files that contain registered default object identifier (OID) functions for a specified function set and encoding type.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. This function has the following error codes.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetDefaultOIDDllList",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCRYPTOIDFUNCSET",
        "name": "hFuncSet",
        "description": "Function set handle previously obtained by a call to  CryptInitOIDFunctionSet."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Note  Either a certificate or message encoding type is required. X509_ASN_ENCODING is the default. If that type is indicated, it is used; otherwise, if the PKCS7_ASN_ENCODING type is indicated, it is used."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pwszDllList",
        "description": "A pointer to a buffer to receive the list of zero or more null-terminated file names. The returned list is terminated with a terminating NULL character. For example, a list of two names could be:     L\"first.dll\\0\" L\"second.dll\\0\" L\"\\0\" To retrieve the number of wide characters the buffer must hold, this parameter can be NULL. For more information, see Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchDllList",
        "description": "A pointer to a DWORD that specifies the size, in wide characters, of the returned list pointed to by the pwszDllList parameter. When the function returns, the variable pointed to by the pcchDllList parameter contains the number of wide characters stored in the buffer.     Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptGetOIDFunctionValue function queries a value associated with an OID. The query is made for a specific named value associated with an OID, function name, and encoding type. The function can return the type of queried value, the value, itself, or both.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. This function has the following error code.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetOIDFunctionValue",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "A pointer to the null-terminated string that contains the name of the OID function set."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "If the high-order word of the OID is nonzero, pszOID is a pointer to either a  null-terminated OID string such as \"2.5.29.1\" or a null-terminated ASCII string such as \"file.\" If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszValueName",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the value to be queried."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwValueType",
        "description": "A pointer to a variable to receive the value's type. The type returned through this parameter will be one of the following.  ValueMeaning  REG_DWORD   A 32-bit number.   REG_EXPAND_SZ   A Unicode string that contains unexpanded references to environment variables such as \"%PATH%\". Applications should ensure that the string has a terminating null character before using it. For details about when the string does not have a terminating null character, see RegQueryValueEx.   REG_MULTI_SZ   An array of null-terminated Unicode strings. Applications should ensure that the array is properly terminated by two null characters before using it. For details about when the array is not  terminated by two null characters, see RegQueryValueEx.   REG_SZ   A Unicode string. Applications should ensure that the string has a terminating null character before using it. For details about when the string does not have a terminating null character, see RegQueryValueEx.     The pdwValueType parameter can be NULL if a returned type is not required."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbValueData",
        "description": "A pointer to a buffer to receive the value associated with the pwszValueName parameter. The buffer must be big enough to contain the terminating NULL character. This parameter can be NULL if returned data is not required. This parameter can also be NULL to find the size of the buffer for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbValueData",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pbValueData. In most cases the value returned in *pcbValueData includes the size of the terminating NULL character in the string.  For information about situations where the NULL character is not included, see the Remarks section of RegQueryValueEx. Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptInitOIDFunctionSet initializes and returns the handle of the OID function set identified by a supplied function set name. If the set already exists, the handle of the existing set is returned. If the set does not exist, it is created. This allows different DLLs to install OID functions for the same function set name.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns the handle of the OID function set identified by pszFuncName, or NULL if the function fails. ",
    "remarks": "",
    "return_type": "HCRYPTOIDFUNCSET",
    "category": "Cryptography",
    "name": "CryptInitOIDFunctionSet",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the OID function set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 6,
    "description": "The CryptInstallOIDFunctionAddress function installs a set of callable object identifier (OID) function addresses.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptInstallOIDFunctionAddress",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "This parameter is updated with the hModule parameter passed to DllMain to prevent the DLL that contains the function addresses from being unloaded by  CryptGetOIDFunctionAddress or CryptFreeOIDFunctionAddress. This would be the case when the DLL has also registered OID functions through  CryptRegisterOIDFunction."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function set being installed."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cFuncEntry",
        "description": "Number of array elements in rgFuncEntry[]."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_OID_FUNC_ENTRY",
        "name": "rgFuncEntry[]",
        "description": "Array of CRYPT_OID_FUNC_ENTRY structures, each containing an OID and the starting address of its correlated routine.  \t\t\t\t\t Default functions are installed by setting the pszOID member of the CRYPT_OID_FUNC_ENTRY structure for their array element to CRYPT_DEFAULT_OID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "By default, a new function set is installed at the end of the list of function sets. Setting the CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG flag installs the function set at the beginning of the list."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptRegisterDefaultOIDFunction registers a DLL containing the default function to be called for the specified encoding type and function name. Unlike  CryptRegisterOIDFunction, the function name to be exported by the DLL cannot be overridden.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptRegisterDefaultOIDFunction",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function being registered."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIndex",
        "description": "Index location for the insertion of the DLL in the list of DLLs. If dwIndex is zero, the DLL is inserted at the beginning of the list. If it is CRYPT_REGISTER_LAST_INDEX, the DLL is appended at the end of the list."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszDll",
        "description": "Optional environment-variable string to be expanded using ExpandEnvironmentStrings function before loading the DLL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptRegisterOIDFunction function registers a DLL that contains the function to be called for the specified encoding type, function name, and object identifier (OID).",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "When you have finished using an OID function, unregister it by calling the CryptUnregisterOIDFunction  function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptRegisterOIDFunction",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function being registered."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "OID of the function to be registered. If the high-order word of the OID is nonzero, pszOID is a pointer to either an OID string such as \"2.5.29.1\" or an ASCII string such as \"file.\" If the high-order word of the OID is zero, the low-order word specifies the numeric identifier to be used as the object identifier."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszDll",
        "description": "Name of the DLL file to be registered. It can contain environment-variable strings to be expanded by using the ExpandEnvironmentStrings function before loading the DLL."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOverrideFuncName",
        "description": "String that specifies a name for the function exported in the DLL. If pszOverrideFuncName is NULL, the function name specified by pszFuncName is used."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CryptRegisterOIDInfo function registers the OID information specified in the  CRYPT_OID_INFO structure, persisting it to the registry.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "When you have finished using the OID information, unregister it by calling the CryptUnregisterOIDInfo  function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptRegisterOIDInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPT_OID_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CRYPT_OID_INFO structure with the OID information to register. Specify the group that the OID information is to be registered for by setting the dwGroupId member of the structure. Note  When registering OID information for Suite B algorithms implemented with Cryptography API: Next Generation (CNG), you must set the Algid member of the CRYPT_OID_INFO structure to CALG_OID_INFO_CNG_ONLY (0xFFFFFFFF)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "By default, the registered OID information is installed after Crypt32.dll's OID entries. If CRYPT_INSTALL_OID_INFO_BEFORE_FLAG is set, new OID information is install before Crypt32.dll's entries."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CryptSetOIDFunctionValue function sets a value for the specified encoding type, function name, OID, and value name.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptSetOIDFunctionValue",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function for which the encoding type, OID, and value name is being updated."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "If the high-order word of the object identifier (OID) is nonzero, pszOID is a pointer to either an OID string such as \"2.5.29.1\" or an ASCII string such as \"file\". If the high-order word of the OID is zero, the low-order word specifies the integer identifier to be used as the object identifier."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszValueName",
        "description": "A pointer to a Unicode string containing the name of the value to set. If a value with this name is not already present, the function creates it."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwValueType",
        "description": "Specifies the type of information to be stored as the value's data. This parameter can be one of the following values.  ValueMeaning  REG_DWORD   A 32-bit number.   REG_EXPAND_SZ   A null-terminated Unicode string that contains unexpanded references to environment variables (for example, \"%PATH%\").   REG_MULTI_SZ   An array of null-terminated Unicode strings, terminated by two NULL characters.   REG_SZ   A null-terminated Unicode string."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pbValueData",
        "description": "Points to a buffer containing the data to be stored for the specified value name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbValueData",
        "description": "Specifies the size, in bytes, of the information pointed to by the pbValueData parameter. If the data is of type REG_SZ, REG_EXPAND_SZ, or REG_MULTI_SZ, the size must include the terminating NULL wide character."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptUnregisterDefaultOIDFunction removes the registration of a DLL containing the default function to be called for the specified encoding type and function name.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUnregisterDefaultOIDFunction",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are being used; however, additional encoding types may be added in the future. To match both current encoding types, use:    X509_ASN_ENCODING | PKCS_7_ASN_ENCODING."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function being unregistered."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszDll",
        "description": "Name of the DLL where the function is located."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CryptUnregisterOIDFunction function removes the registration of a DLL that contains the function to be called for the specified encoding type, function name, and OID.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUnregisterOIDFunction",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to be matched. Currently, only X509_ASN_ENCODING and PKCS_7_ASN_ENCODING are used; however, additional encoding types may be added in the future. To match both current encoding types, use:         X509_ASN_ENCODING | PKCS_7_ASN_ENCODING For functions that do not use an encoding type, set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFuncName",
        "description": "Name of the function being unregistered."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "A pointer to the object identifier (OID) that corresponds to the name of the function being unregistered. If the high order word of the OID is nonzero, pszOID is a pointer to either an OID string such as \"2.5.29.1\" or an ASCII string such as \"file.\" If the high order word of the OID is zero, the low order word specifies the integer identifier to be used as the object identifier."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CryptUnregisterOIDInfo function removes the registration of a specified  CRYPT_OID_INFO OID information structure. The structure to be unregistered is identified by the structure's pszOID and dwGroupId members.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptUnregisterOIDInfo",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCRYPT_OID_INFO",
        "name": "pInfo",
        "description": "Specifies the object identifier (OID) information for which the registration is to be removed. The group that the registration is removed for is specified by the dwGroupId member in the pInfo."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CryptGetObjectUrl function acquires the URL of the remote object from a certificate, certificate trust list (CTL), or certificate revocation list (CRL).",
    "library": "Cryptnet.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptGetObjectUrl",
    "is_callback": 0,
    "dll": "Cryptnet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszUrlOid",
        "description": "A pointer to an object identifier (OID) that identifies the URL being requested. If the HIWORD of the pszUrlOid parameter is zero, the LOWORD specifies the integer identifier for the type of the specified structure.     This parameter can be one of the following values. For information about how these values affect the pvPara parameter, see the heading \"For the pvPara parameter\" in the Meaning column.  ValueMeaning  URL_OID_CERTIFICATE_ISSUER   Provides the URL of the certificate issuer retrieved from the authority information access extension or property of a certificate. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure that was issued by the issuer whose URL is being requested.   URL_OID_CERTIFICATE_CRL_DIST_POINT   Provides a list of URLs of the CRL distribution points retrieved from the CRL distribution point extension or property of a certificate. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure whose CRL distribution point is requested.   URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP   Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA)   and CRL distribution point extensions or properties of a certificate. The function returns any CRL distribution point URLs first. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure whose OCSP and CRL distribution point URLs are requested.   URL_OID_CERTIFICATE_OCSP   Provides an OCSP URL from the authority information access (AIA)   extension or property of a certificate. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure whose OCSP URL is requested.   URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT   Provides a list of OCSP and CRL distribution point URLs from the authority information access (AIA)   and CRL distribution point extensions or properties of a certificate. The function returns any OCSP URLs first. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure whose OCSP and CRL distribution point URLs are requested.   URL_OID_CERTIFICATE_ONLY_OCSP   Provides a list of OCSP URLs from the authority information access (AIA)  extension or property of a certificate. Before using any OCSP URLs, you must remove the L\"ocsp:\" prefix. For the pvPara parameter: A pointer to a  CERT_CONTEXT structure whose OCSP URLs are requested.   URL_OID_CTL_ISSUER   Provides the URL of the CTL issuer retrieved from an authority information access attribute method encoded in each signer information in the PKCS #7 CTL. For the pvPara parameter: A pointer to a Signer Index  CTL_CONTEXT structure that was issued by the issuer whose URL, identified by the signer index, is requested.   URL_OID_CTL_NEXT_UPDATE   Provides the URL of the next update of that CTL retrieved from an authority information access CTL extension, property, or signer information attribute method. For the pvPara parameter: A pointer to a Signer Index  CTL_CONTEXT structure whose next update URL is requested, and an optional signer index, in case it is needed to check the signer information attributes.   URL_OID_CRL_ISSUER   Provides the URL of the CRL issuer retrieved from a property on a CRL that was inherited from the subject certificate (either from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority information access extension method. For the pvPara parameter: A pointer to a  CRL_CONTEXT structure that was issued by the issuer whose URL is requested.   URL_OID_CERTIFICATE_FRESHEST_CRL   Retrieves the most recent CRL extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose most recent CRL distribution point is being requested.   URL_OID_CRL_FRESHEST_CRL   Retrieves the most recent CRL extension or property of the CRL. For the pvPara parameter: A pointer to a  CERT_CRL_CONTEXT_PAIR structure that contains the base CRL of a certificate whose most recent CRL distribution point is being requested.   URL_OID_CROSS_CERT_DIST_POINT   Retrieves the cross certificate distribution point extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose cross certificate distribution point is being requested.   URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS   Retrieves the cross certificate Subject Information Access extension or property of the certificate. For the pvPara parameter: The PCCERT_CONTEXT of a certificate whose cross certificate Subject Information Access is being requested."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pvPara",
        "description": "A structure determined by the value of pszUrlOid. For details, see the description for the pszUrlOid parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags used to get the URL locator for an object. This can be zero or a combination of one or more of the following values.  ValueMeaning  CRYPT_GET_URL_FROM_PROPERTY   Locates the URL from the property of the object (the location of the data).   CRYPT_GET_URL_FROM_EXTENSION   Locates the URL from the extension of the object.   CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE   Locates the URL from an unauthenticated attribute from the signer information data.   CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE   Locates the URL from an authenticated attribute from the signer information data."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_URL_ARRAY",
        "name": "pUrlArray",
        "description": "A pointer to a buffer to receive the data for the value entry. This parameter can be NULL to find the length of the buffer required to hold the data.    For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbUrlArray",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. This parameter can be NULL only if pUrlArray is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_URL_INFO",
        "name": "pUrlInfo",
        "description": "An optional pointer to a  CRYPT_URL_INFO structure that receives the data for the value entry."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbUrlInfo",
        "description": "A pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the pUrlArray parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer.     Note  When processing the data returned in the buffer, applications must use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer. On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      },
      {
        "in_out": "_Reserved_",
        "type": "LPVOID",
        "name": "pvReserved",
        "description": "Reserved for future use and must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CryptRetrieveObjectByUrl function retrieves the public key infrastructure (PKI) object from a location specified by a URL.",
    "library": "Cryptnet.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). ",
    "remarks": "The remote object retrieval manager exposes two provider models. One is the Scheme Provider model that allows for installable protocol providers as defined by the URL scheme, that is, ldap, http, ftp, or file. The scheme provider entry point is the same as the CryptRetrieveObjectByUrl function; however, the *ppvObject returned is always a counted array of encoded bits (one per object retrieved). The second provider model is the Context Provider model that allows for installable creators of the context handles (objects) based on the retrieved encoded bits. These are dispatched based on the object identifier (OID) specified in the call to CryptRetrieveObjectByUrl. Individual PKI objects such as certificates, trusts lists, revocation lists, PKCS #7 messages, and multiple homogenous objects can be retrieved. Starting with Windows Vista with Service Pack 1 (SP1) and Windows Server 2008, security of \"http:\" and \"ldap:\" retrievals have been hardened. For more information, see http://support.microsoft.com/kb/946401. This function supports \"http:\" and \"ldap:\" URL schemes as well as newly defined schemes. Windows XP:  \"ftp:\" is not supported for network retrieval. For a summary of changes to the CryptoAPI certificate chain validation logic in Q835732 on Windows XP, see http://support.microsoft.com/kb/887195. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptRetrieveObjectByUrl",
    "is_callback": 0,
    "dll": "Cryptnet.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "pszUrl",
        "description": "The address of a PKI object to be retrieved. The following schemes are supported:  ldap (Lightweight Directory Access Protocol) http https (certificate revocation list (CRL) or online certificate status protocol (OCSP) retrievals only) file"
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszObjectOid",
        "description": "The address of a null-terminated ANSI string that identifies the type of object to retrieve. This can be one of the following values.  ValueMeaning  NULL BLOB   Retrieve one or more data BLOBs. The encoded bits are returned in an array of BLOBs. ppvObject is the address of a CRYPT_BLOB_ARRAY structure pointer that receives the BLOB array. When this structure is no longer needed, you must free it by passing the address of this structure to the CryptMemFree function.   CONTEXT_OID_CERTIFICATE certificate   Retrieve one or more certificates. If a single object is being retrieved, ppvObject is the address of a CERT_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the CERT_CONTEXT structure pointer to the CertFreeCertificateContext function. If multiple objects are being retrieved, ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the certificates. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.   CONTEXT_OID_CRL CRL   Retrieve one or more certificate revocation lists (CRLs).  If a single object is being retrieved, ppvObject is the address of a CRL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the CRL_CONTEXT structure pointer to the CertFreeCRLContext function. If multiple objects are being retrieved, ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the CRLs. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.   CONTEXT_OID_CTL CTL   Retrieve one or more certificate trust lists (CTLs).  If a single object is being retrieved, ppvObject is the address of a CTL_CONTEXT structure pointer that receives the context. When this context is no longer needed, you must free it by passing the CTL_CONTEXT structure pointer to the CertFreeCTLContext function. If multiple objects are being retrieved, ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the CTLs. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.   CONTEXT_OID_PKCS7 PKCS7   ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects from the message. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.   CONTEXT_OID_CAPI2_ANY Function will determine appropriate item   ppvObject is the address of an HCERTSTORE variable that receives the handle of a store that contains the objects. When this store is no longer needed, you must close it by passing this handle to the CertCloseStore function.   CONTEXT_OID_OCSP_RESP OCSP Response   ppvObject is the address of a pointer to a CRYPT_BLOB_ARRAY structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRetrievalFlags",
        "description": "Determines whether to use the cached URL or a URL retrieved from the wire URL. The form in which objects are returned is determined by the value of pszObjectOid.  ValueMeaning  CRYPT_AIA_RETRIEVAL   Validates the content retrieved by a wire URL before writing the URL  to the cache. The default provider does not support the HTTPS protocol for AIA retrievals.   CRYPT_ASYNC_RETRIEVAL   This value is not supported.   CRYPT_CACHE_ONLY_RETRIEVAL   Retrieves the encoded bits from the URL cache only. Do not use the wire to retrieve the URL.   CRYPT_DONT_CACHE_RESULT   Does not store the retrieved encoded bits to the URL cache. If this flag is not set, the retrieved URL is cached.   CRYPT_HTTP_POST_RETRIEVAL   Uses the POST method instead of the default GET method for HTTP retrievals. In a POST URL, additional binary data and header strings are appended to the base URL in the following format: BaseURL/OptionalURLEscaped&Base64EncodedAdditionalData?OptionalAdditionalHTTPHeaders The following example shows the additional binary data delimited by the last slash mark (/) and  a Content-Type header delimited by a question mark (?) appended to a base URL. http://ocsp.openvalidation.org/MEIwQDA%2BMDwwOjAJBgUrDgMCGgUABBQdKNEwjytjKBQADcgM61jfflNpyQQUv1NDgnjQnsOA5RtnygUA37lIg6UCAQI%3D?Content-Type: application/ocsp-request When this flag is set, the CryptRetrieveObjectByUrl function parses the URL by using the last slash mark (/) and question mark (?) delimiters. The string, which is delimited by a slash mark (/), contains an unescaped URL (that is, a plain text URL without escape characters or escape sequences) and Base64 data decoded into binary form before being passed to the WinHttpSendRequest function as the lpOptional parameter. The string delimited by a question mark (?) is passed to the WinHttpSendRequest function as the pwszHeaders parameter.   CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL   Performs A-Record-only DNS lookup on the supplied host string, preventing the generation of false DNS queries when resolving host names. This flag should be used when passing a host name as opposed to a domain name.   CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE   Retrieves the entry index and attribute name for each LDAP object. The beginning of each returned BLOB contains the following ANSI string: \"entry index in decimal\\0attribute name\\0\" When this flag is set, pszObjectOid must be NULL so that a BLOB is returned. This flag only applies to the ldap scheme.   CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL   Fails if the LDAP search scope is not set to base in the URL. Use with LDAP only.   CRYPT_LDAP_SIGN_RETRIEVAL   Digitally signs all of the LDAP traffic to and from a server by using the Kerberos authentication protocol. This feature provides integrity required by some applications.   CRYPT_NO_AUTH_RETRIEVAL   Inhibits automatic authentication handling.   CRYPT_NOT_MODIFIED_RETRIEVAL   Enables a conditional HTTP URL retrieval. When this flag is set, for a conditional retrieval that returns HTTP_STATUS_NOT_MODIFIED, CryptRetrieveObjectByUrl returns TRUE and ppvObject is set to NULL. If pAuxInfo is not NULL, dwHttpStatusCode is set to HTTP_STATUS_NOT_MODIFIED. Otherwise, ppvObject is updated for a successful retrieval.   CRYPT_OFFLINE_CHECK_RETRIEVAL   Keeps track of offline failures and delays before hitting the wire on subsequent retrievals. This value is for wire retrieval only.   CRYPT_PROXY_CACHE_RETRIEVAL   Enables proxy cache retrieval of an object. If a proxy cache was not explicitly bypassed, fProxyCacheRetrieval is set to TRUE in pAuxInfo. This value only applies to HTTP URL retrievals.   CRYPT_RETRIEVE_MULTIPLE_OBJECTS   Retrieves multiple objects if available. All objects must be of a homogeneous object type as determined by the value of pszObjectOid, unless the object identifier (OID) value is CONTEXT_OID_CAPI2_ANY.   CRYPT_STICKY_CACHE_RETRIEVAL   Tags the URL as exempt from being flushed from the cache. For more information, see STICKY_CACHE_ENTRY in INTERNET_CACHE_ENTRY_INFO.   CRYPT_VERIFY_CONTEXT_SIGNATURE   Acquires signature verification on the context created. In this case pszObjectOid must be non-NULL and pvVerify points to the signer certificate context.   CRYPT_VERIFY_DATA_HASH   This flag is not implemented. Do not use it.   CRYPT_WIRE_ONLY_RETRIEVAL   Retrieves the encoded bits from the wire only. Does not use the URL cache."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTimeout",
        "description": "Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function does not time out. This parameter is not used if the URL scheme is file:///."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "ppvObject",
        "description": "The address of a pointer to the returned object. The return type can be one of the supported types shown in pszObjectOid."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTASYNC",
        "name": "hAsyncRetrieve",
        "description": "This parameter is reserved and must be set to NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_CREDENTIALS",
        "name": "pCredentials",
        "description": "This parameter is not used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pvVerify",
        "description": "A pointer to a verification object. This object is a function of the dwRetrievalFlags parameter. It can be NULL to indicate that the caller is not interested in getting the certificate context or index of the signer if dwRetrievalFlags is CRYPT_VERIFY_CONTEXT_SIGNATURE."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_RETRIEVE_AUX_INFO",
        "name": "pAuxInfo",
        "description": "An optional pointer to a  CRYPT_RETRIEVE_AUX_INFO structure. If not NULL and if the cbSize member of the structure is set, this parameter returns the time of the last successful wire retrieval."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFXExportCertStore function exports the certificates and, if available, the associated private keys from the referenced certificate store. This is an old function kept for compatibility with Internet Explorer 4.0 clients. New applications should use the  PfxExportCertStoreEx function that provides enhanced private key security.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE (nonzero) if the function succeeds, and FALSE (zero) if the function fails. For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFXExportCertStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hStore",
        "description": "Handle of the certificate store containing the certificates to be exported."
      },
      {
        "in_out": "_Inout_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pPFX",
        "description": "A pointer to a CRYPT_DATA_BLOB structure to contain the PFX packet with the exported certificates and keys. If pPFX->pbData is NULL, the function calculates the number of bytes needed for the encoded BLOB and returns this in pPFX->cbData. When the function is called with pPFX->pbData pointing to an allocated buffer of the needed size, the function copies the encoded bytes into the buffer and updates pPFX->cbData with the encode byte length."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szPassword",
        "description": "String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag values can be set to any combination of the following.  ValueMeaning  EXPORT_PRIVATE_KEYS   Private keys are exported as well as the certificates.   REPORT_NO_PRIVATE_KEY   If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to either CRYPT_E_NOT_FOUND or NTE_NO_KEY.   REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY   If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "The PFXExportCertStoreEx function exports the certificates and, if available, their associated private keys from the referenced certificate store. This function replaces the older  PfxExportCertStore function. It should be used for its enhanced private key security. The PFX BLOB created by this function is protected by a password.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE (nonzero) if the function succeeds, and FALSE (zero) if the function fails. For extended error information, call  GetLastError. ",
    "remarks": "Beginning with Windows 8 and Windows Server 2012, you can protect the PFX password to an Active Directory user, computer, or group. If you choose to do so but do not create a password, a temporary password will be randomly selected. The password is encrypted by using the Active Directory principal and then embedded in the PFX BLOB. For more information, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFXExportCertStoreEx",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hStore",
        "description": "Handle of the certificate store containing the certificates to be exported."
      },
      {
        "in_out": "_Inout_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pPFX",
        "description": "A pointer to a CRYPT_DATA_BLOB structure to contain the PFX packet with the exported certificates and keys. If pPFX->pbData is NULL, the function calculates the number of bytes needed for the encoded BLOB and returns this in pPFX->cbData. When the function is called with pPFX->pbData pointing to an allocated buffer of the needed size, the function copies the encoded bytes into the buffer and updates pPFX->cbData with the encode byte length."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szPassword",
        "description": "String password used to encrypt and verify the PFX packet. When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvPara",
        "description": "This parameter must be NULL if the dwFlags parameter does not contain PKCS12_PROTECT_TO_DOMAIN_SIDS. Prior to Windows 8 and Windows Server 2012, therefore, this parameter must be NULL. Beginning with Windows 8 and Windows Server 2012, if the dwFlags parameter contains PKCS12_PROTECT_TO_DOMAIN_SIDS, you can set the pvPara parameter to point to an NCRYPT_DESCRIPTOR_HANDLE value to identify which Active Directory principal the PFX password will be protected to inside of the PFX BLOB. Currently, the password can be protected to an Active Directory user, computer, or group. For more information about protection descriptors, see NCryptCreateProtectionDescriptor."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag values can be set to any combination of the following.  ValueMeaning  EXPORT_PRIVATE_KEYS 0x0004   Private keys are exported as well as the certificates.   REPORT_NO_PRIVATE_KEY 0x0001   If a certificate is encountered that has no associated private key, the function returns FALSE with the last error set to either CRYPT_E_NOT_FOUND or NTE_NO_KEY.   REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY 0x0002   If a certificate is encountered that has a non-exportable private key, the function returns FALSE and the last error set to NTE_BAD_KEY, NTE_BAD_KEY_STATE, or NTE_PERM.   PKCS12_INCLUDE_EXTENDED_PROPERTIES 0x0010   Export all extended properties on the certificate.     Windows Server 2003 and Windows XP:  This value is not supported.   PKCS12_PROTECT_TO_DOMAIN_SIDS 0x0020   The PFX BLOB contains an embedded password that will be protected to the Active Directory (AD) protection descriptor pointed to by the pvPara parameter. If the szPassword parameter is not  NULL or empty, the specified password is protected. If, however,  the szPassword parameter is NULL or an empty string, a random forty (40)  character password is created and protected.  PFXImportCertStore uses the specified protection descriptor to decrypt the embedded password, whether specified by the user or randomly generated, and then uses the password to decrypt the PFX BLOB. Windows 8 and Windows Server 2012:  Support for this flag begins."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The PFXImportCertStore function imports a PFX BLOB and returns the handle of a store that contains certificates and any associated private keys.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns a handle to a certificate store that contains the imported certificates, including available private keys. If the function fails, that is, if the password parameter does not contain an exact match with the password used to encrypt the exported packet or if there were any other problems decoding the PFX BLOB, the function returns NULL, and an error code can be found by calling the GetLastError function. ",
    "remarks": "The PFXImportCertStore function opens a temporary store. If the function succeeds, you should close the handle to the store by calling the CertCloseStore function. When you import a certificate from the PFX packet, the CSP/KSP container name is determined by using the AttributeId with OID 1.3.6.1.4.1.311.17.1 of the PKCS8ShroudedKeyBag SafeBag [bagId: 1.2.840.113549.1.12.10.1.2] (see PKCS #12 for details about the ASN.1 structure of this).   If the AttributeId is not present and the PREFER_CNG flag is passed, MS_KEY_STORAGE_PROVIDER is picked. If the AttributeId is not present and the PREFER_CNG flag is not passed, the provider name is determined based on the public key algorithm (that is, the public key algorithm is determined by the AlgorithmIdentifier in PKCS #8): Similarly, the key specification is determined by using the AttributeId with OID 2.5.29.15 (szOID_KEY_USAGE) as follows:  If the AttributeId is not present, then the CAPI key value is set to AT_KEYEXCHANGE for RSA or DH and the algorithm is determined by the AlgorithmIdentifier in PKCS #8; otherwise, the algorithm is set to AT_SIGNATURE. For the CNG key value, all ncrypt key usage is set. ",
    "return_type": "HCERTSTORE",
    "category": "Cryptography",
    "name": "PFXImportCertStore",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pPFX",
        "description": "A pointer to a CRYPT_DATA_BLOB structure that contains a PFX packet with the exported and encrypted certificates and keys."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szPassword",
        "description": "A string password used to decrypt and verify the PFX packet. Whether set to a string of length greater than zero or set to an empty string or to NULL,  this value must be exactly the same as the value that was used to encrypt the packet. Beginning with Windows 8 and Windows Server 2012, if the PFX packet was created in the PFXExportCertStoreEx function by using the PKCS12_PROTECT_TO_DOMAIN_SIDS flag, the PFXImportCertStore function attempts to decrypt the password by using the Active Directory (AD) principal that was used to encrypt it. The AD principal is specified in the pvPara parameter. If the szPassword parameter in the PFXExportCertStoreEx function was an empty string or NULL and the dwFlags parameter was set to PKCS12_PROTECT_TO_DOMAIN_SIDS, that function randomly generated a password and encrypted it to the AD principal specified in the pvPara parameter. In that case you should set the password to the value, empty string or NULL, that was used when the PFX packet was created. The PFXImportCertStore function will use the AD principal to decrypt the random password, and the randomly generated password will be used to decrypt the PFX certificate. When you have finished using the password, clear it from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter can be one of the following values.  ValueMeaning  CRYPT_EXPORTABLE 0x00000001   Imported keys are marked as exportable. If this flag is not used, calls to  the CryptExportKey function with the key handle fail.   CRYPT_USER_PROTECTED 0x00000002   The user is to be notified through a dialog box or other method when certain attempts to use this key are made. The precise behavior is specified by the cryptographic service provider (CSP) being used. Prior to Internet Explorer 4.0, Microsoft cryptographic service providers ignored this flag. Starting with Internet Explorer 4.0, Microsoft providers support this flag. If the provider context was opened with the CRYPT_SILENT flag set, using this flag causes a failure and the last error is set to NTE_SILENT_CONTEXT.   CRYPT_MACHINE_KEYSET 0x00000020   The private keys are stored under the local computer and not under the current user.   CRYPT_USER_KEYSET 0x00001000   The private keys are stored under the current user and not under the local computer even if the PFX BLOB specifies that they should go into the local computer.   PKCS12_PREFER_CNG_KSP 0x00000100   Indicates that the CNG key storage provider (KSP) is preferred. If the CSP is specified in the PFX file, then the CSP is used, otherwise the KSP is preferred. If the CNG KSP is unavailable, the PFXImportCertStore function will fail. Windows Server 2003 and Windows XP:  This value is not supported.   PKCS12_ALWAYS_CNG_KSP 0x00000200    Indicates that the CNG KSP is always used. When specified, PFXImportCertStore attempts to use the CNG KSP irrespective of provider information in the PFX file. If the CNG KSP is unavailable, the import will not fail. Windows Server 2003 and Windows XP:  This value is not supported.   PKCS12_ALLOW_OVERWRITE_KEY 0x00004000    Allow overwrite of the existing key. Specify this flag when you encounter a scenario in which you must import a PFX file that contains a key name that already exists. For example, when you import a PFX file, it is possible that a container of the same name is already present because there is no unique namespace for key containers.  If you have created a \"TestKey\" on your computer, and then you import a PFX file that also has \"TestKey\" as the key container, the PKCS12_ALLOW_OVERWRITE_KEY setting allows the key to be overwritten. Windows Server 2003 and Windows XP:  This value is not supported.   PKCS12_NO_PERSIST_KEY 0x00008000   Do not persist the key. Specify this flag when you do not want to persist the key. For example, if it is not necessary to store the key after verification, then instead of creating a container and then deleting it, you can specify this flag to dispose of the key immediately. Note  If the PKCS12_NO_PERSIST_KEY flag is not set, keys are persisted on disk. If you do not want to persist the keys beyond their usage, you must delete them by calling the CryptAcquireContext  function with the CRYPT_DELETEKEYSET flag set in the dwFlags parameter.   Windows Server 2003 and Windows XP:  This value is not supported.   PKCS12_INCLUDE_EXTENDED_PROPERTIES 0x0010   Import all extended properties on the certificate that were saved on the certificate when it was exported.     Windows Server 2003 and Windows XP:  This value is not supported.    0x10000000   Unpack but do not persist the results."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "The PFXIsPFXBlob function attempts to decode the outer layer of a BLOB as a PFX packet.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function returns TRUE if the BLOB can be decoded as a PFX packet. If the outer layer of the BLOB cannot be decoded as a PFX packet, the function returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFXIsPFXBlob",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pPFX",
        "description": "A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "The PFXVerifyPassword function attempts to decode the outer layer of a BLOB as a Personal Information Exchange (PFX) packet and to decrypt it with the given password. No data from the BLOB is imported.",
    "library": "Crypt32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "Wincrypt.h",
    "return_value": "The function return TRUE if the password appears correct; otherwise, it returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFXVerifyPassword",
    "is_callback": 0,
    "dll": "Crypt32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pPFX",
        "description": "A pointer to a CRYPT_DATA_BLOB structure that the function will attempt to decode as a PFX packet."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szPassword",
        "description": "String password to be checked. For this function to succeed, this password must be exactly the same as the password used to encrypt the packet. If you set this value to an empty string or NULL, this function typically attempts to decrypt the password embedded in the PFX BLOB by using the empty string or NULL. However, beginning with Windows 8 and Windows Server 2012, if a NULL or empty password was specified when the PFX BLOB was created and the application also specified  that the password should be protected to an Active Directory (AD) principal, the Cryptography API (CAPI) randomly generates a password, encrypts it to the AD principal and embeds it in the PFX BLOB. The PFXVerifyPassword function will then try to use the specified AD principal (current user, computer, or AD group member) to decrypt the password. For more information about protecting PFX to an AD principal, see the pvPara parameter and the PKCS12_PROTECT_TO_DOMAIN_SIDS flag of the PFXExportCertStoreEx function. When you have finished using the password, clear the password from memory by calling the SecureZeroMemory function. For more information about protecting passwords, see Handling Passwords."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "The OffloadModExpo function offloads modular exponentiation from a CSP to a hardware accelerator.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To retrieve extended error information, call  GetLastError. ",
    "remarks": "A CSP will check in the registry for the value HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Cryptography\\Offload\\ExpoOffload that can be the name of a DLL. The CSP uses  LoadLibrary to load that DLL and calls  GetProcAddress to get the OffloadModExpo entry point. The CSP uses the entry point to perform all modular exponentiations for both public and private key operations. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "OffloadModExpo",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbBase",
        "description": "A pointer to the base value to be raised by the exponent. The value is in little-endian form and the length (number of bytes in the value) must be the length passed in cbMod. The value must be padded with 0x00 bytes if the most significant byte does not have a bit set. This value must be less than the value passed in the pbMod parameter."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbExpo",
        "description": "A pointer to the exponent the base value is to be raised to. The value is in little-endian form and the length (number of bytes in the value) must be the length passed in cbMod. The value must be padded with 0x00 bytes if the most significant byte does not have a bit set. This value must be less than the value passed in the pbMod parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbExpo",
        "description": "DWORD value representing the length of the exponent in bytes."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbMod",
        "description": "A pointer to the modulus. The value is in little-endian form and the length (number of bytes in the value) must be the length passed in cbMod. The most significant byte of the modulus value must not be a 0x00 byte."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbMod",
        "description": "DWORD value representing the length of the modulus in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbResult",
        "description": "A pointer to the calculated result."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pReserved",
        "description": "This parameter is reserved for future use and is set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and is set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CertSrvBackupClose  function closes the file opened by the  CertSrvBackupOpenFile function.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "For every successful call to CertSrvBackupOpenFile, there should be a subsequent call to CertSrvBackupClose. Upon completion of backing up a  file, the file needs to be closed. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupClose",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The CertSrvBackupEnd function ends a Certificate Services backup session.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "Upon completion of a backup session, the session needs to be terminated by means of CertSrvBackupEnd. For every successful call to CertSrvBackupPrepare, there should be a call to CertSrvBackupEnd. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupEnd",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The CertSrvBackupFree function is used to free memory allocated from certain Certificate Services Backup APIs.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "Call this function when finished with memory allocated by using the following functions: ",
    "return_type": "void",
    "category": "Cryptography",
    "name": "CertSrvBackupFree",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VOID*",
        "name": "pv",
        "description": "A pointer to the memory to be freed."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The CertSrvBackupGetBackupLogs function retrieves the list of Certificate Services log file names that need to be backed up for the given backup context.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "The log files represent database activity (request submissions, certificate revocation, and so on) that has occurred since the last log file truncation. Log file volume increases as database activity occurs. The log files can be decreased in size by performing a backup and then calling  CertSrvBackupTruncateLogs. This function's name in the Certadm.dll is CertSrvBackupGetBackupLogsW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVBACKUPGETBACKUPLOGSW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupGetBackupLogs",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR**",
        "name": "ppwszzBackupLogFiles",
        "description": "A pointer to WCHAR pointer that will receive the list of null-terminated log file names. ..."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbSize",
        "description": "A pointer to the DWORD value that specifies the number of bytes in ppwszzBackupLogFiles."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The CertSrvBackupGetDatabaseNames function retrieves the list of Certificate Services database file names that need to be backed up for the given backup context.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "This function's name in the Certadm.dll is CertSrvBackupGetDatabaseNamesW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVBACKUPGETDATABASENAMESW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupGetDatabaseNames",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR**",
        "name": "ppwszzAttachmentInformation",
        "description": "A pointer to a WCHAR pointer that will receive the list of null-terminated database file names. ..."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbSize",
        "description": "A pointer to the DWORD value that specifies the number of bytes in ppwszzAttachmentInformation."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The CertSrvBackupGetDynamicFileList function retrieves the list of Certificate Services dynamic file names that need to be backed up for the given backup context. The dynamic files are those that are not included in the Certificate Services database backup.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "Use this function to retrieve a list of the Certificate Services dynamic file names. These files are separate from the Certificate Services database and log files, and they are not backed up by the Certificate Services backup APIs. As a result, some other means must be used to back up the dynamic files. An example of a Certificate Services dynamic file is the certificate revocation list (CRL). This function's name in the Certadm.dll is CertSrvBackupGetDynamicFileListW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVBACKUPGETDYNAMICFILELISTW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupGetDynamicFileList",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR**",
        "name": "ppwszzFileList",
        "description": "A pointer to a WCHAR pointer that will receive the list of null-terminated dynamic file names used by Certificate Services. ..."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbSize",
        "description": "A pointer to the DWORD value that specifies the number of bytes in ppwszzFileList."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The CertSrvBackupOpenFile function opens a file for backup.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "Use this function to open a file for backup purposes. When you have finished using the file, close the file by calling  the CertSrvBackupClose function. The name of this  function in Certadm.dll is CertSrvBackupOpenFileW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVBACKUPOPENFILEW in  Certbcli.h. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupOpenFile",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      },
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszAttachmentName",
        "description": "File name to open for backup purposes. This file name would be parsed from a list produced by means of  CertSrvBackupGetBackupLogs or  CertSrvBackupGetDatabaseNames. Note that the names returned by CertSrvBackupGetBackupLogs and CertSrvBackupGetDatabaseNames must have the single-WCHAR CSBFT_* prefix stripped before CertSrvBackupOpenFile is called."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbReadHintSize",
        "description": "Number of bytes used as a hint when the file is read by  CertSrvBackupRead. The cbReadHintSize parameter passed to the first CertSrvBackupOpenFile call for the backup context is used to size the read buffer. Pass zero for this parameter, and the buffer will be sized at a reasonably efficient size chosen by CertSrvBackupOpenFile. If insufficient memory is available, the buffer size will be reduced until memory allocation succeeds or until the buffer size reaches its minimum possible value. Pass a nonzero size to cause CertSrvBackupOpenFile to size the buffer to a power of two near the value of cbReadHintSize. The  implementation will choose only powers of two between 64 KB and 4 MB."
      },
      {
        "in_out": "_Out_",
        "type": "LARGE_INTEGER*",
        "name": "pliFileSize",
        "description": "A pointer to a LARGE_INTEGER value that represents the number of bytes in the file."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The CertSrvBackupPrepare function is used to prepare a Certificate Services server for backup operations.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success, and *phbc will be set to an HCSBC which can be used by other Certificate Services backup APIs. ",
    "remarks": "Before a Certificate Services backup can occur, it is necessary to create an HCSBC by means of CertSrvBackupPrepare. The resulting HCSBC is a necessary parameter of Certificate Services backup functions which can be used to list, open, read, and close files, as well as truncate the log files. This function's name in Certadm.dll is CertSrvBackupPrepareW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVBACKUPPREPAREW in the Certbcli.h header file. To execute this call, you must have the backup privilege. For details, see  Setting the Backup and Restore Privileges. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupPrepare",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszServerName",
        "description": "A pointer to the machine name of the server to prepare for online backup. This name can be the NetBIOS name or the DNS name."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "grbitJet",
        "description": "Value used by the database engine; this value should be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwBackupFlags",
        "description": "Specifies the backup type. This can be either of the following values.  ValueMeaning  CSBACKUP_TYPE_FULL   Backup the Certificate Services database, logs and related files.   CSBACKUP_TYPE_LOGS_ONLY   Backup the log files only."
      },
      {
        "in_out": "_Out_",
        "type": "HCSBC*",
        "name": "phbc",
        "description": "A pointer to a Certificate Services backup context handle (HCSBC)."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The CertSrvBackupRead function reads bytes from a Certificate Services file.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "After opening the file for backup purposes (using  CertSrvBackupOpenFile), call CertSrvBackupRead to retrieve the contents of the file, and call an application-specific routine to write the contents to a backup medium. CertSrvBackupRead and the application-specific routine can be placed in a loop until all the bytes of the file are read and backed up. When done reading the file, close it by calling  CertSrvBackupClose. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupRead",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      },
      {
        "in_out": "_Out_",
        "type": "VOID*",
        "name": "pvBuffer",
        "description": "Void pointer to storage which will contain bytes read from the file being backed up."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbBuffer",
        "description": "Size of the storage area referenced by pvBuffer."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbRead",
        "description": "A pointer to a DWORD value which represents the actual number of bytes read by CertSrvBackupRead. The number of bytes read can be less than the size of the storage area allocated to pvBuffer if the end of the file has been reached."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The CertSrvBackupTruncateLogs function eliminates redundant records and reduces the disk storage space used by log files. Before truncating the log files, ensure that a backup of all files returned by  CertSrvBackupGetDatabaseNames and  CertSrvBackupGetBackupLogs have been secured.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "After securing a backup of the database and log files, the log files can optionally be truncated. Log file volume increases with database activity, and truncating the log files will reduce the redundant records in the log files (thereby decreasing the disk space used to store the log files). The log files are provided for database integrity and efficiency. If a less-than-graceful exit occurs with the Certificate Services application, the next time Certificate Services is started, the database replays the log files to prevent data corruption from being introduced into the database. Depending on the volume of the log files, the log file replay can be a time-consuming process. During this replay, the certification authority will be unavailable for other activity. Note that if the Certificate Services application is properly halted (such as by stopping the service or by shutting down the operating system properly), the log files are not replayed the next time it is started. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvBackupTruncateLogs",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 2,
    "description": "The CertSrvIsServerOnline function  determines if a Certificate Services server is online; if the Certificate Services server is not online, backup operations will not be successful.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. This function will fail if Certificate Services is not running. If Certificate Services is running and ready to accept requests, this function will return S_OK, and *pfServerOnline will point to a value of TRUE. If Certificate Services is running in suspended (or paused) mode, this function will return S_OK, and *pfServerOnline will point to a value of FALSE. ",
    "remarks": "Call this function to determine whether a Certificate Services server is online and available for backup operations. This function's name in Certadm.dll is CertSrvIsServerOnlineW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVISSERVERONLINEW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvIsServerOnline",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszServerName",
        "description": "A pointer to the NetBIOS or DNS machine name of the server to check for online status."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfServerOnline",
        "description": "A pointer to Boolean value which will be TRUE if the Certificate Services server is online and FALSE if it is not online."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The CertSrvRestoreEnd function ends a Certificate Services restore session.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "When a restore session is complete, terminate the session by calling CertSrvRestoreEnd. For every successful call to CertSrvRestorePrepare, there should be a call to CertSrvRestoreEnd. When a restore is complete, it is important that you make a new full backup of the Certificate Services database. This is necessary to truncate the restored log files and to establish a base backup set for future restores. Backups performed after a restore cannot be mixed with backups (full or incremental) taken before the restore; that is, after a certificate services database is restored and has progressed to a subsequent state, you cannot use the pre-restoration backups to restore the database to that subsequent state. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvRestoreEnd",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup context."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The CertSrvRestoreGetDatabaseLocations function is used both in backup and restore scenarios and retrieves the list of Certificate Services database location names for all the files being backed up or restored.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "Certificate Services must be running for this method to succeed. This function's name in Certadm.dll is CertSrvRestoreGetDatabaseLocationsW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVRESTOREGETDATABASELOCATIONSW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvRestoreGetDatabaseLocations",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services backup or restore context."
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR**",
        "name": "ppwszzDatabaseLocationList",
        "description": "A pointer to a WCHAR pointer to receive the list of null-terminated database location names, log directory name, and system (or checkpoint) directory name. ..."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbSize",
        "description": "A pointer to the DWORD value that specifies the number of bytes in ppwszzDatabaseLocationList."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The CertSrvRestorePrepare  function  prepares a Certificate Services instance for restore operations.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success, and *phbc is set to an HCSBC, which can be used by other Certificate Services restore APIs. ",
    "remarks": "Before a Certificate Services restore operation can occur, it is necessary to create an HCSBC by means of CertSrvRestorePrepare. This HCSBC can be used by various Certificate Services restore functions. This function's name in Certadm.dll is CertSrvRestorePrepareW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVRESTOREPREPAREW in the Certbcli.h header file. To execute this call, you must have the restore privilege. For more information, see  Setting the Backup and Restore Privileges. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvRestorePrepare",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszServerName",
        "description": "A pointer to the computer name of the server to prepare for restore operations. This name can be the NetBIOS name or the DNS name."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwRestoreFlags",
        "description": "A bitfield that represents the combination of values in the following table.  ValueMeaning  CSRESTORE_TYPE_FULL   Restore Certificate Services database, logs, and related files."
      },
      {
        "in_out": "_Out_",
        "type": "HCSBC*",
        "name": "phbc",
        "description": "A pointer to a Certificate Services backup context handle (HCSBC)."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 8,
    "description": "The CertSrvRestoreRegister function registers a Certificate Services restore.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "Use this function to register a restore operation. All subsequent restore operations will be interlocked. The restore target will be prevented from starting (or successfully executing another call to CertSrvRestoreRegister) until  CertSrvRestoreRegisterComplete is called. When restoring more than one incremental backup, the order in which the incremental backups are registered does not matter. However, the full database backup must be registered before registering the incremental backups. This function requires that the calling account be  a local administrator. If this is not practical, use the CertSrvRestoreRegisterThroughFile function instead. The CertSrvRestoreRegisterThroughFile function only requires that the calling account have the restore privilege. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvRestoreRegister",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to the Certificate Services restore context. This handle is obtained by calling  the CertSrvRestorePrepare function."
      },
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszCheckPointFilePath",
        "description": "A pointer to a null-terminated Unicode string that contains the restore path for the check point file. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszLogPath",
        "description": "A pointer to a null-terminated Unicode string that contains the current log file directory. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_",
        "type": "CSEDB_RSTMAP",
        "name": "rgrstmap[]",
        "description": "An array of CSEDB_RSTMAP structures that contains the restore map. If you are performing a full database restoration, this parameter specifies the name of the backup database, as well as a new name for the database after it is restored. The backup database name is referenced by the pwszDatabaseName member, and the new database name is referenced by the pwszNewDatabaseName member. If the intent is to maintain the same name for both the backup database and the restored database, set both the pwszNewDatabaseName and the pwszDatabaseName members to the same name. The backup database name is constructed from the path returned by the backup client's call to  the CertSrvRestoreGetDatabaseLocations function. CertSrvRestoreGetDatabaseLocations would have been called during a full backup, and the backup client would have saved the returned path. If you are performing an incremental restoration, pass NULL for this parameter."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "crstmap",
        "description": "The number of elements in the rgrstmap array. Pass zero for this parameter if you are performing an incremental restoration."
      },
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszBackupLogPath",
        "description": "A pointer to a null-terminated Unicode string that contains the path for the backup log directory. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "genLow",
        "description": "The lowest log number that was restored in this restore session. Log files are in the form of edbXXXXX.log, where XXXXX is a five hexadecimal digit value. For example, edb00001.log is the first log file created by the internal database. For purposes of this function, a value of one in genLow corresponds to the log file edb00001.log."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "genHigh",
        "description": "The highest log number that was restored in this restore session."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 2,
    "description": "The CertSrvRestoreRegisterComplete  function completes a registered Certificate Services restore operation.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "If a registered restore operation is not completed, Certificate Services will not start. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvRestoreRegisterComplete",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to a Certificate Services restore context. You must set this handle by calling  CertSrvRestoreRegister before using it in CertSrvRestoreRegisterComplete."
      },
      {
        "in_out": "_In_",
        "type": "HRESULT",
        "name": "hrRestoreState",
        "description": "HRESULT value indicating the success code for the restore operation. Set this value to S_OK if the restore operation was successful."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 8,
    "description": "The CertSrvRestoreRegisterThroughFile function registers a Certificate Services restore.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "This function is identical to the CertSrvRestoreRegister function except that CertSrvRestoreRegister requires the calling account to be a local administrator. The CertSrvRestoreRegisterThroughFile function only requires that the calling account have the restore privilege. ",
    "return_type": "HRESULT CERTBCLI_API",
    "category": "Cryptography",
    "name": "CertSrvRestoreRegisterThroughFile",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCSBC",
        "name": "hbc",
        "description": "A handle to the Certificate Services restore context. This handle is obtained by calling  the CertSrvRestorePrepare function."
      },
      {
        "in_out": "_In_opt_",
        "type": "const WCHAR*",
        "name": "pwszCheckPointFilePath",
        "description": "A pointer to a null-terminated Unicode string that contains the restore path for the check point file. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_opt_",
        "type": "const WCHAR*",
        "name": "pwszLogPath",
        "description": "A pointer to a null-terminated Unicode string that contains the current log file directory. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_opt_",
        "type": "CSEDB_RSTMAP",
        "name": "rgrstmap[]",
        "description": "An array of CSEDB_RSTMAP structures that contains the restore map. If you are performing a full database restoration, this parameter specifies the name of the backup database, as well as a new name for the database after it is restored. The backup database name is referenced by the pwszDatabaseName member, and the new database name is referenced by the pwszNewDatabaseName member. If the intent is to maintain the same name for both the backup database and the restored database, set both the pwszNewDatabaseName and the pwszDatabaseName members to the same name. The backup database name is constructed from the path returned by the backup client's call to  the CertSrvRestoreGetDatabaseLocations function. CertSrvRestoreGetDatabaseLocations would have been called during a full backup, and the backup client would have saved the returned path. If you are performing an incremental restoration, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "crstmap",
        "description": "The number of elements in the rgrstmap array. Set this value to one if a you are performing a full restoration, or zero if you are performing an incremental restoration."
      },
      {
        "in_out": "_In_opt_",
        "type": "const WCHAR*",
        "name": "pwszBackupLogPath",
        "description": "A pointer to a null-terminated Unicode string that contains the path for the backup log directory. Pass NULL for this parameter if it is not needed."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "genLow",
        "description": "The lowest log number that was restored in this restore session. Log files are in the form of edbXXXXX.log, where XXXXX is a five hexadecimal digit value. For example, edb00001.log is the first log file created by the internal database. For purposes of this function, a value of one in genLow corresponds to the log file edb00001.log."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "genHigh",
        "description": "The highest log number that was restored in this restore session."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The CertSrvServerControl  function issues a service control command to programmatically stop Certificate Services.",
    "library": "Certadm.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Certbcli.h (include Certsrv.h)",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates success. ",
    "remarks": "The purpose of this function is to allow a backup or restore application to programmatically stop the Certificate Services application (thereby not requiring the use of the service controller APIs). Stopping Certificate Services in this manner will also work when Certificate Services is running in console mode; the service controller APIs cannot control applications running in console mode. This function's name in Certadm.dll is CertSrvServerControlW. You must use this form of the name when calling GetProcAddress. Also, this function is defined as type FNCERTSRVSERVERCONTROLW in the Certbcli.h header file. ",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "CertSrvServerControl",
    "is_callback": 0,
    "dll": "Certadm.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszServerName",
        "description": "A pointer to a name or a configuration string of the server to be issued the control command."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwControlFlags",
        "description": "Value representing the control command being issued to the Certificate Services server specified by pwszServerName. The following value is supported for dwControlFlags.  ValueMeaning  CSCONTROL_SHUTDOWN   Stop Certificate Services."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbOut",
        "description": "For future use, this parameter will be the number of bytes allocated to ppbOut. The current implementation does not allocate memory to ppbOut. You can set this value to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE**",
        "name": "ppbOut",
        "description": "For future use, this parameter will be the pointer to pointer to bytes representing the output from the issued command. The current implementation does not allocate memory to ppbOut. You can set this value to NULL."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 2,
    "description": "The CertChainFindByIssuerCallback function is an application-defined callback function that allows the application to filter certificates that might be added to the certificate chain. A pointer to this function is provided in the pfnFindCallback member of the CERT_CHAIN_FIND_BY_ISSUER_PARA structure.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Return TRUE to create a chain for the certificate specified in the pCert parameter, or FALSE otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertChainFindByIssuerCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCert",
        "description": "A pointer to a CERT_CONTEXT structure that contains the certificate in question."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvFindArg",
        "description": "A pointer to an application-defined value. This is the same value that was passed in the pvFindArg member of the CERT_CHAIN_FIND_BY_ISSUER_PARA structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The CertDllOpenStoreProv function is implemented by a store-provider and is used to open a store. This function is called by  the CertOpenStore function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "TRUE if successful; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertDllOpenStoreProv",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "lpszStoreProvider",
        "description": "A pointer to a null-terminated ANSI string that contains the store provider type.  The following values  represent the predefined store types. The store provider type determines the contents of the pvPara parameter and the use and meaning of the high word of the dwFlags parameter. Additional store providers can be installed or registered by using  the CryptInstallOIDFunctionAddress or  CryptRegisterOIDFunction function. For more information about adding store providers, see  Extending CertOpenStore Functionality.     Provider identifierDescriptionpvPara contents  CERT_STORE_PROV_MEMORY sz_CERT_STORE_PROV_MEMORY  Creates a certificate store in cached memory. No certificates, certificate revocation lists (CRLs), or certificate trust lists (CTLs) are initially loaded into the store. Typically used to create a temporary store. Any addition of certificates, CRLs, or CTLs or changes in properties of certificates, CRLs, or CTLs in a memory store are not automatically saved. They can be saved to a file or to a memory BLOB by using CertSaveStore.  Not used.   CERT_STORE_PROV_FILE  Initializes the store with certificates, CRLs, and CTLs read from a specified open file. This provider expects the file to contain only a serialized store and not either PKCS #7 signed messages or a single encoded certificate. The file pointer must be positioned at the beginning of the serialized store information. After the data in the serialized store has been loaded into the certificate store, the file pointer is positioned at the beginning of any data that can follow the serialized store data in the file. If CERT_FILE_STORE_COMMIT_ENABLE is set in dwFlags, the file handle is duplicated and the store is always committed as a serialized store. The file is not closed when the store is closed.  A pointer to the handle of a file opened with CreateFile.   CERT_STORE_PROV_FILENAME_A  Initializes the store with certificates, CRLs, and CTLs from a file. The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.  The dwEncodingType parameter must contain the encoding types to be used with both messages and certificates. If the file contains an X.509 encoded certificate, the open operation fails with GetLastError and returns ERROR_ACCESS_DENIED.          If the CERT_FILE_STORE_COMMIT_ENABLE flag is set in dwFlags, the dwCreationDisposition value passed to CreateFile is as follows:  If the CERT_STORE_CREATE_NEW_FLAG flag is set,           CreateFile uses CREATE_NEW. If the CERT_STORE_OPEN_EXISTING_FLAG flag is set, CreateFile uses OPEN_EXISTING. For all other settings of dwFlags, CreateFile uses OPEN_ALWAYS.  If dwFlags includes CERT_FILE_STORE_COMMIT_ENABLE, the file is committed as either a PKCS #7 or a serialized store depending on the file type opened. If the file was empty or if the file name has either a .p7c or .spc extension, the file is committed as a PKCS #7. Otherwise, the file is committed as a serialized store.  A pointer to null-terminated ANSI string that contains the name of an existing, unopened file.   CERT_STORE_PROV_FILENAME CERT_STORE_PROV_FILENAME_W sz_CERT_STORE_PROV_FILENAME sz_CERT_STORE_PROV_FILENAME_W  Same as CERT_STORE_PROV_FILENAME_A.  A pointer to null-terminated Unicode string that contains the name of an existing, unopened file.   CERT_STORE_PROV_COLLECTION sz_CERT_STORE_PROV_COLLECTION  Opens a store that will be a collection of other stores. Stores are added to or removed from the collection by using CertAddStoreToCollection and CertRemoveStoreFromCollection. When a store is added to a collection, all certificates, CRLs, and CTLs in that store become available to searches or enumerations of the collection store. The high word of dwFlags is set to zero.  Must be NULL.   CERT_STORE_PROV_REG  Initializes the store with certificates, CRLs, and CTLs from a registry subkey. This provider opens or creates the registry subkeys Certificates, CRLs, and CTLs under the key passed in pvPara. The input key is not closed by the provider. Before returning, the provider opens its own copy of the key passed in pvPara. If CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, registry subkeys are opened by using the RegOpenKey with KEY_READ_ACCESS. Otherwise, registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS. Any changes to the contents of the opened store are immediately persisted to the registry. However, if CERT_STORE_READONLY_FLAG is set in the low word of dwFlags, any attempt to add to the contents of the store or to change a context's property results in an error with GetLastError returning the E_ACCESSDENIED code.  The handle of an open registry key.   CERT_STORE_PROV_SYSTEM_A  Initializes the store with certificates, CRLs, and CTLs from the specified system store. The system store is a logical, collection store that consists of one or more physical stores. A physical store associated with a system store is registered with the CertRegisterPhysicalStore function. After the system store is opened, all of the physical stores that are associated with it are also opened by calls to CertOpenStore and are added to the system store collection by using the CertAddStoreToCollection function. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For details about registry locations, see dwFlags later in this topic and System Store Locations. Some system store locations can be opened remotely; for more information, see System Store Locations.  A pointer to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_SYSTEM CERT_STORE_PROV_SYSTEM_W sz_CERT_STORE_PROV_SYSTEM sz_CERT_STORE_PROV_SYSTEM_W  Same as CERT_STORE_PROV_SYSTEM_A.  A pointer to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_SYSTEM_REGISTRY_A  Initializes the store with certificates, CRLs, and CTLs from a physical registry store. The physical store is not opened as a collection store. Enumerations and searches go through only the certificates, CRLs, and CTLs in that one physical store. The high word of dwFlags indicates the system store location, usually set to CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some system store locations can be open remotely; for more information, see System Store Locations.  A pointer to a null-terminated ANSI string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_SYSTEM_REGISTRY CERT_STORE_PROV_SYSTEM_REGISTRY_W sz_CERT_STORE_PROV_SYSTEM_REGISTRY sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W  Same as CERT_STORE_PROV_SYSTEM_REGISTRY_A.  A pointer to a null-terminated Unicode string that contains a system store name, such as \"My\" or \"Root\".   CERT_STORE_PROV_PHYSICAL CERT_STORE_PROV_PHYSICAL_W sz_CERT_STORE_PROV_PHYSICAL sz_CERT_STORE_PROV_PHYSICAL_W  Initializes the store with certificates, CRLs, and CTLs from a specified physical store that is a member of a logical system store. Two names are separated with an intervening backslash (\\), for example \"Root\\.LocalMachine\". Here, \"Root\" is the name of the system store and \".LocalMachine\" is the name of the physical store. The system and physical store names cannot contain any backslashes. The high word of dwFlags indicates the system store location, usually CERT_SYSTEM_STORE_CURRENT_USER. For more information, see dwFlags later in this topic. Some physical store locations can be opened remotely.  A pointer to a null-terminated Unicode string that contains both the system store name and physical names.   CERT_STORE_PROV_MSG  Initializes the store with certificates, CRLs, and CTLs from the specified cryptographic message. The dwEncodingType parameter must contain the encoding types used with both messages and certificates.  An HCRYPTMSG handle of the encoded message, returned by a call to CryptMsgOpenToDecode.   CERT_STORE_PROV_PKCS7 sz_CERT_STORE_PROV_PKCS7  Initializes the store with certificates, CRLs, and CTLs from an encoded PKCS #7 signed message. The dwEncodingType parameter must specify the encoding types to be used with both messages and certificates.  A pointer to a  CRYPT_DATA_BLOB structure that represents the encoded message.   CERT_STORE_PROV_SERIALIZED sz_CERT_STORE_PROV_SERIALIZED  Initializes the store with certificates, CRLs, and CTLs from a memory location that contains a serialized store.  A pointer to a  CRYPT_DATA_BLOB structure that contains the serialized memory BLOB.   CERT_STORE_PROV_LDAP CERT_STORE_PROV_LDAP_W sz_CERT_STORE_PROV_LDAP sz_CERT_STORE_PROV_LDAP_W  Initializes the store with certificates, CRLs, and CTLs from the results of an LDAP query. To perform write operations on the store, the query string must specify a BASE query with no filter and a single attribute.  If the dwFlags parameter contains the CERT_LDAP_STORE_OPENED_FLAG flag, this is the address of a CERT_LDAP_STORE_OPENED_PARA structure that specifies the established LDAP session to use. Otherwise, this is a pointer to a null-terminated Unicode string that contains the LDAP query string. For more information about LDAP query strings, see LDAP Dialect.   CERT_STORE_PROV_SMART_CARD CERT_STORE_PROV_SMART_CARD_W sz_CERT_STORE_PROV_SMART_CARD sz_CERT_STORE_PROV_SMART_CARD_W  Not currently used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the certificate encoding type and message encoding type. Encoding is used only when the dwSaveAs parameter of  the CertSaveStore function contains CERT_STORE_SAVE_AS_PKCS7. Otherwise, the dwEncodingType parameter is not used. This parameter is only applicable  when the CERT_STORE_PROV_MSG, CERT_STORE_PROV_PKCS7, or CERT_STORE_PROV_FILENAME provider type is specified in the lpszStoreProvider parameter. For all other provider types, this parameter is unused and should be set to zero.  This parameter can be a combination of one or more of the following values.  ValueMeaning  PKCS_7_ASN_ENCODING 65536 (0x10000)   Specifies PKCS #7 message encoding.   X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hCryptProv",
        "description": "A handle to a cryptographic provider. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "These values consist of high-word and low-word values combined by using a bitwise-OR operation.                     The low-word portion of dwFlags controls a variety of general characteristics of the certificate store opened. This portion can be used with all store provider types. The low-word portion of dwFlags can be one of the following values.  ValueMeaning  CERT_STORE_CREATE_NEW_FLAG   Create a new store if one does not exist. This function should fail if the store already exists. If neither CERT_STORE_OPEN_EXISTING_FLAG nor CERT_STORE_CREATE_NEW_FLAG is set, open an existing store  or create and open a store if it does not already exist.   CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG   Defer closing of the store's provider until all certificates, CRLs, or CTLs obtained from the store are no longer in use. The store is actually closed when the last certificate, CRL, or CTL obtained from the store is freed. Any changes made to properties of these certificates, CRLs, and CTLs, even after the call to this function, must be persisted. If this flag is not set and certificates, CRLs, or CTLs obtained from the store are still in use, any changes to the properties of those certificates, CRLs, and CTLs must not be persisted. If this function is called with CERT_CLOSE_STORE_FORCE_FLAG, CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG must be ignored. When this flag is set and a non-NULL HCRYPTPROV value is passed, that provider will continue to be used even after the call to  this function.   CERT_STORE_DELETE_FLAG   The store is deleted instead of being opened. This function returns FALSE for both success and failure of the deletion. To indicate the success of the deletion, call  SetLastError with zero. To indicate failure of the deletion, call SetLastError with the appropriate error code.   CERT_STORE_ENUM_ARCHIVED_FLAG   Normally, an enumeration of all certificates in the store will ignore any certificate with the CERT_ARCHIVED_PROP_ID property set. If this flag is set, an enumeration of the certificates in the store will contain all of the certificates in the store, including those that have the CERT_ARCHIVED_PROP_ID property.   CERT_STORE_MAXIMUM_ALLOWED   Open the store with the maximum set of allowed permissions. If this flag is specified, registry stores are first opened with write access and if that fails, they are reopened with read-only access.   CERT_STORE_NO_CRYPT_RELEASE_FLAG   This flag is not used when the hCryptProv parameter is NULL. This flag is only valid when a non-NULL CSP handle is passed as the hCryptProv parameter. Setting this flag prevents the automatic release of a non-default CSP when the certificate store is closed.   CERT_STORE_OPEN_EXISTING_FLAG   Only open an existing store. If the store does not exist, the function fails.   CERT_STORE_READONLY_FLAG   Open the store in read-only mode. Any attempt to change the contents of the store will result in an error. When this flag is set and a registry based store provider is being used, the registry subkeys are opened by using RegOpenKey with KEY_READ_ACCESS. Otherwise, the registry subkeys are created by using RegCreateKey with KEY_ALL_ACCESS.   CERT_STORE_SET_LOCALIZED_NAME_FLAG   If this flag is supported, the provider sets the store's CERT_STORE_LOCALIZED_NAME_PROP_ID property. The localized name can be retrieved by calling  the CertGetStoreProperty function with dwPropID set to CERT_STORE_LOCALIZED_NAME_PROP_ID. This flag is supported for providers of types CERT_STORE_PROV_FILENAME, CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and  CERT_STORE_PROV_PHYSICAL_W.   CERT_STORE_SHARE_CONTEXT_FLAG   When opening a store multiple times, you can set  this flag  to ensure efficient memory use by reusing the memory for the encoded parts of a certificate, CRL, or CTL context across the opened instances of the stores.   CERT_STORE_UPDATE_KEYID_FLAG   Lists of key identifiers exist within CurrentUser and LocalMachine. These key identifiers have properties much like the properties of certificates. If the CERT_STORE_UPDATE_KEYID_FLAG is set, then for every key identifier in the store's location that has a CERT_KEY_PROV_INFO_PROP_ID property, that property is automatically updated from the key identifier property CERT_KEY_PROV_INFO_PROP_ID or the CERT_KEY_IDENTIFIER_PROP_ID of the certificate related to that key identifier.   CERT_STORE_BACKUP_RESTORE_FLAG   Use the thread's SE_BACKUP_NAME and SE_RESTORE_NAME privileges to open registry or file-based system stores. If the thread does not have these privileges, this function must fail with an access denied error.      The CERT_STORE_PROV_SYSTEM, CERT_STORE_PROV_SYSTEM_REGISTRY, and CERT_STORE_PROV_PHYSICAL provider types use the following high words of dwFlags to specify system store registry locations: CERT_SYSTEM_STORE_CURRENT_SERVICECERT_SYSTEM_STORE_CURRENT_USERCERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICYCERT_SYSTEM_STORE_LOCAL_MACHINECERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISECERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICYCERT_SYSTEM_STORE_SERVICESCERT_SYSTEM_STORE_USERS   By default, a system store location is opened relative to the HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, or HKEY_USERS predefined registry key. For more information, see  System Store Locations.                    The following high-word flags override this default behavior.  ValueMeaning  CERT_SYSTEM_STORE_RELOCATE_FLAG   When set, pvPara must contain a pointer to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure rather than a string. The structure indicates both the name of the store and its location in the registry.   CERT_SYSTEM_STORE_UNPROTECTED_FLAG   By default, when the CurrentUser \"Root\" store is opened, any SystemRegistry roots not on the protected root list are deleted from the cache before this function returns. When this flag is set, this default is overridden and all of the roots in the SystemRegistry are returned and no check of the protected root list is made.                         The CERT_STORE_PROV_REGISTRY provider uses the following high-word flags.  ValueMeaning  CERT_REGISTRY_STORE_SERIALIZED_FLAG   The CERT_STORE_PROV_REG provider saves certificates, CRLs, and CTLs in a single, serialized store subkey instead of performing the default save operation. The default is that each certificate, CRL, or CTL is saved as a separate registry subkey under the appropriate subkey. This flag is mainly used for stores downloaded from the group policy template (GPT), such as the CurrentUserGroupPolicy and LocalMachineGroupPolicy stores. When CERT_REGISTRY_STORE_SERIALIZED_FLAG is set, store additions, deletions, or property changes are not persisted until there is a call to either  CertCloseStore or  CertControlStore using CERT_STORE_CTRL_COMMIT.   CERT_REGISTRY_STORE_REMOTE_FLAG   pvPara contains a handle to a registry key on a remote computer. To access a registry key on a remote computer, security permissions on the remote computer must be set to allow access. For more information, see  Remarks.      The CERT_STORE_PROV_FILE and CERT_STORE_PROV_FILENAME provider types use the following high-word flags.  ValueMeaning  CERT_FILE_STORE_COMMIT_ENABLE   Setting this flag commits any additions to the store or any changes made to properties of contexts in the store to the file store either when  CertCloseStore is called or when  CertControlStore is called with CERT_STORE_CONTROL_COMMIT.  CertOpenStore fails with E_INVALIDARG if both CERT_FILE_STORE_COMMIT_ENABLE and CERT_STORE_READONLY_FLAG are set in dwFlags.                         The CERT_STORE_PROV_LDAP provider type uses the following high-word flags.  ValueMeaning  CERT_LDAP_STORE_SIGN_FLAG   To provide integrity required by some applications, digitally sign all LDAP traffic to and from an LDAP server by using the Kerberos authentication protocol.   CERT_LDAP_STORE_OPENED_FLAG   Use this flag to use an existing LDAP session. When this flag is specified, the pvPara parameter is the address of a CERT_LDAP_STORE_OPENED_PARA structure that contains information about the LDAP session to use.   CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG   Performs an A-Record-only DNS lookup on the URL named in the pvPara parameter. This prevents false DNS queries from being generated when resolving URL host names. Use this flag when passing a host name as opposed to a domain name for the pvPara parameter.   CERT_LDAP_STORE_UNBIND_FLAG   Use this flag with the CERT_LDAP_STORE_OPENED_FLAG flag to cause the LDAP session to be unbound when the store is closed. The system will unbind the LDAP session by using the ldap_unbind function when the store is closed."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvPara",
        "description": "A 32-bit value that can contain additional information for this function. The contents of this parameter depends on the value of the lpszStoreProvider and other parameters."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hCertStore",
        "description": "The handle of the store in memory that has been opened and can be used to make calls to other store-related API calls, such as  CertAddSerializedElementToStore."
      },
      {
        "in_out": "_Inout_",
        "type": "PCERT_STORE_PROV_INFO",
        "name": "pStoreProvInfo",
        "description": "A pointer to the  CERT_STORE_PROV_INFO   structure to be updated. The data structure has been zeroed, and cbSize set before the call. The cStoreProvFunc  member of the CERT_STORE_PROV_INFO structure is the count of callback functions that are implemented and should be set last. After cStoreProvFunc is set, all subsequent store calls, such as  CertAddEncodedCertificateToStore, will call the appropriate provider callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertEnumPhysicalStoreCallback      callback function formats and presents information on each physical store found by a call to      CertEnumPhysicalStore.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the function succeeds, FALSE if it fails. See  Example C Program: Listing System and Physical Stores. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumPhysicalStoreCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "If CERT_SYSTEM_STORE_RELOCATE_FLAG is set in dwFlags, pvSystemStore points to a  CERT_SYSTEM_STORE_RELOCATE_PARA structure that indicates both the name and the location of the system store to be enumerated. Otherwise, pvSystemStore is a pointer to a Unicode string that names the system store whose physical stores are to be enumerated. For information about prefixing the name of a service or computer to the system store name, see  CertRegisterSystemStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Specifies the location of the system store. The following flag values are defined:  CERT_SYSTEM_STORE_CURRENT_USER CERT_SYSTEM_STORE_CURRENT_SERVICE CERT_SYSTEM_STORE_LOCAL_MACHINE CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY CERT_SYSTEM_STORE_SERVICES CERT_SYSTEM_STORE_USERS CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE  In addition, CERT_SYSTEM_STORE_RELOCATE_FLAG or CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG can be combined using a bitwise-OR operation with any of the high-word location flags. The CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG constant is set if the physical store is predefined rather than registered."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszStoreName",
        "description": "Name of the physical store."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PHYSICAL_STORE_INFO",
        "name": "pStoreInfo",
        "description": "A pointer to a CERT_PHYSICAL_STORE_INFO structure containing information about the store."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to information passed to the callback function in the pvArg passed to CertEnumPhysicalStore."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CertEnumSystemStoreCallback  \tcallback function formats and presents information on each system store found by a call to  \tCertEnumSystemStore.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. To stop the enumeration, the function must return FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumSystemStoreCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvSystemStore",
        "description": "A pointer to information on the system store found by a call to  \tCertEnumSystemStore. Where appropriate, this argument will contain a leading computer name or service name prefix."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag used to call for an alteration of the presentation. This can be a bitwise OR of the following values.  ValueMeaning  CERT_SYSTEM_STORE_LOCATION_MASK   Specifies the location of the system store.   CERT_SYSTEM_STORE_RELOCATE_FLAG   If set, the pvSystemStore parameter points to a CERT_SYSTEM_STORE_RELOCATE_PARA structure. If not set, pvSystemStore points to a NULL-terminated Unicode string."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_SYSTEM_STORE_INFO",
        "name": "pStoreInfo",
        "description": "A pointer to a  \t    CERT_SYSTEM_STORE_INFO structure that contains information about the store."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to information passed to the callback function in the pvArg  \t passed to CertEnumSystemStore."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertEnumSystemStoreLocationCallback  \tcallback function formats and presents information on each system store location found by a call to  \tCertEnumSystemStoreLocation.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertEnumSystemStoreLocationCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pvszStoreLocations",
        "description": "String that contains information on the store location found."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flag used to call for an alteration of the presentation."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to information passed to the callback function in the pvArg  \t passed to CertEnumSystemStoreLocation."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "An application-defined callback function that is called by  CertCloseStore when the store's reference count is decremented to zero.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "This callback function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "CertStoreProvCloseCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Copy of the dwFlags passed as a parameter to  CertCloseStore."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertStoreProvControl callback function supports the CertControlStore API. All of the API's parameters are passed straight through to the callback. For details, see  CertControlStore.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "CertStoreProvControl pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store passed from the call to CertControlStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Passed from the call to CertControlStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCtrlType",
        "description": "Control action to be taken. Passed from the call to CertControlStore."
      },
      {
        "in_out": "_In_opt_",
        "type": "const void*",
        "name": "pvCtrlPara",
        "description": "A pointer to a buffer whose structure and content is determined by the values of dwFlags and dwCtrlType. Passed from the call to CertControlStore."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "An application-defined callback function that is called by  CertDeleteCertificateFromStore before deleting a certificate from the store.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to delete the certificate from the store. Otherwise, returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvDeleteCertCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to the certificate context to be deleted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and is set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "An application-defined callback function that is called by  CertDeleteCRLFromStore before deleting the CRL from the store.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to delete from the store. Otherwise, returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvDeleteCRLCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to the CRL context to be deleted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and is set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertStoreProvDeleteCTL callback function is called by  CertDeleteCTLFromStore before deleting a CTL from the store. This function determines whether a CTL can be deleted.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if a CTL can be deleted from the store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvDeleteCTL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvFindCert callback function enumerates or finds the first or next certificate in an external store that matches specified criteria.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFindCert",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_STORE_PROV_FIND_INFO",
        "name": "pFindInfo",
        "description": "A pointer to a  CERT_STORE_PROV_FIND_INFO structure containing all the parameters passed to the  CertFindCertificateInStore function."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pPrevCertContext",
        "description": "A pointer to a  CERT_CONTEXT of the certificate found. On first call to the function, this parameter should be set to NULL. On subsequent calls, it should be set to the pointer returned in the ppProvCertContext parameter on the last call. A non-NULL pointer passed in this parameter is freed by the callback function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Inout_",
        "type": "void**",
        "name": "ppvStoreProvFindInfo",
        "description": "A pointer to a pointer to a buffer to return the store provider information. Optionally, the callback can return a pointer to internal find information in this parameter. After the first call, this parameter is set to the pointer returned by the previous call to the function."
      },
      {
        "in_out": "_Out_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppProvCertContext",
        "description": "On a successful find, a pointer to the certificate found is returned in this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvFindCRL callback function enumerates or finds the first or next CRL in an external store that matches specified criteria.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFindCRL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_STORE_PROV_FIND_INFO",
        "name": "pFindInfo",
        "description": "A pointer to a  CERT_STORE_PROV_FIND_INFO structure containing all the parameters passed to the  CertFindCRLInStore function."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pPrevCrlContext",
        "description": "A pointer to a  CRL_CONTEXT structure of the last CRL found. On first call to the function, this parameter should be set to NULL. On subsequent calls, it should be set to the pointer returned in the ppProvCRLContext parameter on the last call. A non-NULL pointer passed in this parameter is freed by the callback function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Inout_",
        "type": "void**",
        "name": "ppvStoreProvFindInfo",
        "description": "A pointer to a pointer to a buffer to return the store provider information. Optionally, the callback can return a pointer to internal find information in this parameter. After the first call, this parameter is set to the pointer returned by the previous call to the function."
      },
      {
        "in_out": "_Out_",
        "type": "PCCRL_CONTEXT*",
        "name": "ppProvCrlContext",
        "description": "On a successful find, a pointer to the CRL found is returned in this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvFindCTL callback function enumerates or finds the first or next CTL in an external store that matches specified criteria.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFindCTL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_STORE_PROV_FIND_INFO",
        "name": "pFindInfo",
        "description": "A pointer to a  CERT_STORE_PROV_FIND_INFO structure containing all the parameters passed to the  CertFindCTLInStore. function."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pPrevCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure of the last CTL found. On first call to the function, this parameter should be set to NULL. On subsequent calls, it should be set to the pointer returned in the ppProvCTLContext parameter on the last call. A non-NULL pointer passed in this parameter is freed by the callback function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Inout_",
        "type": "void**",
        "name": "ppvStoreProvFindInfo",
        "description": "A pointer to a pointer to buffer to return the store provider information. Optionally, the callback can return a pointer to internal find information in this parameter. After the first call, this parameter is set to the pointer returned by the previous call to the function."
      },
      {
        "in_out": "_Out_",
        "type": "PCCTL_CONTEXT*",
        "name": "ppProvCtlContext",
        "description": "On a successful find, a pointer to the CTL found is returned in this parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertStoreProvFreeFindCert callback function is called when the certificate returned by the CertStoreProvFindCert callback was not used, and thus released, in a subsequent call to CertStoreProvFindCert. Before the CLOSE callback is called, all certificates returned by the CertStoreProvFindCert callback must be released by the provider using CertStoreProvFindCert or CertStoreProvFreeFindCert.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFreeFindCert",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvStoreProvFindInfo",
        "description": "A pointer to a buffer containing find information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertStoreProvFreeFindCRL callback function is called when the certificate returned by the  CertStoreProvFindCRL callback was not used, and thus released, in a subsequent call to CertStoreProvFindCRL. Before the CLOSE callback is called, all certificates returned by the CertStoreProvFindCRL callback must be released by the provider using CertStoreProvFindCRL or CertStoreProvFreeFindCRL.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFreeFindCRL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to a  CRL_CONTEXT."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvStoreProvFindInfo",
        "description": "A pointer to a buffer containing find information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertStoreProvFreeFindCTL callback function is called when the certificate returned by the  CertStoreProvFindCTL callback was not used, and thus released, in a subsequent call to CertStoreProvFindCTL. Before the CLOSE callback is called, all certificates returned by the CertStoreProvFindCTL callback must be released by the provider using CertStoreProvFindCTL or CertStoreProvFreeFindCTL.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvFreeFindCTL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvStoreProvFindInfo",
        "description": "A pointer to a buffer containing find information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvGetCertProperty callback function retrieves a specified property of a certificate.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvGetCertProperty",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a  CERT_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates a property identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to contain the pointer to a CERT_CONTEXT structure to be returned by the function. May be set to NULL on a first call to the function to get the value of pcbData before allocating memory for the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD indicating the length of the pvData buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvGetCRLProperty callback function retrieves a specified property of a CRL.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvGetCRLProperty",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "A pointer to a  CRL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates a property identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to contain the pointer to a CRL_CONTEXT structure to be returned by the function. May be set to NULL on a first call to the function to get the value of pcbData before allocating memory for the buffer."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD indicating the length of the pvData buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CertStoreProvGetCTLProperty callback function retrieves a specified property of a certificate trust list (CTL).",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvGetCTLProperty",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "A HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Indicates a property identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pvData",
        "description": "A pointer to a buffer to contain the pointer to a CTL_CONTEXT structure to be returned by the function. To get the value of pcbData before allocating memory for the buffer, this parameter can be set to NULL on a first call to the function."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "A pointer to a DWORD that indicates the length of the pvData buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "An application-defined callback function that reads the provider's copy of the certificate context. If one exists, a new certificate context is created. Currently not called directly by the certificate store functions. However, it might be exported to support other providers.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the certificate was successfully read. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvReadCertCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pStoreCertContext",
        "description": "A pointer to the  CERT_CONTEXT of the certificate to be read."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and is set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "PCCERT_CONTEXT*",
        "name": "ppProvCertContext",
        "description": "A pointer to a pointer to provider's copy of the certificate context. The context will be freed by calling  CertFreeCertificateContext."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "An application-defined callback function that reads the provider's copy of the CRL context. If one exists, a new CRL context is created.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the CRL was successfully read. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvReadCRLCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pStoreCrlContext",
        "description": "A pointer to the  CRL_CONTEXT of the CRL to be read."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and is set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "PCCRL_CONTEXT*",
        "name": "ppProvCrlContext",
        "description": "A pointer to a pointer to provider's copy of the CRL context. The context will be freed by calling  CertFreeCRLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CertStoreProvReadCTL callback function is called to read the provider's copy of the CTL context and, if it exists, to create a new CTL context. Currently, this callback function is not called directly by the store APIs but it can be exported to support other providers based on it.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the function succeeds or FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvReadCTL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pStoreCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_Out_",
        "type": "PCCTL_CONTEXT*",
        "name": "ppProvCtlContext",
        "description": "A pointer to a pointer to a CTL_CONTEXT structure to be returned by the function. The context will be freed by calling CertFreeCTLContext."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "An application-defined callback function that is called by  CertSetCertificateContextProperty before setting the certificate's property. It is also called by  CertGetCertificateContextProperty when getting a hash property that needs to be created and then persisted through the set.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to set the property. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvSetCertPropertyCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "See  CertSetCertificateContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "See CertSetCertificateContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Copy of the dwFlags passed as a parameter to CertSetCertificateContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "See CertSetCertificateContextProperty."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "An application-defined callback function that is called by  CertSetCRLContextProperty before setting the CRL's property. It is also called by  CertGetCRLContextProperty when getting a hash property that needs to be created and then persisted through the set.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to set the property. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvSetCRLPropertyCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "See  CertSetCRLContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "See CertSetCRLContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Copy of the dwFlags passed as a parameter to CertSetCRLContextProperty."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "See CertSetCRLContextProperty."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CertStoreProvSetCTLProperty callback function determines whether a property can be set on a CTL. It is called by  CertSetCTLContextProperty before setting a CTL's property. It can also be called by  CertGetCTLContextProperty, when getting a hash property that needs to be created and then persisted. This callback function does not set the  CTL_CONTEXT's property.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the property can be set. Returns FALSE if the property cannot be set. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvSetCTLProperty",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "A handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPropId",
        "description": "Identifier of the property to be set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pvData",
        "description": "A pointer to a buffer containing the property value to be set."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "An application-defined callback function that is called by  CertAddEncodedCertificateToStore,  CertAddCertificateContextToStore and  CertAddSerializedElementToStore before adding to the store. In addition to the encoded certificate, the added pCertContext might also have properties.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to update the store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvWriteCertCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "See  CertAddCertificateContextToStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_STORE_PROV_WRITE_ADD_FLAG is set when this function is called by the following functions that add a certificate to the store:      CertAddEncodedCertificateToStore   CertAddCertificateContextToStore   CertAddSerializedElementToStore"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "An application-defined callback function that is called by  CertAddEncodedCRLToStore,  CertAddCRLContextToStore and  CertAddSerializedElementToStore before adding to the store. In addition to the encoded CRL, the added pCrlContext might also have properties.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if it is okay to update the store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvWriteCRLCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "Provider-specific value returned in  CERT_STORE_PROV_INFO by  CertDllOpenStoreProv."
      },
      {
        "in_out": "_In_",
        "type": "PCCRL_CONTEXT",
        "name": "pCrlContext",
        "description": "See  CertAddCRLContextToStore."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "CERT_STORE_PROV_WRITE_ADD_FLAG is used to specify when this function is called by the following functions that add a CRL to the store:      CertAddEncodedCRLToStore   CertAddCRLContextToStore   CertAddSerializedElementToStore"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CertStoreProvWriteCTL callback function can be called by  CertAddEncodedCTLToStore,  CertAddCTLContextToStore or  CertAddSerializedElementToStore before a CTL is added to the store.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if elements can be added to the store. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CertStoreProvWriteCTL",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCERTSTOREPROV",
        "name": "hStoreProv",
        "description": "HCERTSTOREPROV handle to a certificate store."
      },
      {
        "in_out": "_In_",
        "type": "PCCTL_CONTEXT",
        "name": "pCtlContext",
        "description": "A pointer to a  CTL_CONTEXT structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Any needed flag values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CRYPT_ENUM_KEYID_PROP callback function  is used with the CryptEnumKeyIdentifierProperties function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the function succeeds, FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CRYPT_ENUM_KEYID_PROP",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_HASH_BLOB",
        "name": "pKeyIdentifier",
        "description": "A pointer to a CRYPT_INTEGER_BLOB that contains the key identifier."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use and must be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvReserved",
        "description": "Reserved for future use. Must be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to an argument that is passed back from the callback function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cProp",
        "description": "Count of elements in the array of rgdwPropId"
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "rgdwPropId",
        "description": "A pointer to an array of property identifiers. Each entry in the array will be one of the value types listed for in the table for dwPropId in the CryptSetKeyIdentifierProperty function."
      },
      {
        "in_out": "_In_",
        "type": "void**",
        "name": "rgpvData",
        "description": "A pointer to an array that contains pointers to pvData elements corresponding the rgdwPropId array elements.     For CERT_KEY_PROV_INFO_PROP_ID the rgpvData element points to a CRYPT_KEY_PROV_INFO structure. For all other properties, the rgpvData element points to an array of bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "rgcbData",
        "description": "Array of DWORDs that specify the size, in bytes, of corresponding elements in the rgpvData array."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CRYPT_ENUM_OID_FUNCTION callback function  is used with the CryptEnumOIDFunction function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE if the function succeeds, FALSE if it fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CRYPT_ENUM_OID_FUNCTION",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Specifies the encoding type to match. Setting this parameter to CRYPT_MATCH_ANY_ENCODING_TYPE matches any encoding type. Note  If CRYPT_MATCH_ANY_ENCODING_TYPE is not specified, either a certificate or message encoding type is required.   If the low-order word containing the certificate encoding type is nonzero, it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.Currently defined encoding types are:  CRYPT_ASN_ENCODING X509_ASN_ENCODING PKCS_7_ASN_ENCODING CRYPT_MATCH_ANY_ENCODING_TYPE"
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszFunctionName",
        "description": "Name of the OID function."
      },
      {
        "in_out": "_In_",
        "type": "LPCSTR",
        "name": "pszOID",
        "description": "A pointer to either an OID string, such as \"2.5.29.1\",  \t\t\t\t  an ASCII string, such as \"file\", or a numeric string,  \t\t\t\t  such as #2000."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cValue",
        "description": "Count of elements in the array of value types."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD*",
        "name": "rgdwValueType",
        "description": "Array of value types. Each entry in the array will be one of the value types  listed for CryptGetOIDFunctionValue under pdwValueType."
      },
      {
        "in_out": "_In_",
        "type": "const LPCWSTR*",
        "name": "rgpwszValueName",
        "description": "Array of null-terminated strings containing the names of the values."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "rgpbValueData",
        "description": "Array  containing the values corresponding to the names in the rgpwszValueName array."
      },
      {
        "in_out": "_In_",
        "type": "const DWORD*",
        "name": "rgcbValueData",
        "description": "Array that specifies the size, in bytes, of corresponding elements of the rgpbValueData array."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to arguments passed through to the callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The CRYPT_ENUM_OID_INFO callback function  is used with the CryptEnumOIDInfo function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Returns TRUE to continue the enumeration and FALSE to stop the enumeration.  If FALSE is returned, the CryptEnumOIDInfo enumeration is stopped. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CRYPT_ENUM_OID_INFO",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_OID_INFO",
        "name": "pInfo",
        "description": "A pointer to the OID information."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvArg",
        "description": "A pointer to arguments passed through to the callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CryptGetSignerCertificateCallback user supplied callback function is used with the CRYPT_VERIFY_MESSAGE_PARA structure to get and verify a message signer's certificate.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If a signer certificate is found, the function returns a pointer to a read-only CERT_CONTEXT. The returned CERT_CONTEXT was obtained either from a certificate store or was created using CertCreateCertificateContext. In either case, it must be freed using CertFreeCertificateContext. If this function fails, the return value is NULL. ",
    "remarks": "If the message does not contain content or signers, the function is called with pSignerId set to NULL. ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "CryptGetSignerCertificateCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvGetArg",
        "description": "A pointer to user-defined data passed on to the verification function as specified in the CRYPT_VERIFY_MESSAGE_PARA structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_INFO",
        "name": "pSignerId",
        "description": "A pointer to a CERT_INFO structure containing the issuer and serial number. Can be NULL if there is no content or signer."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE",
        "name": "hMsgCertStore",
        "description": "A handle to the certificate store containing all the certificates and CRLs in the signed message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The PCRYPT_DECRYPT_PRIVATE_KEY_FUNC function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "",
    "return_type": "typedef BOOL ( CALLBACK",
    "category": "Cryptography",
    "name": "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_ALGORITHM_IDENTIFIER",
        "name": "Algorithm",
        "description": "A CRYPT_ALGORITHM_IDENTIFIER structure that identifies the algorithm used to encrypt the PrivateKeyInfo ASN.1 type found in the PKCS #8 standard."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_DATA_BLOB",
        "name": "EncryptedPrivateKey",
        "description": "A CRYPT_DATA_BLOB  value that identifies the encrypted private key  BLOB."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbClearTextKey",
        "description": "A pointer to a BYTE buffer to receive the plaintext. This parameter can be NULL. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbClearTextKey",
        "description": "A pointer to a  DWORD  value that identifies the size, in  bytes, of the pbClearTextKey buffer. If the size is zero, then pcbClearTextKey should be                  filled with the size, in bytes, required to decrypt the key, and pbClearTextKey should be ignored."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pVoidDecryptFunc",
        "description": "An LPVOID  value that provides data used in decryption, such as key, initialization vector, and password."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC function is available for use in  the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "",
    "return_type": "typedef BOOL ( CALLBACK",
    "category": "Cryptography",
    "name": "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "CRYPT_ALGORITHM_IDENTIFIER*",
        "name": "pAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure to receive the algorithm used to encrypt the PrivateKeyInfo ASN.1 type found in the PKCS #8 standard."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_DATA_BLOB*",
        "name": "pClearTextPrivateKey",
        "description": "A pointer to a CRYPT_DATA_BLOB structure that contains the plaintext private key to be encrypted."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbEncryptedKey",
        "description": "A pointer to a BYTE buffer to receive the encrypted private key BLOB. If this parameter is NULL, pcbEncryptedKey will return the size, in bytes, of memory needed to contain the encrypted key on a subsequent call to this function."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbEncryptedKey",
        "description": "A pointer to a DWORD  variable that contains the size, in  bytes, of the pbEncryptedKey buffer. If pbEncryptedKey is  NULL, then pcbEncryptedKey  is set to the size, in bytes,  required to encrypt the key. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pVoidEncryptFunc",
        "description": "An  LPVOID variable that contains data used for encryption, such as key, initialization vector, and password."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The PCRYPT_RESOLVE_HCRYPTPROV_FUNC function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). ",
    "remarks": "",
    "return_type": "typedef BOOL ( CALLBACK",
    "category": "Cryptography",
    "name": "PCRYPT_RESOLVE_HCRYPTPROV_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PRIVATE_KEY_INFO*",
        "name": "pPrivateKeyInfo",
        "description": "A pointer to a CRYPT_PRIVATE_KEY_INFO structure that describes the key being imported."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTPROV*",
        "name": "phCryptProv",
        "description": "A pointer to the  HCRYPTPROV   to receive the CSP."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pVoidResolveFunc",
        "description": "The pVoidResolveFunc member passed in by the caller in the CRYPT_PKCS8_IMPORT_PARAMS  structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFN_CDF_PARSE_ERROR_CALLBACK function is called for Catalog Definition Function errors while parsing a catalog definition file (CDF).",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "This function pointer does not return a value. ",
    "remarks": "The dwErrorArea parameter can have the following possible values.  The dwLocalError parameter can have the following possible values.  ",
    "return_type": "typedef void (",
    "category": "Cryptography",
    "name": "PFN_CDF_PARSE_ERROR_CALLBACK pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwErrorArea",
        "description": "A value that indicates in which area of the CDF the error occurred."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLocalError",
        "description": "A value that indicates the type of error."
      },
      {
        "in_out": "_In_",
        "type": "WCHAR*",
        "name": "pwszLine",
        "description": "A pointer to a null-terminated string that contains the CDF line in which the error occurred."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFN_CERT_CREATE_CONTEXT_SORT_FUNC callback function is called for each sorted context entry when a context is created. This function pointer is passed in the pfnSort member of the CERT_CREATE_CONTEXT_PARA structure.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Return TRUE to continue the sort or FALSE to stop the sort. If FALSE is returned, CertCreateContext will fail and set the last error code to ERROR_CANCELLED. ",
    "remarks": "",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CERT_CREATE_CONTEXT_SORT_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbTotalEncoded",
        "description": "The total number of bytes of the encoded entries."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbRemainEncoded",
        "description": "The number of bytes remaining to be encoded."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cEntry",
        "description": "The current number of sorted entries."
      },
      {
        "in_out": "_Inout_",
        "type": "void*",
        "name": "pvSort",
        "description": "An application-defined value that is passed in the pvSort member of the CERT_CREATE_CONTEXT_PARA structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY callback function imports an already decrypted content encryption key (CEK).  The PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY function can be installed by using a Cryptography API: Next Generation (CNG) object identifier (OID).",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "The CryptMsgControl function calls this function for the following operations specified by its dwCtrlType parameter: You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  For an example that deploys an OID-installable callback function, see Extending CryptoAPI Functionality. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCMSG_CNG_CONTENT_DECRYPT_INFO",
        "name": "pCNGContentDecryptInfo",
        "description": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the imported CEK. This structure contains all the relevant information passed to the CryptMsgControl function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved. Set it to NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFN_CMSG_CNG_IMPORT_KEY_AGREE callback function decrypts a content encryption key (CEK) that is intended for a key agreement recipient. PFN_CMSG_CNG_IMPORT_KEY_AGREE can be installed by using a Cryptography API: Next Generation (CNG) object identifier (OID).",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "The CryptMsgControl function calls this function for the following operations specified by the dwCtrlType parameter: You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  For an example that deploys an OID-installable callback function, see Extending CryptoAPI Functionality. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_CNG_IMPORT_KEY_AGREE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCMSG_CNG_CONTENT_DECRYPT_INFO",
        "name": "pCNGContentDecryptInfo",
        "description": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the decrypted CEK bytes. This parameter contains the key used to decrypt the CEK. The following pKeyTransDecryptPara parameter contains the \tCEK bytes to be decrypted."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA",
        "name": "pKeyAgreeDecryptPara",
        "description": "A pointer to a CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure that contains the key agreement information passed to the CryptMsgControl function in the CMSG_CTRL_KEY_AGREE_DECRYPT case. The EncryptedKey member of the pKeyAgree member contains the CEK bytes to be decrypted. Because a  CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure might contain an HCRYPTPROV choice, its hNCryptKey member must not be used to decrypt EncryptedKey. Instead, you must use the hNCryptKey member specified in the pCNGContentDecryptInfo parameter.  This function must not update members of the  CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved. Set it to NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFN_CMSG_CNG_IMPORT_KEY_TRANS callback function imports and decrypts a content encryption key (CEK) that is intended for a key transport recipient. PFN_CMSG_CNG_IMPORT_KEY_TRANS can be installed by using a Cryptography API: Next Generation (CNG) object identifier (OID).",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "The CryptMsgControl function calls this function for the following operations specified by the dwCtrlType parameter: You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  For an example that deploys an OID-installable callback function, see Extending CryptoAPI Functionality. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_CNG_IMPORT_KEY_TRANS pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCMSG_CNG_CONTENT_DECRYPT_INFO",
        "name": "pCNGContentDecryptInfo",
        "description": "A pointer to a CMSG_CNG_CONTENT_DECRYPT_INFO structure to be updated with the decrypted CEK bytes. This parameter contains the key used to decrypt the CEK. The following pKeyTransDecryptPara parameter contains the \tCEK bytes to be decrypted."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA",
        "name": "pKeyTransDecryptPara",
        "description": "A pointer to a CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure that contains the key transport information passed to the CryptMsgControl function in the CMSG_CTRL_DECRYPT or CMSG_CTRL_KEY_TRANS_DECRYPT cases. For the CMSG_CTRL_DECRYPT case, CryptMsgControl converts the CMSG_CTRL_DECRYPT_PARA structure to a CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure.  The EncryptedKey member of the pKeyTrans member contains the CEK bytes to be decrypted. Because a  CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure might contain an HCRYPTPROV choice, its hNCryptKey member must not be used to decrypt EncryptedKey. Instead, you must use the hNCryptKey specified in the pCNGContentDecryptInfo parameter.  This function must not update members of the  CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved. Set it to NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_EXPORT_KEY_AGREE callback function encrypts and exports the content encryption key for a key agreement recipient of an enveloped message. PFN_CMSG_EXPORT_KEY_AGREE can be installed by using a CryptoAPI object identifier (OID). This function is called by the CryptMsgOpenToEncode function when its dwMsgType parameter is set to CMSG_ENVELOPED.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. ",
    "remarks": "For each recipient key, the PFN_CMSG_EXPORT_KEY_AGREE function must update the   EncryptedKey member of the CMSG_KEY_AGREE_KEY_ENCRYPT_INFO structure referred to by the rgpKeyAgreeKeyEncryptInfo member of the CMSG_KEY_AGREE_ENCRYPT_INFO structure pointed to by the pKeyAgreeEncryptInfo parameter. This function must use the pfnAlloc and pfnFree members of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo parameter to manage memory for any values that it updates. If, upon entry,  the dwEncryptFlags member of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo member is set to CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG, the ephemeral PublicKey member of the CERT_PUBLIC_KEY_INFO structure referred to by the OriginatorPublicKeyInfo member of the CMSG_KEY_AGREE_ENCRYPT_INFO structure pointed to by the pKeyAgreeEncryptInfo parameter should be padded with zeros to always obtain the same maximum encoded length. You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose. You must define different callback functions for CAPI1 keys and Cryptography API: Next Generation (CNG) keys. Both functions have the same signature but use different OIDs. Which function is called depends on the value of the  fCNG member of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo parameter. The following table shows the relationship between the callback function and the value of the fCNG member.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_EXPORT_KEY_AGREE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCMSG_CONTENT_ENCRYPT_INFO",
        "name": "pContentEncryptInfo",
        "description": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO",
        "name": "pKeyAgreeEncodeInfo",
        "description": "A pointer to a CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO structure that specifies the key used to encrypt the content encryption key."
      },
      {
        "in_out": "_Inout_",
        "type": "PCMSG_KEY_AGREE_ENCRYPT_INFO",
        "name": "pKeyAgreeEncryptInfo",
        "description": "A pointer to a CMSG_KEY_AGREE_ENCRYPT_INFO structure that contains the encrypted content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_EXPORT_KEY_TRANS callback function encrypts and exports the content encryption key for a key transport recipient of an enveloped message. PFN_CMSG_EXPORT_KEY_TRANS can be installed by using a CryptoAPI object identifier (OID). This function is called by the CryptMsgOpenToEncode function when its dwMsgType parameter is set to CMSG_ENVELOPED.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. ",
    "remarks": "The PFN_CMSG_EXPORT_KEY_TRANS function must update the EncryptedKey member of the CMSG_KEY_TRANS_ENCRYPT_INFO structure pointed to by the pKeyTransEncryptInfo parameter. This function must use the pfnAlloc and pfnFree members of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo parameter to manage memory allocation for the encrypted key. You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose. You must define different callback functions for CAPI1 keys and Cryptography API: Next Generation (CNG) keys. Both functions have the same signature but use different OIDs. Which function is called depends on the value of the fCNG member of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo parameter. The following table shows the relationship between the callback function and the value of the fCNG member.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_EXPORT_KEY_TRANS pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCMSG_CONTENT_ENCRYPT_INFO",
        "name": "pContentEncryptInfo",
        "description": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO",
        "name": "pKeyTransEncodeInfo",
        "description": "A pointer to a CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO structure that specifies the recipient public key used to encrypt the content encryption key."
      },
      {
        "in_out": "_Inout_",
        "type": "PCMSG_KEY_TRANS_ENCRYPT_INFO",
        "name": "pKeyTransEncryptInfo",
        "description": "A pointer to a CMSG_KEY_TRANS_ENCRYPT_INFO structure that contains the encrypted content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This value is reserved. Set it to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_EXPORT_MAIL_LIST callback function encrypts and exports the content encryption key for a mailing list recipient of an enveloped message. PFN_CMSG_EXPORT_MAIL_LIST can be installed by using a CryptoAPI object identifier (OID). This function is called by the CryptMsgOpenToEncode function when its dwMsgType parameter is set to CMSG_ENVELOPED.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. ",
    "remarks": "The PFN_CMSG_EXPORT_MAIL_LIST function must update the  EncryptedKey member of the CMSG_MAIL_LIST_ENCRYPT_INFO structure pointed to by the pMailListEncryptInfo parameter. This function must use the pfnAlloc and pfnFree members of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the pContentEncryptInfo parameter to manage memory for any values that it updates. You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_EXPORT_MAIL_LIST pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCMSG_CONTENT_ENCRYPT_INFO",
        "name": "pContentEncryptInfo",
        "description": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO",
        "name": "pMailListEncodeInfo",
        "description": "A pointer to a CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO structure that specifies the key used to encrypt the content encryption key."
      },
      {
        "in_out": "_Inout_",
        "type": "PCMSG_MAIL_LIST_ENCRYPT_INFO",
        "name": "pMailListEncryptInfo",
        "description": "A pointer to a CMSG_MAIL_LIST_ENCRYPT_INFO structure that contains the encrypted content encryption key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY callback function generates the symmetric key used to encrypt content for an enveloped message. This function is called by the CryptMsgOpenToEncode function when it initializes the CMSG_CONTENT_ENCRYPT_INFO structure.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose. You must define different callback functions for CAPI1 keys and Cryptography API: Next Generation (CNG) keys. Both functions have the same signature but use different object identifiers (OIDs). Which function is called depends on the value of the  fCNG member of the CMSG_CONTENT_ENCRYPT_INFO structure pointed to by the  pContentEncryptInfo parameter. The following table shows the relationship between the callback function and the value of the fCNG member.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCMSG_CONTENT_ENCRYPT_INFO",
        "name": "pContentEncryptInfo",
        "description": "A pointer to a CMSG_CONTENT_ENCRYPT_INFO structure that contains the key."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_IMPORT_KEY_AGREE callback function imports a content encryption key for a key transport recipient of an enveloped message. PFN_CMSG_IMPORT_KEY_AGREE can be installed by using a CryptoAPI object identifier (OID). This function is called by the CryptMsgControl function when its dwCtrlType parameter is set to CMSG_CTRL_DECRYPT.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with E_NOTIMPL. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_IMPORT_KEY_AGREE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pContentEncryptionAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA",
        "name": "pKeyAgreeDecryptPara",
        "description": "A pointer to a CMSG_CTRL_KEY_AGREE_DECRYPT_PARA structure that contains information about the key agreement recipient."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phContentEncryptKey",
        "description": "The address of a handle to the content encryption key returned by this function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_IMPORT_KEY_TRANS callback function imports a content encryption key for a key transport recipient of an enveloped message. PFN_CMSG_IMPORT_KEY_TRANS can be installed by using a CryptoAPI object identifier. This function is called by the CryptMsgControl function when its dwCtrlType parameter is set to CMSG_CTRL_DECRYPT.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with E_NOTIMPL. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_IMPORT_KEY_TRANS pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pContentEncryptionAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA",
        "name": "pKeyTransDecryptPara",
        "description": "A pointer to a CMSG_CTRL_KEY_TRANS_DECRYPT_PARA structure that contains information about the key transport recipient."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phContentEncryptKey",
        "description": "The address of a handle to the content encryption key returned by this function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_CMSG_IMPORT_MAIL_LIST callback function imports a content encryption key for a key transport recipient of an enveloped message. PFN_CMSG_IMPORT_MAIL_LIST can be installed by using a CryptoAPI object identifier. This function is called by the CryptMsgControl function when its dwCtrlType parameter is set to CMSG_CTRL_DECRYPT.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the key encryption algorithm, it must return FALSE and call SetLastError with E_NOTIMPL. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constants for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CMSG_IMPORT_MAIL_LIST pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pContentEncryptionAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that specifies the algorithm used to encrypt the message contents and any associated parameters."
      },
      {
        "in_out": "_In_",
        "type": "PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA",
        "name": "pMailListDecryptPara",
        "description": "A pointer to a CMSG_CTRL_MAIL_LIST_DECRYPT_PARA structure that contains information about the mailing list recipient."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This value is not used. Set it to zero."
      },
      {
        "in_out": "_Reserved_",
        "type": "void*",
        "name": "pvReserved",
        "description": "This parameter is reserved and must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HCRYPTKEY*",
        "name": "phContentEncryptKey",
        "description": "The address of a handle to the content encryption key returned by this function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC callback function is called by CryptExportPublicKeyInfoEx to export a public key BLOB and encode it.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. If this callback function does not support the signature algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hNCryptKey",
        "description": "A handle of the cryptographic service provider (CSP) to use when exporting the public key information. This handle must be an NCRYPT_KEY_HANDLE handle that has been created by using the NCryptOpenKey function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "A value that specifies the encoding type used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "LPSTR",
        "name": "pszPublicKeyObjId",
        "description": "A pointer to a string that contains the public key algorithm."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A value that indicates how the public key information  is exported. This can be zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter is reserved for future use and  must be set to NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a  CERT_PUBLIC_KEY_INFO  structure to receive the public key information to be exported. This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see  Retrieving Data of Unknown Length."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbInfo",
        "description": "A pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the pInfo parameter. When the function returns, the DWORD contains the number of bytes stored in the buffer. Note  When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size can be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "If a signature contains encoded parameters, the PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC callback function is called to decode and return the hash algorithm identifier and optionally the signature parameters.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the signature algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "Memory for the ppvDecodedSignPara and ppwszCNGHashAlgid parameters must be allocated by using the LocalAlloc function. You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that contains the signature object identifier (OID) and its optional encoded parameters."
      },
      {
        "in_out": "_Out_opt_",
        "type": "void**",
        "name": "ppvDecodedSignPara",
        "description": "A pointer to an address for the decoded and allocated signature parameters data structure. Returning the decoded buffer is optional."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppwszCNGHashAlgid",
        "description": "A pointer to an address for the allocated Unicode string that represents the CNG hash algorithm identifier extracted from the encoded signature parameters. If this function returns TRUE, a non-NULL pointer must be returned."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "The PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC callback function is called to sign and encode a computed hash.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the signature algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NCRYPT_KEY_HANDLE",
        "name": "hKey",
        "description": "A handle to the Cryptography API: Next Generation (CNG) private key to use to sign the hash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that contains the signature object identifier (OID) and its optional encoded parameters."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvDecodedSignPara",
        "description": "An optional pointer to the decoded signature parameters data structure previously returned by the PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC  function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGPubKeyAlgid",
        "description": "A Unicode string that contains the CNG public key algorithm identifier that corresponds to pSignatureAlgorithm->pszObjId."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGHashAlgid",
        "description": "A Unicode string that contains the CNG hash algorithm identifier that corresponds to pSignatureAlgorithm->pszObjId or to a hash algorithm identifier in pvDecodedSignPara."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to the computed hash bytes returned by the BCryptFinishHash function that corresponds to pwszCNGHashAlgid."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbComputedHash",
        "description": "A value that represents the length, in bytes, of the computed hash."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbSignature",
        "description": "A pointer to the encoded signature bytes."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbSignature",
        "description": "A value that represents the length, in bytes, of the encoded signature."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "The PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC callback function is called to decrypt an encoded signature and compare it to a computed hash.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call GetLastError. If this callback function does not support the signature algorithm, it must return FALSE and call SetLastError with ERROR_NOT_SUPPORTED. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "Specifies the type of encoding used. It is always acceptable to specify both the certificate and message encoding types by combining them with a bitwise-OR operation as shown in the following example: X509_ASN_ENCODING | PKCS_7_ASN_ENCODING Currently defined encoding types are:  X509_ASN_ENCODING PKCS_7_ASN_ENCODING"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pPubKeyInfo",
        "description": "The address of a CERT_PUBLIC_KEY_INFO structure that contains the public key to use to verify the signature. You can use this with CryptImportPublicKeyInfoEx2 to get a BCRYPT_KEY_HANDLE."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_ALGORITHM_IDENTIFIER",
        "name": "pSignatureAlgorithm",
        "description": "A pointer to a CRYPT_ALGORITHM_IDENTIFIER structure that contains the signature object identifier (OID) and its optional encoded parameters."
      },
      {
        "in_out": "_In_opt_",
        "type": "void*",
        "name": "pvDecodedSignPara",
        "description": "An optional pointer to the decoded signature parameters data structure previously returned by the PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC  function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGPubKeyAlgid",
        "description": "A Unicode string that contains the Cryptography API: Next Generation (CNG) public key algorithm identifier that corresponds to pSignatureAlgorithm->pszObjId."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCNGHashAlgid",
        "description": "A Unicode string that contains the CNG hashing algorithm identifier that corresponds to pSignatureAlgorithm->pszObjId or to a hash algorithm identifier in pvDecodedSignPara."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbComputedHash",
        "description": "A pointer to the computed hash bytes returned by the BCryptFinishHash function that corresponds to pwszCNGHashAlgid."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbComputedHash",
        "description": "A value that represents the length, in bytes, of the computed hash."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbSignature",
        "description": "A pointer to the encoded signature bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbSignature",
        "description": "A value that represents the length, in bytes, of the encoded signature."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC callback function is called by CryptImportPublicKeyInfoEx2 to decode the public key algorithm identifier, load the algorithm provider, and import the key pair.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, the function returns nonzero (TRUE). If the function fails, it returns zero (FALSE). For extended error information, call  GetLastError. ",
    "remarks": "You can use OID Support Functions to deploy this callback function. Wincrypt.h defines the following constant for this purpose.  ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCertEncodingType",
        "description": "The certificate encoding type that was used to encrypt the subject. The message encoding type identifier, contained in the high WORD of this value, is ignored by this function.  This parameter can be the following currently defined certificate encoding type.  ValueMeaning  X509_ASN_ENCODING 1 (0x1)   Specifies X.509 certificate encoding."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_PUBLIC_KEY_INFO",
        "name": "pInfo",
        "description": "A pointer to a CERT_PUBLIC_KEY_INFO structure that contains the public key information to import into the provider."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "A set of flags that modify the behavior of this function. This can be zero."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvAuxInfo",
        "description": "This parameter is reserved for future use and must be set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "BCRYPT_KEY_HANDLE*",
        "name": "phKey",
        "description": "A pointer to a BCRYPT_KEY_HANDLE variable that receives the handle of the imported key."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFNCCERTDISPLAYPROC function is a user-defined callback function that allows the caller of the CryptUIDlgSelectCertificate function to handle the display of certificates that the user selects to view.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "This function returns TRUE to indicate that it handles display of the certificate and that the dialog box should not display the certificate. If this function returns FALSE, the dialog box displays the certificate. ",
    "remarks": "",
    "return_type": "BOOL *",
    "category": "Cryptography",
    "name": "PFNCCERTDISPLAYPROC",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a CERT_CONTEXT structure that represents the certificate to display."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndSelCertDlg",
        "description": "A handle to the dialog box from which the certificate was selected for viewing."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pvCallbackData",
        "description": "Additional data used by the callback function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFNCMFILTERPROC function is a filter procedure that filters each certificate to determine whether it will appear in the certificate selection dialog box that is displayed by the CertSelectCertificate function.  PFNCMFILTERPROC is an application-defined callback function that is specified in the CERT_SELECT_STRUCT structure. The CERT_SELECT_STRUCT structure is a parameter in the CertSelectCertificate function. The PFNCMFILTERPROC function must be implemented by the developer to suit each application.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "CryptDlg.h",
    "return_value": "Return a nonzero value (TRUE) to display the certificate. Return zero (FALSE) to not display the certificate. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "PFNCMFILTERPROC",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pCertContext",
        "description": "A pointer to a CERT_CONTEXT structure that contains a certificate to make a filtering determination on."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "lCustData",
        "description": "The address of an array of byte values that holds custom data.  lCustData is passed to the PFNCMFILTERPROC function by the CertSelectCertificate function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDisplayWell",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The PFNCMHOOKPROC function is a hook procedure that is called before messages are processed by the certificate selection dialog box produced by the CertSelectCertificate function. The function allows the caller to customize the dialog box. PFNCMHOOKPROC is an application-defined callback function specified in the CERT_SELECT_STRUCT structure. The CERT_SELECT_STRUCT structure is a parameter in the CertSelectCertificate function. The PFNCMHOOKPROC function must be implemented by the developer to suit each application.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "CryptDlg.h",
    "return_value": "Return a nonzero value (TRUE) if this function processes the message. Return zero (FALSE) if this function does not process the message. ",
    "remarks": "For information about hooks, see Hooks. ",
    "return_type": "UINT *",
    "category": "Cryptography",
    "name": "PFNCMHOOKPROC",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndDialog",
        "description": "A handle to a dialog box window."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "message",
        "description": "The message."
      },
      {
        "in_out": "_In_",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Additional information about the message sent or posted."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Additional information about the message sent or posted."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The  CryptCATCDFClose function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Upon success, this function returns TRUE. The CryptCATCDFClose function returns FALSE with an ERROR_INVALID_PARAMETER error if it fails. ",
    "remarks": "Before closing the catalog output file specified in  pCDF, the CryptCATCDFClose function signs and persists it to the file system. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATCDFClose",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPTCATCDF*",
        "name": "pCDF",
        "description": "A pointer to a CRYPTCATCDF structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The  CryptCATCDFEnumAttributesWithCDFTag function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Upon success, this function returns a pointer to a CRYPTCATATTRIBUTE structure. The CryptCATCDFEnumAttributesWithCDFTag function returns a NULL pointer if it fails. ",
    "remarks": "You typically call this function in a loop to enumerate all of the catalog file member attributes in a CDF. Before entering the loop, set pPrevAttr to NULL. The function returns a pointer to the first attribute. Set pPrevAttr to the return  value of the function for subsequent iterations of the loop. The following example shows the correct sequence of assignments for the pPrevAttr parameter (pAttr). ",
    "return_type": "CRYPTCATATTRIBUTE*",
    "category": "Cryptography",
    "name": "CryptCATCDFEnumAttributesWithCDFTag",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPTCATCDF*",
        "name": "pCDF",
        "description": "A pointer to a CRYPTCATCDF structure."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszMemberTag",
        "description": "A pointer to a null-terminated string that identifies the catalog file member."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATMEMBER*",
        "name": "pMember",
        "description": "A pointer to a CRYPTCATMEMBER structure that contains the member information."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATATTRIBUTE*",
        "name": "pPrevAttr",
        "description": "A pointer to a CRYPTCATATTRIBUTE structure for a file member attribute in the CDF pointed to by pCDF."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CDF_PARSE_ERROR_CALLBACK",
        "name": "pfnParseError",
        "description": "A pointer to a user-defined function to handle file parse errors."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The  CryptCATCDFEnumCatAttributes function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Upon success, this function returns a pointer to a CRYPTCATATTRIBUTE structure. The CryptCATCDFEnumCatAttributes function returns a NULL pointer if it fails. ",
    "remarks": "You typically call this function in a loop to enumerate all of the catalog header attributes in a CDF. Before entering the loop, set pPrevAttr to NULL. The function returns a pointer to the first attribute. Set pPrevAttr to the return  value of the function for subsequent iterations of the loop. The following example shows the correct sequence of assignments for the pPrevAttr parameter (pAttr). ",
    "return_type": "CRYPTCATATTRIBUTE*",
    "category": "Cryptography",
    "name": "CryptCATCDFEnumCatAttributes",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPTCATCDF*",
        "name": "pCDF",
        "description": "A pointer to a CRYPTCATCDF structure."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATATTRIBUTE*",
        "name": "pPrevAttr",
        "description": "A pointer to a CRYPTCATATTRIBUTE structure for a catalog attribute in the CDF pointed to by pCDF."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CDF_PARSE_ERROR_CALLBACK",
        "name": "pfnParseError",
        "description": "A pointer to a user-defined function to handle file parse errors."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[The  CryptCATCDFEnumMembersByCDFTagEx function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Upon success, this function returns a pointer to a null-terminated string that identifies a file member in the CatalogFiles section of a CDF. The CryptCATCDFEnumMembersByCDFTagEx function returns a NULL pointer if it fails. ",
    "remarks": "You typically call this function in a loop to enumerate all of the catalog file members in a CDF. Before entering the loop, set pwszPrevCDFTag to NULL. The function returns a pointer to the first member. Set pwszPrevCDFTag to the return  value of the function for subsequent iterations of the loop. The following example shows the correct sequence of assignments for the pwszPrevCDFTag parameter (pwszMemberTag). ",
    "return_type": "LPWSTR",
    "category": "Cryptography",
    "name": "CryptCATCDFEnumMembersByCDFTagEx",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPTCATCDF*",
        "name": "pCDF",
        "description": "A pointer to a CRYPTCATCDF structure."
      },
      {
        "in_out": "_Inout_",
        "type": "LPWSTR",
        "name": "pwszPrevCDFTag",
        "description": "A pointer to a null-terminated string that identifies the catalog file member."
      },
      {
        "in_out": "_In_",
        "type": "PFN_CDF_PARSE_ERROR_CALLBACK",
        "name": "pfnParseError",
        "description": "A pointer to a user-defined function to handle file parse errors."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATMEMBER**",
        "name": "ppMember",
        "description": "A pointer to a CRYPTCATMEMBER structure that contains the file member information."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fContinueOnError",
        "description": "A value that specifies whether to keep in memory a reference to the last enumerated member."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pvReserved",
        "description": "This parameter is reserved; do not use it."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The  CryptCATCDFOpen function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Upon success, this function returns a pointer to the newly created CRYPTCATCDF structure. The CryptCATCDFOpen function returns a NULL pointer if it fails. ",
    "remarks": "The following default values are used by the CryptCATCDFOpen function for given conditions in the CDF CatalogHeader section.  The following actions are performed by the CryptCATCDFOpen function for given error conditions.   Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  The additional \tCatalog OIDs are not available. ",
    "return_type": "CRYPTCATCDF*",
    "category": "Cryptography",
    "name": "CryptCATCDFOpen",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszFilePath",
        "description": "A pointer to a null-terminated string that contains the path of the CDF file to open."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_CDF_PARSE_ERROR_CALLBACK",
        "name": "pfnParseError",
        "description": "A pointer to a user-defined function to handle file parse errors."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATAdminAcquireContext function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminAcquireContext",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "HCATADMIN*",
        "name": "phCatAdmin",
        "description": "A pointer to the catalog administrator context handle that is assigned by this function. When you have finished using the handle, close it by calling the CryptCATAdminReleaseContext function."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pgSubsystem",
        "description": "A pointer to the GUID that identifies the subsystem. DRIVER_ACTION_VERIFY represents the subsystem for operating system components and third party drivers. This is the subsystem used by most implementations."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Not used; set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The CryptCATAdminAddCatalog function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "If the function succeeds, the return value is a handle to the catalog information context. If the function fails, the return value is NULL. After you have finished using the returned handle, free it by calling the  CryptCATAdminReleaseCatalogContext function. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "HCATINFO",
    "category": "Cryptography",
    "name": "CryptCATAdminAddCatalog",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "Handle previously assigned by the  CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "WCHAR*",
        "name": "pwszCatalogFile",
        "description": "A pointer to a null-terminated string for the fully qualified path of the catalog to be added."
      },
      {
        "in_out": "_In_",
        "type": "WCHAR*",
        "name": "pwszSelectBaseName",
        "description": "A pointer to a null-terminated string for the name of the catalog when it is stored. If the parameter is NULL, then a unique name will be generated for the catalog."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "If the CRYPTCAT_ADDCATALOG_HARDLINK (0x00000001) flag is specified, the catalog specified in the call will be hard-linked to rather than copied. Hard-linking instead of copying a catalog reduces the amount of disk space required by Windows."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The  CryptCATAdminEnumCatalogFromHash function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is a handle to the catalog context or NULL,  if there are no more catalogs to enumerate or retrieve. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "HCATINFO",
    "category": "Cryptography",
    "name": "CryptCATAdminEnumCatalogFromHash",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "A handle to a catalog administrator context previously assigned by the CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbHash",
        "description": "A pointer to the buffer that contains the hash retrieved by calling CryptCATAdminCalcHashFromFileHandle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbHash",
        "description": "Number of bytes in the buffer allocated for pbHash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "HCATINFO*",
        "name": "phPrevCatInfo",
        "description": "A pointer to the handle to the previous catalog context or NULL,  if an enumeration is re-queried. If NULL is passed in for this parameter, then the caller gets information only for the first catalog that contains the hash; an enumeration is not made. If phPrevCatInfo contains NULL, then an enumeration of the catalogs that contain the hash is started, and subsequent calls to CryptCATAdminEnumCatalogFromHash must set phPrevCatInfo to the return value from the previous call."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATAdminRemoveCatalog function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminRemoveCatalog",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "Handle previously assigned by the  CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszCatalogFile",
        "description": "A pointer to a null-terminated string for the name of the catalog to remove. This string must contain only the name, without any path information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptCATAdminAcquireContext2 function acquires a handle to a catalog administrator context for a given hash algorithm and hash policy.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  ",
    "remarks": "This function enables you to choose, or chooses for you, the hash algorithm to be used in  functions that require the catalog administrator context. Although you can set the name of the hashing algorithm, we recommend that you let the function determine the algorithm. Doing so protects your application from hard coding algorithms that may become untrusted in the future. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminAcquireContext2",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "HCATADMIN*",
        "name": "phCatAdmin",
        "description": "A pointer to the catalog administrator context handle that is assigned by this function. When you have finished using the handle, close it by calling the CryptCATAdminReleaseContext function."
      },
      {
        "in_out": "_In_opt_",
        "type": "const GUID*",
        "name": "pgSubsystem",
        "description": "A pointer to the GUID that identifies the subsystem. DRIVER_ACTION_VERIFY represents the subsystem for operating system components and third party drivers. This is the subsystem used by most implementations."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCWSTR",
        "name": "pwszHashAlgorithm",
        "description": "Optional null-terminated Unicode string that specifies the name of the hash algorithm to use when calculating and verifying hashes. This value can be NULL. If it is NULL, the default hashing algorithm may be chosen, depending on the value you set for the pStrongHashPolicy parameter. The default algorithm in Windows 8 is SHA1. The default may change in future Windows versions. For more information, see Remarks."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCCERT_STRONG_SIGN_PARA",
        "name": "pStrongHashPolicy",
        "description": "Pointer to a CERT_STRONG_SIGN_PARA structure that contains the parameters used to check for strong signatures. The function chooses the lowest common hashing algorithm that satisfies the specified policy and the algorithm specified by the pwszHashAlgorithm parameter or the system default algorithm (if no algorithm is specified)."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved. This value must be zero."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The CryptCATAdminCalcHashFromFileHandle function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. If FALSE is returned, call the GetLastError function to determine the reason for failure. If not enough memory has been allocated for pbHash, the CryptCATAdminCalcHashFromFileHandle function will set the last error to ERROR_INSUFFICIENT_BUFFER. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminCalcHashFromFileHandle",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hFile",
        "description": "A handle to the file whose hash is being calculated. This parameter cannot be NULL and must be a valid file handle."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbHash",
        "description": "A pointer to a DWORD variable that contains the number of bytes in pbHash. Upon input, set pcbHash  to the number of bytes allocated for pbHash. Upon return, pcbHash contains the number of returned bytes in  pbHash. If pbHash is passed as NULL, then pcbHash contains the number of bytes to allocate for  pbHash."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbHash",
        "description": "A pointer to a BYTE buffer that receives the hash. If this parameter is passed in as NULL, then pcbHash contains the number of bytes to allocate for  pbHash, and a subsequent call can be made to retrieve the hash."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The CryptCATAdminCalcHashFromFileHandle2 function calculates the hash for a file by using the specified algorithm.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). For extended error information, call  GetLastError. The following table lists the error codes most commonly returned by the GetLastError function.  ",
    "remarks": "The amount of time this function takes to execute depends on the length of the file being hashed, the algorithm being used, and the file location. For example, it takes several seconds to calculate the hash of a local file that is very large (a few hundred megabytes). ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminCalcHashFromFileHandle2",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "Handle of an open catalog administrator context. For more information, see CryptCATAdminAcquireContext2."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hFile",
        "description": "A handle to the file whose hash is being calculated. This parameter cannot be NULL and must be a valid file handle."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcbHash",
        "description": "Pointer to a DWORD variable that contains the number of bytes in the pbHash parameter. Upon input, set pcbHash  to the number of bytes allocated for pbHash. Upon return, pcbHash contains the number of returned bytes in  pbHash. If pbHash is set to NULL, then pcbHash contains the number of bytes to allocate for  pbHash."
      },
      {
        "in_out": "",
        "type": "_Out_writes_bytes_to_opt_(*pcbHash*pcbHash)BYTE*",
        "name": "pbHash",
        "description": "Pointer to a BYTE buffer that receives the hash. If you set this parameter  to NULL, then pcbHash will contain the number of bytes to allocate for  pbHash, and a subsequent call can be made to retrieve the hash."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved. This value must be zero."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATAdminReleaseCatalogContext  function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminReleaseCatalogContext",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "Handle previously assigned by the  CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "HCATINFO",
        "name": "hCatInfo",
        "description": "Handle previously assigned by the CryptCATAdminAddCatalog function or the CryptCATAdminEnumCatalogFromHash function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The  CryptCATAdminReleaseContext function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminReleaseContext",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "Catalog administrator context handle previously  assigned by a call to the CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Not used; set to  zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The CryptCATAdminResolveCatalogPath function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Returns nonzero if successful or zero otherwise. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATAdminResolveCatalogPath",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATADMIN",
        "name": "hCatAdmin",
        "description": "A handle that was previously assigned by the  CryptCATAdminAcquireContext function."
      },
      {
        "in_out": "_In_",
        "type": "WCHAR*",
        "name": "pwszCatalogFile",
        "description": "The name of the catalog file for which to retrieve the fully qualified path."
      },
      {
        "in_out": "_Inout_",
        "type": "CATALOG_INFO*",
        "name": "psCatInfo",
        "description": "A pointer to the CATALOG_INFO structure. This value cannot be NULL. Upon return from this function, the wszCatalogFile member of the CATALOG_INFO structure contains the catalog file name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved and must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATCatalogInfoFromContext function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. For extended error information, call the GetLastError function. For a complete list of error codes provided by the operating system, see System Error Codes. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATCatalogInfoFromContext",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCATINFO",
        "name": "hCatInfo",
        "description": "A handle to the catalog context. This value cannot be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "CATALOG_INFO*",
        "name": "psCatInfo",
        "description": "A pointer to the CATALOG_INFO structure. This value cannot be NULL. Upon return from this function, the wszCatalogFile member of the CATALOG_INFO structure contains the catalog file name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Unused; set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The CryptCATClose function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "CryptCATClose",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "Handle opened previously by a call to the  CryptCATOpen function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[The CryptCATOpen function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Upon success, this function returns a handle to the open catalog. When you have finished using the handle, close it by calling the CryptCATClose function. The CryptCATOpen function returns INVALID_HANDLE_VALUE if it fails. ",
    "remarks": "",
    "return_type": "HANDLE",
    "category": "Cryptography",
    "name": "CryptCATOpen",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszFileName",
        "description": "A pointer to a null-terminated string for the catalog file name."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fdwOpenFlags",
        "description": "Zero,  to open an existing catalog file, or a bitwise combination of one or more of the following values.  ValueMeaning  CRYPTCAT_OPEN_ALWAYS   Opens the file, if it exists, or creates a new file, if needed.   CRYPTCAT_OPEN_CREATENEW   A new catalog file is created. If a previously created file exists, it is overwritten."
      },
      {
        "in_out": "_In_",
        "type": "HCRYPTPROV",
        "name": "hProv",
        "description": "A handle to a cryptographic service provider (CSP)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPublicVersion",
        "description": "Version of the file. This can be one of the following values.  ValueMeaning  CRYPTCAT_VERSION_1 0x100   Version 1 file format.   CRYPTCAT_VERSION_2 0x200   Version 2 file format. Windows 8 and Windows Server 2012:  Support for this value begins."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncodingType",
        "description": "Encoding type used for the file. If this value is 0, then the encoding type is set to PKCS_7_ASN_ENCODING | X509_ASN_ENCODING."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATEnumerateAttr function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is a pointer to the  CRYPTCATATTRIBUTE structure that contains the attribute information or NULL, if no more attributes are in the enumeration or if an error is encountered. The returned pointer is passed in as the pPrevAttr parameter for subsequent calls to this function. ",
    "remarks": "Do not free the returned pointer nor any of the members pointed to by the returned pointer. ",
    "return_type": "CRYPTCATATTRIBUTE*",
    "category": "Cryptography",
    "name": "CryptCATEnumerateAttr",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "Handle for the catalog that contains the member identified by pCatMember. This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATMEMBER*",
        "name": "pCatMember",
        "description": "A pointer to the CRYPTCATMEMBER structure that identifies which member of the catalog is being enumerated."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATATTRIBUTE*",
        "name": "pPrevAttr",
        "description": "A pointer to the previously returned value from this function or pointer to NULL to start the enumeration."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The CryptCATEnumerateCatAttr function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "The return value is a pointer to the  CRYPTCATATTRIBUTE structure that contains the attribute information or NULL, if no more attributes are in the enumeration or if an error is encountered. The returned pointer is passed in as the pPrevAttr parameter for subsequent calls to this function. ",
    "remarks": "Do not free the returned pointer nor any of the members pointed to by the returned pointer. ",
    "return_type": "CRYPTCATATTRIBUTE*",
    "category": "Cryptography",
    "name": "CryptCATEnumerateCatAttr",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "Handle for the catalog whose attributes are being enumerated. This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATATTRIBUTE*",
        "name": "pPrevAttr",
        "description": "A pointer to the previously returned pointer to  the CRYPTCATATTRIBUTE structure from this function or pointer to NULL to start the enumeration."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The CryptCATEnumerateMember function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "This function returns a pointer to a CRYPTCATMEMBER structure that represents the next member of the catalog. If there are no more members in the catalog to enumerate, this function returns NULL. ",
    "remarks": "Do not free the returned pointer nor any of the members pointed to by the returned pointer. The following pseudocode example shows how to use this function to enumerate all of the members of a catalog. ",
    "return_type": "CRYPTCATMEMBER",
    "category": "Cryptography",
    "name": "CryptCATEnumerateMember",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "The handle of the catalog that contains the members to enumerate. This value cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATMEMBER*",
        "name": "pPrevMember",
        "description": "A pointer to a CRYPTCATMEMBER structure that identifies which member of the catalog was last retrieved. If this parameter is NULL, this function will retrieve the first member of the catalog."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The CryptCATGetAttrInfo function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "This function returns a pointer to a CRYPTCATATTRIBUTE structure that contains the attribute information. If the function fails, it returns NULL.   If this function returns NULL, additional error information can be obtained by calling the GetLastError function. GetLastError will return one of the following error codes.  ",
    "remarks": "",
    "return_type": "CRYPTCATATTRIBUTE*",
    "category": "Cryptography",
    "name": "CryptCATGetAttrInfo",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "The handle of the catalog that contains the member to retrieve the attribute information for. This handle is obtained by calling the CryptCATOpen function. This parameter is required and cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "CRYPTCATMEMBER*",
        "name": "pCatMember",
        "description": "A pointer to a CRYPTCATMEMBER structure that represents the member to retrieve the attribute information for. This can be obtained by calling the CryptCATGetMemberInfo function. This parameter is required and cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszReferenceTag",
        "description": "A pointer to a null-terminated Unicode string that contains the name of the attribute to retrieve the information for. This parameter is required and cannot be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The CryptCATGetMemberInfo function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "A pointer to the CRYPTCATMEMBER structure that contains the member information or NULL, if no information can be found. ",
    "remarks": "Do not free the returned pointer nor any of the members pointed to by the returned pointer. ",
    "return_type": "CRYPTCATMEMBER*",
    "category": "Cryptography",
    "name": "CryptCATGetMemberInfo",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hCatalog",
        "description": "A handle to the catalog. This parameter cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pwszReferenceTag",
        "description": "A pointer to a null-terminated string that represents the reference tag for the member information being retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The  IsCatalogFile function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Mscat.h",
    "return_value": "Returns nonzero if the specified file is a catalog file or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "IsCatalogFile",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hFile",
        "description": "A handle to the file to check. This parameter is optional, but it must contain a valid handle if the pwszFileName parameter is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "WCHAR*",
        "name": "pwszFileName",
        "description": "A pointer to a null-terminated wide character string that contains the name of the file to check. This parameter is optional, but it must contain a valid file name if the hFile parameter is NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The WintrustAddActionID function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology  signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE  if the function fails.   If the function fails, call the GetLastError function  to determine the reason for failure.  For information about any registry errors that this function may encounter, see the description for fdwFlags. ",
    "remarks": "To remove an action that has been added by this function, call the  WintrustRemoveActionID function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustAddActionID",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgActionID",
        "description": "A pointer to a GUID structure that identifies the action to add  and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h.  ValueMeaning  WINTRUST_ACTION_GENERIC_VERIFY   Verify a certificate chain only.   WINTRUST_ACTION_GENERIC_VERIFY_V2   Verify a file or object using the Authenticode policy provider.   HTTPSPROV_ACTION   Verify an SSL/PCT connection through Internet Explorer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fdwFlags",
        "description": "a value that determines whether registry errors are reported by this function. If fdwFlags is zero and this function experiences a registry error, the registry error will not be propagated to the GetLastError  function. If fdwFlags is WT_ADD_ACTION_ID_RET_RESULT_FLAG (0x1) and this function experiences a registry error, the registry error will be propagated to the GetLastError  function."
      },
      {
        "in_out": "_In_",
        "type": "CRYPT_REGISTER_ACTIONID*",
        "name": "psProvInfo",
        "description": "A pointer to the CRYPT_REGISTER_ACTIONID structure that defines the information for the trust provider."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The WintrustGetRegPolicyFlags function retrieves policy flags for a policy provider.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Cryptography",
    "name": "WintrustGetRegPolicyFlags",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwPolicyFlags",
        "description": "This parameter can be a bitwise combination of one or more of the following values.  ValueMeaning  WTPF_TRUSTTEST   Trust any test certificate.   WTPF_TESTCANBEVALID   Check any test certificate for validity.   WTPF_IGNOREEXPIRATION   Use expiration date.   WTPF_IGNOREREVOKATION   Do revocation check.   WTPF_OFFLINEOK_IND   If the source is offline, trust any individual certificates.   WTPF_OFFLINEOK_COM   If the source is offline, trust any commercial certificates.   WTPF_OFFLINEOKNBU_IND   If the source is offline, trust any individual certificates. Do not use the user interface (UI).   WTPF_OFFLINEOKNBU_COM   If the source is offline, trust any commercial certificates. Do not use the checking UI.   WTPF_VERIFY_V1_OFF   Turn off verification of version 1.0 certificates.   WTPF_IGNOREREVOCATIONONTS   Ignore time stamp revocation checks.   WTPF_ALLOWONLYPERTRUST   Allow only items in personal trust database."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The WintrustAddDefaultForUsage function specifies the default usage identifier and callback information for a provider.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE  if the function fails.   If the function fails, call the GetLastError function  to determine the reason for failure. ",
    "remarks": "If the provider uses this function and requires any of the callback data, the provider must completely fill out the CRYPT_PROVIDER_REGDEFUSAGE structure. The usage and callback information can be retrieved by calling the WintrustGetDefaultForUsage function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustAddDefaultForUsage",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const char*",
        "name": "pszUsageOID",
        "description": "Pointer to a string that contains the identifier."
      },
      {
        "in_out": "",
        "type": "_In_*",
        "name": "psDefUsage",
        "description": "Pointer to a CRYPT_PROVIDER_REGDEFUSAGE structure that contains callback information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WintrustGetDefaultForUsage function retrieves the default usage identifier and callback information.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE  if the function fails.   If the function fails, call the GetLastError function  to determine the reason for failure. ",
    "remarks": "Call this function once with the dwAction parameter set to DWACTION_ALLOCANDFILL to allocate memory and fill a CRYPT_PROVIDER_DEFUSAGE structure with information. Call this function again with the dwAction parameter set to DWACTION_FREE to free the allocated memory. The default usage and callback information for a provider is registered by calling the WintrustAddDefaultForUsage function. ",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustGetDefaultForUsage",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAction",
        "description": "Action to perform. This can be one of the following values. For more information, see Remarks.  ValueMeaning  DWACTION_ALLOCANDFILL   Allocate memory and fill the CRYPT_PROVIDER_DEFUSAGE structure pointed to by the psUsage parameter.   DWACTION_FREE   Free all memory allocated during  a previous call to this function by specifying DWACTION_ALLOCANDFILL for this parameter."
      },
      {
        "in_out": "_In_",
        "type": "const char*",
        "name": "pszUsageOID",
        "description": "Pointer to a string that contains the identifier."
      },
      {
        "in_out": "_Inout_",
        "type": "CRYPT_PROVIDER_DEFUSAGE*",
        "name": "psUsage",
        "description": "Pointer to a CRYPT_PROVIDER_DEFUSAGE structure that contains callback information to be retrieved."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The WintrustLoadFunctionPointers function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustLoadFunctionPointers",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgActionID",
        "description": "A pointer to a GUID structure that identifies the action whose function pointers are being loaded and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h.  ValueMeaning  WINTRUST_ACTION_GENERIC_VERIFY   Verify a certificate chain only.   WINTRUST_ACTION_GENERIC_VERIFY_V2   Verify a file or object using the Authenticode policy provider.   HTTPSPROV_ACTION   Verify an SSL/PCT connection through Internet Explorer."
      },
      {
        "in_out": "_Out_",
        "type": "CRYPT_PROVIDER_FUNCTIONS*",
        "name": "pPfns",
        "description": "A pointer to the CRYPT_PROVIDER_FUNCTIONS structure that receives the addresses of the function pointers."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The WintrustRemoveActionID function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "The return value is TRUE if the function succeeds; FALSE if the function fails. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustRemoveActionID",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgActionID",
        "description": "A pointer to a GUID structure that identifies the action to remove and the trust provider that supports that action. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h.  ValueMeaning  WINTRUST_ACTION_GENERIC_VERIFY   Verify a certificate chain only.   WINTRUST_ACTION_GENERIC_VERIFY_V2   Verify a file or object using the Authenticode policy provider.   HTTPSPROV_ACTION   Verify an SSL/PCT connection through Internet Explorer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The WintrustSetDefaultIncludePEPageHashes function sets the default setting that determines whether page hashes are included when creating subject interface package (SIP) indirect data for PE files.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This setting applies to each instance of Wintrust.dll. ",
    "return_type": "void",
    "category": "Cryptography",
    "name": "WintrustSetDefaultIncludePEPageHashes",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fIncludePEPageHashes",
        "description": "Determines whether page hashes are included when creating SIP indirect data for PE files. If this parameter is nonzero, page hashes are included. If this parameter is zero, page hashes are not included. The value is zero by default."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The WintrustSetRegPolicyFlags function sets policy flags for a policy provider.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "Returns nonzero if the policy flags were set successfully or zero otherwise. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WintrustSetRegPolicyFlags",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPolicyFlags",
        "description": "This parameter can be a bitwise combination of one or more of the following values.  ValueMeaning  WTPF_TRUSTTEST   Trust any test certificate.   WTPF_TESTCANBEVALID   Check any test certificate for validity.   WTPF_IGNOREEXPIRATION   Do not check the  expiration date.   WTPF_IGNOREREVOKATION   Do not check revocation.   WTPF_OFFLINEOK_IND   If the source is offline, trust any individual certificates.   WTPF_OFFLINEOK_COM   If the source is offline, trust any commercial certificates.   WTPF_OFFLINEOKNBU_IND   If the source is offline, trust any individual certificates. Do not use the user interface (UI).   WTPF_OFFLINEOKNBU_COM   If the source is offline, trust any commercial certificates. Do not use the checking UI.   WTPF_VERIFY_V1_OFF   Turn off verification of version 1.0 certificates.   WTPF_IGNOREREVOCATIONONTS   Ignore time stamp revocation checks.   WTPF_ALLOWONLYPERTRUST   Allow only items in personal trust database."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WinVerifyTrust function performs a trust verification action on a specified object. The function passes the inquiry to a trust provider that supports the action identifier, if one exists.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h (include Softpub.h)",
    "return_value": "If the trust provider verifies that the subject is trusted for the specified action, the return value is zero.  No other value besides zero should be considered a successful return. If the trust provider does not verify that the subject is trusted for the specified action, the function returns a status code from the trust provider. For example, a trust provider might indicate that the subject is not trusted, or is trusted but with limitations or warnings. The return value can be a trust-provider-specific value described in the documentation for an individual trust provider, or it can be one of the following error codes.  ",
    "remarks": "The WinVerifyTrust function enables applications to invoke a trust provider to verify that a specified object satisfies the criteria of a specified verification operation. The pgActionID parameter identifies the verification operation, and the pWinTrustData parameter identifies the object whose trust is to be verified. A trust provider is a DLL registered with the operating system. A call to WinVerifyTrust forwards that call to the registered trust provider, if there is one, that supports that specified action identifier. For example, the Software Publisher Trust Provider can verify that an executable image file comes from a trusted software publisher and that the file has not been modified since it was published. In this case, the pWinTrustData parameter specifies the name of the file and the type of file, such as a Microsoft Portable Executable image file. Each trust provider supports a specific set of actions that it can evaluate. Each action has a GUID that identifies it. A trust provider can support any number of action identifiers, but two trust providers cannot support the same action identifier. For an example that demonstrates how to use this function to verify the signature of a portable executable (PE) file, see Example C Program: Verifying the Signature of a PE File. ",
    "return_type": "LONG",
    "category": "Cryptography",
    "name": "WinVerifyTrust",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Optional handle to a caller window. A trust provider can use this value to determine whether it can interact with the user. However, trust providers typically perform verification actions without input from the user. This parameter can be one of the following values.  ValueMeaning  INVALID_HANDLE_VALUE   There is no interactive user. The trust provider performs the verification action without the user's assistance.   Zero   The trust provider can use the interactive desktop to display its user interface.   A valid window handle   A trust provider can treat any value other than INVALID_HANDLE_VALUE or zero as a valid window handle that it can use to interact with the user."
      },
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgActionID",
        "description": "A pointer to a GUID structure that identifies an action and the trust provider that supports that action. This value indicates the type of verification action to be performed on the structure pointed to by pWinTrustData. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h.  ValueMeaning  DRIVER_ACTION_VERIFY   Verify the authenticity of a Windows Hardware Quality Labs (WHQL) signed driver.  This is an Authenticode add-on policy provider.   HTTPSPROV_ACTION   Verify an SSL/TLS connection through Internet Explorer.   OFFICESIGN_ACTION_VERIFY    This Action ID is not supported. Verify the authenticity of a structured storage file by using the Microsoft Office Authenticode add-on policy provider. Windows Server 2003 and Windows XP:  This Action ID is supported.   WINTRUST_ACTION_GENERIC_CHAIN_VERIFY   Verify certificate chains created from any object type. A callback is provided to implement the final chain policy by using the chain context for each signer and counter signer.   WINTRUST_ACTION_GENERIC_VERIFY_V2   Verify a file or object using the Authenticode policy provider.   WINTRUST_ACTION_TRUSTPROVIDER_TEST   Write the CRYPT_PROVIDER_DATA structure to a file after calling the Authenticode policy provider."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pWVTData",
        "description": "A pointer that, when cast as a  WINTRUST_DATA structure, contains information that the trust provider needs to process the specified action identifier. Typically, the structure includes information that identifies the object that the trust provider must evaluate. The format of the structure depends on the action identifier. For information about the data required for a specific action identifier, see the documentation for the trust provider that supports that action."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WinVerifyTrustEx function performs a trust verification action on a specified object and takes a pointer to a WINTRUST_DATA structure. The function passes the inquiry to a trust provider, if one exists, that supports the action identifier. This function has no associated import library. You must use the LoadLibrary and GetProcAddress functions to dynamically link to Wintrust.dll.",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the trust provider verifies that the subject is trusted for the specified action, the return value is ERROR_SUCCESS. Otherwise, the function returns a status code from the trust provider. For example, a trust provider might indicate that the subject is not trusted, or is trusted but with limitations or warnings. The return value can be a trust provider\u00e2\u0080\u0093specific value described in the documentation for an individual trust provider, or it can be one of the following error codes.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "WinVerifyTrustEx",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Optional handle to a caller window. A trust provider can use this value to determine whether it can interact with the user. However, trust providers typically perform verification actions without input from the user. This parameter can be one of the following values.  ValueMeaning  INVALID_HANDLE_VALUE   There is no interactive user. The trust provider performs the verification action without the user's assistance.   Zero   The trust provider can use the interactive desktop to display its user interface.   A valid window handle   A trust provider can treat any value other than INVALID_HANDLE_VALUE or zero as a valid window handle that it can use to interact with the user."
      },
      {
        "in_out": "_In_",
        "type": "GUID*",
        "name": "pgActionID",
        "description": "A pointer to a GUID structure that identifies an action and the trust provider that supports that action. This value indicates the type of verification action to be performed on the structure pointed to by pWinTrustData. The WinTrust service is designed to work with trust providers implemented by third parties. Each trust provider provides its own unique set of action identifiers. For information about the action identifiers supported by a trust provider, see the documentation for that trust provider. For example, Microsoft provides a Software Publisher Trust Provider that can establish the trustworthiness of software being downloaded from the Internet or some other public network. The Software Publisher Trust Provider supports the following action identifiers. These constants are defined in Softpub.h.  ValueMeaning  DRIVER_ACTION_VERIFY   Verify the authenticity of a Windows Hardware Quality Labs (WHQL) signed driver.  This is an Authenticode add-on policy provider.   HTTPSPROV_ACTION   Verify an SSL/TLS connection through Internet Explorer.   OFFICESIGN_ACTION_VERIFY    This Action ID is not supported. Verify the authenticity of a structured storage file by using the Microsoft Office Authenticode add-on policy provider. Windows Server 2003 and Windows XP:  This Action ID is supported.   WINTRUST_ACTION_GENERIC_CERT_VERIFY   Verify a certificate chain only.  This is only valid when passing in a certificate context in the WinVerifyTrust input structures. Note  We do not recommend  using this function to perform certificate verification. To perform certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions.     WINTRUST_ACTION_GENERIC_CHAIN_VERIFY   Verify certificate chains created from any object type. A callback is provided to implement the final chain policy by using the chain context for each signer and counter signer.   WINTRUST_ACTION_GENERIC_VERIFY_V2   Verify a file or object using the Authenticode policy provider.   WINTRUST_ACTION_TRUSTPROVIDER_TEST   Write the CRYPT_PROVIDER_DATA structure to a file after calling the Authenticode policy provider."
      },
      {
        "in_out": "_In_",
        "type": "WINTRUST_DATA*",
        "name": "pWinTrustData",
        "description": "A pointer to a  WINTRUST_DATA structure that contains information that the trust provider needs to process the specified action identifier. Typically, the structure includes information that identifies the object that the trust provider must evaluate. The format of the structure depends on the action identifier. For information about the data required for a specific action identifier, see the documentation for the trust provider that supports that action."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The WTHelperCertCheckValidSignature function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of possible error values, see WinVerifyTrust. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Cryptography",
    "name": "WTHelperCertCheckValidSignature",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "CRYPT_PROVIDER_DATA*",
        "name": "pProvData",
        "description": "A pointer to the CRYPT_PROVIDER_DATA structure that contains the signer and countersigner information."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP2 [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[The  WTHelperCertFindIssuerCertificate function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "An issuer certificate that matches the subject certificate specified by the pChildContext parameter. ",
    "remarks": "To successfully find a matching issuer certificate, the following requirements must be met: ",
    "return_type": "PCCERT_CONTEXT",
    "category": "Cryptography",
    "name": "WTHelperCertFindIssuerCertificate",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCCERT_CONTEXT",
        "name": "pChildContext",
        "description": "The subject certificate for which to find a matching issuer certificate."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "chStores",
        "description": "The number of elements in the pahStores array."
      },
      {
        "in_out": "_In_",
        "type": "HCERTSTORE*",
        "name": "pahStores",
        "description": "An array of certificate stores in which to search."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME*",
        "name": "psftVerifyAsOf",
        "description": "The time of verification."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncoding",
        "description": "A DWORD value that specifies the encoding types of the certificate to check. For information about possible encoding types, see Certificate and Message Encoding Types."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwConfidence",
        "description": "This parameter can be a bitwise combination of zero or more of the following confidence values.  ValueMeaning  CERT_CONFIDENCE_SIG              0x10000000   The signature of the certificate is valid.   CERT_CONFIDENCE_TIME             0x01000000   The time of the certificate issuer is valid.    CERT_CONFIDENCE_TIMENEST 0x00100000   The time of the certificate is valid.    CERT_CONFIDENCE_AUTHIDEXT 0x00010000   The authority ID extension is valid.    CERT_CONFIDENCE_HYGIENE 0x00001000   At a minimum, the signature of the certificate and authority ID extension are valid.    CERT_CONFIDENCE_HIGHEST 0x11111000   A combination of all of the other confidence values."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "dwError",
        "description": "A pointer to a DWORD variable that contains the error value for this certificate, if applicable."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The WTHelperCertIsSelfSigned function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cryptography",
    "name": "WTHelperCertIsSelfSigned",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEncoding",
        "description": "A DWORD value that specifies the encoding types of the certificate to check. For information about possible encoding types, see Certificate and Message Encoding Types."
      },
      {
        "in_out": "_In_",
        "type": "CERT_INFO*",
        "name": "pCert",
        "description": "A pointer to a CERT_INFO structure that contains information about  the certificate to check."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[The WTHelperGetFileHash function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "Returns a status code that indicates the success or failure of the function.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Cryptography",
    "name": "WTHelperGetFileHash",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszFilename",
        "description": "A pointer to a null-terminated Unicode string that contains the path and file name of the file to get the hash for."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is not used and should be zero."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PVOID",
        "name": "pvReserved",
        "description": "This parameter is not used and should be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbFileHash",
        "description": "A pointer to a buffer to receive the hash value for the file. The pcbFileHash parameter contains the size of this buffer."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "DWORD*",
        "name": "pcbFileHash",
        "description": "A pointer to a DWORD variable that, on input, contains the size, in bytes, of the pbFileHash buffer and, on output, receives the size, in bytes, of the hash value. To obtain the required size of the hash value, pass NULL for the pbFileHash parameter. This function will place the required size, in bytes, of the hash value in this location. If the pbFileHash parameter is not NULL, and the size is not large enough to receive the hash value, this function will place the required size, in bytes, in this location and return ERROR_MORE_DATA."
      },
      {
        "in_out": "_Out_opt_",
        "type": "ALG_ID*",
        "name": "pHashAlgid",
        "description": "A pointer to an ALG_ID variable to receive the identifier of the algorithm used to create the hash value. This parameter can be NULL if this information is not needed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The WTHelperGetProvCertFromChain function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns a pointer to a  CRYPT_PROVIDER_CERT structure that represents the trust provider certificate. If the function fails, it returns NULL. ",
    "remarks": "",
    "return_type": "CRYPT_PROVIDER_CERT*",
    "category": "Cryptography",
    "name": "WTHelperGetProvCertFromChain",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PROVIDER_SGNR*",
        "name": "pSgnr",
        "description": "A pointer to a CRYPT_PROVIDER_SGNR structure that represents the signers. This pointer is retrieved by the WTHelperGetProvSignerFromChain function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idxCert",
        "description": "The index of the certificate. The index is zero based."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[The WTHelperGetProvPrivateDataFromChain function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns a pointer to a  CRYPT_PROVIDER_PRIVDATA structure that represents the trust provider's private information. If the function fails, the return value is NULL. ",
    "remarks": "",
    "return_type": "CRYPT_PROVIDER_PRIVDATA*",
    "category": "Cryptography",
    "name": "WTHelperGetProvPrivateDataFromChain",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PROVIDER_DATA*",
        "name": "pProvData",
        "description": "A pointer to a CRYPT_PROVIDER_DATA structure that contains the provider's private information."
      },
      {
        "in_out": "",
        "type": "GUID*",
        "name": "pgProviderID",
        "description": "A pointer to a GUID structure that identifies the provider."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[The WTHelperGetProvSignerFromChain function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns a pointer to a CRYPT_PROVIDER_SGNR structure for the requested signer or countersigner. If the function fails, it returns NULL. ",
    "remarks": "",
    "return_type": "CRYPT_PROVIDER_SGNR*",
    "category": "Cryptography",
    "name": "WTHelperGetProvSignerFromChain",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CRYPT_PROVIDER_DATA*",
        "name": "pProvData",
        "description": "A pointer to the CRYPT_PROVIDER_DATA structure that contains the signer and countersigner information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idxSigner",
        "description": "The index of the signer. The index is zero based."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fCounterSigner",
        "description": "If TRUE, the countersigner, as specified by idxCounterSigner, is retrieved by this function; the signer that contains the countersigner is identified by  idxSigner. If FALSE, the signer, as specified by idxSigner, is retrieved by this function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idxCounterSigner",
        "description": "The index of the countersigner. The index is zero based. The countersigner applies to the signer identified by idxSigner."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[The WTHelperProvDataFromStateData function is available for use in  the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. For certificate verification, use the CertGetCertificateChain and CertVerifyCertificateChainPolicy functions. For Microsoft Authenticode technology signature verification, use the .NET Framework.]",
    "library": "Wintrust.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wintrust.h",
    "return_value": "If the function succeeds, the function returns a pointer to a CRYPT_PROVIDER_DATA structure. The returned pointer can be used by the WTHelperGetProvSignerFromChain   function. If the function fails, it returns NULL. ",
    "remarks": "",
    "return_type": "CRYPT_PROVIDER_DATA*",
    "category": "Cryptography",
    "name": "WTHelperProvDataFromStateData",
    "is_callback": 0,
    "dll": "Wintrust.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hStateData",
        "description": "A handle previously set by the WinVerifyTrustEx function as the hWVTStateData\t member of the WINTRUST_DATA structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH callback function specifies that an object has changed. The provider calls this function when the provider has determined that a particular name or identifier has been updated.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, return nonzero (TRUE). If the function fails, return zero (FALSE). ",
    "remarks": "A provider calls an implementation of the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH callback function to indicate that an object has changed. A pointer to this function is set in the pfnFlush parameter of the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. An identifier is data chosen by the provider to represent the object being located for the caller. Identifiers need not be unique. If the provider determines that the object associated with the identifier is no longer valid, it should call this function to mark all objects with the associated identifier as invalid. This function is thread safe. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pContext",
        "description": "Pointer to a provider defined object that contains information about this provider."
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB*",
        "name": "rgIdentifierOrNameList",
        "description": "Pointer to an array of names or identifiers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIdentifierOrNameListCount",
        "description": "The number of names or identifiers specified by the rgIdentifierOrNameList parameter."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET callback function retrieves an object. You must implement this function as part of your custom provider. This function is currently called by only the Secure Channel (Schannel) security package.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, return nonzero (TRUE). If the function fails, return zero (FALSE) and specify an appropriate error in the SetLastError function. Most errors are passed through Schannel unaltered but this behavior is not guaranteed. Some errors may be mapped to other errors. If an object cannot be returned for a given DNS name (pNameBlob) or identifier (pIdentifier), return FALSE and specify CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND in the SetLastError function. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET callback function is currently called by only the Secure Channel (Schannel) security package. You can return an object that encapsulates one of the following: When this function is first called, Schannel submits a DNS host name in the pNameBlob argument to specify the host for which the object is intended. Your provider must process the name (match wild cards, build a file path, and so on) to determine what object to find. Because many host names can be mapped to one object, your provider can use the ppIdentifier parameter to return an internally defined identifier that can be used in subsequent calls by the cryptography API (CAPI) functions to the provider. The provider can then use the identifier to assist in finding the appropriate object. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pPluginContext",
        "description": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCRYPT_DATA_BLOB",
        "name": "pIdentifier",
        "description": "Pointer to a CRYPTOAPI_BLOB structure that contains the object identifier. This value should always be NULL on the first call to this function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNameType",
        "description": "The name format of the pNameBlob parameter. Possible values are listed below. The implementation of this function must be able to process CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE, which is passed in by Schannel.  CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE (1 (0x1)) CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE (32 (0x20)) CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE (33 (0x21)) CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE (0x0000FFFF)"
      },
      {
        "in_out": "_In_",
        "type": "PCERT_NAME_BLOB",
        "name": "pNameBlob",
        "description": "Pointer to a CRYPTOAPI_BLOB structure that contains the name the calling application is using to uniquely identify the object. Your provider uses this name to locate the requested object. Schannel currently submits a DNS (domain name system) host name encoded in UTF8 with IDN names converted from punycode."
      },
      {
        "in_out": "_Out_",
        "type": "PBYTE*",
        "name": "ppbContent",
        "description": "Pointer to a byte array that contains the object to be returned."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pcbContent",
        "description": "The size, in bytes, of the object pointed to by the ppbContent parameter."
      },
      {
        "in_out": "_Out_",
        "type": "PCWSTR*",
        "name": "ppwszPassword",
        "description": "Null-terminated Unicode string that contains the password, if any, used to encrypt the object. If the object is a personal information exchange (PFX) file, a password will typically be used to perform encryption. This value can be NULL if no password is required."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_DATA_BLOB*",
        "name": "ppIdentifier",
        "description": "Address that receives a pointer to an optional identifier that can be used during subsequent calls to this function and for change notifications. For more information, see Remarks. If your provider sets this value to NULL, Schannel internally uses the pNameBlob parameter value."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE callback function releases the provider.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Do not return a value from this function. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE callback function is currently called by only the Secure Channel (Schannel) security package. This function is called once for every call made to PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE. The provider is not expected to release all memory for all objects but should clean itself if the dwReason parameter is set to CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP or CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD. This function must block so that  calls to PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH can complete. ",
    "return_type": "typedef void (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReason",
        "description": "Specifies the reason the provider is being released. This can be one of the following values:  ValueMeaning  CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN 1   The computer is shutting down.   CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP 2   The service is stopping.   CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT 3   The calling process is ending.   CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD 4   The provider DLL is unloading."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pPluginContext",
        "description": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD callback function releases the password used to encrypt a personal information exchange (PFX) byte array.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Do not return a value from this function. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD function is currently called by only the Secure Channel (Schannel) security package. Schannel calls PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET to retrieve a PFX byte array and then calls PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD after the byte array has been processed but before calling the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER function. ",
    "return_type": "typedef void (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pPluginContext",
        "description": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "pwszPassword",
        "description": "Null-terminated Unicode string that contains the password."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE callback function releases the object returned by the provider.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Do not return a value from this function. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE function is currently called by only the Secure Channel (Schannel) security package. Schannel calls PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET to retrieve an object and then calls PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE to remove the data returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET call from memory when it is no longer required. ",
    "return_type": "typedef void (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pPluginContext",
        "description": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information."
      },
      {
        "in_out": "_In_",
        "type": "PBYTE",
        "name": "pbData",
        "description": "Pointer to the buffer to release."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER callback function releases memory for an object identifier.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "Do not return a value from this function. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER function is currently called by only the Secure Channel (Schannel) security package. This function may be called for any of the following reasons: ",
    "return_type": "typedef void (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "pPluginContext",
        "description": "Pointer to an optional buffer defined by this provider and returned by the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information."
      },
      {
        "in_out": "_In_",
        "type": "PCRYPT_DATA_BLOB",
        "name": "pIdentifier",
        "description": "Pointer to the buffer that contains the identifier."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function initializes the provider. You must implement this function as part of your custom provider.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Wincrypt.h",
    "return_value": "If the function succeeds, return nonzero (TRUE). If the function fails, return zero (FALSE) and specify an appropriate error in the SetLastError function. Most errors are passed through Schannel unaltered but this behavior is not guaranteed. Some errors may be mapped to other errors. ",
    "remarks": "The PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE function is currently called by only the Secure Channel (Schannel) security service provider (SSP). The Cryptography API (CAPI) will internally call your custom provider if, beginning with Windows 8, you specify the name of the security principal in the pszPrincipal parameter of the AcquireCredentialsHandle function. When you implement this function, remember to fill the  CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE function table with pointers to the following functions implemented by your provider: You must call CryptRegisterDefaultOIDFunction to register the provider in the Windows registry. ",
    "return_type": "typedef BOOL (",
    "category": "Cryptography",
    "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH",
        "name": "pfnFlush",
        "description": "Pointer to the PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH function implementation."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pContext",
        "description": "Pointer to a provider defined object that contains information about the provider and the objects."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwExpectedObjectCount",
        "description": "Specifies the number of unique objects that the provider expects to locate. This value tells the caller how much memory to allocate for storing objects. Set this value to zero (0) to specify the default value of 10,000 objects."
      },
      {
        "in_out": "_Out_",
        "type": "PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE*",
        "name": "ppFuncTable",
        "description": "A CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE structure that contains pointers to the functions implemented by the provider. No pointers in the table can be NULL. The caller does not free this structure. It is expected that the provider will return a table that is not allocated on the heap."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppPluginContext",
        "description": "Pointer to an optional buffer defined by this provider. The buffer is not modified by the caller. Your provider can use the data to help it determine what actions to perform or to maintain additional information. This value may be set to NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  }
]