[
  {
    "n_arguments": 1,
    "description": "The WebSocketAbortHandle function  aborts a WebSocket session handle created by WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "WebSocketAbortHandle aborts a WEB_SOCKET_HANDLE session handle and any calls to WebSocketSend or WebSocketReceive will return error when called with an aborted handle. WebSocketAbortHandle is a no-op if the WebSocket handshake has not been completed and the session handle has not been initialized. Any send/receive operations that were queued using WebSocketSend or WebSocketReceive will be ready to process using WebSocketGetAction, but attempts to queue additional operations using the aborted handle will result in error. ",
    "return_type": "VOID",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketAbortHandle",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE  WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WebSocketCreateClientHandle function creates a client-side WebSocket session handle.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketCreateClientHandle",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PWEB_SOCKET_PROPERTY",
        "name": "pProperties",
        "description": "Type: const PWEB_SOCKET_PROPERTY Pointer to an array of WEB_SOCKET_PROPERTY structures that contain WebSocket session-related properties."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulPropertyCount",
        "description": "Type: ULONG Number of properties in pProperties."
      },
      {
        "in_out": "_Out_",
        "type": "WEB_SOCKET_HANDLE*",
        "name": "phWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE* On successful output, pointer to a  newly allocated client-side WebSocket session handle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WebSocketCreateServerHandle function creates a server-side WebSocket session handle.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketCreateServerHandle",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PWEB_SOCKET_PROPERTY",
        "name": "pProperties",
        "description": "Type: const PWEB_SOCKET_PROPERTY Pointer to an array of WEB_SOCKET_PROPERTY structures that contain WebSocket session-related properties."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulPropertyCount",
        "description": "Type: ULONG Number of properties in pProperties."
      },
      {
        "in_out": "_Out_",
        "type": "WEB_SOCKET_HANDLE*",
        "name": "phWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE* On successful output, pointer to a newly allocated server-side WebSocket session handle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The WebSocketBeginClientHandshake function  begins the client-side handshake.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "To complete the client-side handshake, applications must call WebSocketEndClientHandshake. Once the client-server handshake is complete, the application may use the session functions. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketBeginClientHandshake",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE  WebSocket session handle returned by a previous call to WebSocketCreateClientHandle."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCSTR*",
        "name": "pszSubprotocols",
        "description": "Type: PCSTR* Pointer to an array of sub-protocols chosen by the application. Once the client-server handshake is complete, the application must use the sub-protocol returned by WebSocketEndClientHandshake. Must contain one subprotocol per entry."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulSubprotocolCount",
        "description": "Type: ULONG Number of sub-protocols in pszSubprotocols."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCSTR*",
        "name": "pszExtensions",
        "description": "Type: PCSTR* Pointer to an array of extensions chosen by the application. Once the client-server handshake is complete, the application must use the extension returned by WebSocketEndClientHandshake. Must contain one extension per entry."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulExtensionCount",
        "description": "Type: ULONG Number of extensions in pszExtensions."
      },
      {
        "in_out": "_In_opt_",
        "type": "const PWEB_SOCKET_HTTP_HEADER",
        "name": "pInitialHeaders",
        "description": "Type: const PWEB_SOCKET_HTTP_HEADER Pointer to an array of WEB_SOCKET_HTTP_HEADER structures that contain the request headers to be sent by the application. The array must include the Host HTTP header as defined in RFC 2616."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulInitialHeaderCount",
        "description": "Type: ULONG Number of request headers in pInitialHeaders."
      },
      {
        "in_out": "_Out_",
        "type": "PWEB_SOCKET_HTTP_HEADER",
        "name": "pAdditionalHeaders",
        "description": "Type: PWEB_SOCKET_HTTP_HEADER On successful output, pointer to an array of WEB_SOCKET_HTTP_HEADER structures that contain the request headers to be sent by the application. If any of these headers were specified in pInitialHeaders, the header must be replaced."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulAdditionalHeaderCount",
        "description": "Type: ULONG* On successful output, number of response headers in pAdditionalHeaders."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The WebSocketBeginServerHandshake function  begins the server-side handshake.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns one of the following or a system error code defined in WinError.h.  ",
    "remarks": "To complete the server-side handshake, applications must call WebSocketEndServerHandshake or any of the session functions. Once the client-server handshake is complete, the application may use the session functions. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketBeginServerHandshake",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE  WebSocket session handle returned by a previous call to WebSocketCreateServerHandle."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCSTR",
        "name": "pszSubprotocolSelected",
        "description": "Type: PCSTR A pointer to a sub-protocol value chosen by the application. Must contain one subprotocol."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCSTR*",
        "name": "pszExtensionSelected",
        "description": "Type: PCSTR* A pointer to a list of extensions chosen by the application. Must contain one extension per entry."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulExtensionSelectedCount",
        "description": "Type: ULONG Number of extensions in pszExtensionSelected."
      },
      {
        "in_out": "_In_",
        "type": "const PWEB_SOCKET_HTTP_HEADER",
        "name": "pRequestHeaders",
        "description": "Type: const PWEB_SOCKET_HTTP_HEADER Pointer to an array of WEB_SOCKET_HTTP_HEADER structures that contain the request headers received by the application."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulRequestHeaderCount",
        "description": "Type: ULONG Number of request headers in pRequestHeaders."
      },
      {
        "in_out": "_Out_",
        "type": "PWEB_SOCKET_HTTP_HEADER*",
        "name": "pResponseHeaders",
        "description": "Type: PWEB_SOCKET_HTTP_HEADER* On successful output, a pointer to an array or WEB_SOCKET_HTTP_HEADER structures that contain the response headers to be sent by the application."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulResponseHeaderCount",
        "description": "Type: ULONG* On successful output, number of response headers in pResponseHeaders."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WebSocketCompleteAction function  completes an action started by WebSocketGetAction.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "Each call to WebSocketGetAction must be paired with a call to WebSocketCompleteAction. For the following network actions, I/O errors can occur: ",
    "return_type": "VOID",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketCompleteAction",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvActionContext",
        "description": "Type: PVOID Pointer to an action context handle that was returned by a previous call to WebSocketGetAction."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulBytesTransferred",
        "description": "Type: ULONG Number of bytes transferred for the WEB_SOCKET_SEND_TO_NETWORK_ACTION or WEB_SOCKET_RECEIVE_FROM_NETWORK_ACTION actions. This value must be 0 for all other actions."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The WebSocketGetAction function returns an action from a call to WebSocketSend, WebSocketReceive or WebSocketCompleteAction.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns one of the following or a system error code defined in WinError.h.  ",
    "remarks": "Each call to WebSocketGetAction must be paired with a call to WebSocketCompleteAction. If the ulBytesTransferred parameter of WebSocketCompleteAction is different than the sum of all buffer lengths for the WEB_SOCKET_SEND_TO_NETWORK_ACTION action or is zero for the WEB_SOCKET_RECEIVE_FROM_NETWORK_ACTION action, the WebSocket application will not send or receive all of the data requested. WebSocketGetAction will return in pAction: There may be only one outstanding send and receive operation at a time, so the next action will be returned once the previous one has been completed using WebSocketCompleteAction. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketGetAction",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      },
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_ACTION_QUEUE",
        "name": "eActionQueue",
        "description": "Type: WEB_SOCKET_ACTION_QUEUE Enumeration that specifies whether to query the send queue, the receive queue, or both."
      },
      {
        "in_out": "_Inout_",
        "type": "WEB_SOCKET_BUFFER*",
        "name": "pDataBuffers",
        "description": "Type: WEB_SOCKET_BUFFER* Pointer to an array of WEB_SOCKET_BUFFER structures that contain WebSocket buffer data. Note  Do not allocate or deallocate memory for WEB_SOCKET_BUFFER structures, because they will be overwritten by WebSocketGetAction. The memory for buffers returned by WebSocketGetAction are managed by the library."
      },
      {
        "in_out": "_Inout_",
        "type": "ULONG*",
        "name": "pulDataBufferCount",
        "description": "Type: ULONG* On input, pointer to a value that specifies the number of elements in pDataBuffers. On successful output, number of elements that were actually returned in pDataBuffers."
      },
      {
        "in_out": "_Out_",
        "type": "WEB_SOCKET_ACTION*",
        "name": "pAction",
        "description": "Type: WEB_SOCKET_ACTION* On successful output, pointer to a WEB_SOCKET_ACTION enumeration that specifies the action returned from the query to the queue defines in eActionQueue."
      },
      {
        "in_out": "_Out_",
        "type": "WEB_SOCKET_BUFFER_TYPE*",
        "name": "pBufferType",
        "description": "Type: WEB_SOCKET_BUFFER_TYPE* On successful output, pointer to a WEB_SOCKET_BUFFER_TYPE enumeration that specifies the type of Web Socket buffer data returned in pDataBuffers."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PVOID*",
        "name": "pvApplicationContext",
        "description": "Type: PVOID* On successful output, pointer to an application context handle. The context returned here was initially passed to WebSocketSend or WebSocketReceive. pvApplicationContext is not set if pAction is WEB_SOCKET_NO_ACTION or WEB_SOCKET_SEND_TO_NETWORK_ACTION when sending a pong in response to receiving a ping."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID*",
        "name": "pvActionContext",
        "description": "Type: PVOID* On successful output, pointer to an action context handle. This handle is passed into a subsequent call WebSocketCompleteAction."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The WebSocketDeleteHandle function deletes a WebSocket session handle created by WebSocketCreateClientHandle or WebSocketCreateServerHandle.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "Any use of a deleted WEB_SOCKET_HANDLE session handle may result in an access violation.  Before an application deletes a session handle, it must ensure that all operations have been processed. Applications may use WebSocketAbortHandle to abort any queued operations before calling WebSocketDeleteHandle. ",
    "return_type": "VOID",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketDeleteHandle",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The WebSocketEndClientHandshake function completes the client-side handshake.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns one of the following or a system error code defined in WinError.h.  ",
    "remarks": "This function must be called to complete the client-side handshake after a previous call to WebSocketBeginClientHandshake. Once the client-server handshake is complete, the application may use the session functions. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketEndClientHandshake",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE  WebSocket session handle returned by a previous call to WebSocketCreateClientHandle."
      },
      {
        "in_out": "_In_",
        "type": "const PWEB_SOCKET_HTTP_HEADER",
        "name": "pResponseHeaders",
        "description": "Type: const PWEB_SOCKET_HTTP_HEADER Pointer to an array or WEB_SOCKET_HTTP_HEADER structures that contain the response headers received by the application."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulReponseHeaderCount",
        "description": "Type: ULONG Number of response headers in pResponseHeaders."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "ULONG*",
        "name": "pulSelectedExtensions",
        "description": "Type: ULONG* On input, pointer to an array allocated by the application. On successful output, pointer to an array of numbers that represent the extensions chosen by the server during the client-server handshake. These number are the zero-based indices into the extensions array passed to  pszExtensions in WebSocketBeginClientHandshake."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "ULONG*",
        "name": "pulSelectedExtensionCount",
        "description": "Type: ULONG* On input, number of extensions allocated in pulSelectedExtensions. This must be at least equal to the number passed to ulExtensionCount in WebSocketEndClientHandshake. On successful output, number of extensions returned in pulSelectedExtensions."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "ULONG*",
        "name": "pulSelectedSubprotocol",
        "description": "Type: ULONG* On successful output, pointer to a number that represents the sub-protocol chosen by the server during the client-server handshake. This number is the zero-based index into the sub-protocols array passed to  pszSubprotocols in WebSocketBeginClientHandshake."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The WebSocketEndServerHandshake function completes the server-side handshake.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "This function may be called to complete the server-side handshake after a previous call to WebSocketBeginServerHandshake; however, calling this function is optional and applications may use the session functions without first calling this function. This function  frees all internal handshake related structures and allocates data session buffers. All operations handled by this function will be performed internally even if the function is not called. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketEndServerHandshake",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE  WebSocket session handle returned by a previous call to WebSocketCreateServerHandle."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The WebSocketSend function adds a send operation to the protocol component operation queue.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns one of the following or a system error code defined in WinError.h.  ",
    "remarks": "After an application sends a WEB_SOCKET_CLOSE_BUFFER_TYPE WebSocket buffer successfully, it can only send control frames. ",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketSend",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      },
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_BUFFER_TYPE",
        "name": "BufferType",
        "description": "Type: WEB_SOCKET_BUFFER_TYPE The type of WebSocket buffer data to send in pBuffer."
      },
      {
        "in_out": "_In_opt_",
        "type": "WEB_SOCKET_BUFFER*",
        "name": "pBuffer",
        "description": "Type: WEB_SOCKET_BUFFER* A pointer to an array of WEB_SOCKET_BUFFER structures that contains WebSocket buffer data to send. If BufferType is WEB_SOCKET_PING_PONG_BUFFER_TYPE or WEB_SOCKET_UNSOLICITED_PONG_BUFFER_TYPE, pBuffer must be NULL. Note  Once WEB_SOCKET_INDICATE_SEND_COMPLETE is returned by WebSocketGetAction for this action, the memory pointer to by pBuffer can be reclaimed."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Context",
        "description": "Type: PVOID A pointer to an application context handle that will be returned by a subsequent call to  WebSocketGetAction."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WebSocketReceive function adds a receive operation to the protocol component operation queue.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns one of the following or a system error code defined in WinError.h.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketReceive",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_HANDLE",
        "name": "hWebSocket",
        "description": "Type: WEB_SOCKET_HANDLE WebSocket session handle returned by a previous call to WebSocketCreateClientHandle or WebSocketCreateServerHandle."
      },
      {
        "in_out": "_In_opt_",
        "type": "WEB_SOCKET_BUFFER*",
        "name": "pBuffer",
        "description": "Type: WEB_SOCKET_BUFFER* A pointer to an array of WEB_SOCKET_BUFFER structures that WebSocket data will be written to when it is returned by WebSocketGetAction. If NULL, WebSocketGetAction will return an internal buffer that enables zero-copy scenarios. Note  Once WEB_SOCKET_INDICATE_RECEIVE_COMPLETE is returned by WebSocketGetAction for this action, the memory pointer to by pBuffer can be reclaimed."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pvContext",
        "description": "Type: PVOID A pointer to an application context handle that will be returned by a subsequent call to  WebSocketGetAction."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The WebSocketGetGlobalProperty function  gets a single WebSocket property.",
    "library": "Websocket.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Websocket.h",
    "return_value": "Type: HRESULT If the function succeeds, it returns S_OK. If the function fails, it returns a system error code defined in WinError.h. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "WebSocket Protocol Component",
    "name": "WebSocketGetGlobalProperty",
    "is_callback": 0,
    "dll": "Websocket.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WEB_SOCKET_PROPERTY",
        "name": "eType",
        "description": "Type: WEB_SOCKET_PROPERTY A WebSocket property."
      },
      {
        "in_out": "_Inout_",
        "type": "PVOID",
        "name": "pvValue",
        "description": "Type: PVOID A pointer to the property value. The pointer must have an alignment compatible with the type of the property."
      },
      {
        "in_out": "_Inout_",
        "type": "ULONG*",
        "name": "ulSize",
        "description": "Type: ULONG* The size, in bytes, of the property pointed to by pvValue."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  }
]