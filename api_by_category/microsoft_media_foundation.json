[
  {
    "n_arguments": 1,
    "description": "[This API is not supported and may be altered or unavailable in the future. Instead, applications should use the PSCreateMemoryPropertyStore function to create named property stores.]",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "CreateNamedPropertyStore",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "INamedPropertyStore**",
        "name": "ppStore",
        "description": "Receives a pointer to the INamedPropertyStore interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This API is not supported and may be altered or unavailable in the future. Instead, applications should use the PSCreateMemoryPropertyStore function to create property stores.]",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "CreatePropertyStore",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IPropertyStore**",
        "name": "ppStore",
        "description": "Receives a pointer to the IPropertyStore interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Returns a DXVA2_Fixed32 structure that contains an opaque alpha value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "The function returns a DXVA2_Fixed32 structure that contains an opaque alpha value. ",
    "remarks": "",
    "return_type": "const DXVA2_Fixed32",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2_Fixed32OpaqueAlpha",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Returns a DXVA2_Fixed32 structure that contains a transparent alpha value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "The function returns a DXVA2_Fixed32 structure that contains a transparent alpha value. ",
    "remarks": "",
    "return_type": "const DXVA2_Fixed32",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2_Fixed32TransparentAlpha",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an instance of the Direct3D Device Manager.",
    "library": "Dxva2.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Windows Store apps must use IMFDXGIDeviceManager and Direct3D 11 Video APIs. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2CreateDirect3DDeviceManager9",
    "is_callback": 0,
    "dll": "Dxva2.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "UINT*",
        "name": "pResetToken",
        "description": "Receives a token that identifies this instance of the Direct3D device manager. Use this token when calling IDirect3DDeviceManager9::ResetDevice."
      },
      {
        "in_out": "_Out_",
        "type": "IDirect3DDeviceManager9**",
        "name": "ppDXVAManager",
        "description": "Receives a pointer to the IDirect3DDeviceManager9 interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a DirectX Video Acceleration (DXVA) services object. Call this function if your application uses DXVA directly, without using DirectShow or Media Foundation.",
    "library": "Dxva2.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2CreateVideoService",
    "is_callback": 0,
    "dll": "Dxva2.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDirect3DDevice9*",
        "name": "pDD",
        "description": "A pointer to the IDirect3DDevice9 interface of a Direct3D device."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the requested interface. Any of the following interfaces might be supported by the Direct3D device:              IDirectXVideoAccelerationService   IDirectXVideoDecoderService   IDirectXVideoProcessorService"
      },
      {
        "in_out": "",
        "type": "void**",
        "name": "ppService",
        "description": "Receives a pointer to the interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "The function returns the converted floating-point number. ",
    "remarks": "",
    "return_type": "float",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2FixedToFloat",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DXVA2_Fixed32",
        "name": "_fixed_",
        "description": "DXVA2_Fixed32 structure that contains a fixed-point value."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Dxva2api.h",
    "return_value": "The function returns a DXVA2_Fixed32 structure that contains the converted fixed-point value. ",
    "remarks": "",
    "return_type": "DXVA2_Fixed32",
    "category": "Microsoft Media Foundation",
    "name": "DXVA2FloatToFixed",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const float",
        "name": "_float_",
        "description": "Floating-point number to convert to a fixed-point value."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "Dxva2.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use the IDXVAHD_Device interface to get the device capabilities, create the video processor, and allocate video surfaces. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "DXVAHD_CreateDevice",
    "is_callback": 0,
    "dll": "Dxva2.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDirect3DDevice9Ex*",
        "name": "pD3DDevice",
        "description": "A pointer to the IDirect3DDevice9Ex interface of a Direct3D 9 device."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_CONTENT_DESC*",
        "name": "pContentDesc",
        "description": "A pointer to a DXVAHD_CONTENT_DESC structure that describes the video content. The driver uses this information as a hint when it creates the device."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_DEVICE_USAGE",
        "name": "Usage",
        "description": "A member of the DXVAHD_DEVICE_USAGE enumeration, describing how the device will be used. The value indicates the desired trade-off between speed and video quality. The driver uses this flag as a hint when it creates the device."
      },
      {
        "in_out": "_In_",
        "type": "PDXVAHDSW_Plugin",
        "name": "pPlugin",
        "description": "A pointer to an initialization function for a software device. Set this pointer if you are using a software plug-in device. Otherwise, set this parameter to NULL. If the value is NULL, the driver creates the DXVA-HD device. The function pointer type is PDXVAHDSW_Plugin."
      },
      {
        "in_out": "_Out_",
        "type": "IDXVAHD_Device**",
        "name": "ppDevice",
        "description": "Receives a pointer to the IDXVAHD_Device interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "To get the timer interval for the periodic callback, call MFGetTimerPeriodicity. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFAddPeriodicCallback",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MFPERIODICCALLBACK",
        "name": "Callback",
        "description": "Pointer to the callback function, of type MFPERIODICCALLBACK."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pContext",
        "description": "Pointer to a caller-provided object that implements IUnknown, or NULL. This parameter is passed to the callback function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwKey",
        "description": "Receives a key that can be used to cancel the callback. To cancel the callback, call MFRemovePeriodicCallback and pass this key as the dwKey parameter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a work queue that is guaranteed to serialize work items. The serial work queue wraps an existing multithreaded work queue. The serial work queue enforces a first-in, first-out (FIFO) execution order.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "When you are done using the work queue, call MFUnlockWorkQueue. Multithreaded queues use a thread pool, which  can reduce the total number of threads in the pipeline. However, they do not serialize work items. A serial work queue enables the application to get the benefits of the thread pool, without needing to perform manual serialization of its own work items. A serializer queue can also work in \"reply\" mode. If the caller's IMFAsyncCallback::GetParameters method returns the MFASYNC_REPLY_CALLBACK flag, the serializer queue does not automatically advance to the next work item. Instead, the queue waits for a reply from the caller. The caller signals the reply by invoking the asynchronous result object that the work queue passes to the Invoke method. The following code illustrates how the caller signals the work queue. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFAllocateSerialWorkQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueue",
        "description": "The identifier of an existing work queue. This must be either a multithreaded queue or another serial work queue. Any of the following can be used:  The default work queue (MFASYNC_CALLBACK_QUEUE_STANDARD) The platform multithreaded queue (MFASYNC_CALLBACK_QUEUE_MULTITHREADED) A multithreaded queue returned by the MFLockSharedWorkQueue  function. A serial queue created by the MFAllocateSerialWorkQueue function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwWorkQueue",
        "description": "Receives an identifier for the new serial work queue. Use this identifier when queuing work items."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a new work queue.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When you are done using the work queue, call MFUnlockWorkQueue. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFAllocateWorkQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwWorkQueue",
        "description": "Receives an identifier for the work queue."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a new work queue. This function extends the capabilities of the  MFAllocateWorkQueue function by making it possible to create a  work queue that has a message loop.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When you are done using the work queue, call MFUnlockWorkQueue. The MFAllocateWorkQueue function is equivalent to calling MFAllocateWorkQueueEx with the value MF_STANDARD_WORKQUEUE for the WorkQueueType parameter. This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFAllocateWorkQueueEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MFASYNC_WORKQUEUE_TYPE",
        "name": "WorkQueueType",
        "description": "A member of the MFASYNC_WORKQUEUE_TYPE enumeration, specifying the type of work queue to create.  ValueMeaning  MF_MULTITHREADED_WORKQUEUE   Create a multithreaded work queue. Generally, applications should not create private multithreaded queues. Use the platform multithreaded queues instead. For more information, see Work Queue and Threading Improvements.   MF_STANDARD_WORKQUEUE   Create a work queue without a message loop. Using this flag is equivalent to calling MFAllocateWorkQueue.   MF_WINDOW_WORKQUEUE   Create a work queue with a message loop. The thread that dispatches the work items for this queue will also call PeekMessage and DispatchMessage. Use this option if your callback performs any actions that require a message loop."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwWorkQueue",
        "description": "Receives an identifier for the work queue that was created."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Average time per frame is used in the older VIDEOINFOHEADER and VIDEOINFOHEADER2 format structures. This function provides a standard conversion so that all components in the pipeline can use consistent values, if they need to translate between the older format structures and the media type attributes used in Media Foundation. This function uses a look-up table for certain common durations. The table is listed in the Remarks section for the MFFrameRateToAverageTimePerFrame function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFAverageTimePerFrameToFrameRate",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT64",
        "name": "unAverageTimePerFrame",
        "description": "The average duration of a video frame, in 100-nanosecond units."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punNumerator",
        "description": "Receives the numerator of the frame rate."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punDenominator",
        "description": "Receives the denominator of the frame rate."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When the request is completed, the callback object's IMFAsyncCallback::Invoke method is called. The callback object should then call the MFEndCreateFile function to get a pointer to the byte stream. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFBeginCreateFile",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MF_FILE_ACCESSMODE",
        "name": "AccessMode",
        "description": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration."
      },
      {
        "in_out": "_In_",
        "type": "MF_FILE_OPENMODE",
        "name": "OpenMode",
        "description": "The behavior of the function if the file already exists or does not exist, specified as a member of the MF_FILE_OPENMODE enumeration."
      },
      {
        "in_out": "_In_",
        "type": "MF_FILE_FLAGS",
        "name": "fFlags",
        "description": "Bitwise OR of values from the MF_FILE_FLAGS enumeration."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszFilePath",
        "description": "Pointer to a null-terminated string containing the file name."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pCallback",
        "description": "Pointer to the IMFAsyncCallback interface of a callback object. The caller must implement this interface"
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pState",
        "description": "Pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      },
      {
        "in_out": "_Out_",
        "type": "IUnknown**",
        "name": "ppCancelCookie",
        "description": "Receives an IUnknown pointer or the value NULL. If the value is not NULL, you can cancel the asynchronous operation by passing this pointer to the MFCancelCreateFile function. The caller must release the interface. This parameter is optional and can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is asynchronous. When the operation completes, the callback object's IMFAsyncCallback::Invoke method is called. At that point, the application should call MFEndRegisterWorkQueueWithMMCSS to complete the asynchronous request. To unregister the work queue from the MMCSS task, call MFBeginUnregisterWorkQueueWithMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFBeginRegisterWorkQueueWithMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "The identifier of the work queue.  For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "wszClass",
        "description": "The name of the MMCSS task.For more information, see Multimedia Class Scheduler Service."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTaskId",
        "description": "The unique task identifier. To obtain a new task identifier, set this value to zero."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pDoneCallback",
        "description": "A pointer to the IMFAsyncCallback interface of a callback object. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pDoneState",
        "description": "A pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Associates a work queue with a Multimedia Class Scheduler Service (MMCSS) task.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function extends the MFBeginRegisterWorkQueueWithMMCSS function by adding the lPriority parameter. This function is asynchronous. When the operation completes, the callback object's IMFAsyncCallback::Invoke method is called. At that point, call MFEndRegisterWorkQueueWithMMCSS to complete the asynchronous request. To unregister the work queue from the MMCSS task, call MFBeginUnregisterWorkQueueWithMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFBeginRegisterWorkQueueWithMMCSSEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "The identifier of the work queue.  For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "wszClass",
        "description": "The name of the MMCSS task. For more information, see Multimedia Class Scheduler Service."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTaskId",
        "description": "The unique task identifier. To obtain a new task identifier, set this value to zero."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lPriority",
        "description": "The base relative priority for the work-queue threads. For more information, see AvSetMmThreadPriority."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pDoneCallback",
        "description": "A pointer to the IMFAsyncCallback interface of a callback object. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pDoneState",
        "description": "A pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function unregisters a work queue that was associated with an MMCSS class through the MFBeginRegisterWorkQueueWithMMCSS function. This function is asynchronous. When the operation completes, the callback object's IMFAsyncCallback::Invoke method is called. At that point, the application should call MFEndUnregisterWorkQueueWithMMCSS to complete the asynchronous request. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFBeginUnregisterWorkQueueWithMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "The identifier of the work queue.  For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pDoneCallback",
        "description": "Pointer to the IMFAsyncCallback interface of a callback object. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pDoneState",
        "description": "Pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the image size for a video format. Given a BITMAPINFOHEADER structure, this function calculates the correct value of the biSizeImage member.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Before calling this function, you must set at least the following members of the BITMAPINFOHEADER structure: Also, if biCompression is BI_BITFIELDS, the BITMAPINFOHEADER structure must be followed by an array of color masks. This function fails if the BITMAPINFOHEADER structure describes a format that is not a video format. For example, it fails if biCompresson is BI_JPEG or BI_PNG . This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCalculateBitmapImageSize",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const BITMAPINFOHEADER*",
        "name": "pBMIH",
        "description": "Pointer to a BITMAPINFOHEADER structure that describes the format."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the pBMIH buffer, in bytes. The size includes any color masks or palette entries that follow the BITMAPINFOHEADER structure."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcbImageSize",
        "description": "Receives the image size, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pbKnown",
        "description": "Receives the value TRUE if the function recognizes the video format. Otherwise, receives the value FALSE. This parameter can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCalculateImageSize",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidSubtype",
        "description": "Media subtype for the video format. For a list of subtypes, see Media Type GUIDs."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unWidth",
        "description": "Width of the image, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unHeight",
        "description": "Height of the image, in pixels."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcbImageSize",
        "description": "Receives the size of each frame, in bytes. If the format is compressed or is not recognized, the value is zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "You can use this function to cancel a previous call to MFBeginCreateFile. Because that function is asynchronous, however, it might complete before the operation can be canceled. Therefore, your callback might still be invoked after you call this function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCancelCreateFile",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pCancelCookie",
        "description": "A pointer to the IUnknown interface of the cancellation object. This pointer is received in the ppCancelCookie parameter of the MFBeginCreateFile function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Attempts to cancel an asynchronous operation that was scheduled with MFScheduleWorkItem or MFScheduleWorkItemEx.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Because work items are asynchronous, the  work-item callback might still be invoked after MFCancelWorkItem is called. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCancelWorkItem",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MFWORKITEM_KEY",
        "name": "Key",
        "description": "The key that was received in the pKey parameter of the MFScheduleWorkItem, MFScheduleWorkItemEx, or MFPutWaitingWorkItem functions."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function creates an asynchronous result object. When the timer interval elapses, the IMFAsyncCallback::Invoke method specified by pCallback is called. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFScheduleWorkItem",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pCallback",
        "description": "Pointer to the IMFAsyncCallback interface. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pState",
        "description": "Pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      },
      {
        "in_out": "_In_",
        "type": "INT64",
        "name": "Timeout",
        "description": "Time-out interval, in milliseconds. ..."
      },
      {
        "in_out": "_Out_",
        "type": "MFWORKITEM_KEY*",
        "name": "pKey",
        "description": "Receives a key that can be used to cancel the timer. To cancel the timer, call MFCancelWorkItem and pass this key in the Key parameter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When the timer interval elapses, the timer calls MFInvokeCallback with the pResult pointer to invoke the asynchronous callback. The callback is specified when you create the result object. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFScheduleWorkItemEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "Pointer to the IMFAsyncResult interface of an asynchronous result object. To create the result object, call MFCreateAsyncResult."
      },
      {
        "in_out": "_In_",
        "type": "INT64",
        "name": "Timeout",
        "description": "Time-out interval, in milliseconds. ..."
      },
      {
        "in_out": "_Out_",
        "type": "MFWORKITEM_KEY*",
        "name": "pKey",
        "description": "Receives a key that can be used to cancel the timer. To cancel the timer, call MFCancelWorkItem and pass this key in the Key parameter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Checks whether a hardware security processor is supported for the specified media protection system.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCheckContentProtectionDevice",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "ProtectionSystemId",
        "description": "The identifier of the protection system that you want to check."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If the full media type is compatible with the partial media type, the function returns TRUE. Otherwise, the function returns FALSE. ",
    "remarks": "A pipeline component can return a partial media type to describe a range of possible formats the component might accept. A partial media type has at least a major type GUID, but might be missing some of the other attributes that are needed to fully describe the type. The missing attributes represent \"don't care\" values for the partial type. For example, a partial video type might be missing the attributes for the width and height of the video. This function returns TRUE if the following conditions are both true: Otherwise, the function returns FALSE. ",
    "return_type": "BOOL",
    "category": "Microsoft Media Foundation",
    "name": "MFCompareFullToPartialMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFTypeFull",
        "description": "Pointer to the IMFMediaType interface of the full media type."
      },
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFTypePartial",
        "description": "Pointer to the IMFMediaType interface of the partial media type."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Extended Color Information.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function sets the following fields in the MFVIDEOFORMAT structure. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFConvertColorInfoFromDXVA",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "MFVIDEOFORMAT*",
        "name": "pToFormat",
        "description": "Pointer to an MFVIDEOFORMAT structure. The function fills in the structure members that correspond to the DXVA color information in the dwFromDXVA parameter. The function does not modify the other structure members."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFromDXVA",
        "description": "DWORD that contains extended color information. The bitfields in the DWORD are defined in the DXVA2_ExtendedFormat structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Extended Color Information.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFConvertColorInfoToDXVA",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwToDXVA",
        "description": "Receives the DXVA extended color information. The bitfields in the DWORD are defined in the DXVA2_ExtendedFormat structure."
      },
      {
        "in_out": "_In_",
        "type": "const MFVIDEOFORMAT*",
        "name": "pFromFormat",
        "description": "Pointer to an MFVIDEOFORMAT structure that describes the video format."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts an array of 16-bit floating-point numbers into an array of 32-bit floating-point numbers.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function converts dwCount values in the pSrc array and writes them into the pDest array. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFConvertFromFP16Array",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "float*",
        "name": "pDest",
        "description": "Pointer to an array of float values. The array must contain at least dwCount elements."
      },
      {
        "in_out": "_In_",
        "type": "const WORD*",
        "name": "pSrc",
        "description": "Pointer to an array of 16-bit floating-point values, typed as WORD values. The array must contain at least dwCount elements."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCount",
        "description": "Number of elements in the pSrc array to convert."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts an array of 32-bit floating-point numbers into an array of 16-bit floating-point numbers.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function converts the values in the pSrc array and writes them into the pDest array. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFConvertToFP16Array",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WORD*",
        "name": "pDest",
        "description": "Pointer to an array of 16-bit floating-point values, typed as WORD values. The array must contain at least dwCount elements."
      },
      {
        "in_out": "_In_",
        "type": "const float*",
        "name": "pSrc",
        "description": "Pointer to an array of float values. The array must contain at least dwCount elements."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCount",
        "description": "Number of elements in the pSrc array to convert."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Copies an image or image plane from one buffer to another.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function copies a single plane of the image. For planar YUV formats, you must call the function once for each plane. In this case, pDest and pSrc must point to the start of each plane. This function is optimized if the MMX, SSE, or SSE2 instruction sets are available on the processor. The function performs a non-temporal store (the data is written to memory directly without polluting the cache). ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCopyImage",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pDest",
        "description": "Pointer to the start of the first row of pixels in the destination buffer."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lDestStride",
        "description": "Stride of the destination buffer, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "pSrc",
        "description": "Pointer to the start of the first row of pixels in the source image."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lSrcStride",
        "description": "Stride of the source image, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWidthInBytes",
        "description": "Width of the image, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLines",
        "description": "Number of rows of pixels to copy."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a system-memory buffer object to hold 2D image data.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The returned buffer object also exposes the IMF2DBuffer2 interface. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreate2DMediaBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWidth",
        "description": "Width of the image, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeight",
        "description": "Height of the image, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFourCC",
        "description": "A FOURCC code or D3DFORMAT value that specifies the video format. If you have a video subtype GUID, you can use the first DWORD of the subtype."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fBottomUp",
        "description": "If TRUE, the buffer's IMF2DBuffer::ContiguousCopyTo method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is FALSE, the ContiguousCopyTo method copies the buffer into a top-down format, which is compatible with DirectX.    For more information about top-down versus bottom-up images, see Image Stride."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media sink for authoring 3GP files.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The 3GP media sink supports a maximum of one video stream and one audio stream. The initial stream formats are given in the pVideoMediaType and pAudioMediaType parameters. To create an MP4 file with one stream, set the other stream type to NULL. For example, to create an audio-only file, set pVideoMediaType to NULL. The number of streams is fixed when you create the media sink. The sink does not support the IMFMediaSink::AddStreamSink method. To author MP4 files, use the MFCreateMPEG4MediaSink function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreate3GPMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream.  The media sink writes the 3GP file to this byte stream. The byte stream must be writable and support seeking."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pVideoMediaType",
        "description": "A pointer to the IMFMediaType interface of a video media type. This type specifies the format of the video stream. This parameter can be NULL, but not if pAudioMediaType is NULL."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "A pointer to the IMFMediaType interface of an audio media type. This type specifies the format of the audio stream. This parameter can be NULL, but not if pVideoMediaType is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the 3GP media sink's IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an instance of the AC-3 media sink.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The AC-3 media sink takes compressed AC-3 audio as input and writes the audio to the  byte stream without modification. The primary use for this media sink is to stream AC-3 audio over a network. The media sink does not perform AC-3 audio encoding. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAC3MediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pTargetByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the AC-3 file to this byte stream. The byte stream must be writable."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "A pointer to the IMFMediaType interface. This parameter specifies the media type for the AC-3 audio stream. The media type must contain the following attributes.  AttributeValue  MF_MT_MAJOR_TYPE MFMediaType_Audio  MF_MT_SUBTYPE MFAudioFormat_Dolby_AC3 or MFAudioFormat_Dolby_DDPlus"
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an instance of the audio data transport stream (ADTS) media sink.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The ADTS media sink converts Advanced Audio Coding (AAC) audio packets into an ADTS stream. The primary use for this media sink is to stream ADTS over a network. The output is not an audio file, but a stream of audio frames with ADTS headers. The media sink can accept raw AAC frames (MF_MT_AAC_PAYLOAD_TYPE = 0) or ADTS packets (MF_MT_AAC_PAYLOAD_TYPE = 1). If the input is raw AAC, the media sink inserts an ADTS header at the start of each audio frame. If the input is ADTS packets, the media sink passes the packets through to the byte stream, without modification. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateADTSMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pTargetByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream. The media sink writes the ADTS stream to this byte stream. The byte stream must be writable."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "A pointer to the IMFMediaType interface. This parameter specifies the media type for the ADTS stream. The media type must contain the following attributes.  AttributeValue  MF_MT_MAJOR_TYPE MFMediaType_Audio  MF_MT_SUBTYPE MFAudioFormat_AAC  MF_MT_AAC_PAYLOAD_TYPE 0 (raw AAC) or 1 (ADTS)"
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a media source that aggregates a collection of media sources.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The aggregated media source is useful for combining  streams from separate media sources. For example, you can use it to  combine a video capture source and an audio capture source. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAggregateSource",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFCollection*",
        "name": "pSourceCollection",
        "description": "A pointer to the IMFCollection interface of the collection object that contains a list of media sources."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSource**",
        "name": "ppAggSource",
        "description": "Receives a pointer to the IMFMediaSource interface of the aggregated media source. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Allocates system memory with a specified byte alignment and creates a media buffer to manage the memory.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When the media buffer object is destroyed, it releases the allocated memory. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAlignedMemoryBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbMaxLength",
        "description": "Size of the buffer, in bytes."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "fAlignmentFlags",
        "description": "Specifies the memory alignment for the buffer. Use one of the following constants.             ValueMeaning  MF_1_BYTE_ALIGNMENT 0x00000000                    Align to 1 bytes.                  MF_2_BYTE_ALIGNMENT 0x00000001                    Align to 2 bytes.                  MF_4_BYTE_ALIGNMENT 0x00000003                    Align to 4 bytes.                  MF_8_BYTE_ALIGNMENT 0x00000007                    Align to 8 bytes.                  MF_16_BYTE_ALIGNMENT 0x0000000F                    Align to 16 bytes.                  MF_32_BYTE_ALIGNMENT 0x0000001F                    Align to 32 bytes.                  MF_64_BYTE_ALIGNMENT 0x0000003F                    Align to 64 bytes.                  MF_128_BYTE_ALIGNMENT 0x0000007F                    Align to 128 bytes.                  MF_256_BYTE_ALIGNMENT 0x000000FF                    Align to 256 bytes.                  MF_512_BYTE_ALIGNMENT 0x000001FF                    Align to 512 bytes."
      },
      {
        "in_out": "",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface of the media buffer. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function can also be used with the following format structures that are equivalent to AM_MEDIA_TYPE: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAMMediaTypeFromMFMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to convert."
      },
      {
        "in_out": "",
        "type": "GUID",
        "name": "guidFormatBlockType",
        "description": "Format type GUID. This value corresponds to the formattype member of the AM_MEDIA_TYPE structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype."
      },
      {
        "in_out": "",
        "type": "AM_MEDIA_TYPE**",
        "name": "ppAMType",
        "description": "Receives a pointer to an AM_MEDIA_TYPE structure. The caller must release the memory allocated for the structure by calling CoTaskMemFree. The function also allocates memory for the format block, which the caller must release by calling CoTaskMemFree on the pbFormat member."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFContentInfo",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFContentInfo**",
        "name": "ppIContentInfo",
        "description": "Receives a pointer to the IMFASFContentInfo interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFIndexer",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFIndexer**",
        "name": "ppIIndexer",
        "description": "Receives a pointer to the IMFASFIndexer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table:  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFIndexerByteStream",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pIContentByteStream",
        "description": "Pointer to the IMFByteStream interface of a byte stream that contains the ASF stream."
      },
      {
        "in_out": "_In_",
        "type": "QWORD",
        "name": "cbIndexStartOffset",
        "description": "Byte offset of the index within the ASF stream. To get this value, call IMFASFIndexer::GetIndexPosition."
      },
      {
        "in_out": "_Out_",
        "type": "IMFByteStream**",
        "name": "pIIndexByteStream",
        "description": "Receives a pointer to the IMFByteStream interface. Use this interface to read from the index or write to the index. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "Pointer to a byte stream that will be used to write the ASF stream."
      },
      {
        "in_out": "",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFMediaSinkActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCWSTR",
        "name": "pwszFileName",
        "description": "Null-terminated wide-character string that contains the output file name."
      },
      {
        "in_out": "",
        "type": "IMFASFContentInfo*",
        "name": "pContentInfo",
        "description": "A pointer to the IMFASFContentInfo interface of an initialized ASF Header Object object. Use this interface to configure the ASF media sink."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppIActivate",
        "description": "Receives a pointer to the IMFActivate interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFMultiplexer",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFMultiplexer**",
        "name": "ppIMultiplexer",
        "description": "Receives a pointer to the IMFASFMultiplexer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFProfile",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFProfile**",
        "name": "ppIProfile",
        "description": "Receives a pointer to the IMFASFProfile interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFProfileFromPresentationDescriptor",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFPresentationDescriptor*",
        "name": "pIPD",
        "description": "Pointer to the IMFPresentationDescriptor interface of the presentation descriptor that contains the profile information."
      },
      {
        "in_out": "",
        "type": "IMFASFProfile**",
        "name": "ppIProfile",
        "description": "Receives a pointer to the IMFASFProfile interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFSplitter",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFSplitter**",
        "name": "ppISplitter",
        "description": "Receives a pointer to the IMFASFSplitter interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an activation object for the ASF streaming sink.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To create the ASF streaming sink in another process, call MFCreateASFStreamingMediaSinkActivate. An application can get a pointer to the ASF ContentInfo Object by calling IUnknown::QueryInterface on the media sink object received in the ppIMediaSink parameter. The ContentInfo object is used to set the encoder configuration settings, provide stream properties supplied by an ASF profile, and add metadata information. These configuration settings populate the various ASF header objects of the encoded ASF file. For more information, see   Setting Properties in the ContentInfo Object. The following code example shows how to create a media sink for an ASF source. This example copies the stream configuration settings from the source to the ContentInfo object that represents the ASF header object of the output file. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFStreamingMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "A pointer to a byte stream object in which the ASF media sink writes the streamed content."
      },
      {
        "in_out": "",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface of the ASF streaming-media sink object. To create the media sink, the application must call IMFActivate::ActivateObject on the received pointer. The caller must release the interface pointer."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an activation object for the ASF streaming sink.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Starting in Windows 7, Media Foundation provides an ASF streaming  sink that writes the content in  a live streaming scenario. This function should be used in secure transcode scenarios where this  media sink needs to be created and configured in the remote process. Like the ASF file sink, the new media sink performs ASF related tasks such as writing the ASF header, generating data packets (muxing). The content is written to a caller-implemented byte stream such as an HTTP byte stream. The caller must also provide an activation object that media sink can use to create the byte stream remotely. In addition, it performs transcryption for streaming protected content. It hosts the Windows Media Digital Rights Management (DRM) for Network Devices Output Trust Authority (OTA) that handles the license request and response. For more information, see IMFDRMNetHelper interface. The new media sink does not perform any time adjustments.  If the clock seeks, the timestamps are not changed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFStreamingMediaSinkActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFActivate*",
        "name": "pByteStreamActivate",
        "description": "A pointer to the  IMFActivate interface of an activation object. The caller  implements this interface.  The IMFActivate::ActivateObject method of the activation object must create a byte-stream object. The byte stream exposes the IMFByteStream interface. The ASF streaming sink will write data to this byte stream."
      },
      {
        "in_out": "",
        "type": "IMFASFContentInfo*",
        "name": "pContentInfo",
        "description": "A pointer to an ASF ContentInfo Object that contains the properties that describe the ASF content. These  settings can contain  stream settings, encoding properties, and metadata. For more information about these properties, see Setting Properties in the ContentInfo Object."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppIActivate",
        "description": "Receives a pointer to the IMFActivate interface of the activation object that is used to create the ASF streaming-media sink. To create the media sink, the application must call IMFActivate::ActivateObject by using the received pointer. The ActivateObject method also calls   IMFActivate::Activate on the byte stream activate object specified by  pByteStreamActivate, to create it so that the media sink can write streamed content in the byte stream. The caller must release the IMFActivate interface pointer of the media sink activation object received in ppIActivate."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateASFStreamSelector",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFProfile*",
        "name": "pIASFProfile",
        "description": "Pointer to the IMFASFProfile interface."
      },
      {
        "in_out": "",
        "type": "IMFASFStreamSelector**",
        "name": "ppSelector",
        "description": "Receives a pointer to the IMFASFStreamSelector interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "To invoke the callback specified in pCallback, call the MFInvokeCallback function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAsyncResult",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "punkObject",
        "description": "Pointer to the object stored in the asynchronous result. This pointer is returned by the IMFAsyncResult::GetObject method. This parameter can be NULL."
      },
      {
        "in_out": "",
        "type": "IMFAsyncCallback*",
        "name": "pCallback",
        "description": "Pointer to the IMFAsyncCallback interface. This interface is implemented by the caller of the asynchronous method."
      },
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "punkState",
        "description": "Pointer to the IUnknown interface of a state object. This value is provided by the caller of the asynchronous method. This parameter can be NULL."
      },
      {
        "in_out": "",
        "type": "IMFAsyncResult**",
        "name": "ppAsyncResult",
        "description": "Receives a pointer to the IMFAsyncResult interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an empty attribute store.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Attributes are used throughout Microsoft Media Foundation to configure objects, describe media formats, query object properties, and other purposes. For more information, see Attributes in Media Foundation. For a complete list of all the defined attribute GUIDs in Media Foundation, see Media Foundation Attributes. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAttributes",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFAttributes**",
        "name": "ppMFAttributes",
        "description": "Receives a pointer to the IMFAttributes interface. The caller must release the interface."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cInitialSize",
        "description": "The initial number of elements allocated for the attribute store. The attribute store grows as needed."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future.]",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The IMFAudioMediaType interface is deprecrated, so applications should avoid using this function. To create a media type from a WAVEFORMATEX structure, do the following: Alternatively, you can call MFCreateMediaType and then set the media type attributes directly. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAudioMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WAVEFORMATEX*",
        "name": "pAudioFormat",
        "description": "Pointer to a WAVEFORMATEX structure that describes the audio format."
      },
      {
        "in_out": "_Out_",
        "type": "IMFAudioMediaType**",
        "name": "ppIAudioMediaType",
        "description": "Receives a pointer to the IMFAudioMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates the Streaming Audio Renderer.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To configure the audio renderer, set any of the following attributes on the IMFAttributes interface specified in the pAudioAttributes parameter.  ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAudioRenderer",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAudioAttributes",
        "description": "A pointer to the IMFAttributes interface, which is used to configure the audio renderer. This parameter can be NULL. See Remarks."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppSink",
        "description": "Receives a pointer to the audio renderer's IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To create the audio renderer, call IMFActivate::ActivateObject on the retrieved IMFActivate pointer. To configure the audio renderer, set any of the following attributes on the IMFActivate object before calling ActivateObject. (If you are using the Media Session, the Media Session automatically calls ActivateObject when you queue the topology.)  ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAudioRendererActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. Use this interface to create the audio renderer. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an Audio-Video Interleaved (AVI) Sink.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateAVIMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "Pointer to the byte stream that will be used to write the AVI file."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pVideoMediaType",
        "description": "Pointer to the media type of the video input stream"
      },
      {
        "in_out": "_In_opt_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "Pointer to the media type of the audio input stream"
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the IMFMediaSink Interface.  The caller must release this interface."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[MFCreateCaptureEngine is not supported and may be altered or unavailable in the future. ]",
    "library": "",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function has no associated import library and is not declared in a public header file. You must use the LoadLibrary and GetProcAddress functions to dynamically link to MFCaptureEngine.dll. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateCaptureEngine",
    "is_callback": 0,
    "dll": "MFCaptureEngine.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFCaptureEngine**",
        "name": "ppCaptureEngine",
        "description": "Receives a pointer to the IMFCaptureEngine interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateCollection",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFCollection**",
        "name": "ppIMFCollection",
        "description": "Receives a pointer to the collection object's IMFCollection interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an IMFContentDecryptorContext interface for the specified media protection system.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2016 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateContentDecryptorContext",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidMediaProtectionSystemId",
        "description": "The identifier of the media protection system for which you want to create an IMFContentDecryptorContext interface."
      },
      {
        "in_out": "_In_opt_",
        "type": "IMFDXGIDeviceManager*",
        "name": "pD3DManager",
        "description": "Pointer to the IMFDXGIDeviceManager interface that you want to use for sharing the Direct3D 11 device."
      },
      {
        "in_out": "_In_",
        "type": "IMFContentProtectionDevice*",
        "name": "pContentProtectionDevice",
        "description": "The IMFContentProtectionDevice interface for the specified media protection system."
      },
      {
        "in_out": "_Out_",
        "type": "IMFContentDecryptorContext**",
        "name": "ppContentDecryptorContext",
        "description": "Pointer to the created IMFContentDecryptorContext interface."
      }
    ],
    "min_client": "Windows 10 [desktop apps | UWP apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an IMFContentProtectionDevice interface for the specified media protection system.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2016 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateContentProtectionDevice",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "ProtectionSystemId",
        "description": "The idenfier of the media protection system for which you want to create the IMFContentProtectionDevice interface."
      },
      {
        "in_out": "_Out_",
        "type": "IMFContentProtectionDevice**",
        "name": "ContentProtectionDevice",
        "description": "Pointer to the created IMFContentProtectionDevice interface."
      }
    ],
    "min_client": "Windows 10 [desktop apps | UWP apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateCredentialCache",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFNetCredentialCache**",
        "name": "ppCache",
        "description": "Receives a pointer to the IMFNetCredentialCache interface of the new credential cache object. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a media source for a hardware capture device.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The pAttributes parameter specifies an attribute store. To create the attribute store, call the MFCreateAttributes function.  You must set the MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE attribute, which specifies the type of device (audio or video). For audio capture devices, optionally set one of the following attributes:   If neither attribute is specified, the function selects the default audio capture device for the eCommunications role. For video capture devices, you must set the following attribute:   ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateDeviceSource",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of an attribute store, which is used to select the device. See Remarks."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSource**",
        "name": "ppSource",
        "description": "Receives a pointer to the media source's IMFMediaSource interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an activation object that represents a hardware capture device.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "This function creates an activation object that can be used to create a media source for a hardware device. To create the media source itself, call IMFActivate::ActivateObject. The pAttributes parameter specifies an attribute store. To create the attribute store, call the MFCreateAttributes function.  You must set the MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE attribute, which specifies the type of device (audio or video). For audio capture devices, optionally set one of the following attributes:   If neither attribute is specified, the function selects the default audio capture device for the eCommunications role. For video capture devices, you must set the following attribute:   ",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateDeviceSourceActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of an attribute store, which is used to select the device. See Remarks."
      },
      {
        "in_out": "_Out_",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an instance of the Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "When you create an IMFDXGIDeviceManager with MFCreateDXGIDeviceManager, a Microsoft Direct3D 11 device is not associated with the device manager. To associate a Direct3D 11 device with the device manager, call IMFDXGIDeviceManager::ResetDevice, passing in the pointer to the Direct3D 11 device. To create a Direct3D 11 device, call D3D11CreateDevice. The device should be created with the D3D11_CREATE_DEVICE_VIDEO_SUPPORT device creation flag which is defined in the D3D11_CREATE_DEVICE_FLAG enumeration. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateDXGIDeviceManager",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "UINT*",
        "name": "pResetToken",
        "description": "Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling IMFDXGIDeviceManager::ResetDevice."
      },
      {
        "in_out": "_Out_",
        "type": "IMFDXGIDeviceManager**",
        "name": "ppDXVAManager",
        "description": "Receives a pointer to the IMFDXGIDeviceManager interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a media buffer to manage a Microsoft DirectX Graphics Infrastructure (DXGI) surface.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The returned buffer object supports the following interfaces: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateDXGISurfaceBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Identifies the type of DXGI surface. This value must be IID_ID3D11Texture2D."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkSurface",
        "description": "A pointer to the IUnknown interface of the DXGI surface."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uSubresourceIndex",
        "description": "The zero-based index of a subresource of the surface. The media buffer object is associated with this subresource."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fBottomUpWhenLinear",
        "description": "If TRUE, the buffer's IMF2DBuffer::ContiguousCopyTo method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is FALSE, the ContiguousCopyTo method copies the buffer into a top-down format, which is compatible with Direct3D.            For more information about top-down versus bottom-up images, see Image Stride."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface. The caller must release the buffer."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media buffer object that manages a Direct3D 9 surface.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function creates a media buffer object that holds a pointer to the Direct3D surface specified in punkSurface. Locking the buffer gives the caller access to the surface memory. When the buffer object is destroyed, it releases the surface. For more information about media buffers, see Media Buffers. The buffer object created by this function also exposes the IMF2DBuffer interface. For more information, see DirectX Surface Buffer. This function does not support DXGI surfaces. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateDXSurfaceBuffer",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Identifies the type of Direct3D 9 surface. Currently this value must be IID_IDirect3DSurface9."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkSurface",
        "description": "A pointer to the IUnknown interface of the DirectX surface."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fBottomUpWhenLinear",
        "description": "If TRUE, the buffer's IMF2DBuffer::ContiguousCopyTo method copies the buffer into a bottom-up format. The bottom-up format is compatible with GDI for uncompressed RGB images. If this parameter is FALSE, the ContiguousCopyTo method copies the buffer into a top-down format, which is compatible with DirectX.            For more information about top-down versus bottom-up images, see Image Stride."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface. The caller must release the buffer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function creates a helper object that you can use to implement the IMFMediaEventGenerator interface. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateEventQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaEventQueue**",
        "name": "ppMediaEventQueue",
        "description": "Receives a pointer to the IMFMediaEventQueue interface of the event queue. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a byte stream from a file.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateFile",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "MF_FILE_ACCESSMODE",
        "name": "AccessMode",
        "description": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration."
      },
      {
        "in_out": "",
        "type": "MF_FILE_OPENMODE",
        "name": "OpenMode",
        "description": "The behavior of the function if the file already exists or does not exist, specified as a member of the MF_FILE_OPENMODE enumeration."
      },
      {
        "in_out": "",
        "type": "MF_FILE_FLAGS",
        "name": "fFlags",
        "description": "Bitwise OR of values from the MF_FILE_FLAGS enumeration."
      },
      {
        "in_out": "",
        "type": "LPCWSTR",
        "name": "pwszFileURL",
        "description": "Pointer to a null-terminated string that contains the file name."
      },
      {
        "in_out": "",
        "type": "IMFByteStream**",
        "name": "ppIByteStream",
        "description": "Receives a pointer to the IMFByteStream interface of the byte stream. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media sink for authoring fragmented MP4 files.",
    "library": "Mf.lib",
    "min_server": "None supported",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateFMPEG4MediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream.  The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pVideoMediaType",
        "description": "A pointer to the IMFMediaType interface of a video media type. This type specifies the format of the video stream. This parameter can be NULL, but not if pAudioMediaType is NULL."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "A pointer to the IMFMediaType interface of an audio media type. This type specifies the format of the audio stream. This parameter can be NULL, but not if pVideoMediaType is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the MP4 media sink's IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The DMO buffer created by this function also exposes the IMFSample interface. If pIMFSample is NULL, all of the IMFSample methods return MF_E_NOT_INITIALIZED. Otherwise, they call through to the pIMFSample pointer. If the Media Foundation buffer specified by pIMFMediaBuffer exposes the IMF2DBuffer interface, the DMO buffer also exposes IMF2DBuffer. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateLegacyMediaBufferOnMFMediaBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFSample*",
        "name": "pIMFSample",
        "description": "Pointer to the IMFSample interface of the sample that contains the Media Foundation buffer. This parameter can be NULL."
      },
      {
        "in_out": "",
        "type": "IMFMediaBuffer*",
        "name": "pIMFMediaBuffer",
        "description": "Pointer to the IMFMediaBuffer interface of the Media Foundation buffer."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbOffset",
        "description": "Offset in bytes from the start of the Media Foundation buffer. This offset defines where the DMO buffer starts. If this parameter is zero, the DMO buffer starts at the beginning of the Media Foundation buffer."
      },
      {
        "in_out": "",
        "type": "IMediaBuffer**",
        "name": "ppIMediaBuffer",
        "description": "Receives a pointer to the IMediaBuffer interface. This interface is documented in the DirectShow SDK documentation. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Allocates a system-memory buffer that is optimal for a specified media type.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "For video formats, if the format is recognized, the function creates a 2-D buffer that implements the IMF2DBuffer2 interface. Otherwise it creates a linear buffer. To get the  IMF2DBuffer2 interface, call QueryInterface on the pointer returned in ppBuffer. If the QueryInterface method fails, use the IMFMediaBuffer interface to access the buffer memory. For audio formats, the function allocates a buffer that is large enough to contain llDuration audio samples, or dwMinLength, whichever is larger. This function always allocates system memory. For Direct3D surfaces, use the MFCreateDXGISurfaceBuffer or MFCreateDXSurfaceBuffer function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaBufferFromMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pMediaType",
        "description": "A pointer to the IMFMediaType interface of the media type."
      },
      {
        "in_out": "_In_",
        "type": "LONGLONG",
        "name": "llDuration",
        "description": "The sample duration. This value is required for audio formats."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMinLength",
        "description": "The minimum size of the buffer, in bytes. The actual buffer size might be larger. Specify zero to allocate the default buffer size for the media type."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMinAlignment",
        "description": "The minimum memory alignment for the buffer. Specify zero to use the default memory alignment."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media buffer that wraps an existing media buffer. The new media buffer points to the same memory as the original media buffer, or to an offset from the start of the memory.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The maximum size of the wrapper buffer is limited to the size of the valid data in the original buffer. This might be less than the allocated size of the original buffer. To set the size of the valid data, call IMFMediaBuffer::SetCurrentLength. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaBufferWrapper",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaBuffer*",
        "name": "pBuffer",
        "description": "A pointer to the IMFMediaBuffer interface of the original media buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOffset",
        "description": "The start of the new buffer, as an offset in bytes from the start of the original buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwLength",
        "description": "The size of the new buffer. The value of cbOffset + dwLength must be less than or equal to the size of valid data the original buffer. (The size of the valid data is returned by the IMFMediaBuffer::GetCurrentLength method.)"
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaEvent",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "MediaEventType",
        "name": "met",
        "description": "The event type. See IMFMediaEvent::GetType. For a list of event types, see Media Foundation Events."
      },
      {
        "in_out": "",
        "type": "REFGUID",
        "name": "guidExtendedType",
        "description": "The extended type. See IMFMediaEvent::GetExtendedType. If the event type does not have an extended type, use the value GUID_NULL."
      },
      {
        "in_out": "",
        "type": "HRESULT",
        "name": "hrStatus",
        "description": "The event status. See IMFMediaEvent::GetStatus"
      },
      {
        "in_out": "const",
        "type": "PROPVARIANT*",
        "name": "pvValue",
        "description": "The value associated with the event, if any. See IMFMediaEvent::GetValue. This parameter can be NULL."
      },
      {
        "in_out": "",
        "type": "IMFMediaEvent**",
        "name": "ppEvent",
        "description": "Receives a pointer to the IMFMediaEvent interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an activation object for a Windows Runtime class.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To create the Windows Runtime object, call IMFActivate::ActivateObject or IClassFactory::CreateInstance. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaExtensionActivate",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szActivatableClassId",
        "description": "The class identifier that is associated with the activatable runtime class."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pConfiguration",
        "description": "A pointer to an optional IPropertySet object, which is used to configure the Windows Runtime class. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the interface being requested. The activation object created  by this function supports the following interfaces:   IClassFactory   IMFActivate   IPersistStream"
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "ppvObject",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If your application does not play protected content, you can use this function to create the Media Session in the application's process. To use the Media Session for protected content, you must call MFCreatePMPMediaSession. You can use the pConfiguration parameter to specify any of the following attributes: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaSession",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFAttributes*",
        "name": "pConfiguration",
        "description": "Pointer to the IMFAttributes interface. This parameter can be NULL. See Remarks."
      },
      {
        "in_out": "",
        "type": "IMFMediaSession**",
        "name": "ppMS",
        "description": "Receives a pointer to the Media Session's IMFMediaSession interface. The caller must release the interface. Before releasing the last reference to the IMFMediaSession pointer, the application must call the IMFMediaSession::Shutdown method."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The media type is created without any attributes. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType**",
        "name": "ppMFType",
        "description": "Receives a pointer to the IMFMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Create an IMFMediaType from properties.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaTypeFromProperties",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkStream",
        "description": "A pointer to properties."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaType**",
        "name": "ppMediaType",
        "description": "Receives a pointer to the IMFMediaType. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If the original format is a DirectShow audio media type, and the format type is not recognized, the function sets the following attributes on the converted media type.  ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMediaTypeFromRepresentation",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidRepresentation",
        "description": "GUID that specifies which format representation to convert. The following value is defined.  GUIDDescription AM_MEDIA_TYPE_REPRESENTATIONConvert a DirectShow AM_MEDIA_TYPE structure."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pvRepresentation",
        "description": "Pointer to a buffer that contains the format representation to convert. The layout of the buffer depends on the value of guidRepresentation."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaType**",
        "name": "ppIMediaType",
        "description": "Receives a pointer to the IMFMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The function allocates a buffer with a 1-byte memory alignment. To allocate a buffer that is aligned to a larger memory boundary, call MFCreateAlignedMemoryBuffer. When the media buffer object is destroyed, it releases the allocated memory. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMemoryBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbMaxLength",
        "description": "Size of the buffer, in bytes."
      },
      {
        "in_out": "",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface of the media buffer. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a Microsoft Media Foundation byte stream that wraps an IStream pointer.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "Returns an HRESULT value. ",
    "remarks": "This function enables applications to pass an IStream object to a Media Foundation API that takes an IMFByteStream pointer. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMFByteStreamOnStream",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IStream*",
        "name": "pStream",
        "description": "A pointer to the IStream interface."
      },
      {
        "in_out": "_Out_",
        "type": "IMFByteStream**",
        "name": "ppByteStream",
        "description": "Receives a pointer to the IMFByteStream interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a Microsoft Media Foundation byte stream that wraps an IRandomAccessStream object.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMFByteStreamOnStreamEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown",
        "name": "punkStream",
        "description": "A pointer to the IRandomAccessStream interface."
      },
      {
        "in_out": "_Out_",
        "type": "IMFByteStream**",
        "name": "ppByteStream",
        "description": "Receives a pointer to the IMFByteStream interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a wrapper for a byte stream.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The IMFByteStream methods on the wrapper call directly through to the original byte stream, except for the IMFByteStream::Close method. Calling Close on the wrapper closes the wrapper object, but leaves the original byte stream open. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMFByteStreamWrapper",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pStream",
        "description": "A pointer to the IMFByteStream interface of the original byte stream."
      },
      {
        "in_out": "_In_",
        "type": "IMFByteStream**",
        "name": "ppStreamWrapper",
        "description": "Receives a pointer to the IMFByteStream interface of the wrapper. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMFVideoFormatFromMFMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of a video media type."
      },
      {
        "in_out": "_Out_",
        "type": "MFVIDEOFORMAT**",
        "name": "ppMFVF",
        "description": "Receives a pointer to an MFVIDEOFORMAT structure. The caller must release the memory allocated for the structure by calling CoTaskMemFree."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcbSize",
        "description": "Receives the size of the MFVIDEOFORMAT structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Instead, applications should use the Source Resolver to create the MP3 media source.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function has no associated import library. To call this function, you must use the LoadLibrary and GetProcAddress functions to dynamically link to mf.dll. ",
    "return_type": "HRESULT __stdcall",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMP3ByteStreamPlugin",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the requested interface. Set this parameter to IID_IMFByteStreamHandler to receive a pointer to the IMFByteStreamHandler interface."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "ppvHandler",
        "description": "Receives a pointer to the interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates the MP3 media sink.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The MP3  media sink takes compressed MP3 audio samples as input, and writes an MP3 file with ID3 headers as output. The MP3 media sink does not perform MP3 audio encoding. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMP3MediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pTargetByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream.  The media sink writes the MP3 file to this byte stream. The byte stream must be writable."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface of the MP3 media sink.. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media sink for authoring MP4 files.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The MP4 media sink supports a maximum of one video stream and one audio stream. The initial stream formats are given in the pVideoMediaType and pAudioMediaType parameters. To create an MP4 file with one stream, set the other stream type to NULL. For example, to create an audio-only file, set pVideoMediaType to NULL. The number of streams is fixed when you create the media sink. The sink does not support the IMFMediaSink::AddStreamSink method. To author 3GP files, use the MFCreate3GPMediaSink function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMPEG4MediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pIByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream.  The media sink writes the MP4 file to this byte stream. The byte stream must be writable and support seeking."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pVideoMediaType",
        "description": "A pointer to the IMFMediaType interface of a video media type. This type specifies the format of the video stream. This parameter can be NULL, but not if pAudioMediaType is NULL."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "A pointer to the IMFMediaType interface of an audio media type. This type specifies the format of the audio stream. This parameter can be NULL, but not if pVideoMediaType is NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppIMediaSink",
        "description": "Receives a pointer to the MP4 media sink's IMFMediaSink interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a generic media sink that wraps a multiplexer Microsoft Media Foundation transform (MFT).",
    "library": "Mf.lib",
    "min_server": "None supported",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function attempts to find a multiplexer MFT that supports an output type with the following definition: To provide a list of additional format attributes: The multiplexer MFT must be registered in the MFT_CATEGORY_MULTIPLEXER  category. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateMuxSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidOutputSubType",
        "description": "The subtype GUID of the output type for the MFT."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pOutputAttributes",
        "description": "A list of format attributes for the MFT output type. This parameter is optional and can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pOutputByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream. The output from the MFT is written to this byte stream. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppMuxSink",
        "description": "Receives a pointer to the IMFMediaSink interface of the media sink. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateNetSchemePlugin",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Interface identifier (IID) of the interface to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "ppvHandler",
        "description": "Receives a pointer to the requested interface. The caller must release the interface. The scheme handler exposes the IMFSchemeHandler interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Instead, applications should call PathCreateFromUrl.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function has no associated import library. To call this function, you must use the LoadLibrary and GetProcAddress functions to dynamically link to Mfplat.dll. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePathFromURL",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszFileURL",
        "description": "A null-terminated string that contains the URL. The maximum length of the string is INTERNET_MAX_URL_LENGTH."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppwszFilePath",
        "description": "Receives a null-terminated string that contains the URL. The caller must free the string by calling CoTaskMemFree."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an instance of the Media Session inside a Protected Media Path (PMP) process.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "You can use the pConfiguration parameter to set any of the following attributes: If this function cannot create the PMP Media Session because a trusted binary was revoked, the ppEnablerActivate parameter receives an IMFActivate interface pointer. The application can use this pointer to create a content enabler object, which can then be used to download an updated binary: If the function successfully creates the PMP Media Session, the ppEnablerActivate parameter receives the value NULL. Do not make calls to the PMP Media Session from a thread that is processing a window message sent from another thread. To test whether the current thread falls into this category, call InSendMessage. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePMPMediaSession",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "A member of the MFPMPSESSION_CREATION_FLAGS enumeration that specifies how to create the session object."
      },
      {
        "in_out": "",
        "type": "IMFAttributes*",
        "name": "pConfiguration",
        "description": "A pointer to the IMFAttributes interface. This parameter can be NULL. See Remarks."
      },
      {
        "in_out": "",
        "type": "IMFMediaSession**",
        "name": "ppMediaSession",
        "description": "Receives a pointer to the PMP Media Session's IMFMediaSession interface. The caller must release the interface. Before releasing the last reference to the IMFMediaSession pointer, the application must call the IMFMediaSession::Shutdown method."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppEnablerActivate",
        "description": "Receives a pointer to the IMFActivate interface or the value NULL. If non-NULL, the caller must release the interface. See Remarks."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePMPServer",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCreationFlags",
        "description": "A member of the MFPMPSESSION_CREATION_FLAGS enumeration that specifies how to create the PMP session."
      },
      {
        "in_out": "_Out_",
        "type": "IMFPMPServer**",
        "name": "ppPMPServer",
        "description": "Receives a pointer to the IMFPMPServer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates the presentation clock. The presentation clock is used to schedule the time at which samples are rendered and to synchronize multiple streams.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The caller must shut down the presentation clock by calling IMFShutdown::Shutdown on the clock. Typically applications do not create the presentation clock. The Media Session automatically creates the presentation clock. To get a pointer to the presentation clock from the Media Session, call IMFMediaSession::GetClock. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePresentationClock",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFPresentationClock**",
        "name": "ppPresentationClock",
        "description": "Receives a pointer to the clock's IMFPresentationClock interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If you are writing a custom media source, you can use this function to create the source presentation descriptor. The presentation descriptor is created with no streams selected. Generally, a media source should select at least one stream by default. To select a stream, call IMFPresentationDescriptor::SelectStream. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePresentationDescriptor",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cStreamDescriptors",
        "description": "Number of elements in the apStreamDescriptors array."
      },
      {
        "in_out": "",
        "type": "IMFStreamDescriptor**",
        "name": "apStreamDescriptors",
        "description": "Array of IMFStreamDescriptor interface pointers. Each pointer represents a stream descriptor for one stream in the presentation."
      },
      {
        "in_out": "",
        "type": "IMFPresentationDescriptor**",
        "name": "ppPresentationDescriptor",
        "description": "Receives a pointer to an IMFPresentationDescriptor interface of the presentation descriptor. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePresentationDescriptorFromASFProfile",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFASFProfile*",
        "name": "pIProfile",
        "description": "Pointer to the IMFASFProfile interface of the ASF profile object."
      },
      {
        "in_out": "",
        "type": "IMFPresentationDescriptor**",
        "name": "ppIPD",
        "description": "Receives a pointer to the IMFPresentationDescriptor interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates properties from a IMFMediaType.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreatePropertiesFromMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pMediaType",
        "description": "A pointer to the IMFMediaType interface."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the interface being requested."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an IMFProtectedEnvironmentAccess object that allows content protection systems to perform a handshake with the protected environment.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateProtectedEnvironmentAccess",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFProtectedEnvironmentAccess**",
        "name": "ppAccess",
        "description": "Receives a pointer to the IMFProtectedEnvironmentAccess interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateProxyLocator",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszProtocol",
        "description": "The name of the protocol. Note  In this release of Media Foundation, the default proxy locator does not support RTSP."
      },
      {
        "in_out": "_In_",
        "type": "IPropertyStore*",
        "name": "pProxyConfig",
        "description": "Pointer to the IPropertyStore interface of a property store that contains the proxy configuration in the MFNETSOURCE_PROXYSETTINGS property."
      },
      {
        "in_out": "_Out_",
        "type": "IMFNetProxyLocator**",
        "name": "ppProxyLocator",
        "description": "Receives a pointer to the IMFNetProxyLocator interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateRemoteDesktopPlugin",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFRemoteDesktopPlugin**",
        "name": "ppPlugin",
        "description": "Receives a pointer to the IMFRemoteDesktopPlugin interface of the plug-in object. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Initially the sample does not contain any media buffers. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSample",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFSample**",
        "name": "ppIMFSample",
        "description": "Receives a pointer to the IMFSample interface of the media sample. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an instance of the sample copier transform.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The sample copier is a Media Foundation transform (MFT) that copies data from input samples to output samples without modifying the data. The following data is copied from the sample: This MFT is useful in the following situation: The following diagram shows this situation with a media source and a media sink.  In order for the media sink to receive data from the media source, the data must be copied into the media samples owned by the media sink. The sample copier can be used for this purpose. A specific example of such a media sink is the  Enhanced Video Renderer (EVR). The EVR allocates samples that contain Direct3D surface buffers, so it cannot receive video samples directly from a media source. Starting in Windows 7, the topology loader automatically handles this case by inserting the sample copier between the media source and the EVR. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSampleCopierMFT",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFTransform**",
        "name": "ppCopierMFT",
        "description": "Receives a pointer to the IMFTransform interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To create the sample grabber sink, call IMFActivate::ActivateObject on the pointer received in the ppIActivate parameter. Before calling ActivateObject, you can configure the sample grabber by setting any of the following attributes on the ppIActivate pointer: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSampleGrabberSinkActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pIMFMediaType",
        "description": "Pointer to the IMFMediaType interface, defining the media type for the sample grabber's input stream."
      },
      {
        "in_out": "",
        "type": "IMFSampleGrabberSinkCallback*",
        "name": "pIMFSampleGrabberSinkCallback",
        "description": "Pointer to the IMFSampleGrabberSinkCallback interface of a callback object. The caller must implement this interface."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppIActivate",
        "description": "Receives a pointer to the IMFActivate interface. Use this interface to complete the creation of the sample grabber. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]",
    "library": "",
    "min_server": "None supported",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If the function succeeds, ppSesnorGroup will point to a valid IMFSensorGroup object.  The caller must release this interface. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSensorGroup",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "LPCWSTR",
        "name": "SensorGroupSymbolicLink",
        "description": "The symbolic link for the new IMFSensorGroup. This name can be obtained through device enumeration APIs such as This is the symbolic link name obtained through either the standard Win32 device enumeration, such as SetupDiGetClassDevs or MFEnumDeviceSources or by getting the  Id property of the DeviceInformation class."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSensorGroup**",
        "name": "ppSensorGroup",
        "description": "The symbolic link for the new IMFSensorGroup."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[Some information relates to pre-released product which may be substantially modified before it's commercially released. Microsoft makes no warranties, express or implied, with respect to the information provided here.]",
    "library": "",
    "min_server": "None supported",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSensorStream",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "StreamId",
        "description": "The identifier for the created stream. This is the same as setting the MF_DEVICESTREAM_STREAM_ID attribute. This value is used if pAttributes is null."
      },
      {
        "in_out": "_In_opt_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "The attribute store for the created stream."
      },
      {
        "in_out": "_In_",
        "type": "IMFCollection*",
        "name": "pMediaTypeCollection",
        "description": "The collection of IMFMediaType objects specifying the media types supported by the stream."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSensorStream**",
        "name": "ppStream",
        "description": "The created stream interface."
      }
    ],
    "min_client": "Windows 10, version 1703 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a PROPVARIANT that can be used to seek within a sequencer source presentation.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The PROPVARIANT returned in pvarSegmentOffset can be used for the pvarStartPosition parameter in the IMFMediaSession::Start method. Use the time format GUID MF_TIME_FORMAT_SEGMENT_OFFSET. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSequencerSegmentOffset",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MFSequencerElementId",
        "name": "dwId",
        "description": "Sequencer element identifier. This value specifies the segment in which to begin playback. The element identifier is returned in the IMFSequencerSource::AppendTopology method."
      },
      {
        "in_out": "_In_",
        "type": "MFTIME",
        "name": "hnsOffset",
        "description": "Starting position within the segment, in 100-nanosecond units."
      },
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "pvarSegmentOffset",
        "description": "Pointer to a PROPVARIANT. The method fills in the PROPVARIANT with the information needed for performing a seek operation. The caller must free the PROPVARIANT by calling PropVariantClear."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSequencerSource",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "pReserved",
        "description": "Reserved. Must be NULL."
      },
      {
        "in_out": "",
        "type": "IMFSequencerSource**",
        "name": "ppSequencerSource",
        "description": "Receives a pointer to the IMFSequencerSource interface of the sequencer source. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The media-type handler created by this function supports one media type at a time. Set the media type by calling IMFMediaTypeHandler::SetCurrentMediaType. After the type is set, IMFMediaTypeHandler::IsMediaTypeSupported always checks against that type. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSimpleTypeHandler",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFMediaTypeHandler**",
        "name": "ppHandler",
        "description": "Receives a pointer to the IMFMediaTypeHandler interface of the media-type handler. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates the sink writer from a media sink.",
    "library": "Mfreadwrite.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfreadwrite.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Call CoInitialize(Ex) and MFStartup before calling this function. When you are done using the media sink, call the media sink's IMFMediaSink::Shutdown method. (The sink writer does not shut down the media sink.) Release the sink writer before calling Shutdown on the media sink. This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSinkWriterFromMediaSink",
    "is_callback": 0,
    "dll": "Mfreadwrite.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaSink*",
        "name": "pMediaSink",
        "description": "Pointer to the IMFMediaSink interface of a media sink."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface. You can use this parameter to configure the sink writer. For more information, see Sink Writer Attributes. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSinkWriter**",
        "name": "ppSinkWriter",
        "description": "Receives a pointer to the IMFSinkWriter interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates the sink writer from a URL or byte stream.",
    "library": "Mfreadwrite.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfreadwrite.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "Call CoInitialize(Ex) and MFStartup before calling this function. The first three parameters to this function can be NULL; however, only certain combinations are valid:   The pAttributes parameter is required in the first case and optional in the others. This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSinkWriterFromURL",
    "is_callback": 0,
    "dll": "Mfreadwrite.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszOutputURL",
        "description": "A null-terminated string that contains the URL of the output file. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pByteStream",
        "description": "Pointer to the IMFByteStream interface of a byte stream. This parameter can be NULL. If this parameter is a valid pointer, the sink writer writes to the provided byte stream. (The byte stream must be writable.) Otherwise, if pByteStream is NULL, the sink writer creates a new file named pwszOutputURL."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface. You can use this parameter to configure the sink writer. For more information, see Sink Writer Attributes. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSinkWriter**",
        "name": "ppSinkWriter",
        "description": "Receives a pointer to the IMFSinkWriter interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Creates the source reader from a byte stream.",
    "library": "Mfreadwrite.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfreadwrite.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Call CoInitialize(Ex) and MFStartup before calling this function. Internally, the source reader calls the IMFSourceResolver::CreateObjectFromByteStream method to create a media source from the byte stream. Therefore, a byte-stream handler must be registered for the byte stream. For more information about byte-stream handlers, see Scheme Handlers and Byte-Stream Handlers. This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSourceReaderFromByteStream",
    "is_callback": 0,
    "dll": "Mfreadwrite.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pByteStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream. This byte stream will provide the source data for the source reader."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface. You can use this parameter to configure the source reader. For more information, see Source Reader Attributes. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSourceReader**",
        "name": "ppSourceReader",
        "description": "Receives a pointer to the IMFSourceReader interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Creates the source reader from a media source.",
    "library": "Mfreadwrite.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfreadwrite.h",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Call CoInitialize(Ex) and MFStartup before calling this function. By default, when the application releases the source reader, the source reader shuts down the media source by calling IMFMediaSource::Shutdown on the media source. At that point, the application can no longer use the media source. To change this default behavior, set the MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN attribute in the pAttributes parameter. If this attribute is TRUE, the application is responsible for  shutting down the media source. When using the Source Reader, do not call any of the following methods on the media source: This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSourceReaderFromMediaSource",
    "is_callback": 0,
    "dll": "Mfreadwrite.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaSource*",
        "name": "pMediaSource",
        "description": "A pointer to the IMFMediaSource interface of a media source."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface. You can use this parameter to configure the source reader. For more information, see Source Reader Attributes. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSourceReader**",
        "name": "ppSourceReader",
        "description": "Receives a pointer to the IMFSourceReader interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Creates the source reader from a URL.",
    "library": "Mfreadwrite.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfreadwrite.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Call CoInitialize(Ex) and MFStartup before calling this function. Internally, the source reader calls the IMFSourceResolver::CreateObjectFromURL method to create a media source from the URL. This function is available on Windows Vista if Platform Update Supplement for Windows Vista is installed. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSourceReaderFromURL",
    "is_callback": 0,
    "dll": "Mfreadwrite.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszURL",
        "description": "The URL  of a media file to open."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface. You can use this parameter to configure the source reader. For more information, see Source Reader Attributes. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSourceReader**",
        "name": "ppSourceReader",
        "description": "Receives a pointer to the IMFSourceReader interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7, Windows Vista and Platform Update Supplement for Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Creates the source resolver, which is used to create a media source from a URL or byte stream.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSourceResolver",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFSourceResolver**",
        "name": "ppISourceResolver",
        "description": "Receives a pointer to the source resolver's IMFSourceResolver interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateStandardQualityManager",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFQualityManager**",
        "name": "ppQualityManager",
        "description": "Receives a pointer to the quality manager's IMFQualityManager interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a stream descriptor.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If you are writing a custom media source, you can use this function to create stream descriptors for the source. This function automatically creates the stream descriptor media type handler and initializes it with the list of types given in apMediaTypes. The function does not set the current media type on the handler, however. To set the type, call IMFMediaTypeHandler::SetCurrentMediaType. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateStreamDescriptor",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwStreamIdentifier",
        "description": "Stream identifier."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cMediaTypes",
        "description": "Number of elements in the apMediaTypes array."
      },
      {
        "in_out": "",
        "type": "IMFMediaType**",
        "name": "apMediaTypes",
        "description": "Pointer to an array of IMFMediaType interface pointers. These pointers are used to initialize the media type handler for the stream descriptor."
      },
      {
        "in_out": "",
        "type": "IMFStreamDescriptor**",
        "name": "ppDescriptor",
        "description": "Receives a pointer to the IMFStreamDescriptor interface of the new stream descriptor. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Returns an IStream pointer that wraps a Microsoft Media Foundation byte stream.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function enables an application to pass a Media Foundation byte stream to an API that takes an IStream pointer. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateStreamOnMFByteStream",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pByteStream",
        "description": "A pointer to the IMFByteStream interface of the Media Foundation byte stream."
      },
      {
        "in_out": "_Out_",
        "type": "IStream**",
        "name": "ppStream",
        "description": "Receives a pointer to the IStream interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an IRandomAccessStream object that wraps a Microsoft Media Foundation byte stream.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The returned byte stream object exposes the IMFGetService interface. To get the original IMFByteStream pointer, call IMFGetService::GetService using the service identifier MF_WRAPPED_OBJECT. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateStreamOnMFByteStreamEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pByteStream",
        "description": "A pointer to the IMFByteStream interface of the Media Foundation byte stream."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the interface being requested."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppv",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateSystemTimeSource",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFPresentationTimeSource**",
        "name": "ppSystemTimeSource",
        "description": "Receives a pointer to the object's IMFPresentationTimeSource interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a byte stream that is backed by a temporary local file.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a file in the system temporary folder, and then returns a byte stream object for that file.       The full path name of the file is storted in the MF_BYTESTREAM_ORIGIN_NAME attribute. The file is created with the FILE_FLAG_DELETE_ON_CLOSE flag, and is deleted after the byte stream is released. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTempFile",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "MF_FILE_ACCESSMODE",
        "name": "AccessMode",
        "description": "The requested access mode, specified as a member of the MF_FILE_ACCESSMODE enumeration."
      },
      {
        "in_out": "",
        "type": "MF_FILE_OPENMODE",
        "name": "OpenMode",
        "description": "The behavior of the function if the file already exists or does not exist, specified as a member of the MF_FILE_OPENMODE enumeration."
      },
      {
        "in_out": "",
        "type": "MF_FILE_FLAGS",
        "name": "fFlags",
        "description": "Bitwise OR of values from the MF_FILE_FLAGS enumeration."
      },
      {
        "in_out": "",
        "type": "IMFByteStream**",
        "name": "ppIByteStream",
        "description": "Receives a pointer to the IMFByteStream interface of the byte stream. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTopoLoader",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFTopoLoader**",
        "name": "ppObj",
        "description": "Receives a pointer to the IMFTopoLoader interface of the topology loader. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTopology",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFTopology**",
        "name": "ppTopo",
        "description": "Receives a pointer to the IMFTopology interface of the topology object. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a topology node.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTopologyNode",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MF_TOPOLOGY_TYPE",
        "name": "NodeType",
        "description": "The type of node to create, specified as a member of the MF_TOPOLOGY_TYPE enumeration."
      },
      {
        "in_out": "_Out_",
        "type": "IMFTopologyNode**",
        "name": "ppNode",
        "description": "Receives a pointer to the node's IMFTopologyNode interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an IMFTrackedSample object that tracks the reference counts on a video media sample.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTrackedSample",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFTrackedSample**",
        "name": "ppMFSample",
        "description": "Receives a pointer to the IMFTrackedSample interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an empty transcode profile object.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The MFCreateTranscodeProfile function creates an empty transcode profile. You must configure the transcode profile setting attributes that define the media types and the container properties. Use the following methods to configure the profile: For example code that uses this function, see the following topics: The following example creates a transcode profile for Windows Media Audio (WMA). ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTranscodeProfile",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFTranscodeProfile**",
        "name": "ppTranscodeProfile",
        "description": "Receives a pointer to the IMFTranscodeProfile interface of the transcode profile object. Caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates the transcode sink activation object.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTranscodeSinkActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "_Out_**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. This interface is used to create the file sink instance from the activation object. Before doing so, query the returned pointer for the IMFTranscodeSinkInfoProvider interface and use that interface to initialize the object."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a partial transcode topology.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "For example code that uses this function, see the following topics: ",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTranscodeTopology",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaSource*",
        "name": "pSrc",
        "description": "A pointer to a media source that encapsulates the source file to be transcoded. The media source object exposes the IMFMediaSource interface and can be created by using the source resolver. For more information, see Using the Source Resolver."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszOutputFilePath",
        "description": "A pointer to a null-terminated string that contains the name and path of the output file to be generated."
      },
      {
        "in_out": "_In_",
        "type": "IMFTranscodeProfile*",
        "name": "pProfile",
        "description": "A pointer to the transcode profile that contains the configuration settings for the audio stream, the video stream, and the container to which the file is written. The transcode profile object exposes the IMFTranscodeProfile interface and must be created by calling the MFCreateTranscodeProfile function. After the object has been created the caller must provide the configuration settings by calling appropriate the IMFTranscodeProfile methods."
      },
      {
        "in_out": "_Out_",
        "type": "IMFTopology**",
        "name": "ppTranscodeTopo",
        "description": "Receives a pointer to the IMFTopology interface of the transcode topology object. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a topology for transcoding to a byte stream.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a partial topology that contains the media source, the encoder, and the media sink. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTranscodeTopologyFromByteStream",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFMediaSource*",
        "name": "pSrc",
        "description": "A pointer to the IMFMediaSource interface of a media source. The media source provides that source content for transcoding."
      },
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pOutputStream",
        "description": "A pointer to the IMFByteStream interface of a byte stream. The transcoded output will be written to this byte stream."
      },
      {
        "in_out": "_In_",
        "type": "IMFTranscodeProfile*",
        "name": "pProfile",
        "description": "A pointer to the IMFTranscodeProfile interface of a transcoding profile."
      },
      {
        "in_out": "_Out_",
        "type": "IMFTopology**",
        "name": "ppTranscodeTopo",
        "description": "Receives a pointer to the IMFTopology interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a generic activation object for Media Foundation transforms (MFTs).",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mftransform.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Most applications will not use this function; it is used internally by the MFTEnumEx function. An activation object is a helper object that creates another object, somewhat similar to a class factory. The MFCreateTransformActivate function creates an activation object for MFTs. Before this activation object can create an MFT, the caller must initialize the activation object by setting one or more attributes on it.  For more information about activation objects, see Activation Objects. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateTransformActivate",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface.           The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Instead, Applications should call UrlCreateFromPath.]",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function has no associated import library. To call this function, you must use the LoadLibrary and GetProcAddress functions to dynamically link to Mfplat.dll. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateURLFromPath",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszFilePath",
        "description": "A null-terminated string that contains the path. The maximum length of the string is INTERNET_MAX_URL_LENGTH."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "ppwszFileURL",
        "description": "Receives a null-terminated string that contains the URL. The caller must free the string by calling CoTaskMemFree."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Instead of using the MFVIDEOFORMAT structure to initialize a video media type, you can call MFCreateMediaType and set the media type attributes directly. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const MFVIDEOFORMAT*",
        "name": "pVideoFormat",
        "description": "Pointer to an MFVIDEOFORMAT structure that describes the video format."
      },
      {
        "in_out": "_Out_",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Receives a pointer to the IMFVideoMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "This function is not implemented.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns E_FAIL. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaTypeFromBitMapInfoHeader",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "const",
        "type": "BITMAPINFOHEADER*",
        "name": "pbmihBitMapInfoHeader",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioX",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioY",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "MFVideoInterlaceMode",
        "name": "InterlaceMode",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "VideoFlags",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "qwFramesPerSecondNumerator",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "qwFramesPerSecondDenominator",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMaxBitRate",
        "description": "Reserved."
      },
      {
        "in_out": "",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Reserved."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "Creates a video media type from a BITMAPINFOHEADER structure.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const BITMAPINFOHEADER*",
        "name": "pbmihBitMapInfoHeader",
        "description": "A pointer to the BITMAPINFOHEADER structure to convert."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cbBitMapInfoHeader",
        "description": "The size of the BITMAPINFOHEADER structure in bytes, including the size of any palette entries or color masks that follow the structure."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioX",
        "description": "The X dimension of the pixel aspect ratio."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioY",
        "description": "The Y dimension of the pixel aspect ratio."
      },
      {
        "in_out": "",
        "type": "MFVideoInterlaceMode",
        "name": "InterlaceMode",
        "description": "A member of the MFVideoInterlaceMode enumeration, specifying how the video is interlaced."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "VideoFlags",
        "description": "A bitwise OR of flags from the MFVideoFlags enumeration."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFramesPerSecondNumerator",
        "description": "The numerator of the            frame rate in frames per second."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFramesPerSecondDenominator",
        "description": "The denominator of the frame rate in frames per second"
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwMaxBitRate",
        "description": "The approximate data rate of the video stream, in bits per second. If the rate is unknown, set this parameter to zero."
      },
      {
        "in_out": "_Out_",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Receives a pointer to the            IMFVideoMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a partial video media type with a specified subtype.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates a media type and sets the major type equal to MFMediaType_Video and the subtype equal to the value specified in pAMSubtype. You can get the same result with the following steps: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaTypeFromSubtype",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pAMSubtype",
        "description": "Pointer to a GUID that specifies the subtype. See Video Subtype GUIDs."
      },
      {
        "in_out": "_Out_",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Receives a pointer to the IMFVideoMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Creates a media type from a KS_VIDEOINFOHEADER structure.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaTypeFromVideoInfoHeader",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "const",
        "type": "KS_VIDEOINFOHEADER*",
        "name": "pVideoInfoHeader",
        "description": "Pointer to the KS_VIDEOINFOHEADER structure to convert. (This structure is identical to the DirectShow VIDEOINFOHEADER structure.)"
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbVideoInfoHeader",
        "description": "Size of the KS_VIDEOINFOHEADER structure in bytes."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioX",
        "description": "The X dimension of the pixel aspect ratio. The pixel aspect ratio is dwPixelAspectRatioX:dwPixelAspectRatioY."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwPixelAspectRatioY",
        "description": "The Y dimension of the pixel aspect ratio."
      },
      {
        "in_out": "",
        "type": "MFVideoInterlaceMode",
        "name": "InterlaceMode",
        "description": "Member of the MFVideoInterlaceMode enumeration that specifies how the video is interlaced."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "VideoFlags",
        "description": "Bitwise OR of flags from the MFVideoFlags enumeration."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the KS_VIDEOINFOHEADER structure."
      },
      {
        "in_out": "",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Receives a pointer to the IMFVideoMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Creates a media type from a KS_VIDEOINFOHEADER2 structure.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMediaTypeFromVideoInfoHeader2",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "const",
        "type": "KS_VIDEOINFOHEADER2*",
        "name": "pVideoInfoHeader",
        "description": "Pointer to the KS_VIDEOINFOHEADER2 structure to convert. (This structure is identical to the DirectShow VIDEOINFOHEADER2 structure.)"
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbVideoInfoHeader",
        "description": "Size of the KS_VIDEOINFOHEADER2 structure in bytes."
      },
      {
        "in_out": "",
        "type": "QWORD",
        "name": "AdditionalVideoFlags",
        "description": "Bitwise OR of flags from the MFVideoFlags enumeration. Use this parameter for format information that is not contained in the KS_VIDEOINFOHEADER2 structure."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the KS_VIDEOINFOHEADER2 structure."
      },
      {
        "in_out": "",
        "type": "IMFVideoMediaType**",
        "name": "ppIVideoMediaType",
        "description": "Receives a pointer to the IMFVideoMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMixer",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "pOwner",
        "description": "Pointer to the owner of this object. If the object is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riidDevice",
        "description": "Interface identifier (IID) of the video device interface that will be used for processing the video. Currently the only supported value is IID_IDirect3DDevice9."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "IID of the requested interface on the video mixer.  The video mixer exposes the IMFTransform interface."
      },
      {
        "in_out": "",
        "type": "void**",
        "name": "ppVideoMixer",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoMixerAndPresenter",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pMixerOwner",
        "description": "Pointer to the owner of the video mixer. If the mixer is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pPresenterOwner",
        "description": "Pointer to the owner of the video presenter. If the presenter is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riidMixer",
        "description": "Interface identifier (IID) of the requested interface on the video mixer. The video mixer exposes the IMFTransform interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvVideoMixer",
        "description": "Receives a pointer to the requested interface on the video mixer. The caller must release the interface."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riidPresenter",
        "description": "IID of the requested interface on the video presenter. The video presenter exposes the IMFVideoPresenter interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvVideoPresenter",
        "description": "Receives a pointer to the requested interface on the video presenter. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoPresenter",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pOwner",
        "description": "Pointer to the owner of the object. If the object is aggregated, pass a pointer to the aggregating object's IUnknown interface. Otherwise, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riidDevice",
        "description": "Interface identifier (IID) of the video device interface that will be used for processing the video. Currently the only supported value is IID_IDirect3DDevice9."
      },
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "IID of the requested interface on the video presenter. The video presenter exposes the IMFVideoPresenter interface."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvVideoPresenter",
        "description": "Receives a pointer to the requested interface on the video presenter. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function creates the Media Foundation version of the EVR. To create the DirectShow EVR filter, call CoCreateInstance with the class identifier CLSID_EnhancedVideoRenderer. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoRenderer",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riidRenderer",
        "description": "Interface identifier (IID) of the requested interface on the EVR."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppVideoRenderer",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "To create the EVR, call IMFActivate::ActivateObject on the retrieved IMFActivate pointer. (If you are using the Media Session, the Media Session automatically calls ActivateObject when you queue the topology.) To configure the EVR, set any of the following attributes on the IMFActivate object before calling ActivateObject.  When IMFActivate::ActivateObject is called, the activation objects sets the video window on the EVR by calling IMFVideoDisplayControl::SetVideoPosition. Passing NULL for the hwndVideo parameter is not an error, but no video will render unless the EVR has a valid video window. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoRendererActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndVideo",
        "description": "Handle to the window where the video will be displayed."
      },
      {
        "in_out": "_Out_",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. Use this interface to create the EVR. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an object that allocates video samples.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoSampleAllocator",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The identifier of the interface to retrieve. Specify one of the following values:  ValueMeaning  IID_IUnknown   Retrieve an IUnknown pointer.   IID_IMFVideoSampleAllocator   Retrieve an IMFVideoSampleAllocator pointer.   IID_IMFVideoSampleAllocatorCallback   Retrieve an IMFVideoSampleAllocatorCallback pointer."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppSampleAllocator",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an object that allocates video samples that are compatible with Microsoft DirectX Graphics Infrastructure (DXGI).",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function creates an allocator for DXGI video surfaces. The buffers created by this allocator expose the IMFDXGIBuffer interface. To create an allocator for Microsoft Direct3D 9 video surfaces, call MFCreateVideoSampleAllocator. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoSampleAllocatorEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "The identifier of the interface to retrieve. Specify one of the following values.  ValueMeaning  IID_IUnknown   Retrieve an IUnknown pointer.   IID_IMFVideoSampleAllocator   Retrieve an IMFVideoSampleAllocator pointer.   IID_IMFVideoSampleAllocatorEx   Retrieve an IMFVideoSampleAllocatorEx pointer.   IID_IMFVideoSampleAllocatorCallback   Retrieve an IMFVideoSampleAllocatorCallback pointer."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppSampleAllocator",
        "description": "Receives a pointer to the requested interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a media sample that manages a Direct3D surface.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Evr.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The media sample created by this function exposes the following interfaces in addition to IMFSample: If pUnkSurface is non-NULL, the sample contains a single media buffer, which holds a pointer to the Direct3D surface. To get the Direct3D surface from the media buffer, call IMFGetService::GetService on the buffer, using the service identifier MR_BUFFER_SERVICE. The media buffer does not implement IMF2DBuffer, nor does it implement the IMFMediaBuffer::Lock and Unlock methods. Alternatively, you can set pUnkSurface to NULL, and later add a DirectX surface buffer to the sample by calling IMFSample::AddBuffer. To create a DirectX surface buffer, call MFCreateDXSurfaceBuffer. The following example is taken from the EVRPresenter Sample. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateVideoSampleFromSurface",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pUnkSurface",
        "description": "A pointer to the IUnknown interface of the Direct3D surface. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSample**",
        "name": "ppSample",
        "description": "Receives a pointer to the sample's IMFSample interface.           The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If the wFormatTag member of the returned structure is WAVE_FORMAT_EXTENSIBLE, you can cast the pointer to a WAVEFORMATEXTENSIBLE structure. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateWaveFormatExFromMFMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type."
      },
      {
        "in_out": "",
        "type": "WAVEFORMATEX**",
        "name": "ppWF",
        "description": "Receives a pointer to the WAVEFORMATEX structure. The caller must release the memory allocated for the structure by calling CoTaskMemFree."
      },
      {
        "in_out": "",
        "type": "UINT32*",
        "name": "pcbSize",
        "description": "Receives the size of the WAVEFORMATEX structure."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "Flags",
        "description": "Contains a flag from the MFWaveFormatExConvertFlags enumeration."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an WAVE archive sink.  The WAVE archive sink takes audio and writes it to an .wav file.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateWAVEMediaSink",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFByteStream*",
        "name": "pTargetByteStream",
        "description": "Pointer to the byte stream that will be used to write the .wav file."
      },
      {
        "in_out": "_In_",
        "type": "IMFMediaType*",
        "name": "pAudioMediaType",
        "description": "Pointer to the audio media type."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaSink**",
        "name": "ppMediaSink",
        "description": "Receives a pointer to the IMFMediaSink interface.  The caller must release this interface."
      }
    ],
    "min_client": "Windows 8.1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a media buffer object that manages a Windows Imaging Component (WIC) bitmap.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateWICBitmapBuffer",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFIID",
        "name": "riid",
        "description": "Set this parameter to __uuidof(IWICBitmap)."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "punkSurface",
        "description": "A pointer to the IUnknown interface of the bitmap surface. The bitmap surface must be a WIC bitmap that exposes the IWICBitmap interface."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaBuffer**",
        "name": "ppBuffer",
        "description": "Receives a pointer to the IMFMediaBuffer interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an activation object that can be used to create a Windows Media Audio (WMA) encoder.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateWMAEncoderActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMediaType",
        "description": "A pointer to the IMFMediaType interface. This parameter specifies the encoded output format."
      },
      {
        "in_out": "",
        "type": "IPropertyStore*",
        "name": "pEncodingConfigurationProperties",
        "description": "A pointer to the IPropertyStore interface of a property store that contains encoding parameters. Encoding parameters for the WMV encoder are defined in the header file wmcodecdsp.h. If you have an ASF ContentInfo object that contains an ASF profile object with all the streams for the output file, you can get the property store by calling IMFASFContentInfo::GetEncodingConfigurationPropertyStore."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. Use this interface to create the encoder. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates an activation object that can be used to create a Windows Media Video (WMV) encoder.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Wmcontainer.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFCreateWMVEncoderActivate",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMediaType",
        "description": "A pointer to the IMFMediaType interface. This parameter specifies the encoded output format."
      },
      {
        "in_out": "",
        "type": "IPropertyStore*",
        "name": "pEncodingConfigurationProperties",
        "description": "A pointer to the IPropertyStore interface of a property store that contains encoding parameters. Encoding parameters for the WMV encoder are defined in the header file wmcodecdsp.h. If you have an ASF ContentInfo object that contains an ASF profile object with all the streams for the output file, you can get the property store by calling IMFASFContentInfo::GetEncodingConfigurationPropertyStore."
      },
      {
        "in_out": "",
        "type": "IMFActivate**",
        "name": "ppActivate",
        "description": "Receives a pointer to the IMFActivate interface. Use this interface to create the encoder. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfobjects.h (include Mfidl.h)",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use this function to deserialize an attribute store that was serialized with the MFSerializeAttributesToStream function. If dwOptions contains the MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF flag, the function deserializes IUnknown pointers from the stream, as follows: This function deletes any attributes that were previously stored in pAttr. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFDeserializeAttributesFromStream",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFAttributes*",
        "name": "pAttr",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwOptions",
        "description": "Bitwise OR of zero or more flags from the MF_ATTRIBUTE_SERIALIZE_OPTIONS enumeration."
      },
      {
        "in_out": "",
        "type": "IStream*",
        "name": "pStm",
        "description": "Pointer to the IStream interface of the stream from which to read the attributes."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFDeserializePresentationDescriptor",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbData",
        "description": "Size of the pbData array, in bytes."
      },
      {
        "in_out": "",
        "type": "BYTE*",
        "name": "pbData",
        "description": "Pointer to an array of bytes that contains the serialized presentation descriptor."
      },
      {
        "in_out": "",
        "type": "IMFPresentationDescriptor**",
        "name": "ppPD",
        "description": "Receives a pointer to the IMFPresentationDescriptor interface of the presentation descriptor. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Call this function when the MFBeginCreateFile function completes asynchronously. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFEndCreateFile",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the Invoke method."
      },
      {
        "in_out": "_Out_",
        "type": "IMFByteStream**",
        "name": "ppFile",
        "description": "Receives a pointer to the IMFByteStream interface of the byte stream. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Call this function when the MFBeginRegisterWorkQueueWithMMCSS function completes asynchronously. To unregister the work queue from the MMCSS class, call MFBeginUnregisterWorkQueueWithMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFEndRegisterWorkQueueWithMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the IMFAsyncCallback::Invoke method."
      },
      {
        "in_out": "_In_",
        "type": "DWORD*",
        "name": "pdwTaskId",
        "description": "The unique task identifier."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Call this function when the MFBeginUnregisterWorkQueueWithMMCSS function completes asynchronously. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFEndUnregisterWorkQueueWithMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "Pointer to the IMFAsyncResult interface. Pass in the same pointer that your callback object received in the IMFAsyncCallback::Invoke method."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates a list of audio or video capture devices.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Each returned IMFActivate pointer represents a capture device, and can be used to create a media source for that device. You can also use the IMFActivate pointer to query for attributes that describe the device. The following attributes might be set:  To create a media source from an IMFActivate pointer, call the IMFActivate::ActivateObject method. The following example enumerates the video capture devices on the system and creates a media source for the first device on the list. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFEnumDeviceSources",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to an attribute store that contains search criteria. To create the attribute store, call MFCreateAttributes. Set one or more of the following attributes on the attribute store:  ValueMeaning  MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE   Specifies whether to enumerate audio or video devices. (Required.)   MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE   For audio capture devices, specifies the device role. (Optional.)   MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY   For video capture devices, specifies the device category. (Optional.)"
      },
      {
        "in_out": "_Out_",
        "type": "IMFActivate***",
        "name": "pppSourceActivate",
        "description": "Receives an array of IMFActivate interface pointers. Each pointer represents an activation object for a media source. The function allocates the memory for the array. The caller must release the pointers in the array and call CoTaskMemFree to free the memory for the array."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcSourceActivate",
        "description": "Receives the number of elements in the pppSourceActivate array. If no capture devices match the search criteria, this parameter receives the value 0."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Converts a video frame rate into a frame duration.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is useful for calculating time stamps on a sample, given the frame rate. Also, average time per frame is used in the older VIDEOINFOHEADER and VIDEOINFOHEADER2 format structures. This function provides a standard conversion so that all components in the pipeline can use consistent values, if they need to translate between the older format structures and the media type attributes used in Media Foundation. For certain common frame rates, the function gets the frame duration from a look-up table:  Most video content uses one of the frame rates listed here.       For other frame rates, the function calculates the duration. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFFrameRateToAverageTimePerFrame",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unNumerator",
        "description": "The numerator of the frame rate."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unDenominator",
        "description": "The denominator of the frame rate."
      },
      {
        "in_out": "_Out_",
        "type": "UINT64*",
        "name": "punAverageTimePerFrame",
        "description": "Receives the average duration of a video frame, in 100-nanosecond units."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets an attribute whose value is two UINT32 values packed into a UINT64.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfobjects.h (include Mfidl.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Internally, this function calls IMFAttributes::GetUINT64 to get the UINT64 value, and Unpack2UINT32AsUINT64 to unpack the two 32-bit values. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttribute2UINT32asUINT64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "A GUID that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punHigh32",
        "description": "Receives the high-order 32 bits."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punLow32",
        "description": "Receives the low-order 32 bits."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns a double value. ",
    "remarks": "This helper function queries the attribute store for the attribute specified by guidKey. If the attribute is not present or does not have type double, the function returns fDefault. This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call IMFAttributes::GetDouble and check for MF_E_ATTRIBUTENOTFOUND. ",
    "return_type": "double",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeDouble",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "GUID that identifies which value to retrieve."
      },
      {
        "in_out": "_In_",
        "type": "double",
        "name": "fDefault",
        "description": "Default value to return if the attribute store does not contain the specified attribute."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Some attributes specify a ratio as a packed UINT64 value. Use this function to get the numerator and denominator as separate 32-bit values. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeRatio",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "GUID that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pnNumerator",
        "description": "Receives the numerator of the ratio."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punDenominator",
        "description": "Receives the denominator of the ratio."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The function skips any attributes with IUnknown pointer values (MF_ATTRIBUTE_IUNKNOWN); they are not stored in the array. To convert the byte array back into an attribute store, call MFInitAttributesFromBlob. To write an attribute store to a stream, call the MFSerializeAttributesToStream function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributesAsBlob",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_Out_",
        "type": "UINT8*",
        "name": "pBuf",
        "description": "Pointer to an array that receives the attribute data."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbBufSize",
        "description": "Size of the pBuf array, in bytes. To get the required size of the buffer, call MFGetAttributesAsBlobSize."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use this function to find the size of the array that is needed for the MFGetAttributesAsBlob function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributesAsBlobSize",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcbBufSize",
        "description": "Receives the required size of the array, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "This function can return one of these values. ",
    "remarks": "Some attributes specify a size as a packed UINT64 value. Use this function to get the numerator and denominator as separate 32-bit values. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeSize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "GUID that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_UINT64."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punWidth",
        "description": "Receives the width."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "punHeight",
        "description": "Receives the height."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Gets a string value from an attribute store.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is a wrapper for the IMFAttributes::GetAllocatedString method. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeString",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to the IMFAttributes interface."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "A GUID that identifies which value to retrieve. The attribute type must be MF_ATTRIBUTE_STRING."
      },
      {
        "in_out": "_Out_",
        "type": "PWSTR*",
        "name": "ppsz",
        "description": "If the key is found and the value is a string type, this parameter receives a copy of the string. The caller must free the memory for the string by calling CoTaskMemFree."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns a UINT32 value. ",
    "remarks": "This helper function queries the attribute store for the UINT32 value specified by guidKey. If the value is not present or does not have type UINT32, the function returns unDefault. This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call IMFAttributes::GetUINT32 and check for MF_E_ATTRIBUTENOTFOUND. ",
    "return_type": "UINT32",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeUINT32",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "GUID that identifies which value to retrieve."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unDefault",
        "description": "Default value to return if the attribute store does not contain the specified attribute."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns a UINT64 value. ",
    "remarks": "This helper function queries the attribute store for the UINT64 value specified by guidKey. If the value is not present, the function returns unDefault. This function is convenient because it never returns a failure code. However, if the attribute in question does not have a meaningful default value, you should call IMFAttributes::GetUINT64 and check for MF_E_ATTRIBUTENOTFOUND. ",
    "return_type": "UINT64",
    "category": "Microsoft Media Foundation",
    "name": "MFGetAttributeUINT64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "GUID that identifies which value to retrieve."
      },
      {
        "in_out": "_In_",
        "type": "UINT64",
        "name": "unDefault",
        "description": "Default value to return if the attribute store does not contain the specified attribute."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the class identifier for a content protection system.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The class identifier can be used to create the input trust authority (ITA) for the content protection system. Call CoCreateInstance or IMFPMPHost::CreateObjectByCLSID to get an IMFTrustedInput  pointer. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetContentProtectionSystemCLSID",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidProtectionSystemID",
        "description": "The GUID that identifies the content protection system."
      },
      {
        "in_out": "_Out_",
        "type": "CLSID*",
        "name": "pclsid",
        "description": "Receives the class identifier to the content protection system."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Gets the local system ID.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetLocalId",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "verifier",
        "description": "Application-specific verifier value."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "size",
        "description": "Length in bytes of verifier."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR*",
        "name": "id",
        "description": "Returned ID string.  This value must be freed by the caller by calling CoTaskMemFree."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the merit value of a hardware codec.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function fails if the MFT does not represent a hardware device with a valid Output Protection Manager (OPM) certificate. ",
    "return_type": "HRESULT STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFGetMFTMerit",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "IUnknown*",
        "name": "pMFT",
        "description": "A pointer to the IUnknown interface of the Media Foundation transform (MFT) that represents the codec."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cbVerifier",
        "description": "The size, in bytes, of the verifier array."
      },
      {
        "in_out": "_In_",
        "type": "const BYTE*",
        "name": "verifier",
        "description": "The address of a buffer that contains one of the following:  The class identifier (CLSID) of the MFT. A null-terminated wide-character string that contains the symbol link for the underlying hardware device. Include the size of the terminating null in the value of cbVerifier."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "merit",
        "description": "Receives the merit value."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is equivalent to the MFCalculateImageSize function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetPlaneSize",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "format",
        "description": "FOURCC code or D3DFORMAT value that specifies the video format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWidth",
        "description": "Width of the image, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeight",
        "description": "Height of the image, in pixels."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwPlaneSize",
        "description": "Receives the size of one frame, in bytes. If the format is compressed or is not recognized, this value is zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Gets a pointer to the Microsoft Media Foundation plug-in manager.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetPluginControl",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFPluginControl**",
        "name": "ppPluginControl",
        "description": "Receives a pointer to the IMFPluginControl interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Queries an object for a specified service interface.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetService",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "punkObject",
        "description": "A pointer to the IUnknown interface of the object to query."
      },
      {
        "in_out": "",
        "type": "REFGUID",
        "name": "guidService",
        "description": "The service identifier (SID) of the service. For a list of service identifiers, see Service Interfaces."
      },
      {
        "in_out": "",
        "type": "REFIID",
        "name": "riid",
        "description": "The interface identifier (IID) of the interface being requested."
      },
      {
        "in_out": "",
        "type": "LPVOID*",
        "name": "ppvObject",
        "description": "Receives the interface pointer. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Calculates the minimum surface stride for a video format.",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function calculates the minimum stride needed to hold the image in memory. Use this function if you are allocating buffers in system memory. Surfaces allocated in video memory might require a larger stride, depending on the graphics card. If you are working with a DirectX surface buffer, use the IMF2DBuffer::Lock2D method to find the surface stride. For planar YUV formats, this function returns the stride for the Y plane. Depending on the format, the chroma planes might have a different stride. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetStrideForBitmapInfoHeader",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "format",
        "description": "FOURCC code or D3DFORMAT value that specifies the video format. If you have a video subtype GUID, you can use the first DWORD of the subtype."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWidth",
        "description": "Width of the image, in pixels."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "pStride",
        "description": "Receives the minimum surface stride, in pixels."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetSupportedMimeTypes",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "pPropVarMimeTypeArray",
        "description": "Pointer to a PROPVARIANT that receives the MIME types. Before calling this method, call PropVariantInit to initialize the PROPVARIANT. If the method succeeds, the PROPVARIANT contains an array of wide-character strings. The PROPVARIANT data type is VT_VECTOR | VT_LPWSTR. The caller must release the PROPVARIANT by calling PropVariantClear."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetSupportedSchemes",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PROPVARIANT*",
        "name": "pPropVarSchemeArray",
        "description": "Pointer to a PROPVARIANT that receives the URL schemes. Before calling this method, call PropVariantInit to initialize the PROPVARIANT. If the method succeeds, the PROPVARIANT contains an array of wide-character strings. The PROPVARIANT data type is VT_VECTOR | VT_LPWSTR. The caller must release the PROPVARIANT by calling PropVariantClear."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns an IMFSystemId object for retrieving system id data.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFGetSystemId",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IMFSystemId**",
        "name": "ppId",
        "description": "Receives a pointer to the IMFSystemId interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 0,
    "description": "Returns the system time.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "Returns the system time, in 100-nanosecond units. ",
    "remarks": "",
    "return_type": "MFTIME",
    "category": "Microsoft Media Foundation",
    "name": "MFGetSystemTime",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetTimerPeriodicity",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "Periodicity",
        "description": "Receives the timer interval, in milliseconds."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the media type for a stream associated with a topology node.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function gets the actual media type from the object that is associated with the topology node. The pNode parameter should specify a node that belongs to a fully resolved topology.  If the node belongs to a partial topology, the function will probably fail. Tee nodes do not have an associated object to query. For tee nodes, the function gets the node's input type, if available. Otherwise, if no input type is available, the function gets the media type of the node's primary output stream. The primary output stream is identified by the MF_TOPONODE_PRIMARYOUTPUT  attribute. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetTopoNodeCurrentType",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFTopologyNode*",
        "name": "pNode",
        "description": "A pointer to the IMFTopologyNode interface."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwStreamIndex",
        "description": "The identifier of the stream to query. This parameter is interpreted as follows:  Transform nodes: The value is the zero-based index of the input or output stream. All other node types: The value must be zero."
      },
      {
        "in_out": "",
        "type": "BOOL",
        "name": "fOutput",
        "description": "If TRUE, the function gets an output type. If FALSE, the function gets an input type. This parameter is interpreted as follows:  Output nodes: The value must be TRUE. Source nodes: The value must be FALSE. Tee nodes: The value is ignored. Transform nodes: If the value is TRUE, the dwStreamIndex parameter is the index for an output stream. Otherwise, dwStreamIndex is the index for an input stream."
      },
      {
        "in_out": "_Out_",
        "type": "IMFMediaType**",
        "name": "ppType",
        "description": "Receives a pointer to the IMFMediaType interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns a FOURCC or D3DFORMAT value that identifies the video format. If the video format is compressed or not recognized, the return value is D3DFMT_UNKNOWN. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Microsoft Media Foundation",
    "name": "MFGetUncompressedVideoFormat",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const MFVIDEOFORMAT*",
        "name": "pVideoFormat",
        "description": "Pointer to an MFVIDEOFORMAT structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If the work queue is not associated with an MMCSS task, the function retrieves an empty string. To associate a work queue with an MMCSS task, call MFBeginRegisterWorkQueueWithMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetWorkQueueMMCSSClass",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "Identifier for the work queue. The identifier is retrieved by the MFAllocateWorkQueue function."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "pwszClass",
        "description": "Pointer to a buffer that receives the name of the MMCSS class. This parameter can be NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pcchClass",
        "description": "On input, specifies the size of the pwszClass buffer, in characters. On output, receives the required size of the buffer, in characters. The size includes the terminating null character."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets the relative thread priority of a work queue.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h;  Mfplat.lib",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function returns the relative thread priority set by the MFBeginRegisterWorkQueueWithMMCSSEx function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetWorkQueueMMCSSPriority",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "The identifier of the work queue. For private work queues, the identifier is returned by the MFAllocateWorkQueue function. For platform work queues, see Work Queue Identifiers."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "lPriority",
        "description": "Receives the relative thread priority."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "To associate a work queue with an MMCSS task, call MFBeginRegisterWorkQueueWithMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFGetWorkQueueMMCSSTaskId",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueueId",
        "description": "Identifier for the work queue. The identifier is retrieved by the MFAllocateWorkQueue function."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pdwTaskId",
        "description": "Receives the task identifier."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If the function succeeds, it returns a pointer to the allocated memory block. If the function fails, it returns NULL. ",
    "remarks": "In the current version of Media Foundation, this function is equivalent to calling the HeapAlloc function and specifying the heap of the calling process. To free the allocated memory, call MFHeapFree. ",
    "return_type": "void*",
    "category": "Microsoft Media Foundation",
    "name": "MFHeapAlloc",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "size_t",
        "name": "nSize",
        "description": "Number of bytes to allocate."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Zero or more flags. For a list of valid flags, see HeapAlloc in the Windows SDK documentation."
      },
      {
        "in_out": "_In_",
        "type": "char*",
        "name": "pszFile",
        "description": "Reserved. Set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "line",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_In_",
        "type": "EAllocationType",
        "name": "eat",
        "description": "Reserved. Set to eAllocationTypeIgnore."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Microsoft Media Foundation",
    "name": "MFHeapFree",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pv",
        "description": "Pointer to the memory to free."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function can also be used with the following format structures that are equivalent to AM_MEDIA_TYPE: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitAMMediaTypeFromMFMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to convert."
      },
      {
        "in_out": "",
        "type": "GUID",
        "name": "guidFormatBlockType",
        "description": "Format type GUID. This value corresponds to the formattype member of the AM_MEDIA_TYPE structure and specifies the type of format block to allocate. If the value is GUID_NULL, the function attempts to deduce the correct format block, based on the major type and subtype."
      },
      {
        "in_out": "",
        "type": "AM_MEDIA_TYPE*",
        "name": "pAMType",
        "description": "Pointer to an AM_MEDIA_TYPE structure. The function allocates memory for the format block. The caller must release the format block by calling CoTaskMemFree on the pbFormat member."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use this function to deserialize an attribute store that was serialized with the MFGetAttributesAsBlob function. This function deletes any attributes that were previously stored in pAttributes. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitAttributesFromBlob",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "const UINT8*",
        "name": "pBuf",
        "description": "Pointer to the array that contains the initialization data."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbBufSize",
        "description": "Size of the pBuf array, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function can also be used with the following format structures that are equivalent to AM_MEDIA_TYPE: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromAMMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "AM_MEDIA_TYPE*",
        "name": "pAMType",
        "description": "Pointer to an AM_MEDIA_TYPE structure that describes the media type. The caller must fill in the structure members before calling this function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromMFVideoFormat",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "MFVIDEOFORMAT*",
        "name": "pMFVF",
        "description": "Pointer to an MFVIDEOFORMAT structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the MFVIDEOFORMAT structure, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromMPEG1VideoInfo",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "MPEG1VIDEOINFO*",
        "name": "pMP1VI",
        "description": "Pointer to a MPEG1VIDEOINFO structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the MPEG1VIDEOINFO structure, in bytes."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the MPEG1VIDEOINFO structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromMPEG2VideoInfo",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "MPEG2VIDEOINFO*",
        "name": "pMP2VI",
        "description": "Pointer to a MPEG2VIDEOINFO structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the MPEG2VIDEOINFO structure, in bytes."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the MPEG2VIDEOINFO structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromVideoInfoHeader",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "VIDEOINFOHEADER*",
        "name": "pVIH",
        "description": "Pointer to a VIDEOINFOHEADER structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the VIDEOINFOHEADER structure, in bytes."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the VIDEOINFOHEADER structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromVideoInfoHeader2",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "VIDEOINFOHEADER2*",
        "name": "pVIH2",
        "description": "Pointer to a VIDEOINFOHEADER2 structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the VIDEOINFOHEADER2 structure, in bytes."
      },
      {
        "in_out": "const",
        "type": "GUID*",
        "name": "pSubtype",
        "description": "Pointer to a subtype GUID. This parameter can be NULL. If the subtype GUID is specified, the function uses it to set the media subtype. Otherwise, the function attempts to deduce the subtype from the biCompression field contained in the VIDEOINFOHEADER2 structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Initializes a media type from a WAVEFORMATEX structure.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitMediaTypeFromWaveFormatEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pMFType",
        "description": "Pointer to the IMFMediaType interface of the media type to initialize. To create the uninitialized media type object, call MFCreateMediaType."
      },
      {
        "in_out": "const",
        "type": "WAVEFORMATEX*",
        "name": "pWaveFormat",
        "description": "Pointer to a WAVEFORMATEX structure that describes the media type. The caller must fill in the structure members before calling this function."
      },
      {
        "in_out": "",
        "type": "UINT32",
        "name": "cbBufSize",
        "description": "Size of the WAVEFORMATEX structure, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The following example creates a media type object for a standard video format. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitVideoFormat",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "MFVIDEOFORMAT*",
        "name": "pVideoFormat",
        "description": "A pointer to an MFVIDEOFORMAT structure. The function fills in the structure members based on the video format specified in the type parameter."
      },
      {
        "in_out": "_In_",
        "type": "MFStandardVideoFormat",
        "name": "type",
        "description": "The video format, specified as a member of the MFStandardVideoFormat enumeration."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This API is not supported and may be altered or unavailable in the future. Applications should avoid using the MFVIDEOFORMAT structure, and use media type attributes instead. For more information, see Video Media Types.]",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function fills in some reasonable default values for the specified RGB format. Developers are encouraged to use media type attributes instead of using the MFVIDEOFORMAT structure. See Media Type Attributes. In general, you should avoid calling this function. If you know all of the format details, you can fill in the MFVIDEOFORMAT structure without this function. If you do not know all of the format details, attributes are preferable to using the MFVIDEOFORMAT structure. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInitVideoFormat_RGB",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "MFVIDEOFORMAT*",
        "name": "pVideoFormat",
        "description": "A pointer to an MFVIDEOFORMAT structure. The functions fills in the structure members with the format information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWidth",
        "description": "The width of the video, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwHeight",
        "description": "The height of the video, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "D3Dfmt",
        "description": "A                             D3DFORMAT value that specifies the RGB format."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Invokes a callback method to complete an asynchronous operation.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If you are implementing an asynchronous method, use this function to invoke the caller's IMFAsyncCallback::Invoke method. The callback is invoked from a Media Foundation work queue. For more information, see Writing an Asynchronous Method. The MFShutdown function shuts down the work queue threads, so the callback is not guaranteed to be invoked after MFShutdown is called. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFInvokeCallback",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFAsyncResult*",
        "name": "pAsyncResult",
        "description": "Pointer to the IMFAsyncResult interface. To create this object, call MFCreateAsyncResult."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Checks whether a hardware security processor is supported for the specified media protection system.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2016 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFIsContentProtectionDeviceSupported",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "ProtectionSystemId",
        "description": "The identifier of the protection system that you want to check."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "isSupported",
        "description": "TRUE if the hardware security processor is supported for the specified protection system; otherwise FALSE."
      }
    ],
    "min_client": "Windows 10 [desktop apps | UWP apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Evr.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns one of the following values.  ",
    "remarks": "This function checks whether Format specifies a YUV format. Not every YUV format is recognized by this function. However, if a YUV format is not recognized by this function, it is probably not supported for video rendering or DirectX video acceleration (DXVA). ",
    "return_type": "BOOL",
    "category": "Microsoft Media Foundation",
    "name": "MFIsFormatYUV",
    "is_callback": 0,
    "dll": "Evr.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Format",
        "description": "FOURCC code or D3DFORMAT value."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Calculates ((a * b) + d) / c, where each term is a 64-bit signed value.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns the result of the calculation. If numeric overflow occurs, the function returns _I64_MAX (positive overflow) or LLONG_MIN (negative overflow). If Mfplat.dll cannot be loaded, the function returns _I64_MAX. ",
    "remarks": "",
    "return_type": "LONGLONG",
    "category": "Microsoft Media Foundation",
    "name": "MFllMulDiv",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "a",
        "description": "A multiplier."
      },
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "b",
        "description": "Another multiplier."
      },
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "c",
        "description": "The divisor."
      },
      {
        "in_out": "",
        "type": "LONGLONG",
        "name": "d",
        "description": "The rounding factor."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Loads a dynamic link library that is signed for the protected environment.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfidl.h",
    "return_value": "",
    "remarks": "A singlemodule load count is maintained on the dynamic link library (as it is with LoadLibrary).  This load count  is freed when the final release is called on the IMFSignedLibrary object. The following example demonstrates how to load a signed library and retrieve the address of a function in that library. ",
    "return_type": "STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFLoadSignedLibrary",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszName",
        "description": "The name of the dynamic link library to load.  This dynamic link library must be signed for the protected environment."
      },
      {
        "in_out": "_Out_",
        "type": "IMFSignedLibrary**",
        "name": "ppLib",
        "description": "Receives a pointer to the IMFSignedLibrary interface for the library."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Locks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function obtains a pointer to a  DXGI Device Manager instance that can be shared between components. The Microsoft Media Foundation platform creates this instance of the  DXGI Device Manager as a singleton object. Alternatively, you can create a new DXGI Device Manager by calling MFCreateDXGIDeviceManager. The first time this function is called, the Media Foundation platform creates the shared DXGI Device Manager. When you are done use the IMFDXGIDeviceManager pointer, call the MFUnlockDXGIDeviceManager. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFLockDXGIDeviceManager",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "UINT*",
        "name": "pResetToken",
        "description": "Receives a token that identifies this instance of the DXGI Device Manager. Use this token when calling IMFDXGIDeviceManager::ResetDevice.           This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFDXGIDeviceManager**",
        "name": "ppManager",
        "description": "Receives a pointer to the IMFDXGIDeviceManager interface. The caller must release the interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 0,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function prevents work queue threads from being shut down when MFShutdown is called. Use this function to ensure that asynchronous operations complete gracefully before the platform shuts down. This function holds a lock on the Media Foundation platform. To unlock the platform, call MFUnlockPlatform. The application must call MFUnlockPlatform once for every call to MFLockPlatform. The MFShutdown function blocks until the platform is unlocked, or until a fixed wait period has elapsed. (The wait period is a few seconds.) To avoid memory leaks, the application should unlock the platform before the wait period ends. For example, cancel any asynchronous operations that are waiting to complete and are holding a lock on the platform. The default implementation of the IMFAsyncResult interface automatically locks the Media Foundation platform when the result object is created. Releasing the interface unlocks the platform. Therefore, in most cases your application does not need to lock the platform directly. For more information, see Work Queues. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFLockPlatform",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 0,
    "description": "Shuts down the Microsoft Media Foundation platform. Call this function once for every call to MFStartup. Do not call this function from work queue threads.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFShutdown",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Obtains and locks a shared work queue.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "A multithreaded work queue uses a thread pool to dispatch work items. Whenever a thread becomes available, it dequeues the next work item from the queue. Work items are dequeued in first-in-first-out order, but work items are not serialized. In other words, the work queue does not wait for a work item to complete before it starts the next work item. Within a single process, the Microsoft Media Foundation platform creates up to one multithreaded queue for each Multimedia Class Scheduler Service (MMCSS) task. The MFLockSharedWorkQueue function checks whether a matching work queue already exists. If not, the function creates a new work queue and registers the work queue with MMCSS. The function returns the MMCSS task identifier (pdwTaskId) and the work queue identifier (pID). To queue a work item, pass the work queue identifier to any of the following functions: The MFLockSharedWorkQueue function also locks the queue. Before the process exits, call MFUnlockWorkQueue to unlock the work queue. If the regular priority queue is being used (wszClass=\"\"), then NULL must be passed in to pdwTaskId and the value 0 must be passed into BasePriority. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFLockSharedWorkQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "wszClass",
        "description": "The name of the MMCSS task."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "BasePriority",
        "description": "The base priority of the work-queue threads.   If the regular-priority queue is being used (wszClass=\"\"), then the value 0 must be passed in."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwTaskId",
        "description": "The MMCSS task identifier. On input, specify an existing MCCSS task group ID , or use the value zero to create a new task group. If the regular priority queue is being used (wszClass=\"\"), then NULL must be passed in. On output, receives the actual task group ID."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pID",
        "description": "Receives an identifier for the new work queue. Use this identifier when queuing work items."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Locks a work queue.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function prevents the MFShutdown function from shutting down the work queue. Use this function to ensure that asynchronous operations on the work queue complete gracefully before the platform shuts down. The MFShutdown function blocks until the work queue is unlocked, or until a fixed wait period has elapsed. (The wait period is a few seconds.) Call MFUnlockWorkQueue to unlock the work queue. Each call to MFLockWorkQueue must be matched by a corresponding call to MFUnlockWorkQueue.  ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFLockWorkQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueue",
        "description": "The identifier for the work queue. The identifier is returned by the MFAllocateWorkQueue function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Converts a Microsoft Direct3D 9 format identifier to a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns a DXGI_FORMAT value. ",
    "remarks": "",
    "return_type": "DXGI_FORMAT STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFMapDX9FormatToDXGIFormat",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dx9",
        "description": "The D3DFORMAT value or FOURCC code to convert."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Converts a Microsoft DirectX Graphics Infrastructure (DXGI) format identifier to a Microsoft Direct3D 9 format identifier.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns a D3DFORMAT value or FOURCC code. ",
    "remarks": "",
    "return_type": "DWORD STDAPI",
    "category": "Microsoft Media Foundation",
    "name": "MFMapDXGIFormatToDX9Format",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DXGI_FORMAT",
        "name": "dx11",
        "description": "The DXGI_FORMAT value to convert."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "",
    "library": "Mfplay.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfplay.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Before calling this function, call CoIntialize(Ex) from the same thread to initialize the COM library. Internally, MFPCreateMediaPlayer calls MFStartup to initialize the Microsoft Media Foundation platform. When the player object is destroyed, it calls  MFShutdown to shut down the platform. It is not necessary for an application to call MFStartup or MFShutdown when using MFPlay. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPCreateMediaPlayer",
    "is_callback": 0,
    "dll": "Mfplay.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszURL",
        "description": "Null-terminated string that contains the URL  of a media file to open. This parameter can be NULL. If the parameter is NULL, fStartPlayback must be FALSE. If this parameter is NULL, you can open a URL later by calling IMFPMediaPlayer::CreateMediaItemFromURL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fStartPlayback",
        "description": "If TRUE, playback starts automatically. If FALSE, playback does not start until the application calls IMFMediaPlayer::Play. If pwszURL is NULL, this parameter is ignored."
      },
      {
        "in_out": "_In_",
        "type": "MFP_CREATION_OPTIONS",
        "name": "creationOptions",
        "description": "Bitwise OR of zero of more flags from the _MFP_CREATION_OPTIONS enumeration."
      },
      {
        "in_out": "_In_",
        "type": "IMFPMediaPlayerCallback*",
        "name": "pCallback",
        "description": "Pointer to the IMFPMediaPlayerCallback interface of a callback object, implemented by the application. Use this interface to get event notifications from the MFPlay player object. This parameter can be NULL. If  the parameter is NULL, the application will not receive  event notifications from the player object."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "A handle to a window where the video will appear. For audio-only playback, this parameter can be NULL. The window specified by hWnd is used for the first selected video stream in the source. If the source has multiple video streams, you must call IMFPMediaItem::SetStreamSink to render any of the video streams after the first. If hWnd is NULL, MFPlay will not display any video unless the application calls IMFPMediaItem::SetStreamSink to specify a media sink for the video stream."
      },
      {
        "in_out": "_Out_",
        "type": "IMFPMediaPlayer**",
        "name": "ppMediaPlayer",
        "description": "Receives a pointer to the IMFPMediaPlayer interface. The caller must release the interface. This parameter can be NULL. If this parameter is NULL, fStartPlayback must be TRUE and pwszURL cannot be NULL."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "This function pointer does not return a value. ",
    "remarks": "",
    "return_type": "typedef void (",
    "category": "Microsoft Media Foundation",
    "name": "MFPERIODICCALLBACK pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pContext",
        "description": "Pointer to the IUnknown interface, or NULL. This pointer is specified by the caller in the MFAddPeriodicCallback function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Queues a work item that waits for an event to be signaled.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h;  Mfplat.lib",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function enables a component to wait for an event without blocking the current thread. The function puts a work item on the specified work queue. This work item waits for the event given in hEvent to be signaled. When the event is signaled, the work item invokes a callback. (The callback is contained in the result object given in pResult. For more information, see MFCreateAsyncResult). The work item is dispatched on a work queue by the IMFAsyncCallback::GetParameters method of the callback. The work queue can be any of the following: Do not use any of the following work queues: MFASYNC_CALLBACK_QUEUE_IO, MFASYNC_CALLBACK_QUEUE_LONG_FUNCTION, MFASYNC_CALLBACK_QUEUE_RT, or MFASYNC_CALLBACK_QUEUE_TIMER. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPutWaitingWorkItem",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEvent",
        "description": "A handle to an event object. To create an event object, call CreateEvent or CreateEventEx."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "Priority",
        "description": "The priority of the work item. Work items are performed in order of priority."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "A pointer to the IMFAsyncResult interface of an asynchronous result object. To create the result object, call MFCreateAsyncResult."
      },
      {
        "in_out": "_Out_",
        "type": "MFWORKITEM_KEY*",
        "name": "pKey",
        "description": "Receives a key that can be used to cancel the wait. To cancel the wait, call MFCancelWorkItem and pass this key in the Key parameter.  This parameter can be NULL."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Puts an asynchronous operation on a work queue.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns an HRESULT value. Possible values include the following.  ",
    "remarks": "This function creates an asynchronous result object and puts the result object on the work queue. The work queue calls the IMFAsyncCallback::Invoke method specified by pCallback. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPutWorkItem",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwQueue",
        "description": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pCallback",
        "description": "A pointer to the IMFAsyncCallback interface. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pState",
        "description": "A pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Puts an asynchronous operation on a work queue, with a specified priority.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns an HRESULT value. Possible values include the following.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPutWorkItem2",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwQueue",
        "description": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or  MFAllocateWorkQueueEx."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "Priority",
        "description": "The priority of the work item. Work items are performed in order of priority."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncCallback*",
        "name": "pCallback",
        "description": "A pointer to the IMFAsyncCallback interface. The caller must implement this interface."
      },
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pState",
        "description": "A pointer to the IUnknown interface of a state object, defined by the caller. This parameter can be NULL. You can use this object to hold state information. The object is returned to the caller when the callback is invoked."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Puts an asynchronous operation on a work queue.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "Returns an HRESULT value. Possible values include the following.  ",
    "remarks": "To invoke the work-item, this function passes pResult to the MFInvokeCallback function. The callback is specified when you create the result object specified by pResult. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPutWorkItemEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwQueue",
        "description": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or MFAllocateWorkQueueEx."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "A pointer to the IMFAsyncResult interface of an asynchronous result object. To create the result object, call MFCreateAsyncResult."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Puts an asynchronous operation on a work queue, with a specified priority.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns an HRESULT value. Possible values include the following.  ",
    "remarks": "To invoke the work item, this function passes pResult to the MFInvokeCallback function. The callback is specified when you create the result object specified by pResult. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFPutWorkItemEx2",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwQueue",
        "description": "The identifier for the work queue. This value can specify one of the standard Media Foundation work queues, or a work queue created by the application. For list of standard Media Foundation work queues, see Work Queue Identifiers. To create a new work queue, call MFAllocateWorkQueue or  MFAllocateWorkQueueEx."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "Priority",
        "description": "The priority of the work item. This value should be 1, 0, or -1. Items with a value of 1 are executed before items with a value of 0. Items with a value of  -1 are executed after items with a value of 0."
      },
      {
        "in_out": "_In_",
        "type": "IMFAsyncResult*",
        "name": "pResult",
        "description": "A pointer to the IMFAsyncResult interface of an asynchronous result object. To create the result object, call MFCreateAsyncResult."
      }
    ],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Registers a byte-stream handler in the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Byte-stream handlers are used in Microsoft Media Foundation during the source resolution process, which creates a media source from a URL. For more information, see Scheme Handlers and Byte-Stream Handlers. Within a process, local byte-stream handlers take precedence over byte-stream handlers that are registered in the registry. Local byte-stream handlers are not visible to other processes. Use this function if you want to register a custom byte-stream handler for your application, but do not want the handler available to other applications. Either szFileExtension or szMimeType can be NULL; at least one must be non-NULL. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFRegisterLocalByteStreamHandler",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szFileExtension",
        "description": "A string that contains the file name extension for this handler."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szMimeType",
        "description": "A string that contains the MIME type for this handler."
      },
      {
        "in_out": "_In_",
        "type": "IMFActivate*",
        "name": "pActivate",
        "description": "A pointer to the IMFActivate interface of an activation object. The caller implements this interface. The IMFActivate::ActivateObject method of the activation object must create a byte-stream handler. The byte-stream handler exposes the IMFByteStreamHandler interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Registers a scheme handler in the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Scheme handlers are used in Microsoft Media Foundation during the source resolution process, which creates a media      source from a URL. For more information, see      Scheme Handlers and Byte-Stream Handlers. Within a process, local scheme handlers take precedence over scheme handlers that are registered in the      registry. Local scheme handlers are not visible to other processes. Use this function if you want to register a custom scheme handler for your application, but do not want the      handler available to other applications. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFRegisterLocalSchemeHandler",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szScheme",
        "description": "A string that contains the scheme. The scheme includes the trailing ':' character; for example,        \"http:\"."
      },
      {
        "in_out": "_In_",
        "type": "IMFActivate*",
        "name": "pActivate",
        "description": "A pointer to the IMFActivate interface of an activation        object. The caller implements this interface. The        IMFActivate::ActivateObject        method of the activation object must create a scheme handler object. The scheme handler exposes the        IMFSchemeHandler interface."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Registers the standard Microsoft Media Foundation platform work queues with the Multimedia Class Scheduler Service (MMCSS).",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h;  Mfplat.lib",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "To unregister the platform work queues from the MMCSS class, call MFUnregisterPlatformFromMMCSS. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFRegisterPlatformWithMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "wszClass",
        "description": "The name of the MMCSS task."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwTaskId",
        "description": "The MMCSS task identifier. On input, specify an existing  MCCSS task group ID, or use the value zero to create a new task group. On output, receives the actual task group ID."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lPriority",
        "description": "The base priority of the work-queue threads."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The callback is dispatched on another thread, and this function does not attempt to synchronize with the callback thread. Therefore, it is possible for the callback to be invoked after this function returns. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFRemovePeriodicCallback",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwKey",
        "description": "Key that identifies the callback. This value is retrieved by the MFAddPeriodicCallback function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If this function returns S_OK, it means the PMP is required for this presentation. Call MFCreatePMPMediaSession to create the PMP session object. If the function returns S_FALSE, you can use the unprotected pipeline. Call MFCreateMediaSession to create the regular Media Session object. Internally, this function checks whether any of the stream descriptors in the presentation have the MF_SD_PROTECTED attribute with the value TRUE. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFRequireProtectedEnvironment",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFPresentationDescriptor*",
        "name": "pPresentationDescriptor",
        "description": "Pointer to the IMFPresentationDescriptor interface of a presentation descriptor. The presentation descriptor is created by the media source, and describes the presentation."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfobjects.h (include Mfidl.h)",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "If dwOptions contains the MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF flag, the function serializes IUnknown pointers in the attribute store, as follows: If dwOptions does not include the MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF flag, the function skips IUnknown pointers in the attribute store. To load the attributes from the stream, call MFDeserializeAttributesFromStream. The main purpose of this function is to marshal attributes across process boundaries. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFSerializeAttributesToStream",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFAttributes*",
        "name": "pAttr",
        "description": "Pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwOptions",
        "description": "Bitwise OR of zero or more flags from the MF_ATTRIBUTE_SERIALIZE_OPTIONS enumeration."
      },
      {
        "in_out": "",
        "type": "IStream*",
        "name": "pStm",
        "description": "Pointer to the IStream interface of the stream where the attributes are saved."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "To deserialize the presentation descriptor, pass the byte array to the MFDeserializePresentationDescriptor function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFSerializePresentationDescriptor",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFPresentationDescriptor*",
        "name": "pPD",
        "description": "Pointer to the IMFPresentationDescriptor interface of the presentation descriptor to serialize."
      },
      {
        "in_out": "",
        "type": "DWORD*",
        "name": "pcbData",
        "description": "Receives the size of the ppbData array, in bytes."
      },
      {
        "in_out": "",
        "type": "BYTE**",
        "name": "ppbData",
        "description": "Receives a pointer to an array of bytes containing the serialized presentation descriptor. The caller must free the memory for the array by calling CoTaskMemFree."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Packs two UINT32 values into a UINT64 attribute value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfobjects.h (include Mfidl.h)",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Internally, this functions calls Pack2UINT32AsUINT64 to create the 64-bit value, and IMFAttributes::SetUINT64 to set the attribute. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFSetAttribute2UINT32asUINT64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "A GUID that identifies the value to set. If this key already exists, the function overwrites the old value."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unHigh32",
        "description": "The value to store in the high-order 32 bits of the UINT64 value."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unLow32",
        "description": "The value to store in the low-order 32 bits of the UINT64 value."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Sets a ratio as a 64-bit attribute value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Some attributes specify a ratio as a packed UINT64 value. This function packs the numerator and denominator into a single UINT64 value. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFSetAttributeRatio",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "A                             GUID that identifies the value to set. If this key already exists, the function overwrites the old value."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unNumerator",
        "description": "The numerator of the ratio."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unDenominator",
        "description": "The denominator of the ratio."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Sets width and height as a single 64-bit attribute value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Some attributes specify a width and a height as a packed UINT64 value. This function packs the width and height values into a single UINT64 value. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFSetAttributeSize",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to the IMFAttributes interface of the attribute store."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidKey",
        "description": "A GUID that identifies the value to set. If this key already exists, the function overwrites the old value."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unWidth",
        "description": "The width."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unHeight",
        "description": "The height."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Shuts down a Media Foundation object and releases all resources associated with the object.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is not related to the MFShutdown function, which shuts down the Media Foundation platform, as described in Initializing Media Foundation. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFShutdownObject",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IUnknown*",
        "name": "pUnk",
        "description": "Pointer to the IUnknown interface of the object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Initializes Microsoft Media Foundation.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "An application must call this function before using Media Foundation. Before your application quits, call MFShutdown once for every previous call to MFStartup. Do not call MFStartup or MFShutdown from work queue threads. For more information about work queues, see Work Queues. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFStartup",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "ULONG",
        "name": "Version",
        "description": "Version number. Use the value MF_VERSION, defined in mfapi.h."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is optional when using C++ but required in C. The value must be one of the following flags:             ValueMeaning   MFSTARTUP_NOSOCKET                    Do not initialize the sockets library.                   MFSTARTUP_LITE                    Equivalent to MFSTARTUP_NOSOCKET.                   MFSTARTUP_FULL                    Initialize the entire Media Foundation platform. This is the default value when dwFlags is not specified."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "Enumerates Media Foundation transforms (MFTs) in the registry.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function returns a list of all the MFTs in the specified category that match the search criteria given by the pInputType, pOutputType, and pAttributes parameters. Any of those parameters can be NULL. If no MFTs match the criteria, the method succeeds but returns the value zero in pcMFTs. To find a decoder, set guidCategory to MFT_CATEGORY_AUDIO_DECODER or MFT_CATEGORY_VIDEO_DECODER  and specify the encoding format in pInputType.  You would typically set pOutputType to NULL in this case. To find an encoder, set guidCategory to MFT_CATEGORY_AUDIO_ENCODER or MFT_CATEGORY_VIDEO_ENCODER  and specify the encoding format in pOutputType.  You would typically set pInputType to NULL in this case. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTEnum",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidCategory",
        "description": "GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "Reserved. Must be zero."
      },
      {
        "in_out": "_In_",
        "type": "MFT_REGISTER_TYPE_INFO*",
        "name": "pInputType",
        "description": "Pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an input media type to match.  This parameter can be NULL. If NULL, all input types are matched."
      },
      {
        "in_out": "_In_",
        "type": "MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputType",
        "description": "Pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an output media type to match. This parameter can be NULL.           If NULL, all output types are matched."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Reserved. Set to NULL. Note  Windows Vista and Windows Server 2008: This parameter can specify a pointer to the IMFAttributes interface of an attribute store. The MFTEnum function matches the attributes in this object against the attributes stored in the registry. (Registry attributes are specified in the pAttributes parameter of the MFTRegister function.) Only MFTs with matching attributes are returned in the enumeration results.   Note  Windows 7 and later: This parameter is ignored."
      },
      {
        "in_out": "_Out_",
        "type": "CLSID**",
        "name": "ppclsidMFT",
        "description": "Receives a pointer to an array of CLSIDs. To create an MFT from this list, call CoCreateInstance with one of the CLSIDs. To get information about a particular MFT from its CLSID, call MFTGetInfo. The caller must free the memory for the array by calling CoTaskMemFree."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcMFTs",
        "description": "Receives the number of elements in the ppclsidMFT array. The value can be zero."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the MFTEnumEx function to allow external applications and internal components to discover the hardware MFTs that correspond to a specific video adapter.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The Flags parameter controls which MFTs are enumerated, and the order in which they are returned. The flags for this parameter fall into several groups.  The first set of flags specifies how an MFT processes data.  Every MFT falls into exactly one of these categories.  To enumerate a category, set the corresponding flag in the Flags parameter. You can combine these flags to enumerate more than one category. If none of these flags is specified, the default category is synchronous MFTs (MFT_ENUM_FLAG_SYNCMFT).   Next, the following flags include MFTs that are otherwise  excluded from the results. By default, flags that match these criteria are excluded from the results. Use any these flags to include them.    The last flag is used to sort and filter the results:  If the MFT_ENUM_FLAG_SORTANDFILTER flag is set, the MFTEnum2 function sorts the results as follows: If you do not set the MFT_ENUM_FLAG_SORTANDFILTER flag, the MFTEnum2 function returns an unsorted list. Setting the Flags parameter to zero is equivalent to using the value MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER. Setting Flags to MFT_ENUM_FLAG_SYNCMFT is equivalent to calling the MFTEnum function. If no MFTs match the search criteria, the function returns S_OK, unless some other error occurs. Therefore, always check the count received in the pcMFTActivate parameter before you dereference the pppMFTActivate pointer. If at least one MFT matches the search criteria, the pppMFTActivate parameter receives an array of IMFActivate pointers. One pointer is returned for each matching MFT. Each pointer represents an activation object for the MFT. For more information, see Activation Objects. Additional information about each MFT is stored as attributes on the activation objects. For a list of the possible attributes, see Transform Attributes. To create an instance of the MFT, call IMFActivate::ActivateObject. Hardware codecs are excluded from the enumeration results if the following registry keys are set to zero: Decoders: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableDecoders Encoders: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableEncoders Video processors: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableVideoProcessors These keys are intended for OEMs, and should not be used by applications. For hardware codecs, the guidCategory parameter of MFTEnum2 can also specify one of the following kernel streaming (KS) device categories: Hardware codecs should also be registered under an MFT_CATEGORY GUID, so applications should generally use those categories instead of the KS device categories. The following example searches for a video or audio decoder. Asynchronous, hardware, transcode, and field-of-use decoders are excluded. If a match is found, the code creates the first MFT in the list. The next example searches for a video or audio encoder. Asynchronous, hardware, transcode, and field-of-use encoders are excluded. The next example searches for a video decoder, with options to include asynchronous, hardware, or transcode decoders. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTEnum2",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidCategory",
        "description": "A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "The bitwise OR of zero or more flags from the _MFT_ENUM_FLAG enumeration."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pInputType",
        "description": "A pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an input media type to match.  This parameter can be NULL. If NULL, all input types are matched."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputType",
        "description": "A pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an output media type to match. This parameter can be NULL. If NULL, all output types are matched."
      },
      {
        "in_out": "_In_opt_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "A pointer to an IMFAttributes interface that enables access to the standard attribute store."
      },
      {
        "in_out": "_Out_",
        "type": "IMFActivate***",
        "name": "pppMFTActivate",
        "description": "Receives an array of IMFActivate interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the CoTaskMemFree function to free the memory for the array."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pnumMFTActivate",
        "description": "Receives the number of elements in the pppMFTActivate array. If no MFTs match the search criteria, this parameter receives the value zero."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Gets a list of Microsoft Media Foundation transforms (MFTs) that match specified search criteria. This function extends the MFTEnum function.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The Flags parameter controls which MFTs are enumerated, and the order in which they are returned. The flags for this parameter fall into several groups.  The first set of flags specifies how an MFT processes data.  Every MFT falls into exactly one of these categories.  To enumerate a category, set the corresponding flag in the Flags parameter. You can combine these flags to enumerate more than one category. If none of these flags is specified, the default category is synchronous MFTs (MFT_ENUM_FLAG_SYNCMFT).   Next, the following flags include MFTs that are otherwise  excluded from the results. By default, flags that match these criteria are excluded from the results. Use any these flags to include them.    The last flag is used to sort and filter the results:  If the MFT_ENUM_FLAG_SORTANDFILTER flag is set, the MFTEnumEx function sorts the results as follows: If you do not set the MFT_ENUM_FLAG_SORTANDFILTER flag, the MFTEnumEx function returns an unsorted list. Setting the Flags parameter to zero is equivalent to using the value MFT_ENUM_FLAG_SYNCMFT | MFT_ENUM_FLAG_LOCALMFT | MFT_ENUM_FLAG_SORTANDFILTER. Setting Flags to MFT_ENUM_FLAG_SYNCMFT is equivalent to calling the MFTEnum function. If no MFTs match the search criteria, the function returns S_OK, unless some other error occurs. Therefore, always check the count received in the pcMFTActivate parameter before you dereference the pppMFTActivate pointer. If at least one MFT matches the search criteria, the pppMFTActivate parameter receives an array of IMFActivate pointers. One pointer is returned for each matching MFT. Each pointer represents an activation object for the MFT. For more information, see Activation Objects. Additional information about each MFT is stored as attributes on the activation objects. For a list of the possible attributes, see Transform Attributes. To create an instance of the MFT, call IMFActivate::ActivateObject. Hardware codecs are excluded from the enumeration results if the following registry keys are set to zero: Decoders: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableDecoders Encoders: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableEncoders Video processors: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Media Foundation\\HardwareMFT\\EnableVideoProcessors These keys are intended for OEMs, and should not be used by applications. For hardware codecs, the guidCategory parameter of MFTEnumEx can also specify one of the following kernel streaming (KS) device categories: Hardware codecs should also be registered under an MFT_CATEGORY GUID, so applications should generally use those categories instead of the KS device categories. The following example searches for a video or audio decoder. Asynchronous, hardware, transcode, and field-of-use decoders are excluded. If a match is found, the code creates the first MFT in the list. The next example searches for a video or audio encoder. Asynchronous, hardware, transcode, and field-of-use encoders are excluded. The next example searches for a video decoder, with options to include asynchronous, hardware, or transcode decoders. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTEnumEx",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidCategory",
        "description": "A GUID that specifies the category of MFTs to enumerate. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "The bitwise OR of zero or more flags from the _MFT_ENUM_FLAG enumeration."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pInputType",
        "description": "A pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an input media type to match.  This parameter can be NULL. If NULL, all input types are matched."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputType",
        "description": "A pointer to an MFT_REGISTER_TYPE_INFO structure that specifies an output media type to match. This parameter can be NULL. If NULL, all output types are matched."
      },
      {
        "in_out": "_Out_",
        "type": "IMFActivate***",
        "name": "pppMFTActivate",
        "description": "Receives an array of IMFActivate interface pointers. Each pointer represents an activation object for an MFT that matches the search criteria. The function allocates the memory for the array. The caller must release the pointers and call the CoTaskMemFree function to free the memory for the array."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcMFTActivate",
        "description": "Receives the number of elements in the pppMFTActivate array. If no MFTs match the search criteria, this parameter receives the value zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 7,
    "description": "Gets information from the registry about a Media Foundation transform (MFT).",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTGetInfo",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CLSID",
        "name": "clsidMFT",
        "description": "The CLSID of the MFT."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "pszName",
        "description": "Receives a pointer to a wide-character string containing the friendly name of the MFT. The caller must free the string by calling CoTaskMemFree. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "MFT_REGISTER_TYPE_INFO**",
        "name": "ppInputTypes",
        "description": "Receives a pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array describes an input format that the MFT supports. The caller must free the array by calling CoTaskMemFree. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcInputTypes",
        "description": "Receives the number of elements in the ppInputTypes array. If ppInputTypes is NULL, this parameter is ignored and can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "MFT_REGISTER_TYPE_INFO**",
        "name": "ppOutputTypes",
        "description": "Receives a pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array describes an output format that the MFT supports. The caller must free the array by calling CoTaskMemFree. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "UINT32*",
        "name": "pcOutputTypes",
        "description": "Receives the number of elements in the ppOutputType array. If ppOutputTypes is NULL, this parameter is ignored and can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IMFAttributes**",
        "name": "ppAttributes",
        "description": "Receives a pointer to the IMFAttributes interface of an attribute store. The caller must release the interface. The attribute store might contain attributes that are stored in the registry for the specified MFT. (For more information, see MFTRegister.)  If no attributes are stored in the registry for this MFT, the attribute store is empty.  This parameter can be NULL."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets a list of output formats from an audio encoder.",
    "library": "Mf.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function assumes the encoder will be used in its default encoding mode, which is typically constant bit-rate (CBR) encoding. Therefore, the types returned by the function might not work with other modes, such as variable bit-rate (VBR) encoding. Internally, this function works by calling MFTEnumEx to find a matching encoder, and then calling IMFTransform::GetOutputAvailableType to get the encoder's output types. The following example creates a transcode profile for Windows Media Audio (WMA). ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTranscodeGetAudioOutputAvailableTypes",
    "is_callback": 0,
    "dll": "Mf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidSubType",
        "description": "Specifies the subtype of the output media. The encoder uses this value as a filter when it is enumerating the available output types. For information about the audio subtypes, see  Audio Subtype GUIDs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMFTFlags",
        "description": "Bitwise OR of zero or more flags from the _MFT_ENUM_FLAG enumeration."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pCodecConfig",
        "description": "A pointer to the IMFAttributes interface of an attribute store. The attribute store specifies the encoder configuration settings. This parameter can be NULL. The attribute store can hold any of the following attributes.  ValueMeaning  MFT_FIELDOFUSE_UNLOCK_Attribute   Set this attribute to unlock an encoder that has field-of-use descriptions.   MF_TRANSCODE_ENCODINGPROFILE   Specifies a device conformance profile for a Windows Media encoder.   MF_TRANSCODE_QUALITYVSSPEED   Sets the tradeoff between encoding quality and encoding speed."
      },
      {
        "in_out": "_Out_",
        "type": "IMFCollection**",
        "name": "ppAvailableTypes",
        "description": "Receives a pointer to the IMFCollection interface of a collection object that contains a list of preferred audio media types. The collection contains IMFMediaType pointers. The caller must release the interface pointer."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Adds information about a Media Foundation transform (MFT) to the registry.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The registry entries created by this function are read by the following functions:  This function does not register the CLSID of the MFT for the CoCreateInstance or CoGetClassObject functions. To remove the entries from the registry, call MFTUnregister.       If you remove an MFT from the system, you should always call MFTUnregister. The formats given in the pInputTypes and pOutputTypes parameters are intended to help applications search for MFTs by format. Applications can use the MFTEnum or MFTEnumEx functions to enumerate MFTs that match a particular set of formats. It is recommended          to specify at least one input type in pInputTypes and one output type in the pOutputTypes parameter. Otherwise, the MFT might be skipped in the enumeration. On 64-bit Windows, the 32-bit version of this function registers the MFT in the 32-bit node of the registry. For more information, see 32-bit and 64-bit Application Data in the Registry. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTRegister",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CLSID",
        "name": "clsidMFT",
        "description": "The CLSID of the MFT.           The MFT must also be registered as a COM object using the same CLSID."
      },
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "guidCategory",
        "description": "GUID that specifies the category of the MFT. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "pszName",
        "description": "Wide-character string that contains the friendly name of the MFT."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "Bitwise OR of zero or more of the following flags from the _MFT_ENUM_FLAG  enumeration:  ValueMeaning  MFT_ENUM_FLAG_ASYNCMFT   The MFT performs asynchronous processing in software. See Asynchronous MFTs. This flag does not apply to hardware transforms. Requires Windows 7.   MFT_ENUM_FLAG_FIELDOFUSE   The application must unlock the MFT in order to use it. See IMFFieldOfUseMFTUnlock. Requires Windows 7.   MFT_ENUM_FLAG_HARDWARE   The MFT performs hardware-based data processing, using either the AVStream driver or a GPU-based proxy MFT. MFTs in this category always process data asynchronously. See Hardware MFTs. Note  This flag applies to video codecs and video processors that perform their work entirely in hardware. It does not apply to software decoders that use DirectX Video Acceleration to assist decoding.   Requires Windows 7.   MFT_ENUM_FLAG_SYNCMFT   The MFT performs synchronous processing in software. This flag does not apply to hardware transforms.   MFT_ENUM_FLAG_TRANSCODE_ONLY   The MFT is optimized for transcoding and should not be used for playback. Requires Windows 7.     Setting Flags to zero is  equivalent to setting the MFT_ENUM_FLAG_SYNCMFT flag. The default processing model for MFTs is synchronous processing. Prior to Windows 7, the Flags parameter was reserved."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cInputTypes",
        "description": "Number of elements in the pInputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "MFT_REGISTER_TYPE_INFO*",
        "name": "pInputTypes",
        "description": "Pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array specifies an input format that the MFT supports.  This parameter can be NULL. This parameter can be NULL. However, if the parameter is NULL, the MFT will be enumerated only when an application specifies NULL for the desired input type."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cOutputTypes",
        "description": "Number of elements in the pOutputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputTypes",
        "description": "Pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array defines an output format that the MFT supports.  This parameter can be NULL. However, if the parameter is NULL, the MFT will be enumerated only when an application specifies NULL for the desired output type."
      },
      {
        "in_out": "_In_",
        "type": "IMFAttributes*",
        "name": "pAttributes",
        "description": "Pointer to the IMFAttributes interface of an attribute store that contains additional registry information. This parameter can be NULL. If the parameter is non-NULL, the attributes are written to the registery as a byte array.       You can use the MFTGetInfo function to retrieve the attributes. The following attribute is defined for this parameter:  ValueMeaning  MFT_CODEC_MERIT_Attribute   Contains the merit value of a hardware codec. See Codec Merit."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Registers a Media Foundation transform (MFT) in the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The primary purpose of this function is to make an MFT available for automatic topology resolution without making the MFT available to other processes or applications. After you call this function, the MFT can be enumerated by calling the MFTEnumEx function with the MFT_ENUM_FLAG_LOCALMFT flag. The MFT can be enumerated from within the same process, but is not visible to other processes. The pClassFactory parameter specifies a class factory object that creates the MFT. The class factory's IClassFactory::CreateInstance method must return an object that supports the IMFTransform interface. To unregister the MFT from the current process, call MFTUnregisterLocal. If you need to register an MFT in the Protected Media Path (PMP) process, use the IMFLocalMFTRegistration interface. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTRegisterLocal",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IClassFactory*",
        "name": "pClassFactory",
        "description": "A pointer to the IClassFactory interface of a class factory object. The class factory creates the MFT."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidCategory",
        "description": "A GUID that specifies the category of the MFT. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszName",
        "description": "A wide-character null-terminated string that contains the friendly name of the MFT."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "A bitwise OR of zero or more flags from the _MFT_ENUM_FLAG enumeration."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cInputTypes",
        "description": "The number of elements in the pInputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pInputTypes",
        "description": "A pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array specifies an input format that the MFT supports. This parameter can be NULL if cInputTypes is zero."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cOutputTypes",
        "description": "The number of elements in the pOutputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputTypes",
        "description": "A pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array defines an output format that the MFT supports. This parameter can be NULL if cOutputTypes is zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Registers a Media Foundation transform (MFT) in the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The primary purpose of this function is to make an MFT available for automatic topology resolution without making the MFT available to other processes or applications. After you call this function, the MFT can be enumerated by calling the MFTEnumEx function with the MFT_ENUM_FLAG_LOCALMFT flag. The MFT can be enumerated from within the same process, but is not visible to other processes. To unregister the MFT from the current process, call MFTUnregisterLocalByCLSID. If you need to register an MFT in the Protected Media Path (PMP) process, use the IMFLocalMFTRegistration interface. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTRegisterLocalByCLSID",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "REFCLSID",
        "name": "clisdMFT",
        "description": "The class identifier (CLSID) of the MFT."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guidCategory",
        "description": "A GUID that specifies the category of the MFT. For a list of MFT categories, see MFT_CATEGORY."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pszName",
        "description": "A wide-character null-terminated string that contains the friendly name of the MFT."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "Flags",
        "description": "A bitwise OR of zero or more flags from the _MFT_ENUM_FLAG enumeration."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cInputTypes",
        "description": "The number of elements in the pInputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pInputTypes",
        "description": "A pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array specifies an input format that the MFT supports. This parameter can be NULL if cInputTypes is zero."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cOutputTypes",
        "description": "The number of elements in the pOutputTypes array."
      },
      {
        "in_out": "_In_",
        "type": "const MFT_REGISTER_TYPE_INFO*",
        "name": "pOutputTypes",
        "description": "A pointer to an array of MFT_REGISTER_TYPE_INFO structures. Each member of the array defines an output format that the MFT supports. This parameter can be NULL if cOutputTypes is zero."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters a Media Foundation transform (MFT).",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function removes the registry entries created by the MFTRegister function. It is safe to call MFTUnregister twice with the same CLSID. If the CLSID is not found in the registry, the function succeeds and does nothing. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTUnregister",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CLSID",
        "name": "clsidMFT",
        "description": "The CLSID of the MFT."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters one or more Media Foundation transforms (MFTs) from the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use this function to unregister a local MFT that was previously registered through the MFTRegisterLocal function. If the pClassFactory parameter is NULL, all local MFTs in the process are unregistered. Otherwise, the function unregisters the MFT associated with the class factory specified by the pClassFactory parameter. In that case, the pClassFactory parameter should equal a pointer value that was previously passed to  the MFTRegisterLocal function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTUnregisterLocal",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IClassFactory*",
        "name": "pClassFactory",
        "description": "A pointer to the IClassFactory interface of a class factory object. This parameter can be NULL."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unregisters a Media Foundation transform (MFT) from the caller's process.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use this function to unregister a local MFT that was previously registered through the MFTRegisterLocalByCLSID function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFTUnregisterLocalByCLSID",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CLSID",
        "name": "clsidMFT",
        "description": "The class identifier (CLSID) of the MFT."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Unlocks the shared Microsoft DirectX Graphics Infrastructure (DXGI) Device Manager.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2012 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Call this function after a successful call to the MFLockDXGIDeviceManager function. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFUnlockDXGIDeviceManager",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows 8 [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 0,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The application must call MFUnlockPlatform once for every call to MFLockPlatform. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFUnlockPlatform",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "The application must call MFUnlockWorkQueue once for every call to MFAllocateWorkQueue and then once for every call to MFLockWorkQueue. ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFUnlockWorkQueue",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwWorkQueue",
        "description": "Identifier for the work queue to be unlocked. The identifier is returned by the MFAllocateWorkQueue function."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 0,
    "description": "Unregisters the Microsoft Media Foundation platform work queues from a Multimedia Class Scheduler Service (MMCSS) task.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Mfapi.h;  Mfplat.lib",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFUnregisterPlatformFromMMCSS",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a media type that was wrapped in another media type by the MFWrapMediaType function.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFUnwrapMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pWrap",
        "description": "Pointer to the IMFMediaType interface of the media type that was retrieved by MFWrapMediaType."
      },
      {
        "in_out": "",
        "type": "IMFMediaType**",
        "name": "ppOrig",
        "description": "Receives a pointer to the IMFMediaType interface of the original media type. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a media type that wraps another media type.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The original media type (pOrig) is stored in the new media type under the MF_MT_WRAPPED_TYPE attribute. To extract the original media type, call MFUnwrapMediaType. This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFWrapMediaType",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IMFMediaType*",
        "name": "pOrig",
        "description": "A pointer to the IMFMediaType interface of the media type to wrap in a new media type."
      },
      {
        "in_out": "",
        "type": "REFGUID",
        "name": "MajorType",
        "description": "A              GUID that specifies the major type for the new media type. For a list of possible values, see Major Media Types."
      },
      {
        "in_out": "",
        "type": "REFGUID",
        "name": "SubType",
        "description": "A              GUID that specifies the subtype for the new media type. For possible values, see:   Audio Subtypes   Video Subtypes   Applications can define custom subtype GUIDs."
      },
      {
        "in_out": "",
        "type": "IMFMediaType**",
        "name": "ppWrap",
        "description": "Receives a pointer to the IMFMediaType interface of the new media type that wraps the original media type. The caller must release the interface."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Validates the size of a buffer for a video format block.",
    "library": "Mfplat.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Mfapi.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is available on the following platforms if the Windows Media Format 11 SDK redistributable components are installed: ",
    "return_type": "HRESULT",
    "category": "Microsoft Media Foundation",
    "name": "MFValidateMediaTypeSize",
    "is_callback": 0,
    "dll": "Mfplat.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "GUID",
        "name": "FormatType",
        "description": "GUID that specifies the type of format block. It must be one of the following values: FORMAT_DvInfoFORMAT_MFVideoFormatFORMAT_MPEG2VideoFORMAT_MPEGStreamsFORMAT_MPEGVideoFORMAT_VideoInfoFORMAT_VideoInfo2FORMAT_WaveFormatEx"
      },
      {
        "in_out": "_In_",
        "type": "UINT8*",
        "name": "pBlock",
        "description": "Pointer to a buffer that contains the format block."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "cbSize",
        "description": "Size of the pBlock buffer, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Packs two UINT32 values into a UINT64 value.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps | Windows Store apps]",
    "header": "Mfapi.h",
    "return_value": "Returns the packed UINT64 value. ",
    "remarks": "This function stores two 32-bit values in a 64-bit value that is suitable for the IMFAttributes::SetUINT64 method. ",
    "return_type": "UINT64",
    "category": "Microsoft Media Foundation",
    "name": "Pack2UINT32AsUINT64",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unHigh",
        "description": "Value to store in the high-order 32 bits of the UINT64 value."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "unLow",
        "description": "Value to store in the low-order 32 bits of the UINT64 value."
      }
    ],
    "min_client": "Windows Vista [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Creates an instance of a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_CreateDevice pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDirect3DDevice9Ex*",
        "name": "pD3DDevice",
        "description": "A pointer to the IDirect3DDevice9Ex interface of the Direct3D device."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "phDevice",
        "description": "Receives a handle to the plug-in DXVA-HD device."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor plug-in.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_CreateVideoProcessor pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device that creates the video processor."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pVPGuid",
        "description": "A GUID that identifies the video processor to create."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "phVideoProcessor",
        "description": "Receives a handle to the software video processor."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys an instance of a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_DestroyDevice pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys a sofware Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_DestroyVideoProcessor pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets a private blit state from a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessBltStatePrivate pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      },
      {
        "in_out": "_Inout_",
        "type": "DXVAHD_BLT_STATE_PRIVATE_DATA*",
        "name": "pData",
        "description": "A pointer to a DXVAHD_BLT_STATE_PRIVATE_DATA structure. On input, the Guid member specifies the private state to query. On output, the structure contains the state information."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Gets the capabilities of one or more software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processors.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorCaps pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_CONTENT_DESC*",
        "name": "pContentDesc",
        "description": "A pointer to a DXVAHD_CONTENT_DESC structure that describes the video content."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_DEVICE_USAGE",
        "name": "Usage",
        "description": "A member of the DXVAHD_DEVICE_USAGE enumeration, describing how the video processor will be used."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Count",
        "description": "The number of elements in the pCaps array."
      },
      {
        "in_out": "_Out_",
        "type": "DXVAHD_VPCAPS*",
        "name": "pCaps",
        "description": "A pointer to an array of DXVAHD_VPCAPS structures. The function fills the structures with the capabilities of the plug-in video processors."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the custom rates that a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor supports.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorCustomRates pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pVPGuid",
        "description": "A GUID that identifies the video processor to query."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Count",
        "description": "The number of rates to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "DXVAHD_CUSTOM_RATE_DATA*",
        "name": "pRates",
        "description": "A pointer to an array of DXVAHD_CUSTOM_RATE_DATA structures. The Count parameter specifies the number of elements in the array. The function fills the array with a list of custom rates."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the capabilities of a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorDeviceCaps pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_CONTENT_DESC*",
        "name": "pContentDesc",
        "description": "A pointer to a DXVAHD_CONTENT_DESC structure that describes the video content."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_DEVICE_USAGE",
        "name": "Usage",
        "description": "A member of the DXVAHD_DEVICE_USAGE enumeration, describing how the device will be used. The value indicates the desired trade-off between speed and video quality."
      },
      {
        "in_out": "_Out_",
        "type": "DXVAHD_VPDEVCAPS*",
        "name": "pCaps",
        "description": "A pointer to a DXVAHD_VPDEVCAPS structure that receives the device capabilities."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Gets the supported range of image filter values from a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorFilterRange pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_FILTER",
        "name": "Filter",
        "description": "The type of image filter, specified as a member of the DXVAHD_FILTER enumeration."
      },
      {
        "in_out": "_Out_",
        "type": "DXVAHD_FILTER_RANGE_DATA*",
        "name": "pRange",
        "description": "A pointer to a DXVAHD_FILTER_RANGE_DATA structure. The function fills the structure with the range of values for the specified filter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Gets the input formats that are supported by a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorInputFormats pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_CONTENT_DESC*",
        "name": "pContentDesc",
        "description": "A pointer to a DXVAHD_CONTENT_DESC structure that describes the video content."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_DEVICE_USAGE",
        "name": "Usage",
        "description": "A member of the DXVAHD_DEVICE_USAGE enumeration, describing how the device will be used."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Count",
        "description": "The number of formats to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "D3DFORMAT*",
        "name": "pFormats",
        "description": "A pointer to an array of D3DFORMAT values. The Count parameter specifies the number of elements in the array. The method fills the array with a list of input formats."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Gets the output formats that are supported by a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessorOutputFormats pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_CONTENT_DESC*",
        "name": "pContentDesc",
        "description": "A pointer to a DXVAHD_CONTENT_DESC structure that describes the video content."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_DEVICE_USAGE",
        "name": "Usage",
        "description": "A member of the DXVAHD_DEVICE_USAGE enumeration, describing how the device will be used."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Count",
        "description": "The number of formats to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "D3DFORMAT*",
        "name": "pFormats",
        "description": "A pointer to an array of D3DFORMAT values. The Count parameter specifies the number of elements in the array. The function fills the array with a list of output formats."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Gets a private stream state from a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_GetVideoProcessStreamStatePrivate pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "StreamNumber",
        "description": "The zero-based index of the input stream."
      },
      {
        "in_out": "_Inout_",
        "type": "DXVAHD_STREAM_STATE_PRIVATE_DATA*",
        "name": "pData",
        "description": "A pointer to a DXVAHD_STREAM_STATE_PRIVATE_DATA structure. On input, the Guid member specifies the private state to query. On output, the structure contains the state information."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Pointer to a function that initializes a software plug-in device for Microsoft DirectX Video Acceleration High Definition (DXVA-HD).",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The DXVAHDSW_CALLBACKS structure contains pointers to callback functions. The software plug-in device must implement these callback functions. The  DXVA-HD device calls the PDXVAHDSW_Plugin function to get the callback function pointers from the plug-in device. ",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_Plugin pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Size",
        "description": "The size of the structure pointed to by the pCallbacks parameter, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pCallbacks",
        "description": "A pointer to an uninitialized DXVAHDSW_CALLBACKS structure. The function fills this structure with pointers to the plug-in device's callback functions."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Gets a private surface format from a software plug-in Microsoft DirectX Video Acceleration High Definition (DXVA-HD) device.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "This function is called when the application calls IDXVAHD_Device::CreateVideoSurface  if  the following conditions are true: This function enbles the plug-in device  to propose an alternate format with an equivalent memory layout. For example, if the application requests AYUV, the plug-in device might allocate a surface of type D3DFMT_A8R8G8B8. If the function succeeds, the CreateVideoSurface method attempts to create a surface with the format returned in pFormat. The following code shows how a plug-in device proposes D3DFMT_A8R8G8B8 as an alternative surface format for AYUV. ",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_ProposeVideoPrivateFormat pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "A handle to the plug-in DXVA-HD device."
      },
      {
        "in_out": "_Inout_",
        "type": "D3DFORMAT*",
        "name": "pFormat",
        "description": "A pointer to a D3DFORMAT value. On input, specifies the surface format that is requested by the application. On output, specifies the private surface format that the plug-in device proposes."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Sets a state parameter for blit operations by a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_SetVideoProcessBltState pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_BLT_STATE",
        "name": "State",
        "description": "The state parameter to set, specified as a member of the DXVAHD_BLT_STATE enumeration."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "DataSize",
        "description": "The size of the buffer pointed to by pData, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pData",
        "description": "A pointer to a buffer that contains the state data."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sets a state parameter for an input stream on a software Microsoft DirectX Video Acceleration High Definition (DXVA-HD) video processor.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_SetVideoProcessStreamState pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "StreamNumber",
        "description": "The zero-based index of the input stream."
      },
      {
        "in_out": "_In_",
        "type": "DXVAHD_STREAM_STATE",
        "name": "State",
        "description": "The state parameter to set, specified as a member of the DXVAHD_STREAM_STATE enumeration."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "DataSize",
        "description": "The size of the buffer pointed to by pData, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "const void*",
        "name": "pData",
        "description": "A pointer to a buffer that contains the state data."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Performs a video processing blit.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Dxvahd.h",
    "return_value": "If this function pointer succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "typedef HRESULT ( CALLBACK",
    "category": "Microsoft Media Foundation",
    "name": "PDXVAHDSW_VideoProcessBltHD pointer",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hVideoProcessor",
        "description": "A handle to the software DXVA-HD video processor."
      },
      {
        "in_out": "_In_",
        "type": "IDirect3DSurface9*",
        "name": "pOutputSurface",
        "description": "A pointer to the IDirect3DSurface9 interface of a Direct3D surface that receives the blit."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "OutputFrame",
        "description": "The frame number of the output video frame, indexed from zero."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "StreamCount",
        "description": "The number of input streams to process."
      },
      {
        "in_out": "_In_",
        "type": "const DXVAHD_STREAM_DATA*",
        "name": "pStreams",
        "description": "A pointer to an array of DXVAHD_STREAM_DATA structures that contain information about the input streams. The number of elements in the array is given in the StreamCount parameter."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  }
]