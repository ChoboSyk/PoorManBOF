[
  {
    "n_arguments": 3,
    "description": "Calls the default raw input procedure to provide default processing for any raw input messages that an application does not process. This function ensures that every message is processed. DefRawInputProc is called with the same parameters received by the window procedure.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: LRESULT If successful, the function returns S_OK. Otherwise it returns an error value. ",
    "remarks": "",
    "return_type": "LRESULT",
    "category": "Raw Input",
    "name": "DefRawInputProc",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PRAWINPUT*",
        "name": "paRawInput",
        "description": "Type: PRAWINPUT* An array of RAWINPUT structures."
      },
      {
        "in_out": "_In_",
        "type": "INT",
        "name": "nInput",
        "description": "Type: INT The number of RAWINPUT structures pointed to by  \t\t\t\t\tpaRawInput."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSizeHeader",
        "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Performs a buffered read of the raw input data.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If  \t\t\t\t\t\tpData is NULL and the function is successful, the return value is zero. If  \t\t\t\t\t\tpData is not NULL and the function is successful, the return value is the number of RAWINPUT structures written to  \t\t\t\t\t\tpData. If an error occurs, the return value is (UINT)-1. Call GetLastError for the error code. ",
    "remarks": "Using GetRawInputBuffer, the raw input data is buffered in the array of RAWINPUT structures. For an unbuffered read, use the GetMessage function to read in the raw input data. The NEXTRAWINPUTBLOCK macro allows an application to traverse an array of RAWINPUT structures. ",
    "return_type": "UINT",
    "category": "Raw Input",
    "name": "GetRawInputBuffer",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "PRAWINPUT",
        "name": "pData",
        "description": "Type: PRAWINPUT A pointer to a buffer of RAWINPUT structures that contain the raw input data. If NULL, the minimum required buffer, in bytes, is returned in *pcbSize."
      },
      {
        "in_out": "_Inout_",
        "type": "PUINT",
        "name": "pcbSize",
        "description": "Type: PUINT The size, in bytes, of a RAWINPUT structure."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSizeHeader",
        "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the raw input from the specified device.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If  \t\t\t\t\t\tpData is NULL and the function is successful, the return value is 0. If  \t\t\t\t\t\tpData is not NULL and the function is successful, the return value is the number of bytes copied into pData. If there is an error, the return value is (UINT)-1. ",
    "remarks": "GetRawInputData gets the raw input one RAWINPUT structure at a time. In contrast, GetRawInputBuffer gets an array of RAWINPUT structures. ",
    "return_type": "UINT",
    "category": "Raw Input",
    "name": "GetRawInputData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HRAWINPUT",
        "name": "hRawInput",
        "description": "Type: HRAWINPUT A handle to the RAWINPUT structure. This comes from the  \t\t\t\t\tlParam in WM_INPUT."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uiCommand",
        "description": "Type: UINT The command flag. This parameter can be one of the following values.   ValueMeaning  RID_HEADER 0x10000005   Get the header information from the RAWINPUT structure.   RID_INPUT 0x10000003   Get the raw data from the RAWINPUT structure."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPVOID",
        "name": "pData",
        "description": "Type: LPVOID A pointer to the data that comes from the RAWINPUT structure. This depends on the value of  \t\t\t\t\tuiCommand. If  \t\t\t\t\tpData is NULL, the required size of the buffer is returned in *pcbSize."
      },
      {
        "in_out": "_Inout_",
        "type": "PUINT",
        "name": "pcbSize",
        "description": "Type: PUINT The size, in bytes, of the data in  \t\t\t\t\tpData."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSizeHeader",
        "description": "Type: UINT The size, in bytes, of the RAWINPUTHEADER structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about the raw input device.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If successful, this function returns a non-negative number indicating the number of bytes copied to  \t\t\t\t\t\tpData. If  \t\t\t\t\t\tpData is not large enough for the data, the function returns -1. If  \t\t\t\t\t\tpData is NULL, the function returns a value of zero. In both of these cases,  \t\t\t\t\t\tpcbSize is set to the minimum size required for the  \t\t\t\t\t\tpData buffer. Call GetLastError to identify any other errors. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Raw Input",
    "name": "GetRawInputDeviceInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "hDevice",
        "description": "Type: HANDLE A handle to the raw input device. This comes from the hDevice member of RAWINPUTHEADER or from GetRawInputDeviceList."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uiCommand",
        "description": "Type: UINT Specifies what data will be returned in  \t\t\t\t\tpData. This parameter can be one of the following values.   ValueMeaning  RIDI_DEVICENAME 0x20000007   pData points to a string that contains the device name.  For this  \t\t\t\t\t\tuiCommand only, the value in  \t\t\t\t\t\tpcbSize is the character count (not the byte count).   RIDI_DEVICEINFO 0x2000000b   pData points to an RID_DEVICE_INFO structure.   RIDI_PREPARSEDDATA 0x20000005   pData points to the previously parsed data."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPVOID",
        "name": "pData",
        "description": "Type: LPVOID A pointer to a buffer that contains the information specified by  \t\t\t\t\tuiCommand. If  \t\t\t\t\tuiCommand is RIDI_DEVICEINFO, set the cbSize member of RID_DEVICE_INFO to sizeof(RID_DEVICE_INFO) before calling GetRawInputDeviceInfo."
      },
      {
        "in_out": "_Inout_",
        "type": "PUINT",
        "name": "pcbSize",
        "description": "Type: PUINT The size, in bytes, of the data in  \t\t\t\t\tpData."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates the raw input devices attached to the system.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If the function is successful, the return value is the number of devices stored in the buffer pointed to by  \t\t\t\t\t\tpRawInputDeviceList. On any other error, the function returns (UINT) -1 and  \t\t\t\t\t\tGetLastError returns the error indication. ",
    "remarks": "The devices returned from this function are the mouse, the keyboard, and other Human Interface Device (HID) devices. To get more detailed information about the attached devices, call GetRawInputDeviceInfo using the hDevice from RAWINPUTDEVICELIST. The following sample code shows a typical call to GetRawInputDeviceList: ",
    "return_type": "UINT",
    "category": "Raw Input",
    "name": "GetRawInputDeviceList",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "PRAWINPUTDEVICELIST",
        "name": "pRawInputDeviceList",
        "description": "Type: PRAWINPUTDEVICELIST An array of RAWINPUTDEVICELIST structures for the devices attached to the system. If NULL, the number of devices are returned in *puiNumDevices."
      },
      {
        "in_out": "_Inout_",
        "type": "PUINT",
        "name": "puiNumDevices",
        "description": "Type: PUINT If pRawInputDeviceList is NULL, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of RAWINPUTDEVICELIST structures that can be contained in the buffer to which pRawInputDeviceList points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with ERROR_INSUFFICIENT_BUFFER."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSize",
        "description": "Type: UINT The size of a RAWINPUTDEVICELIST structure, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the information about the raw input devices for the current application.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If successful, the function returns a non-negative number that is the number of RAWINPUTDEVICE structures written to the buffer. If the pRawInputDevices buffer is too small or NULL, the function sets the last error as ERROR_INSUFFICIENT_BUFFER, returns -1, and sets puiNumDevices to the required number of devices. If the function fails for any other reason, it returns -1. For more details, call GetLastError. ",
    "remarks": "To receive raw input from a device, an application must register it by using RegisterRawInputDevices. ",
    "return_type": "UINT",
    "category": "Raw Input",
    "name": "GetRegisteredRawInputDevices",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "PRAWINPUTDEVICE",
        "name": "pRawInputDevices",
        "description": "Type: PRAWINPUTDEVICE An array of RAWINPUTDEVICE structures for the application."
      },
      {
        "in_out": "_Inout_",
        "type": "PUINT",
        "name": "puiNumDevices",
        "description": "Type: PUINT The number of RAWINPUTDEVICE structures in *pRawInputDevices."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSize",
        "description": "Type: UINT The size, in bytes, of a RAWINPUTDEVICE structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Registers the devices that supply the raw input data.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL TRUE if the function succeeds; otherwise, FALSE. If the function fails, call GetLastError for more information. ",
    "remarks": "To receive WM_INPUT messages, an application must first register the raw input devices using RegisterRawInputDevices. By default, an application does not receive raw input. To receive WM_INPUT_DEVICE_CHANGE messages, an application must specify the  RIDEV_DEVNOTIFY flag for each device class that is specified by the usUsagePage and usUsage fields of the  RAWINPUTDEVICE structure  .  By default, an application does not receive  WM_INPUT_DEVICE_CHANGE notifications for raw input device arrival and removal. If a RAWINPUTDEVICE structure has the RIDEV_REMOVE flag set and the hwndTarget parameter is not set to NULL, then parameter validation will fail. ",
    "return_type": "BOOL",
    "category": "Raw Input",
    "name": "RegisterRawInputDevices",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCRAWINPUTDEVICE",
        "name": "pRawInputDevices",
        "description": "Type: PCRAWINPUTDEVICE An array of RAWINPUTDEVICE structures that represent the devices that supply the raw input."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uiNumDevices",
        "description": "Type: UINT The number of RAWINPUTDEVICE structures pointed to by pRawInputDevices."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSize",
        "description": "Type: UINT The size, in bytes, of a RAWINPUTDEVICE structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]