[
  {
    "n_arguments": 3,
    "description": "Abandons the specified asynchronous transaction and releases all resources associated with the transaction.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "Only a Dynamic Data Exchange (DDE) client application should call DdeAbandonTransaction. If the server application responds to the transaction after the client has called DdeAbandonTransaction, the system discards the transaction results. This function has no effect on synchronous transactions. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeAbandonTransaction",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation in which the transaction was initiated. If this parameter is 0L, all transactions are abandoned (that is, the  \t\t\t\t\tidTransaction parameter is ignored)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idTransaction",
        "description": "Type: DWORD The identifier of the transaction to be abandoned. If this parameter is 0L, all active transactions in the specified conversation are abandoned."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Provides access to the data in the specified Dynamic Data Exchange (DDE) object. An application must call the DdeUnaccessData function when it has finished accessing the data in the object.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: LPBYTE If the function succeeds, the return value is a pointer to the first byte of data in the DDE object. If the function fails, the return value is NULL. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "If the  \t\t\t\thData parameter has not been passed to a Dynamic Data Exchange Management Library (DDEML) function, an application can use the pointer returned by DdeAccessData for read-write access to the DDE object. If  \t\t\t\thData has already been passed to a DDEML function, the pointer should be used only for read access to the memory object. ",
    "return_type": "LPBYTE",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeAccessData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hData",
        "description": "Type: HDDEDATA A handle to the DDE object to be accessed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "pcbDataSize",
        "description": "Type: LPDWORD A pointer to a variable that receives the size, in bytes, of the DDE object identified by the  \t\t\t\t\thData parameter. If this parameter is NULL, no size information is returned."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Adds data to the specified Dynamic Data Exchange (DDE) object. An application can add data starting at any offset from the beginning of the object. If new data overlaps data already in the object, the new data overwrites the old data in the bytes where the overlap occurs. The contents of locations in the object that have not been written to are undefined.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HDDEDATA If the function succeeds, the return value is a new handle to the DDE object. The new handle is used in all references to the object. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "After a data handle has been used as a parameter in another Dynamic Data Exchange Management Library function or has been returned by a DDE callback function, the handle can be used only for read access to the DDE object identified by the handle. If the amount of memory originally allocated is less than is needed to hold the added data, DdeAddData reallocates a global memory object of the appropriate size. ",
    "return_type": "HDDEDATA",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeAddData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hData",
        "description": "Type: HDDEDATA A handle to the DDE object that receives additional data."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "pSrc",
        "description": "Type: LPBYTE The data to be added to the DDE object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "Type: DWORD The length, in bytes, of the data to be added to the DDE object, including the terminating NULL, if the data is a string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOff",
        "description": "Type: DWORD An offset, in bytes, from the beginning of the DDE object. The additional data is copied to the object beginning at this offset."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "An application-defined callback function used with the Dynamic Data Exchange Management Library (DDEML) functions. It processes Dynamic Data Exchange (DDE) transactions. The  \t\t\tPFNCALLBACK type defines a pointer to this callback function. DdeCallback is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HDDEDATA The return value depends on the transaction class. For more information about the return values, see descriptions of the individual transaction types. ",
    "remarks": "The callback function is called asynchronously for transactions that do not involve the creation or termination of conversations. An application that does not frequently accept incoming messages will have reduced DDE performance because the Dynamic Data Exchange Management Library (DDEML) uses messages to initiate transactions. An application must register the callback function by specifying a pointer to the function in a call to the DdeInitialize function. ",
    "return_type": "HDDEDATA CALLBACK",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uType",
        "description": "Type: UINT The type of the current transaction. This parameter consists of a combination of transaction class flags and transaction type flags. The following table describes each of the transaction classes and provides a list of the transaction types in each class. For information about a specific transaction type, see the individual description of that type.   XCLASS_BOOL   A DDE callback function should return TRUE or FALSE when it finishes processing a transaction that belongs to this class. The XCLASS_BOOL transaction class consists of the following types:                             XTYP_ADVSTART   XTYP_CONNECT    XCLASS_DATA   A DDE callback function should return a DDE handle, the CBR_BLOCK return code, or NULL when it finishes processing a transaction that belongs to this class. The XCLASS_DATA transaction class consists of the following types:                             XTYP_ADVREQ   XTYP_REQUEST   XTYP_WILDCONNECT    XCLASS_FLAGS   A DDE callback function should return DDE_FACK, DDE_FBUSY, or DDE_FNOTPROCESSED when it finishes processing a transaction that belongs to this class. The XCLASS_FLAGS transaction class consists of the following types:                            XTYP_ADVDATA   XTYP_EXECUTE   XTYP_POKE    XCLASS_NOTIFICATION   The transaction types that belong to this class are for notification purposes only. The return value from the callback function is ignored. The XCLASS_NOTIFICATION transaction class consists of the following types:  \t\t\t\t\t\t   XTYP_ADVSTOP   XTYP_CONNECT_CONFIRM   XTYP_DISCONNECT   XTYP_ERROR   XTYP_MONITOR   XTYP_REGISTER   XTYP_XACT_COMPLETE   XTYP_UNREGISTER"
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFmt",
        "description": "Type: UINT The format in which data is sent or received."
      },
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hconv",
        "description": "Type: HCONV A handle to the conversation associated with the current transaction."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz1",
        "description": "Type: HSZ A handle to a string. The meaning of this parameter depends on the type of the current transaction. For the meaning of this parameter, see the description of the transaction type."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz2",
        "description": "Type: HSZ A handle to a string. The meaning of this parameter depends on the type of the current transaction. For the meaning of this parameter, see the description of the transaction type."
      },
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hdata",
        "description": "Type: HDDEDATA A handle to DDE data. The meaning of this parameter depends on the type of the current transaction. For the meaning of this parameter, see the description of the transaction type."
      },
      {
        "in_out": "_In_",
        "type": "ULONG_PTR",
        "name": "dwData1",
        "description": "Type: ULONG_PTR Transaction-specific data. For the meaning of this parameter, see the description of the transaction type."
      },
      {
        "in_out": "_In_",
        "type": "ULONG_PTR",
        "name": "dwData2",
        "description": "Type: ULONG_PTR Transaction-specific data. For the meaning of this parameter, see the description of the transaction type."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Begins a data transaction between a client and a server. Only a Dynamic Data Exchange (DDE) client application can call this function, and the application can use it only after establishing a conversation with the server.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HDDEDATA If the function succeeds, the return value is a data handle that identifies the data for successful synchronous transactions in which the client expects data from the server. The return value is nonzero for successful asynchronous transactions and for synchronous transactions in which the client does not expect data. The return value is zero for all unsuccessful transactions. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "When an application has finished using the data handle returned by DdeClientTransaction, the application should free the handle by calling the DdeFreeDataHandle function. Transactions can be synchronous or asynchronous. During a synchronous transaction, DdeClientTransaction does not return until the transaction either completes successfully or fails. Synchronous transactions cause a client to enter a modal loop while waiting for various asynchronous events. Because of this, a client application can still respond to user input while waiting on a synchronous transaction, but the application cannot begin a second synchronous transaction because of the activity associated with the first. DdeClientTransaction fails if any instance of the same task has a synchronous transaction already in progress. During an asynchronous transaction, DdeClientTransaction returns after the transaction has begun, passing a transaction identifier for reference. When the server's DDE callback function finishes processing an asynchronous transaction, the system sends an  \t\t\t\tXTYP_XACT_COMPLETE transaction to the client. This transaction provides the client with the results of the asynchronous transaction that it initiated by calling DdeClientTransaction. A client application can choose to abandon an asynchronous transaction by calling the DdeAbandonTransaction function. ",
    "return_type": "HDDEDATA",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeClientTransaction",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPBYTE",
        "name": "pData",
        "description": "Type: LPBYTE The beginning of the data the client must pass to the server.  Optionally, an application can specify the data handle (HDDEDATA) to pass to the server and in that case the  \t\t\t\t\t\tcbData parameter should be set to -1. This parameter is required only if the  \t\t\t\t\t\twType parameter is XTYP_EXECUTE or XTYP_POKE. Otherwise, this parameter should be NULL.  For the optional usage of this parameter, XTYP_POKE transactions where  \t\t\t\t\t\tpData is a data handle, the handle must have been created by a previous call to the DdeCreateDataHandle function, employing the same data format specified in the  \t\t\t\t\t\twFmt parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbData",
        "description": "Type: DWORD The length, in bytes, of the data pointed to by the  \t\t\t\t\tpData parameter, including the terminating NULL, if the data is a string. A value of -1 indicates that  \t\t\t\t\tpData is a data handle that identifies the data being sent."
      },
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation in which the transaction is to take place."
      },
      {
        "in_out": "_In_opt_",
        "type": "HSZ",
        "name": "hszItem",
        "description": "Type: HSZ A handle to the data item for which data is being exchanged during the transaction. This handle must have been created by a previous call to the DdeCreateStringHandle function. This parameter is ignored (and should be set to 0L) if the  \t\t\t\t\twType parameter is  \t\t\t\t\tXTYP_EXECUTE."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wFmt",
        "description": "Type: UINT The standard clipboard format in which the data item is being submitted or requested.  If the transaction specified by the wType parameter does not pass data or is  \t\t\t\t\t\tXTYP_EXECUTE, this parameter should be zero.  If the transaction specified by the  \t\t\t\t\t\twType parameter references non-execute DDE data ( \t\t\t\t\t\tXTYP_POKE, XTYP_ADVSTART, XTYP_ADVSTOP,  \t\t\t\t\t\tXTYP_REQUEST), the  \t\t\t\t\t\twFmt value must be either a valid predefined (CF_) DDE format or a valid registered clipboard format."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wType",
        "description": "Type: UINT The transaction type. This parameter can be one of the following values.   ValueMeaning  XTYP_ADVSTART 0x1030   Begins an advise loop. Any number of distinct advise loops can exist within a conversation. An application can alter the advise loop type by combining the XTYP_ADVSTART transaction type with one or more of the following flags:  XTYPF_NODATA. Instructs the server to notify the client of any data changes without actually sending the data. This flag gives the client the option of ignoring the notification or requesting the changed data from the server. XTYPF_ACKREQ. Instructs the server to wait until the client acknowledges that it received the previous data item before sending the next data item. This flag prevents a fast server from sending data faster than the client can process it.    XTYP_ADVSTOP 0x8040   Ends an advise loop.   XTYP_EXECUTE 0x4050   Begins an execute transaction.   XTYP_POKE 0x4090   Begins a poke transaction.   XTYP_REQUEST 0x20B0   Begins a request transaction."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTimeout",
        "description": "Type: DWORD The maximum amount of time, in milliseconds, that the client will wait for a response from the server application in a synchronous transaction. This parameter should be TIMEOUT_ASYNC for asynchronous transactions."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "pdwResult",
        "description": "Type: LPDWORD A pointer to a variable that receives the result of the transaction. An application that does not check the result can use NULL for this value. For synchronous transactions, the low-order word of this variable contains any applicable DDE_ flags resulting from the transaction. This provides support for applications dependent on DDE_APPSTATUS bits. It is, however, recommended that applications no longer use these bits because they may not be supported in future versions of the Dynamic Data Exchange Management Library (DDEML). For asynchronous transactions, this variable is filled with a unique transaction identifier for use with the DdeAbandonTransaction function and the XTYP_XACT_COMPLETE transaction."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Compares the values of two string handles. The value of a string handle is not related to the case of the associated string.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: int The return value can be one of the following values.  ",
    "remarks": "An application that must do a case-sensitive comparison of two string handles should compare the string handles directly. An application should use DdeCmpStringHandles for all other comparisons to preserve the case-insensitive nature of Dynamic Data Exchange (DDE). DdeCmpStringHandles cannot be used to sort string handles alphabetically. ",
    "return_type": "int",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeCmpStringHandles",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz1",
        "description": "Type: HSZ A handle to the first string."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz2",
        "description": "Type: HSZ A handle to the second string."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Establishes a conversation with a server application that supports the specified service name and topic name pair. If more than one such server exists, the system selects only one.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HCONV If the function succeeds, the return value is the handle to the established conversation. If the function fails, the return value is 0L. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "The client application cannot make assumptions regarding the server selected. If an instance-specific name is specified in the  \t\t\t\thszService parameter, a conversation is established with only the specified instance. Instance-specific service names are passed to an application's Dynamic Data Exchange (DDE) callback function during the XTYP_REGISTER and XTYP_UNREGISTER transactions. All members of the default CONVCONTEXT structure are set to zero except  \t\t\t\tcb, which specifies the size of the structure, and  \t\t\t\tiCodePage, which specifies CP_WINANSI (the default code page) or CP_WINUNICODE, depending on whether the ANSI or Unicode version of the DdeInitialize function was called by the client application. ",
    "return_type": "HCONV",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeConnect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszService",
        "description": "Type: HSZ A handle to the string that specifies the service name of the server application with which a conversation is to be established. This handle must have been created by a previous call to the DdeCreateStringHandle function. If this parameter is 0L, a conversation is established with any available server."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszTopic",
        "description": "Type: HSZ A handle to the string that specifies the name of the topic on which a conversation is to be established. This handle must have been created by a previous call to DdeCreateStringHandle. If this parameter is 0L, a conversation on any topic supported by the selected server is established."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCONVCONTEXT",
        "name": "pCC",
        "description": "Type: PCONVCONTEXT A pointer to the CONVCONTEXT structure that contains conversation context information. If this parameter is NULL, the server receives the default CONVCONTEXT structure during the  \t\t\t\t\tXTYP_CONNECT or  \t\t\t\t\tXTYP_WILDCONNECT transaction."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Establishes a conversation with all server applications that support the specified service name and topic name pair. An application can also use this function to obtain a list of conversation handles by passing the function an existing conversation handle. The Dynamic Data Exchange Management Library removes the handles of any terminated conversations from the conversation list. The resulting conversation list contains the handles of all currently established conversations that support the specified service name and topic name.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HCONVLIST If the function succeeds, the return value is the handle to a new conversation list. If the function fails, the return value is 0L. The handle to the old conversation list is no longer valid. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "An application must free the conversation list handle returned by the DdeConnectList function, regardless of whether any conversation handles within the list are active. To free the handle, an application can call DdeDisconnectList. All members of the default CONVCONTEXT structure are set to zero except  \t\t\t\tcb, specifying the size of the structure, and  \t\t\t\tiCodePage, specifying CP_WINANSI (the default code page) or CP_WINUNICODE, depending on whether the ANSI or Unicode version of the DdeInitialize function was called by the client application. ",
    "return_type": "HCONVLIST",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeConnectList",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszService",
        "description": "Type: HSZ A handle to the string that specifies the service name of the server application with which a conversation is to be established. If this parameter is 0L, the system attempts to establish conversations with all available servers that support the specified topic name."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszTopic",
        "description": "Type: HSZ A handle to the string that specifies the name of the topic on which a conversation is to be established. This handle must have been created by a previous call to the DdeCreateStringHandle function. If this parameter is 0L, the system will attempt to establish conversations on all topics supported by the selected server (or servers)."
      },
      {
        "in_out": "_In_",
        "type": "HCONVLIST",
        "name": "hConvList",
        "description": "Type: HCONVLIST A handle to the conversation list to be enumerated. This parameter should be 0L if a new conversation list is to be established."
      },
      {
        "in_out": "_In_opt_",
        "type": "PCONVCONTEXT",
        "name": "pCC",
        "description": "Type: PCONVCONTEXT A pointer to the CONVCONTEXT structure that contains conversation-context information. If this parameter is NULL, the server receives the default CONVCONTEXT structure during the  \t\t\t\t\tXTYP_CONNECT or  \t\t\t\t\tXTYP_WILDCONNECT transaction."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Creates a Dynamic Data Exchange (DDE) object and fills the object with data from the specified buffer. A DDE application uses this function during transactions that involve passing data to the partner application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HDDEDATA If the function succeeds, the return value is a data handle. If the function fails, the return value is 0L. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "Any unfilled locations in the DDE object are undefined. After a data handle has been used as a parameter in another DDEML function or has been returned by a DDE callback function, the handle can be used only for read access to the DDE object identified by the handle. ",
    "return_type": "HDDEDATA",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeCreateDataHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPBYTE",
        "name": "pSrc",
        "description": "Type: LPBYTE The data to be copied to the DDE object. If this parameter is NULL, no data is copied to the object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "Type: DWORD The amount of memory, in bytes, to copy from the buffer pointed to by  \t\t\t\t\tpSrc. (include the terminating NULL, if the data is a string). If this parameter is zero, the  \t\t\t\t\tpSrc parameter is ignored."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOff",
        "description": "Type: DWORD An offset, in bytes, from the beginning of the buffer pointed to by the  \t\t\t\t\tpSrc parameter. The data beginning at this offset is copied from the buffer to the DDE object."
      },
      {
        "in_out": "_In_opt_",
        "type": "HSZ",
        "name": "hszItem",
        "description": "Type: HSZ A handle to the string that specifies the data item corresponding to the DDE object. This handle must have been created by a previous call to the DdeCreateStringHandle function. If the data handle is to be used in an XTYP_EXECUTE transaction, this parameter must be 0L."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wFmt",
        "description": "Type: UINT The standard clipboard format of the data."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "afCmd",
        "description": "Type: UINT The creation flags. This parameter can be HDATA_APPOWNED, which specifies that the server application calling the DdeCreateDataHandle function owns the data handle this function creates. This flag enables the application to share the data handle with other DDEML applications rather than creating a separate handle to pass to each application. If this flag is specified, the application must eventually free the shared memory object associated with the handle by using the DdeFreeDataHandle function. If this flag is not specified, the handle becomes invalid in the application that created the handle after the data handle is returned by the application's DDE callback function or is used as a parameter in another DDEML function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a handle that identifies the specified string. A Dynamic Data Exchange (DDE) client or server application can pass the string handle as a parameter to other Dynamic Data Exchange Management Library (DDEML) functions.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HSZ If the function succeeds, the return value is a string handle. If the function fails, the return value is 0L. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "The value of a string handle is not related to the case of the string it identifies. When an application either creates a string handle or receives one in the callback function and then uses the DdeKeepStringHandle function to keep it, the application must free that string handle when it is no longer needed. An instance-specific string handle cannot be mapped from string handle to string and back to string handle. This is shown in the following example, in which the DdeQueryString function creates a string from a string handle and DdeCreateStringHandle creates a string handle from that string, but the two handles are not the same: ",
    "return_type": "HSZ",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeCreateStringHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "psz",
        "description": "Type: LPTSTR The null-terminated string for which a handle is to be created. This string can be up to 255 characters. The reason for this limit is that DDEML string management functions are implemented using atoms."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iCodePage",
        "description": "Type: int The code page to be used to render the string. This value should be either CP_WINANSI (the default code page) or CP_WINUNICODE, depending on whether the ANSI or Unicode version of DdeInitialize was called by the client application."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Terminates a conversation started by either the DdeConnect or DdeConnectList function and invalidates the specified conversation handle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "Any incomplete transactions started before calling DdeDisconnect are immediately abandoned. The XTYP_DISCONNECT transaction is sent to the Dynamic Data Exchange (DDE) callback function of the partner in the conversation. Generally, only client applications must terminate conversations. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeDisconnect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the active conversation to be terminated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys the specified conversation list and terminates all conversations associated with the list.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "An application can use the DdeDisconnect function to terminate individual conversations in the list. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeDisconnectList",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONVLIST",
        "name": "hConvList",
        "description": "Type: HCONVLIST A handle to the conversation list. This handle must have been created by a previous call to the DdeConnectList function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables or disables transactions for a specific conversation or for all conversations currently established by the calling application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. If the  \t\t\t\t\t\twCmd parameter is EC_QUERYWAITING, and the application transaction queue contains one or more unprocessed transactions that are not being processed, the return value is TRUE; otherwise, it is FALSE. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "An application can disable transactions for a specific conversation by returning the CBR_BLOCK return code from its Dynamic Data Exchange (DDE) callback function. When you reenable the conversation by using the DdeEnableCallback function, the operating system generates the same transaction that was in process when the conversation was disabled. Using the EC_QUERYWAITING flag does not change the enable state of the conversation and does not cause transactions to be issued within the context of the call to DdeEnableCallback. If DdeEnableCallback is called with EC_QUERYWAITING and the function returns a nonzero, an application should try to quickly allow message processing, return from its callback, or enable callbacks. Such a result does not guarantee that subsequent callbacks will be made. Calling DdeEnableCallback with EC_QUERYWAITING lets an application with blocked callbacks determine whether there are any transactions pending on the blocked conversation. Of course, even if such a call returns zero, an application should always process messages in a timely manner. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeEnableCallback",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application-instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation to enable or disable. If this parameter is NULL, the function affects all conversations."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wCmd",
        "description": "Type: UINT The function code. This parameter can be one of the following values.   ValueMeaning  EC_ENABLEALL 0   Enables all transactions for the specified conversation.   EC_ENABLEONE 0x0080   Enables one transaction for the specified conversation.   EC_DISABLE 0x0008   Disables all blockable transactions for the specified conversation.  A server application can disable the following transactions:   XTYP_ADVSTART   XTYP_ADVSTOP   XTYP_EXECUTE   XTYP_POKE   XTYP_REQUEST   A client application can disable the following transactions:   XTYP_ADVDATA   XTYP_XACT_COMPLETE     EC_QUERYWAITING 2   Determines whether any transactions are in the queue for the specified conversation."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees a Dynamic Data Exchange (DDE) object and deletes the data handle associated with the object.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "An application must call DdeFreeDataHandle under the following circumstances: The system automatically frees an unowned object when its handle is returned by a DDE callback function or is used as a parameter in a DDEML function. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeFreeDataHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hData",
        "description": "Type: HDDEDATA A handle to the DDE object to be freed. This handle must have been created by a previous call to the DdeCreateDataHandle function or returned by the DdeClientTransaction function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees a string handle in the calling application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "An application can free string handles it creates with DdeCreateStringHandle but should not free those that the system passed to the application's Dynamic Data Exchange (DDE) callback function or those returned in the CONVINFO structure by the DdeQueryConvInfo function. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeFreeStringHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz",
        "description": "Type: HSZ A handle to the string handle to be freed. This handle must have been created by a previous call to the DdeCreateStringHandle function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Copies data from the specified Dynamic Data Exchange (DDE) object to the specified local buffer.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: DWORD If the  \t\t\t\t\t\tpDst parameter points to a buffer, the return value is the size, in bytes, of the memory object associated with the data handle or the size specified in the  \t\t\t\t\t\tcbMax parameter, whichever is lower. If the  \t\t\t\t\t\tpDst parameter is NULL, the return value is the size, in bytes, of the memory object associated with the data handle. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeGetData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hData",
        "description": "Type: HDDEDATA A handle to the DDE object that contains the data to copy."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPBYTE",
        "name": "pDst",
        "description": "Type: LPBYTE A pointer to the buffer that receives the data. If this parameter is NULL, the DdeGetData function returns the amount of data, in bytes, that would be copied to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbMax",
        "description": "Type: DWORD The maximum amount of data, in bytes, to copy to the buffer pointed to by the  \t\t\t\t\tpDst parameter. Typically, this parameter specifies the length of the buffer pointed to by  \t\t\t\t\tpDst."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbOff",
        "description": "Type: DWORD An offset within the DDE object. Data is copied from the object beginning at this offset."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the most recent error code set by the failure of a Dynamic Data Exchange Management Library (DDEML) function and resets the error code to DMLERR_NO_ERROR.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the last error code, which can be one of the following values.  ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeGetLastError",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Impersonates a Dynamic Data Exchange (DDE) client application in a DDE client conversation.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Impersonation is the ability of a process to take on the security attributes of another process. When a client in a DDE conversation requests information from a DDE server, the server impersonates the client. When the server requests access to an object, the system verifies the access against the client's security attributes. When the impersonation is complete, the server normally calls the RevertToSelf function. If the call to DdeImpersonateClient fails for any reason, the client is not impersonated and the client request is made in the security context of the calling process. If the calling process is running as a highly privileged account, such as LocalSystem, or as a member of an administrative group, the user may be able to perform actions that would otherwise be disallowed. Therefore it is important that you always check the return value of the call, and if it fails to raise an error, do not continue execution of the client request. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeImpersonateClient",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the DDE client conversation to be impersonated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Registers an application with the Dynamic Data Exchange Management Library (DDEML). An application must call this function before calling any other Dynamic Data Exchange Management Library (DDEML) function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is DMLERR_NO_ERROR. If the function fails, the return value is one of the following values: ",
    "remarks": "An application that uses multiple instances of the DDEML must not pass DDEML objects between instances. A DDE monitoring application should not attempt to perform DDE operations (establish conversations, issue transactions, and so on) within the context of the same application instance. A synchronous transaction fails with a DMLERR_REENTRANCY error if any instance of the same task has a synchronous transaction already in progress. The CBF_FAIL_ALLSVRXACTIONS flag causes the DDEML to filter all server transactions and can be changed by a subsequent call to DdeInitialize. The APPCMD_CLIENTONLY flag prevents the DDEML from creating key resources for the server and cannot be changed by a subsequent call to DdeInitialize. There is an ANSI version and a Unicode version of DdeInitialize. The version called determines the type of the window procedures used to control DDE conversations (ANSI or Unicode), and the default value for the  \t\t\t\tiCodePage member of the  \t\t\t\tCONVCONTEXT structure (CP_WINANSI or CP_WINUNICODE). ",
    "return_type": "UINT",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeInitialize",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pidInst",
        "description": "Type: LPDWORD The application instance identifier. At initialization, this parameter should point to 0. If the function succeeds, this parameter points to the instance identifier for the application. This value should be passed as the  \t\t\t\t\tidInst parameter in all other DDEML functions that require it. If an application uses multiple instances of the DDEML dynamic-link library (DLL), the application should provide a different callback function for each instance.  If  \t\t\t\t\tpidInst points to a nonzero value, reinitialization of the DDEML is implied. In this case,  \t\t\t\t\tpidInst must point to a valid application-instance identifier."
      },
      {
        "in_out": "_In_",
        "type": "PFNCALLBACK",
        "name": "pfnCallback",
        "description": "Type: PFNCALLBACK A pointer to the application-defined DDE callback function. This function processes DDE transactions sent by the system. For more information, see the DdeCallback callback function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "afCmd",
        "description": "Type: DWORD A set of APPCMD_, CBF_, and MF_ flags. The APPCMD_ flags provide special instructions to DdeInitialize. The CBF_ flags specify filters that prevent specific types of transactions from reaching the callback function. The MF_ flags specify the types of DDE activity that a DDE monitoring application monitors. Using these flags enhances the performance of a DDE application by eliminating unnecessary calls to the callback function.  This parameter can be one or more of the following values.   ValueMeaning  APPCLASS_MONITOR 0x00000001L   Makes it possible for the application to monitor DDE activity in the system. This flag is for use by DDE monitoring applications. The application specifies the types of DDE activity to monitor by combining one or more monitor flags with the APPCLASS_MONITOR flag. For details, see the following Remarks section.   APPCLASS_STANDARD 0x00000000L   Registers the application as a standard (nonmonitoring) DDEML application.   APPCMD_CLIENTONLY 0x00000010L   Prevents the application from becoming a server in a DDE conversation. The application can only be a client. This flag reduces consumption of resources by the DDEML. It includes the functionality of the CBF_FAIL_ALLSVRXACTIONS flag.   APPCMD_FILTERINITS 0x00000020L   Prevents the DDEML from sending XTYP_CONNECT and XTYP_WILDCONNECT transactions to the application until the application has created its string handles and registered its service names or has turned off filtering by a subsequent call to the DdeNameService or DdeInitialize function. This flag is always in effect when an application calls DdeInitialize for the first time, regardless of whether the application specifies the flag. On subsequent calls to DdeInitialize, not specifying this flag turns off the application's service-name filters, but specifying it turns on the application's service name filters.   CBF_FAIL_ALLSVRXACTIONS 0x0003f000   Prevents the callback function from receiving server transactions. The system returns DDE_FNOTPROCESSED to each client that sends a transaction to this application. This flag is equivalent to combining all CBF_FAIL_ flags.   CBF_FAIL_ADVISES 0x00004000   Prevents the callback function from receiving XTYP_ADVSTART and XTYP_ADVSTOP transactions. The system returns DDE_FNOTPROCESSED to each client that sends an XTYP_ADVSTART or XTYP_ADVSTOP transaction to the server.   CBF_FAIL_CONNECTIONS 0x00002000   Prevents the callback function from receiving XTYP_CONNECT and XTYP_WILDCONNECT transactions.   CBF_FAIL_EXECUTES 0x00008000   Prevents the callback function from receiving XTYP_EXECUTE transactions. The system returns DDE_FNOTPROCESSED to a client that sends an  \t\t\t\t\t\tXTYP_EXECUTE transaction to the server.   CBF_FAIL_POKES 0x00010000   Prevents the callback function from receiving XTYP_POKE transactions. The system returns DDE_FNOTPROCESSED to a client that sends an  \t\t\t\t\t\tXTYP_POKE transaction to the server.   CBF_FAIL_REQUESTS 0x00020000   Prevents the callback function from receiving XTYP_REQUEST transactions. The system returns DDE_FNOTPROCESSED to a client that sends an  \t\t\t\t\t\tXTYP_REQUEST transaction to the server.   CBF_FAIL_SELFCONNECTIONS 0x00001000   Prevents the callback function from receiving XTYP_CONNECT transactions from the application's own instance. This flag prevents an application from establishing a DDE conversation with its own instance. An application should use this flag if it needs to communicate with other instances of itself but not with itself.   CBF_SKIP_ALLNOTIFICATIONS 0x003c0000   Prevents the callback function from receiving any notifications. This flag is equivalent to combining all CBF_SKIP_ flags.   CBF_SKIP_CONNECT_CONFIRMS 0x00040000   Prevents the callback function from receiving XTYP_CONNECT_CONFIRM notifications.   CBF_SKIP_DISCONNECTS 0x00200000   Prevents the callback function from receiving XTYP_DISCONNECT notifications.   CBF_SKIP_REGISTRATIONS 0x00080000   Prevents the callback function from receiving XTYP_REGISTER notifications.   CBF_SKIP_UNREGISTRATIONS 0x00100000   Prevents the callback function from receiving XTYP_UNREGISTER notifications.   MF_CALLBACKS 0x08000000   Notifies the callback function whenever a transaction is sent to any DDE callback function in the system.   MF_CONV 0x40000000   Notifies the callback function whenever a conversation is established or terminated.   MF_ERRORS 0x10000000   Notifies the callback function whenever a DDE error occurs.   MF_HSZ_INFO 0x01000000   Notifies the callback function whenever a DDE application creates, frees, or increments the usage count of a string handle or whenever a string handle is freed as a result of a call to the DdeUninitialize function.   MF_LINKS 0x20000000   Notifies the callback function whenever an advise loop is started or ended.   MF_POSTMSGS 0x04000000   Notifies the callback function whenever the system or an application posts a DDE message.   MF_SENDMSGS 0x02000000   Notifies the callback function whenever the system or an application sends a DDE message."
      },
      {
        "in_out": "_Reserved_",
        "type": "DWORD",
        "name": "ulRes",
        "description": "Type: DWORD Reserved; must be set to zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Increments the usage count associated with the specified handle. This function enables an application to save a string handle passed to the application's Dynamic Data Exchange (DDE) callback function. Otherwise, a string handle passed to the callback function is deleted when the callback function returns. This function should also be used to keep a copy of a string handle referenced by the CONVINFO structure returned by the DdeQueryConvInfo function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeKeepStringHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz",
        "description": "Type: HSZ A handle to the string handle to be saved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Registers or unregisters the service names a Dynamic Data Exchange (DDE) server supports. This function causes the system to send XTYP_REGISTER or XTYP_UNREGISTER transactions to other running Dynamic Data Exchange Management Library (DDEML) client applications.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HDDEDATA If the function succeeds, it returns a nonzero value. That value is not a true HDDEDATA value, merely a Boolean indicator of success. The function is typed HDDEDATA to allow for possible future expansion of the function and a more sophisticated return value. If the function fails, the return value is 0L. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "The service name identified by the  \t\t\t\thsz1 parameter should be a base name (that is, the name should contain no instance-specific information). The system generates an instance-specific name and sends it along with the base name during the  \t\t\t\tXTYP_REGISTER and  \t\t\t\tXTYP_UNREGISTER transactions. The receiving applications can then connect to the specific application instance. ",
    "return_type": "HDDEDATA",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeNameService",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_opt_",
        "type": "HSZ",
        "name": "hsz1",
        "description": "Type: HSZ A handle to the string that specifies the service name the server is registering or unregistering. An application that is unregistering all of its service names should set this parameter to 0L."
      },
      {
        "in_out": "_In_opt_",
        "type": "HSZ",
        "name": "hsz2",
        "description": "Type: HSZ Reserved; should be set to 0L."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "afCmd",
        "description": "Type: UINT The service name options. This parameter can be one of the following values.   ValueMeaning  DNS_REGISTER 0x0001   Registers the error code service name.   DNS_UNREGISTER 0x0002   Unregisters the error code service name. If the  \t\t\t\t\t\thsz1 parameter is 0L, all service names registered by the server will be unregistered.   DNS_FILTERON 0x0004   Turns on service name initiation filtering. The filter prevents a server from receiving XTYP_CONNECT transactions for service names it has not registered. This is the default setting for this filter.  If a server application does not register any service names, the application cannot receive XTYP_WILDCONNECT transactions.   DNS_FILTEROFF 0x0008   Turns off service name initiation filtering. If this flag is specified, the server receives an  \t\t\t\t\t\tXTYP_CONNECT transaction whenever another DDE application calls the DdeConnect function, regardless of the service name."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Causes the system to send an XTYP_ADVREQ transaction to the calling (server) application's Dynamic Data Exchange (DDE) callback function for each client with an active advise loop on the specified topic and item. A server application should call this function whenever the data associated with the topic name or item name pair changes.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "A server that has nonenumerable topics or items should set the  \t\t\t\thszTopic and  \t\t\t\thszItem parameters to NULL so that the system generates transactions for all active advise loops. The server's DDE callback function returns NULL for any advise loops that must not be updated. If a server calls DdePostAdvise with a topic, item, and format name set that includes the set currently being handled in an XTYP_ADVREQ callback, a stack overflow can result. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdePostAdvise",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszTopic",
        "description": "Type: HSZ A handle to a string that specifies the topic name. To send notifications for all topics with active advise loops, an application can set this parameter to 0L."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hszItem",
        "description": "Type: HSZ A handle to a string that specifies the item name. To send notifications for all items with active advise loops, an application can set this parameter to 0L."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about a Dynamic Data Exchange (DDE) transaction and about the conversation in which the transaction takes place.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the number of bytes copied into the CONVINFO structure. If the function fails, the return value is FALSE. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "An application should not free a string handle referenced by the CONVINFO structure. If an application must use one of these string handles, it should call the DdeKeepStringHandle function to create a copy of the handle. If the  \t\t\t\tidTransaction parameter is set to QID_SYNC, the  \t\t\t\thUser member of the CONVINFO structure is associated with the conversation and can be used to hold data associated with the conversation. If  \t\t\t\tidTransaction is the identifier of an asynchronous transaction, the  \t\t\t\thUser member is associated only with the current transaction and is valid only for the duration of the transaction. ",
    "return_type": "UINT",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeQueryConvInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idTransaction",
        "description": "Type: DWORD The transaction. For asynchronous transactions, this parameter should be a transaction identifier returned by the DdeClientTransaction function. For synchronous transactions, this parameter should be QID_SYNC."
      },
      {
        "in_out": "_Inout_",
        "type": "PCONVINFO",
        "name": "pConvInfo",
        "description": "Type: PCONVINFO A pointer to the CONVINFO structure that receives information about the transaction and conversation. The  \t\t\t\t\tcb member of the CONVINFO structure must specify the length of the buffer allocated for the structure."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the next conversation handle in the specified conversation list.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HCONV If the list contains any more conversation handles, the return value is the next conversation handle in the list; otherwise, it is 0L. ",
    "remarks": "",
    "return_type": "HCONV",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeQueryNextServer",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONVLIST",
        "name": "hConvList",
        "description": "Type: HCONVLIST A handle to the conversation list. This handle must have been created by a previous call to the DdeConnectList function."
      },
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConvPrev",
        "description": "Type: HCONV A handle to the conversation handle previously returned by this function. If this parameter is 0L, the function returns the first conversation handle in the list."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Copies text associated with a string handle into a buffer.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: DWORD If the  \t\t\t\t\t\tpsz parameter specified a valid pointer, the return value is the length, in  \t\t\t\t\t\tcharacters, of the returned text (not including the terminating null character). If the  \t\t\t\t\t\tpsz parameter specified a NULL pointer, the return value is the length of the text associated with the  \t\t\t\t\t\thsz parameter (not including the terminating null character). If an error occurs, the return value is 0L. ",
    "remarks": "The string returned in the buffer is always null-terminated. If the string is longer than ( \t\t\t\tcchMax\u00e2\u0080\u0093 1), only the first ( \t\t\t\tcchMax\u00e2\u0080\u0093 1) characters of the string are copied. If the  \t\t\t\tpsz parameter is NULL, the DdeQueryString function obtains the length, in bytes, of the string associated with the string handle. The length does not include the terminating null character. ",
    "return_type": "DWORD",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeQueryString",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      },
      {
        "in_out": "_In_",
        "type": "HSZ",
        "name": "hsz",
        "description": "Type: HSZ A handle to the string to copy. This handle must have been created by a previous call to the DdeCreateStringHandle function."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "psz",
        "description": "Type: LPTSTR A pointer to a buffer that receives the string. To obtain the length of the string, this parameter should be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cchMax",
        "description": "Type: DWORD The length, in  \t\t\t\t\tcharacters, of the buffer pointed to by the  \t\t\t\t\tpsz parameter. ..."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iCodePage",
        "description": "Type: int The code page used to render the string. This value should be either CP_WINANSI or CP_WINUNICODE."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables a client Dynamic Data Exchange Management Library (DDEML) application to attempt to reestablish a conversation with a service that has terminated a conversation with the client. When the conversation is reestablished, the Dynamic Data Exchange Management Library (DDEML) attempts to reestablish any preexisting advise loops.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: HCONV If the function succeeds, the return value is the handle to the reestablished conversation. If the function fails, the return value is 0L. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "",
    "return_type": "HCONV",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeReconnect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation to be reestablished. A client must have obtained the conversation handle by a previous call to the DdeConnect function or from an XTYP_DISCONNECT transaction."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Associates an application-defined value with a conversation handle or a transaction identifier. This is useful for simplifying the processing of asynchronous transactions. An application can use the DdeQueryConvInfo function to retrieve this value.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeSetUserHandle",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCONV",
        "name": "hConv",
        "description": "Type: HCONV A handle to the conversation."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "id",
        "description": "Type: DWORD The transaction identifier to associate with the value specified by the  \t\t\t\t\thUser parameter. An application should set this parameter to QID_SYNC to associate  \t\t\t\t\thUser with the conversation identified by the  \t\t\t\t\thConv parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "hUser",
        "description": "Type: DWORD_PTR The value to be associated with the conversation handle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Unaccesses a Dynamic Data Exchange (DDE) object. An application must call this function after it has finished accessing the object.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The DdeGetLastError function can be used to get the error code, which can be one of the following values: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeUnaccessData",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDDEDATA",
        "name": "hData",
        "description": "Type: HDDEDATA A handle to the DDE object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees all Dynamic Data Exchange Management Library (DDEML) resources associated with the calling application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Ddeml.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "DdeUninitialize terminates any conversations currently open for the application. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange Management (DDEML)",
    "name": "DdeUninitialize",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idInst",
        "description": "Type: DWORD The application instance identifier obtained by a previous call to the DdeInitialize function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]