[
  {
    "n_arguments": 2,
    "description": "Creates a new directory. If the underlying file system supports security on files and      directories, the function applies a specified security descriptor to the new directory.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "FileAPI.h (include Windows.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. Possible errors include the         following.  ",
    "remarks": "Some file systems, such as the NTFS file system, support compression or encryption for individual files and      directories. On volumes formatted for such a file system, a new directory inherits the compression and encryption      attributes of its parent directory. An application can obtain a handle to a directory by calling      CreateFile with the      FILE_FLAG_BACKUP_SEMANTICS flag set. For a code example, see      CreateFile. To support inheritance functions that query the security descriptor of this object may heuristically determine      and report that inheritance is in effect. See      Automatic Propagation of Inheritable ACEs      for more information. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  For an example, see       Retrieving and Changing File Attributes. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "CreateDirectory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpPathName",
        "description": "The path of the directory to be created. For the ANSI version of this function, there is a default string size limit for paths of 248 characters (MAX_PATH - enough room for a 8.3 filename). To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File  Tip  Starting with Windows 10, version 1607, for the unicode version of this function (CreateDirectoryW), you can opt-in to remove the 248 character limitation without prepending \"\\\\?\\\". The 255 character limit per path segment still applies. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpSecurityAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES         structure. The lpSecurityDescriptor member of the structure specifies a security         descriptor for the new directory. If lpSecurityAttributes is         NULL, the directory gets a default security descriptor. The ACLs in the default         security descriptor for a  directory are inherited from its parent directory. The target file system must support security on files and directories for this parameter to have an effect.         (This is indicated when GetVolumeInformation         returns FS_PERSISTENT_ACLS.)"
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a new directory with the attributes of a specified template directory. If the      underlying file system supports security on files and directories, the function applies a specified security      descriptor to the new directory. The new directory retains the other attributes of the specified template      directory.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call         GetLastError. Possible errors include the         following.  ",
    "remarks": "The CreateDirectoryEx function allows you to      create directories that inherit stream information from other directories. This function is useful, for example,      when you are using Macintosh directories, which have a resource stream that is needed to properly identify      directory contents as an attribute. Some file systems, such as the NTFS file system, support compression or encryption for individual files and      directories. On volumes formatted for such a file system, a new directory inherits the compression and encryption      attributes of its parent directory. You can obtain a handle to a directory by calling the      CreateFile function with the      FILE_FLAG_BACKUP_SEMANTICS flag set. For a code example, see      CreateFile. To support inheritance functions that query the security descriptor of this       object can heuristically determine and report that inheritance is in effect. For more information, see       Automatic Propagation of Inheritable ACEs. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "CreateDirectoryEx",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpTemplateDirectory",
        "description": "The path of the directory to use as a template when creating the new directory. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File. Tip  Starting with Windows 10, version 1607, for the unicode version of this function (CreateDirectoryExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". The 255 character limit per path segment still applies. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpNewDirectory",
        "description": "The path of the directory to be created. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File. Tip  Starting with Windows 10, version 1607, for the unicode version of this function (CreateDirectoryExW), you can opt-in to remove the MAX_PATH character limitation without prepending \"\\\\?\\\". The 255 character limit per path segment still applies. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpSecurityAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES         structure. The lpSecurityDescriptor member of the structure specifies a security         descriptor for the new directory. If lpSecurityAttributes is NULL, the directory gets a         default security descriptor. The access control lists (ACL) in the default security descriptor for a directory         are inherited from its parent directory. The target file system must support security on files and directories for this parameter to have an effect.         This is indicated when GetVolumeInformation         returns FS_PERSISTENT_ACLS."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[Microsoft strongly recommends developers utilize alternative means to achieve your      application's needs. Many scenarios that TxF was developed for can be achieved through simpler and more readily      available techniques. Furthermore, TxF may not be available in future versions of Microsoft Windows. For more      information, and alternatives to TxF, please see      Alternatives to using Transactional NTFS.]",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call         GetLastError. Possible errors include the         following.  ",
    "remarks": "The CreateDirectoryTransacted function      allows you to create directories that inherit stream information from other directories. This function is useful,      for example, when you are using Macintosh directories, which have a resource stream that is needed to properly      identify directory contents as an attribute. Some file systems, such as the NTFS file system, support compression or encryption for individual files and      directories. On volumes formatted for such a file system, a new directory inherits the compression and encryption      attributes of its parent directory. This function fails with ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION if you try to create a      child directory with a parent directory that has encryption disabled. You can obtain a handle to a directory by calling the      CreateFileTransacted function with the       FILE_FLAG_BACKUP_SEMANTICS flag set. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  SMB 3.0 does not support TxF. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "CreateDirectoryTransacted",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpTemplateDirectory",
        "description": "The path of the directory to use as a template when creating the new directory.  This parameter can be         NULL. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File. The directory must reside on the local computer; otherwise, the function fails and the last error code is set         to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpNewDirectory",
        "description": "The path of the directory to be created. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpSecurityAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES         structure. The lpSecurityDescriptor member of the structure specifies a security         descriptor for the new directory. If lpSecurityAttributes is NULL, the directory gets a         default security descriptor. The access control lists (ACL) in the default security descriptor for a directory         are inherited from its parent directory. The target file system must support security on files and directories for this parameter to have an effect.         This is indicated when GetVolumeInformation         returns FS_PERSISTENT_ACLS."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hTransaction",
        "description": "A handle to the transaction. This handle is returned by the        CreateTransaction function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Stops change notification handle monitoring.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "FileAPI.h (include Windows.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "After the FindCloseChangeNotification function is called, the handle      specified by the hChangeHandle parameter cannot be used in subsequent calls to either the  FindNextChangeNotification or  FindCloseChangeNotification function. Change notifications can also be used in the  wait functions. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  Application might experience false positives on CsvFs pause/resume. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "FindCloseChangeNotification",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hChangeHandle",
        "description": "A handle to a change notification handle created by the  FindFirstChangeNotification function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a change notification handle and sets up initial change notification filter conditions. A wait on a notification handle succeeds when a change matching the filter conditions occurs in the specified directory or subtree. The function does not report changes to the specified directory itself.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "FileAPI.h (include Windows.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a handle to a find change notification object. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call  GetLastError. ",
    "remarks": "The  wait functions can monitor the specified directory or subtree by using the handle returned by the  FindFirstChangeNotification function. A wait is satisfied when one of the filter conditions occurs in the monitored directory or subtree. After the wait has been satisfied, the application can respond to this condition and continue monitoring the directory by calling the  FindNextChangeNotification function and the appropriate wait function. When the handle is no longer needed, it can be closed by using the  FindCloseChangeNotification function. Notifications may not be returned when calling FindFirstChangeNotification for a remote file system. Symbolic link behavior\u00e2\u0080\u0094If the path points to a symbolic link, the notification handle is created for the target. If an application has registered to receive change notifications for a directory that contains symbolic links, the application is only notified when the symbolic links have been changed, not the target files. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  Application might experience false positives on CsvFs pause/resume. For an example, see  Obtaining Directory Change_Notifications. ",
    "return_type": "HANDLE",
    "category": "Directory Management",
    "name": "FindFirstChangeNotification",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpPathName",
        "description": "The full path of the directory to be watched.    This cannot be a relative path or an empty string. In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend \"\\\\?\\\" to the path. For more information, see  Naming a File."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bWatchSubtree",
        "description": "If this parameter is TRUE, the function monitors the directory tree rooted at the specified directory; if it is FALSE, it monitors only the specified directory."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNotifyFilter",
        "description": "The filter conditions that satisfy a change notification wait. This parameter can be one or more of the following values.  ValueMeaning  FILE_NOTIFY_CHANGE_FILE_NAME 0x00000001   Any file name change in the watched directory or subtree causes a change notification wait operation to return. Changes include renaming, creating, or deleting a file name.   FILE_NOTIFY_CHANGE_DIR_NAME 0x00000002   Any directory-name change in the watched directory or subtree causes a change notification wait operation to return. Changes include creating or deleting a directory.   FILE_NOTIFY_CHANGE_ATTRIBUTES 0x00000004   Any attribute change in the watched directory or subtree causes a change notification wait operation to return.   FILE_NOTIFY_CHANGE_SIZE 0x00000008   Any file-size change in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change in file size only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.   FILE_NOTIFY_CHANGE_LAST_WRITE 0x00000010   Any change to the last write-time of files in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change to the last write-time only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.   FILE_NOTIFY_CHANGE_SECURITY 0x00000100   Any security-descriptor change in the watched directory or subtree causes a change notification wait operation to return."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Requests that the operating system signal a change notification handle the next time it detects an appropriate change.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "FileAPI.h (include Windows.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "After the  FindNextChangeNotification function returns successfully, the application can wait for notification that a change has occurred by using the  wait functions. If a change occurs after a call to  FindFirstChangeNotification        but before a call to  FindNextChangeNotification, the operating system records the change. When  FindNextChangeNotification is executed, the recorded change immediately satisfies a wait for the change notification. FindNextChangeNotification should not be used more than once on the same handle without using one of the wait functions. An application may miss a change notification if it uses  FindNextChangeNotification when there is a change request outstanding. When hChangeHandle is no longer needed, close it by using the  FindCloseChangeNotification function. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  Application might experience false positives on CsvFs pause/resume. For an example, see  Obtaining Directory Change Notifications. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "FindNextChangeNotification",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hChangeHandle",
        "description": "A handle to a change notification handle created by the  FindFirstChangeNotification function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the current directory for the current process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value specifies the number of characters that are written to the buffer,         not including the terminating null character. If the function fails, the return value is zero. To get extended error information, call         GetLastError. If the buffer that is pointed to by lpBuffer is not large enough, the return value         specifies the required size of the buffer, in characters, including the null-terminating character. ",
    "remarks": "Each process has a single current directory that consists of two parts: To set the current directory, use the      SetCurrentDirectory function. Multithreaded applications and shared library code should not use the        GetCurrentDirectory function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  For an example, see       Changing the Current Directory. ",
    "return_type": "DWORD",
    "category": "Directory Management",
    "name": "GetCurrentDirectory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nBufferLength",
        "description": "The length of the buffer for the current directory string, in TCHARs. The        buffer length must include room for a terminating null character."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpBuffer",
        "description": "A pointer to the buffer that receives the current directory string. This null-terminated string specifies the         absolute path to the current directory. To determine the required buffer size, set this parameter to NULL and the         nBufferLength parameter to 0."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 8,
    "description": "Retrieves information that describes the changes within the specified directory. The      function does not report changes to the specified directory itself.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. For synchronous calls, this means that the operation         succeeded. For asynchronous calls, this indicates that the operation was successfully queued. If the function fails, the return value is zero. To get extended error information, call         GetLastError. If the network redirector or the target file system does not support this operation, the function fails with         ERROR_INVALID_FUNCTION. ",
    "remarks": "To obtain a handle to a directory, use the CreateFile      function with the FILE_FLAG_BACKUP_SEMANTICS flag. A call to ReadDirectoryChangesW can be      completed synchronously or asynchronously. To specify asynchronous completion, open the directory with      CreateFile as shown above, but additionally specify the      FILE_FLAG_OVERLAPPED attribute in the dwFlagsAndAttributes      parameter. Then specify an OVERLAPPED structure when you      call ReadDirectoryChangesW. When you first call ReadDirectoryChangesW, the      system allocates a buffer to store change information. This buffer is associated with the directory handle until      it is closed and its size does not change during its lifetime. Directory changes that occur between calls to this      function are added to the buffer and then returned with the next call. If the buffer overflows, the entire      contents of the buffer are discarded, the lpBytesReturned parameter contains zero, and      the ReadDirectoryChangesW function fails with the      error code ERROR_NOTIFY_ENUM_DIR. Upon successful synchronous completion, the lpBuffer parameter is a formatted buffer      and the number of bytes written to the buffer is available in lpBytesReturned. If the      number of bytes transferred is zero, the buffer was either too large for the system to allocate or too small to      provide detailed information on all the changes that occurred in the directory or subtree. In this case, you      should compute the changes by enumerating the directory or subtree. For asynchronous completion, you can receive notification in one of three ways: For more information, see       Synchronous and Asynchronous I/O. ReadDirectoryChangesW fails with      ERROR_INVALID_PARAMETER when the buffer length is greater than 64 KB and the application      is monitoring a directory over the network. This is due to a packet size limitation with the underlying file      sharing protocols. ReadDirectoryChangesW fails with      ERROR_NOACCESS when the buffer is not aligned on a DWORD      boundary. If you opened the file using the short name, you can receive change notifications for the short name. In Windows 8 and Windows Server 2012, this function is supported by the following      technologies.  If there is a transaction bound to the directory handle, then the notifications follow the appropriate        transaction isolation rules. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "ReadDirectoryChangesW",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hDirectory",
        "description": "A handle to the directory to be monitored. This directory must be opened with the        FILE_LIST_DIRECTORY access right."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "A pointer to the DWORD-aligned formatted buffer in which the read results are        to be returned. The structure of this buffer is defined by the        FILE_NOTIFY_INFORMATION structure. This        buffer is filled either synchronously or asynchronously, depending on how the directory is opened and what value        is given to the lpOverlapped parameter. For more information, see the Remarks        section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nBufferLength",
        "description": "The size of the buffer that is pointed to by the lpBuffer parameter, in        bytes."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bWatchSubtree",
        "description": "If this parameter is TRUE, the function monitors the directory tree rooted at the        specified directory. If this parameter is FALSE, the function monitors only the        directory specified by the hDirectory parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNotifyFilter",
        "description": "The filter criteria that the function checks to determine if the wait operation has completed. This        parameter can be one or more of the following values.  ValueMeaning  FILE_NOTIFY_CHANGE_FILE_NAME 0x00000001   Any file name change in the watched directory or subtree causes a change notification wait operation to          return. Changes include renaming, creating, or deleting a file.   FILE_NOTIFY_CHANGE_DIR_NAME 0x00000002   Any directory-name change in the watched directory or subtree causes a change notification wait operation          to return. Changes include creating or deleting a directory.   FILE_NOTIFY_CHANGE_ATTRIBUTES 0x00000004   Any attribute change in the watched directory or subtree causes a change notification wait operation to          return.   FILE_NOTIFY_CHANGE_SIZE 0x00000008   Any file-size change in the watched directory or subtree causes a change notification wait operation to          return. The operating system detects a change in file size only when the file is written to the disk. For          operating systems that use extensive caching, detection occurs only when the cache is sufficiently          flushed.   FILE_NOTIFY_CHANGE_LAST_WRITE 0x00000010   Any change to the last write-time of files in the watched directory or subtree causes a change          notification wait operation to return. The operating system detects a change to the last write-time only when          the file is written to the disk. For operating systems that use extensive caching, detection occurs only when          the cache is sufficiently flushed.   FILE_NOTIFY_CHANGE_LAST_ACCESS 0x00000020   Any change to the last access time of files in the watched directory or subtree causes a change          notification wait operation to return.   FILE_NOTIFY_CHANGE_CREATION 0x00000040   Any change to the creation time of files in the watched directory or subtree causes a change notification          wait operation to return.   FILE_NOTIFY_CHANGE_SECURITY 0x00000100   Any security-descriptor change in the watched directory or subtree causes a change notification wait          operation to return."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "lpBytesReturned",
        "description": "For synchronous calls, this parameter receives the number of bytes transferred into the        lpBuffer parameter. For asynchronous calls, this parameter is undefined. You must use        an asynchronous notification technique to retrieve the number of bytes transferred."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPOVERLAPPED",
        "name": "lpOverlapped",
        "description": "A pointer to an OVERLAPPED structure that supplies        data to be used during asynchronous operation. Otherwise, this value is NULL. The        Offset and OffsetHigh members of this structure are not        used."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPOVERLAPPED_COMPLETION_ROUTINE",
        "name": "lpCompletionRoutine",
        "description": "A pointer to a completion routine to be called when the operation has been completed or canceled and the        calling thread is in an alertable wait state. For more information about this completion routine, see        FileIOCompletionRoutine."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Deletes an existing empty directory.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "FileAPI.h (include Windows.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "The RemoveDirectory function marks a directory for      deletion on close. Therefore, the directory is not removed until the last handle to the directory is closed. To recursively delete the files in a directory, use the      SHFileOperation function. RemoveDirectory removes a directory junction, even      if the contents of the target are not empty; the function removes directory junctions regardless of the state of      the target object. For more information on junctions, see      Hard Links and Junctions. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "RemoveDirectory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpPathName",
        "description": "The path of the directory to be removed. This path must specify an empty directory, and the calling process         must have delete access to the directory. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File. Tip  Starting with Windows 10, version 1607, for the unicode version of this function (RemoveDirectoryW), you can opt-in to remove the MAX_PATH limitation without prepending \"\\\\?\\\". See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "[Microsoft strongly recommends developers utilize alternative means to achieve your      application's needs. Many scenarios that TxF was developed for can be achieved through simpler and more readily      available techniques. Furthermore, TxF may not be available in future versions of Microsoft Windows. For more      information, and alternatives to TxF, please see      Alternatives to using Transactional NTFS.]",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "The RemoveDirectoryTransacted function      marks a directory for deletion on close. Therefore, the directory is not removed until the last handle to the      directory is closed. RemoveDirectory removes a directory junction, even      if the contents of the target are not empty; the function removes directory junctions regardless of the state of      the target object. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  SMB 3.0 does not support TxF . ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "RemoveDirectoryTransacted",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpPathName",
        "description": "The path of the directory to be removed. The path must specify an empty directory, and the calling process         must have delete access to the directory. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File. The directory must reside on the local computer; otherwise, the function fails and the last error code is set         to ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hTransaction",
        "description": "A handle to the transaction. This handle is returned by the        CreateTransaction function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Changes the current directory for the current process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Each process has a single current directory made up of two parts: Multithreaded applications and shared library code should not use the        SetCurrentDirectory function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the GetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. In Windows 8 and Windows Server 2012, this function is supported by the following technologies.  For an example, see  Changing the Current Directory. ",
    "return_type": "BOOL",
    "category": "Directory Management",
    "name": "SetCurrentDirectory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpPathName",
        "description": "The path to the new current directory. This parameter may specify a relative path or a full path. In either case, the full path of the specified directory is calculated and stored as the current directory.    For more information, see File Names, Paths, and Namespaces. In the ANSI version of this function, the name is limited to MAX_PATH characters.         To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend         \"\\\\?\\\" to the path. For more information, see         Naming a File.  The final character before the null character must be a backslash ('\\'). If you do not specify the backslash, it will be added for you; therefore, specify MAX_PATH-2 characters for the path unless you  include the trailing backslash, in which case, specify MAX_PATH-1 characters for the path. Tip  Starting with Windows 10, version 1607, for the unicode version of this function (SetCurrentDirecotryW), you can opt-in to remove the MAX_PATH limitation. See the \"Maximum Path Length Limitation\" section of Naming Files, Paths, and Namespaces for details."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  }
]