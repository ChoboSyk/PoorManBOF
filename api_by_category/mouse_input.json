[
  {
    "n_arguments": 1,
    "description": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. This function calls TrackMouseEvent if it exists, otherwise it emulates it.",
    "library": "Comctl32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "CommCtrl.h",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, return value is zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "_TrackMouseEvent",
    "is_callback": 0,
    "dll": "Comctl32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTRACKMOUSEEVENT",
        "name": "lpEventTrack",
        "description": "Type: LPTRACKMOUSEEVENT A pointer to a TRACKMOUSEEVENT structure that contains tracking information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero . If the function fails, return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The mouse pointer is considered to be hovering when it stays within a specified rectangle for a specified period of time. Call  \t\t\t\tSystemParametersInfo.  and use the values SPI_GETMOUSEHOVERWIDTH, SPI_GETMOUSEHOVERHEIGHT, and SPI_GETMOUSEHOVERTIME to retrieve the size of the rectangle and the time. The function can post the following messages.  ",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "TrackMouseEvent",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPTRACKMOUSEEVENT",
        "name": "lpEventTrack",
        "description": "Type: LPTRACKMOUSEEVENT A pointer to a TRACKMOUSEEVENT structure that contains tracking information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. The width and height of the drag rectangle are specified by the SM_CXDRAG and SM_CYDRAG values returned by the GetSystemMetrics function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the user moved the mouse outside of the drag rectangle while holding down the left button, the return value is nonzero. If the user did not move the mouse outside of the drag rectangle while holding down the left button, the return value is zero. ",
    "remarks": "The system metrics for the drag rectangle are configurable, allowing for larger or smaller drag rectangles. ",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "DragDetect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window receiving mouse input."
      },
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "pt",
        "description": "Type: POINT Initial position of the mouse, in screen coordinates. The function determines the coordinates of the drag rectangle by using this point."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the specified      system metric or system configuration setting.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int If the function succeeds, the return value is the requested system metric or configuration setting. If the function fails, the return value is 0.         GetLastError does not provide extended error information. ",
    "remarks": "System metrics can vary from display to display. GetSystemMetrics(SM_CMONITORS) counts only      visible display monitors. This is different from      EnumDisplayMonitors, which enumerates both visible display      monitors and invisible  pseudo-monitors that are associated with mirroring drivers. An invisible pseudo-monitor is associated with a pseudo-device used to mirror application drawing for remoting or other purposes. The SM_ARRANGE setting specifies how the system arranges minimized windows, and consists of a starting      position and a direction. The starting position can be one of the following values.  The direction in which to arrange minimized windows can be one of the following values.  The SM_DIGITIZER setting specifies the type of digitizers that are installed on a device running Windows 7 or Windows Server 2008 R2. The return value is a bitmask that specifies one or more of the following values.  The following example uses the  GetSystemMetrics function to determine whether a mouse is installed and whether the mouse buttons are swapped. The example also uses the  SystemParametersInfo function to retrieve the mouse threshold and speed. It displays the information in the console. ",
    "return_type": "int",
    "category": "Mouse Input",
    "name": "GetSystemMetrics",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nIndex",
        "description": "Type: int The system metric or configuration setting to be retrieved. This parameter can be one of the following values.        Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings        designed to return Boolean data represent TRUE as any nonzero value, and FALSE as a zero value.  ValueMeaning  SM_ARRANGE 56   The flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic.   SM_CLEANBOOT 67   The value that specifies how the system is started:            0 Normal boot 1 Fail-safe boot 2 Fail-safe with network boot  A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.   SM_CMONITORS 80   The number of display monitors on a desktop. For more information, see the Remarks section in this topic.            SM_CMOUSEBUTTONS 43   The number of buttons on a mouse, or zero if no mouse is installed.   SM_CONVERTIBLESLATEMODE 0x2003   Reflects the state of the laptop or slate mode, 0 for Slate Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"ConvertibleSlateMode\" in the LPARAM. Note that this system metric doesn't apply to desktop PCs. In that case, use GetAutoRotationState.   SM_CXBORDER 5   The width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for          windows with the 3-D look.   SM_CXCURSOR 13   The width of a cursor, in pixels. The system cannot create cursors of other sizes.   SM_CXDLGFRAME 7   This value is the same as SM_CXFIXEDFRAME.   SM_CXDOUBLECLK 36   The width of the rectangle around the location of a first click in a double-click sequence,          in pixels. The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two          clicks a double-click. The two clicks must also occur within a specified time.                     To set the width of the double-click rectangle, call           SystemParametersInfo with SPI_SETDOUBLECLKWIDTH.   SM_CXDRAG 68   The number of pixels on either side of a mouse-down point that  the mouse        pointer can move before a drag operation begins. This allows the user to click and release the        mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.   SM_CXEDGE 45   The width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER.   SM_CXFIXEDFRAME 7   The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.        SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.          This value is the same as SM_CXDLGFRAME.   SM_CXFOCUSBORDER 83   The width of the left and right edges of the focus rectangle that the DrawFocusRect draws. This value is in pixels.         Windows 2000:  This value is not supported.   SM_CXFRAME 32   This value is the same as SM_CXSIZEFRAME.   SM_CXFULLSCREEN 16   The width of the client area for a full-screen window on the primary display monitor, in pixels. To        get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop        toolbars, call the         SystemParametersInfo function with        the SPI_GETWORKAREA value.   SM_CXHSCROLL 21   The width of the arrow bitmap on a horizontal scroll bar, in pixels.   SM_CXHTHUMB 10   The width of the thumb box in a horizontal scroll bar, in pixels.   SM_CXICON 11   The default width of an icon, in pixels. The         LoadIcon function can load only icons with the  dimensions that SM_CXICON and SM_CYICON specifies.   SM_CXICONSPACING 38   The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON.   SM_CXMAXIMIZED 61   The default width, in pixels, of a maximized top-level window on the primary display monitor.   SM_CXMAXTRACK 59   The default maximum width of a window that has a caption and sizing borders, in pixels. This metric        refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A        window can override this value by processing the         WM_GETMINMAXINFO message.   SM_CXMENUCHECK 71   The width of the default menu check-mark bitmap, in pixels.   SM_CXMENUSIZE 54   The width of menu bar buttons, such as the child window close button that is used in the multiple document        interface, in pixels.   SM_CXMIN 28   The minimum width of a window, in pixels.   SM_CXMINIMIZED 57   The width of a minimized window, in pixels.   SM_CXMINSPACING 47   The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle        this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED.   SM_CXMINTRACK 34   The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size        smaller than these dimensions. A window can override this value by processing the         WM_GETMINMAXINFO message.   SM_CXPADDEDBORDER 92   The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.   SM_CXSCREEN 0   The width of the screen of the primary display monitor, in pixels. This is the same value        obtained by calling         GetDeviceCaps as follows: GetDeviceCaps(        hdcPrimaryMonitor, HORZRES).   SM_CXSIZE 30   The width of a button in a window caption or title bar, in pixels.   SM_CXSIZEFRAME 32   The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.        SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.          This value is the same as SM_CXFRAME.   SM_CXSMICON 49   The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in        small icon view.   SM_CXSMSIZE 52   The width of small caption buttons, in pixels.   SM_CXVIRTUALSCREEN 78   The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all        display monitors. The SM_XVIRTUALSCREEN metric is the coordinates for the left side of        the virtual screen.            SM_CXVSCROLL 2   The width of a vertical scroll bar, in pixels.   SM_CYBORDER 6   The height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for          windows with the 3-D look.   SM_CYCAPTION 4   The height of a caption area, in pixels.   SM_CYCURSOR 14   The height of a cursor, in pixels. The system cannot create cursors of other sizes.   SM_CYDLGFRAME 8   This value is the same as SM_CYFIXEDFRAME.   SM_CYDOUBLECLK 37   The height of the rectangle around the location of a first click in a double-click sequence,          in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two          clicks a double-click. The two clicks must also occur within a specified time.                     To set the height of the double-click rectangle, call           SystemParametersInfo with SPI_SETDOUBLECLKHEIGHT.   SM_CYDRAG 69   The number of pixels above and below a mouse-down point that the mouse        pointer can move before a drag operation begins. This allows the user to click and release the        mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it.    SM_CYEDGE 46   The height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER.   SM_CYFIXEDFRAME 8   The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.        SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. This value is the same as SM_CYDLGFRAME.   SM_CYFOCUSBORDER 84   The height of the top and bottom edges of the focus rectangle drawn        by         DrawFocusRect. This value is in pixels. Windows 2000:  This value is not supported.   SM_CYFRAME 33   This value is the same as SM_CYSIZEFRAME.   SM_CYFULLSCREEN 17   The height of the client area for a full-screen window on the primary display monitor, in pixels. To        get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop        toolbars, call the         SystemParametersInfo function with        the SPI_GETWORKAREA value.   SM_CYHSCROLL 3   The height of a horizontal scroll bar, in        pixels.   SM_CYICON 12   The default height of an icon, in pixels. The         LoadIcon function can load only icons with the        dimensions SM_CXICON and SM_CYICON.   SM_CYICONSPACING 39   The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.   SM_CYKANJIWINDOW 18   For double byte character set versions of the system, this is the height of the Kanji window at the bottom        of the screen, in pixels.   SM_CYMAXIMIZED 62   The default height, in pixels, of a maximized top-level window on the primary display monitor.   SM_CYMAXTRACK 60   The default maximum height of a window that has a caption and sizing borders, in pixels. This metric        refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A        window can override this value by processing the         WM_GETMINMAXINFO message.   SM_CYMENU 15   The height of a single-line menu bar, in pixels.   SM_CYMENUCHECK 72   The height of the default menu check-mark bitmap, in pixels.   SM_CYMENUSIZE 55   The height of menu bar buttons, such as the child window close button that is used in the multiple document        interface, in pixels.   SM_CYMIN 29   The minimum height of a window, in pixels.   SM_CYMINIMIZED 58   The height of a minimized window, in pixels.   SM_CYMINSPACING 48   The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle        this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED.   SM_CYMINTRACK 35   The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size        smaller than these dimensions. A window can override this value by processing the         WM_GETMINMAXINFO message.   SM_CYSCREEN 1   The height of the screen of the primary display monitor, in pixels. This is the same value        obtained by calling         GetDeviceCaps as follows: GetDeviceCaps(        hdcPrimaryMonitor, VERTRES).   SM_CYSIZE 31   The height of a button in a window caption or title bar, in pixels.   SM_CYSIZEFRAME 33   The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.        SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border.          This value is the same as SM_CYFRAME.   SM_CYSMCAPTION 51   The height of a small caption, in pixels.   SM_CYSMICON 50   The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in        small icon view.   SM_CYSMSIZE 53   The height of small caption buttons, in pixels.   SM_CYVIRTUALSCREEN 79   The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all        display monitors. The SM_YVIRTUALSCREEN metric is the coordinates for the top of        the virtual screen.   SM_CYVSCROLL 20   The height of the arrow bitmap on a vertical scroll bar, in        pixels.   SM_CYVTHUMB 9   The height of the thumb box in a vertical scroll bar, in pixels.   SM_DBCSENABLED 42   Nonzero if User32.dll supports DBCS; otherwise, 0.                    SM_DEBUG 22   Nonzero if the debug version of User.exe is installed; otherwise, 0.   SM_DIGITIZER 94   Nonzero  if the current operating system is Windows 7  or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device. For more information, see Remarks. Windows Server 2008, Windows Vista and Windows XP/2000:  This value  is not supported.   SM_IMMENABLED 82   Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.           SM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application.           To ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page.           Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts           or registry settings may not be present.   SM_MAXIMUMTOUCHES 95   Nonzero if there are digitizers in the system; otherwise, 0.  SM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in the system.  If the system has only single-touch digitizers, the return value is 1. If the system has  multi-touch digitizers, the return value is the number of simultaneous contacts the hardware can provide. Windows Server 2008, Windows Vista and Windows XP/2000:  This value is not supported.   SM_MEDIACENTER 87   Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.   SM_MENUDROPALIGNMENT 40   Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are        left-aligned.   SM_MIDEASTENABLED 74   Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.   SM_MOUSEPRESENT 19   Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse.   SM_MOUSEHORIZONTALWHEELPRESENT 91   Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.   SM_MOUSEWHEELPRESENT 75   Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.           SM_NETWORK 63   The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are        reserved for future use.   SM_PENWINDOWS 41   Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.   SM_REMOTECONTROL 0x2001   This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is being remotely controlled. Its value is nonzero if the current          session is remotely controlled; otherwise, 0. You can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to control a remote session. When a session is being remotely controlled, another user can view the contents of that session and potentially interact with it.   SM_REMOTESESSION 0x1000   This system metric is used in a Terminal Services environment. If the calling process is associated          with a Terminal Services client session, the return value is nonzero. If the calling process is          associated with the Terminal Services console session, the return value is 0. Windows Server 2003 and Windows XP:  The console session         is not necessarily the physical console. For more information, see WTSGetActiveConsoleSessionId.   SM_SAMEDISPLAYFORMAT 81   Nonzero if all the display monitors have the same color format, otherwise, 0. Two          displays can have the same bit depth, but different color formats. For example, the red, green,          and blue pixels can be encoded with different numbers of bits, or those bits can be located in          different places in a pixel color value.                    SM_SECURE 44   This system metric should be ignored; it always returns 0.   SM_SERVERR2 89   The build number if the system is Windows Server 2003 R2; otherwise, 0.   SM_SHOWSOUNDS 70   Nonzero if the user requires an application to present information visually in situations          where it would otherwise present the information only in audible form; otherwise, 0.   SM_SHUTTINGDOWN 0x2000   Nonzero if the current session is shutting down; otherwise, 0.          Windows 2000:  This value is not supported.   SM_SLOWMACHINE 73   Nonzero if the computer has a low-end (slow) processor; otherwise, 0.   SM_STARTER 88   Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0.   SM_SWAPBUTTON 23   Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.   SM_SYSTEMDOCKED  0x2004   Reflects the state of the docking mode, 0 for Undocked Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via WM_SETTINGCHANGE with \"SystemDockMode\" in the LPARAM.    SM_TABLETPC 86   Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.    SM_XVIRTUALSCREEN 76   The coordinates for the left side of the virtual screen. The virtual screen is the bounding         rectangle of all display monitors. The SM_CXVIRTUALSCREEN metric is the width          of the virtual screen.                    SM_YVIRTUALSCREEN 77   The coordinates for the top of the virtual screen. The virtual screen is the bounding         rectangle of all display monitors. The SM_CYVIRTUALSCREEN metric is the height of the virtual screen."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables the mouse to act as a pointer input device and send WM_POINTER messages.",
    "library": "User32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is non-zero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "This function can be called only once in the context of a process lifetime.  Prior to the first call, Windows Store apps run with mouse-in-pointer enabled, as do any desktop applications that consume mshtml.dll.  All other desktop applications run with mouse-in-pointer disabled. On the first call in the process lifetime, the state is changed as specified and the call succeeds. On subsequent calls, the state will not change.  If the current state is not equal to the specified state, the call fails. Call IsMouseInPointerEnabled to verify the mouse-in-pointer state. ",
    "return_type": "",
    "category": "Mouse Input",
    "name": "EnableMouseInPointer",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fEnable",
        "description": "TRUE to turn on mouse input support in WM_POINTER."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND The return value is a handle to the capture window associated with the current thread. If no window in the thread has captured the mouse, the return value is NULL. ",
    "remarks": "A NULL return value means the current thread has not captured the mouse. However, it is possible that another thread or process has captured the mouse. To get a handle to the capture window on another thread, use the GetGUIThreadInfo function. ",
    "return_type": "HWND",
    "category": "Mouse Input",
    "name": "GetCapture",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Mouse Input",
    "name": "GetDoubleClickTime",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves a history of up to 64 previous coordinates of the mouse or pen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value is the number of points in the buffer. Otherwise, the function returns  \t\t\t\t\t\t\u00e2\u0080\u00931. For extended error information, your application can call GetLastError. ",
    "remarks": "The system retains the last 64 mouse coordinates and their time stamps. If your application supplies a mouse coordinate to GetMouseMovePointsEx and the coordinate exists in the system's mouse coordinate history, the function retrieves the specified number of coordinates from the systems' history. You can also supply a time stamp, which will be used to differentiate between identical points in the history. The GetMouseMovePointsEx function will return points that eventually were dispatched not only to the calling thread but also to other threads. GetMouseMovePointsEx may fail or return erroneous values in the following cases: These situations can occur if multiple monitors are present. To correct this, first call  \t\t\t\tGetSystemMetrics to get the following values: Then, for each point that is returned from GetMouseMovePointsEx, perform the following transform: ",
    "return_type": "int",
    "category": "Mouse Input",
    "name": "GetMouseMovePointsEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cbSize",
        "description": "Type: UINT The size, in bytes, of the MOUSEMOVEPOINT structure."
      },
      {
        "in_out": "_In_",
        "type": "LPMOUSEMOVEPOINT",
        "name": "lppt",
        "description": "Type: LPMOUSEMOVEPOINT A pointer to a MOUSEMOVEPOINT structure containing valid mouse coordinates (in screen coordinates). It may also contain a time stamp.  The GetMouseMovePointsEx function searches for the point in the mouse coordinates history. If the function finds the point, it returns the last  \t\t\t\t\t\tnBufPoints prior to and including the supplied point.  If your application supplies a time stamp, the GetMouseMovePointsEx function will use it to differentiate between two equal points that were recorded at different times.  An application should call this function using the mouse coordinates received from the WM_MOUSEMOVE message and convert them to screen coordinates."
      },
      {
        "in_out": "_Out_",
        "type": "LPMOUSEMOVEPOINT",
        "name": "lpptBuf",
        "description": "Type: LPMOUSEMOVEPOINT A pointer to a buffer that will receive the points. It should be at least  \t\t\t\t\tcbSize* \t\t\t\t\tnBufPoints in size."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nBufPoints",
        "description": "Type: int The number of points to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "resolution",
        "description": "Type: DWORD The resolution desired. This parameter can be one of the following values.   ValueMeaning  GMMP_USE_DISPLAY_POINTS 1   Retrieves the points using the display resolution.   GMMP_USE_HIGH_RESOLUTION_POINTS 2   Retrieves high resolution points. Points can range from zero to 65,535 (0xFFFF) in both x- and y-coordinates. This is the resolution provided by absolute coordinate pointing devices such as drawing tablets."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "An application calls this function after calling the SetCapture function. For an example, see Drawing Lines with the Mouse. ",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "ReleaseCapture",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Sets the mouse capture to the specified window belonging to the current thread.SetCapture captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the mouse.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HWND The return value is a handle to the window that had previously captured the mouse. If there is no such window, the return value is NULL. ",
    "remarks": "Only the foreground window can capture the mouse. When a background window attempts to do so, the window receives messages only for mouse events that occur when the cursor hot spot is within the visible portion of the window. Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground. When the window no longer requires all mouse input, the thread that created the window should call the ReleaseCapture function to release the mouse. This function cannot be used to capture mouse input meant for another process. When the mouse is captured, menu hotkeys and other keyboard accelerators do not work. For an example, see Drawing Lines with the Mouse. ",
    "return_type": "HWND",
    "category": "Mouse Input",
    "name": "SetCapture",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window in the current thread that is to capture the mouse."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The SetDoubleClickTime function alters the double-click time for all windows in the system. ",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "SetDoubleClickTime",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uInterval",
        "description": "Type: UINT The number of milliseconds that may occur between the first and second clicks of a double-click. If this parameter is set to 0, the system uses the default double-click time of 500 milliseconds. If this parameter value is greater than 5000 milliseconds, the system sets the value to 5000 milliseconds."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Reverses or restores the meaning of the left and right mouse buttons.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the meaning of the mouse buttons was reversed previously, before the function was called, the return value is nonzero. If the meaning of the mouse buttons was not reversed, the return value is zero. ",
    "remarks": "Button swapping is provided as a convenience to people who use the mouse with their left hands. The SwapMouseButton function is usually called by Control Panel only. Although an application is free to call the function, the mouse is a shared resource and reversing the meaning of its buttons affects all applications. ",
    "return_type": "BOOL",
    "category": "Mouse Input",
    "name": "SwapMouseButton",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fSwap",
        "description": "Type: BOOL If this parameter is TRUE, the left button generates right-button messages and the right button generates left-button messages. If this parameter is FALSE, the buttons are restored to their original meanings."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The mouse_event function synthesizes mouse motion and button clicks.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "This function has no return value. ",
    "remarks": "If the mouse has moved, indicated by MOUSEEVENTF_MOVE being set,  \t\t\t\tdx and  \t\t\t\tdy hold information about that motion. The information is specified as absolute or relative integer values. If MOUSEEVENTF_ABSOLUTE value is specified,  \t\t\t\tdx and  \t\t\t\tdy contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface, (65535,65535) maps onto the lower-right corner. If the MOUSEEVENTF_ABSOLUTE value is not specified,  \t\t\t\tdx and  \t\t\t\tdy specify relative motions from when the last mouse event was generated (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). Relative mouse motion is subject to the settings for mouse speed and acceleration level. An end user sets these values using the Mouse application in Control Panel. An application obtains and sets these values with the SystemParametersInfo function. The system applies two tests to the specified relative mouse motion when applying acceleration. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse acceleration level is not zero, the operating system doubles the distance. If the specified distance along either the x- or y-axis is greater than the second mouse threshold value, and the mouse acceleration level is equal to two, the operating system doubles the distance that resulted from applying the first threshold test. It is thus possible for the operating system to multiply relatively-specified mouse motion along the x- or y-axis by up to four times. Once acceleration has been applied, the system scales the resultant value by the desired mouse speed. Mouse speed can range from 1 (slowest) to 20 (fastest) and represents how much the pointer moves based on the distance the mouse moves. The default value is 10, which results in no additional modification to the mouse motion. The mouse_event function is used to synthesize mouse events by applications that need to do so. It is also used by applications that need to obtain more information from the mouse than its position and button state. For example, if a tablet manufacturer wants to pass pen-based information to its own applications, it can write a DLL that communicates directly to the tablet hardware, obtains the extra information, and saves it in a queue. The DLL then calls mouse_event with the standard button and x/y position data, along with, in the dwExtraInfo parameter, some pointer or index to the queued extra information. When the application needs the extra information, it calls the DLL with the pointer or index stored in  \t\t\t\tdwExtraInfo, and the DLL returns the extra information. ",
    "return_type": "VOID",
    "category": "Mouse Input",
    "name": "mouse_event",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD Controls various aspects of mouse motion and button clicking. This parameter can be certain combinations of the following values.  ValueMeaning  MOUSEEVENTF_ABSOLUTE 0x8000   The  \t\t\t\t\t\tdx and  \t\t\t\t\t\tdy parameters contain normalized absolute coordinates. If not set, those parameters contain relative data: the change in position since the last reported position. This flag can be set, or not set, regardless of what kind of mouse or mouse-like device, if any, is connected to the system. For further information about relative mouse motion, see the following Remarks section.   MOUSEEVENTF_LEFTDOWN 0x0002   The left button is down.   MOUSEEVENTF_LEFTUP 0x0004   The left button is up.   MOUSEEVENTF_MIDDLEDOWN 0x0020   The middle button is down.   MOUSEEVENTF_MIDDLEUP 0x0040   The middle button is up.   MOUSEEVENTF_MOVE 0x0001   Movement occurred.   MOUSEEVENTF_RIGHTDOWN 0x0008   The right button is down.   MOUSEEVENTF_RIGHTUP 0x0010   The right button is up.   MOUSEEVENTF_WHEEL 0x0800    \t\t\t\t\t\t The wheel has been moved, if the mouse has a wheel. The amount of movement is specified in  \t\t\t\t\t\tdwData   MOUSEEVENTF_XDOWN 0x0080   An X button was pressed.   MOUSEEVENTF_XUP 0x0100    \t\t\t\t\t\t An X button was released.   MOUSEEVENTF_WHEEL 0x0800   The wheel button is rotated.   MOUSEEVENTF_HWHEEL 0x01000   The wheel button is tilted.     The values that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is set when the left button is first pressed, but not for subsequent motions. Similarly, MOUSEEVENTF_LEFTUP is set only when the button is first released.  You cannot specify both MOUSEEVENTF_WHEEL and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP simultaneously in the  \t\t\t\t\t\tdwFlags parameter, because they both require use of the  \t\t\t\t\t\tdwData field."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dx",
        "description": "Type: DWORD The mouse's absolute position along the x-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual x-coordinate; relative data is specified as the number of mickeys moved. A  \t\t\t\t\tmickey is the amount that a mouse has to move for it to report that it has moved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dy",
        "description": "Type: DWORD The mouse's absolute position along the y-axis or its amount of motion since the last mouse event was generated, depending on the setting of MOUSEEVENTF_ABSOLUTE. Absolute data is specified as the mouse's actual y-coordinate; relative data is specified as the number of mickeys moved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwData",
        "description": "Type: DWORD If  \t\t\t\t\tdwFlags contains MOUSEEVENTF_WHEEL, then  \t\t\t\t\tdwData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.                        If dwFlags contains MOUSEEVENTF_HWHEEL, then  \t\t\t\t\tdwData specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left.  \t\t\t\t\t\t If  \t\t\t\t\t\tdwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then  \t\t\t\t\t\tdwData specifies which X buttons were pressed or released. This value may be any combination of the following flags.  If  \t\t\t\t\t\tdwFlags is not MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, then  \t\t\t\t\t\tdwData should be zero.   ValueMeaning  XBUTTON1 0x0001   Set if the first X button was pressed or released.   XBUTTON2 0x0002   Set if the second X button was pressed or released."
      },
      {
        "in_out": "_In_",
        "type": "ULONG_PTR",
        "name": "dwExtraInfo",
        "description": "Type: ULONG_PTR An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: LRESULT The return value is the result of the message processing and depends on the message. For an example, see Designing a Window Procedure. ",
    "remarks": "",
    "return_type": "LRESULT",
    "category": "Mouse Input",
    "name": "DefWindowProc",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window procedure that received the message."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "Msg",
        "description": "Type: UINT The message."
      },
      {
        "in_out": "_In_",
        "type": "WPARAM",
        "name": "wParam",
        "description": "Type: WPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM Additional message information. The content of this parameter depends on the value of the Msg parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a handle to the window that contains the specified point.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the window that contains the point. If no window exists at the given point, the return value is NULL. If the point is over a static text control, the return value is a handle to the window under the static text control. ",
    "remarks": "The WindowFromPoint function does not retrieve a handle to a hidden or disabled window, even if the point is within the window. An application should use the ChildWindowFromPoint function for a nonrestrictive search. For an example, see \"Interface from Running Object Table\" in About Text Object Model. ",
    "return_type": "HWND",
    "category": "Mouse Input",
    "name": "WindowFromPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "Point",
        "description": "Type: POINT The point to be checked."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]