[
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function cannot report with absolute certainty whether a particular URL can be handled, as this cannot be determined until the URL is opened. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCheckURLExtension",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszURL",
        "description": "A wide-character null-terminated string containing a file name or URL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function cannot report with absolute certainty whether a particular URL can be handled, as this cannot be determined until the URL is opened. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCheckURLScheme",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszURLScheme",
        "description": "A wide-character null-terminated string containing a network protocol designation, such as \"http\"."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "Use IWMLicenseBackup::QueryInterface to obtain a pointer to the IWMBackupRestoreProps interface. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateBackupRestorer",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pCallback",
        "description": "Pointer to an IWMStatusCallback interface containing the OnStatus callback method to be used by the new backup restorer object."
      },
      {
        "in_out": "_Out_",
        "type": "IWMLicenseBackup**",
        "name": "ppBackup",
        "description": "Pointer to a pointer to the IWMLicenseBackup interface of the newly created backup restorer object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function creates an object that wraps the certificates that the user has been given. Usually there is no need to call this method; it is used only if the certificates must be supplied to another object that is using the SDK, such as the Microsoft\u00ae DirectShow\u00ae application programming interface (API). ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateCertificate",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IUnknown**",
        "name": "pUnkCert",
        "description": "Pointer to a pointer to the IUnknown interface of the newly created certificate object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateDeviceRegistration",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMDeviceRegistration**",
        "name": "ppDevReg",
        "description": "Address of a pointer to the IWMDeviceRegistration interface of the newly created device registration object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateDRMTranscryptor",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMDRMTranscryptor**",
        "name": "ppTranscryptor",
        "description": "Address of a pointer to the IWMDRMTranscryptor interface of the newly created DRM transcryptor object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateEditor",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMMetadataEditor**",
        "name": "ppEditor",
        "description": "Pointer to a pointer to the IWMMetadataEditor interface of the newly created metadata editor object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateIndexer",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMIndexer**",
        "name": "ppIndexer",
        "description": "Pointer to a pointer to the IWMIndexer interface of the newly created indexer object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateLicenseRevocationAgent",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pCallback",
        "description": "Address of the IUnknown interface of the object that implements the IWMStatusCallback::OnStatus callback method used to communicate license revocation status to the application."
      },
      {
        "in_out": "_Out_",
        "type": "IWMLicenseRevocationAgent**",
        "name": "ppLicenseRevocationAgent",
        "description": "Address of a variable that receives a pointer to the IWMLicenseRevocationAgent interface of the newly created license revocation agent object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "When a profile manager object is created, it parses all of the system profiles. Creating and releasing a profile manager every time you need to use it will adversely affect performance. You should create a profile manager once in your application and release it only when you no longer need to use it. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateProfileManager",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMProfileManager**",
        "name": "ppProfileManager",
        "description": "Pointer to a pointer to the IWMProfileManager interface of the newly created profile manager object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "After this object has been created, you can modify the rights that will be requested for the next file opened by calling IWMDRMReader::SetDRMProperty with the DRM_Rights property. Note that when using this property, the rights are specified as strings, not as DWORD values. The dwRights parameter may be set to 0 when reading non-DRM content. If dwRights is set to 0 and you open a protected file, you can access license related metadata, but you cannot read data from any streams in the file. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateReader",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pUnkReserved",
        "description": "This value must be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRights",
        "description": "DWORD indicating the desired operation. Set to one of the values from the WMT_RIGHTS enumeration type, indicating the operation that is performed on this file. If multiple operations are being performed, dwRights must consist of multiple values from WMT_RIGHTS combined by using the bitwise OR operator."
      },
      {
        "in_out": "_Out_",
        "type": "IWMReader**",
        "name": "ppReader",
        "description": "Pointer to a pointer to the IWMReader interface of the newly created reader object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates an object that implements IWMSecureChannel.",
    "library": "",
    "min_server": "",
    "header": "Wmsecure.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDMETHODCALLTYPE",
    "category": "Windows Media Format",
    "name": "WMCreateSecureChannel",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "IWMSecureChannel**",
        "name": "ppChannel",
        "description": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Creates an object that implements IWMSecureChannel.",
    "library": "",
    "min_server": "",
    "header": "Wmsecure.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDMETHODCALLTYPE",
    "category": "Windows Media Format",
    "name": "WMCreateSecureChannel_Certified",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "IWMSecureChannel**",
        "name": "ppChannel",
        "description": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Creates an object that implements IWMSecureChannel.",
    "library": "",
    "min_server": "",
    "header": "Wmsecure.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDMETHODCALLTYPE",
    "category": "Windows Media Format",
    "name": "WMCreateSecureChannel_Certified_DES",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "IWMSecureChannel**",
        "name": "ppChannel",
        "description": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Creates an object that implements IWMSecureChannel.",
    "library": "",
    "min_server": "",
    "header": "Wmsecure.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT STDMETHODCALLTYPE",
    "category": "Windows Media Format",
    "name": "WMCreateSecureChannel_DES",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "IWMSecureChannel**",
        "name": "ppChannel",
        "description": "Address of a pointer to the IWMSecureChannel interface of the newly created secure channel object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateSyncReader",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pUnkCert",
        "description": "Pointer to an IUnknown interface. This value must be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRights",
        "description": "DWORD specifying the desired operation. When playing back non-DRM content, or for an application that does not have DRM rights, this value can be set to zero. Otherwise, this value must be one of the values from the WMT_RIGHTS enumeration type, indicating the operation that is performed on this file. If multiple operations are being performed, dwRights must consist of multiple values from WMT_RIGHTS combined by using the bitwise OR operator."
      },
      {
        "in_out": "_Out_",
        "type": "IWMSyncReader**",
        "name": "ppSyncReader",
        "description": "Pointer to a pointer to the IWMSyncReader interface of the newly created synchronous reader object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateWriter",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IUnknown*",
        "name": "pUnkReserved",
        "description": "Pointer to an IUnknown interface. This value is not used and should be set to NULL."
      },
      {
        "in_out": "_Out_",
        "type": "IWMWriter**",
        "name": "ppWriter",
        "description": "Pointer to a pointer to the IWMWriter interface of the newly created writer object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateWriterFileSink",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMWriterFileSink**",
        "name": "ppSink",
        "description": "Pointer to a pointer to the IWMWriterFileSink interface of the newly created writer file sink object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateWriterNetworkSink",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMWriterNetworkSink**",
        "name": "ppSink",
        "description": "Pointer to a pointer to the IWMWriterNetworkSink interface of the newly created writer network sink object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h (include Wmsdk.h)",
    "return_value": "The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMCreateWriterPushSink",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "IWMWriterPushSink**",
        "name": "ppSink",
        "description": "Pointer to a pointer to the IWMWriterPushSink interface of the newly created writer push sink object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMIsAvailableOffline",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszURL",
        "description": "Wide-character null-terminated string containing the URL of the file to be checked."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszLanguage",
        "description": "Wide-character null-terminated string containing the RFC 1766-compliant language ID specifying which language is desired for playback. This value is only important for files that contain language-based mutual exclusion. Set to NULL if all languages are acceptable."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfIsAvailableOffline",
        "description": "Pointer to a Boolean value that is set to True if the file is available offline."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMIsContentProtected",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const WCHAR*",
        "name": "pwszFileName",
        "description": "Pointer to a wide-character null-terminated string containing the name of the file to check for DRM-protected content."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfIsProtected",
        "description": "Pointer to a Boolean value that is set to True on function return if the file contains DRM-protected content."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "",
    "library": "Wmvcore.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Wmsdkidl.h",
    "return_value": "The function returns an HRESULT. Possible values include, but are not limited to, those in the following table.  ",
    "remarks": "This function is typically used after a call to WMCheckURLExtension. This is for efficiency, because WMValidateData requires that you read some of the data from the file, whereas WMCheckURLExtension only evaluates the file name extension. It is possible for this function to identify a file as playable when it is not playable. However, if the function identifies a file as not playable, the file is certainly not playable. ",
    "return_type": "HRESULT",
    "category": "Windows Media Format",
    "name": "WMValidateData",
    "is_callback": 0,
    "dll": "Wmvcore.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pbData",
        "description": "Pointer to a BYTE array containing the data buffer to validate. This data should be part of a file, starting at the beginning of the file, and continuing for the number of bytes specified in pdwDataSize. You can set this parameter to NULL to retrieve the minimum number of bytes to pass."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "pdwDataSize",
        "description": "Pointer to a DWORD containing the data size. If pbData is set to NULL, this value will be set to the minimum buffer size on return. The minimum buffer size is 512 bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]