[
  {
    "n_arguments": 1,
    "description": "Requests that the specified transaction be committed.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "You can commit any transaction handle that has been opened or created using the TRANSACTION_COMMIT permission; any application can commit a transaction, not just the creator. This function can only be called if the transaction is still active, not prepared, pre-prepared, or rolled back. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CommitTransaction",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction to be committed.  This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see KTM Security and Access Rights."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "Requests that the specified transaction be committed.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. Success means that the function completed synchronously, and the calling application does not need to wait for pending results. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CommitTransactionAsync",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction to be committed.  This handle must have been opened with the TRANSACTION_COMMIT access right. For more information, see KTM Security and Access Rights."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 7,
    "description": "Creates a new transaction object.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is a handle to the transaction. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended         error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "Use the CloseHandle function to close the transaction      handle. If the last transaction handle is closed before a client  calls the      CommitTransaction function with the transaction      handle, then  KTM rolls back the transaction. If the transaction might need to be promotable to a distributed transaction, then you must grant the Distributed Transaction Coordinator (DTC)  access rights to enlist in the transaction.  To do this, the  lpTransactionAttributes parameter needs to contain an access control entry with the DTC's SID (S-1-5-80-2818357584-3387065753-4000393942-342927828-138088443) and the TRANSACTION_ENLIST right. For more information, see Distributed Transaction Coordinator and Access Control Components. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CreateTransaction",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpTransactionAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES        structure that determines whether the returned handle can be inherited by child processes. If this parameter is        NULL, the handle cannot be inherited.        The lpSecurityDescriptor member of the structure specifies a         security descriptor for the new         event. If lpTransactionAttributes is NULL, the object gets         a default security descriptor. The access control lists (ACL) in the default security descriptor for a         transaction come from the primary or impersonation token of the creator."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPGUID",
        "name": "UOW",
        "description": "Reserved. Must be zero (0)."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "CreateOptions",
        "description": "Any optional transaction instructions.    ValueMeaning  TRANSACTION_DO_NOT_PROMOTE   The transaction cannot be distributed."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "IsolationLevel",
        "description": "Reserved; specify zero (0)."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "IsolationFlags",
        "description": "Reserved; specify zero (0)."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "Timeout",
        "description": "The time-out interval, in milliseconds. If a nonzero value is specified, the transaction will be aborted when the interval elapses if it has not already reached the prepared state. Specify zero (0) or INFINITE to provide an infinite time-out."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "Description",
        "description": "A user-readable description of the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Obtains the identifier (ID) for the specified transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetTransactionId",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction."
      },
      {
        "in_out": "_Out_",
        "type": "LPGUID",
        "name": "TransactionId",
        "description": "A pointer to a variable that receives the ID of the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 7,
    "description": "Returns the requested information about the specified transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetTransactionInformation",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction. The handle must have  the TRANSACTION_QUERY_INFORMATION permission to retrieve the information."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "Outcome",
        "description": "A pointer to a buffer that receives the current outcome of the transaction. If the call to the GetTransactionInformation function is successful, this value will be one of the TRANSACTION_OUTCOME enumeration values."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "IsolationLevel",
        "description": "Reserved."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "IsolationFlags",
        "description": "Reserved."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "Timeout",
        "description": "A pointer to a variable that receives the timeout value, in milliseconds, for this transaction."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "BufferLength",
        "description": "The size of the Description parameter, in bytes. The buffer length value cannot be longer than the value of MAX_TRANSACTION_DESCRIPTION_LENGTH."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR",
        "name": "Description",
        "description": "A pointer to a buffer that receives the user-defined description of the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Opens an existing transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the transaction. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "Clients close the transaction handle by using the CloseHandle function. If the last transaction handle is closed without anyone calling the CommitTransaction function on the transaction, then the KTM implicitly rolls back the transaction. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "OpenTransaction",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDesiredAccess",
        "description": "The access to the transaction object. You must have read and write access to work with a transaction. See Transaction Access Masks for a list of valid values."
      },
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "TransactionId",
        "description": "The GUID that identifies the transaction to be opened. This is commonly referred to as  a unit of work for the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Indicates that the resource manager (RM) has successfully completed rolling back a transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "If the RM was not able to successfully roll back a transaction, the RM should request a full rollback by calling the RollbackTransaction function. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RollbackComplete",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this transaction. See LARGE_INTEGER."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "Requests that the specified transaction be rolled back.  This function is synchronous.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RollbackTransaction",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "Requests that the specified transaction be rolled back.  This function returns asynchronously.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero, and GetLastError returns ERROR_IO_PENDING. If the function fails, the return value is zero. To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RollbackTransactionAsync",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 5,
    "description": "Sets the transaction information for the specified transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "SetTransactionInformation",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction. The handle must have the TRANSACTION_SET_INFORMATION permission to set the transaction information."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "IsolationLevel",
        "description": "Reserved; specify zero."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "IsolationFlags",
        "description": "Reserved."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "Timeout",
        "description": "The timeout value, in milliseconds, for this transaction."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "Description",
        "description": "The user-defined description of this transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Indicates that a resource manager (RM) has finished committing a transaction that was requested by the transaction manager (TM).",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CommitComplete",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment for which the commit operation is completed."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this transaction. If you specify NULL, the virtual clock value is not changed. See LARGE_INTEGER. To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Commits the transaction associated with this enlistment handle. This function is used by communication      resource managers (sometimes called superior transaction managers).",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the         GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CommitEnlistment",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment to commit."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "A pointer to the latest virtual clock value received for this enlistment. If you specify        NULL, the virtual clock value is not changed. To change the virtual clock value, this value must be greater than the current value returned by a        subordinate TM."
      }
    ],
    "min_client": "Windows Vista with SP1"
  },
  {
    "n_arguments": 2,
    "description": "Obtains the identifier (ID) for the specified enlistment.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetEnlistmentId",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_Out_",
        "type": "LPGUID",
        "name": "EnlistmentId",
        "description": "A pointer to a variables that receives the ID of the enlistment."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 6,
    "description": "Creates an enlistment, sets its initial state, and opens a handle to the enlistment with the specified      access.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is a handle to the enlistment. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended         error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "Windows Vista:  Any attempt to enlist during the pre-prepare phase or later will fail. If you do not specify within your notification mask that you accept a single-phase commit request, KTM always      performs a two-phase commit operation. Keep the following notification rules in mind when enlisting in transactions: ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CreateEnlistment",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpEnlistmentrAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES        structure that contains the security attributes for the enlistment manager.  Specify        NULL to obtain the default attributes."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ResourceManagerHandle",
        "description": "A handle to the resource manager (RM) to enlist."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionHandle",
        "description": "A handle to the transaction in which the RM is enlisting."
      },
      {
        "in_out": "_In_",
        "type": "NOTIFICATION_MASK",
        "name": "NotificationMask",
        "description": "The notifications this RM is requesting for the TransactionHandle parameter. For        a list of valid values, see NOTIFICATION_MASK."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "CreateOptions",
        "description": "Any optional enlistment instructions.  ValueMeaning  ENLISTMENT_SUPERIOR 1   Enlist as a superior transaction manager."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "EnlistmentKey",
        "description": "A pointer to a user-defined structure used by the RM that is returned when a notification is sent in the        TRANSACTION_NOTIFICATION structure. This is        typically used to associate a private structure  with this specific transaction."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves an opaque structure of recovery data from KTM.  Recovery information is stored in a log on behalf of a resource manager (RM) by calling the SetEnlistmentRecoveryInformation function.  After a failure, the RM can use the GetEnlistmentRecoveryInformation function to retrieve the information.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "This call cannot be used with volatile transaction managers. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetEnlistmentRecoveryInformation",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "BufferSize",
        "description": "The size of the Buffer parameter, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "Buffer",
        "description": "A pointer to a buffer that receives the enlistment recovery information."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PULONG",
        "name": "BufferUsed",
        "description": "A pointer to a variable that receives the actual number of bytes returned in the Buffer parameter."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Sets an opaque, user-defined structure of recovery data from KTM.  Recovery information is stored in a log on behalf of a resource manager (RM) by calling SetEnlistmentRecoveryInformation.  After a failure, the RM can use GetEnlistmentRecoveryInformation to retrieve the information.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "This call cannot be used with volatile transaction managers. The information that is provided by the user may not be durably stored in the log at the completion of this operation, but it will be durably stored by the end of the next commit operation for this enlistment. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "SetEnlistmentRecoveryInformation",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "BufferSize",
        "description": "The size of Buffer, in bytes."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "Buffer",
        "description": "The recovery information."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Opens an existing enlistment object, and returns a handle to the enlistment.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the enlistment. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "OpenEnlistment",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDesiredAccess",
        "description": "The access requested for this enlistment. See Enlistment Access Masks for a list of valid values."
      },
      {
        "in_out": "",
        "type": "_In_",
        "name": "ResourceManagerHandle",
        "description": "A handle to the resource manager."
      },
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "EnlistmentId",
        "description": "The enlistment identifier."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Prepares the transaction associated with this enlistment handle. This function is used by      communication resource managers (sometimes called superior transaction managers).",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "PrepareEnlistment",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment for which the prepare operation has completed."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "A pointer to the latest virtual clock value received for this transaction."
      }
    ],
    "min_client": "Windows Vista with SP1"
  },
  {
    "n_arguments": 2,
    "description": "Pre-prepares the transaction associated with this enlistment handle. This function is used by      communication resource managers (sometimes called superior transaction managers).",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "PrePrepareEnlistment",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment for which the prepare operation has completed."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "A pointer to the latest virtual clock value received for this transaction."
      }
    ],
    "min_client": "Windows Vista with SP1"
  },
  {
    "n_arguments": 2,
    "description": "Recovers an enlistment's state.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RecoverEnlistment",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "EnlistmentKey",
        "description": "The key to the enlistment to be recovered."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Requests  that the specified enlistment be converted to a read-only enlistment. A read-only enlistment cannot participate in the outcome of the transaction  and is not durably recorded for recovery.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "If a resource manager no longer needs to participate in a transaction without rolling  back the transaction, it should call  ReadOnlyEnlistment prior to closing the enlistment handle. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "ReadOnlyEnlistment",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this enlistment. If you specify NULL, the virtual clock value is not changed. See LARGE_INTEGER. To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Rolls back the specified transaction that is associated with an enlistment. This function cannot be called for read-only enlistments.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "This function is used by an RM to roll back a transaction in which it is enlisted. All work associated with the transaction is rolled back. Rollbacks are allowed by enlistments at any time before it issues a prepare complete notification. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RollbackEnlistment",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this enlistment. See LARGE_INTEGER."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Indicates that the resource manager (RM) is refusing a single-phase request. When a transaction manager (TM) receives this call, it initiates a two-phase commit and sends a prepare request to all enlisted RMs.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "SinglePhaseReject",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received from the single-phase request notification. If you specify NULL, the virtual clock value is not changed. See LARGE_INTEGER. To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 5,
    "description": "Creates a new resource manager (RM) object, and associates the RM with a transaction manager (TM).",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the RM. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function.  The following list identifies the  possible error codes: ",
    "remarks": "Immediately after calling this function, you must call RecoverResourceManager. An RM is an endpoint for TM notifications regarding transactions that the RM has enlisted in. RMs are typically persistent, meaning that after a system failure, they must be reopened  to perform certain operations. Volatile, or transient, RMs can be created by calling the CreateResourceManager function and by specifying RESOURCE_MANAGER_VOLATILE.  Volatile RMs do not perform recovery operations, but do require notifications about a transaction. You can create a volatile RM on a durable TM, but you cannot create a durable RM on a volatile TM. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CreateResourceManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpResourceManagerAttributes",
        "description": "A pointer to a SECURITY_ATTRIBUTES structure that contains the security attributes for the resource manager.  Specify NULL to obtain the default attributes."
      },
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "ResourceManagerID",
        "description": "A pointer the resource manager GUID. This parameter is required and must not be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "CreateOptions",
        "description": "Any optional attributes for the new RM.    ValueMeaning  RESOURCE_MANAGER_VOLATILE   Indicates that the RM is volatile, and does not perform recovery."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TmHandle",
        "description": "A handle to the TM that will manage the transactions for this RM."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "Description",
        "description": "A description for this RM."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 5,
    "description": "Requests and receives a notification for a resource manager (RM). This function is used by the RM      register to receive notifications when a transaction changes state.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "All resource managers must register to receive TRANSACTION_NOTIFY_PREPREPARE,       TRANSACTION_NOTIFY_PREPARE, and TRANSACTION_NOTIFY_COMMIT       notifications, even if they subsequently call       ReadOnlyEnlistment to mark an enlistment as       read-only. Resource managers can support TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT, but       they must also support the multi-phase pre-prepare, prepare, and commit notifications. For the list of all       notifications that resource managers can receive, see       TRANSACTION_NOTIFICATION. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetNotificationResourceManager",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ResourceManagerHandle",
        "description": "A handle  to the resource manager."
      },
      {
        "in_out": "_Out_",
        "type": "PTRANSACTION_NOTIFICATION",
        "name": "TransactionNotification",
        "description": "A pointer to a TRANSACTION_NOTIFICATION        structure that receives the first available notification."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "NotificationLength",
        "description": "The size of the TransactionNotification buffer, in bytes."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "dwMilliseconds",
        "description": "The time, in milliseconds, for which the calling application is blocking while waiting for the notification        to become available. If no notifications are available when the timeout expires,        ERROR_TIMEOUT is returned."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PULONG",
        "name": "ReturnLength",
        "description": "A pointer to a variable that receives the actual size of the notification received by the        TransactionNotification parameter."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 5,
    "description": "Requests and receives asynchronous notification for a resource manager (RM). This function is used by      the RM register to receive notifications when a transaction changes state.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "All resource managers must register to receive TRANSACTION_NOTIFY_PREPREPARE,       TRANSACTION_NOTIFY_PREPARE, and TRANSACTION_NOTIFY_COMMIT       notifications, even if they subsequently call       ReadOnlyEnlistment to mark an enlistment as       read-only. Resource managers can support TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT, but       they must also support the multi-phase pre-prepare, prepare, and commit notifications. For the list of all       notifications that resource managers can receive, see       TRANSACTION_NOTIFICATION. Resource managers (RM) may want to call this function more than once to provide multiple buffers for KTM to      use when delivering notifications. The number of calls to this function depends on how much load your RM is      carrying. This function must be called after the      SetResourceManagerCompletionPort       function is called. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetNotificationResourceManagerAsync",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ResourceManagerHandle",
        "description": "A handle  to the resource manager."
      },
      {
        "in_out": "_Out_",
        "type": "PTRANSACTION_NOTIFICATION",
        "name": "TransactionNotification",
        "description": "A pointer to a        TRANSACTION_NOTIFICATION structure that        receives the first available notification."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "TransactionNotificationLength",
        "description": "The size of the TransactionNotification buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "ReturnLength",
        "description": "A pointer to a variable that receives the actual size of the notification received by the        TransactionNotification parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPOVERLAPPED",
        "name": "pOverlapped",
        "description": "A pointer to an OVERLAPPED structure that is        required for asynchronous operation."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Opens an existing resource manager (RM).",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the resource manager. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "Immediately after calling this function, you must call RecoverResourceManager. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "OpenResourceManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDesiredAccess",
        "description": "The access requested for the RM. See Resource Manager Access Masks for a list of valid values."
      },
      {
        "in_out": "",
        "type": "_In_",
        "name": "TmHandle",
        "description": "A handle to the transaction manager."
      },
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "RmGuid",
        "description": "The identifier  for this resource manager."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Indicates that the resource manager (RM) has completed all processing necessary to guarantee that a commit or abort operation will succeed for the specified transaction.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "PrepareComplete",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this prepare complete notification. If you specify NULL, the virtual clock value is not changed. See LARGE_INTEGER. To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Signals that this resource manager has completed its preprepare work, so that other   resource managers can now begin their prepare operations.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "PrePrepareComplete",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "EnlistmentHandle",
        "description": "A handle to the enlistment."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value received for this preprepare operation. If you specify NULL, the virtual clock value is not changed. See LARGE_INTEGER. To change the virtual clock value, this value must be greater than the current value returned in the COMMIT notification."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "Recovers a resource manager's state from its log file.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RecoverResourceManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ResourceManagerHandle",
        "description": "A handle to the resource manager."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Associates the specified I/O completion port with the specified resource manager (RM). This port receives all notifications for the RM.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "This function must be used in conjunction with the GetNotificationResourceManagerAsync function, which provides the buffers that KTM uses to deliver notifications asynchronously. These functions provide a different way to receive notifications from KTM. You can use these two functions instead of the GetNotificationResourceManager function. This function must be called before calling GetNotificationResourceManagerAsync. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "SetResourceManagerCompletionPort",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ResourceManagerHandle",
        "description": "A handle to the resource manager."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "IoCompletionPortHandle",
        "description": "A handle to the I/O completion port."
      },
      {
        "in_out": "_In_",
        "type": "ULONG_PTR",
        "name": "CompletionKey",
        "description": "The user-defined identifier. Typically, it is used to associate the receive notification with a specific resource manager."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 4,
    "description": "Creates a new transaction manager (TM) object and returns a handle with the specified access.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the transaction manager. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "Immediately after calling this function, you must call RecoverTransactionManager. If your transaction manager is volatile, all your your resource managers must also be volatile. You must call RecoverTransactionManager after creating a TM in order for the TM to function correctly. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "CreateTransactionManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpTransactionAttributes",
        "description": "The transaction SECURITY_ATTRIBUTES (ACLs) for the TM object."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPWSTR",
        "name": "LogFileName",
        "description": "The log file stream name.  If the stream does not exist in the log, it is created. To create a volatile TM, this parameter must be NULL and CreateOptions must specify TRANSACTION_MANAGER_VOLATILE, this transaction manager is considered volatile."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "CreateOptions",
        "description": "Any optional attributes for the new TM.  ValueMeaning  TRANSACTION_MANAGER_VOLATILE   Indicates that the TM is volatile, and does not perform recovery."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "CommitStrength",
        "description": "Reserved; specify zero."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Obtains a virtual clock value from a transaction manager.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetCurrentClockTransactionManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionManagerHandle",
        "description": "A handle to the transaction manager to obtain a virtual clock value for."
      },
      {
        "in_out": "_Out_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "The latest virtual clock value for the transaction manager. See LARGE_INTEGER."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Obtains an identifier for the specified transaction manager.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.  The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "GetTransactionManagerId",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionManagerHandle",
        "description": "A handle to the transaction manager."
      },
      {
        "in_out": "_Out_",
        "type": "LPGUID",
        "name": "TransactionManagerId",
        "description": "A pointer to a variable that receives the identifier for the transaction manager."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Opens an existing transaction manager.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the transaction manager. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "Immediately after calling this function, you must call RecoverTransactionManager. The LogFileName must be specified using the NT file format. For example: \\??\\<drive>:\\<path>. Do not use the .BLF extension. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "OpenTransactionManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "LogFileName",
        "description": "The name of the log stream.  This stream must exist within a CLFS log file."
      },
      {
        "in_out": "_In_",
        "type": "ACCESS_MASK",
        "name": "DesiredAccess",
        "description": "The access requested. See Transaction Manager Access Masks for a list of valid values."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "OpenOptions",
        "description": "Reserved; specify zero."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 3,
    "description": "Opens an existing transaction manager.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is a handle to the transaction manager. If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError function. The following list identifies the  possible error codes: ",
    "remarks": "Immediately after calling this function, you must call RecoverTransactionManager. ",
    "return_type": "HANDLE",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "OpenTransactionManagerById",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "TransactionManagerId",
        "description": "The identifier of the transaction to open."
      },
      {
        "in_out": "_In_",
        "type": "ACCESS_MASK",
        "name": "DesiredAccess",
        "description": "The access requested. See Transaction Manager Access Masks for a list of valid values."
      },
      {
        "in_out": "_In_opt_",
        "type": "ULONG",
        "name": "OpenOptions",
        "description": "Reserved; specify zero."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 1,
    "description": "Recovers a transaction manager's state from  its log file.",
    "library": "Ktmw32.lib",
    "min_server": "Windows Server 2008",
    "header": "Ktmw32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "This function must be called after you call CreateTransactionManager. ",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RecoverTransactionManager",
    "is_callback": 0,
    "dll": "Ktmw32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionManagerHandle",
        "description": "A handle to the transaction manager."
      }
    ],
    "min_client": "Windows Vista"
  },
  {
    "n_arguments": 2,
    "description": "Renames a transaction manager (TM) object. This function can only be used on named TM      handles. A new GUID for the TM is selected and can be retrieved using the      GetTransactionManagerID function.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RenameTransactionManager",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "LogFileName",
        "description": "The name of the log stream.  This stream must exist within a CLFS log file."
      },
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "ExistingTransactionManagerGuid",
        "description": "A value that specifies the current name of the TM."
      }
    ],
    "min_client": "Windows Vista with SP1"
  },
  {
    "n_arguments": 2,
    "description": "Recovers information only to the specified virtual clock value.",
    "library": "KtmW32.lib",
    "min_server": "Windows Server 2008",
    "header": "KtmW32.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call the         GetLastError function. The following list identifies the possible error codes: ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Kernel Transaction Manager (KTM)",
    "name": "RollforwardTransactionManager",
    "is_callback": 0,
    "dll": "KtmW32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TransactionManagerHandle",
        "description": "A handle to the transaction manager."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "TmVirtualClock",
        "description": "A pointer to the latest virtual clock value received for this transaction."
      }
    ],
    "min_client": "Windows Vista with SP1"
  }
]