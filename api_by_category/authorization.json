[
  {
    "n_arguments": 8,
    "description": "The AccessCheck function determines whether a security descriptor grants a specified set of access rights to the client identified by an access token. Typically, server applications use this function to check access to a private object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. The AccessCheck function compares the specified security descriptor with the specified access token and indicates, in the AccessStatus parameter, whether access is granted or denied. If access is granted, the requested access mask becomes the object's granted access mask. If the security descriptor's DACL is NULL, the AccessStatus parameter returns TRUE, which indicates that the client has the requested access. The AccessCheck function fails with ERROR_INVALID_SECURITY_DESCR if the security descriptor does not contain owner and group SIDs. The AccessCheck function does not generate an audit. If your application  requires audits for access checks, use functions such as  AccessCheckAndAuditAlarm, AccessCheckByTypeAndAuditAlarm, AccessCheckByTypeResultListAndAuditAlarm, or AccessCheckByTypeResultListAndAuditAlarmByHandle, instead of  AccessCheck. For an example that uses this function, see       Verifying Client Access with ACLs. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheck",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "A handle to an impersonation token that represents the client that is attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function to contain no generic access rights.     If this parameter is MAXIMUM_ALLOWED, the function sets the GrantedAccess access mask to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPRIVILEGE_SET",
        "name": "PrivilegeSet",
        "description": "A pointer to a  PRIVILEGE_SET structure that receives the privileges used to perform the access validation. If no privileges were used, the function sets the PrivilegeCount member to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "PrivilegeSetLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the PrivilegeSet parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an access mask that receives the granted access rights. If AccessStatus is set to FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "AccessStatus",
        "description": "A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client identified by the access token, AccessStatus is set to TRUE. Otherwise, AccessStatus is set to FALSE, and you can call  GetLastError to get extended error information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The AccessCheckAndAuditAlarm function determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread. If the security descriptor has a SACL with ACEs that apply to the client, the function generates any necessary audit messages in the security event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. The AccessCheckAndAuditAlarm function requires the calling process to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is performed against the primary token of the calling process, not the impersonation token of the thread. The AccessCheckAndAuditAlarm function fails if the calling thread is not impersonating a client. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckAndAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value representing the client's handle to the object. If the access is denied, the system ignores this value."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string specifying the type of object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "ObjectName",
        "description": "A pointer to a null-terminated string specifying the name of the object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "SecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function to contain no generic access rights.     If this parameter is MAXIMUM_ALLOWED, the function sets the GrantedAccess access mask to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ObjectCreation",
        "description": "Specifies a flag that determines whether the calling application will create a new object when access is granted. A value of TRUE indicates the application will create a new object. A value of FALSE indicates the application will open an existing object."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an access mask that receives the granted access rights. If AccessStatus is set to FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "AccessStatus",
        "description": "A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, AccessStatus is set to TRUE. Otherwise, AccessStatus is set to FALSE."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "pfGenerateOnClose",
        "description": "A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the  ObjectCloseAuditAlarm function when the object handle is closed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The AccessCheckByType function determines whether a security descriptor grants a specified set of access rights to the client identified by an access token. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. Typically, server applications use this function to check access to a private object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. The AccessCheckByType function compares the specified security descriptor with the specified access token and indicates, in the AccessStatus parameter, whether access is granted or denied. The ObjectTypeList array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. The AccessCheckByType function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the ObjectTypeList array. The function ignores object-specific ACEs for object types not listed in the ObjectTypeList array. Thus, the results returned in the AccessStatus parameter indicate the access allowed to the subset of the object defined by the ObjectTypeList parameter, not to the entire object. For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see  ACEs to Control Access to an Object's Properties. If the security descriptor's DACL is NULL, the AccessStatus parameter returns TRUE, indicating that the client has the requested access. If the security descriptor does not contain owner and group SIDs, AccessCheckByType fails with ERROR_INVALID_SECURITY_DESCR. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckByType",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "PrincipalSelfSid",
        "description": "A pointer to a security identifier (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the PrincipalSelfSid parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any access control entry  containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see Well-known SIDs.     Set this parameter to NULL if the protected object does not represent a principal."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "A handle to an impersonation token that represents the client attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function to contain no generic access rights.     If this parameter is MAXIMUM_ALLOWED, the function sets the GrantedAccess access mask to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "POBJECT_TYPE_LIST",
        "name": "ObjectTypeList",
        "description": "A pointer to an array of  OBJECT_TYPE_LIST structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value indicating the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.     The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, AccessCheckByType fails and  GetLastError returns ERROR_INVALID_PARAMETER. If ObjectTypeList is NULL, AccessCheckByType is the same as the  AccessCheck function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ObjectTypeListLength",
        "description": "Specifies the number of elements in the ObjectTypeList array."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked. The GenericAll member of the  GENERIC_MAPPING structure should contain all the access rights that can be granted by the resource manager, including STANDARD_RIGHTS_ALL and all of the rights that are set in the GenericRead, GenericWrite, and GenericExecute members."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPRIVILEGE_SET",
        "name": "PrivilegeSet",
        "description": "A pointer to a  PRIVILEGE_SET structure that receives the privileges used to perform the access validation. If no privileges were used, the function sets the PrivilegeCount member to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "PrivilegeSetLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the PrivilegeSet parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an access mask that receives the granted access rights. If AccessStatus is set to FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "AccessStatus",
        "description": "A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client identified by the access token, AccessStatus is set to TRUE. Otherwise, AccessStatus is set to FALSE, and you can call  GetLastError to get extended error information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 16,
    "description": "The AccessCheckByTypeAndAuditAlarm function determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. If the security descriptor has a system access control list (SACL) with access control entries (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. If the PrincipalSelfSid and ObjectTypeList parameters are NULL, the AuditType parameter is AuditEventObjectAccess, and the Flags parameter is zero, AccessCheckByTypeAndAuditAlarm performs in the same way as the  AccessCheckAndAuditAlarm function. The ObjectTypeList array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. The AccessCheckByTypeAndAuditAlarm function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the ObjectTypeList array. The function ignores object-specific ACEs for object types not listed in the ObjectTypeList array. Thus, the results returned in the AccessStatus parameter indicate the access allowed to the subset of the object defined by the ObjectTypeList parameter, not to the entire object. For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see  ACEs to Control Access to an Object's Properties. To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the primary token of the calling process, not the impersonation token of the thread. If the Flags parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled. The AccessCheckByTypeAndAuditAlarm function fails if the calling thread is not impersonating a client. If the security descriptor does not contain owner and group SIDs, AccessCheckByTypeAndAuditAlarm fails with ERROR_INVALID_SECURITY_DESCR. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckByTypeAndAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "ObjectName",
        "description": "A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "PrincipalSelfSid",
        "description": "A pointer to a security identifier (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the PrincipalSelfSid parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see Well-known SIDs.     If the protected object does not represent a principal, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "An access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function to contain no generic access rights.     If this parameter is MAXIMUM_ALLOWED, the function sets the GrantedAccess access mask to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_In_",
        "type": "AUDIT_EVENT_TYPE",
        "name": "AuditType",
        "description": "The type of audit to be generated. This can be one of the values from the  AUDIT_EVENT_TYPE enumeration type."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "A flag that controls the function's behavior if the calling process does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "POBJECT_TYPE_LIST",
        "name": "ObjectTypeList",
        "description": "A pointer to an array of  OBJECT_TYPE_LIST structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.     The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, AccessCheckByTypeAndAuditAlarm fails and  GetLastError returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ObjectTypeListLength",
        "description": "The number of elements in the ObjectTypeList array."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ObjectCreation",
        "description": "A flag that determines whether the calling application will create a new object when access is granted. A value of TRUE indicates the application will create a new object. A value of FALSE indicates the application will open an existing object."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an access mask that receives the granted access rights. If AccessStatus is set to FALSE, the function sets the access mask to zero. If the function fails, it does not set the access mask."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "AccessStatus",
        "description": "A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, AccessStatus is set to TRUE. Otherwise, AccessStatus is set to FALSE and you can call  GetLastError to get extended error information."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "pfGenerateOnClose",
        "description": "A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the  ObjectCloseAuditAlarm function when the object handle is closed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The AccessCheckByTypeResultList function determines whether a security descriptor grants a specified set of access rights to the client identified by an access token. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. Typically, server applications use this function to check access to a private object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. The AccessCheckByTypeResultList function compares the specified security descriptor with the specified access token and indicates, in the AccessStatusList parameter, whether access is granted or denied for each of the elements in the object types list. The ObjectTypeList array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. The AccessCheckByTypeResultList function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the ObjectTypeList array. The function ignores object-specific ACEs for object types not listed in the ObjectTypeList array. Thus, the results returned for element zero in the AccessStatusList parameter indicate the access allowed to the subset of the object defined by the ObjectTypeList parameter, not to the entire object. For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see  ACEs to Control Access to an Object's Properties. If the security descriptor's discretionary access control list (DACL) is NULL, the function grants the requested access to all of the elements in the object type list. If the security descriptor does not contain owner and group SIDs, AccessCheckByTypeResultList fails with ERROR_INVALID_SECURITY_DESCR. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckByTypeResultList",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "PrincipalSelfSid",
        "description": "A pointer to a security identifier (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the PrincipalSelfSid parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any access control entry (ACE) that contains the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see Well-known SIDs.     If the protected object does not represent a principal, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "A handle to an impersonation token that represents the client attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "An access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function to contain no generic access rights.     If this parameter is MAXIMUM_ALLOWED, the function sets the access masks in the GrantedAccess array to indicate the client's maximum access rights to each element in the object type list."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "POBJECT_TYPE_LIST",
        "name": "ObjectTypeList",
        "description": "A pointer to an array of  OBJECT_TYPE_LIST structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.     The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, AccessCheckByTypeResultList fails and  GetLastError returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ObjectTypeListLength",
        "description": "The number of elements in the ObjectTypeList array. This is also the number of elements in the arrays pointed to by the GrantedAccessList and AccessStatusList parameters."
      },
      {
        "in_out": "_Out_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPRIVILEGE_SET",
        "name": "PrivilegeSet",
        "description": "A pointer to a  PRIVILEGE_SET structure that receives the privileges used to perform the access validation. If no privileges were used, the function sets the PrivilegeCount member to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "PrivilegeSetLength",
        "description": "The size, in bytes, of the buffer pointed to by the PrivilegeSet parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccessList",
        "description": "A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "AccessStatusList",
        "description": "A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 16,
    "description": "The AccessCheckByTypeResultListAndAuditAlarm function determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread. The function can check access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. If the security descriptor has a system access control list (SACL) with access control entries (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not currently supported.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. The AccessCheckByTypeResultListAndAuditAlarm function is a combination of the  AccessCheckByTypeResultList and  AccessCheckAndAuditAlarm functions. The ObjectTypeList array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. The AccessCheckByTypeResultListAndAuditAlarm function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the ObjectTypeList array. The function ignores object-specific ACEs for object types not listed in the ObjectTypeList array. For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see  ACEs to Control Access to an Object's Properties. To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the primary token of the calling process, not the impersonation token of the thread. If the Flags parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled. The AccessCheckByTypeResultListAndAuditAlarm function fails if the calling thread is not impersonating a client. If the security descriptor does not contain owner and group SIDs, AccessCheckByTypeResultListAndAuditAlarm fails with ERROR_INVALID_SECURITY_DESCR. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckByTypeResultListAndAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "ObjectName",
        "description": "A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "PrincipalSelfSid",
        "description": "A pointer to a security identifier (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the PrincipalSelfSid parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE that contains the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see Well-known SIDs. Set this parameter to NULL if the protected object does not represent a principal."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "An access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function so that it contains no generic access rights. If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in GrantedAccess to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_In_",
        "type": "AUDIT_EVENT_TYPE",
        "name": "AuditType",
        "description": "The type of audit to be generated. This can be one of the values from the  AUDIT_EVENT_TYPE enumeration type."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "A flag that controls the function's behavior if the calling process does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "POBJECT_TYPE_LIST",
        "name": "ObjectTypeList",
        "description": "A pointer to an array of  OBJECT_TYPE_LIST structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID. The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, AccessCheckByTypeResultListAndAuditAlarm fails, and  GetLastError returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ObjectTypeListLength",
        "description": "The number of elements in the ObjectTypeList array."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ObjectCreation",
        "description": "A flag that determines whether the calling application will create a new object when access is granted. A value of TRUE indicates the application will create a new object. A value of FALSE indicates the application will open an existing object."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "AccessStatusList",
        "description": "A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "pfGenerateOnClose",
        "description": "A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the  ObjectCloseAuditAlarm function when the object handle is closed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 17,
    "description": "The AccessCheckByTypeResultListAndAuditAlarmByHandle function determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating. The difference between this function and  AccessCheckByTypeResultListAndAuditAlarm is that this function allows the calling thread to perform the access check before impersonating the client.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works overview. Like  AccessCheckByTypeResultListAndAuditAlarm, the AccessCheckByTypeResultListAndAuditAlarmByHandle function is a combination of the  AccessCheckByTypeResultList and  AccessCheckAndAuditAlarm functions. However, AccessCheckByTypeResultListAndAuditAlarmByHandle also requires a client token handle to provide security information on the client. The ObjectTypeList array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2. The AccessCheckByTypeResultListAndAuditAlarmByHandle function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the ObjectTypeList array. The function ignores object-specific ACEs for object types not listed in the ObjectTypeList array. For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see  ACEs to Control Access to an Object's Properties. To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the primary token of the calling process, not the impersonation token of the thread. If the Flags parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled. The AccessCheckByTypeResultListAndAuditAlarmByHandle function fails if the calling thread is not impersonating a client. If the security descriptor does not contain owner and group SIDs, AccessCheckByTypeResultListAndAuditAlarmByHandle fails with ERROR_INVALID_SECURITY_DESCR. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AccessCheckByTypeResultListAndAuditAlarmByHandle",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "A handle to a token object that represents the client that requested the operation. This handle must be obtained through a communication session layer, such as a local named pipe, to prevent possible security policy violations. The caller must have TOKEN_QUERY access for the specified token."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "ObjectName",
        "description": "A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure against which access is checked."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "PrincipalSelfSid",
        "description": "A pointer to a SID. If the security descriptor is associated with an object that represents a principal (for example, a user object), the PrincipalSelfSid parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see Well-known SIDs. Set this parameter to NULL if the protected object does not represent a principal."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "An access mask that specifies the access rights to check. This mask must have been mapped by the  MapGenericMask function so that it contains no generic access rights. If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in GrantedAccess to indicate the maximum access rights the security descriptor allows the client."
      },
      {
        "in_out": "_In_",
        "type": "AUDIT_EVENT_TYPE",
        "name": "AuditType",
        "description": "The type of audit to be generated. This can be one of the values from the  AUDIT_EVENT_TYPE enumeration type."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "A flag that controls the function's behavior if the calling process does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "POBJECT_TYPE_LIST",
        "name": "ObjectTypeList",
        "description": "A pointer to an array of  OBJECT_TYPE_LIST structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID. The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, AccessCheckByTypeResultListAndAuditAlarmByHandle fails, and  GetLastError returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ObjectTypeListLength",
        "description": "The number of elements in the ObjectTypeList array."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to the  GENERIC_MAPPING structure associated with the object for which access is being checked."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ObjectCreation",
        "description": "A flag that determines whether the calling application will create a new object when access is granted. A value of TRUE indicates the application will create a new object. A value of FALSE indicates the application will open an existing object."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "GrantedAccess",
        "description": "A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "AccessStatusList",
        "description": "A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "pfGenerateOnClose",
        "description": "A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the  ObjectCloseAuditAlarm function when the object handle is closed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AddAccessAllowedAce function adds an access-allowed access control entry (ACE) to an access control list (ACL). The access is granted to a specified security identifier (SID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The addition of an access-allowed ACE to an ACL is the most common form of ACL modification. The AddAccessAllowedAce and AddAccessDeniedAce functions add a new ACE to the end of the list of ACEs for the ACL. These functions do not automatically place the new ACE in the proper canonical order. It is the caller's responsibility to ensure that the ACL is in canonical order by adding ACEs in the proper sequence. The  ACE_HEADER structure placed in the ACE by the AddAccessAllowedAce function specifies a type and size, but provides no inheritance and no ACE flags. For an example that uses this function, see Starting an Interactive Client Process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessAllowedAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. This function adds an access-allowed ACE to the end of this ACL. The ACE is in the form of an  ACCESS_ALLOWED_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified.    This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "Specifies the mask of access rights to be granted to the specified SID."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID  representing a user, group, or logon account being granted access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddAccessAllowedAceEx function adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see  Order of ACEs in a DACL. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessAllowedAceEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a DACL. The AddAccessAllowedAceEx function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an  ACCESS_ALLOWED_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the DACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the DACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "A set of bit flags that use the  ACCESS_MASK format. These flags specify the access rights that the new ACE allows for the specified security identifier (SID)."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID that identifies the user, group, or logon session to which the new ACE allows access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AddAccessAllowedObjectAce function adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL). The new ACE can grant access to an object, or to a property set or property on an object. You can also use AddAccessAllowedObjectAce to add an ACE that only a specified type of child object can inherit.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "If both ObjectTypeGuid and InheritedObjectTypeGuid are NULL, use the  AddAccessAllowedAceEx function rather than AddAccessAllowedObjectAce. This is suggested because an  ACCESS_ALLOWED_ACE is smaller and more efficient than an  ACCESS_ALLOWED_OBJECT_ACE. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see  Order of ACEs in a DACL. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessAllowedObjectAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a DACL. The AddAccessAllowedObjectAce function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an  ACCESS_ALLOWED_OBJECT_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the DACL being modified. This value must be ACL_REVISION_DS. If the DACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "A set of bit flags that use the  ACCESS_MASK format. These flags specify the access rights that the new ACE allows for the specified security identifier (SID)."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "ObjectTypeGuid",
        "description": "A pointer to a  GUID structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is NULL, the new ACE protects the object to which the DACL is assigned."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "InheritedObjectTypeGuid",
        "description": "A pointer to a GUID structure that identifies the type of object that can inherit the new ACE. If this parameter is non-NULL, only the specified object type can inherit the ACE. If NULL, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the AceFlags parameter, as well as by any protection against inheritance placed on the child objects."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID that identifies the user, group, or logon session to which the new ACE allows access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AddAccessDeniedAce function adds an access-denied access control entry (ACE) to an access control list (ACL). The access is denied to a specified security identifier (SID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The  AddAccessAllowedAce and AddAccessDeniedAce functions add a new ACE to the end of the list of ACEs for the ACL. These functions do not automatically place the new ACE in the proper canonical order. It is the caller's responsibility to ensure that the ACL is in canonical order by adding ACEs in the proper sequence. The  ACE_HEADER structure placed in the ACE by the AddAccessDeniedAce function specifies a type and size, but provides no ACE flags. The ACE added by AddAccessDeniedAce is not inheritable. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessDeniedAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL . This function adds an access-denied ACE to the end of this ACL. The ACE is in the form of an  ACCESS_DENIED_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified.    This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "Specifies the mask of access rights being denied to the specified SID."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the SID structure representing the user, group, or logon account being denied access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddAccessDeniedAceEx function adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "Although the AddAccessDeniedAceEx function adds the new ACE to the end of the DACL, access-denied ACEs should appear at the beginning of a DACL. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see  Order of ACEs in a DACL. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessDeniedAceEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a DACL. The AddAccessDeniedAceEx function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an  ACCESS_DENIED_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the DACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the DACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "A set of bit flags that use the  ACCESS_MASK format to specify the access rights that the new ACE denies to the specified security identifier (SID)."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID  that identifies the user, group, or logon session to which the new ACE denies access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AddAccessDeniedObjectAce function adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL). The new ACE can deny access to an object, or to a property set or property on an object. You can also use AddAccessDeniedObjectAce to add an ACE that only a specified type of child object can inherit.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "If both ObjectTypeGuid and InheritedObjectTypeGuid are NULL, use the  AddAccessDeniedAceEx function rather than AddAccessDeniedObjectAce. This is suggested because an  ACCESS_DENIED_ACE is smaller and more efficient than an  ACCESS_DENIED_OBJECT_ACE. Although the AddAccessDeniedObjectAce function adds the new ACE to the end of the ACL, access-denied ACEs should appear at the beginning of an ACL. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see  Order of ACEs in a DACL. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAccessDeniedObjectAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a DACL. The AddAccessDeniedObjectAce function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an  ACCESS_DENIED_OBJECT_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the DACL being modified. This value must be ACL_REVISION_DS. If the DACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "A set of bit flags that use the  ACCESS_MASK format to specify the access rights that the new ACE denies to the specified security identifier (SID)."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "ObjectTypeGuid",
        "description": "A pointer to a  GUID structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is NULL, the new ACE protects the object to which the ACL is assigned."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "InheritedObjectTypeGuid",
        "description": "A pointer to a GUID structure that identifies the type of object that can inherit the new ACE. If this parameter is non-NULL, only the specified object type can inherit the ACE. If NULL, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the AceFlags parameter, as well as by any protection against inheritance placed on the child objects."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID  that identifies the user, group, or logon session to which the new ACE allows access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddAce function adds one or more access control entries (ACEs) to a specified access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "Applications frequently use the  FindFirstFreeAce and  GetAce functions when using the AddAce function to manipulate an ACL. In addition, the  ACL_SIZE_INFORMATION structure retrieved by the  GetAclInformation function contains the size of the ACL and the number of ACEs it contains. For an example that uses this function, see Starting an Interactive Client Process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. This function adds an ACE to this ACL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified.    This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs. This value must be compatible with the AceType field of all ACEs in pAceList.   Otherwise, the function will fail and set the last error to ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStartingAceIndex",
        "description": "Specifies the position in the ACL's list of ACEs at which to add new ACEs. A value of zero inserts the ACEs at the beginning of the list. A value of MAXDWORD appends the ACEs to the end of the list."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pAceList",
        "description": "A pointer to a list of one or more ACEs to be added to the specified ACL. The ACEs in the list must be stored contiguously."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nAceListLength",
        "description": "Specifies the size, in bytes, of the input buffer pointed to by the pAceList parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AddAuditAccessAce function adds a system-audit access control entry (ACE) to a system access control list (ACL). The access of a specified security identifier (SID) is audited.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "The  ACE_HEADER structure placed in the ACE by the AddAuditAccessAce function specifies a type and size, but provides no ACE flags. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAuditAccessAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. This function adds a system-audit ACE to this ACL. The ACE is in the form of a  SYSTEM_AUDIT_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified.    This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAccessMask",
        "description": "Specifies the mask of access rights to be audited for the specified SID."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID representing the process whose access is being audited."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditSuccess",
        "description": "Specifies whether successful access attempts are to be audited. Set this flag to TRUE to enable auditing; otherwise, set it to FALSE."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditFailure",
        "description": "Specifies whether unsuccessful access attempts are to be audited. Set this flag to TRUE to enable auditing; otherwise, set it to FALSE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AddAuditAccessAceEx function adds a system-audit access control entry (ACE) to the end of a system access control list (SACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAuditAccessAceEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a SACL. The AddAuditAccessAceEx function adds a system-audit ACE to this SACL. The ACE is in the form of a  SYSTEM_AUDIT_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the SACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the SACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance and the type of access attempts to audit. The function sets these flags in the AceFlags member of the ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   FAILED_ACCESS_ACE_FLAG   If you set this flag or specify TRUE for the bAuditFailure parameter, failed attempts to use the specified access rights cause the system to generate an audit record in the security event log.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects.   SUCCESSFUL_ACCESS_ACE_FLAG   If you set this flag or specify TRUE for the bAuditSuccess parameter, successful uses of the specified access rights cause the system to generate an audit record in the security event log."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAccessMask",
        "description": "A set of bit flags that use the  ACCESS_MASK format to specify the access rights that the new ACE audits for the specified security identifier (SID)."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID that identifies the user, group, or logon session for which the new ACE audits access."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditSuccess",
        "description": "Specifies whether successful uses of the specified access rights cause the system to generate an audit record in the security event log. If this flag is TRUE or if the AceFlags parameter specifies the SUCCESSFUL_ACCESS_ACE_FLAG flag, the system records successful access attempts; otherwise, it does not."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditFailure",
        "description": "Specifies whether failed attempts to use the specified access rights cause the system to generate an audit record in the security event log. If this flag is TRUE or if the AceFlags parameter specifies the FAILED_ACCESS_ACE_FLAG flag, the system records failed access attempts; otherwise, it does not."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The AddAuditAccessObjectAce function adds a system-audit access control entry (ACE) to the end of a system access control list (SACL). The new ACE can audit access to an object, or to a property set or property on an object. You can also use AddAuditAccessObjectAce to add an ACE that only a specified type of child object can inherit.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "If both ObjectTypeGuid and InheritedObjectTypeGuid are NULL, use the  AddAuditAccessAceEx function rather than AddAuditAccessObjectAce. This is suggested because a  SYSTEM_AUDIT_ACE is smaller and more efficient than a  SYSTEM_AUDIT_OBJECT_ACE. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddAuditAccessObjectAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to a SACL. The AddAuditAccessObjectAce function adds a system-audit ACE to the end of this SACL. The ACE is in the form of a  SYSTEM_AUDIT_OBJECT_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the SACL being modified. This value must be ACL_REVISION_DS. If the SACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance and the type of access attempts to audit. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   FAILED_ACCESS_ACE_FLAG   If you set this flag or specify TRUE for the bAuditFailure parameter, failed attempts to use the specified access rights cause the system to generate an audit record in the security event log.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the access control list (ACL) is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects.   SUCCESSFUL_ACCESS_ACE_FLAG   If you set this flag or specify TRUE for the bAuditSuccess parameter, successful uses of the specified access rights cause the system to generate an audit record in the security event log."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "An  ACCESS_MASK that specifies the access rights that the new ACE audits for the specified security identifier (SID)."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "ObjectTypeGuid",
        "description": "A pointer to a  GUID structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is NULL, the new ACE protects the object to which the ACL is assigned."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "InheritedObjectTypeGuid",
        "description": "A pointer to a GUID structure that identifies the type of object that can inherit the new ACE. If this parameter is non-NULL, only the specified object type can inherit the ACE. If NULL, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the AceFlags parameter, as well as by any protection against inheritance placed on the child objects."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID that identifies the user, group, or logon session for which the new ACE audits access."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditSuccess",
        "description": "Specifies whether successful uses of the specified access rights cause the system to generate an audit record in the security event log. If this flag is TRUE or if the AceFlags parameter specifies the SUCCESSFUL_ACCESS_ACE_FLAG flag, the system records successful access attempts; otherwise, it does not."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bAuditFailure",
        "description": "Specifies whether failed attempts to use the specified access rights cause the system to generate an audit record in the security event log. If this flag is TRUE or if the AceFlags parameter specifies the FAILED_ACCESS_ACE_FLAG flag, the system records failed access attempts; otherwise, it does not."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The AddConditionalAce function adds a conditional  access control entry (ACE) to the specified access control list (ACL). A conditional ACE specifies a logical condition that is evaluated during access checks.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddConditionalAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. This function adds an ACE to this ACL. The value of this parameter cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS.        Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   The ACE is inherited by container objects.   INHERIT_ONLY_ACE   The ACE does not apply to the object to which the ACL is assigned, but it can be inherited by child objects.   INHERITED_ACE   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   The ACE is inherited by noncontainer objects."
      },
      {
        "in_out": "_In_",
        "type": "UCHAR",
        "name": "AceType",
        "description": "The type of the ACE. This can be one of the following values.  ValueMeaning  ACCESS_ALLOWED_CALLBACK_ACE_TYPE 0x9   Access-allowed callback ACE that uses the  ACCESS_ALLOWED_CALLBACK_ACE structure.   ACCESS_DENIED_CALLBACK_ACE_TYPE 0xA   Access-denied callback ACE that uses the  ACCESS_DENIED_CALLBACK_ACE structure.   SYSTEM_AUDIT_CALLBACK_ACE_TYPE 0xD   System audit callback ACE that uses the  SYSTEM_AUDIT_CALLBACK_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "Specifies the mask of access rights to be granted to the specified SID."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID  that represents a user, group, or logon account being granted access."
      },
      {
        "in_out": "_In_",
        "type": "PWCHAR",
        "name": "ConditionStr",
        "description": "A string that specifies the conditional statement to be evaluated for the ACE."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "ReturnLength",
        "description": "The size, in bytes, of the ACL. If the buffer specified by the pACL parameter is not of sufficient size, the value of this parameter is the required size."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddMandatoryAce function adds a SYSTEM_MANDATORY_LABEL_ACE access control entry (ACE) to the specified system access control list (SACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Securitybaseapi.h (include WinBase.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista (include Windows.h)",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call  GetLastError. The following are possible error values.  ",
    "remarks": "To compile an application that uses this function, define _WIN32_WINNT as 0x0600 or later. For more information, see  Using the Windows Headers. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddMandatoryAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an   SACL. This function adds a mandatory ACE to the end of this SACL. The ACE is in the form of a  SYSTEM_MANDATORY_LABEL_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "The revision level of the SACL being modified.  This value can be one of the following values.  ValueMeaning  ACL_REVISION   The SACL does not contain object-specific ACEs.   ACL_REVISION_DS   The SACL contains object-specified ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. This function sets these flags in the AceFlags member of the  ACE_HEADER structure of the new ACE. This parameter can be a combination of the following values.  ValueMeaning  OBJECT_INHERIT_ACE 0x1   The ACE is inherited by noncontainer objects.   CONTAINER_INHERIT_ACE 0x2   The ACE is inherited by container objects.   NO_PROPAGATE_INHERIT_ACE 0x4   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   INHERIT_ONLY_ACE 0x8   The ACE does not apply to the object to which the SACL is assigned, but the ACE can be inherited by child objects.   INHERITED_ACE 0x10   The ACE is inherited. Operations that change the security on a tree of objects may modify inherited ACEs without changing ACEs that were directly applied to the object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "MandatoryPolicy",
        "description": "The access policy for principals with a mandatory integrity level lower than the object associated with the SACL that contains this ACE.  ValueMeaning  SYSTEM_MANDATORY_LABEL_NO_WRITE_UP 0x1   A principal with a lower mandatory level than the object cannot write to the object.   SYSTEM_MANDATORY_LABEL_NO_READ_UP 0x2   A principal with a lower mandatory level than the object cannot read the object.   SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP 0x4   A principal with a lower mandatory level than the object cannot execute the object."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pLabelSid",
        "description": "A pointer to an SID that specifies the mandatory integrity level of the object associated with the SACL being appended."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AddResourceAttributeAce function adds a SYSTEM_RESOURCE_ATTRIBUTE_ACE access control entry (ACE) to the end of a system access control list (SACL). A SYSTEM_RESOURCE_ATTRIBUTE_ACE structure specifies an attribute name and a value-ordered list of elements  that is associated with a resource and potentially used during access checks. The set of standard access rights are defined in the Standard Access Rights topic.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Securitybaseapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call         GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddResourceAttributeAce",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an access control list (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be NULL. The ACE is in the form of a  SYSTEM_RESOURCE_ATTRIBUTE_ACE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the ACE_HEADER structure of the new ACE. For consistency with the Windows 8 Advanced File Permissions UI, applications should specify the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags in the AceFlags parameter.  This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE 2 (0x2)   The ACE is inherited by the container objects.   INHERIT_ONLY_ACE 8 (0x8)   The ACE does not apply to the object the ACE is assigned to, but it can be inherited by child objects.   INHERITED_ACE 16 (0x10)   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE 4 (0x4)   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE 1 (0x1)   The ACE is inherited by non-container objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "Must be zero for Windows 8 and Windows Server 2012."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "Must be the Everyone SID (S-1-1-0) for Windows 8 and Windows Server 2012."
      },
      {
        "in_out": "_In_",
        "type": "PCLAIM_SECURITY_ATTRIBUTES_INFORMATION",
        "name": "pAttributeInfo",
        "description": "Specifies the attribute information that will be appended after the SID in the ACE."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pReturnLength",
        "description": "The size, in bytes, of the actual ACL buffer used. If the buffer specified by the pAcl parameter is not big enough, the value of this parameter is the total size required for the ACL buffer."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AddScopedPolicyIDAce function adds a SYSTEM_SCOPED_POLICY_ID_ACE access control entry (ACE) to the end of a system access control list (SACL). A SYSTEM_SCOPED_POLICY_ID_ACE structure specifies a central access policy (CAP) to be associated with the resource and can be  used during access checks. The set of standard access rights are defined in the Standard Access Rights topic.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Securitybaseapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call         GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AddScopedPolicyIDAce",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an access control list (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceRevision",
        "description": "Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AceFlags",
        "description": "A set of bit flags that control ACE inheritance. The function sets these flags in the AceFlags member of the ACE_HEADER structure of the new ACE. For consistency with the Windows 8 Advanced File Permissions UI, applications should specify the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags in the AceFlags parameter.  This parameter can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE 2 (0x2)   The ACE is inherited by the container objects.   INHERIT_ONLY_ACE 8 (0x8)   The ACE does not apply to the object the ACE is assigned to, but it can be inherited by child objects.   INHERITED_ACE 16 (0x10)   Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.   NO_PROPAGATE_INHERIT_ACE 4 (0x4)   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE 1 (0x1)   The ACE is inherited by non-container objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessMask",
        "description": "Must be zero for Windows 8 and Windows Server 2012."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the SID (S-1-17-*) that identifies the Central Access Policy to be associated with the resource."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AdjustTokenGroups function enables or disables groups already present in the specified access token. Access to TOKEN_ADJUST_GROUPS is required to enable or disable groups in an access token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The information retrieved in the PreviousState parameter is formatted as a TOKEN_GROUPS structure. This means a pointer to the buffer can be passed as the NewState parameter in a subsequent call to the AdjustTokenGroups function, restoring the original state of the groups. The NewState parameter can list groups to be changed that are not present in the access token. This does not affect the successful modification of the groups in the token. The AdjustTokenGroups function cannot disable groups with the SE_GROUP_MANDATORY attribute in the TOKEN_GROUPS structure. Use  CreateRestrictedToken instead. You cannot enable a group that has the SE_GROUP_USE_FOR_DENY_ONLY attribute. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AdjustTokenGroups",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to the access token that contains the groups to be enabled or disabled. The handle must have TOKEN_ADJUST_GROUPS access to the token. If the PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ResetToDefault",
        "description": "Boolean value that indicates whether the groups are to be set to their default enabled and disabled states. If this value is TRUE, the groups are set to their default states and the NewState parameter is ignored. If this value is FALSE, the groups are set according to the information pointed to by the NewState parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTOKEN_GROUPS",
        "name": "NewState",
        "description": "A pointer to a  TOKEN_GROUPS structure that contains the groups to be enabled or disabled. If the ResetToDefault parameter is FALSE, the function sets each of the groups to the value of that group's SE_GROUP_ENABLED attribute in the TOKEN_GROUPS structure. If ResetToDefault is TRUE, this parameter is ignored."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "BufferLength",
        "description": "The size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be zero if the PreviousState parameter is NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTOKEN_GROUPS",
        "name": "PreviousState",
        "description": "A pointer to a buffer that receives a  TOKEN_GROUPS structure containing the previous state of any groups the function modifies. That is, if a group has been modified by this function, the group and its previous state are contained in the TOKEN_GROUPS structure referenced by PreviousState. If the GroupCount member of TOKEN_GROUPS is zero, then no groups have been changed by this function. This parameter can be NULL.     If a buffer is specified but it does not contain enough space to receive the complete list of modified groups, no group states are changed and the function fails. In this case, the function sets the variable pointed to by the ReturnLength parameter to the number of bytes required to hold the complete list of modified groups."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "ReturnLength",
        "description": "A pointer to a variable that receives the actual number of bytes needed for the buffer pointed to by the PreviousState parameter. This parameter can be NULL and is ignored if PreviousState is NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. To determine whether the function adjusted all of the specified privileges, call  GetLastError, which returns one of the following values when the function succeeds:  If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The AdjustTokenPrivileges function cannot add new privileges to the access token. It can only enable or disable the token's existing privileges. To determine the token's privileges, call the  GetTokenInformation function. The NewState parameter can specify privileges that the token does not have, without causing the function to fail. In this case, the function adjusts the privileges that the token does have and ignores the other privileges so that the function succeeds. Call the GetLastError function to determine whether the function adjusted all of the specified privileges. The PreviousState parameter indicates the privileges that were adjusted. The PreviousState parameter retrieves a  TOKEN_PRIVILEGES structure that contains the original state of the adjusted privileges. To restore the original state, pass the PreviousState pointer as the NewState parameter in a subsequent call to the AdjustTokenPrivileges function. For an example that uses this function, see Enabling and Disabling Privileges. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AdjustTokenPrivileges",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to the access token that contains the privileges to be modified. The handle must have TOKEN_ADJUST_PRIVILEGES access to the token. If the PreviousState parameter is not NULL, the handle must also have TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "DisableAllPrivileges",
        "description": "Specifies whether the function disables all of the token's privileges. If this value is TRUE, the function disables all privileges and ignores the NewState parameter. If it is FALSE, the function modifies privileges based on the information pointed to by the NewState parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTOKEN_PRIVILEGES",
        "name": "NewState",
        "description": "A pointer to a  TOKEN_PRIVILEGES structure that specifies an array of privileges and their attributes. If the DisableAllPrivileges parameter is FALSE, the  AdjustTokenPrivileges  function enables, disables, or removes these privileges for the token. The following table describes the action taken by the AdjustTokenPrivileges function, based on the privilege attribute.  ValueMeaning  SE_PRIVILEGE_ENABLED   The function enables the privilege.   SE_PRIVILEGE_REMOVED   The privilege is removed from the list of privileges in the token. The other privileges in the list are reordered to remain contiguous.             SE_PRIVILEGE_REMOVED supersedes SE_PRIVILEGE_ENABLED. Because the privilege has been removed from the token, attempts to reenable the privilege result in the warning ERROR_NOT_ALL_ASSIGNED as if the privilege had never existed. Attempting to remove a privilege that does not exist in the token results in ERROR_NOT_ALL_ASSIGNED being returned. Privilege checks for removed privileges result in STATUS_PRIVILEGE_NOT_HELD.  Failed privilege check auditing occurs as normal. The removal of the privilege is irreversible, so the name of the removed privilege is not included in the PreviousState parameter after a call to AdjustTokenPrivileges. Windows XP with SP1:  The function cannot remove privileges. This value is not supported.   None   The function disables the privilege.     If DisableAllPrivileges is TRUE, the function ignores this parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "BufferLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be zero if the PreviousState parameter is NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTOKEN_PRIVILEGES",
        "name": "PreviousState",
        "description": "A pointer to a buffer that the function fills with a TOKEN_PRIVILEGES structure that contains the previous state of any privileges that the function modifies.  That is, if a privilege has been modified by this function, the privilege and its previous state are contained in the TOKEN_PRIVILEGES structure referenced by PreviousState. If the PrivilegeCount member of TOKEN_PRIVILEGES is zero, then no privileges have been changed by this function. This parameter can be NULL.     If you specify a buffer that is too small to receive the complete list of modified privileges, the function fails and does not adjust any privileges. In this case, the function sets the variable pointed to by the ReturnLength parameter to the number of bytes required to hold the complete list of modified privileges."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PDWORD",
        "name": "ReturnLength",
        "description": "A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be NULL if PreviousState is NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The AllocateAndInitializeSid function allocates and initializes a security identifier (SID) with up to eight subauthorities.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "A SID allocated with the AllocateAndInitializeSid function must be freed by using the FreeSid function. This function creates a SID with a 32-bit RID value. For applications that require longer RID values, use  CreateWellKnownSid. For an example that uses this function, see Creating a Security Descriptor for a New Object or Taking Object Ownership. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AllocateAndInitializeSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID_IDENTIFIER_AUTHORITY",
        "name": "pIdentifierAuthority",
        "description": "A pointer to a  SID_IDENTIFIER_AUTHORITY structure. This structure provides the top-level identifier authority value to set in the SID."
      },
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "nSubAuthorityCount",
        "description": "Specifies the number of subauthorities to place in the SID. This parameter also identifies how many of the subauthority parameters have meaningful values. This parameter must contain a value from 1 to 8.     For example, a value of 3 indicates that the subauthority values specified by the dwSubAuthority0, dwSubAuthority1, and dwSubAuthority2 parameters have meaningful values and to ignore the remainder."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority0",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority1",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority2",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority3",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority4",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority5",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority6",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSubAuthority7",
        "description": "Subauthority value to place in the SID."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "pSid",
        "description": "A pointer to a variable that receives the pointer to the allocated and initialized  SID structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AllocateLocallyUniqueId function allocates a locally unique identifier (LUID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The allocated LUID is unique to the local system only, and uniqueness is guaranteed only until the system is next restarted. The allocated LUID is guaranteed  to be nonzero if this function succeeds. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AllocateLocallyUniqueId",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PLUID",
        "name": "Luid",
        "description": "A pointer to a LUID structure that receives the allocated LUID."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AreAllAccessesGranted function checks whether a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If all requested access rights have been granted, the return value is nonzero. If not all requested access rights have been granted, the return value is zero. ",
    "remarks": "The AreAllAccessesGranted function is commonly used by a server application to check the access rights of a client attempting to gain access to an object. When the bits set in the DesiredAccess parameter match the bits set in the GrantedAccess parameter, all requested rights have been granted. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AreAllAccessesGranted",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "GrantedAccess",
        "description": "An access mask that specifies the access rights that have been granted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "An access mask that specifies the access rights that have been requested. This mask must have been mapped from generic to specific and standard access rights, usually by calling the  MapGenericMask function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AreAnyAccessesGranted function tests whether any of a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If any of the requested access rights have been granted, the return value is nonzero. If none of the requested access rights have been granted, the return value is zero. ",
    "remarks": "The AreAnyAccessesGranted function is often used by a server application to check the access rights of a client attempting to gain access to an object. When any of the bits set in the DesiredAccess parameter match the bits set in the GrantedAccess parameter, at least one of the requested access rights has been granted. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AreAnyAccessesGranted",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "GrantedAccess",
        "description": "Specifies the granted access mask."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Specifies the access mask to be requested. This mask must have been mapped from generic to specific and standard access rights, usually by calling the  MapGenericMask function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuditComputeEffectivePolicyBySid function computes the effective audit policy for one or more subcategories for the specified security principal. The function computes effective audit policy by combining system audit policy with per-user policy.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_QUERY_SYSTEM_POLICY and AUDIT_QUERY_USER_POLICY access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditComputeEffectivePolicyBySid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PSID",
        "name": "pSid",
        "description": "A pointer to the SID structure associated with the principal for which to compute effective audit policy. Per-user policy for group SIDs is not currently supported."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pSubCategoryGuids",
        "description": "A pointer to an array of GUID values that specify the subcategories for which to compute effective audit policy. For a list of defined subcategories, see Auditing Constants."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in each of the pSubCategoryGuids and ppAuditPolicy arrays."
      },
      {
        "in_out": "_Out_",
        "type": "PAUDIT_POLICY_INFORMATION*",
        "name": "ppAuditPolicy",
        "description": "A pointer to a single buffer that contains both an array of pointers to AUDIT_POLICY_INFORMATION structures and the structures themselves. The AUDIT_POLICY_INFORMATION structures specify the effective audit policy for the subcategories specified by the pSubCategoryGuids array.  When you have finished using this buffer, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuditComputeEffectivePolicyByToken function computes the effective audit policy for one or more subcategories for the security principal associated with the specified token. The function computes effective audit policy by combining system audit policy with per-user policy.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have both AUDIT_QUERY_SYSTEM_POLICY and AUDIT_QUERY_USER_POLICY access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditComputeEffectivePolicyByToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hTokenHandle",
        "description": "A handle to the access token associated with the principal for which to compute effective audit policy. The token must have been opened with TOKEN_QUERY access. Per-user policy for group SIDs is not currently supported."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pSubCategoryGuids",
        "description": "A pointer to an array of GUID values that specify the subcategories for which to compute effective audit policy. For a list of defined subcategories, see Auditing Constants."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in each of the pSubCategoryGuids and ppAuditPolicy arrays."
      },
      {
        "in_out": "_Out_",
        "type": "PAUDIT_POLICY_INFORMATION*",
        "name": "ppAuditPolicy",
        "description": "A pointer to a single buffer that contains both an array of pointers to AUDIT_POLICY_INFORMATION structures and the structures themselves. The AUDIT_POLICY_INFORMATION structures specify the effective audit policy for the subcategories specified by the pSubCategoryGuids array.  When you have finished using this buffer, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditEnumerateCategories function enumerates the available audit-policy categories.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditEnumerateCategories",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "GUID**",
        "name": "ppAuditCategoriesArray",
        "description": "A pointer to a single buffer that contains both an array of pointers to GUID structures and the structures themselves. The GUID structures specify the audit-policy categories available on the computer.  When you have finished using this buffer, free it by calling the AuditFree function."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "pCountReturned",
        "description": "A pointer to the number of elements in the ppAuditCategoriesArray array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuditEnumeratePerUserPolicy function enumerates users for whom per-user auditing policy is specified.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_ENUMERATE_USERS access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditEnumeratePerUserPolicy",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PPOLICY_AUDIT_SID_ARRAY*",
        "name": "ppAuditSidArray",
        "description": "A pointer to a single buffer that contains both an array of pointers to POLICY_AUDIT_SID_ARRAY structures and the structures themselves. The POLICY_AUDIT_SID_ARRAY structures specify the users for whom per-user audit policy is specified.  When you have finished using this buffer, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuditEnumerateSubCategories function enumerates the available audit-policy subcategories.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditEnumerateSubCategories",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pAuditCategoryGuid",
        "description": "The GUID of an audit-policy category for which subcategories are enumerated. If the value of the bRetrieveAllSubCategories parameter is TRUE, this parameter is ignored."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "bRetrieveAllSubCategories",
        "description": "TRUE to enumerate all audit-policy subcategories; FALSE to enumerate only the subcategories of the audit-policy category specified by the pAuditCategoryGuid parameter."
      },
      {
        "in_out": "_Out_",
        "type": "GUID**",
        "name": "ppAuditSubCategoriesArray",
        "description": "A pointer to a single buffer that contains both an array of pointers to GUID structures and the structures themselves. The GUID structures specify the audit-policy subcategories available on the computer.  When you have finished using this buffer, free it by calling the AuditFree function."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "pCountReturned",
        "description": "A pointer to the number of audit-policy subcategories returned in the ppAuditSubCategoriesArray array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuditFree function frees the memory allocated by audit functions for the specified buffer.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "AuditFree",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "Buffer",
        "description": "A pointer to the buffer to free."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditLookupCategoryGuidFromCategoryId function retrieves a GUID structure that represents the specified audit-policy category.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditLookupCategoryGuidFromCategoryId",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "POLICY_AUDIT_EVENT_TYPE",
        "name": "AuditCategoryId",
        "description": "An element of the POLICY_AUDIT_EVENT_TYPE enumeration that specifies an audit-policy category."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pAuditCategoryGuid",
        "description": "A pointer to a GUID structure that represents the audit-policy category specified by the  AuditCategoryId"
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditLookupCategoryIdFromCategoryGuid function retrieves an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the specified audit-policy category.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditLookupCategoryIdFromCategoryGuid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pAuditCategoryGuid",
        "description": "A pointer to a GUID structure that specifies an audit-policy category."
      },
      {
        "in_out": "_Out_",
        "type": "PPOLICY_AUDIT_EVENT_TYPE",
        "name": "pAuditCategoryId",
        "description": "A pointer to an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the audit-policy category specified by the pAuditCategoryGuid parameter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditLookupCategoryName function retrieves the display name of the specified audit-policy category.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditLookupCategoryName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pAuditCategoryGuid",
        "description": "A pointer to a GUID structure that specifies an audit-policy category."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR*",
        "name": "ppszCategoryName",
        "description": "The address of a pointer to a null-terminated string that contains the display name of the audit-policy category specified by the pAuditCategoryGuid function. When you have finished using this string, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditLookupSubCategoryName function retrieves the display name of the specified audit-policy subcategory.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditLookupSubCategoryName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pAuditSubCategoryGuid",
        "description": "A pointer to a GUID structure that specifies an audit-policy subcategory."
      },
      {
        "in_out": "_Out_",
        "type": "PTSTR*",
        "name": "ppszSubCategoryName",
        "description": "The address of a pointer to a null-terminated string that contains the display name of the audit-policy subcategory specified by the pAuditSubCategoryGuid parameter. When you have finished using this string, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditQueryGlobalSacl function retrieves  a global system access control list (SACL) that delegates access to the audit messages. Updating the global SACL requires the SeSecurityPrivilege which protects the global SACL from being updated by any user without administrator privileges.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditQueryGlobalSacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string specifying the type of object being accessed. This parameter must be either \"File\" or \"Key\", depending on whether the object is a file or registry. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_Out_",
        "type": "PACL*",
        "name": "Acl",
        "description": "A pointer to an ACL structure that contains the SACL information.  This should be freed later by calling the LocalFree function."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuditQueryPerUserPolicy function retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_QUERY_USER_POLICY access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditQueryPerUserPolicy",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PSID",
        "name": "pSid",
        "description": "A pointer to the SID structure associated with the principal for which to query  audit policy. Per-user policy for group SIDs is not currently supported."
      },
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pSubCategoryGuids",
        "description": "A pointer to an array of GUID values that specify the subcategories for which to query audit policy. For a list of defined audit-policy subcategories, see Auditing Constants."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in each of the pSubCategoryGuids and ppAuditPolicy arrays."
      },
      {
        "in_out": "_Out_",
        "type": "PAUDIT_POLICY_INFORMATION*",
        "name": "ppAuditPolicy",
        "description": "A pointer to a single buffer that contains both an array of pointers to AUDIT_POLICY_INFORMATION structures and the structures themselves. The AUDIT_POLICY_INFORMATION structures specify the per-user audit policy for the subcategories specified by the pSubCategoryGuids array.  When you have finished using this buffer, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditQuerySecurity function retrieves security descriptor that delegates access to audit policy.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditQuerySecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A SECURITY_INFORMATION value that specifies which parts of the security descriptor this function sets. Only SACL_SECURITY_INFORMATION and DACL_SECURITY_INFORMATION are supported. Any other values are ignored. If neither SACL_SECURITY_INFORMATION nor DACL_SECURITY_INFORMATION is specified, this function fails and returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ppSecurityDescriptor",
        "description": "The address of a pointer to a well-formed SECURITY_DESCRIPTOR structure that controls access to the Audit security object."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuditQuerySystemPolicy function retrieves system audit policy for one or more audit-policy subcategories.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_QUERY_SYSTEM_POLICY access on the audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditQuerySystemPolicy",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const GUID*",
        "name": "pSubCategoryGuids",
        "description": "A pointer to an array of GUID values that specify the subcategories for which to query audit policy. For a list of defined audit-policy subcategories, see Auditing Constants."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in each of the pSubCategoryGuids and ppAuditPolicy arrays."
      },
      {
        "in_out": "_Out_",
        "type": "PAUDIT_POLICY_INFORMATION*",
        "name": "ppAuditPolicy",
        "description": "A pointer to a single buffer that contains both an array of pointers to AUDIT_POLICY_INFORMATION structures and the structures themselves. The AUDIT_POLICY_INFORMATION structures specify the system audit policy for the subcategories specified by the pSubCategoryGuids array.  When you have finished using this buffer, free it by calling the AuditFree function."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditSetGlobalSacl function sets a global system access control list (SACL) that delegates access to the audit messages. Updating the global SACL requires the SeSecurityPrivilege which protects the global SACL from being updated by any user without administrator privileges.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditSetGlobalSacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string specifying the type of object being created or accessed. For setting the global SACL on files, this should be set to \"File\" and  for setting the global SACL on registry, this should be set to \"Key\". This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "Acl",
        "description": "A pointer to an ACL structure."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuditSetPerUserPolicy function sets per-user audit policy in one or more audit subcategories for the specified principal.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_SET_USER_POLICY access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditSetPerUserPolicy",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const PSID",
        "name": "pSid",
        "description": "A pointer to the SID structure associated with the principal for which to set  audit policy. Per-user policy for group SIDs is not currently supported."
      },
      {
        "in_out": "_In_",
        "type": "PCAUDIT_POLICY_INFORMATION",
        "name": "pAuditPolicy",
        "description": "A pointer to an array of AUDIT_POLICY_INFORMATION structures. Each structure specifies per-user audit policy for one audit subcategory. The AuditCategoryGuid member of these structures is ignored."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in the pAuditPolicy array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditSetSecurity function sets a security descriptor that delegates access to audit policy.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditSetSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A SECURITY_INFORMATION value that specifies which parts of the security descriptor this function sets. Only SACL_SECURITY_INFORMATION and DACL_SECURITY_INFORMATION are supported. Any other values are ignored. If neither SACL_SECURITY_INFORMATION nor DACL_SECURITY_INFORMATION is specified, this function fails and returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a well-formed SECURITY_DESCRIPTOR structure that controls access to the Audit security object. If this parameter is NULL, the function fails and returns ERROR_INVALID_PARAMETER."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuditSetSystemPolicy function sets system audit policy for one or more audit-policy subcategories.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Ntsecapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes defined in WinError.h.  ",
    "remarks": "To successfully call this function, the caller must have SeSecurityPrivilege or have AUDIT_SET_SYSTEM_POLICY access on the Audit security object. ",
    "return_type": "BOOLEAN",
    "category": "Authorization",
    "name": "AuditSetSystemPolicy",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PCAUDIT_POLICY_INFORMATION",
        "name": "pAuditPolicy",
        "description": "A pointer to an array of AUDIT_POLICY_INFORMATION structures. Each structure specifies system audit policy for one audit-policy subcategory. The AuditCategoryGuid member of these structures is ignored."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "PolicyCount",
        "description": "The number of elements in the pAuditPolicy array."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The AuthzAccessCheck function determines which access bits can be granted to a client for a given set of security descriptors. The AUTHZ_ACCESS_REPLY structure returns an array of granted access masks and error status. Optionally, access masks that will always be granted can be cached, and a handle to cached values is returned.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "The AuthzAccessCheckCallback callback function will be called if the DACL of the SECURITY_DESCRIPTOR structure pointed to by the pSecurityDescriptor parameter contains a callback access control entry (ACE). Security attribute variables must be present in the client context if referred to in a conditional expression, otherwise the conditional expression term referencing them will evaluate to unknown. For more information, see the Security Descriptor Definition Language for Conditional ACEs topic. For more information, see the How AccessCheck Works and Centralized Authorization Policy overviews. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzAccessCheck",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "flags",
        "description": "A DWORD value that specifies how the security descriptor is copied. This parameter can be one of the following values.  Starting with Windows 8 and Windows Server 2012,  when you call this function on a remote context handle, the upper 16 bits must be zero.   ValueMeaning   0   If phAccessCheckResults is not NULL, a  deep copy of the security descriptor is copied to the handle referenced by phAccessCheckResults.   AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD 1   A deep copy of the security descriptor is not performed. The calling application must pass the address of an AUTHZ_ACCESS_CHECK_RESULTS_HANDLE handle in phAccessCheckResults. The AuthzAccessCheck function sets this handle to a security descriptor that must remain valid during subsequent calls to AuthzCachedAccessCheck."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to a structure that represents the client. \t\t\t\t\t Starting with Windows 8 and Windows Server 2012,  the client context can be local or remote."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_ACCESS_REQUEST",
        "name": "pRequest",
        "description": "A pointer to an AUTHZ_ACCESS_REQUEST structure that specifies the desired access mask, principal self security identifier (SID), and the object type list structure, if it exists."
      },
      {
        "in_out": "_In_opt_",
        "type": "AUTHZ_AUDIT_EVENT_HANDLE",
        "name": "AuditEvent",
        "description": "A structure that contains object-specific audit information. When the value of this parameter is not null, an audit is automatically requested. Static audit information is read from the resource manager structure.  Starting with Windows 8 and Windows Server 2012,  when you use this function with a remote context handle, the value of the parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure to be used for access checks. The owner SID for the object is picked from this security descriptor. A NULL discretionary access control list (DACL) in this security descriptor represents a NULL DACL for the entire object. Make sure the security descriptor contains OWNER and DACL information, or an error code 87 or \"invalid parameter\" message will be generated. Important  NULL DACLs permit all types of access to all users; therefore, do not use NULL DACLs. For information about creating a DACL, see Creating a DACL.    A NULL system access control list (SACL) in this security descriptor is treated the same way as an empty SACL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "OptionalSecurityDescriptorArray",
        "description": "An array of SECURITY_DESCRIPTOR structures. NULL access control lists (ACLs) in these security descriptors are treated as empty ACLs. The ACL for the entire object is the logical concatenation of all of the ACLs."
      },
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "OptionalSecurityDescriptorCount",
        "description": "The number of security descriptors not including the primary security descriptor."
      },
      {
        "in_out": "_Inout_",
        "type": "PAUTHZ_ACCESS_REPLY",
        "name": "pReply",
        "description": "A pointer to an  AUTHZ_ACCESS_REPLY structure that contains the results of the access check. Before calling the AuthzAccessCheck function, an application must allocate memory for the GrantedAccessMask and SaclEvaluationResults members of the AUTHZ_ACCESS_REPLY structure referenced by pReply."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PAUTHZ_ACCESS_CHECK_RESULTS_HANDLE",
        "name": "phAccessCheckResults",
        "description": "A pointer to return a handle to the cached results of the access check. When this parameter value is not null, the results of this access check call will be cached. This results in a MAXIMUM_ALLOWED check.  Starting with Windows 8 and Windows Server 2012,  when you use this function with a remote context handle, the value of the parameter must be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuthzAccessCheckCallback function is an application-defined function that handles callback access control entries (ACEs) during an access check. AuthzAccessCheckCallback is a placeholder for the application-defined function name. The application registers this callback by calling  AuthzInitializeResourceManager.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns  TRUE. If the function is unable to perform the evaluation, it returns FALSE. Use SetLastError to return an error to the access check function. ",
    "remarks": "Security attribute variables must be present in the client context if referred to in a conditional expression, otherwise the conditional expression term referencing them will evaluate to unknown. For more information, see the How AccessCheck Works and Centralized Authorization Policy overviews. ",
    "return_type": "BOOL CALLBACK",
    "category": "Authorization",
    "name": "AuthzAccessCheckCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to a client context."
      },
      {
        "in_out": "_In_",
        "type": "PACE_HEADER",
        "name": "pAce",
        "description": "A pointer to the ACE to evaluate for inclusion in the call to the AuthzAccessCheck function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pArgs",
        "description": "Data passed in the DynamicGroupArgs parameter of the call to  AuthzAccessCheck or  AuthzCachedAccessCheck."
      },
      {
        "in_out": "_Inout_",
        "type": "PBOOL",
        "name": "pbAceApplicable",
        "description": "A pointer to a Boolean variable that receives the results of the evaluation of the logic defined by the application.  The results are TRUE if the logic determines that the ACE is applicable and will be included in the call to AuthzAccessCheck; otherwise, the results are FALSE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AuthzInitializeResourceManager function uses Authz to verify that clients have access to various resources.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns a nonzero value. If the function fails, it returns a zero value. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeResourceManager",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "flags",
        "description": "A DWORD value that defines how the resource manager is initialized. This parameter can contain the following values.  ValueMeaning   0   Default call to the function. The resource manager is initialized as the principal identified in the process token, and auditing is in effect. Note that unless the AUTHZ_RM_FLAG_NO_AUDIT flag is set, SeAuditPrivilege must be enabled for the function to succeed.   AUTHZ_RM_FLAG_NO_AUDIT    Auditing is not in effect. If this flag is set, the caller does not need to have SeAuditPrivilege enabled to call this function.   AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION    The resource manager is initialized as the identity of the thread token.   AUTHZ_RM_FLAG_NO_CENTRALIZED_ACCESS_POLICIES    The resource manager ignores CAP IDs and does not evaluate centralized access policies.     AUTHZ_RM_FLAG_NO_AUDIT and AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION can be bitwise-combined."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_AUTHZ_DYNAMIC_ACCESS_CHECK",
        "name": "pfnAccessCheck",
        "description": "A pointer to the AuthzAccessCheckCallback callback function that the resource manager calls each time it encounters a callback \t\t\t\t\t\taccess control entry (ACE) during access control list (ACL) evaluation in  AuthzAccessCheck or  AuthzCachedAccessCheck.  This parameter can be NULL if no access check callback function is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS",
        "name": "pfnComputeDynamicGroups",
        "description": "A pointer to the AuthzComputeGroupsCallback callback function called by the resource manager during initialization of an AuthzClientContext handle. This parameter can be NULL if no callback function is used to compute dynamic groups."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_AUTHZ_FREE_DYNAMIC_GROUPS",
        "name": "pfnFreeDynamicGroups",
        "description": "A pointer to the AuthzFreeGroupsCallback callback function called by the resource manager to free security identifier (SID) attribute arrays allocated by the compute dynamic groups callback. This parameter can be NULL if no callback function is used to compute dynamic groups."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szResourceManagerName",
        "description": "A string that identifies the resource manager. This parameter can be NULL if the resource manager does not need a name."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "phAuthzResourceManager",
        "description": "A pointer to the returned resource manager handle. When you have finished using the handle, free it by calling the AuthzFreeResourceManager function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AuthzAddSidsToContext function creates a copy of an existing context and appends a given set of security identifiers (SIDs) and restricted SIDs.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzAddSidsToContext",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "OrigClientContext",
        "description": "An AUTHZ_CLIENT_CONTEXT_HANDLE structure to be copied as the basis for NewClientContext."
      },
      {
        "in_out": "_In_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "Sids",
        "description": "A pointer to a  SID_AND_ATTRIBUTES structure containing the SIDs and attributes to be added to the unrestricted part of the client context."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "SidCount",
        "description": "The number of SIDs to be added."
      },
      {
        "in_out": "_In_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "RestrictedSids",
        "description": "A pointer to a SID_AND_ATTRIBUTES structure containing the SIDs and attributes to be added to the restricted part of the client context."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "RestrictedSidCount",
        "description": "Number of restricted SIDs to be added."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "pNewClientContext",
        "description": "A pointer to the created AUTHZ_CLIENT_CONTEXT_HANDLE structure containing input values for expiration time, identifier, flags, additional SIDs and restricted SIDs."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AuthzCachedAccessCheck function performs a fast access check based on a cached handle containing the static granted bits from a previous  AuthzAccessCheck call.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. Expected values of the Error members of array elements returned are shown in the following table.  ",
    "remarks": "The client context pointer is stored in the AuthzHandle parameter. The structure of the client context must be exactly the same as it was at the time AuthzHandle was created. This restriction is for the following fields: Pointers to the primary security descriptor and the optional security descriptor array are stored in AuthzHandle at the time of handle creation. These pointers must still be valid. The AuthzCachedAccessCheck function maintains a cache as a result of evaluating Central Access Policies (CAP) on objects unless CAPs are ignored, for example when the AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES flag is used. The client may call the AuthzFreeCentralAccessPolicyCache function to free up this cache. Note that this requires a subsequent call to AuthzCachedAccessCheck to rebuild the cache if necessary. For more information, see the How AccessCheck Works and Centralized Authorization Policy overviews. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzCachedAccessCheck",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_ACCESS_CHECK_RESULTS_HANDLE",
        "name": "AuthzHandle",
        "description": "A handle to the cached access check results."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_ACCESS_REQUEST",
        "name": "pRequest",
        "description": "Access request handle specifying the desired access mask, principal self SID, and the object type list structure (if any)."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_AUDIT_EVENT_HANDLE",
        "name": "AuditInfo",
        "description": "A structure that contains object-specific audit information. When the value of this parameter is not null, an audit is automatically requested. Static audit information is read from the resource manager structure."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_ACCESS_REPLY",
        "name": "pReply",
        "description": "A pointer to an  AUTHZ_ACCESS_REPLY handle that returns the results of access check as an array of GrantedAccessMask/ErrorValue pairs. The number of pairs returned is supplied by the caller in the ResultListLength member of the AUTHZ_ACCESS_REPLY structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AuthzComputeGroupsCallback function is an application-defined function that creates a list of security identifiers (SIDs) that apply to a client. AuthzComputeGroupsCallback is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function successfully returns a list of SIDs, the return value is TRUE. If the function fails, the return value is FALSE. ",
    "remarks": "Applications can also add SIDs to the client context by calling  AuthzAddSidsToContext. Attribute variables must be in the form of an expression when used with logical operators; otherwise, they are evaluated as unknown. ",
    "return_type": "BOOL CALLBACK",
    "category": "Authorization",
    "name": "AuthzComputeGroupsCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to a client context."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "Args",
        "description": "Data passed in the DynamicGroupArgs parameter of a call to  the AuthzInitializeContextFromAuthzContext, AuthzInitializeContextFromSid,  or AuthzInitializeContextFromToken function."
      },
      {
        "in_out": "_Out_",
        "type": "PSID_AND_ATTRIBUTES*",
        "name": "pSidAttrArray",
        "description": "A pointer to a pointer variable that receives the address of an array of SID_AND_ATTRIBUTES structures. These structures represent the groups to which the client belongs."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pSidCount",
        "description": "The number of structures in pSidAttrArray."
      },
      {
        "in_out": "_Out_",
        "type": "PSID_AND_ATTRIBUTES*",
        "name": "pRestrictedSidAttrArray",
        "description": "A pointer to a pointer variable that receives the address of an array of SID_AND_ATTRIBUTES structures. These structures represent the groups from which the client is restricted."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pRestrictedSidCount",
        "description": "The number of structures in pSidRestrictedAttrArray."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuthzEnumerateSecurityEventSources function retrieves the registered security event sources that are not installed by default.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzEnumerateSecurityEventSources",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use; set this parameter to zero."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_SOURCE_SCHEMA_REGISTRATION",
        "name": "Buffer",
        "description": "A pointer to an array of AUTHZ_SOURCE_SCHEMA_REGISTRATION structures that returns the registered security event sources."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pdwCount",
        "description": "A pointer to a  variable that receives the number of event sources found."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "pdwLength",
        "description": "A pointer to a variable that specifies the length of the Buffer parameter in bytes. On output, this parameter receives the number of bytes used or required."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeAuditEvent function frees the  structure allocated by the  AuthzInitializeObjectAccessAuditEvent function.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzFreeAuditEvent",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_AUDIT_EVENT_HANDLE",
        "name": "pAuditEventInfo",
        "description": "A pointer to the AUTHZ_AUDIT_EVENT_HANDLE structure to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The AuthzInitializeObjectAccessAuditEvent function initializes auditing for an object.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeObjectAccessAuditEvent",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Modifies the audit. This parameter can be one of the following values.  ValueMeaning  AUTHZ_NO_SUCCESS_AUDIT   Disable generation of success audits.   AUTHZ_NO_FAILURE_AUDIT   Disable generation of failure audits.   AUTHZ_NO_ALLOC_STRINGS   Use pointers to the passed strings instead of allocating memory and copying the strings. The calling application must ensure that the passed memory stays valid during access checks."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_AUDIT_EVENT_TYPE_HANDLE",
        "name": "hAuditEventType",
        "description": "Reserved. This parameter should be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szOperationType",
        "description": "String that indicates the operation that is to be audited."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szObjectType",
        "description": "String that indicates the type of object being accessed."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szObjectName",
        "description": "String the indicates the name of the object being accessed."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szAdditionalInfo",
        "description": "String, defined by the Resource Manager, for additional audit information."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_AUDIT_EVENT_HANDLE",
        "name": "phAuditEvent",
        "description": "Pointer that receives an AUTHZ_AUDIT_EVENT_HANDLE structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAdditionalParamCount",
        "description": "Must be set to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The AuthzFreeCentralAccessPolicyCache function frees the cache maintained as a result of AuthzCachedAccessCheck evaluating the Central Access Policies (CAP) that applies for the resource.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "For more information, see the How AccessCheck Works and Centralized Authorization Policy overviews. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzFreeCentralAccessPolicyCache",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeCentralAccessPolicyCallback function is an application-defined function that frees memory allocated by  the AuthzGetCentralAccessPolicyCallback function. AuthzFreeCentralAccessPolicyCallback is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "",
    "header": "",
    "return_value": "If the function succeeds, the function returns  TRUE. If the function is unable to perform the evaluation, it returns FALSE. Use SetLastError to return an error to the access check function.   ",
    "remarks": "",
    "return_type": "BOOL CALLBACK",
    "category": "Authorization",
    "name": "AuthzFreeCentralAccessPolicyCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pCentralAccessPolicy",
        "description": "Pointer to the central access policy to be freed."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "The AuthzGetCentralAccessPolicyCallback function is an application-defined function that retrieves the central access policy. AuthzGetCentralAccessPolicyCallback is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the function returns  TRUE. If the function is unable to perform the evaluation, it returns FALSE. Use SetLastError to return an error to the access check function. ",
    "remarks": "",
    "return_type": "BOOL CALLBACK AuthzGetCentralAccessPolicyCallback",
    "category": "Authorization",
    "name": "AuthzGetCentralAccessPolicyCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "Handle to the client context."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "capid",
        "description": "ID of the central access policy to retrieve."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pArgs",
        "description": "Optional arguments that were passed to the AuthzAccessCheck function through the OptionalArguments member of the AUTHZ_ACCESS_REQUEST structure."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOL",
        "name": "pCentralAccessPolicyApplicable",
        "description": "Pointer to a Boolean value that the resource manager uses to indicate whether a central access policy should be used during access evaluation."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "ppCentralAccessPolicy",
        "description": "Pointer to the central access policy (CAP) to be used for evaluating  access. If this value is NULL, the default CAP is applied."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeContext function frees all structures and memory associated with the client context. The list of handles for a client is freed in this call.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzFreeContext",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "AuthzClientContext",
        "description": "The AUTHZ_CLIENT_CONTEXT_HANDLE structure to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeGroupsCallback function is an application-defined function that frees memory allocated by  the AuthzComputeGroupsCallback function. AuthzFreeGroupsCallback is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "This callback function does not return a value. ",
    "remarks": "Attribute variables must be in the form of an expression when used with logical operators; otherwise, they are evaluated as unknown. ",
    "return_type": "void CALLBACK",
    "category": "Authorization",
    "name": "AuthzFreeGroupsCallback",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "pSidAttrArray",
        "description": "A pointer to memory allocated by AuthzComputeGroupsCallback."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeHandle function finds and deletes a handle from the handle list.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzFreeHandle",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_ACCESS_CHECK_RESULTS_HANDLE",
        "name": "AuthzHandle",
        "description": "A handle to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzFreeResourceManager function frees a resource manager object.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzFreeResourceManager",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "AuthzResourceManager",
        "description": "The AUTHZ_RESOURCE_MANAGER_HANDLE to be freed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The AuthzGetInformationFromContext function returns information about an Authz context.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzGetInformationFromContext",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to the context."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CONTEXT_INFORMATION_CLASS",
        "name": "InfoClass",
        "description": "A value of the AUTHZ_CONTEXT_INFORMATION_CLASS enumeration that indicates the type of information to be returned."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "BufferSize",
        "description": "Size of the buffer passed."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "pSizeRequired",
        "description": "A pointer to a DWORD of  the buffer size required for returning the structure."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "Buffer",
        "description": "A pointer to memory that can receive the information. The structure returned depends on the information requested in the InfoClass parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuthzInitializeCompoundContext function creates a user-mode context from the given user and device security contexts.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeCompoundContext",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "UserContext",
        "description": "User context to create the compound context from."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "DeviceContext",
        "description": "Device context to create the compound context from. This must not be the same as the user context."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "phCompoundContext",
        "description": "Used to return the resultant compound context."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The AuthzInitializeContextFromAuthzContext function creates a new client context based on an existing client context.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "This function calls the  AuthzComputeGroupsCallback callback function to add security identifiers to the newly created context. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeContextFromAuthzContext",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "flags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "The handle to an existing client context."
      },
      {
        "in_out": "_In_opt_",
        "type": "PLARGE_INTEGER",
        "name": "pExpirationTime",
        "description": "Sets the time limit for how long the returned context structure is valid. If no value is passed, then the token never expires. Expiration time is not currently enforced."
      },
      {
        "in_out": "_In_",
        "type": "LUID",
        "name": "Identifier",
        "description": "The specific identifier for the resource manager."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "DynamicGroupArgs",
        "description": "A pointer to parameters to be passed to the callback function that computes dynamic groups. If the value is NULL, then the callback function is not called."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "phNewAuthzClientContext",
        "description": "A pointer to the duplicated AUTHZ_CLIENT_CONTEXT_HANDLE handle. When you have finished using the handle, release it by calling the AuthzFreeContext function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AuthzInitializeContextFromSid function creates a user-mode client context from a user security identifier (SID). Domain SIDs retrieve token group attributes from the Active Directory.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "If possible, call the AuthzInitializeContextFromToken  function instead of AuthzInitializeContextFromSid. AuthzInitializeContextFromSid attempts to retrieve the information available in a logon token had the client actually logged on. An actual logon token provides more information, such as logon type and logon properties, and reflects the behavior of the authentication package used for the logon. The client context  created by AuthzInitializeContextFromToken uses a logon token, and the resulting client context is more complete and accurate than a client context created by AuthzInitializeContextFromSid. This function resolves valid user SIDs only. Windows XP:  This function resolves group memberships for valid user and group SIDs (unless the AUTHZ_SKIP_TOKEN_GROUPS flag is used). Support for resolving memberships of group SIDs may be altered or unavailable in subsequent versions. This function calls the  AuthzComputeGroupsCallback callback function to add SIDs to the newly created context. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeContextFromSid",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "The following flags are defined.  Starting with Windows 8 and Windows Server 2012,  when you call this function on a remote context handle, the upper 16 bits must be zero.  ValueMeaning   0 (0x0)   Default value. AuthzInitializeContextFromSid attempts to retrieve the user's token group information by performing an S4U logon. If S4U logon is not supported by the user's domain or the calling computer, AuthzInitializeContextFromSid queries the user's account object for group information. When an account is queried directly, some groups that represent logon characteristics, such as Network, Interactive, Anonymous, Network Service, or Local Service, are omitted. Applications can explicitly add such group SIDs by implementing the AuthzComputeGroupsCallback function or calling the AuthzAddSidsToContext function.   AUTHZ_SKIP_TOKEN_GROUPS 2 (0x2)   Causes AuthzInitializeContextFromSid to skip all group evaluations. When this flag is used, the context returned contains only the SID specified by the UserSid parameter. The specified SID can be an arbitrary or application-specific SID. Other SIDs can be added to this context by implementing the AuthzComputeGroupsCallback function or by calling the AuthzAddSidsToContext function.   AUTHZ_REQUIRE_S4U_LOGON 4 (0x4)   Causes AuthzInitializeContextFromSid to fail if Windows Services For User is not available to retrieve token group information. Windows XP:  This flag is not supported.   AUTHZ_COMPUTE_PRIVILEGES 8 (0x8)   Causes AuthzInitializeContextFromSid to retrieve privileges for the new context. If this function performs an S4U logon, it retrieves privileges from the token. Otherwise, the function retrieves privileges from all SIDs in the context."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "UserSid",
        "description": "The SID of the user for whom a client context will be created. This must be a valid user or computer account unless the AUTHZ_SKIP_TOKEN_GROUPS flag is used."
      },
      {
        "in_out": "_In_opt_",
        "type": "AUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "hAuthzResourceManager",
        "description": "A handle to the resource manager creating this client context. This handle is stored in the client context structure.  Starting with Windows 8 and Windows Server 2012, the resource manager can be local or remote and is obtained by calling the AuthzInitializeRemoteResourceManager function."
      },
      {
        "in_out": "_In_",
        "type": "PLARGE_INTEGER",
        "name": "pExpirationTime",
        "description": "Expiration date and time of the token. If no value is passed, the token never expires. Expiration time is not currently enforced."
      },
      {
        "in_out": "_In_",
        "type": "LUID",
        "name": "Identifier",
        "description": "Specific identifier of the resource manager. This parameter is not currently used."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "DynamicGroupArgs",
        "description": "A pointer to parameters to be passed to the callback function that computes dynamic groups. This parameter can be NULL if no dynamic parameters are passed to the callback function.  Starting with Windows 8 and Windows Server 2012, this parameter must be  NULL if the resource manager is remote. Otherwise, ERROR_NOT_SUPPORTED will be set."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "pAuthzClientContext",
        "description": "A pointer to the handle to the client context that the AuthzInitializeContextFromSid function creates.  When you have finished using the handle, free it by calling the AuthzFreeContext function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The AuthzInitializeContextFromToken function initializes a client authorization context from a kernel token. The kernel token must have been opened for TOKEN_QUERY.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "This function calls the  AuthzComputeGroupsCallback callback function to add security identifiers to the newly created context. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeContextFromToken",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to the client token used to initialize the pAuthzClientContext parameter. The token must have been opened with TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "hAuthzResourceManager",
        "description": "A handle to the resource manager that created this client context. This handle is stored in the client context structure."
      },
      {
        "in_out": "_In_opt_",
        "type": "PLARGE_INTEGER",
        "name": "pExpirationTime",
        "description": "Expiration date and time of the token. If no value is passed, the token never expires. Expiration time is not currently enforced."
      },
      {
        "in_out": "_In_",
        "type": "LUID",
        "name": "Identifier",
        "description": "Identifier that is specific to the resource manager. This parameter is not currently used."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "DynamicGroupArgs",
        "description": "A pointer to parameters to be passed to the callback function that computes dynamic groups."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "phAuthzClientContext",
        "description": "A pointer to the AuthzClientContext handle returned. Call  AuthzFreeContext when done with the client context."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The AuthzInitializeObjectAccessAuditEvent2 function allocates and initializes an AUTHZ_AUDIT_EVENT_HANDLE handle for use with the AuthzAccessCheck function.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeObjectAccessAuditEvent2",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Flags that modify the behavior of the audit. The following table shows the possible values.  ValueMeaning  AUTHZ_NO_ALLOC_STRINGS   Uses pointers to the passed strings instead of allocating memory and copying the strings. The calling application must ensure that the passed memory remains valid during access checks.   AUTHZ_NO_FAILURE_AUDIT   Disables generation of failure audits.   AUTHZ_NO_SUCCESS_AUDIT   Disables generation of success audits."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_AUDIT_EVENT_TYPE_HANDLE",
        "name": "hAuditEventType",
        "description": "Reserved. This parameter should be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szOperationType",
        "description": "A pointer to a string that indicates the operation that is to be audited."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szObjectType",
        "description": "A pointer to a string that indicates the type of object  accessed."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szObjectName",
        "description": "A pointer to a string that indicates the name of the object  accessed."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szAdditionalInfo",
        "description": "Pointer to a string defined by the Resource Manager that contains additional audit information."
      },
      {
        "in_out": "_In_",
        "type": "PWSTR",
        "name": "szAdditionalInfo2",
        "description": "Pointer to a string defined by the Resource Manager that contains additional audit information."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_AUDIT_EVENT_HANDLE",
        "name": "phAuditEvent",
        "description": "A pointer to the returned AUTHZ_AUDIT_EVENT_HANDLE handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAdditionalParameterCount",
        "description": "Must be set to zero."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 2,
    "description": "The AuthzInitializeRemoteResourceManager function allocates and initializes a remote resource manager. The caller can use the resulting handle to make AuthZ calls over RPC to a remote instance of the resource manager configured on a server.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeRemoteResourceManager",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PAUTHZ_RPC_INIT_INFO_CLIENT",
        "name": "pRpcInitInfo",
        "description": "Pointer to an AUTHZ_RPC_INIT_INFO_CLIENT structure containing the initial information needed to configure the connection."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "phAuthzResourceManager",
        "description": "A handle to the resource manager. When you have finished using the handle, free it by calling the AuthzFreeResourceManager function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuthzInitializeResourceManagerEx function initializes an Authz resource manager and returns a handle to it. Use this function rather than AuthzInitializeResourceManager when you want the resource manager to manage Central Access Policies (CAPs).",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns a value of TRUE. If the function fails, it returns a value of FALSE. To get extended error information, call GetLastError. ",
    "remarks": "If the AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES flag is specified, then AuthzAccessCheck and AuthzCachedAccessCheck ignore CAPID (Central Access Policie ID) access control entriesSYSTEM_SCOPED_POLICY_ID_ACE and will not evaluate CAPs. If the AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES flag is not specified and pfnGetCentralAccessPolicy is NULL, then AuthzAccessCheck and AuthzCachedAccessCheck will get CAPs from LSA. For more information, see LsaGetAppliedCAPIDs. If the AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES flag is not specified and a central access policy callback is provided by the resource manager, then AuthzAccessCheck and AuthzCachedAccessCheck will get CAPs from the resource manager by invoking the callback. The LSA and the central access policy callback can indicate that CAPs are not supported, in which case AuthzAccessCheck and AuthzCachedAccessCheck ignore CAPID ACEs and will not evaluate CAPs.  The LSA and the central access policy callback may fail to return a CAP that corresponds to a particular CAPID, in which case AuthzAccessCheck and AuthzCachedAccessCheck use the same default CAP as the kernel AccessCheck. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInitializeResourceManagerEx",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "DWORD",
        "name": "Flags",
        "description": "A DWORD value that defines how the resource manager is initialized. This parameter can be one or more of the following values.  ValueMeaning   0   Default call to the function. The resource manager is initialized as the principal identified in the process token, and auditing is in effect. Unless the AUTHZ_RM_FLAG_NO_AUDIT flag is set, SeAuditPrivilege must be enabled for the function to succeed.   AUTHZ_RM_FLAG_NO_AUDIT 1   Auditing is not in effect. If this flag is set, the caller does not need to have SeAuditPrivilege enabled to call this function. Use this flag if the resource manager will never generate an audit for best performance.   AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION 2   The resource manager is initialized as the identity of the thread token. If the current thread is impersonating, then use the impersonation token as the identity of the resource manager.   AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES 4   The central access policy IDs are ignored. Do not evaluate central access policies."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pAuthzInitInfo",
        "description": "A pointer to a AUTHZ_INIT_INFO structure that contains the authorization resource manager initialization information."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_RESOURCE_MANAGER_HANDLE",
        "name": "phAuthzResourceManager",
        "description": "A pointer to the returned resource manager handle. When you have finished using the handle, free it by using the AuthzFreeResourceManager function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuthzInstallSecurityEventSource function installs  the specified source as a security event source.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzInstallSecurityEventSource",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use and must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_SOURCE_SCHEMA_REGISTRATION",
        "name": "pRegistration",
        "description": "A pointer to an AUTHZ_SOURCE_SCHEMA_REGISTRATION structure that contains information about the security event source to be added. The members of the AUTHZ_SOURCE_SCHEMA_REGISTRATION structure are used as follows to install the security event source in the security log key:  The szEventSourceName member is added as a registry key under HKEY_LOCAL_MACHINE    SYSTEM       CurrentControlSet          Services             EventLog                Security  The szEventMessageFile member is added as the data in a REG_SZ value named EventMessageFile under the event source key. The szEventAccessStringsFile member is added as the data in a REG_SZ value named ParameterMessageFile under the event source key. If the registry path does not exist, it is created.   If the szEventSourceXmlSchemaFile member is not NULL, it is added as the data in a REG_SZ value named XmlSchemaFile under the event source key. This value is not used. The szExecutableImagePath member may be set to NULL."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The AuthzModifyClaims function adds, deletes, or modifies user and device claims in the Authz client context.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "The AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration must have only one element if      the value of that element is AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL.      Otherwise, the array has the same number of elements as the corresponding      PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION. If the AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration is AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE and the function fails, call GetLastError. If the error code is ERROR_ALREADY_EXISTS, the claim's values have duplicate entries. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzModifyClaims",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to the client context to be modified."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CONTEXT_INFORMATION_CLASS",
        "name": "ClaimClass",
        "description": "Type of information to be modified. The caller can specify AuthzContextInfoUserClaims or AuthzContextInfoDeviceClaims."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_SECURITY_ATTRIBUTE_OPERATION",
        "name": "pClaimOperations",
        "description": "A pointer to an array of AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration values that specify the type of claim modification to make."
      },
      {
        "in_out": "_In_opt_",
        "type": "PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION",
        "name": "pClaims",
        "description": "A pointer to an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that specifies the claims to modify."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuthzModifySecurityAttributes function modifies the security attribute information in the specified client context.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzModifySecurityAttributes",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to the client context to be modified."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_SECURITY_ATTRIBUTE_OPERATION",
        "name": "pOperations",
        "description": "A pointer to an array of AUTHZ_SECURITY_ATTRIBUTE_OPERATION enumeration values that specify the types of modifications to make. This array must have only one element if the value of that element is AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL. Otherwise, the array has the same number of elements as the pAttributes array."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_SECURITY_ATTRUBUTES_INFORMATION",
        "name": "pAttributes",
        "description": "A pointer to an AUTHZ_SECURITY_ATTRIBUTES_INFORMATION structure that specifies the attributes to modify."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The AuthzModifySids function adds, deletes, or modifies user and device groups in the Authz client context.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "The AUTHZ_SID_OPERATION enumeration must have only one element if the value of that element is AUTHZ_SID_OPERATION_REPLACE_ALL. Otherwise, the array has the same number of elements as the corresponding  PTOKEN_GROUPS. When you want to use AuthzModifySids to delete, the SIDs are matched but not the SID flags. If no matching SID is found, no modifications are done and the call fails. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzModifySids",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to the client context to be modified."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CONTEXT_INFORMATION_CLASS",
        "name": "SidClass",
        "description": "Type of information to be modified. The caller can specify AuthzContextInfoGroupsSids, AuthzContextInfoRestrictedSids, or AuthzContextInfoDeviceSids."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_SID_OPERATION",
        "name": "pSidOperations",
        "description": "A pointer to an array of AUTHZ_SID_OPERATION enumeration values that specify the group modifications to make."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTOKEN_GROUPS",
        "name": "pSids",
        "description": "A pointer to a TOKEN_GROUPS structure that specifies the groups to modify."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The AuthzOpenObjectAudit function reads the system access control list (SACL) of the specified security descriptor and generates any appropriate audits specified by that SACL.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns a nonzero value. If the function fails, it returns a zero value. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzOpenObjectAudit",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "A handle to the client context of the object to open."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_ACCESS_REQUEST",
        "name": "pRequest",
        "description": "A pointer to an  AUTHZ_ACCESS_REQUEST structure."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_AUDIT_EVENT_HANDLE",
        "name": "hAuditEvent",
        "description": "A handle to the audit event to use."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure for the object."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "SecurityDescriptorArray",
        "description": "A pointer to an array of SECURITY_DESCRIPTOR structures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "SecurityDescriptorCount",
        "description": "The number of elements in SecurityDescriptorArray."
      },
      {
        "in_out": "_In_",
        "type": "PAUTHZ_ACCESS_REPLY",
        "name": "pReply",
        "description": "A pointer to an  AUTHZ_ACCESS_REPLY structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuthzRegisterCapChangeNotification function registers a CAP update notification callback.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "This function is intended for applications that manually manage CAP usage to get notified of CAP changes in the system. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzRegisterCapChangeNotification",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE",
        "name": "phCapChangeSubscription",
        "description": "Pointer to the CAP change notification subscription handle. When you have finished using the handle, unsubscribe by passing this parameter to the AuthzUnregisterCapChangeNotification function."
      },
      {
        "in_out": "_In_",
        "type": "LPTHREAD_START_ROUTINE",
        "name": "pfnCapChangeCallback",
        "description": "The CAP change notification callback function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "pCallbackContext",
        "description": "The context of the user to be passed to the callback function."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The AuthzRegisterSecurityEventSource function registers a security event source with the Local Security Authority (LSA).",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "This function  validates the szEventSourceName parameter  and sets up the appropriate structures and RPC connections to log events with that source name.  The validation is handled by an underlying call to an LSA API. The LSA API  verifies the following: ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzRegisterSecurityEventSource",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use. Set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szEventSourceName",
        "description": "A pointer to the name of the security event source to register."
      },
      {
        "in_out": "_Out_",
        "type": "PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE",
        "name": "phEventProvider",
        "description": "A pointer to a handle to the registered security event source."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 6,
    "description": "The AuthzReportSecurityEvent function generates a security audit for a registered security event source.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. The following example shows the use of the AuthzReportSecurityEvent function to generate an audit in the security event log. This example assumes that an event source with the name \"AUDIT_SOURCE_NAME\" was registered by a previous call to the AuthzInstallSecurityEventSource function, and that the caller has the SeAuditPrivilege privilege to call the AuthzRegisterSecurityEventSource function. For information about privilege constants, see Authorization Constants. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzReportSecurityEvent",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that specify the type of audit generated. The following table shows the possible values.  ValueMeaning  APF_AuditFailure 0x00000000   Failure audits are generated.   APF_AuditSuccess 0x00000001   Success audits are generated."
      },
      {
        "in_out": "_Inout_",
        "type": "AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE",
        "name": "hEventProvider",
        "description": "A handle to the registered security event source to use for the audit."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAuditId",
        "description": "The identifier of the audit."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pUserSid",
        "description": "A pointer to the security identifier (SID) that will be listed as the source of the audit in the event log."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCount",
        "description": "The number of AuditParamFlag  type/value pairs that appear in the variable arguments section that follows this parameter."
      },
      {
        "in_out": "",
        "type": "_In_",
        "name": "...",
        "description": "A list of AuditParamFlag type/value pairs that provide additional information about the event."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 5,
    "description": "The AuthzReportSecurityEventFromParams function generates a security audit for a registered security event source by using the specified array of audit parameters.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzReportSecurityEventFromParams",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use."
      },
      {
        "in_out": "_In_",
        "type": "AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE",
        "name": "hEventProvider",
        "description": "A handle to the registered security event source to use for the audit."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAuditId",
        "description": "The identifier of the audit."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pUserSid",
        "description": "A pointer to the security identifier (SID) that will be listed as the source of the audit in the event log."
      },
      {
        "in_out": "_In_",
        "type": "PAUDIT_PARAMS",
        "name": "pParams",
        "description": "An array of audit parameters."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 4,
    "description": "The AuthzSetAppContainerInformation function sets the  app container and capability information in a current Authz context. If the passed in context already has an app container security identifier (SID) set or if the passed in context is not a valid app container SID, this function fails.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzSetAppContainerInformation",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CLIENT_CONTEXT_HANDLE",
        "name": "hAuthzClientContext",
        "description": "The handle to the client context to which the given app container SID and capability SIDs will be added."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pAppContainerSid",
        "description": "The app container SID."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "CapabilityCount",
        "description": "The number of capability SIDs to be added. This value can be zero if no capability is to be added."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "pCapabilitySids[CapabilityCount]",
        "description": "The capability SIDs to be added to the context. This value must be NULL when the CapabilityCount parameter is zero."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuthzUninstallSecurityEventSource function removes the specified source from the list of valid security event sources.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzUninstallSecurityEventSource",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved for future use; set this parameter to zero."
      },
      {
        "in_out": "_In_",
        "type": "PCWSTR",
        "name": "szEventSourceName",
        "description": "Name of the source to remove from the list of valid security event sources. This corresponds to  the szEventSourceName member of the AUTHZ_SOURCE_SCHEMA_REGISTRATION structure that defines the source. This function removes the source information from the registry. For more information about the registry keys and values affected, see the AuthzInstallSecurityEventSource function."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 1,
    "description": "The AuthzUnregisterCapChangeNotification function removes a previously registered CAP update notification callback.",
    "library": "Authz.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns FALSE. To get extended error information, call  GetLastError. ",
    "remarks": "This function blocks operations until all callbacks are complete. Do not call this function from inside a callback function because it will cause a deadlock. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzUnregisterCapChangeNotification",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE",
        "name": "hCapChangeSubscription",
        "description": "Handle of the CAP change notification subscription to unregister."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The AuthzUnregisterSecurityEventSource function unregisters a security event source with the Local Security Authority (LSA).",
    "library": "Authz.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Authz.h",
    "return_value": "If the function succeeds, the function returns TRUE. If the function fails, it returns FALSE. For extended error information, call GetLastError. ",
    "remarks": "This function deallocates any resources and closes any RPC connections associated with a previous call to the AuthzRegisterSecurityEventSource function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "AuthzUnregisterSecurityEventSource",
    "is_callback": 0,
    "dll": "Authz.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter is reserved for future use. Set this parameter to zero."
      },
      {
        "in_out": "_Inout_",
        "type": "PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE",
        "name": "phEventProvider",
        "description": "A pointer to a handle to the security event source to unregister."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 5,
    "description": "The BuildExplicitAccessWithName function initializes an  EXPLICIT_ACCESS structure with data specified by the caller. The trustee is identified by a name string.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "BuildExplicitAccessWithName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PEXPLICIT_ACCESS",
        "name": "pExplicitAccess",
        "description": "A pointer to an  EXPLICIT_ACCESS structure to initialize. The BuildExplicitAccessWithName function does not allocate any memory. This parameter cannot be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "pTrusteeName",
        "description": "A pointer to a null-terminated string that contains the name of the trustee for the ptstrName member of the  TRUSTEE structure. The BuildExplicitAccessWithName function sets the other members of the TRUSTEE structure as follows.  ValueMeaning  pMultipleTrustee    NULL   MultipleTrusteeOperation    NO_MULTIPLE_TRUSTEE   TrusteeForm    TRUSTEE_IS_NAME   TrusteeType    TRUSTEE_IS_UNKNOWN"
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "AccessPermissions",
        "description": "Specifies an access mask for the grfAccessPermissions member of the EXPLICIT_ACCESS structure. The mask is a set of bit flags that use the  ACCESS_MASK format to specify the access rights that an  ACE allows, denies, or audits for the trustee. The functions that use the EXPLICIT_ACCESS structure do not convert, interpret, or validate the bits in this mask."
      },
      {
        "in_out": "_In_",
        "type": "ACCESS_MODE",
        "name": "AccessMode",
        "description": "Specifies an access mode for the grfAccessMode member of the EXPLICIT_ACCESS structure. The access mode indicates whether the access control entry (ACE) allows, denies, or audits the specified rights. For a discretionary access control list (DACL), this parameter can be one of the values from the  ACCESS_MODE enumeration. For a system access control list (SACL), this parameter can be a combination of ACCESS_MODE values."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Inheritance",
        "description": "Specifies an inheritance type for the grfInheritance member of the EXPLICIT_ACCESS structure. This value is a set of bit flags that determine whether other containers or objects can inherit the ACE from the primary object to which the  ACL is attached. The value of this member corresponds to the inheritance portion (low-order byte) of the AceFlags member of the  ACE_HEADER structure. This parameter can be NO_INHERITANCE to indicate that the ACE is not inheritable, or it can be a combination of the following values.  ValueMeaning  CONTAINER_INHERIT_ACE   Other containers that are contained by the primary object inherit the ACE.   INHERIT_ONLY_ACE   The ACE does not apply to the primary object to which the ACL is attached, but objects contained by the primary object inherit the ACE.   NO_PROPAGATE_INHERIT_ACE   The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE flags are not propagated to an inherited ACE.   OBJECT_INHERIT_ACE   Noncontainer objects contained by the primary object inherit the ACE.   SUB_CONTAINERS_AND_OBJECTS_INHERIT   Both containers and noncontainer objects that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags.   SUB_CONTAINERS_ONLY_INHERIT   Other containers that are contained by the primary object inherit the ACE. This flag corresponds to the combination of the CONTAINER_INHERIT_ACE and  INHERIT_ONLY_ACE flags.   SUB_OBJECTS_ONLY_INHERIT   Noncontainer objects contained by the primary object inherit the ACE. This flag corresponds to the combination of the OBJECT_INHERIT_ACE and  INHERIT_ONLY_ACE flags."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The BuildSecurityDescriptor function allocates and initializes a new security descriptor. This function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you do not specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "The BuildSecurityDescriptor function is intended for trusted servers that implement or expose security on their own objects. The function uses self-relative security descriptors suitable for serializing into a stream and storing to disk, as a trusted server might require. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "BuildSecurityDescriptor",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTRUSTEE",
        "name": "pOwner",
        "description": "A pointer to a  TRUSTEE structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, BuildSecurityDescriptor looks up the  security identifier (SID) associated with the specified trustee name.     If this parameter is NULL, the function uses the owner SID from the original security descriptor pointed to by pOldSD. If pOldSD is NULL, or if the owner SID in pOldSD is NULL, the owner SID is NULL in the new security descriptor."
      },
      {
        "in_out": "_In_opt_",
        "type": "PTRUSTEE",
        "name": "pGroup",
        "description": "A pointer to a TRUSTEE structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, BuildSecurityDescriptor looks up the SID associated with the specified trustee name.     If this parameter is NULL, the function uses the group SID from the original security descriptor pointed to by pOldSD. If pOldSD is NULL, or if the group SID in pOldSD is NULL, the group SID is NULL in the new security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cCountOfAccessEntries",
        "description": "The number of  EXPLICIT_ACCESS structures in the pListOfAccessEntries array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PEXPLICIT_ACCESS",
        "name": "pListOfAccessEntries",
        "description": "A pointer to an array of EXPLICIT_ACCESS structures that describe access control information for the discretionary access control list (DACL) of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in pOldSD, if any. If pOldSD is NULL, or if the DACL in pOldSD is NULL, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an  ACL from an array of EXPLICIT_ACCESS structures, see the  SetEntriesInAcl function.     If pListOfAccessEntries is NULL, the new security descriptor gets the DACL from pOldSD. In this case, if pOldSD is NULL, or if the DACL in pOldSD is NULL, the new DACL is NULL."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cCountOfAuditEntries",
        "description": "The number of  EXPLICIT_ACCESS structures in the pListOfAuditEntries array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PEXPLICIT_ACCESS",
        "name": "pListOfAuditEntries",
        "description": "A pointer to an array of EXPLICIT_ACCESS structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in pOldSD, if any. If pOldSD is NULL, or the SACL in pOldSD is NULL, the function creates a new SACL based solely on the information in the array.     If pListOfAuditEntries is NULL, the new security descriptor gets the SACL from pOldSD. In this case, if pOldSD is NULL, or the SACL in pOldSD is NULL, the new SACL is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pOldSD",
        "description": "A pointer to an existing self-relative  SECURITY_DESCRIPTOR structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access control, and audit-control information with the information in this security descriptor. This parameter can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "pSizeNewSD",
        "description": "A pointer to a variable that receives the size, in bytes, of the security descriptor."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "pNewSD",
        "description": "A pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the  LocalFree function to free the returned buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The BuildTrusteeWithName function initializes a  TRUSTEE structure. The caller specifies the trustee name. The function sets other members of the structure to default values.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "BuildTrusteeWithName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure to initialize. The BuildTrusteeWithName function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "pName",
        "description": "A pointer to a null-terminated string that contains the name of the trustee for the ptstrName member of the TRUSTEE structure. The BuildTrusteeWithName function sets the other members of the TRUSTEE structure as follows.  ValueMeaning  pMultipleTrustee    NULL   MultipleTrusteeOperation    NO_MULTIPLE_TRUSTEE   TrusteeForm    TRUSTEE_IS_NAME   TrusteeType    TRUSTEE_IS_UNKNOWN"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The BuildTrusteeWithObjectsAndName function initializes a  TRUSTEE structure with the object-specific access control entry (ACE) information and  initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function does not allocate memory for the  TRUSTEE and  OBJECTS_AND_NAME structures. For more information about object-specific ACEs, see Object-specific ACEs. ",
    "return_type": "void",
    "category": "Authorization",
    "name": "BuildTrusteeWithObjectsAndName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure that will be initialized by this function. If the value of this parameter is NULL or a pointer that is not valid, the results are undefined."
      },
      {
        "in_out": "_In_opt_",
        "type": "POBJECTS_AND_NAME",
        "name": "pObjName",
        "description": "A pointer to an  OBJECTS_AND_NAME structure that contains information about the trustee and the securable object."
      },
      {
        "in_out": "_In_opt_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "A pointer to an  SE_OBJECT_TYPE enumeration that contains information about the type of securable object."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a string that specifies the name that corresponds to the ObjectType GUID to be added to the  TRUSTEE structure returned in the pTrustee parameter. This function determines the ObjectType GUID that corresponds to this name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "InheritedObjectTypeName",
        "description": "A pointer to a string that specifies the name that corresponds to the InheritedObjectType GUID to be added to the TRUSTEE structure returned in the pTrustee parameter. This function determines the InheritedObjectType GUID that corresponds to this name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "Name",
        "description": "A pointer to a string that specifies the name used to identify the trustee."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The BuildTrusteeWithObjectsAndSid function initializes a  TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the  SID structure that represents the security identifier of the trustee.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "This function does not allocate memory for the  TRUSTEE and  OBJECTS_AND_SID structures. For more information about object-specific ACEs, see  Object-specific ACEs. ",
    "return_type": "void",
    "category": "Authorization",
    "name": "BuildTrusteeWithObjectsAndSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure to initialize. The BuildTrusteeWithObjectsAndSid function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined."
      },
      {
        "in_out": "_In_opt_",
        "type": "POBJECTS_AND_SID",
        "name": "pObjSid",
        "description": "A pointer to an  OBJECTS_AND_SID structure that contains information about the trustee and the securable object."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "pObjectGuid",
        "description": "A pointer to a GUID structure that describes the ObjectType GUID to be added to the  TRUSTEE structure."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "pInheritedObjectGuid",
        "description": "A pointer to a GUID structure that describes the InheritedObjectType GUID to be added to the TRUSTEE structure."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID structure that identifies the trustee."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The BuildTrusteeWithSid function initializes a  TRUSTEE structure. The caller specifies the security identifier (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "BuildTrusteeWithSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure to initialize. The BuildTrusteeWithSid function does not allocate any memory. If this parameter is NULL or a pointer that is not valid, the results are undefined."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to a  SID structure that identifies the trustee. The BuildTrusteeWithSid function assigns this pointer to the ptstrName member of the TRUSTEE structure. The function sets the other members of the TRUSTEE structure as follows.  ValueMeaning  pMultipleTrustee    NULL   MultipleTrusteeOperation    NO_MULTIPLE_TRUSTEE   TrusteeForm    TRUSTEE_IS_SID   TrusteeType    TRUSTEE_IS_UNKNOWN"
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CheckTokenCapability function checks the capabilities of a given token.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Securitybaseapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CheckTokenCapability",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an impersonation token.         If TokenHandle is NULL, CheckTokenCapability uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's primary token to create an impersonation token."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "CapabilitySidToCheck",
        "description": "A pointer to a capability SID structure. The CheckTokenCapability function checks the capabilities of this access token."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOL",
        "name": "HasCapability",
        "description": "Receives the results of the check. If the access token has the capability, it returns TRUE, otherwise, it returns FALSE."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CheckTokenMembershipEx function determines whether the specified SID is enabled in the specified token.",
    "library": "",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Securitybaseapi.h",
    "return_value": "If the function succeeds, it returns TRUE. If the function fails, it returns zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL APIENTRY",
    "category": "Authorization",
    "name": "CheckTokenMembershipEx",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token. If present, this token is checked for the SID. If not present, then the current effective token is used. This must be an impersonation token."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "SidToCheck",
        "description": "A pointer to a SID structure. The function checks for the presence of this SID in the presence of the token."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Flags that affect the behavior of the function. Currently the only valid flag is CTMF_INCLUDE_APPCONTAINER which allows app containers to pass the call as long as the other requirements of the token are met, such as the group specified is present and enabled."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOL",
        "name": "IsMember",
        "description": "TRUE if the SID is enabled in the token; otherwise, FALSE."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The ConvertSecurityDescriptorToStringSecurityDescriptor function converts a security descriptor to a string format. You can use the string format to store or transmit the security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Sddl.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The GetLastError function may return one of the following error codes.  ",
    "remarks": "If the DACL is NULL, and the SE_DACL_PRESENT control bit is set in the input security descriptor, the function fails. If the DACL is NULL, and the SE_DACL_PRESENT control bit is not set in the input security descriptor, the resulting security descriptor string does not have a D: component. For more information, see  Security Descriptor String Format. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ConvertSecurityDescriptorToStringSecurityDescriptor",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "SecurityDescriptor",
        "description": "A pointer to the security descriptor to convert. The security descriptor can be in  absolute or self-relative format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "RequestedStringSDRevision",
        "description": "Specifies the revision level of the output StringSecurityDescriptor string. Currently this value must be SDDL_REVISION_1."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "Specifies a combination of the  SECURITY_INFORMATION bit flags to indicate the components of the security descriptor to include in the output string.      \t\t\t\t\tThe BACKUP_SECURITY_INFORMATION \tflag is not applicable to this function. If the BACKUP_SECURITY_INFORMATION \tflag is passed in, the SecurityInformation parameter returns TRUE with null string output."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR*",
        "name": "StringSecurityDescriptor",
        "description": "A pointer to a variable that receives a pointer to a null-terminated security descriptor string. For a description of the string format, see  Security Descriptor String Format. To free the returned buffer, call the  LocalFree function."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "StringSecurityDescriptorLen",
        "description": "A pointer to a variable that receives the size, in TCHARs, of the security descriptor string returned in the StringSecurityDescriptor buffer. This parameter can be NULL if you do not need to retrieve the size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ConvertSidToStringSid function converts a security identifier (SID) to a string format suitable for display, storage, or transmission.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Sddl.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The GetLastError function may return one of the following error codes.  ",
    "remarks": "The ConvertSidToStringSid function uses the standard S-R-I-S-S\u00e2\u0080\u00a6 format for SID strings. For more information about SID string notation, see  SID Components. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ConvertSidToStringSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "Sid",
        "description": "A pointer to the SID structure to be converted."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR*",
        "name": "StringSid",
        "description": "A pointer to a variable that receives a pointer to a null-terminated SID string. To free the returned buffer, call the  LocalFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The ConvertStringSecurityDescriptorToSecurityDescriptor function converts a string-format security descriptor into a valid, functional security descriptor. This function retrieves a security descriptor that the  ConvertSecurityDescriptorToStringSecurityDescriptor function converted to string format.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Sddl.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. GetLastError may return one of the following error codes.  ",
    "remarks": "If ace_type is ACCESS_ALLOWED_OBJECT_ACE_TYPE and neither object_guid nor inherit_object_guid has a  GUID specified, then ConvertStringSecurityDescriptorToSecurityDescriptor converts ace_type to ACCESS_ALLOWED_ACE_TYPE. For information about the  ace_type,  object_guid, and inherit_object_guid fields, see Ace Strings. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ConvertStringSecurityDescriptorToSecurityDescriptor",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "StringSecurityDescriptor",
        "description": "A pointer to a null-terminated string containing the  string-format security descriptor to convert."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "StringSDRevision",
        "description": "Specifies the revision level of the StringSecurityDescriptor string. Currently this value must be SDDL_REVISION_1."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "SecurityDescriptor",
        "description": "A pointer to a variable that receives a pointer to the converted security descriptor. The returned security descriptor is self-relative. To free the returned buffer, call the  LocalFree function. To convert the security descriptor to an absolute security descriptor, use the  MakeAbsoluteSD function."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "SecurityDescriptorSize",
        "description": "A pointer to a variable that receives the size, in bytes, of the converted security descriptor. This parameter can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The ConvertStringSidToSid function converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to retrieve a SID that the  ConvertSidToStringSid function converted to string format.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Sddl.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The GetLastError function may return one of the following error codes.  ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ConvertStringSidToSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "StringSid",
        "description": "A pointer to a null-terminated string containing the string-format SID to convert. ..."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "Sid",
        "description": "A pointer to a variable that receives a pointer to the converted SID. To free the returned buffer, call the  LocalFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The ConvertToAutoInheritPrivateObjectSecurity function converts a security descriptor and its access control lists (ACLs) to a format that supports automatic propagation of inheritable access control entries (ACEs).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ConvertToAutoInheritPrivateObjectSecurity function attempts to determine whether the ACEs in the discretionary access control list (DACL) and system access control list (SACL) of the current security descriptor were inherited from the parent security descriptor. The function passes the ParentDescriptor parameter to the  CreatePrivateObjectSecurityEx function to get ACLs that contain only inherited ACEs. Then it compares these ACEs to the ACEs in the original security descriptor to determine which of the original ACEs were inherited. The ACEs do not need to match one-to-one. For instance, an ACE that allows read and write access to a trustee can be equivalent to two ACEs: an ACE that allows read access and an ACE that allows write access. Any ACEs in the original security descriptor that are equivalent to the ACEs inherited from the parent security descriptor are marked with the INHERITED_ACE flag and added to the new security descriptor. All other ACEs in the original security descriptor are added to the new security descriptor as noninherited ACEs. If the original DACL does not have any inherited ACEs, the function sets the SE_DACL_PROTECTED flag in the control bits of the new security descriptor. Similarly, the SE_SACL_PROTECTED flag is set if none of the ACEs in the SACL is inherited. For DACLs that have inherited ACEs, the function reorders the ACEs into two groups. The first group has ACEs that were directly applied to the object. The second group has inherited ACEs. This ordering ensures that noninherited ACEs have precedence over inherited ACEs. For more information, see  Order of ACEs in a DACL. The function sets the SE_DACL_AUTO_INHERITED and SE_SACL_AUTO_INHERITED flags in the control bits of the new security descriptor. The function does not change the ordering of access-allowed ACEs in relation to access-denied ACEs in the DACL because to do so would change the semantics of the resulting security descriptor. If the function cannot convert the DACL without changing the semantics, it leaves the DACL unchanged and sets the SE_DACL_PROTECTED flag. The new security descriptor has the same owner and primary group as the original security descriptor. The new security descriptor is equivalent to the original security descriptor, so the caller needs no access rights or privileges to update the security descriptor to the new format. This function works with ACL_REVISION and ACL_REVISION_DS ACLs. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ConvertToAutoInheritPrivateObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ParentDescriptor",
        "description": "A pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "CurrentSecurityDescriptor",
        "description": "A pointer to the current security descriptor of the object."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "NewSecurityDescriptor",
        "description": "A pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. It is the caller's responsibility to call the  DestroyPrivateObjectSecurity function to free this security descriptor."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "ObjectType",
        "description": "A pointer to a  GUID structure that identifies the type of object associated with the CurrentSecurityDescriptor parameter. If the object does not have a GUID, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "IsDirectoryObject",
        "description": "If TRUE, the new object is a container and can contain other objects. If FALSE, the new object is not a container."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the mapping from each generic right to specific rights for the object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The CopySid function copies a security identifier (SID) to a buffer.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "An application can use the CopySid function to make a copy of a SID in an access token (for example, in a TOKEN_GROUPS structure) to use in an access control entry (ACE). For an example that uses this function, see Getting the Logon SID. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CopySid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nDestinationSidLength",
        "description": "Specifies the length, in bytes, of the buffer receiving the copy of the SID."
      },
      {
        "in_out": "_Out_",
        "type": "PSID",
        "name": "pDestinationSid",
        "description": "A pointer to a buffer that receives a copy of the source  SID structure."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSourceSid",
        "description": "A pointer to a SID structure that the function copies to the buffer pointed to by the pDestinationSid parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The CreatePrivateObjectSecurity function allocates and initializes a self-relative security descriptor for a new private object. A protected server calls this function when it creates a new private object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "If a system access control list (SACL) is specified in the  SECURITY_DESCRIPTOR specified by the CreatorDescriptor parameter, the Token parameter must have the SE_SECURITY_NAME privilege enabled. The CreatePrivateObjectSecurity function checks this privilege and may generate audits during the process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CreatePrivateObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ParentDescriptor",
        "description": "A pointer to the security descriptor for the parent directory in which a new object is being created. If there is no parent directory, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "CreatorDescriptor",
        "description": "A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter is intended to be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "NewDescriptor",
        "description": "A pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. The caller must call the  DestroyPrivateObjectSecurity function to free this security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "IsDirectoryObject",
        "description": "Specifies whether the new object is a container. A value of TRUE indicates the object contains other objects, such as a directory."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle to the access token for the client process on whose behalf the object is being created. If this is an impersonation token, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the  SECURITY_IMPERSONATION_LEVEL enumerated type.     A client token is used to retrieve default security information for the new object, such as its default owner, primary group, and discretionary access control list. The token must be open for TOKEN_QUERY access. If all of the following conditions are true, then the handle must be opened for TOKEN_DUPLICATE access in addition to TOKEN_QUERY access.  The token handle refers to a primary token. The security descriptor of the token contains one or more ACEs with the OwnerRights SID. A security descriptor is specified for the CreatorDescriptor parameter. The caller of this function does not set the SEF_AVOID_OWNER_RESTRICTION flag in the AutoInheritFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the mapping from each generic right to specific rights for the object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The CreatePrivateObjectSecurityEx function allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. Some of the extended error codes and their meanings are listed in the following table.  ",
    "remarks": "The  CreatePrivateObjectSecurity function is identical to calling the CreatePrivateObjectSecurityEx function with ObjectType set to NULL and AutoInheritFlags set to zero. The AutoInheritFlags parameter is distinct from the similarly named bits in the Control member of the  SECURITY_DESCRIPTOR structure. For an explanation of the control bits, see  SECURITY_DESCRIPTOR_CONTROL. If AutoInheritFlags specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL in the new security descriptor: If AutoInheritFlags specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL. For both DACLs and SACLs, certain types of ACEs in ParentDescriptor and CreatorDescriptor will be manipulated and possibly replaced by two ACEs in NewDescriptor. Specifically, an inheritable ACE that contains at least one of the following mappable elements may result in two ACEs in the output security descriptor. Mappable elements include: ACEs with either of the mappable elements mentioned previously will result in the following ACEs in NewDescriptor: If AutoInheritFlags does not specify the SEF_AVOID_OWNER_CHECK bit, owner validity checking is performed. The Owner in the resultant NewDescriptor must be a legally formed SID, and either must match the TokenUser in Token or match a group in the TokenGroups in Token where the attributes on the group must include SE_GROUP_OWNER, and must not include SE_GROUP_USE_FOR_DENY_ONLY. Callers that do not have access to the token of the client that will ultimately be setting the owner may choose to skip owner validation checking. To create a security descriptor for a new object, call CreatePrivateObjectSecurityEx with ParentDescriptor set to the security descriptor of the parent container and CreatorDescriptor set to the security descriptor proposed by the creator of the object. If the CreatorDescriptor security descriptor contains a SACL, Token must have the SE_SECURITY_NAME privilege enabled or the caller must specify the SEF_AVOID_PRIVILEGE_CHECK flag in AutoInheritFlags. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CreatePrivateObjectSecurityEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ParentDescriptor",
        "description": "A pointer to the security descriptor for the parent container of the object. If there is no parent container, this parameter is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "CreatorDescriptor",
        "description": "A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter can be NULL. Alternatively, this parameter can point to a default security descriptor."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "NewDescriptor",
        "description": "A pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. When you have finished using the security descriptor, free it by calling the   DestroyPrivateObjectSecurity function."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID*",
        "name": "ObjectType",
        "description": "A pointer to a  GUID structure that identifies the type of object associated with NewDescriptor. If the object does not have a GUID, set ObjectType to NULL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "IsContainerObject",
        "description": "Specifies whether the new object can contain other objects. A value of TRUE indicates that the new object is a container. A value of FALSE indicates that the new object is not a container."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "AutoInheritFlags",
        "description": "A set of bit flags that control how access control entries (ACEs) are inherited from ParentDescriptor. This parameter can be a combination of the following values.  ValueMeaning  SEF_AVOID_OWNER_CHECK 0x10   The function does not check the validity of the owner in the resultant NewDescriptor as described in Remarks below. If the SEF_AVOID_PRIVILEGE_CHECK flag is also set, the Token parameter can be NULL.   SEF_AVOID_OWNER_RESTRICTION 0x1000   Any restrictions  specified by the             ParentDescriptor that would limit the caller's ability to specify             a DACL in the CreatorDescriptor are ignored.   SEF_AVOID_PRIVILEGE_CHECK 0x08   The function does not perform privilege checking. If the SEF_AVOID_OWNER_CHECK flag is also set, the Token parameter can be NULL. This flag is useful while implementing automatic inheritance to avoid checking privileges on each child updated.   SEF_DACL_AUTO_INHERIT 0x01   The new discretionary access control list (DACL) contains ACEs inherited from the DACL of          ParentDescriptor, as well as any explicit ACEs specified in the DACL of          CreatorDescriptor. If this flag is not set, the new DACL does not inherit ACEs.   SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT 0x04   CreatorDescriptor is the default descriptor for the type of object specified by ObjectType. As such,          CreatorDescriptor is ignored if          ParentDescriptor has any object-specific ACEs for the type of object specified by the ObjectType parameter. If no such ACEs are inherited,          CreatorDescriptor is handled as though this flag were not specified.   SEF_DEFAULT_GROUP_FROM_PARENT 0x40   The group of NewDescriptor defaults to the group from ParentDescriptor. If not set, the group of NewDescriptor defaults to the group of the token specified by the Token parameter. The group of the token is specified in the token itself. In either case, if the CreatorDescriptor parameter is not NULL, the NewDescriptor group is set to the group from CreatorDescriptor.   SEF_DEFAULT_OWNER_FROM_PARENT 0x20   The owner of NewDescriptor defaults to the owner from ParentDescriptor. If not set, the owner of NewDescriptor defaults to the owner of the token specified by the Token parameter. The owner of the token is specified in the token itself. In either case, if the CreatorDescriptor parameter is not NULL, the NewDescriptor owner is set to the owner from CreatorDescriptor.   SEF_MACL_NO_EXECUTE_UP 0x400   When this flag is set, the mandatory label ACE in CreatorDescriptor is not used to create a mandatory label ACE in NewDescriptor. Instead, a new SYSTEM_MANDATORY_LABEL_ACE with an access mask of SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP and the SID from the token's integrity SID is added to NewDescriptor.   SEF_MACL_NO_READ_UP 0x200   When this flag is set, the mandatory label ACE in CreatorDescriptor is not used to create a mandatory label ACE in NewDescriptor. Instead, a new SYSTEM_MANDATORY_LABEL_ACE with an access mask of SYSTEM_MANDATORY_LABEL_NO_READ_UP and the SID from the token's integrity SID is added to NewDescriptor.   SEF_MACL_NO_WRITE_UP 0x100   When this flag is set, the mandatory label ACE in CreatorDescriptor is not used to create a mandatory label ACE in NewDescriptor. Instead, a new SYSTEM_MANDATORY_LABEL_ACE with an access mask of SYSTEM_MANDATORY_LABEL_NO_WRITE_UP and the SID from the token's integrity SID is added to NewDescriptor.   SEF_SACL_AUTO_INHERIT 0x02   The new system access control list (SACL) contains ACEs inherited from the SACL of          ParentDescriptor, as well as any explicit ACEs specified in the SACL of          CreatorDescriptor. If this flag is not set, the new SACL does not inherit ACEs."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle to the access token for the client process on whose behalf the object is being created. If this is an impersonation token, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the  SECURITY_IMPERSONATION_LEVEL enumerated type.     The client token contains default security information, such as the default owner, primary group, and DACL. The function uses these defaults if the information is not in the input security descriptors. The token must be open for TOKEN_QUERY access. If all of the following conditions are true, then the handle must be opened for TOKEN_DUPLICATE access in addition to TOKEN_QUERY access.  The token handle refers to a primary token. The security descriptor of the token contains one or more ACEs with the OwnerRights SID. A security descriptor is specified for the CreatorDescriptor parameter. The caller of this function does not set the SEF_AVOID_OWNER_RESTRICTION flag in the AutoInheritFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the mapping from each generic right to specific rights for the object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CreatePrivateObjectSecurityWithMultipleInheritance function allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function. This function supports private objects (such as Directory Service objects with attached auxiliary classes) composed of multiple object types or classes.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns a nonzero value. If the function fails, it returns zero. Call  GetLastError for extended error information. Some extended error codes and their meanings are listed in the following table.  ",
    "remarks": "The  CreatePrivateObjectSecurityEx function is identical to calling the  CreatePrivateObjectSecurityWithMultipleInheritance function with a single GUID in ObjectTypes. The AutoInheritFlags are distinct from the similarly named bits in the Control member of the  SECURITY_DESCRIPTOR structure. For an explanation of the control bits, see  SECURITY_DESCRIPTOR_CONTROL. If AutoInheritFlags specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL in the new security descriptor: If AutoInheritFlags specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL. For both DACLs and SACLs, certain types of ACEs in ParentDescriptor and CreatorDescriptor will be manipulated and possibly replaced by two ACEs in NewDescriptor. Specifically, an inheritable ACE that contains at least one of the following mappable elements may result in two ACEs in the output security descriptor. Mappable elements include: ACEs with any of these mappable elements will result in the following two ACEs in NewDescriptor: If AutoInheritFlags does not specify the SEF_AVOID_OWNER_CHECK bit, owner validity checking is performed according to the following rules. The Owner in the resultant NewDescriptor     must be a legally formed SID, and either must match the TokenUser in Token or must match a group in the TokenGroups in Token. The attributes on the group: Callers that do not have access to the token of the client that will ultimately be setting the owner may choose to skip owner validation checking. To create a security descriptor for a new object, call CreatePrivateObjectSecurityWithMultipleInheritance with ParentDescriptor set to the security descriptor of the parent container and CreatorDescriptor set to the security descriptor proposed by the creator of the object. To verify the current security descriptor on an object, call CreatePrivateObjectSecurityWithMultipleInheritance with ParentDescriptor set to the security descriptor of the parent container and CreatorDescriptor set to the current security descriptor of the object. This call ensures that the ACEs are appropriately inherited from parent to child security descriptors. If the CreatorDescriptor security descriptor contains a SACL, Token must have the SE_SECURITY_NAME privilege enabled or the caller must specify the SEF_AVOID_PRIVILEGE_CHECK flag in AutoInheritFlags. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CreatePrivateObjectSecurityWithMultipleInheritance",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ParentDescriptor",
        "description": "A pointer to the security descriptor        for the parent container of the object. If there is no parent container, this parameter is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "CreatorDescriptor",
        "description": "A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter can be NULL. Alternatively, this parameter can point to a default security descriptor."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "NewDescriptor",
        "description": "A pointer to a variable to receive a pointer to the newly allocated self-relative security descriptor. When you have finished using the security descriptor, free it by calling the   DestroyPrivateObjectSecurity function."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID**",
        "name": "ObjectTypes",
        "description": "An array of pointers to GUID structures that identify the object types or classes of the object associated with NewDescriptor. For Active Directory objects, this array contains pointers to the class GUIDs of the object's structural class and all attached auxiliary classes. Set ObjectTypes to NULL if the object does not have a GUID."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "GuidCount",
        "description": "The number of GUIDs present in the ObjectTypes parameter."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "IsContainerObject",
        "description": "Specifies whether the new object can contain other objects. A value of TRUE indicates that the new object is a container. A value of FALSE indicates that the new object is not a container."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "AutoInheritFlags",
        "description": "A set of bit flags that control how access control entries (ACEs) are inherited from ParentDescriptor. This parameter can be a combination of the following values.  ValueMeaning  SEF_DACL_AUTO_INHERIT 0x01   The new discretionary access control list (DACL) contains ACEs inherited from the DACL of          ParentDescriptor, as well as any explicit ACEs specified in the DACL of          CreatorDescriptor. If this flag is not set, the new DACL does not inherit ACEs.   SEF_SACL_AUTO_INHERIT 0x02   The new system access control list (SACL) contains ACEs inherited from the SACL of          ParentDescriptor, as well as any explicit ACEs specified in the SACL of          CreatorDescriptor. If this flag is not set, the new SACL does not inherit ACEs.   SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT 0x04   CreatorDescriptor is the default descriptor for the types of objects specified by ObjectTypes. As such,          CreatorDescriptor is ignored if          ParentDescriptor has any object-specific ACEs for the types of objects specified by the ObjectTypes parameter. If no such ACEs are inherited,          CreatorDescriptor is handled as though this flag were not specified.   SEF_AVOID_PRIVILEGE_CHECK 0x08   The function does not perform privilege checking. If the SEF_AVOID_OWNER_CHECK flag is also set, the Token parameter can be NULL. This flag is useful while implementing automatic inheritance to avoid checking privileges on each child updated.   SEF_AVOID_OWNER_CHECK 0x10   The function does not check the validity of the owner in the resultant NewDescriptor as described in the Remarks section. If the SEF_AVOID_PRIVILEGE_CHECK flag is also set, the Token parameter can be NULL.   SEF_DEFAULT_OWNER_FROM_PARENT 0x20   The owner of NewDescriptor defaults to the owner from ParentDescriptor. If not set, the owner of NewDescriptor defaults to the owner of the token specified by the Token parameter. The owner of the token is specified in the token itself. In either case, if the CreatorDescriptor parameter is not NULL, the NewDescriptor owner is set to the owner from CreatorDescriptor.   SEF_DEFAULT_GROUP_FROM_PARENT 0x40   The group of NewDescriptor defaults to the group from ParentDescriptor. If not set, the group of NewDescriptor defaults to the group of the token specified by the Token parameter. The group of the token is specified in the token itself. In either case, if the CreatorDescriptor parameter is not NULL, the NewDescriptor group is set to the group from CreatorDescriptor.   SEF_MACL_NO_WRITE_UP 0x100   A principal with a mandatory level lower than that of the object cannot write to the object.   SEF_MACL_NO_READ_UP 0x200   A principal with a mandatory level lower than that of the object cannot read the object.   SEF_MACL_NO_EXECUTE_UP 0x400   A principal with a mandatory level lower than that of the object cannot execute the object.   SEF_AVOID_OWNER_RESTRICTION 0x1000   Any restrictions  specified by the             ParentDescriptor parameter that would limit the caller's ability to specify             a DACL in the CreatorDescriptor are ignored."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle to the access token for the client process on whose behalf the object is being created. If this is an impersonation token, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the  SECURITY_IMPERSONATION_LEVEL enumerated type.     The client token contains default security information, such as the default owner, primary group, and DACL. This function uses these defaults if the information is not in the input security descriptors. The token must be open for TOKEN_QUERY access. If all of the following conditions are true, then the handle must be opened for TOKEN_DUPLICATE access in addition to TOKEN_QUERY access.  The token handle refers to a primary token. The security descriptor of the token contains one or more ACEs with the OwnerRights SID. A security descriptor is specified for the CreatorDescriptor parameter. The caller of this function does not set the SEF_AVOID_OWNER_RESTRICTION flag in the AutoInheritFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the mapping from each generic right to specific rights for the object."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The CreateRestrictedToken function creates a new access token that is a restricted version of an existing access token. The restricted token can have disabled security identifiers (SIDs), deleted privileges, and a list of restricting SIDs. For more information, see  Restricted Tokens.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The CreateRestrictedToken function can restrict the token in the following ways: You can use the restricted token in the  CreateProcessAsUser function to create a process that has restricted access rights and privileges. If a process calls CreateProcessAsUser using a restricted version of its own token, the calling process does not need to have the SE_ASSIGNPRIMARYTOKEN_NAME privilege. You can use the restricted token in the  ImpersonateLoggedOnUser function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CreateRestrictedToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ExistingTokenHandle",
        "description": "A handle to a primary or impersonation token. The token can also be a restricted token. The handle must have TOKEN_DUPLICATE access to the token."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Flags",
        "description": "Specifies additional privilege options. This parameter can be zero or a combination of the following values.  ValueMeaning  DISABLE_MAX_PRIVILEGE 0x1   Disables all privileges in the new token except the SeChangeNotifyPrivilege privilege. If this value is specified, the DeletePrivilegeCount and PrivilegesToDelete parameters are ignored.   SANDBOX_INERT 0x2   If this value is used, the system does not check AppLocker rules  or apply Software Restriction Policies. For AppLocker, this flag disables checks for all four rule collections: Executable, Windows Installer, Script, and DLL. When creating a setup program that must run extracted DLLs during installation, use the flag SAFER_TOKEN_MAKE_INERT in the SaferComputeTokenFromLevel function. A token can be queried for existence of this flag by using GetTokenInformation. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  On systems with KB2532445 installed, the caller must be running as LocalSystem or TrustedInstaller or the system ignores this flag. For more information, see  \"You can circumvent AppLocker rules by using an Office macro on a computer that is running Windows 7 or Windows Server 2008 R2\" in the Help and Support Knowledge Base at http://support.microsoft.com/kb/2532445. Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  AppLocker is not supported. AppLocker was introduced in Windows 7 and Windows Server 2008 R2.   LUA_TOKEN 0x4   The new token is a LUA token. Windows Server 2003 and Windows XP:  This value is not supported.   WRITE_RESTRICTED 0x8   The new token contains restricting SIDs that are considered only when evaluating write access. Windows XP with SP2 and later:  The value of this constant is 0x4. For an application to be compatible with Windows XP with SP2 and later operating systems, the application should query the operating system by calling the GetVersionEx function to determine which value should be used. Windows Server 2003 and Windows XP with SP1 and earlier:  This value is not supported."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DisableSidCount",
        "description": "Specifies the number of entries in the SidsToDisable array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "SidsToDisable",
        "description": "A pointer to an array of  SID_AND_ATTRIBUTES structures that specify the deny-only SIDs in the restricted token. The system uses a deny-only SID to deny access to a securable object. The absence of a deny-only SID does not allow access.     Disabling a SID turns on SE_GROUP_USE_FOR_DENY_ONLY and turns off SE_GROUP_ENABLED and SE_GROUP_ENABLED_BY_DEFAULT. All other attributes are ignored. Deny-only attributes apply to any combination of an existing token's SIDs, including the user SID and group SIDs that have the SE_GROUP_MANDATORY attribute. To get the SIDs associated with the existing token, use the  GetTokenInformation function with the TokenUser and TokenGroups flags. The function ignores any SIDs in the array that are not also found in the existing token. The function ignores the Attributes member of the SID_AND_ATTRIBUTES structure. This parameter can be NULL if no SIDs are to be disabled."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DeletePrivilegeCount",
        "description": "Specifies the number of entries in the PrivilegesToDelete array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PLUID_AND_ATTRIBUTES",
        "name": "PrivilegesToDelete",
        "description": "A pointer to an array of  LUID_AND_ATTRIBUTES structures that specify the privileges to delete in the restricted token.     The GetTokenInformation function can be used with the TokenPrivileges flag to retrieve the privileges held by the existing token. The function ignores any privileges in the array that are not held by the existing token. The function ignores the Attributes members of the LUID_AND_ATTRIBUTES structures. This parameter can be NULL if you do not want to delete any privileges. If the calling program passes too many privileges in this array, CreateRestrictedToken returns ERROR_INVALID_PARAMETER."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "RestrictedSidCount",
        "description": "Specifies the number of entries in the SidsToRestrict array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID_AND_ATTRIBUTES",
        "name": "SidsToRestrict",
        "description": "A pointer to an array of  SID_AND_ATTRIBUTES structures that specify a list of restricting SIDs for the new token. If the existing token is a restricted token, the list of restricting SIDs for the new token is the intersection of this array and the list of restricting SIDs for the existing token. No check is performed to remove duplicate SIDs that were placed on the SidsToRestrict parameter. Duplicate SIDs allow a restricted token to have redundant information in the restricting SID list.     The Attributes member of the SID_AND_ATTRIBUTES structure must be zero. Restricting SIDs are always enabled for access checks. This parameter can be NULL if you do not want to specify any restricting SIDs."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "NewTokenHandle",
        "description": "A pointer to a variable that receives a handle to the new restricted token. This handle has the same access rights as ExistingTokenHandle. The new token is the same type, primary or impersonation, as the existing token. The handle returned in NewTokenHandle can be duplicated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The CreateSecurityPage function creates a  basic security property page that enables the user to view and edit the access rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL). Use the  PropertySheet function or the  PSM_ADDPAGE message to add this page to a property sheet.",
    "library": "Aclui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclui.h",
    "return_value": "If the function succeeds, the function returns a handle to a basic security property page. If the function fails, it returns NULL. To get extended error information, call  GetLastError. ",
    "remarks": "During the property page initialization, the system calls the  ISecurityInformation::GetSecurity and  ISecurityInformation::SetSecurity methods to determine whether the user has permission to edit the object's security descriptor. The system displays an error message if the user does not have permission. The basic security property page can include an Advanced button for displaying the  advanced security property sheet. This advanced security property sheet can contain three additional property pages that enable the user to view and edit the object's DACL, system access control list (SACL), and owner. ",
    "return_type": "HPROPSHEETPAGE",
    "category": "Authorization",
    "name": "CreateSecurityPage",
    "is_callback": 0,
    "dll": "Aclui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPSECURITYINFO",
        "name": "psi",
        "description": "A pointer to your implementation of the  ISecurityInformation interface. The system calls the interface methods to retrieve information about the object being edited and to return the user's input."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The CreateWellKnownSid function creates a SID for predefined aliases.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. For extended error information, call  GetLastError. The following example shows creating a SID for the Everyone group. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "CreateWellKnownSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WELL_KNOWN_SID_TYPE",
        "name": "WellKnownSidType",
        "description": "Member of the WELL_KNOWN_SID_TYPE enumeration that specifies what the SID will identify."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "DomainSid",
        "description": "A pointer to a SID that identifies the domain to use when creating the SID. Pass NULL to use the local computer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to memory where CreateWellKnownSid will store the new SID."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "cbSid",
        "description": "A pointer to a DWORD that contains the number of bytes available at pSid. The CreateWellKnownSid function stores the number of bytes actually used at this location."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The DeleteAce function deletes an access control entry (ACE) from an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "An application can use the  ACL_SIZE_INFORMATION structure retrieved by the  GetAclInformation function to discover the size of the ACL and the number of ACEs it contains. The  GetAce function retrieves information about an individual ACE. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "DeleteAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. The ACE specified by the dwAceIndex parameter is removed from this ACL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceIndex",
        "description": "The ACE to delete. A value of zero corresponds to the first ACE in the ACL, a value of one to the second ACE, and so on."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The DestroyPrivateObjectSecurity function deletes a private object's security descriptor. For background information, see the Security Descriptors for Private Objects topic.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "DestroyPrivateObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ObjectDescriptor",
        "description": "A pointer to a pointer to the  SECURITY_DESCRIPTOR structure to be deleted. This security descriptor must have been created by a call to the  CreatePrivateObjectSecurity function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The DSCreateSecurityPage function creates a security property page for an Active Directory object. The resulting property page can be added to a property sheet.",
    "library": "DSSec.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "DSSec.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "The function pointed to by pfnReadSD is defined as follows. The DSCreateSecurityPage function will free the security descriptor returned in the third parameter above by a  call to the LocalFree function. The function pointed to by pfnWriteSD is defined as follows. ",
    "return_type": "HRESULT",
    "category": "Authorization",
    "name": "DSCreateSecurityPage",
    "is_callback": 0,
    "dll": "DSSec.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectPath",
        "description": "A pointer to a null-terminated wide character string that represents the full Active Directory path for the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszObjectClass",
        "description": "A pointer to a null-terminated wide character string that represents the object class. This value can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags used for the security property page. This parameter can be none or any combination of the following flags.  ValueMeaning  DSSI_READ_ONLY 0x00000001   The security properties are read-only.   DSSI_NO_ACCESS_CHECK  0x00000002   No access check is performed.   DSSI_NO_EDIT_SACL 0x00000004   The system access control list (SACL) property is read-only.   DSSI_NO_EDIT_OWNER 0x00000008   The object owner property is read-only.   DSSI_IS_ROOT 0x00000010   The object is a root object.   DSSI_NO_FILTER 0x00000020   Do not apply any filters.   DSSI_NO_READONLY_MESSAGE 0x00000040   Suppress read-only popup messages."
      },
      {
        "in_out": "_Out_",
        "type": "HPROPSHEETPAGE*",
        "name": "phPage",
        "description": "A pointer to a HPROPSHEETPAGE that returns the created security property page."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNREADOBJECTSECURITY",
        "name": "pfnReadSD",
        "description": "A pointer to a function used to read the security descriptor of the object. This value can be NULL. If pfnReadSD is not NULL, DSCreateSecurityPage  calls the function referenced by pfnReadSD to retrieve the security descriptor of the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNWRITEOBJECTSECURITY",
        "name": "pfnWriteSD",
        "description": "A pointer to  a function used to write the security descriptor of the object. This value can be NULL. If pfnWriteSD is not NULL, DSCreateSecurityPage  calls the function referenced by pfnWriteSD to write the security descriptor of the object."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lpContext",
        "description": "Context to pass to the functions identified by pfnReadSD or pfnWriteSD."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 7,
    "description": "The DSCreateISecurityInfoObject function creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object.",
    "library": "DSSec.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "DSSec.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Authorization",
    "name": "DSCreateISecurityInfoObject",
    "is_callback": 0,
    "dll": "DSSec.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectPath",
        "description": "The full path of the DS object for which to create an instance of the ISecurityInformation interface."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectClass",
        "description": "The class of the object specified by the pwszObjectPath parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags used for the security property page associated with the new instance of the ISecurityInformation interface. This parameter can be any combination of the following flags.  ValueMeaning  DSSI_READ_ONLY 0x00000001   The security properties are read-only.   DSSI_NO_ACCESS_CHECK  0x00000002   No access check is performed.   DSSI_NO_EDIT_SACL 0x00000004   The system access control list (SACL) property is read-only.   DSSI_NO_EDIT_OWNER 0x00000008   The object owner property is read-only.   DSSI_IS_ROOT 0x00000010   The object is a root object.   DSSI_NO_FILTER 0x00000020   Do not apply any filters.   DSSI_NO_READONLY_MESSAGE 0x00000040   Suppress read-only popup messages."
      },
      {
        "in_out": "_Out_",
        "type": "LPSECURITYINFO*",
        "name": "ppSI",
        "description": "A pointer to the instance of the ISecurityInformation interface this function creates."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNREADOBJECTSECURITY",
        "name": "pfnReadSD",
        "description": "A pointer to a function used to read the security descriptor of the object. This value can be NULL. If pfnReadSD is not NULL, DSCreateISecurityInfoObject  calls the function referenced by pfnReadSD to retrieve the security descriptor of the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNWRITEOBJECTSECURITY",
        "name": "pfnWriteSD",
        "description": "A pointer to  a function used to write the security descriptor of the object. This value can be NULL. If pfnWriteSD is not NULL, DSCreateISecurityInfoObject  calls the function referenced by pfnWriteSD to write the security descriptor of the object."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lpContext",
        "description": "Context to pass to the functions identified by the pfnReadSD and pfnWriteSD parameters."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 10,
    "description": "The DSCreateISecurityInfoObjectEx function creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object on the specified server.",
    "library": "DSSec.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "DSSec.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Authorization",
    "name": "DSCreateISecurityInfoObjectEx",
    "is_callback": 0,
    "dll": "DSSec.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectPath",
        "description": "The full path of the DS object for which to create an instance of the ISecurityInformation interface."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectClass",
        "description": "The class of the object specified by the pwszObjectPath parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszServer",
        "description": "The server of the object specified by the pwszObjectPath parameter. If the value of this parameter is NULL, the server is obtained from the path specified by the pwszObjectPath parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszUserName",
        "description": "A user name to be associated with the new ISecurityInformation object. If the value of this parameter is NULL, the Active Directory Services Interfaces (ADSI) default is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszPassword",
        "description": "A password to be associated with the new ISecurityInformation object. If the value of this parameter is NULL, the Active Directory Services Interfaces (ADSI) default is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags used for the security property page associated with the new instance of the ISecurityInformation interface. This parameter can be any combination of the following flags.  ValueMeaning  DSSI_READ_ONLY 0x00000001   The security properties are read-only.   DSSI_NO_ACCESS_CHECK  0x00000002   No access check is performed.   DSSI_NO_EDIT_SACL 0x00000004   The system access control list (SACL) property is read-only.   DSSI_NO_EDIT_OWNER 0x00000008   The object owner property is read-only.   DSSI_IS_ROOT 0x00000010   The object is a root object.   DSSI_NO_FILTER 0x00000020   Do not apply any filters.   DSSI_NO_READONLY_MESSAGE 0x00000040   Suppress read-only popup messages."
      },
      {
        "in_out": "_Out_",
        "type": "LPSECURITYINFO*",
        "name": "ppSI",
        "description": "A pointer to the instance of the ISecurityInformation interface this function creates."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNREADOBJECTSECURITY",
        "name": "pfnReadSD",
        "description": "A pointer to a function used to read the security descriptor of the object. This value can be NULL. If pfnReadSD is not NULL, DSCreateISecurityInfoObject  calls the function referenced by pfnReadSD to retrieve the security descriptor of the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNWRITEOBJECTSECURITY",
        "name": "pfnWriteSD",
        "description": "A pointer to  a function used to write the security descriptor of the object. This value can be NULL. If pfnWriteSD is not NULL, DSCreateISecurityInfoObject  calls the function referenced by pfnWriteSD to write the security descriptor of the object."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lpContext",
        "description": "Context to pass to the functions identified by the pfnReadSD and pfnWriteSD parameters."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 8,
    "description": "The DSEditSecurity function displays a modal dialog box for editing security on a Directory Services (DS) object.",
    "library": "DSSec.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "DSSec.h",
    "return_value": "If the function succeeds, the function returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Authorization",
    "name": "DSEditSecurity",
    "is_callback": 0,
    "dll": "DSSec.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "The dialog box owner window."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszObjectPath",
        "description": "The full Active Directory Services (ADS) path of the DS object."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pwszObjectClass",
        "description": "The class of the object."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "The combination of DSSI_* flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR*",
        "name": "pwszCaption",
        "description": "The dialog box caption."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNREADOBJECTSECURITY",
        "name": "pfnReadSD",
        "description": "The function for reading the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFNWRITEOBJECTSECURITY",
        "name": "pfnWriteSD",
        "description": "The function for writing the object."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lpContext",
        "description": "The context passed into the read or write functions in the pfnReadSD and pfnWriteSD parameters."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The DuplicateToken function creates a new access token that duplicates one already in existence.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The DuplicateToken function creates an impersonation token, which you can use in functions such as SetThreadToken and ImpersonateLoggedOnUser. The token created by DuplicateToken cannot be used in the CreateProcessAsUser function, which requires a primary token. To create a token that you can pass to CreateProcessAsUser, use the DuplicateTokenEx function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "DuplicateToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ExistingTokenHandle",
        "description": "A handle to an access token opened with TOKEN_DUPLICATE access."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_IMPERSONATION_LEVEL",
        "name": "ImpersonationLevel",
        "description": "Specifies a  SECURITY_IMPERSONATION_LEVEL enumerated type that supplies the impersonation level of the new token."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "DuplicateTokenHandle",
        "description": "A pointer to a variable that receives a handle to the duplicate token. This handle has TOKEN_IMPERSONATE and TOKEN_QUERY access to the new token. When you have finished using the new token, call the CloseHandle function to close the token handle."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The DuplicateTokenEx function creates a new access token that duplicates an existing token. This function can create either a primary token or an impersonation token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns a nonzero value. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The DuplicateTokenEx function allows you to create a primary token that you can use in the  CreateProcessAsUser function. This allows a server application that is impersonating a client to create a process that has the security context of the client. Note that the DuplicateToken function can create only impersonation tokens, which are not valid for CreateProcessAsUser. The following is a typical scenario for using DuplicateTokenEx to create a primary token. A server application creates a thread that calls one of the impersonation functions, such as  ImpersonateNamedPipeClient, to impersonate a client. The impersonating thread then calls the  OpenThreadToken function to get its own token, which is an impersonation token that has the security context of the client. The thread specifies this impersonation token in a call to DuplicateTokenEx, specifying the TokenPrimary flag. The DuplicateTokenEx function creates a primary token that has the security context of the client. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "DuplicateTokenEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hExistingToken",
        "description": "A handle to an access token opened with TOKEN_DUPLICATE access."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDesiredAccess",
        "description": "Specifies the requested access rights for the new token. The DuplicateTokenEx function compares the requested access rights with the existing token's discretionary access control list (DACL) to determine which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED.     For a list of access rights for access tokens, see  Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPSECURITY_ATTRIBUTES",
        "name": "lpTokenAttributes",
        "description": "A pointer to a  SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new token and determines whether child processes can inherit the token. If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited. If the security descriptor contains a system access control list (SACL), the token gets ACCESS_SYSTEM_SECURITY access right, even if it was not requested in dwDesiredAccess. To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME privilege set."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_IMPERSONATION_LEVEL",
        "name": "ImpersonationLevel",
        "description": "Specifies a value from the  SECURITY_IMPERSONATION_LEVEL enumeration that indicates the impersonation level of the new token."
      },
      {
        "in_out": "_In_",
        "type": "TOKEN_TYPE",
        "name": "TokenType",
        "description": "Specifies one of the following values from the TOKEN_TYPE enumeration.  ValueMeaning  TokenPrimary   The new token is a primary token that you can use in the  CreateProcessAsUser function.   TokenImpersonation   The new token is an impersonation token."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "phNewToken",
        "description": "A pointer to a HANDLE variable that receives the new token. When you have finished using the new token, call the CloseHandle function to close the token handle."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The EditSecurity function displays a property sheet that contains a  basic security property page. This property page enables the user to view and edit the access rights allowed or denied by the ACEs in an object's DACL.",
    "library": "Aclui.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclui.h",
    "return_value": "If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The EditSecurity function calls the  CreateSecurityPage function to create a basic security property page. During the property page initialization, the system calls the  ISecurityInformation::GetSecurity and  ISecurityInformation::SetSecurity methods to determine whether the user has permission to edit the object's security descriptor. The system displays an error message if the user does not have permission. The basic security property page can include an Advanced button for displaying the  advanced security property sheet. This advanced security property sheet can contain three additional property pages that enable the user to view and edit the object's DACL, SACL, and owner. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "EditSecurity",
    "is_callback": 0,
    "dll": "Aclui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "A handle to the window that owns the property sheet. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPSECURITYINFO",
        "name": "psi",
        "description": "A pointer to your implementation of the  ISecurityInformation interface. The system calls the interface methods to retrieve information about the object being edited and to return the user's input."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The EditSecurityAdvanced function extends the EditSecurity function to include the security page type when displaying the property sheet that contains a  basic security property page. This property page enables the user to view and edit the access rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL).",
    "library": "Aclui.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Aclui.h",
    "return_value": "If the function succeeds, the return value is S_OK. If the function fails, any other HRESULT value indicates an error. For a list of common error codes, see Common HRESULT Values. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Authorization",
    "name": "EditSecurityAdvanced",
    "is_callback": 0,
    "dll": "Aclui.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndOwner",
        "description": "A handle to the window that owns the property sheet. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPSECURITYINFO",
        "name": "psi",
        "description": "A pointer to your implementation of the  ISecurityInformation interface. The system calls the interface methods to retrieve information about the object being edited and to return the user's input."
      },
      {
        "in_out": "_In_",
        "type": "SI_PAGE_TYPE",
        "name": "uSIPage",
        "description": "A value of the  SI_PAGE_TYPE enumeration that indicates the page type on which to display the elevated access control editor."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The EqualDomainSid function determines whether two SIDs are from the same domain.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If both SIDs are  account domain SIDs and/or BUILTIN SIDs, the return value is nonzero. In addition, *pfEqual is set to TRUE if the domains of the two SIDs are equal; otherwise  *pfEqual is set to FALSE. If one or more of the SIDS is neither an account domain SID nor a BUILTIN SID, then the return value is FALSE. To get extended error information, call GetLastError. GetLastError returns ERROR_NON_DOMAIN_SID if either SID is not an account domain SID or BUILTIN SID. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "EqualDomainSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid1",
        "description": "A pointer to one of the two SIDs to compare. This SID must be either an account domain SID or a BUILTIN SID."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid2",
        "description": "A pointer to one of the two SIDs to compare. This SID must be either an account domain SID or a BUILTIN SID."
      },
      {
        "in_out": "_Out_",
        "type": "BOOL*",
        "name": "pfEqual",
        "description": "A pointer to a BOOL that EqualDomainSid sets to TRUE if the domains of the two SIDs are equal or FALSE if they are not equal. This value cannot be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The EqualPrefixSid function tests two security-identifier (SID) prefix values for equality. A SID prefix is the entire SID except for the last subauthority value.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the SID prefixes are equal, the return value is nonzero. If the SID prefixes are not equal, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The EqualPrefixSid function enables a server application in one domain to verify an attempt by a user to log on to another domain. For example, if a user attempts to log on to RemoteDomain from a workstation in LocalDomain, the server for LocalDomain can request the SIDs for the user and the user's groups from RemoteDomain. The domain controller for RemoteDomain responds with the relevant SIDs. All SIDs for a specified domain have the same prefix. When the server receives the user's SIDs, the server can call the EqualPrefixSid function for each SID, comparing the user or group SID against the SID for RemoteDomain. If any of the SID prefixes are not equal, the server refuses the logon attempt. It is advisable to modify the SID for a domain before comparing it with a group or user SID. If the SID for RemoteDomain is S-1\u00e2\u0080\u00931234\u00e2\u0080\u00938, each group or user SID for that domain has S-1\u00e2\u0080\u00931234\u00e2\u0080\u00938 as its prefix. To compare the SIDs by using the EqualPrefixSid function, an application copies the domain SID and adds any subauthority (RID) value to the copy, thereby creating a SID in the form S-1\u00e2\u0080\u00931234\u00e2\u0080\u00938\u00e2\u0080\u00930. The application then uses the modified domain SID as a template against which the group and user SIDs are compared. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "EqualPrefixSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid1",
        "description": "A pointer to the first  SID structure to compare. This structure is assumed to be valid."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid2",
        "description": "A pointer to the second SID structure to compare. This structure is assumed to be valid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The EqualSid function tests two security identifier (SID) values for equality. Two SIDs must match exactly to be considered equal.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the  SID structures are equal, the return value is nonzero. If the SID structures are not equal, the return value is zero. To get extended error information, call  GetLastError. If either SID structure is not valid, the return value is undefined. For an example that uses this function, see Searching for a SID in an Access Token. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "EqualSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid1",
        "description": "A pointer to the first  SID structure to compare. This structure is assumed to be valid."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid2",
        "description": "A pointer to the second SID structure to compare. This structure is assumed to be valid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The FindFirstFreeAce function retrieves a pointer to the first free byte in an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "FindFirstFreeAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "pAce",
        "description": "The address of a pointer to the first free position in the ACL created when the function returns. If the ACL is not valid, this parameter is NULL. If the ACL is full, this parameter points to the byte immediately following the ACL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The FreeInheritedFromArray function frees memory allocated by the  GetInheritanceSource function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "FreeInheritedFromArray",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PINHERITED_FROM",
        "name": "pInheritArray",
        "description": "A pointer to the array of INHERITED_FROM structures returned by GetInheritanceSource."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "AceCnt",
        "description": "Number of entries in pInheritArray."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_OBJECT_MGR_FUNCTS",
        "name": "pfnArray",
        "description": "Unused. Set to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 10,
    "description": "The GetInheritanceSource function returns information about the source of inherited access control entries (ACEs) in an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "The GetInheritanceSource function allocates memory for the names returned in the INHERITED_FROM structure. When the function has finished using this memory, the calling program must free it by calling  FreeInheritedFromArray. Note that the caller must provide memory for the array itself. If the caller allocated the memory, the caller must free that memory after calling FreeInheritedFromArray. This function does not handle race conditions. If your thread calls this function at the approximate time that another thread changes the object's security descriptor, then this function could fail. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetInheritanceSource",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pObjectName",
        "description": "A pointer to the name of the object that uses the ACL to be checked."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "The type of object indicated by pObjectName. The possible values are SE_FILE_OBJECT, SE_REGISTRY_KEY, SE_DS_OBJECT, and SE_DS_OBJECT_ALL."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "The type of ACL used with the object. The possible values are DACL_SECURITY_INFORMATION or SACL_SECURITY_INFORMATION."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "Container",
        "description": "TRUE if the object is a container object or FALSE if the object is a leaf object. Note that the only leaf object is SE_FILE_OBJECT."
      },
      {
        "in_out": "_In_opt_",
        "type": "GUID**",
        "name": "pObjectClassGuids",
        "description": "Optional list of GUIDs that identify the object types or names associated with pObjectName. This may be NULL if the object manager only supports one object class or has no GUID associated with the object class."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "GuidCount",
        "description": "Number of GUIDs pointed to by pObjectClassGuids."
      },
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pAcl",
        "description": "The ACL for the object."
      },
      {
        "in_out": "_In_opt_",
        "type": "PFN_OBJECT_MGR_FUNCTS",
        "name": "pfnArray",
        "description": "Reserved. Set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "pGenericMapping",
        "description": "The mapping of generic rights to specific rights for the object."
      },
      {
        "in_out": "_Out_",
        "type": "PINHERITED_FROM",
        "name": "pInheritArray",
        "description": "A pointer to an array of INHERITED_FROM structures that the GetInheritanceSource function fills with the inheritance information. The caller must allocate enough memory for an entry for each ACE in the ACL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The FreeSid function frees a security identifier (SID) previously allocated by using the  AllocateAndInitializeSid function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns NULL. If the function fails, it returns a pointer to the SID structure represented by the pSid parameter. For an example that uses this function, see Creating a Security Descriptor for a New Object. ",
    "remarks": "",
    "return_type": "PVOID",
    "category": "Authorization",
    "name": "FreeSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure to free."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetAce function obtains a pointer to an access control entry (ACE) in an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. For an example that uses this function, see Starting an Interactive Client Process. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetAce",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL that contains the ACE to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAceIndex",
        "description": "The index of the ACE to be retrieved. A value of zero corresponds to the first ACE in the ACL, a value of one to the second ACE, and so on."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "pAce",
        "description": "A pointer to a pointer that the function sets to the address of the ACE."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetAclInformation function retrieves information about an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. For an example that uses this function, see Starting an Interactive Client Process. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetAclInformation",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. The function retrieves information about this ACL. If a null value is passed, the function causes an access violation."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "pAclInformation",
        "description": "A pointer to a buffer to receive the requested information. The structure that is placed into the buffer depends on the information class requested in the dwAclInformationClass parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nAclInformationLength",
        "description": "The size, in bytes, of the buffer pointed to by the pAclInformation parameter."
      },
      {
        "in_out": "_In_",
        "type": "ACL_INFORMATION_CLASS",
        "name": "dwAclInformationClass",
        "description": "A value of the  ACL_INFORMATION_CLASS enumeration that indicates the class of information requested. This parameter can be one of two values from this enumeration:  If the value is AclRevisionInformation, the function fills the buffer pointed to by the pAclInformation parameter with an  ACL_REVISION_INFORMATION structure. If the value is AclSizeInformation, the function fills the buffer pointed to by the pAclInformation parameter with an  ACL_SIZE_INFORMATION structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetAppContainerNamedObjectPath function retrieves the named object path for the app container. Each app container has its own named object path.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Securityappcontainer.h",
    "return_value": "If the function succeeds, the function returns a value of TRUE. If the function fails, it returns a value of FALSE. To get extended error information, call GetLastError. ",
    "remarks": "For assistive technology tools that work across Windows Store apps and desktop applications and have features that get loaded in the context of Windows Store apps, at times it may be necessary for the in-context feature to synchronize with the tool. Typically such synchronization is accomplished by establishing a named object in the user's session. Windows Store apps pose a challenge for this mechanism because, by default, named objects in the user's or global session are not accessible to Windows Store apps. We recommend that you update assistive technology tools to use UI Automation APIs or Magnification APIs to avoid such pitfalls. In the interim, it may be necessary to continue using named objects. The following sample established a named object so that it is accessible from a Windows Store app. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetAppContainerNamedObjectPath",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle pertaining to the token. If NULL is passed in and no AppContainerSid parameter is passed in, the caller's current process token is used, or the thread token if impersonating."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "AppContainerSid",
        "description": "The SID of the app container."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ObjectPathLength",
        "description": "The length of the buffer."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR",
        "name": "ObjectPath",
        "description": "Buffer that is filled with the named object path."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "ReturnLength",
        "description": "Returns the length required to accommodate the length of the named object path."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetAuditedPermissionsFromAcl function retrieves the audited access rights for a specified trustee. The audited rights are based on the access control entries (ACEs) of a specified access control list (ACL). The audited access rights indicate the types of access attempts that cause the system to generate an audit record in the system event log. The audited rights include those that the  ACL specifies for the trustee or for any groups of which the trustee is a member. In determining the audited rights, the function does not consider the security privileges held by the trustee.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "The GetAuditedPermissionsFromAcl function checks all system-audit ACEs in the ACL to determine the audited rights for the trustee. For all ACEs that specify audited rights for a group, GetAuditedPermissionsFromAcl enumerates the members of the group to determine whether the trustee is a member. The function returns an error if it cannot enumerate the members of a group. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetAuditedPermissionsFromAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pacl",
        "description": "A pointer to an  ACL structure from which to get the trustee's audited access rights."
      },
      {
        "in_out": "_In_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a security identifier (SID) to identify a trustee. For information about SID structures, see SID."
      },
      {
        "in_out": "_Out_",
        "type": "PACCESS_MASK",
        "name": "pSuccessfulAuditedRights",
        "description": "A pointer to an  ACCESS_MASK structure that receives the successful audit mask for rights audited for the trustee specified by the pTrustee parameter. The system generates an audit record when the trustee successfully uses any of these access rights."
      },
      {
        "in_out": "_Out_",
        "type": "PACCESS_MASK",
        "name": "pFailedAuditRights",
        "description": "A pointer to an ACCESS_MASK structure that receives the failed audit mask for rights audited for the trustee specified by the pTrustee parameter. The system generates an audit record when the trustee fails in an attempt to use any of these rights."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.",
    "library": "",
    "min_server": "",
    "header": "Processthreadsapi.h",
    "return_value": "A pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process. ",
    "remarks": "A pseudo-handle is a special constant that can function as the access token for the current process.  The calling process can use a pseudo-handle to specify the access token for that process whenever a token handle is required.  Child processes do not inherit pseudo-handles. Starting in Windows 8, this pseudo-handle has only TOKEN_QUERY and TOKEN_QUERY_SOURCE access rights. A process can create a standard handle that is valid in the context of other processes and can be inherited by other processes. To create this standard handle, call the DuplicateHandle function and specify the pseudo-handle as the source handle. You do not need to close the pseudo-handle when you no longer need it. If you call the CloseHandle function with a pseudo-handle, the function has no effect. If you call DuplicateHandle to duplicate the pseudo-handle, however, you must close the duplicate handle . ",
    "return_type": "FORCEINLINE HANDLE",
    "category": "Authorization",
    "name": "GetCurrentProcessToken",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": ""
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.",
    "library": "",
    "min_server": "",
    "header": "Processthreadsapi.h",
    "return_value": "A pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread. ",
    "remarks": "A pseudo-handle is a special constant that can function as the effective token for the current thread.  The calling thread can use a pseudo-handle to specify the effective token for that thread whenever a token handle is required.  Child processes do not inherit pseudo-handles. Starting in Windows 8, this pseudo-handle has only TOKEN_QUERY and TOKEN_QUERY_SOURCE access rights. A thread can create a standard handle that is valid in the context of other processes and can be inherited by other processes. To create this standard handle, call the DuplicateHandle function and specify the pseudo-handle as the source handle. You do not need to close the pseudo-handle when you no longer need it. If you call the CloseHandle function with a pseudo-handle, the function has no effect. If you call DuplicateHandle to duplicate the pseudo-handle, however, you must close the duplicate handle . ",
    "return_type": "FORCEINLINE HANDLE",
    "category": "Authorization",
    "name": "GetCurrentThreadEffectiveToken",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": ""
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.",
    "library": "",
    "min_server": "",
    "header": "Processthreadsapi.h",
    "return_value": "A pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread. ",
    "remarks": "A pseudo-handle is a special constant that can function as the impersonation token for the current thread.  The calling thread can use a pseudo-handle to specify the impersonation token for that thread whenever a token handle is required.  Child processes do not inherit pseudo-handles. Starting in Windows 8, this pseudo-handle has only TOKEN_QUERY and TOKEN_QUERY_SOURCE access rights. A thread can create a standard handle that is valid in the context of other processes and can be inherited by other processes. To create this standard handle, call the DuplicateHandle function and specify the pseudo-handle as the source handle. You do not need to close the pseudo-handle when you no longer need it. If you call the CloseHandle function with a pseudo-handle, the function has no effect. If you call DuplicateHandle to duplicate the pseudo-handle, however, you must close the duplicate handle . ",
    "return_type": "FORCEINLINE HANDLE",
    "category": "Authorization",
    "name": "GetCurrentThreadToken",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "[GetEffectiveRightsFromAcl is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use the method demonstrated in the example below.]",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "The GetEffectiveRightsFromAcl function checks all access-allowed and access-denied access control entries (ACEs) in the access control list (ACL) to determine the effective rights for the trustee. For all ACEs that allow or deny rights to a group, GetEffectiveRightsFromAcl enumerates the members of the group to determine whether the trustee is a member. The function returns an error if it cannot enumerate the members of a group. A trustee's group rights are enumerated by GetEffectiveRightsFromAcl on the local computer, even if the trustee is accessing objects on a remote computer. This function does not evaluate group rights on remote computers. The GetEffectiveRightsFromAcl  function does not consider  the following: The GetEffectiveRightsFromAcl function fails and returns ERROR_INVALID_ACL if the specified ACL contains an inherited access-denied ACE. The following example shows using Authz API to get effective access rights from an ACL. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetEffectiveRightsFromAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pacl",
        "description": "A pointer to an  ACL structure from which to get the trustee's effective access rights."
      },
      {
        "in_out": "_In_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure that identifies the trustee. A trustee can be a user, group, or program (such as a Windows service). You can use a name or a security identifier (SID) to identify a trustee."
      },
      {
        "in_out": "_Out_",
        "type": "PACCESS_MASK",
        "name": "pAccessRights",
        "description": "A pointer to an  ACCESS_MASK variable that receives the effective access rights of the trustee."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetExplicitEntriesFromAcl function retrieves an array of structures that describe the access control entries (ACEs) in an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "Each entry in the array of  EXPLICIT_ACCESS structures describes access control information from an  ACE for a trustee. A trustee can be a user, group, or program (such as a Windows service). Each EXPLICIT_ACCESS structure specifies a set of access rights and an access mode flag that indicates whether the ACE allows, denies, or audits the specified rights. For a discretionary access control list (DACL), the access mode flag can be  either GRANT_ACCESS or DENY_ACCESS. For information about these values, see ACCESS_MODE. For a system access control list (SACL), the access mode flag can be SET_AUDIT_ACCESS, SET_AUDIT_FAILURE, or both. For information about these values, see ACCESS_MODE. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetExplicitEntriesFromAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pacl",
        "description": "A pointer to an  ACL structure from which to get  ACE information."
      },
      {
        "in_out": "_Out_",
        "type": "PULONG",
        "name": "pcCountOfExplicitEntries",
        "description": "A pointer to a variable that receives the number of EXPLICIT_ACCESS structures returned in the pListOfExplicitEntries array."
      },
      {
        "in_out": "_Out_",
        "type": "PEXPLICIT_ACCESS*",
        "name": "pListOfExplicitEntries",
        "description": "A pointer to a variable that receives a pointer to an array of EXPLICIT_ACCESS structures that describe the ACEs in the ACL. If the function succeeds, you must call the  LocalFree function to free the returned buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetFileSecurity function obtains specified information about the security of a file or directory. The information obtained is constrained by the caller's access rights and privileges.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "To read the owner, group, or DACL from the security descriptor for the specified file or directory, the DACL for the file or directory must grant READ_CONTROL access to the caller, or the caller must be the owner of the file or directory. To read the SACL of a file or directory, the SE_SECURITY_NAME privilege must be enabled for the calling process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetFileSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFileName",
        "description": "A pointer to a null-terminated string that specifies the file or directory for which security information is retrieved."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "RequestedInformation",
        "description": "A  SECURITY_INFORMATION value that identifies the security information being requested."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a buffer that receives a copy of the security descriptor of the object specified by the lpFileName parameter. The calling process must have permission to view the specified aspects of the object's security status. The  SECURITY_DESCRIPTOR structure is returned in self-relative security descriptor format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the pSecurityDescriptor parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpnLengthNeeded",
        "description": "A pointer to the variable that receives the number of bytes necessary to store the complete security descriptor. If the returned number of bytes is less than or equal to nLength, the entire security descriptor is returned in the output buffer; otherwise, none of the descriptor is returned."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetKernelObjectSecurity function retrieves a copy of the security descriptor that protects a kernel object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "To read the owner, group, or DACL from the kernel object's security descriptor, the calling process must have been granted READ_CONTROL access when the handle was opened. To get READ_CONTROL access, the caller must be the owner of the object or the object's DACL must grant the access. To read the SACL from the security descriptor, the calling process must have been granted ACCESS_SYSTEM_SECURITY access when the handle was opened. The proper way to get this access is to enable the SE_SECURITY_NAME privilege in the caller's current token, open the handle for ACCESS_SYSTEM_SECURITY access, and then disable the privilege. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetKernelObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "Handle",
        "description": "A handle to a kernel object."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "RequestedInformation",
        "description": "Specifies a  SECURITY_INFORMATION value that identifies the security information being requested."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a buffer the function fills with a copy of the security descriptor of the specified object. The calling process must have the right to view the specified aspects of the object's security status. The  SECURITY_DESCRIPTOR structure is returned in self-relative format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the pSecurityDescriptor parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpnLengthNeeded",
        "description": "A pointer to a variable that receives the number of bytes required for the buffer pointed to by the pSecurityDescriptor parameter. If this variable's value is greater than the value of the nLength parameter when the function returns, none of the security descriptor is copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetLengthSid function returns the length, in bytes, of a valid security identifier (SID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the SID structure is valid, the return value is the length, in bytes, of the SID structure. If the SID structure is not valid, the return value is undefined. Before calling GetLengthSid, pass the SID to the  IsValidSid function to verify that the SID is valid. For an example that uses this function, see Getting the Logon SID. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetLengthSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure whose length is returned. The structure is assumed to be valid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in WinError.h. ",
    "remarks": "If any of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters are non-NULL, and the SecurityInfo parameter specifies that they be retrieved from the object, those parameters will point to the corresponding parameters in the security descriptor returned in ppSecurityDescriptor. If the security descriptor does not contain the requested information, the corresponding parameter will be set to  NULL. To read the owner, group, or DACL from the object's security descriptor, the object's DACL must grant READ_CONTROL access to the caller, or the caller must be the owner of the object. To read the system access control list of the object, the SE_SECURITY_NAME privilege must be enabled for the calling process. For information about the security implications of  enabling privileges, see Running with Special Privileges. You can use the GetNamedSecurityInfo function with the following types of objects: This function does not handle race conditions. If your thread calls this function at the approximate time that another thread changes the object's security descriptor, then this function could fail. This function transfers information in plaintext. The information transferred by this function is signed unless signing has been turned off for the system, but no encryption is performed. For more information about controlling access to objects through user accounts, group  accounts, or logon sessions,  see How DACLs Control Access to an Object. For an example that uses GetNamedSecurityInfo, see Modifying the ACLs of an Object. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetNamedSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pObjectName",
        "description": "A pointer to a null-terminated string that specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see  SE_OBJECT_TYPE."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "Specifies a value from the SE_OBJECT_TYPE enumeration that indicates the type of object named by the pObjectName parameter."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID*",
        "name": "ppsidOwner",
        "description": "A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID*",
        "name": "ppsidGroup",
        "description": "A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if  the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL*",
        "name": "ppDacl",
        "description": "A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL*",
        "name": "ppSacl",
        "description": "A pointer to a variable that receives a pointer to the SACL in the returned security descriptor  or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ppSecurityDescriptor",
        "description": "A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer,  free the returned buffer by calling the  LocalFree function. This parameter is required if any one of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters is not NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetPrivateObjectSecurity function retrieves information from a private object's security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "This function is intended for use by resource managers only. To implement the standard access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling GetPrivateObjectSecurity: If the preceding conditions are not met, a call to this function does not fail, however, standard access policy is not enforced. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetPrivateObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ObjectDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure. This is the security descriptor to be queried."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A set of bit flags that indicate the parts of the security descriptor to retrieve. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ResultantDescriptor",
        "description": "A pointer to a buffer that receives a copy of the requested information from the specified security descriptor. The  SECURITY_DESCRIPTOR structure is returned in self-relative format."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DescriptorLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the ResultantDescriptor parameter."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "ReturnLength",
        "description": "A pointer to a variable the function sets to zero if the descriptor is copied successfully. If the buffer is too small for the security descriptor, this variable receives the number of bytes required. If this variable's value is greater than the value of the DescriptorLength parameter when the function returns, the function returns FALSE and none of the security descriptor is copied to the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetSecurityDescriptorControl function retrieves a security descriptor control and revision information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetSecurityDescriptorControl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure whose control and revision information the function retrieves."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR_CONTROL",
        "name": "pControl",
        "description": "A pointer to a  SECURITY_DESCRIPTOR_CONTROL structure that receives the security descriptor's control information."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwRevision",
        "description": "A pointer to a variable that receives the security descriptor's revision value. This value is always set, even when GetSecurityDescriptorControl returns an error."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. For an example that uses this function, see Starting an Interactive Client Process. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetSecurityDescriptorDacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure that contains the DACL. The function retrieves a pointer to it."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbDaclPresent",
        "description": "A pointer to a value that indicates the presence of a DACL in the specified security descriptor. If lpbDaclPresent is TRUE, the security descriptor contains a DACL, and the remaining output parameters in this function receive valid values. If lpbDaclPresent is FALSE, the security descriptor does not contain a DACL, and the remaining output parameters do not receive valid values. A value of TRUE for lpbDaclPresent does not mean that pDacl is not NULL.  That is, lpbDaclPresent can be TRUE while pDacl is NULL, meaning that a NULL DACL is in effect.   A NULL DACL implicitly allows all access to an object and is not the same as an empty DACL. An empty DACL permits no access to an object.  For information about creating a proper DACL, see Creating a DACL."
      },
      {
        "in_out": "_Out_",
        "type": "PACL*",
        "name": "pDacl",
        "description": "A pointer to a pointer to an  access control list (ACL). If a DACL exists, the function sets the pointer pointed to by pDacl to the address of the security descriptor's DACL. If a DACL does not exist, no value is stored.     If the function stores a NULL value in the pointer pointed to by pDacl, the security descriptor has a NULL DACL. A NULL DACL implicitly allows all access to an object. If an application expects a non-NULL DACL but encounters a NULL DACL, the application should fail securely and not allow access."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbDaclDefaulted",
        "description": "A pointer to a flag set to the value of the SE_DACL_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure if a DACL exists for the security descriptor. If this flag is TRUE, the DACL was retrieved by a default mechanism; if FALSE, the DACL was explicitly specified by a user."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetSecurityDescriptorGroup",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure whose primary group information the function retrieves."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "pGroup",
        "description": "A pointer to a pointer to a  security identifier (SID) that identifies the primary group when the function returns. If the security descriptor does not contain a primary group, the function sets the pointer pointed to by pGroup to NULL and ignores the remaining output parameter, lpbGroupDefaulted. If the security descriptor contains a primary group, the function sets the pointer pointed to by pGroup to the address of the security descriptor's group SID and provides a valid value for the variable pointed to by lpbGroupDefaulted."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbGroupDefaulted",
        "description": "A pointer to a flag that is set to the value of the SE_GROUP_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure when the function returns. If the value stored in the variable pointed to by the pGroup parameter is NULL, no value is set."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetSecurityDescriptorLength function returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns the length, in bytes, of the SECURITY_DESCRIPTOR structure. If the SECURITY_DESCRIPTOR structure is not valid, the return value is undefined. ",
    "remarks": "The minimum length of a security descriptor is SECURITY_DESCRIPTOR_MIN_LENGTH. A security descriptor of this length has no associated  security identifiers (SIDs) or  access control lists (ACLs). ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetSecurityDescriptorLength",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure whose length the function returns. The pointer is assumed to be valid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetSecurityDescriptorOwner",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure whose owner information the function retrieves."
      },
      {
        "in_out": "_Out_",
        "type": "PSID*",
        "name": "pOwner",
        "description": "A pointer to a pointer to a  security identifier (SID) that identifies the owner when the function returns. If the security descriptor does not contain an owner, the function sets the pointer pointed to by pOwner to NULL and ignores the remaining output parameter, lpbOwnerDefaulted. If the security descriptor contains an owner, the function sets the pointer pointed to by pOwner to the address of the security descriptor's owner SID and provides a valid value for the variable pointed to by lpbOwnerDefaulted."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbOwnerDefaulted",
        "description": "A pointer to a flag that is set to the value of the SE_OWNER_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure when the function returns. If the value stored in the variable pointed to by the pOwner parameter is NULL, no value is set."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The GetSecurityDescriptorRMControl function retrieves the resource manager control bits.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the following value is returned.  ",
    "remarks": "The resource manager control bits are eight bits in the Sbz1 member of the SECURITY_DESCRIPTOR structure that contains information specific to the resource manager accessing the structure. These bits should be accessed only through the GetSecurityDescriptorRMControl and  SetSecurityDescriptorRMControl functions. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetSecurityDescriptorRMControl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "SecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure that contains the resource manager control bits. The value of the Control member is set to SE_RM_CONTROL_VALID."
      },
      {
        "in_out": "_Out_",
        "type": "PUCHAR",
        "name": "RMControl",
        "description": "A pointer to a buffer that receives the resource manager control bits."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The GetSecurityDescriptorSacl function retrieves a pointer to the system access control list (SACL) in a specified security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetSecurityDescriptorSacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure that contains the SACL to which the function retrieves a pointer."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbSaclPresent",
        "description": "A pointer to a flag the function sets to indicate the presence of a SACL in the specified security descriptor. If this parameter is TRUE, the security descriptor contains a SACL, and the remaining output parameters in this function receive valid values. If this parameter is FALSE, the security descriptor does not contain a SACL, and the remaining output parameters do not receive valid values."
      },
      {
        "in_out": "_Out_",
        "type": "PACL*",
        "name": "pSacl",
        "description": "A pointer to a pointer to an  access control list (ACL). If a SACL exists, the function sets the pointer pointed to by pSacl to the address of the security descriptor's SACL. If a SACL does not exist, no value is stored.     If the function stores a NULL value in the pointer pointed to by pSacl, the security descriptor has a NULL SACL."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "lpbSaclDefaulted",
        "description": "A pointer to a flag that is set to the value of the SE_SACL_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure if a SACL exists for the security descriptor."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is a nonzero error code defined in WinError.h. ",
    "remarks": "If the ppsidOwner, ppsidGroup, ppDacl, and ppSacl parameters are non-NULL, and the SecurityInfo parameter specifies that they be retrieved from the object, those parameters will point to the corresponding parameters in the security descriptor returned in ppSecurityDescriptor. To read the owner, group, or DACL from the object's security descriptor, the calling process must have been granted READ_CONTROL access when the handle was opened. To get READ_CONTROL access, the caller must be the owner of the object or the object's DACL must grant the access. To read the SACL from the security descriptor, the calling process must have been granted ACCESS_SYSTEM_SECURITY access when the handle was opened. The proper way to get this access is to enable the SE_SECURITY_NAME privilege in the caller's current token, open the handle for ACCESS_SYSTEM_SECURITY access, and then disable the privilege. For information about the security implications of enabling  privileges, see Running with Special Privileges. You can use the GetSecurityInfo function with the following types of objects: This function does not handle race conditions. If your thread calls this function at the approximate time that another thread changes the object's security descriptor, then this function could fail. For an example that uses this function, see       Finding the Owner of a File Object. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "handle",
        "description": "A handle to the object from which to retrieve security information."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "SE_OBJECT_TYPE enumeration value that indicates the type of object."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID*",
        "name": "ppsidOwner",
        "description": "A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the owner SID."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID*",
        "name": "ppsidGroup",
        "description": "A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the group SID."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL*",
        "name": "ppDacl",
        "description": "A pointer to a variable that receives a pointer to the DACL in the returned security descriptor. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the DACL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL*",
        "name": "ppSacl",
        "description": "A pointer to a variable that receives a pointer to the SACL in the returned security descriptor. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. This parameter can be NULL if you do not need the SACL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ppSecurityDescriptor",
        "description": "A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer,  free the returned buffer by calling the  LocalFree function. This parameter is required if any one of the ppsidOwner, ppsidGroup, ppDacl, or ppSacl parameters is not NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetSidIdentifierAuthority function returns a pointer to the  SID_IDENTIFIER_AUTHORITY structure in a specified security identifier (SID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a pointer to the SID_IDENTIFIER_AUTHORITY structure for the specified  SID structure. If the function fails, the return value is undefined. The function fails if the SID structure pointed to by the pSid parameter is not valid. To get extended error information, call  GetLastError. ",
    "remarks": "This function uses a 32-bit RID value. For applications that require a larger RID value, use  CreateWellKnownSid and related functions. ",
    "return_type": "PSID_IDENTIFIER_AUTHORITY",
    "category": "Authorization",
    "name": "GetSidIdentifierAuthority",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure for which a pointer to the  SID_IDENTIFIER_AUTHORITY structure is returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetSidLengthRequired function returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "The return value is the length, in bytes, of the buffer required to store the SID structure. This function cannot fail. ",
    "remarks": "The SID structure specified in nSubAuthorityCount uses a 32-bit RID value. For applications that require longer RID values, use  CreateWellKnownSid and related functions. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "GetSidLengthRequired",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UCHAR",
        "name": "nSubAuthorityCount",
        "description": "Specifies the number of subauthorities to be stored in the  SID structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The GetSidSubAuthority function returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative identifier (RID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a pointer to the specified SID subauthority. To get extended error information, call  GetLastError. If the function fails, the return value is undefined. The function fails if the specified SID structure is not valid or if the index value specified by the nSubAuthority parameter is out of bounds. ",
    "remarks": "The SID structure specified in pSid uses a 32-bit RID value. For applications that require longer RID values, use  CreateWellKnownSid and related functions. ",
    "return_type": "PDWORD",
    "category": "Authorization",
    "name": "GetSidSubAuthority",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure from which a pointer to a subauthority is to be returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSubAuthority",
        "description": "Specifies an index value identifying the subauthority array element whose address the function will return. The function performs no validation tests on this value. An application can call the GetSidSubAuthorityCount function to discover the range of acceptable values."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetSidSubAuthorityCount function returns a pointer to the member in a security identifier (SID) structure that contains the subauthority count.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a pointer to the subauthority count for the specified SID structure. If the function fails, the return value is undefined. The function fails if the specified SID structure is not valid. To get extended error information, call  GetLastError. ",
    "remarks": "The SID structure specified in pSid uses a 32-bit value. For applications that require longer RID values, use  CreateWellKnownSid and related functions. ",
    "return_type": "PUCHAR",
    "category": "Authorization",
    "name": "GetSidSubAuthorityCount",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure from which a pointer to the subauthority count is returned. This function does not handle SID structures that are not valid. Call the IsValidSid function to verify that the SID structure is valid before you call this function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetTokenInformation function retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. For an example that uses this function, see Getting the Logon SID or Searching for a SID in an Access Token. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetTokenInformation",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token from which information is retrieved. If TokenInformationClass specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values, the handle must have TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "TOKEN_INFORMATION_CLASS",
        "name": "TokenInformationClass",
        "description": "Specifies a value from the  TOKEN_INFORMATION_CLASS enumerated type to identify the type of information the function retrieves. Any callers who check the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an app container but is an identity level token, you should return AccessDenied."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPVOID",
        "name": "TokenInformation",
        "description": "A pointer to a buffer the function fills with the requested information. The structure put into this buffer depends upon the type of information specified by the TokenInformationClass parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "TokenInformationLength",
        "description": "Specifies the size, in bytes, of the buffer pointed to by the TokenInformation parameter. If TokenInformation is NULL, this parameter must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "ReturnLength",
        "description": "A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation parameter. If this value is larger than the value specified in the TokenInformationLength parameter, the function fails and stores no data in the buffer. If the value of the TokenInformationClass parameter is TokenDefaultDacl and the token has no default DACL, the function sets the variable pointed to by ReturnLength to sizeof(TOKEN_DEFAULT_DACL) and sets the DefaultDacl member of the TOKEN_DEFAULT_DACL structure to NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetTrusteeForm function retrieves the trustee name from the specified TRUSTEE structure. This value indicates whether the structure uses a name string or a security identifier (SID) to identify the trustee.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "The return value is one of the constants from the  TRUSTEE_FORM enumeration. ",
    "remarks": "",
    "return_type": "TRUSTEE_FORM",
    "category": "Authorization",
    "name": "GetTrusteeForm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetTrusteeName function retrieves the trustee name from the specified TRUSTEE structure.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the TrusteeForm member of the TRUSTEE structure is TRUSTEE_IS_NAME, the return value is the pointer assigned to the ptstrName member of the structure. If the TrusteeForm member is TRUSTEE_IS_SID, the return value is NULL. The function does not look up the name associated with a security identifier (SID). ",
    "remarks": "The GetTrusteeName function does not allocate any memory. ",
    "return_type": "LPTSTR",
    "category": "Authorization",
    "name": "GetTrusteeName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The GetTrusteeType function retrieves the trustee type from the specified TRUSTEE structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "The return value is one of the constants from the TRUSTEE_TYPE enumeration. ",
    "remarks": "",
    "return_type": "TRUSTEE_TYPE",
    "category": "Authorization",
    "name": "GetTrusteeType",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PTRUSTEE",
        "name": "pTrustee",
        "description": "A pointer to a  TRUSTEE structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The GetUserObjectSecurity function retrieves security information for the specified user object.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "To read the owner, group, or discretionary access control list (DACL) from the user object's security descriptor, the calling process must have been granted READ_CONTROL access when the handle was opened. To read the system access control list (SACL) from the security descriptor, the calling process must have been granted ACCESS_SYSTEM_SECURITY access when the handle was opened. The correct way to get this access is to enable the SE_SECURITY_NAME privilege in the caller's current token, open the handle for ACCESS_SYSTEM_SECURITY access, and then disable the privilege. For an example that uses this function, see Starting an Interactive Client Process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetUserObjectSecurity",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hObj",
        "description": "A handle to the user object for which to return security information."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_INFORMATION",
        "name": "pSIRequested",
        "description": "A pointer to a  SECURITY_INFORMATION value that specifies the security information being requested."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSD",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure in self-relative format that contains the requested information when the function returns. This buffer must be aligned on a 4-byte boundary."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nLength",
        "description": "The length, in bytes, of the buffer pointed to by the pSD parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpnLengthNeeded",
        "description": "A pointer to a variable to receive the number of bytes required to store the complete security descriptor. If this variable's value is greater than the value of the nLength parameter when the function returns, the function returns FALSE and none of the security descriptor is copied to the buffer. Otherwise, the entire security descriptor is copied."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The GetWindowsAccountDomainSid function receives a security identifier (SID) and returns a SID representing the domain of that SID.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Returns TRUE if successful. Otherwise, returns FALSE. For extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "GetWindowsAccountDomainSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the SID to examine."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID",
        "name": "ppDomainSid",
        "description": "Pointer that GetWindowsAccountDomainSid fills with a pointer to a SID representing the domain."
      },
      {
        "in_out": "_Inout_",
        "type": "DWORD*",
        "name": "cbSid",
        "description": "A pointer to a DWORD that GetWindowsAccountDomainSid fills with the size of the domain SID, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The ImpersonateAnonymousToken function enables the specified thread to impersonate the system's anonymous logon token. To ensure that a token matches the operating system's concept of anonymous access, this function should be called before attempting network access to generate an anonymous token on the remote server.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. An error of ACCESS_DENIED may indicate that the token is for a restricted process. Use OpenProcessToken and IsTokenRestricted to check if the process is restricted. ",
    "remarks": "Anonymous tokens do not include the Everyone Group SID unless the system default has been overridden by setting the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\EveryoneIncludesAnonymous registry value to DWORD=1. To cancel the impersonation call  RevertToSelf. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ImpersonateAnonymousToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ThreadHandle",
        "description": "A handle to the thread to impersonate the system's anonymous logon token."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The ImpersonateLoggedOnUser function lets the calling thread impersonate the security context of a logged-on user. The user is represented by a token handle.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The impersonation lasts until the thread exits or until it calls  RevertToSelf. The calling thread does not need to have any particular privileges to call ImpersonateLoggedOnUser. If the call to ImpersonateLoggedOnUser fails, the client connection is not impersonated and the client request is made in the security context of the process. If the process is running as a highly privileged account, such as LocalSystem, or as a member of an administrative group, the user may be able to perform actions they would otherwise be disallowed. Therefore, it is important to always check the return value of the call, and if it fails, raise an error; do not continue execution of the client request. All impersonate functions, including ImpersonateLoggedOnUser allow the requested impersonation if one of the following is true: Windows XP with SP1 and earlier:  The SeImpersonatePrivilege privilege is not supported. For more information about impersonation, see  Client Impersonation. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ImpersonateLoggedOnUser",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hToken",
        "description": "A handle to a primary or impersonation access token that represents a logged-on user. This can be a token handle returned by a call to  LogonUser,  CreateRestrictedToken,  DuplicateToken,  DuplicateTokenEx,  OpenProcessToken, or  OpenThreadToken functions. If hToken is a handle to a primary token, the token must have TOKEN_QUERY and TOKEN_DUPLICATE access. If hToken is a handle to an impersonation token, the token must have TOKEN_QUERY and TOKEN_IMPERSONATE access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The ImpersonateSelf function obtains an access token that impersonates the security context of the calling process. The token is assigned to the calling thread.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ImpersonateSelf function is used for tasks such as enabling a privilege for a single thread rather than for the entire process or for changing the default discretionary access control list (DACL) for a single thread. The server can call the  RevertToSelf function when the impersonation is complete. For this function to succeed, the DACL protecting the process token must grant the TOKEN_DUPLICATE right to itself. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ImpersonateSelf",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_IMPERSONATION_LEVEL",
        "name": "ImpersonationLevel",
        "description": "Specifies a  SECURITY_IMPERSONATION_LEVEL enumerated type that supplies the impersonation level of the new token."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The InitializeAcl function initializes a new ACL structure.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The InitializeAcl function creates an empty ACL structure; the ACL contains no ACEs. Applying an empty ACL to an object denies all access to that object. The initial size of the ACL depends on the number of ACEs you plan to add to the ACL before you use it. For example, if the ACL is to contain an ACE for a user and group, you would initialize the ACL based on two ACEs. For details about modifying an existing ACL, see Modifying the ACLs of an Object. To calculate the initial size of an ACL, add the following together, and then align the result to the nearest DWORD: The following example calls the InitializeAcl function. The size of the  ACL is  based on three allow-access ACEs. As an option, you can use security descriptor definition language (SDDL) to create the ACL. For details, see Creating a DACL. The example also omits a step for simplification. For more information, see the Taking Object Ownership example. You must call the FreeSid function at the end of the example code due to calling the AllocateAndInitializeSid function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "InitializeAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL structure  to be initialized by this function. Allocate memory for pAcl before calling this function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nAclLength",
        "description": "The length, in bytes, of the buffer pointed to by the pAcl parameter. This value must be large enough to contain the ACL header and all of the access control entries (ACEs) to be stored in the ACL. In addition, this value must be DWORD-aligned. For more information about calculating the size of an ACL, see Remarks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAclRevision",
        "description": "The revision level of the ACL structure being created.    This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the access control list (ACL) supports object-specific ACEs."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The InitializeSecurityDescriptor function initializes a new security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The InitializeSecurityDescriptor function initializes a security descriptor in absolute format, rather than self-relative format. The InitializeSecurityDescriptor function initializes a security descriptor to have no system access control list (SACL), no discretionary access control list (DACL), no owner, no primary group, and all control flags set to FALSE (NULL). Thus, except for its revision level, it is empty. For an example that uses this function, see Creating a Security Descriptor for a New Object. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "InitializeSecurityDescriptor",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure that the function initializes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRevision",
        "description": "The revision level to assign to the security descriptor. This parameter must be SECURITY_DESCRIPTOR_REVISION."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The InitializeSid function initializes a security identifier (SID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Although the InitializeSid function sets the number of subauthorities for the SID, it does not set the subauthority values. This must be done separately, using functions such as GetSidSubAuthority. An application can use the AllocateAndInitializeSid function to initialize a SID and set its subauthority values. This function uses a 32-bit RID value. For applications that require a larger RID value, use  CreateWellKnownSid. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "InitializeSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PSID",
        "name": "Sid",
        "description": "A pointer to a  SID structure to be initialized."
      },
      {
        "in_out": "_In_",
        "type": "PSID_IDENTIFIER_AUTHORITY",
        "name": "pIdentifierAuthority",
        "description": "A pointer to a  SID_IDENTIFIER_AUTHORITY structure to set in the SID structure."
      },
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "nSubAuthorityCount",
        "description": "Specifies the number of subauthorities to set in the SID. Values of the subauthority must be set separately, as described in the following Remarks section."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The IsTokenRestricted function indicates whether a token contains a list of restricted security identifiers (SIDs).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the token contains a list of restricting SIDs, the return value is nonzero. If the token does not contain a list of restricting SIDs, the return value is zero. If an error occurs, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The  CreateRestrictedToken function can restrict a token by disabling SIDs, deleting privileges, and specifying a list of restricting SIDs. The IsTokenRestricted function checks only for the list of restricting SIDs. If a token does not have any restricting SIDs, IsTokenRestricted returns FALSE, even though the token was created by a call to CreateRestrictedToken. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "IsTokenRestricted",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to an access token to test."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The IsValidAcl function validates an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the ACL is valid, the function returns nonzero. If the ACL is not valid, the function returns zero. There is no extended error information for this function; do not call GetLastError. ",
    "remarks": "This function checks the revision level of the ACL and verifies that the number of access control entries (ACEs) specified in the AceCount member of the ACL structure fits the space specified by the AclSize member of the ACL structure. If pAcl is NULL, the application will fail with an access violation. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "IsValidAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an       ACL structure validated by this function. This value must not be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The IsValidSecurityDescriptor function determines whether the components of a security descriptor are valid.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the components of the security descriptor are valid, the return value is nonzero. If any of the components of the security descriptor are not valid, the return value is zero. There is no extended error information for this function; do not call  GetLastError. ",
    "remarks": "The IsValidSecurityDescriptor function checks the validity of the components that are present in the security descriptor. It does not verify whether certain components are present nor does it verify the contents of the individual ACE or ACL. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "IsValidSecurityDescriptor",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure that the function validates."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The IsValidSid function validates a security identifier (SID) by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the SID structure is valid, the return value is nonzero. If the SID structure is not valid, the return value is zero. There is no extended error information for this function; do not call GetLastError. ",
    "remarks": "If pSid is NULL, the application will fail with an access violation. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "IsValidSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the  SID structure to validate. This parameter cannot be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The IsWellKnownSid function compares a SID to a well-known SID and returns TRUE if they match.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "Returns TRUE if the SID at pSid matches the well-known SID indicated by WellKnownSidType. Otherwise, returns FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "IsWellKnownSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "pSid",
        "description": "A pointer to the SID to test."
      },
      {
        "in_out": "_In_",
        "type": "WELL_KNOWN_SID_TYPE",
        "name": "WellKnownSidType",
        "description": "Member of the  WELL_KNOWN_SID_TYPE enumeration to compare with the SID at pSid."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The LookupAccountName function accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the name of the domain on which the account was found.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. For extended error information, call  GetLastError. ",
    "remarks": "The LookupAccountName function attempts to find a SID for the specified name by first checking a list of well-known SIDs. If the name does not correspond to a well-known SID, the function checks built-in and administratively defined local accounts. Next, the function checks the primary domain. If the name is not found there, trusted domains are checked. Use fully qualified account names (for example, domain_name\\user_name) instead of isolated names (for example, user_name). Fully qualified names are unambiguous and provide better performance when the lookup is performed. This function also supports fully qualified DNS names (for example, example.example.com\\user_name) and user principal names (UPN) (for example, someone@example.com). In addition to looking up local accounts, local domain accounts, and explicitly trusted domain accounts, LookupAccountName can look up the name for any account in any domain in the forest. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupAccountName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpSystemName",
        "description": "A pointer to a null-terminated character string that specifies the name of the system. This string can be the name of a remote computer. If this string is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for  lpSystemName only when the  account is in an untrusted domain and the   name of a computer in that domain is known."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpAccountName",
        "description": "A pointer to a null-terminated string that specifies the account name. Use a fully qualified string in the domain_name\\user_name format to ensure that LookupAccountName finds the account in the desired domain."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID",
        "name": "Sid",
        "description": "A pointer to a buffer that receives the  SID structure that corresponds to the account name pointed to by the lpAccountName parameter. If this parameter is NULL, cbSid must be zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cbSid",
        "description": "A pointer to a variable. On input, this value specifies the size, in bytes, of the Sid buffer. If the function fails because the buffer is too small or if cbSid is zero, this variable receives the required buffer size."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "ReferencedDomainName",
        "description": "A pointer to a buffer that receives the name of the domain where the account name is found. For computers that are not joined to a domain, this buffer receives the computer name. If this parameter is NULL, the function returns the required buffer size."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchReferencedDomainName",
        "description": "A pointer to a variable. On input, this value specifies the size, in TCHARs, of the ReferencedDomainName buffer. If the function fails because the buffer is too small, this variable receives the required buffer size, including the terminating null character. If the ReferencedDomainName parameter is NULL, this parameter must be zero."
      },
      {
        "in_out": "_Out_",
        "type": "PSID_NAME_USE",
        "name": "peUse",
        "description": "A pointer to a  SID_NAME_USE enumerated type that indicates the type of the account when the function returns."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The LookupAccountSid function accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the first domain on which this SID is found.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The LookupAccountSid function attempts to find a name for the specified SID by first checking a list of well-known SIDs. If the supplied SID does not correspond to a well-known SID, the function checks built-in and administratively defined local accounts. Next, the function checks the primary domain. Security identifiers not recognized by the primary domain are checked against the trusted domains that correspond to their SID prefixes. If the function cannot find an account name for the SID, GetLastError returns ERROR_NONE_MAPPED. This can occur if a network time-out prevents the function from finding the name. It also occurs for SIDs that have no corresponding account name, such as a logon SID that identifies a logon session. In addition to looking up SIDs for local accounts, local domain accounts, and explicitly trusted domain accounts, LookupAccountSid can look up SIDs for any account in any domain in the forest, including SIDs that appear only in the SIDhistory field of an account in the forest. The SIDhistory field stores former SIDs of an account that has been moved from another domain. To look up a SID, LookupAccountSid queries the global catalog of the forest. For an example that uses this function, see Searching for a SID in an Access Token. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupAccountSid",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpSystemName",
        "description": "A pointer to a null-terminated character string that specifies the target computer. This string can be the name of a remote computer. If this parameter is NULL, the account name translation begins on the local system. If the name cannot be resolved on the local system, this function will try to resolve the name using domain controllers trusted by the local system. Generally, specify a value for  lpSystemName only when the  account is in an untrusted domain and the   name of a computer in that domain is known."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "lpSid",
        "description": "A pointer to the  SID to look up."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpName",
        "description": "A pointer to a buffer that receives a null-terminated string that contains the account name that corresponds to the lpSid parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchName",
        "description": "On input, specifies the size, in TCHARs, of the lpName buffer. If the function fails because the buffer is too small or if cchName is zero, cchName receives the required buffer size, including the terminating null character."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpReferencedDomainName",
        "description": "A pointer to a buffer that receives a null-terminated string that contains the name of the domain where the account name was found. On a server, the domain name returned for most accounts in the security database of the local computer is the name of the domain for which the server is a domain controller. \t\t\t\t\t\t On a workstation, the domain name returned for most accounts in the security database of the local computer is the name of the computer as of the last start of the system (backslashes are excluded). If the name of the computer changes, the old name continues to be returned as the domain name until the system is restarted. Some accounts are predefined by the system. The domain name returned for these accounts is BUILTIN."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchReferencedDomainName",
        "description": "On input, specifies the size, in TCHARs, of the lpReferencedDomainName buffer. If the function fails because the buffer is too small or if cchReferencedDomainName is zero, cchReferencedDomainName receives the required buffer size, including the terminating null character."
      },
      {
        "in_out": "_Out_",
        "type": "PSID_NAME_USE",
        "name": "peUse",
        "description": "A pointer to a variable that receives a  SID_NAME_USE value that indicates the type of the account."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Retrieves the name of the account for the specified SID on the local machine.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "This function is similar to LookupAccountSid, but restricts the search to the local machine. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupAccountSidLocal",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "lpSid",
        "description": "A pointer to the  SID to look up."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpName",
        "description": "A pointer to a buffer that receives a null-terminated string that contains the account name that corresponds to the lpSid parameter."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchName",
        "description": "On input, specifies the size, in TCHARs, of the lpName buffer. If the function fails because the buffer is too small or if cchName is zero, cchName receives the required buffer size, including the terminating null character."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpReferencedDomainName",
        "description": "A pointer to a buffer that receives a null-terminated string that contains the name of the domain where the account name was found. On a server, the domain name returned for most accounts in the security database of the local computer is the name of the domain for which the server is a domain controller. \t\t\t\t\t\t On a workstation, the domain name returned for most accounts in the security database of the local computer is the name of the computer as of the last start of the system (backslashes are excluded). If the name of the computer changes, the old name continues to be returned as the domain name until the system is restarted. Some accounts are predefined by the system. The domain name returned for these accounts is BUILTIN."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchReferencedDomainName",
        "description": "On input, specifies the size, in TCHARs, of the lpReferencedDomainName buffer. If the function fails because the buffer is too small or if cchReferencedDomainName is zero, cchReferencedDomainName receives the required buffer size, including the terminating null character."
      },
      {
        "in_out": "_Out_",
        "type": "PSID_NAME_USE",
        "name": "peUse",
        "description": "A pointer to a variable that receives a  SID_NAME_USE value that indicates the type of the account."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The LookupPrivilegeDisplayName function retrieves the display name that represents a specified privilege.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The LookupPrivilegeDisplayName function retrieves display names only for the privileges specified in the Defined Privileges section of Winnt.h. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupPrivilegeDisplayName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpSystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the system on which the  privilege name is retrieved. If a null string is specified, the function attempts to find the display name on the local system."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpName",
        "description": "A pointer to a null-terminated string that specifies the name of the privilege, as defined in Winnt.h. For example, this parameter could specify the constant, SE_REMOTE_SHUTDOWN_NAME, or its corresponding string, \"SeRemoteShutdownPrivilege\". For a list of values, see Privilege Constants."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpDisplayName",
        "description": "A pointer to a buffer that receives a null-terminated string that specifies the privilege display name. For example, if the lpName parameter is SE_REMOTE_SHUTDOWN_NAME, the privilege display name is \"Force shutdown from a remote system.\""
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchDisplayName",
        "description": "A pointer to a variable that specifies the size, in TCHARs, of the lpDisplayName buffer. When the function returns, this parameter contains the length of the privilege display name, not including the terminating null character. If the buffer pointed to by the lpDisplayName parameter is too small, this variable contains the required size."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpLanguageId",
        "description": "A pointer to a variable that receives the language identifier for the returned display name."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The LookupPrivilegeName function retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier (LUID).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The LookupPrivilegeName function supports only the privileges specified in the Defined Privileges section of Winnt.h. For a list of values, see Privilege Constants. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupPrivilegeName",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpSystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the privilege name on the local system."
      },
      {
        "in_out": "_In_",
        "type": "PLUID",
        "name": "lpLuid",
        "description": "A pointer to the LUID by which the privilege is known on the target system."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpName",
        "description": "A pointer to a buffer that receives a null-terminated string that represents the privilege name. For example, this string could be \"SeSecurityPrivilege\"."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "cchName",
        "description": "A pointer to a variable that specifies the size, in a TCHAR value, of the lpName buffer. When the function returns, this parameter contains the length of the privilege name, not including the terminating null character. If the buffer pointed to by the lpName parameter is too small, this variable contains the required size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The LookupPrivilegeValue function retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The LookupPrivilegeValue function supports only the privileges specified in the Defined Privileges section of Winnt.h. For a list of values, see Privilege Constants. For an example that uses this function, see Enabling and Disabling Privileges. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "LookupPrivilegeValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpSystemName",
        "description": "A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the privilege name on the local system."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpName",
        "description": "A pointer to a null-terminated string that specifies the name of the privilege, as defined in the Winnt.h header file. For example, this parameter could specify the constant, SE_SECURITY_NAME, or its corresponding string, \"SeSecurityPrivilege\"."
      },
      {
        "in_out": "_Out_",
        "type": "PLUID",
        "name": "lpLuid",
        "description": "A pointer to a variable that receives the LUID by which the privilege is known on the system specified by the lpSystemName parameter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The LookupSecurityDescriptorParts function retrieves security information from a self-relative security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "The LookupSecurityDescriptorParts function retrieves the names of the owner and primary group of the security descriptor. This function also returns descriptions of the ACEs in the DACL and audit-control entries in the SACL of the security descriptor. The parameters other than pSD can be NULL if you are not interested in the information. If you do not want information about the DACL, both pListOfAccessEntries and cCountOfAuditEntries must be NULL. If you do not want information about the SACL, both pListOfAuditEntries and cCountOfAuditEntries must be NULL. Similarly, if you do want DACL or SACL information, both of the corresponding parameters must not be NULL. When you have finished using any of the buffers returned by the pOwner, pGroup, pListOfAccessEntries, or pListOfAuditEntries parameters, free them by calling the LocalFree function. The LookupSecurityDescriptorParts function is intended for trusted servers that implement or expose security on their own objects. The function works with a self-relative security descriptor suitable for serializing into a stream and storing to disk, as a trusted server might require. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "LookupSecurityDescriptorParts",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Out_opt_",
        "type": "PTRUSTEE*",
        "name": "pOwner",
        "description": "A pointer to a variable that receives a pointer to a  TRUSTEE structure. The function looks up the name associated with the owner  security identifier (SID)  in the pSD security descriptor, and returns a pointer to the name in the ptstrName member of the TRUSTEE structure. The function sets the TrusteeForm member to TRUSTEE_IS_NAME.     This parameter can be NULL if you are not interested in the name of the owner."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PTRUSTEE*",
        "name": "pGroup",
        "description": "A pointer to a variable that receives a pointer to a TRUSTEE structure. The function looks up the name associated with the primary group SID of the security descriptor, and returns a pointer to the name in the ptstrName member of the TRUSTEE structure. The function sets the TrusteeForm member to TRUSTEE_IS_NAME.      This parameter can be NULL if you are not interested in the name of the group."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PULONG",
        "name": "cCountOfAccessEntries",
        "description": "A pointer to a ULONG that receives the number of  EXPLICIT_ACCESS structures returned in the pListOfAccessEntries array. This parameter can be NULL only if the pListOfAccessEntries parameter is also NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PEXPLICIT_ACCESS*",
        "name": "pListOfAccessEntries",
        "description": "A pointer to a variable that receives a pointer to an array of EXPLICIT_ACCESS structures that describe the access control entries (ACEs) in the discretionary access control list (DACL) of the security descriptor. The  TRUSTEE structure in these EXPLICIT_ACCESS structures use the TRUSTEE_IS_NAME form. For a description of how an array of EXPLICIT_ACCESS structures describes the ACEs in an  access control list (ACL), see the  GetExplicitEntriesFromAcl function. If this parameter is NULL, the cCountOfAccessEntries parameter must also be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PULONG",
        "name": "cCountOfAuditEntries",
        "description": "A pointer to a ULONG that receives the number of EXPLICIT_ACCESS structures returned in the pListOfAuditEntries array. This parameter can be NULL only if the pListOfAuditEntries parameter is also NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PEXPLICIT_ACCESS*",
        "name": "pListOfAuditEntries",
        "description": "A pointer to a variable that receives a pointer to an array of EXPLICIT_ACCESS structures that describe the ACEs in the system access control list (SACL) of the security descriptor. The TRUSTEE structure in these EXPLICIT_ACCESS structures uses the TRUSTEE_IS_NAME form. If this parameter is NULL, the cCountOfAuditEntries parameter must also be NULL."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSD",
        "description": "A pointer to an existing self-relative security descriptor from which the function retrieves security information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The MakeAbsoluteSD function creates a security descriptor in absolute format by using a security descriptor in self-relative format as a template.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A security descriptor in absolute format contains pointers to the information it contains, rather than the information itself. A security descriptor in self-relative format contains the information in a contiguous block of memory. In a self-relative security descriptor, a  SECURITY_DESCRIPTOR structure always starts the information, but the security descriptor's other components can follow the structure in any order. Instead of using memory addresses, the components of the self-relative security descriptor are identified by offsets from the beginning of the security descriptor. This format is useful when a security descriptor must be stored on a floppy disk or transmitted by means of a communications protocol. A server that copies secured objects to various media can use the MakeAbsoluteSD function to create an absolute security descriptor from a self-relative security descriptor and the  MakeSelfRelativeSD function to create a self-relative security descriptor from an absolute security descriptor. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "MakeAbsoluteSD",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSelfRelativeSD",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure in self-relative format. The function creates an absolute-format version of this security descriptor without modifying the original security descriptor."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pAbsoluteSD",
        "description": "A pointer to a buffer that the function fills with the main body of an absolute-format security descriptor. This information is formatted as a SECURITY_DESCRIPTOR structure."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwAbsoluteSDSize",
        "description": "A pointer to a variable that specifies the size of the buffer pointed to by the pAbsoluteSD parameter. If the buffer is not large enough for the security descriptor, the function fails and sets this variable to the minimum required size."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to a buffer the function fills with the discretionary access control list (DACL) of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwDaclSize",
        "description": "A pointer to a variable that specifies the size of the buffer pointed to by the pDacl parameter. If the buffer is not large enough for the access control list (ACL), the function fails and sets this variable to the minimum required size."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to a buffer the function fills with the system access control list (SACL) of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwSaclSize",
        "description": "A pointer to a variable that specifies the size of the buffer pointed to by the pSacl parameter. If the buffer is not large enough for the ACL, the function fails and sets this variable to the minimum required size."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID",
        "name": "pOwner",
        "description": "A pointer to a buffer the function fills with the security identifier (SID) of the owner of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwOwnerSize",
        "description": "A pointer to a variable that specifies the size of the buffer pointed to by the pOwner parameter. If the buffer is not large enough for the SID, the function fails and sets this variable to the minimum required size."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSID",
        "name": "pPrimaryGroup",
        "description": "A pointer to a buffer the function fills with the SID of the absolute-format security descriptor's primary group. The main body of the absolute-format security descriptor references this pointer."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwPrimaryGroupSize",
        "description": "A pointer to a variable that specifies the size of the buffer pointed to by the pPrimaryGroup parameter. If the buffer is not large enough for the SID, the function fails and sets this variable to the minimum required size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The MakeSelfRelativeSD function creates a security descriptor in self-relative format by using a security descriptor in absolute format as a template.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError.  Possible return codes include, but are not limited to, the following.  ",
    "remarks": "A security descriptor in absolute format contains pointers to the information it contains, rather than containing the information itself. A security descriptor in self-relative format contains the information in a contiguous block of memory. In a self-relative security descriptor, a  SECURITY_DESCRIPTOR structure always starts the information, but the security descriptor's other components can follow the structure in any order. Instead of using memory addresses, the components of the security descriptor are identified by offsets from the beginning of the security descriptor. This format is useful when a security descriptor must be stored on a floppy disk or transmitted by means of a communications protocol. A server that copies secured objects to various media can use the MakeSelfRelativeSD function to create a self-relative security descriptor from an absolute security descriptor and the  MakeAbsoluteSD function to create an absolute security descriptor from a self-relative security descriptor. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "MakeSelfRelativeSD",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pAbsoluteSD",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure in absolute format. The function creates a version of this security descriptor in self-relative format without modifying the original."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSelfRelativeSD",
        "description": "A pointer to a buffer the function fills with a security descriptor in self-relative format."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferLength",
        "description": "A pointer to a variable specifying the size of the buffer pointed to by the pSelfRelativeSD parameter. If the buffer is not large enough for the security descriptor, the function fails and sets this variable to the minimum required size."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The MapGenericMask function maps the generic access rights in an access mask to specific and standard access rights. The function applies a mapping supplied in a  GENERIC_MAPPING structure.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "After calling the MapGenericMask function, the access mask pointed to by the AccessMask parameter has none of its generic bits (GenericRead, GenericWrite, GenericExecute, or GenericAll) or undefined bits set, although it can have other bits set. If bits other than the generic bits are provided on input, this function does not clear them. For an example that uses this function, see       Verifying Client Access with ACLs. ",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "MapGenericMask",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "AccessMask",
        "description": "A pointer to an access mask."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure specifying a mapping of generic access types to specific and standard access types."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The NtCompareTokens function compares two access tokens and determines whether they are equivalent with respect to a call to the AccessCheck function.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Ntseapi.h",
    "return_value": "If the function succeeds, the function returns STATUS_SUCCESS. If the function fails, it returns an NTSTATUS error code. ",
    "remarks": "Two access control tokens are considered to be equivalent if all of the following conditions are true: This function has no associated import library or header file; you must call it using the LoadLibrary and GetProcAddress functions. ",
    "return_type": "NTSTATUS NTAPI",
    "category": "Authorization",
    "name": "NtCompareTokens",
    "is_callback": 0,
    "dll": "Ntdll.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "FirstTokenHandle",
        "description": "A handle to the first access token to compare. The token must be open for TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "SecondTokenHandle",
        "description": "A handle to the second access token to compare. The token must be open for TOKEN_QUERY access."
      },
      {
        "in_out": "_Out_",
        "type": "PBOOLEAN",
        "name": "Equal",
        "description": "A pointer to a variable that receives a value that indicates whether the tokens represented by the FirstTokenHandle and SecondTokenHandle parameters are equivalent."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ObjectCloseAuditAlarm function generates an audit message in the security event log when a handle to a private object is deleted. Alarms are not currently supported.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ObjectCloseAuditAlarm function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the primary token of the calling process, allowing the calling process to impersonate a client. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ObjectCloseAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A unique value representing the client's handle to the object. This should be the same value that was passed to the  AccessCheckAndAuditAlarm or ObjectOpenAuditAlarm function."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "GenerateOnClose",
        "description": "Specifies a flag set by a call to the AccessCheckAndAuditAlarm or ObjectCloseAuditAlarm function when the object handle is created. If this flag is TRUE, the function generates an audit message. If it is FALSE, the function does not generate an audit message."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The ObjectDeleteAuditAlarm function generates audit messages when an object is deleted. Alarms are not currently supported.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ObjectDeleteAuditAlarm function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the primary token of the calling process, allowing the calling process to impersonate a client. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ObjectDeleteAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "Specifies a unique value representing the client's handle to the object. This must be the same value that was passed to the  AccessCheckAndAuditAlarm or  ObjectOpenAuditAlarm function."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "GenerateOnClose",
        "description": "Specifies a flag set by a call to the  AccessCheckAndAuditAlarm or  ObjectOpenAuditAlarm function when the object handle is created."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 12,
    "description": "The ObjectOpenAuditAlarm function generates audit messages when a client application attempts to gain access to an object or to create a new one. Alarms are not currently supported.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ObjectOpenAuditAlarm function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the primary token of the calling process, not the impersonation token of the thread. This allows the calling process to impersonate a client during the call. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ObjectOpenAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value representing the client's handle to the object. If the access is denied, this parameter is ignored.      For cross-platform compatibility, the value addressed by this pointer must be sizeof(LPVOID) bytes long."
      },
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "ObjectTypeName",
        "description": "A pointer to a null-terminated string specifying the type of object to which the client is requesting access. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTSTR",
        "name": "ObjectName",
        "description": "A pointer to a null-terminated string specifying the name of the object to which the client is requesting access. This string appears in any audit message that the function generates."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure for the object being accessed."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "Identifies an access token representing the client requesting the operation. This handle must be obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Specifies the desired access mask. This mask must have been previously mapped by the MapGenericMask function to contain no generic access rights."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "GrantedAccess",
        "description": "Specifies an access mask indicating which access rights are granted. This access mask is intended to be the same value set by one of the access-checking functions in its GrantedAccess parameter. Examples of access-checking functions include AccessCheckAndAuditAlarm and AccessCheck."
      },
      {
        "in_out": "_In_opt_",
        "type": "PPRIVILEGE_SET",
        "name": "Privileges",
        "description": "A pointer to a  PRIVILEGE_SET structure that specifies the set of privileges required for the access attempt. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "ObjectCreation",
        "description": "Specifies a flag that determines whether the application creates a new object when access is granted. When this value is TRUE, the application creates a new object; when it is FALSE, the application opens an existing object."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "AccessGranted",
        "description": "Specifies a flag indicating whether access was granted or denied in a previous call to an access-checking function, such as AccessCheck. If access was granted, this value is TRUE. If not, it is FALSE."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "GenerateOnClose",
        "description": "A pointer to a flag set by the audit-generation routine when the function returns. This value must be passed to the  ObjectCloseAuditAlarm function when the object handle is closed."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The ObjectPrivilegeAuditAlarm function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of privileges with an open handle to a private object. Alarms are not currently supported.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The ObjectPrivilegeAuditAlarm function does not check the client's access to the object or check the client's access token to determine whether the privileges are held or enabled. Typically, you call the  PrivilegeCheck function to determine whether the specified privileges are enabled in the access token, call the  AccessCheck function to check the client's access to the object, and then call ObjectPrivilegeAuditAlarm to log the results. The ObjectPrivilegeAuditAlarm function requires the calling process to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the primary token of the calling process, not the impersonation token of the thread. This allows the calling process to impersonate a client during the call. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "ObjectPrivilegeAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in the audit message."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "HandleId",
        "description": "A pointer to a unique value representing the client's handle to the object."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "Identifies an access token representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the audit message."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Specifies an access mask indicating the privileged access types being used or whose use is being attempted. The access mask can be mapped by the  MapGenericMask function so it does not contain any generic access types."
      },
      {
        "in_out": "_In_",
        "type": "PPRIVILEGE_SET",
        "name": "Privileges",
        "description": "A pointer to a  PRIVILEGE_SET structure containing the privileges that the client attempted to use. The names of the privileges appear in the audit message."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "AccessGranted",
        "description": "Indicates whether the client's attempt to use the privileges was successful. If this value is TRUE, the audit message indicates success. If this value is FALSE, the audit message indicates failure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The OpenProcessToken function opens the access token associated with a process.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Close the access token handle returned through the TokenHandle parameter by calling  CloseHandle. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "OpenProcessToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ProcessHandle",
        "description": "A handle to the process whose access token is opened. The process must have the PROCESS_QUERY_INFORMATION access permission."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Specifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the discretionary access control list (DACL) of the token to determine which accesses are granted or denied.     For a list of access rights for access tokens, see  Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "TokenHandle",
        "description": "A pointer to a handle that identifies the newly opened access token when the function returns."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The OpenThreadToken function opens the access token associated with a thread.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. If the token has the anonymous impersonation level, the token will not be opened and OpenThreadToken sets  ERROR_CANT_OPEN_ANONYMOUS as the error. ",
    "remarks": "Tokens with the anonymous impersonation level cannot be opened. Close the access token handle returned through the TokenHandle parameter by calling  CloseHandle. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "OpenThreadToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ThreadHandle",
        "description": "A handle to the thread whose access token is opened."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "DesiredAccess",
        "description": "Specifies an access mask that specifies the requested types of access to the access token. These requested access types are reconciled against the token's discretionary access control list (DACL) to determine which accesses are granted or denied.     For a list of access rights for access tokens, see  Access Rights for Access-Token Objects."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "OpenAsSelf",
        "description": "TRUE if the access check is to be made against the  process-level security context. FALSE if the access check is to be made against the current security context of the thread calling the OpenThreadToken function. The OpenAsSelf parameter allows the caller of this function to open the access token of a specified thread when the caller is impersonating a token at SecurityIdentification level. Without this parameter, the calling thread cannot open the access token on the specified thread because it is impossible to open executive-level objects by using the SecurityIdentification impersonation level."
      },
      {
        "in_out": "_Out_",
        "type": "PHANDLE",
        "name": "TokenHandle",
        "description": "A pointer to a variable that receives the handle to the newly opened access token."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The PrivilegeCheck function determines whether a specified set of  privileges are enabled in an access token. The PrivilegeCheck function is typically called by a server application to check the privileges of a client's access token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "An access token contains a list of the privileges held by the account associated with the token. These privileges can be enabled or disabled; most are disabled by default. The PrivilegeCheck function checks only for enabled privileges. To get a list of all the enabled and disabled privileges held by an access token, call the  GetTokenInformation function. To enable or disable a set of privileges in an access token, call the  AdjustTokenPrivileges function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "PrivilegeCheck",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "A handle to an access token representing a client process. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access."
      },
      {
        "in_out": "_Inout_",
        "type": "PPRIVILEGE_SET",
        "name": "RequiredPrivileges",
        "description": "A pointer to a  PRIVILEGE_SET structure. The Privilege member of this structure is an array of  LUID_AND_ATTRIBUTES structures. Before calling PrivilegeCheck, use the Privilege array to indicate the set of privileges to check. Set the Control member to PRIVILEGE_SET_ALL_NECESSARY if all of the privileges must be enabled; or set it to zero if it is sufficient that any one of the privileges be enabled.     When PrivilegeCheck returns, the Attributes member of each LUID_AND_ATTRIBUTES structure is set to SE_PRIVILEGE_USED_FOR_ACCESS if the corresponding privilege is enabled."
      },
      {
        "in_out": "_Out_",
        "type": "LPBOOL",
        "name": "pfResult",
        "description": "A pointer to a value the function sets to indicate whether any or all of the specified privileges are enabled in the access token. If the Control member of the PRIVILEGE_SET structure specifies PRIVILEGE_SET_ALL_NECESSARY, this value is TRUE only if all the privileges are enabled; otherwise, this value is TRUE if any of the privileges are enabled."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The PrivilegedServiceAuditAlarm function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of privileges.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The PrivilegedServiceAuditAlarm function does not check the client's access token to determine whether the privileges are held or enabled. Typically, you first call the  PrivilegeCheck function to determine whether the specified privileges are enabled in the access token, and then call PrivilegedServiceAuditAlarm to log the results. The PrivilegedServiceAuditAlarm function requires the calling process to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the primary token of the calling process. This allows the calling process to impersonate a client during the call. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "PrivilegedServiceAuditAlarm",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "SubsystemName",
        "description": "A pointer to a null-terminated string specifying the name of the subsystem calling the function. This information appears in the security event log record."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "ServiceName",
        "description": "A pointer to a null-terminated string specifying the name of the privileged subsystem service. This information appears in the security event log record."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "ClientToken",
        "description": "Identifies an access token representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the security event log record."
      },
      {
        "in_out": "_In_",
        "type": "PPRIVILEGE_SET",
        "name": "Privileges",
        "description": "A pointer to a  PRIVILEGE_SET structure containing the privileges that the client attempted to use. The names of the privileges appear in the security event log record."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "AccessGranted",
        "description": "Indicates whether the client's attempt to use the privileges was successful. If this value is TRUE, the security event log record indicates success. If this value is FALSE, the security event log record indicates failure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The QuerySecurityAccessMask function creates an access mask that represents the access permissions necessary to query the specified object security information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Securitybaseapi.h (include WinBase.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "QuerySecurityAccessMask",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A SECURITY_INFORMATION structure that specifies the security information to be queried."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "DesiredAccess",
        "description": "A pointer to the access mask that this function creates."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "The RevertToSelf function terminates the impersonation of a client application.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "A process should call the RevertToSelf function after finishing any impersonation begun by using the DdeImpersonateClient, ImpersonateDdeClientWindow, ImpersonateLoggedOnUser, ImpersonateNamedPipeClient, ImpersonateSelf, ImpersonateAnonymousToken or SetThreadToken function. An RPC server that used the  RpcImpersonateClient function to impersonate a client must call the  RpcRevertToSelf or  RpcRevertToSelfEx to end the impersonation. If RevertToSelf fails, your application continues to run in the context of the client, which is not appropriate. You should shut down the process if RevertToSelf fails. For an example that uses this function, see       Verifying Client Access with ACLs. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "RevertToSelf",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[The RtlConvertSidToUnicodeString function is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use the ConvertSidToStringSid function.]",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winternl.h",
    "return_value": "The return value is an  NTSTATUS code. A value of STATUS_SUCCESS (0x00000000L) is returned if the function succeeds. ",
    "remarks": "",
    "return_type": "NTSTATUS",
    "category": "Authorization",
    "name": "RtlConvertSidToUnicodeString",
    "is_callback": 0,
    "dll": "Ntdll.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PUNICODE_STRING",
        "name": "UnicodeString",
        "description": "A pointer to the Unicode character representation of the security identifier."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "Sid",
        "description": "A pointer to the SID structure that represents the security identifier."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "AllocateDestinationString",
        "description": "If TRUE, then  UnicodeString is allocated on behalf of the caller, and it is the caller's responsibility to free the allocated memory by calling the RtlFreeUnicodeString function. If FALSE, the caller is responsible for allocating and freeing  UnicodeString."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetAclInformation function sets information about an access control list (ACL).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetAclInformation",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PACL",
        "name": "pAcl",
        "description": "A pointer to an  ACL. The function sets information in this ACL."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pAclInformation",
        "description": "A pointer to a buffer that contains the information to be set. This must be a pointer to an  ACL_REVISION_INFORMATION structure."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nAclInformationLength",
        "description": "The size, in bytes, of the buffer pointed to by the pAclInfo parameter."
      },
      {
        "in_out": "_In_",
        "type": "ACL_INFORMATION_CLASS",
        "name": "dwAclInformationClass",
        "description": "An  ACL_INFORMATION_CLASS enumerated type that gives the class of information requested.     Currently, this parameter can be AclRevisionInformation. This means that the buffer pointed to by the pAclInformation parameter contains an  ACL_REVISION_INFORMATION structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetEntriesInAcl function creates a new access control list (ACL) by merging new access control or audit control information into an existing  ACL structure.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "Each entry in the array of EXPLICIT_ACCESS structures specifies access control or audit control information for a specified trustee. A trustee can be a user, group, or other security identifier (SID) value, such as a logon identifier or logon type (for instance, a Windows service or batch job). You can use a name or a SID to identify a trustee. You can use the SetEntriesInAcl function to modify the list of access control entries (ACEs) in a discretionary access control list (DACL) or a system access control list (SACL). Note that SetEntriesInAcl does not prevent you from mixing access control and audit control information in the same  ACL; however, the resulting ACL will contain meaningless entries. For a DACL, the grfAccessMode member of the  EXPLICIT_ACCESS structure specifies whether to allow, deny, or revoke access rights for the trustee. This member can specify one of the following values: For information about these values, see ACCESS_MODE. The SetEntriesInAcl function places any new access-denied ACEs at the beginning of the list of ACEs for the new  ACL. This function  places any new access-allowed ACEs just before any existing access-allowed ACEs. For a SACL, the grfAccessMode member of the  EXPLICIT_ACCESS structure can specify the following values: SET_AUDIT_FAILURE and  SET_AUDIT_SUCCESS can be combined. For information about these values, see ACCESS_MODE. The SetEntriesInAcl function places any new system-audit ACEs at the beginning of the list of ACEs for the new ACL. For an example that uses this function, see Modifying the ACLs of an Object or Creating a Security Descriptor for a New Object or Taking Object Ownership. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "SetEntriesInAcl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cCountOfExplicitEntries",
        "description": "The number of  EXPLICIT_ACCESS structures in the pListOfExplicitEntries array."
      },
      {
        "in_out": "_In_opt_",
        "type": "PEXPLICIT_ACCESS",
        "name": "pListOfExplicitEntries",
        "description": "A pointer to an array of EXPLICIT_ACCESS structures that describe the access control information to merge into the existing ACL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "OldAcl",
        "description": "A pointer to the existing ACL. This parameter can be NULL, in which case, the function creates a new ACL based on the EXPLICIT_ACCESS entries."
      },
      {
        "in_out": "_Out_",
        "type": "PACL*",
        "name": "NewAcl",
        "description": "A pointer to a variable that receives a pointer to the new ACL. If the function succeeds, you must call the  LocalFree function to free the returned buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetFileSecurity function sets the security of a file or directory object.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The SetFileSecurity function is successful only if the following conditions are met: ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetFileSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFileName",
        "description": "A pointer to a null-terminated string that specifies the file or directory for which security is set. Note that security applied to a directory is not inherited by its children."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "Specifies a  SECURITY_INFORMATION structure that identifies the contents of the security descriptor pointed to by the pSecurityDescriptor parameter."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetKernelObjectSecurity function sets the security of a kernel object. For example, this can be a process, thread, or event.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetKernelObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "Handle",
        "description": "A handle to a kernel object for which security information is set."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A set of  bit flags that indicate the type of security information to set. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "SecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure that contains the new security information."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "If you are setting the discretionary access control list (DACL) or any elements in the system access control list (SACL) of an object, the system automatically propagates any inheritable access control entries (ACEs) to existing child objects, according to the  rules of inheritance. You can use the SetNamedSecurityInfo function with the following types of objects: The SetNamedSecurityInfo function does not reorder access-allowed or access-denied ACEs based on the preferred order. When propagating inheritable ACEs to existing child objects, SetNamedSecurityInfo puts inherited ACEs in order after all of the noninherited ACEs in the DACLs of the child objects. This function transfers information in plaintext. The information transferred by this function is signed unless signing has been turned off for the system, but no encryption is performed. When you update access rights of a folder indicated by an UNC   path, for example \\\\Test\\TestFolder, the original inherited ACE is removed and the full volume path is not included. For an example that uses this function, see Modifying the ACLs of an Object or Taking Object Ownership. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "SetNamedSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pObjectName",
        "description": "A pointer to a null-terminated string that specifies the name of the object for which to set security information. This can be the name of a local or remote file or directory on an NTFS file system, network share, registry key, semaphore, event, mutex, file mapping, or waitable timer.     For descriptions of the string formats for the different object types, see  SE_OBJECT_TYPE."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "A value of the SE_OBJECT_TYPE enumeration that indicates the type of object named by the pObjectName parameter."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to set. This parameter can be a combination of the SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "psidOwner",
        "description": "A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "psidGroup",
        "description": "A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.   If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The SetPrivateObjectSecurity function modifies a private object's security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "This function is intended for use by resource managers only. To implement the standard access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling SetPrivateObjectSecurity: If the preceding conditions are not met, a call to this function does not fail; however, standard access policy is not enforced. The process calling this function should not be impersonating a client because clients do not typically have appropriate privileges required for underlying token operations. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetPrivateObjectSecurity",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "Indicates the parts of the security descriptor to set. This value can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ModificationDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure. The parts of this security descriptor indicated by the SecurityInformation parameter are applied to the ObjectsSecurityDescriptor security descriptor."
      },
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ObjectsSecurityDescriptor",
        "description": "A pointer to a pointer to a SECURITY_DESCRIPTOR structure. This security descriptor must be in self-relative form.     On input, this is the current security descriptor of the private object. The function modifies it to produce the new security descriptor. If necessary, the SetPrivateObjectSecurity function allocates additional memory to produce a larger security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the specific and standard access rights that correspond to each of the generic access rights."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle to the access token for the client on whose behalf the private object's security is being modified. This parameter is required to ensure that the client has provided a legitimate value for a new owner security identifier (SID). The token must be open for TOKEN_QUERY access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The SetPrivateObjectSecurityEx function modifies the security descriptor of a private object maintained by the resource manager calling this function. The SetPrivateObjectSecurityEx function has a flags parameter that specifies whether the resource manager supports automatic inheritance of access control entries (ACEs).",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "If the AutoInheritFlags parameter is zero, SetPrivateObjectSecurityEx is identical to the  SetPrivateObjectSecurity function. This function is intended for use by resource managers only. To implement the standard Windows access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling SetPrivateObjectSecurityEx: If the preceding conditions are not met, a call to this function does not fail, however, standard Windows access policy is not enforced. The process calling this function should not be impersonating a client because clients do not typically have appropriate privileges required for underlying token operations. If AutoInheritFlags specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL to create the new security descriptor from the current descriptor: If AutoInheritFlags specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL. For both DACLs and SACLs, certain types of ACEs in the input ObjectsSecurityDescriptor and in ModificationDescriptor will be replaced by two ACEs in the output ObjectsSecurityDescriptor. Specifically, an inheritable ACE that contains at least one of the following mappable elements will result in two ACEs in the output ObjectsSecurityDescriptor. Mappable elements include: ACEs with any of these mappable elements will result in the following two ACEs in the output ObjectsSecurityDescriptor: If AutoInheritFlags does not specify the SEF_AVOID_PRIVILEGE_CHECK bit, owner validity checking is performed according to the following rules. The Owner in ModificationDescriptor: Or A resource manager that is setting the Owner on a subtree of objects can avoid the overhead of redundant owner validity checking. If the Owner in ModificationDescriptor and Token remain the same for iterative calls to this function, the SEF_AVOID_PRIVILEGE_CHECK bit may be set in AutoInheritFlags for calls subsequent to an initial call in which owner validity checking is performed. Callers that do not have access to the token of the client that will ultimately be setting the owner should also choose to skip owner validation checking. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetPrivateObjectSecurityEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "The parts of the security descriptor to set. This value can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "ModificationDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure. The parts of this security descriptor indicated by the SecurityInformation parameter are applied to the ObjectsSecurityDescriptor security descriptor."
      },
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR*",
        "name": "ObjectsSecurityDescriptor",
        "description": "A pointer to a pointer to a SECURITY_DESCRIPTOR structure. This security descriptor must be in self-relative form.     On input, this is the current security descriptor of the private object. The function modifies it to produce the new security descriptor. If necessary, the SetPrivateObjectSecurityEx function allocates additional memory to produce a larger security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "AutoInheritFlags",
        "description": "Specifies automatic inheritance of ACEs. If the protected server does not implement automatic inheritance, it should specify zero; otherwise, it can specify a combination of the following values, defined in Winnt.h.  ValueMeaning  SEF_DACL_AUTO_INHERIT 0x01   The new discretionary access control list (DACL) contains ACEs inherited from the DACL of          the object's parent, as well as any explicit ACEs specified in the DACL of          ModificationDescriptor. If this flag is not set, the new DACL does not inherit ACEs.   SEF_SACL_AUTO_INHERIT 0x02   The new system access control list (SACL) contains ACEs inherited from the SACL of          the security descriptor associated with the object's parent, as well as any explicit ACEs specified in the SACL of          ModificationDescriptor. If this flag is not set, the new SACL does not inherit ACEs.   SEF_AVOID_PRIVILEGE_CHECK 0x08   The function does not perform privilege checking. If the SEF_AVOID_OWNER_CHECK flag is also set, the Token parameter can be NULL. Use this flag when implementing automatic inheritance to avoid checking privileges on each child updated.   SEF_AVOID_OWNER_CHECK 0x10   The function does not check the validity of the owner in the resultant ObjectsSecurityDescriptor as described in Remarks. If the SEF_AVOID_PRIVILEGE_CHECK flag is also set, the Token parameter can be NULL.   SEF_DEFAULT_OWNER_FROM_PARENT 0x20   The owner of ObjectsSecurityDescriptor defaults to the owner of the object's parent. If this flag is not set, the owner of ObjectsSecurityDescriptor defaults to the owner of the token specified by the Token parameter. The owner of the token is specified in the token itself. In either case, if the ModificationDescriptor parameter is not NULL, the ObjectsSecurityDescriptor owner is set to the owner from ModificationDescriptor.   SEF_DEFAULT_GROUP_FROM_PARENT 0x40   The group of ObjectsSecurityDescriptor defaults to the group from the owner of the object's parent. If this flag is not set, the group of ObjectsSecurityDescriptor defaults to the group of the token specified by the Token parameter. The group of the token is specified in the token itself. In either case, if the ModificationDescriptor parameter is not NULL, the ObjectsSecurityDescriptor group is set to the group from ModificationDescriptor.   SEF_MACL_NO_WRITE_UP 0x100   A principal with a mandatory level lower than that of the object cannot write to the object.   SEF_MACL_NO_READ_UP 0x200   A principal with a mandatory level lower than that of the object cannot read the object.   SEF_MACL_NO_EXECUTE_UP 0x400   A principal with a mandatory level lower than that of the object cannot execute the object.   SEF_AVOID_OWNER_RESTRICTION 0x1000   Any restrictions  specified by the             owner of the object's parent that would limit the caller's ability to specify             a DACL in the ObjectsSecurityDescriptor are ignored."
      },
      {
        "in_out": "_In_",
        "type": "PGENERIC_MAPPING",
        "name": "GenericMapping",
        "description": "A pointer to a  GENERIC_MAPPING structure that specifies the specific and standard access rights that correspond to each of the generic access rights."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "Identifies the access token for the client on whose behalf the private object's security is being modified. This parameter is required to ensure that the client has provided a legitimate value for a new owner security identifier (SID). The token must be open for TOKEN_QUERY access."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SetSecurityAccessMask function creates an access mask that represents the access permissions necessary to set the specified object security information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Securitybaseapi.h (include WinBase.h);  WinBase.h on Windows Server 2008 R2, Windows 7, Windows Server 2008 and Windows Vista (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID",
    "category": "Authorization",
    "name": "SetSecurityAccessMask",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInformation",
        "description": "A SECURITY_INFORMATION structure that specifies the security information to be set."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "DesiredAccess",
        "description": "A pointer to the access mask that this function creates."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetSecurityDescriptorControl function sets the control bits of a security descriptor. The function can set only the control bits that relate to automatic inheritance of ACEs. To set the other control bits of a security descriptor, use the functions, such as  SetSecurityDescriptorDacl, for modifying the components of a security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The SetSecurityDescriptorControl function specifies the control bit or bits to modify, and whether the bits are on or off. The following example marks the DACL on the security descriptor as protected. The following example marks the DACL as not protected. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetSecurityDescriptorControl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure whose control and revision information are set."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_DESCRIPTOR_CONTROL",
        "name": "ControlBitsOfInterest",
        "description": "A  SECURITY_DESCRIPTOR_CONTROL mask that indicates the control bits to set."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_DESCRIPTOR_CONTROL",
        "name": "ControlBitsToSet",
        "description": "A  SECURITY_DESCRIPTOR_CONTROL mask that indicates the new values for the control bits specified by the ControlBitsOfInterest mask."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetSecurityDescriptorDacl function sets information in a discretionary access control list (DACL). If a DACL is already present in the security descriptor, the DACL is replaced.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "There is an important difference between an empty and a nonexistent DACL. When a DACL is empty, it contains no access control entries (ACEs); therefore, no access rights are explicitly granted. As a result, access to the object is implicitly denied. When an object has no DACL (when the pDacl parameter is NULL), no protection is assigned to the object, and all access requests are granted. To help maintain security, restrict access by using a DACL. There are three possible outcomes in different configurations of the bDaclPresent flag and the pDacl parameter: For an example that uses this function, see Creating a Security Descriptor for a New Object. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetSecurityDescriptorDacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure to which the function adds the DACL. This security descriptor must be in absolute format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bDaclPresent",
        "description": "A flag that indicates the presence of a DACL in the security descriptor. If this parameter is TRUE, the function sets the SE_DACL_PRESENT flag in the  SECURITY_DESCRIPTOR_CONTROL structure and uses the values in the pDacl and bDaclDefaulted parameters. If this parameter is FALSE, the function clears the SE_DACL_PRESENT flag, and pDacl and bDaclDefaulted are ignored."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to an  ACL structure that specifies the DACL for the security descriptor. If this parameter is NULL, a NULL DACL is assigned to the security descriptor, which allows all access to the object. The DACL is referenced by, not copied into, the security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bDaclDefaulted",
        "description": "A flag that indicates the source of the DACL. If this flag is TRUE, the DACL has been retrieved by some default mechanism. If FALSE, the DACL has been explicitly specified by a user. The function stores this value in the SE_DACL_DEFAULTED flag of the SECURITY_DESCRIPTOR_CONTROL structure. If this parameter is not specified, the SE_DACL_DEFAULTED flag is cleared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetSecurityDescriptorGroup function sets the primary group information of an absolute-format security descriptor, replacing any primary group information already present in the security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetSecurityDescriptorGroup",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure whose primary group is set by this function. The function replaces any existing primary group with the new primary group."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pGroup",
        "description": "A pointer to a  SID structure for the security descriptor's new primary group. The SID structure is referenced by, not copied into, the security descriptor. If this parameter is NULL, the function clears the security descriptor's primary group information. This marks the security descriptor as having no primary group."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bGroupDefaulted",
        "description": "Indicates whether the primary group information was derived from a default mechanism. If this value is TRUE, it is default information, and the function stores this value as the SE_GROUP_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure. If this parameter is zero, the SE_GROUP_DEFAULTED flag is cleared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetSecurityDescriptorOwner function sets the owner information of an absolute-format security descriptor. It replaces any owner information already present in the security descriptor.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetSecurityDescriptorOwner",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure whose owner is set by this function. The function replaces any existing owner with the new owner."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pOwner",
        "description": "A pointer to a  SID structure for the security descriptor's new primary owner. The SID structure is referenced by, not copied into, the security descriptor. If this parameter is NULL, the function clears the security descriptor's owner information. This marks the security descriptor as having no owner."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bOwnerDefaulted",
        "description": "Indicates whether the owner information is derived from a default mechanism. If this value is TRUE, it is default information. The function stores this value as the SE_OWNER_DEFAULTED flag in the  SECURITY_DESCRIPTOR_CONTROL structure. If this parameter is zero, the SE_OWNER_DEFAULTED flag is cleared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SetSecurityDescriptorRMControl function sets the resource manager control bits in the  SECURITY_DESCRIPTOR structure.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "The return value is ERROR_SUCCESS. ",
    "remarks": "The resource manager control bits are eight bits in the Sbz1 member of the  SECURITY_INFORMATION structure that contains information specific to the resource manager accessing the structure. These bits should be accessed only through the  GetSecurityDescriptorRMControl and SetSecurityDescriptorRMControl functions. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "SetSecurityDescriptorRMControl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "SecurityDescriptor",
        "description": "A pointer to a SECURITY_DESCRIPTOR structure that contains the resource manager control bits."
      },
      {
        "in_out": "_In_opt_",
        "type": "PUCHAR",
        "name": "RMControl",
        "description": "A pointer to the bitfield value that the resource manager control bits in the  SECURITY_DESCRIPTOR structure will be set to. If the value of this parameter is NULL, the resource manager control bits will be cleared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetSecurityDescriptorSacl function sets information in a system access control list (SACL). If there is already a SACL present in the security descriptor, it is replaced.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetSecurityDescriptorSacl",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSecurityDescriptor",
        "description": "A pointer to the  SECURITY_DESCRIPTOR structure to which the function adds the SACL. This security descriptor must be in absolute format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bSaclPresent",
        "description": "Indicates the presence of a SACL in the security descriptor. If this parameter is TRUE, the function sets the SE_SACL_PRESENT flag in the  SECURITY_DESCRIPTOR_CONTROL structure and uses the values in the pSacl and bSaclDefaulted parameters. If it is FALSE, the function does not set the SE_SACL_PRESENT flag, and pSacl and bSaclDefaulted are ignored."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to an  ACL structure that specifies the SACL for the security descriptor. If this parameter is NULL, a NULL SACL is assigned to the security descriptor. The SACL is referenced by, not copied into, the security descriptor."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bSaclDefaulted",
        "description": "Indicates the source of the SACL. If this flag is TRUE, the SACL has been retrieved by some default mechanism. If it is FALSE, the SACL has been explicitly specified by a user. The function stores this value in the SE_SACL_DEFAULTED flag of the SECURITY_DESCRIPTOR_CONTROL structure. If this parameter is not specified, the SE_SACL_DEFAULTED flag is cleared."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns a nonzero error code defined in WinError.h. ",
    "remarks": "If you are setting the discretionary access control list (DACL) or any elements in the system access control list (SACL) of an object, the system automatically propagates any inheritable access control entries (ACEs) to existing child objects, according to the  ACE inheritance rules.  You can use the SetSecurityInfo function with the following types of objects: The SetSecurityInfo function does not reorder access-allowed or access-denied ACEs based on the preferred order. When propagating inheritable ACEs to existing child objects, SetSecurityInfo puts inherited ACEs in order after all of the noninherited ACEs in the DACLs of the child objects. ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "SetSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "handle",
        "description": "A handle to the object for which to set security information."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "A member of the  SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to set. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "psidOwner",
        "description": "A pointer to a SID that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. This parameter can be NULL if you are not setting the owner SID."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "psidGroup",
        "description": "A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. This parameter can be NULL if you are not setting the primary group SID."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to the new DACL for the object. This parameter is ignored unless the value of the SecurityInfo parameter includes the DACL_SECURITY_INFORMATION flag.  If the value of the SecurityInfo parameter includes the DACL_SECURITY_INFORMATION flag and the value of this parameter is set to NULL, full access to the object is granted to everyone. For information about null DACLs, see Creating a DACL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. This parameter can be NULL if you are not setting the SACL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The SetThreadToken function assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "When using the SetThreadToken function to impersonate, you must have the impersonate  privileges and make sure that the SetThreadToken function succeeds before calling the RevertToSelf function. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetThreadToken",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PHANDLE",
        "name": "Thread",
        "description": "A pointer to a handle to the thread to which the function assigns the impersonation token.     If Thread is NULL, the function assigns the impersonation token to the calling thread."
      },
      {
        "in_out": "_In_opt_",
        "type": "HANDLE",
        "name": "Token",
        "description": "A handle to the impersonation token to assign to the thread. This handle must have been opened with TOKEN_IMPERSONATE access rights. For more information, see  Access Rights for Access-Token Objects.     If Token is NULL, the function causes the thread to stop using an impersonation token."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The SetTokenInformation function sets various types of information for a specified access token. The information that this function sets replaces existing information. The calling process must have appropriate access rights to set the information.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "To set privilege information, an application can call the AdjustTokenPrivileges function. To set a token's groups, an application can call the AdjustTokenGroups function. Token-type information can be set only when an access token is created. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetTokenInformation",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "TokenHandle",
        "description": "A handle to the access token for which information is to be set."
      },
      {
        "in_out": "_In_",
        "type": "TOKEN_INFORMATION_CLASS",
        "name": "TokenInformationClass",
        "description": "A value from the  TOKEN_INFORMATION_CLASS enumerated type that identifies the type of information the function sets. The valid values from TOKEN_INFORMATION_CLASS are described in the TokenInformation parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "TokenInformation",
        "description": "A pointer to a buffer that contains the information set in the access token. The structure of this buffer depends on the type of information specified by the TokenInformationClass parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "TokenInformationLength",
        "description": "Specifies the length, in bytes, of the buffer pointed to by TokenInformation."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The SetUserObjectSecurity function sets the security of a user object. This can be, for example, a window or a DDE conversation.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "If the function succeeds, the function returns nonzero. If the function fails, it returns zero. To get extended error information, call  GetLastError. ",
    "remarks": "The SetUserObjectSecurity function applies changes specified in a security descriptor to the security descriptor assigned to a user object. The security descriptor of the object must be in self-relative form. If necessary, this function allocates additional memory to increase the size of the security descriptor. For an example that uses this function, see Starting an Interactive Client Process. ",
    "return_type": "BOOL",
    "category": "Authorization",
    "name": "SetUserObjectSecurity",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hObj",
        "description": "A handle to a user object for which security information is set."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_INFORMATION",
        "name": "pSIRequested",
        "description": "A pointer to a value that indicates the components of the security descriptor to set. This parameter can be a combination of the following values.      \t\t\t\t\t  ValueMeaning  DACL_SECURITY_INFORMATION   Sets the discretionary access control list (DACL) of the object. The handle specified by hObj  must have WRITE_DAC access, or the calling process must be the owner of the object.   GROUP_SECURITY_INFORMATION   Sets the primary group security identifier (SID) of the object.   OWNER_SECURITY_INFORMATION   Sets the SID of the owner of the object. The handle specified by hObj  must have WRITE_OWNER access, or the calling process must be the owner of the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled.   SACL_SECURITY_INFORMATION   Sets the system access control list (SACL) of the object. The handle specified by hObj  must have ACCESS_SYSTEM_SECURITY access.  To obtain ACCESS_SYSTEM_SECURITY access  Enable the SE_SECURITY_NAME  privilege in the current access token of the caller. Open the handle for ACCESS_SYSTEM_SECURITY access.  Disable the privilege."
      },
      {
        "in_out": "_In_",
        "type": "PSECURITY_DESCRIPTOR",
        "name": "pSID",
        "description": "A pointer to a  SECURITY_DESCRIPTOR structure that contains the new security information.     This buffer must be aligned on a 4-byte boundary."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The TreeResetNamedSecurityInfo function resets specified security information in the security descriptor of a specified tree of objects. This function allows a specified  discretionary access control list (DACL) or any elements in the system access control list (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns an error code defined in WinError.h. ",
    "remarks": "Setting a NULL owner, group, DACL, or SACL is not supported by this function. If the caller does not contain the proper privileges and permissions to support the requested owner, group, DACL, and SACL updates, then none of the updates are performed. This function is similar to the TreeSetNamedSecurityInfo function: ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "TreeResetNamedSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pObjectName",
        "description": "Pointer to a null-terminated string that specifies the name of the root node object for the objects  that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see  SE_OBJECT_TYPE."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "A value of the SE_OBJECT_TYPE  enumeration  that indicates the type of object named by the pObjectName parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to reset. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pOwner",
        "description": "A pointer to a SID structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pGroup",
        "description": "A pointer to a SID structure that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag.  To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to an access control list (ACL) structure that represents the new DACL for the objects being reset. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each  object, including the root object. If you are not setting the DACL, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to an ACL structure that represents the new SACL for the objects being reset.  The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "KeepExplicit",
        "description": "Boolean value that defines whether explicitly defined ACEs are kept or deleted for the sub-tree. If  KeepExplicit is TRUE, then explicitly defined ACEs are kept for each subtree DACL and SACL, and inherited ACEs are replaced by the inherited ACEs from pDacl and pSacl.  If  KeepExplicit is FALSE, then explicitly defined ACEs for each subtree DACL and SACL are deleted before the inherited ACEs are replaced by the inherited ACEs from pDacl and pSacl."
      },
      {
        "in_out": "_In_opt_",
        "type": "FN_PROGRESS",
        "name": "fnProgress",
        "description": "A pointer to the function used to track the progress of the TreeResetNamedSecurityInfo function. The prototype of the progress function is:   C++     Copy      #include <windows.h> #include <Aclapi.h>  typedef VOID (*FN_PROGRESS) (   IN LPWSTR pObjectName,              // Name of object just processed   IN DWORD Status,                    // Status of operation on object   IN OUT PPROG_INVOKE_SETTING pInvokeSetting, // When to set   IN PVOID Args,                      // Caller specific data   IN BOOL SecuritySet                 // Whether security was set );       The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in fnProgress, and during the tree  operation, TreeResetNamedSecurityInfo passes the name of the last object processed, the error status of that operation, and the current  PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using pInvokeSetting. If no progress function is to be used, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "PROG_INVOKE_SETTING",
        "name": "ProgressInvokeSetting",
        "description": "A value of the PROG_INVOKE_SETTING enumeration that specifies the initial setting for the progress function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Args",
        "description": "A pointer to a VOID for progress function arguments specified by the caller."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "The TreeSetNamedSecurityInfo function sets specified security information in the security descriptor of a specified tree of objects. This function allows a specified  discretionary access control list (DACL) or any elements in the system access control list (SACL) to be propagated throughout an entire tree. This function supports a callback function to track the progress of the tree operation.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Aclapi.h",
    "return_value": "If the function succeeds, the function returns ERROR_SUCCESS. If the function fails, it returns an error code defined in WinError.h. ",
    "remarks": "Setting a NULL owner, group, DACL, or SACL is not supported by this function. If the caller does not contain the proper privileges and permissions to support the requested owner, group, DACL, and SACL updates, then none of the updates is performed. This function provides the same functionality as the SetNamedSecurityInfo function when the value of the dwAction parameter is set to TREE_SEC_INFO_SET, the value of the ProgressInvokeSetting parameter is set to ProgressInvokePrePostError, and the function pointed to by the fnProgress parameter sets the value of its pInvokeSetting parameter to ProgressInvokePrePostError. This function is similar to the TreeResetNamedSecurityInfo function: ",
    "return_type": "DWORD",
    "category": "Authorization",
    "name": "TreeSetNamedSecurityInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPTSTR",
        "name": "pObjectName",
        "description": "Pointer to a null-terminated string that specifies the name of the root node object for the objects  that are to receive updated security information. Supported objects are registry keys and file objects. For descriptions of the string formats for the different object types, see  SE_OBJECT_TYPE."
      },
      {
        "in_out": "_In_",
        "type": "SE_OBJECT_TYPE",
        "name": "ObjectType",
        "description": "A value of the SE_OBJECT_TYPE  enumeration  that indicates the type of object named by the pObjectName parameter. The supported values are SE_REGISTRY_KEY and SE_FILE_OBJECT, for registry keys and file objects, respectively."
      },
      {
        "in_out": "_In_",
        "type": "SECURITY_INFORMATION",
        "name": "SecurityInfo",
        "description": "A set of  bit flags that indicate the type of security information to set. This parameter can be a combination of the  SECURITY_INFORMATION bit flags."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pOwner",
        "description": "A pointer to a SID structure that identifies the owner of the object. The SID must be one that can be assigned as the owner SID of a security descriptor. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the owner SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PSID",
        "name": "pGroup",
        "description": "A pointer to a SID structure that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag.  To set the group, the caller must have WRITE_OWNER access to each object, including the root object. If you are not setting the primary group SID, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pDacl",
        "description": "A pointer to an access control list (ACL) structure that represents the new DACL for the objects being reset. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have READ_CONTROL and WRITE_DAC access to each  object, including the root object. If you are not setting the DACL, this parameter can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "PACL",
        "name": "pSacl",
        "description": "A pointer to an ACL structure that represents the new SACL for the objects being reset. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION. If setting SACL_SECURITY_INFORMATION or SCOPE_SECURITY_INFORMATION, the caller must have the SE_SECURITY_NAME privilege enabled. If you are not setting the SACL, this parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAction",
        "description": "Specifies the behavior of this function. This must be set to one of the following values, defined in AccCtrl.h.  ValueMeaning  TREE_SEC_INFO_SET 0x00000001   The security information is set on the object specified by the pObjectName parameter and the tree of child objects of that object. If ACLs are specified in either the pDacl or pSacl parameters, the security descriptors are associated with the object. The security descriptors are propagated to the tree of child objects based on their inheritance properties.    TREE_SEC_INFO_RESET 0x00000002   The security information is reset on the object specified by the pObjectName parameter and the tree of child objects of that object. Any existing security information is removed from all objects on the tree. If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the pObjectName parameter.   TREE_SEC_INFO_RESET_KEEP_EXPLICIT 0x00000003   The security information is reset on the object specified by the pObjectName parameter and the tree of child objects of that object. Any existing inherited security information is removed from all objects on the tree. Security information that was explicitly set on objects in the tree is unchanged.  If any object in the tree does not grant appropriate permissions to the caller to modify the security descriptor on the object, then the propagation of security information on that particular node of the tree and its objects is skipped. The operation continues on the rest of the tree under the object specified by the pObjectName parameter."
      },
      {
        "in_out": "_In_",
        "type": "FN_PROGRESS",
        "name": "fnProgress",
        "description": "A pointer to the function used to track the progress of the TreeSetNamedSecurityInfo function. The prototype of the progress function is:   C++     Copy      #include <windows.h> #include <Aclapi.h> #pragma comment(lib, \"Advapi32.lib\")  typedef VOID (*FN_PROGRESS) (   IN LPWSTR pObjectName,              // Name of object just processed   IN DWORD Status,                    // Status of operation on object   IN OUT PPROG_INVOKE_SETTING                       pInvokeSetting, // When to set   IN PVOID Args,                      // Caller specific data   IN BOOL SecuritySet                 // Whether security was set );       The progress function provides the caller with progress and error information when nodes are processed. The caller specifies the progress function in fnProgress, and during the tree  operation, TreeSetNamedSecurityInfo passes the name of the last object processed, the error status of that operation, and the current  PROG_INVOKE_SETTING value. The caller can change the PROG_INVOKE_SETTING value by using pInvokeSetting. If no progress function is to be used, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "PROG_INVOKE_SETTING",
        "name": "ProgressInvokeSetting",
        "description": "A value of the PROG_INVOKE_SETTING enumeration that specifies the initial setting for the progress function."
      },
      {
        "in_out": "_In_opt_",
        "type": "PVOID",
        "name": "Args",
        "description": "A pointer to a VOID for progress function arguments specified by the caller."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about a particular shared resource on a server.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmshare.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "This function applies only to Server Message Block (SMB) shares. For other types of shares, such as Distributed File System (DFS) or WebDAV shares, use Windows Networking (WNet) functions, which support all types of shares. For interactive users (users who are logged on locally to the machine), no special group membership is required to execute the NetShareGetInfo function. For non-interactive users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the  NetShareEnum function at levels 2, 502, and 503. No special group membership is required for level 0 or level 1 calls. Windows Server 2003 and Windows XP:  For all users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the  NetShareGetInfo function at levels 2 and 502. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management share functions. For more information, see  IADsFileShare. If 503 is specified for the level parameter, the remote server specified in the shi503_servername member of the SHARE_INFO_503 structure must have been bound to a transport protocol using the NetServerTransportAddEx function. In the call to  NetServerTransportAddEx, either 2 or 3 must have been specified for the level parameter, and the SVTI2_SCOPED_NAME flag must have been specified in the SERVER_TRANSPORT_INFO_2 structure for the transport protocol. The following code sample demonstrates how to retrieve information about a particular shared resource using a call to the  NetShareGetInfo function. The sample calls  NetShareGetInfo, specifying information level 502 ( SHARE_INFO_502). If the call succeeds, the code prints the retrieved data. The sample also calls the  IsValidSecurityDescriptor function to validate the shi502_security_descriptor member. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Authorization",
    "name": "NetShareGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "netname",
        "description": "Pointer to a string that specifies the name of the share for which to return information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0    Return the share name. The bufptr parameter points to a  SHARE_INFO_0 structure.   1    Return information about the shared resource, including the name and type of the resource, and a comment associated with the resource. The bufptr parameter points to a  SHARE_INFO_1 structure.   2    Return information about the shared resource, including name of the resource, type and permissions, password, and number of connections. The bufptr parameter points to a  SHARE_INFO_2 structure.   501    Return the name and type of the resource, and a comment associated with the resource. The bufptr parameter points to a  SHARE_INFO_501 structure.   502    Return information about the shared resource, including name of the resource, type and permissions, number of connections, and other pertinent information. The bufptr parameter points to a  SHARE_INFO_502 structure.   503   Specifies information about the shared resource, including the name of the resource, type and permissions, number of connections, and other pertinent information. The buf parameter points to a  SHARE_INFO_503 structure. If the shi503_servername member of this structure is \"*\", there is no configured server name. Windows Server 2003 and Windows XP:  This information level is not supported.   1005    Return a value that indicates whether the share is the root volume in a Dfs tree structure. The bufptr parameter points to a  SHARE_INFO_1005 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers.     This buffer is allocated by the system and must be freed using the  NetApiBufferFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sets the parameters of a shared resource.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmshare.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "This function applies only to Server Message Block (SMB) shares. For other types of shares, such as Distributed File System (DFS) or WebDAV shares, use Windows Networking (WNet) functions, which support all types of shares. Only members of the Administrators or Power Users local group, or those with Print or Server Operator group membership, can successfully execute the  NetShareSetInfo function. The Print Operator can set information only about Printer shares. If the  NetShareSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the share information structure that is not valid. (A share information structure begins with SHARE_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix shi*_ indicates that the member can begin with multiple prefixes, for example, shi2_ or shi502_.)  If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management share functions. For more information, see  IADsFileShare. If 503 is specified for the level parameter, the remote server specified in the shi503_servername member of the SHARE_INFO_503 structure must have been bound to a transport protocol using the NetServerTransportAddEx function. In the call to  NetServerTransportAddEx, either 2 or 3 must have been specified for the level parameter, and the SVTI2_SCOPED_NAME flag must have been specified in the SERVER_TRANSPORT_INFO_2 structure for the transport protocol. The following code sample demonstrates how to set the comment associated with a shared resource using a call to the  NetShareSetInfo function. To do this, the sample specifies information level 1004 (SHARE_INFO_1004). ",
    "return_type": "NET_API_STATUS",
    "category": "Authorization",
    "name": "NetShareSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "netname",
        "description": "Pointer to a string that specifies the name of the share to set information on."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.      ValueMeaning  1   Specifies information about the shared resource, including the name and type of the resource, and a comment associated with the resource. The buf parameter points to a  SHARE_INFO_1 structure.   2   Specifies information about the shared resource, including the name of the resource, type and permissions, password, and number of connections. The buf parameter points to a  SHARE_INFO_2 structure.   502   Specifies information about the shared resource, including the name and type of the resource, required permissions, number of connections, and other pertinent information. The buf parameter points to a  SHARE_INFO_502 structure.   503   Specifies the name of the shared resource. The buf parameter points to a SHARE_INFO_503 structure. All members of this structure except shi503_servername are ignored by the NetShareSetInfo function. Windows Server 2003 and Windows XP:  This information level is not supported.   1004   Specifies a comment associated with the shared resource. The buf parameter points to a  SHARE_INFO_1004 structure.   1005   Specifies a set of flags describing  the shared resource. The buf parameter points to a  SHARE_INFO_1005 structure.   1006   Specifies the maximum number of concurrent connections that the shared resource can accommodate. The buf parameter points to a  SHARE_INFO_1006 structure.   1501    Specifies the  SECURITY_DESCRIPTOR associated with the specified share. The buf parameter points to a  SHARE_INFO_1501 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the share information structure that causes the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]