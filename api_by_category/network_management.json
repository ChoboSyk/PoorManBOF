[
  {
    "n_arguments": 3,
    "description": "[This function is not supported as of Windows Vista because the alerter service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmalert.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code and a can be one of the following error codes. For a list of all possible error codes, see  System Error Codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetAlertRaise function. The alerter service must be running on the client computer when you call the  NetAlertRaise function, or the function fails with ERROR_FILE_NOT_FOUND. The following code sample demonstrates how to raise an administrative alert by calling the  NetAlertRaise function and specifying  STD_ALERT and  ADMIN_OTHER_INFO structures. First, the sample calculates the size of the message buffer. Then it allocates the buffer with a call to the  GlobalAlloc function. The code assigns values to the members of the  STD_ALERT and the  ADMIN_OTHER_INFO portions of the buffer. The sample retrieves a pointer to the  ADMIN_OTHER_INFO structure by calling the  ALERT_OTHER_INFO macro. It also retrieves a pointer to the variable data portion of the buffer by calling the  ALERT_VAR_DATA macro. Finally, the code sample frees the memory allocated for the buffer with a call to the  GlobalFree function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetAlertRaise",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "AlertEventName",
        "description": "A pointer to a constant string that specifies the alert class (type of alert) to raise. This parameter can be one of the following predefined values, or a user-defined alert class for network applications. The event name for an alert can be any text string.     NameMeaning  ALERT_ADMIN_EVENT   An administrator's intervention is required.   ALERT_ERRORLOG_EVENT   An entry was added to the error log.   ALERT_MESSAGE_EVENT   A user or application received a broadcast message.   ALERT_PRINT_EVENT   A print job completed or a print error occurred.   ALERT_USER_EVENT   An application or resource was used."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "Buffer",
        "description": "A pointer to the data to send to the clients listening for the interrupting message. The data should begin with a fixed-length  STD_ALERT structure followed by additional message data in one  ADMIN_OTHER_INFO,  ERRLOG_OTHER_INFO,  PRINT_OTHER_INFO, or  USER_OTHER_INFO structure. Finally, the buffer should include any required variable-length information. For more information, see the code sample in the following Remarks section.     The calling application must allocate and free the memory for all structures and variable data. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "BufferSize",
        "description": "The size, in bytes, of the message buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is not supported as of Windows Vista because the alerter service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmalert.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code and a can be one of the following error codes. For a list of all possible error codes, see  System Error Codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetAlertRaiseEx function. The alerter service must be running on the client computer when you call the  NetAlertRaiseEx function, or the function fails with ERROR_FILE_NOT_FOUND. The following code sample demonstrates how to raise the following types of interrupting messages (alerts) by calling the NetAlertRaiseEx function: In each instance the code assigns values to the members of the relevant alert information structure. Following this, the sample retrieves a pointer to the portion of the message buffer that follows the structure by calling the ALERT_VAR_DATA macro. The code also fills in the variable-length strings in this portion of the buffer. Finally, the sample calls NetAlertRaiseEx to send the alert. Note that the calling application must allocate and free the memory for all structures and variable-length data in an alert message buffer. To pass a user-defined structure and valid strings in a user alert, you must create an event message file and link it with your application. You must also register the application in the EventMessageFile subkey in the EventLog section of the registry. If you do not register the application, the user alert will contain the information you pass in the variable-length strings that follow the USER_OTHER_INFO structure. For more information about EventMessageFile, see Event Logging. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetAlertRaiseEx",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "AlertEventName",
        "description": "A pointer to a constant string that specifies the alert class (type of alert) to raise. This parameter can be one of the following predefined values, or a user-defined alert class for network applications. (The event name for an alert can be any text string.)     NameMeaning  ALERT_ADMIN_EVENT   An administrator's intervention is required.   ALERT_ERRORLOG_EVENT   An entry was added to the error log.   ALERT_MESSAGE_EVENT   A user or application received a broadcast message.   ALERT_PRINT_EVENT   A print job completed or a print error occurred.   ALERT_USER_EVENT   An application or resource was used."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "VariableInfo",
        "description": "A pointer to the data to send to the clients listening for the interrupting message. The data should consist of one  ADMIN_OTHER_INFO,  ERRLOG_OTHER_INFO,  PRINT_OTHER_INFO, or  USER_OTHER_INFO structure followed by any required variable-length information. For more information, see the code sample in the following Remarks section.     The calling application must allocate and free the memory for all structures and variable data. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "VariableInfoSize",
        "description": "The number of bytes of variable information in the buffer pointed to by the VariableInfo parameter."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "ServiceName",
        "description": "A pointer to a constant string that specifies the name of the service raising the interrupting message."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  \t\t\t\tNetApiBufferAllocate function allocates memory from the heap. Use this function only when compatibility with the  NetApiBufferFree function is required. Otherwise, use the  memory management functions.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmapibuf.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "No special group membership is required to successfully execute the ApiBuffer functions. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths. The following code sample demonstrates how to use the network management  ApiBuffer functions. The sample first calls the  NetApiBufferAllocate function to allocate memory and then the  NetApiBufferSize function to retrieve the size of the allocated memory. Following this, the sample calls  NetApiBufferReallocate to change the size of the memory allocation. Finally, the sample calls  NetApiBufferFree to free the memory. In each case, the sample prints a message indicating success or failure. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetApiBufferAllocate",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ByteCount",
        "description": "Number of bytes to be allocated."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "Buffer",
        "description": "Receives a pointer to the allocated buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The \t\t\t\tNetApiBufferFree function frees the memory that the  NetApiBufferAllocate function allocates. Applications should also call NetApiBufferFree to free the memory that other network management functions use internally to return information.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmapibuf.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "The \t\t\t\tNetApiBufferFree function is used to free memory used by network management functions. This function is used in two cases:  Many network management functions retrieve information and return this information as a buffer that may contain a complex structure, an array of structures, or an array of nested structures. These functions use the RPC run-time library to internally allocate the buffer containing the return information, whether the call is to a local computer or a remote server. For example, the NetServerEnum function retrieves a lists of servers and returns this information as an array of  structures pointed to by the bufptr parameter. When the function is successful, memory is allocated internally by the  NetServerEnum function to store the array of structures returned in the bufptr parameter to the application. When this array of structures is no longer needed,  the NetApiBufferFree function should be called by the application with the Buffer parameter set to the bufptr parameter returned by  NetServerEnum to free this internal memory used. In these cases, the NetApiBufferFree function frees all of the internal memory allocated for the buffer including memory for nested structures, pointers to strings, and other data. No special group membership is required to successfully execute the NetApiBufferFree function or any of the other ApiBuffer functions. For a code sample that demonstrates how to use of the NetApiBufferFree function to free memory explicitly allocated by an application, see  the NetApiBufferAllocate function. For a code sample that demonstrates how to use of the NetApiBufferFree function to free memory internally allocated by a network management function to return information, see  the NetServerEnum function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetApiBufferFree",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "Buffer",
        "description": "A pointer to a buffer returned previously by another network management function or memory allocated by calling the NetApiBufferAllocate function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetApiBufferReallocate function changes the size of a buffer allocated by a previous call to the  NetApiBufferAllocate function.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmapibuf.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "No special group membership is required to successfully execute the ApiBuffer functions. For a code sample that demonstrates how to use the network management  ApiBuffer functions, see  NetApiBufferAllocate. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetApiBufferReallocate",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "OldBuffer",
        "description": "Pointer to the buffer returned by a call to the  NetApiBufferAllocate function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "NewByteCount",
        "description": "Specifies the new size of the buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "NewBuffer",
        "description": "Receives the pointer to the reallocated buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The \t\t\t\tNetApiBufferSize function returns the size, in bytes, of a buffer allocated by a call to the  NetApiBufferAllocate function.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmapibuf.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "No special group membership is required to successfully execute the ApiBuffer functions. For a code sample that demonstrates how to use the network management  ApiBuffer functions, see  NetApiBufferAllocate. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetApiBufferSize",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "Buffer",
        "description": "Pointer to a buffer returned by the  NetApiBufferAllocate function."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "ByteCount",
        "description": "Receives the size of the buffer, in bytes."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Frees the memory allocated for the specified DSREG_JOIN_INFO structure, which contains join information for a tenant and which you retrieved by calling the NetGetAadJoinInformation function.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Lmjoin.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "VOID NET_API_FUNCTION",
    "category": "Network Management",
    "name": "NetFreeAadJoinInformation",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PDSREG_JOIN_INFO",
        "name": "pJoinInfo",
        "description": "Pointer to the DSREG_JOIN_INFO structure for which you want to free the memory."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the join information for the specified tenant. This function examines the join information for Microsoft Azure Active Directory and the work account that the current user added.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Lmjoin.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT NET_API_FUNCTION",
    "category": "Network Management",
    "name": "NetGetAadJoinInformation",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "pcszTenantId",
        "description": "The tenant identifier for the joined account. If the device                        is not joined to Azure Active Directory (Azure AD), and the user currently logged into Windows added no Azure AD work accounts  for the specified tenant,                        the buffer that the ppJoinInfo parameter points to  is set to NULL. If the specified                        tenant ID is NULL or empty, ppJoinInfo is set to the default                        join account information, or NULL if the device is not joined to Azure AD and the current user added  no Azure AD work accounts.                                                The default join account is one of the following:  The Azure AD account, if the device is joined to Azure AD. The Azure AD work account that the current user added, if the device is not joined to Azure AD,                        but the current user added a single Azure AD work account. Any of the Azure AD work accounts that the current user added,  if the device is not joined to Azure AD, but the current user added multiple                        Azure AD work accounts. The algorithm for selecting one of the work                        accounts is not specified."
      },
      {
        "in_out": "_Out_",
        "type": "PDSREG_JOIN_INFO*",
        "name": "ppJoinInfo",
        "description": "The join information for the tenant that the pcszTenantId parameter specifies. If this parameter is NULL,  the device is not joined to Azure AD and the current user added no Azure AD work accounts. You must call                      the NetFreeAadJoinInformation function to free the memory allocated for                      this structure."
      }
    ],
    "min_client": "Windows 10 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetAddAlternateComputerName function adds an alternate name for the specified computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetAddAlternateComputerName function is supported on Windows XP and later. The NetAddAlternateComputerName function is used to set secondary network names for computers. The primary name is the name used for authentication and maps to the machine account name. The NetAddAlternateComputerName function requires that the caller is a member of the Administrators local group on the target computer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetAddAlternateComputerName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Server",
        "description": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "AlternateName",
        "description": "A pointer to a constant string that specifies the alternate name to add. This name must be in the form of a fully qualified DNS name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccount",
        "description": "A pointer to a constant string that specifies the domain account to use for accessing the         machine account object for the computer specified in the Server parameter in Active Directory. If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccountPassword",
        "description": "A pointer to a constant string that specifies the password matching the domain account passed in the DomainAccount parameter.         If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is ignored if the DomainAccount parameter is NULL. This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Reserved",
        "description": "Reserved for future use.   This parameter should be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The \t\t\t\tNetProvisionComputerAccount function provisions a computer account for later use in an offline domain join operation.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetProvisionComputerAccount function is supported on Windows 7 and Windows Server 2008 R2 for offline join operations.  On Windows 8 or Windows Server 2008 R2, it is recommended that the NetCreateProvisioningPackage function be used instead of the NetProvisionComputerAccount function. The NetProvisionComputerAccount function is used to provision a computer account for later use in an offline domain join operation using the  NetRequestOfflineDomainJoin function. The offline domain join scenario uses these functions as follows: The NetProvisionComputerAccount function will create or reuse the machine account in the domain, collect all necessary metadata and return it in an opaque versioned binary blob or as text for embedding in an unattended setup answer file. The opaque binary blob can be consumed by the offline domain join request operation supplying all the necessary input to complete the domain join during first boot without any network operations (local state updates only). Security Note:  The blob returned by the NetProvisionComputerAccount function contains very sensitive data. It should be treated just as securely as a plaintext password. The blob contains the machine account password and other information about the domain, including the domain name, the name of a domain controller, and the security ID (SID) of the domain. If the blob is being transported physically or over the network, care must be taken to transport it securely. The design makes no provisions for securing this data.  This problem exists today with unattended setup answer files which can carry a number of secrets including domain user passwords. The caller must secure the blob and the unattended setup files. Solutions to this problem are varied. As an example, a pre-exchanged key could be used to encrypt a session between the consumer and provisioning entity enabling a secure transfer of the opaque blob. The opaque blob returned in the  pProvisionBinData parameter by the NetProvisionComputerAccount function is versioned to allow interoperability and serviceability scenarios between different versions of Windows (joining client, provisioning machine, and domain controller). The offline join scenario currently does not limit the lifetime of the blob returned by the NetProvisionComputerAccount function. For offline domain joins, the access check performed depends on the configuration of the domain. Computer account creation is enabled using three methods: The NetProvisionComputerAccount function works only with a writable domain controller and does not function against a read-only domain controller.  Once provisioning is done against a writable domain controller and the account is replicated to a read-only domain controller, then the other portions of offline domain join operation do not require access to a domain controller. If the NetProvisionComputerAccount function is successful, the pointer in the pProvisionBinData or pProvisionTextData parameter (depending on which was parameter was not NULL) is returned with the serialized data for use in an offline join operation or as text in an unattended setup file. For more information on offline domain join operations, see the Offline Domain Join Step-by-Step Guide. Joining (and unjoining) a computer to a domain using NetJoinDomain and NetUnjoinDomain can be performed only by a member of the Administrators local group on the target computer. Note that the domain administrator can set additional requirements for joining the domain using delegation and assignment of privileges. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetProvisionComputerAccount",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpDomain",
        "description": "A pointer to a NULL-terminated character string that specifies the name of the domain where the computer account is created."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpMachineName",
        "description": "A pointer to a NULL-terminated character string that specifies the short name of the machine from which the computer account attribute sAMAccountName is derived by appending a '$'. This parameter must contain a valid DNS or NetBIOS machine name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "lpMachineAccountOU",
        "description": "An optional pointer to a NULL-terminated character string that contains the RFC 1779 format name of the organizational unit (OU) where the computer account will be created. If you specify this parameter, the string must contain a full path, for example, OU=testOU,DC=domain,DC=Domain,DC=com. Otherwise, this parameter must be NULL. If this parameter is NULL, the well known computer object container will be used as published in the domain."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "lpDcName",
        "description": "An optional pointer to a NULL-terminated character string that contains the name of the domain controller to target."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOptions",
        "description": "A set of bit flags that define provisioning options. This parameter can be one or more of the following values defined in the Lmjoin.h header file.     ValueMeaning  NETSETUP_PROVISION_DOWNLEVEL_PRIV_SUPPORT 0x00000001   If the caller requires account creation by privilege, this option will cause a retry on failure using account creation functions enabling interoperability with domain controllers running on earlier versions of Windows.  The lpMachineAccountOU is not supported when using downlevel privilege support.   NETSETUP_PROVISION_REUSE_ACCOUNT 0x00000002   If the named account already exists, an attempt will be made to reuse the existing account.  This option requires sufficient credentials for this operation (Domain Administrator or the object owner).   NETSETUP_PROVISION_USE_DEFAULT_PASSWORD 0x00000004   Use the default machine account password which is the machine name in lowercase. This is largely to support the older unsecure join model where the pre-created account typically used this default password.  Note  Applications should avoid using this option if possible. This option as well as NetJoinDomain function with dwOptions set to NETSETUP_JOIN_UNSECURE for unsecure join should only be used on earlier versions of Windows.      NETSETUP_PROVISION_SKIP_ACCOUNT_SEARCH 0x00000008   Do not try to find the account on any domain controller in the domain. This option makes the operation faster, but should only be used when the caller is certain that an account by the same name hasn't recently been created.  This option is only valid when the lpDcName parameter is specified. When the prerequisites are met, this option allows for must faster provisioning useful for scenarios such as batch processing.    NETSETUP_PROVISION_ROOT_CA_CERTS 0x00000010   This option retrieves all of the root Certificate Authority certificates on the local machine and adds them to the provisioning package when no certificate template names are provided as part of the provisioning package (the aCertTemplateNames member of the NETSETUP_PROVISIONING_PARAMS struct passed in the  pProvisioningParams parameter to the NetCreateProvisioningPackage function is NULL). Note  This flag is only supported by the NetCreateProvisioningPackage function on Windows 8, Windows Server 2012, and later."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PBYTE*",
        "name": "pProvisionBinData",
        "description": "An optional pointer that will receive the opaque binary blob of serialized metadata required by NetRequestOfflineDomainJoin function to complete an offline domain join, if the NetProvisionComputerAccount function completes successfully.  The data is returned as an opaque binary buffer which may be passed to NetRequestOfflineDomainJoin function.   If this parameter is NULL, then pProvisionTextData parameter must not be NULL. If this parameter is not NULL, then the  pProvisionTextData parameter must be NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwProvisionBinDataSize",
        "description": "A pointer to a value that receives the size, in bytes, of the buffer returned in the pProvisionBinData parameter.  This parameter must not be NULL if the pProvisionBinData parameter is not NULL. This parameter must be NULL when the pProvisionBinData parameter is NULL."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPWSTR*",
        "name": "pProvisionTextData",
        "description": "An optional pointer that will receive the opaque binary blob of serialized metadata required by NetRequestOfflineDomainJoin function to complete an offline domain join, if the NetProvisionComputerAccount function completes successfully.  The data is returned in string form for embedding in an unattended setup answer file.   If this parameter is NULL, then the pProvisionBinData parameter must not be NULL. If this parameter is not NULL, then the  the pProvisionBinData parameter must be NULL."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetEnumerateComputerNames function enumerates names for the specified computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetEnumerateComputerNames function is supported on Windows Vista and later. The NetEnumerateComputerNames function is used to request the names a computer currently has configured. The NetEnumerateComputerNames function requires that the caller is a member of the Administrators local group on the target computer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetEnumerateComputerNames",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Server",
        "description": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "NET_COMPUTER_NAME_TYPE",
        "name": "NameType",
        "description": "The type of the name queried. This member can be one of the following values defined in the NET_COMPUTER_NAME_TYPE enumeration defined in the Lmjoin.h header file.   ValueMeaning  NetPrimaryComputerName   The primary computer name.   NetAlternateComputerNames   Alternate computer names.   NetAllComputerNames   All computer names.   NetComputerNameTypeMax   Indicates the end of the range that specifies the possible values for the type of name to be queried."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Reserved",
        "description": "Reserved for future use.   This parameter should be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "EntryCount",
        "description": "A pointer to a DWORD value that returns the number of names returned in the buffer pointed to by the ComputerNames parameter if the function succeeds."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR**",
        "name": "ComputerNames",
        "description": "A pointer to an array of pointers to names.  If the function call is successful, this parameter will return the computer names that match the computer type name specified in the NameType parameter.  When the application no longer needs this array, this buffer should be freed by         calling NetApiBufferFree function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The \t\t\t\tNetGetJoinableOUs function retrieves a list of organizational units (OUs) in which a computer account can be created.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetGetJoinableOUs function. For more information about organizational units, see  Managing Users in the Active Directory documentation. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGetJoinableOUs",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpDomain",
        "description": "Pointer to a constant string that specifies the name of the domain for which to retrieve the list of OUs that can be joined."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccount",
        "description": "Pointer to a constant string that specifies the account name to use when connecting to the domain controller. The string must specify either a domain NetBIOS name and user account (for example, \"REDMOND\\user\") or the user principal name (UPN) of the user in the form of an Internet-style login name (for example, \"someone@example.com\"). If this parameter is NULL, the caller's context is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpPassword",
        "description": "If the lpAccount parameter specifies an account name, this parameter must point to the password to use when connecting to the domain controller. Otherwise, this parameter must be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "OUCount",
        "description": "Receives the count of OUs returned in the list of joinable OUs."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR**",
        "name": "OUs",
        "description": "Pointer to an array that receives the list of joinable OUs. This array is allocated by the system and must be freed using a single call to the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetGetJoinInformation function retrieves join status information for the specified computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be the following error code or one of the  system error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetGetJoinInformation function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGetJoinInformation",
    "is_callback": 0,
    "dll": "Netapi32.dll;  Wkscli.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR*",
        "name": "lpNameBuffer",
        "description": "Pointer to the buffer that receives the NetBIOS name of the domain or workgroup to which the computer is joined. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "PNETSETUP_JOIN_STATUS",
        "name": "BufferType",
        "description": "Receives the join status of the specified computer. This parameter can have one of the following values.       C++     Copy      typedef enum _NETSETUP_JOIN_STATUS {      NetSetupUnknownStatus = 0,     NetSetupUnjoined,     NetSetupWorkgroupName,     NetSetupDomainName  } NETSETUP_JOIN_STATUS, *PNETSETUP_JOIN_STATUS;       These values have the following meanings.  ValueMeaning  NetSetupUnknownStatus   The status is unknown.   NetSetupUnjoined   The computer is not joined.   NetSetupWorkgroupName   The computer is joined to a workgroup.   NetSetupDomainName   The computer is joined to a domain."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "The \t\t\t\tNetJoinDomain function joins a computer to a workgroup or domain.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "Joining (and unjoining) a computer to a domain or workgroup can be performed only by a member of the Administrators local group on the target computer. Note that the domain administrator can set additional requirements for joining the domain using delegation and assignment of privileges. If you call the  NetJoinDomain function remotely, you must supply credentials because you cannot delegate credentials under these circumstances. Different processes, or different threads of the same process, should not call the  NetJoinDomain function at the same time. This situation can leave the computer in an inconsistent state. If you encounter a problem during a join operation, you should not delete a computer account and immediately follow the deletion with another join attempt. This can lead to replication-related problems that are difficult to investigate. When you delete a computer account, wait until the change has replicated to all domain controllers before attempting another join operation. A system reboot is required after calling the NetJoinDomain function for the operation to complete. Windows Server 2003 and Windows XP:  When a call to the  NetJoinDomain function precedes a call to the  NetRenameMachineInDomain function, you should defer the update of the SPN and DnsHostName properties on the computer object until the rename operation. This is because the join operation can fail in certain situations. An example of such a situation is when the SPN that is derived from the current computer name is not valid in the new domain that the computer is joining, but the SPN derived from the new name that the computer will have after the rename operation is valid in the new domain. In this situation, the call to  NetJoinDomain fails unless you defer the update of the two properties until the rename operation by specifying the NETSETUP_DEFER_SPN_SET flag in the fJoinOptions parameter when you call  NetJoinDomain. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetJoinDomain",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to execute the domain join operation. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpDomain",
        "description": "A pointer to a constant null-terminated character string that specifies the name of the domain or workgroup to join.     Optionally, you can specify the preferred domain controller to perform the join operation. In this instance, the string must be of the form  DomainName\\MachineName,  where DomainName  is the name of the domain to join, and MachineName is the name of the domain controller to perform the join."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccountOU",
        "description": "Optionally specifies the pointer to a constant null-terminated character string that contains the RFC 1779 format name of the organizational unit (OU) for the computer account. If you specify this parameter, the string must contain a full path, for example, OU=testOU,DC=domain,DC=Domain,DC=com. Otherwise, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccount",
        "description": "A pointer to a constant null-terminated character string that specifies the account name to use when connecting to the domain controller. The string must specify either a domain NetBIOS name and user account (for example, REDMOND\\user) or the user principal name (UPN) of the user in the form of an Internet-style login name (for example, \"someone@example.com\"). If this parameter is NULL, the caller's context is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpPassword",
        "description": "If the lpAccount parameter specifies an account name, this parameter must point to the password to use when connecting to the domain controller. Otherwise, this parameter must be NULL.     You can specify a local machine account password rather than a user password for unsecured joins. For more information, see the description of the NETSETUP_MACHINE_PWD_PASSED flag described in the fJoinOptions parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fJoinOptions",
        "description": "A set of bit flags defining the join options. ..."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetLogonSetServiceBits function notifies the Netlogon service of the running state of the services on a domain controller. The caller must be running in the context of either the LocalSystem or the LocalService account.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "",
    "return_value": "If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The list of running services for the domain controller returned by the DsGetDcName function will contain the running services notified by the  NetLogonSetServiceBits function. No header file is available for the NetLogonSetServiceBits function . Include the function definition at the top of this page in your source code. An import library containing the NetLogonSetServiceBits function is not included in the Microsoft Windows Software Development Kit (SDK). Applications must use the LoadLibrary and GetProcAddress functions to retrieve the function pointer from the corresponding DLL and call this function. ",
    "return_type": "NTSTATUS",
    "category": "Network Management",
    "name": "NetLogonSetServiceBits",
    "is_callback": 0,
    "dll": "Netapi32.dll on Windows Vista and Windows Server 2008;  Logoncli.dll on Windows 7, Windows Server 2008 R2, Windows 8 and Windows Server 2012",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "ServerName",
        "description": "A pointer to a null-terminated string that specifies the name of the domain controller. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ServiceBitsOfInterest",
        "description": "A set of flags used as a mask to indicate which service's state (running or not running) is being set. This parameter can be a combination of the following values.  ValueMeaning  DS_TIMESERV_FLAG 0x00000040   The state of the time service is being set.   DS_GOOD_TIMESERV_FLAG 0x00000200   The state of the time service with clock hardware is being set.   DS_WS_FLAG 0x00002000   The state of the Active Directory web service is being set."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ServiceBits",
        "description": "A set of flags used as a mask to indicate whether the service indicated by ServiceBitsOfInterest parameter is running or not. If the flag is set to 0, the corresponding service indicated by the ServiceBitsOfInterest parameter is not running. Otherwise, if the flag is set to 1, the corresponding service indicated by the ServiceBitsOfInterest parameter is running. This parameter can be a combination of the following values.  ValueMeaning  DS_TIMESERV_FLAG 0x00000040   The time service is running.   DS_GOOD_TIMESERV_FLAG 0x00000200   The time service with clock hardware is running.   DS_WS_FLAG 0x00002000   The Active Directory web service is running."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetRemoveAlternateComputerName function removes an alternate name for the specified computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetRemoveAlternateComputerName function is supported on Windows XP and later. The NetRemoveAlternateComputerName function is used to remove secondary computer names configured for the target computer. The NetRemoveAlternateComputerName function requires that the caller is a member of the Administrators local group on the target computer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRemoveAlternateComputerName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Server",
        "description": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "AlternateName",
        "description": "A pointer to a constant string that specifies the alternate name to remove. This name must be in the form of a fully qualified DNS name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccount",
        "description": "A pointer to a constant string that specifies the domain account to use for accessing the         machine account object for the computer specified in the Server parameter in Active Directory. If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccountPassword",
        "description": "A pointer to a constant string that specifies the password matching the domain account passed in the DomainAccount parameter.         If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is ignored if the DomainAccount parameter is NULL. This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Reserved",
        "description": "Reserved for future use.   This parameter should be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  \t\t\t\tNetRenameMachineInDomain function changes the name of a computer in a domain.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "Renaming a domain computer can be performed only by a user that is a member of the Administrators local group on the target computer and that also is a member of the Administrators group on the domain or has the Account Operator privilege on the domain. If you call the  NetRenameMachineInDomain function remotely, you must supply credentials because you cannot delegate credentials under these circumstances. Different processes, or different threads of the same process, should not call the  NetRenameMachineInDomain function at the same time. This situation can leave the computer in an inconsistent state. The NERR_SetupNotJoined and  NERR_SetupDomainController return values are defined in the Lmerr.h header file. This header file is automatically included by the Lm.h header file and should not be included directly. A system reboot is required after calling the NetRenameMachineInDomain function for the operation to complete. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRenameMachineInDomain",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpNewMachineName",
        "description": "A pointer to a constant string that specifies the new name of the computer. If specified, the local computer name is changed as well. If this parameter is NULL, the function assumes you have already called the  SetComputerNameEx function."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccount",
        "description": "A pointer to a constant string that specifies an account name to use when connecting to the domain controller. If this parameter is NULL, the caller's context is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpPassword",
        "description": "If the lpAccount parameter specifies an account name, this parameter must point to the password to use when connecting to the domain controller. Otherwise, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fRenameOptions",
        "description": "The rename options. If this parameter is NETSETUP_ACCT_CREATE, the function renames the account in the domain."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetRequestOfflineDomainJoin function executes locally on a machine to modify a Windows operating system image mounted on a volume. The registry is loaded from the image and provisioning blob data is written where it can be retrieved during the completion phase of an offline domain join operation.",
    "library": "Netapi32.lib",
    "min_server": "None supported",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetRequestOfflineDomainJoin function is supported on Windows 7 for offline domain join operations. The  \t\t\t\tNetRequestOfflineDomainJoin function is used locally on a machine to modify a Windows operating system image mounted on a volume. The registry is loaded for the image and provisioning blob data is written where it can be retrieved during the completion phase of an offline domain join operation. The offline domain join scenario uses these functions as follows: The NetProvisionComputerAccount function will create or reuse the machine account in the domain, collect all necessary metadata and return it in an opaque versioned binary blob or as text for embedding in an unattended setup answer file. The opaque binary blob can be consumed by the offline domain join request operation supplying all the necessary input to complete the domain join during first boot without any network operations (local state updates only). Note that the blob contains machine account password material essentially in the clear. The design makes no provisions for securing this data.  This problem exists today with unattended setup answer files which can carry a number of secrets including domain user passwords. The caller must secure the blob and the unattended setup files. Solutions to this problem are varied. As an example, a pre-exchanged key could be used to encrypt a session between the consumer and provisioning entity enabling a secure transfer of the opaque blob . The opaque blob returned in the  pProvisionBinData parameter by the NetProvisionComputerAccount function is versioned to allow interoperability and serviceability scenarios between different versions of Windows (joining client, provisioning machine, and domain controller). The offline join scenario currently does not limit the lifetime of the blob returned by the NetProvisionComputerAccount function. For more information on offline domain join operations, see the Offline Domain Join Step-by-Step Guide. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRequestOfflineDomainJoin",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pProvisionBinData",
        "description": "A pointer to a buffer required to initialize the registry of a Windows operating system image to process the final local state change during the completion phase of the offline domain join operation.  The opaque binary blob of serialized metadata passed in the pProvisionBinData parameter is returned by the NetProvisionComputerAccount function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbProvisionBinDataSize",
        "description": "The size, in bytes, of the buffer pointed to by the pProvisionBinData parameter.  This parameter must not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwOptions",
        "description": "A set of bit flags that define options for this function. This parameter can be one or more of the following values defined in the Lmjoin.h header file.     ValueMeaning  NETSETUP_PROVISION_ONLINE_CALLER 0x40000000   This flag is required if the lpWindowsPath parameter references the currently running Windows operating system directory rather than an offline Windows operating system image mounted on an accessible volume. If this flag is specified,  the NetRequestOfflineDomainJoin function must be invoked by a member of the local Administrators group."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpWindowsPath",
        "description": "A pointer to a constant null-terminated character string that specifies the path to a Windows operating system image  under which the registry hives are located. This image must be offline and not currently booted unless the dwOptions parameter contains NETSETUP_PROVISION_ONLINE_CALLER in which case the locally running operating system directory is allowed.  This path could                      be a UNC path on a remote server."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetRequestProvisioningPackageInstall function executes locally on a machine to modify a Windows operating system image mounted on a volume. The registry is loaded from the image and provisioning package data is written where it can be retrieved during the completion phase of an offline domain join operation.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following Network Management error codes.  ",
    "remarks": "The NetRequestProvisioningPackageInstall function is supported on Windows 8 for offline domain join operations.  For  Windows 7, use NetRequestOfflineDomainJoin. The offline domain join scenario uses two functions: The NetCreateProvisioningPackage function will create or reuse the machine account in the domain, collect all necessary metadata and return it in a package. The package can be consumed by the offline domain join request operation supplying all the necessary input to complete the domain join during first boot without any network operations (local state updates only). Security Note:  The package created by the NetCreateProvisioningPackage function contains very sensitive data. It should be treated just as securely as a plaintext password. The package contains the machine account password and other information about the domain, including the domain name, the name of a domain controller, and the security ID (SID) of the domain. If the package is being transported physically or over the network, care must be taken to transport it securely. The design makes no provisions for securing this data.  This problem exists today with unattended setup answer files which can carry a number of secrets including domain user passwords. The caller must secure the package. Solutions to this problem are varied. As an example, a pre-exchanged key could be used to encrypt a session between the consumer and provisioning entity enabling a secure transfer of the package. The package returned in the  pPackageBinData parameter by the NetCreateProvisioningPackage function is versioned to allow interoperability and serviceability scenarios between different versions of Windows (such as joining a client, provisioning a machine, and using a domain controller). The offline join scenario currently does not limit the lifetime of the package returned by the NetCreateProvisioningPackage function. All phases of the provisioning process append to a  NetSetup.log file on the local computer. The provisoning process can include up to three different computers: the computer where the provisioning package is created,  the computer that requests the installation of the package,  and the computer where the  package is installed. There will be NetSetup.log file information stored on all three computers according to  the operation performed. Reviewing the contents of these files is the most common means of troubleshooting online and offline provisioning errors. Provisioning operations undertaken by admins are logged to the NetSetup.log file in the %WINDIR%\\Debug. Provisioning operations performed by non-admins are logged to the NetSetup.log file  in the %USERPROFILE%\\Debug folder. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRequestProvisioningPackageInstall",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "pPackageBinData",
        "description": "A pointer to a buffer required to initialize the registry of a Windows operating system image to process the final local state change during the completion phase of the offline domain join operation.  The opaque binary blob of serialized metadata passed in the pPackageBinData parameter is returned by the NetCreateProvisioningPackage function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwPackageBinDataSize",
        "description": "The size, in bytes, of the buffer pointed to by the pPackageBinData parameter.  This parameter must not be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProvisionOptions",
        "description": "A set of bit flags that define options for this function.  This parameter uses one or more of the following values defined in the Lmjoin.h header file.     ValueMeaning  NETSETUP_PROVISION_ONLINE_CALLER 0x40000000   This flag is required if the lpWindowsPath parameter references the currently running Windows operating system directory rather than an offline Windows operating system image mounted on an accessible volume. If this flag is specified,  the NetRequestProvisioningPackageInstall  function must be invoked by a member of the local Administrators group."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpWindowsPath",
        "description": "A pointer to a NULL-terminated character string that specifies the path to a Windows operating system image  under which the registry hives are located. This image must be offline and not currently booted unless the dwProvisionOptions parameter contains NETSETUP_PROVISION_ONLINE_CALLER, in which case, the locally running operating system directory is allowed.  This path could                      be a UNC path on a remote server."
      },
      {
        "in_out": "_Reserved_",
        "type": "PVOID",
        "name": "pvReserved",
        "description": "Reserved for future use."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetSetPrimaryComputerName function sets the primary computer name for the specified computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "The NetSetPrimaryComputerName function is supported on Windows XP and later. The NetSetPrimaryComputerName function is used as part of computer rename operations. The specified name will be removed from the alternate name list configured for the target computer and configured as the primary name. The computer account name will be changed to match the primary name. The previous primary computer name is moved to the alternate computer name list configured for the computer. The NetSetPrimaryComputerName function requires that the caller is a member of the Administrators local group on the target computer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetSetPrimaryComputerName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Server",
        "description": "A pointer to a constant string that specifies the name of the computer on which to execute this function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "PrimaryName",
        "description": "A pointer to a constant string that specifies the primary name to set. This name must be in the form of a fully qualified DNS name."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccount",
        "description": "A pointer to a constant string that specifies the domain account to use for accessing the         machine account object for the computer specified in the Server parameter in Active Directory. If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "DomainAccountPassword",
        "description": "A pointer to a constant string that specifies the password matching the domain account passed in the DomainAccount parameter.         If this parameter is NULL, then the credentials of the user executing         this routine are used.  This parameter is ignored if the DomainAccount parameter is NULL. This parameter is not used if the server to execute this function is not joined to a domain."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "Reserved",
        "description": "Reserved for future use.   This parameter should be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUnjoinDomain function unjoins a computer from a workgroup or a domain.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes or one of the  system error codes.  ",
    "remarks": "Unjoining (and joining) a computer to a domain or workgroup can be performed only by a member of the Administrators local group on the target computer. If you call the  NetUnjoinDomain function remotely, you must supply credentials because you cannot delegate credentials under these circumstances. Different processes, or different threads of the same process, should not call the  NetUnjoinDomain function at the same time. This situation can leave the computer in an inconsistent state. A system reboot is required after calling the NetRenameMachineInDomain function for the operation to complete. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUnjoinDomain",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccount",
        "description": "A pointer to a constant string that specifies the account name to use when connecting to the domain controller. The string must specify either a domain NetBIOS name and user account (for example, REDMOND\\user) or the user principal name (UPN) of the user in the form of an Internet-style login name (for example, \"someone@example.com\"). If this parameter is NULL, the caller's context is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpPassword",
        "description": "If the lpAccount parameter specifies an account name, this parameter must point to the password to use when connecting to the domain controller. Otherwise, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fUnjoinOptions",
        "description": "Specifies the unjoin options. If this parameter is NETSETUP_ACCT_DELETE, the account is disabled when the unjoin occurs. Note that this option does not delete the account. Currently, there are no other unjoin options defined."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetValidateName function verifies that a name is valid for name type specified(computer name, workgroup name, domain name, or DNS computer name).",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmjoin.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "The \t\t\t\tNetValidateName function validates a name based on the nametype specified. If the NameType parameter is NetSetupMachine, the name passed  in the lpName parameter must be syntactically correct as a NetBIOS name and the name must not currently be in use on the network. If the NameType parameter is NetSetupWorkgroup, the name passed  in the lpName parameter must be syntactically correct as a NetBIOS name, the name must not currently be in use on the network as a unique name, and the name must be different from the computer name. If the NameType parameter is NetSetupDomain, the name passed  in the lpName parameter must be syntactically correct as a NetBIOS or DNS name and the name must currently be registered as a domain name. If the NameType parameter is NetSetupNonExistentDomain, the name passed  in the lpName parameter must be syntactically correct as a NetBIOS or DNS name and the name must currently not be registered as a domain name. If the NameType parameter is NetSetupDnsMachine, the name passed  in the lpName parameter must be syntactically correct as a DNS name. NetBIOS names are limited to maximum length of 16 characters. No special group membership is required to successfully execute the  NetValidateName function. The following example validates a name for a specific type. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetValidateName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpServer",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the computer on which to call the function. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpName",
        "description": "A pointer to a constant string that specifies the name to validate. Depending on the value specified in the NameType parameter, the lpName  parameter can point to a computer name, workgroup name, domain name, or DNS computer name."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpAccount",
        "description": "If the lpName parameter is a domain name, this parameter points to an account name to use when connecting to the domain controller. The string must specify either a domain NetBIOS name and user account (for example, \"REDMOND\\user\") or the user principal name (UPN) of the user in the form of an Internet-style login name (for example, \"someone@example.com\"). If this parameter is NULL, the caller's context is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "lpPassword",
        "description": "If the lpAccount  parameter specifies an account name, this parameter must point to the password to use when connecting to the domain controller. Otherwise, this parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "NETSETUP_NAME_TYPE",
        "name": "NameType",
        "description": "The type of the name passed in the lpName parameter to validate. This parameter can be one of the values from the NETSETUP_NAME_TYPE enumeration type defined in the Lmjoin.h header file. Note that the Lmjoin.h header is automatically included by the Lm.h header file. The Lmjoin.h header files should not be used directly.     The following list shows the possible values for this parameter.     ValueMeaning  NetSetupUnknown 0   The nametype is unknown. If this value is used, the NetValidateName function fails with ERROR_INVALID_PARAMETER.   NetSetupMachine 1   Verify that the NetBIOS computer name is valid and that it is not in use.   NetSetupWorkgroup 2   Verify that the workgroup name is valid.   NetSetupDomain 3   Verify that the domain name exists and that it is a domain.   NetSetupNonExistentDomain 4   Verify that the domain name is not in use.   NetSetupDnsMachine 5   Verify that the DNS computer name is valid. This value is supported on Windows 2000 and later. The application must be compiled with _WIN32_WINNT >= 0x0500 to use this value."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetGetAnyDCName function returns the name of any domain controller (DC) for a domain that is directly trusted by the specified server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetGetAnyDCName function. If servername specifies a stand-alone workstation or a stand-alone server, no domainname is valid. If servername specifies a workstation that is a member of a domain, or a server that is a member of a domain, the domainname must be in the same domain as servername. If servername specifies a domain controller, the domainname must be one of the domains trusted by the domain for which the server is a controller. The domain controller that this call finds has been operational at least once during this call. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGetAnyDCName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "domainname",
        "description": "Pointer to a constant string that specifies the name of the domain. If this parameter is NULL, the name of the domain controller for the primary domain is used. For more information, see the following Remarks section."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to an allocated buffer that receives a string that specifies the server name of a domain controller for the domain. The server name is prefixed by \\\\. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetGetDCName function returns the name of the primary domain controller (PDC). It does not return the name of the backup domain controller (BDC) for the specified domain. Also, you cannot remote this function to a non-PDC server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetGetDCName function. The following code sample demonstrates how to retrieve the primary domain controller using the   NetGetDCName function. The sample calls  NetGetDCName specifying the servername and domainname parameters. If the call succeeds, the code prints information out the name of the primary domain controller. Finally, the sample frees the memory allocated for the buffer where the domain controller name was returned. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGetDCName",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "domainname",
        "description": "A pointer to a constant string that specifies the name of the domain. The domain name must be a NetBIOS domain name (for example, microsoft).  NetGetDCName does not support DNS-style names (for example, microsoft.com). If this parameter is NULL, the function returns the name of the domain controller for the primary domain."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to an allocated buffer that receives a string that specifies the server name of the PDC of the domain. The server name is returned as Unicode string prefixed by \\\\. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The  \t\t\t\tNetGetDisplayInformationIndex function returns the index of the first display information entry whose name begins with a specified string or whose name alphabetically follows the string. You can use this function to determine a starting index for subsequent calls to the  NetQueryDisplayInformation function.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The function only returns information to which the caller has Read access. The caller must have List Contents access to the Domain object, and  Enumerate Entire SAM Domain access on the SAM Server object  located in the System container. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGetDisplayInformationIndex",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "ServerName",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Level",
        "description": "Specifies the level of accounts to query. This parameter can be one of the following values.     ValueMeaning  1   Query all local and global (normal) user accounts.   2   Query all workstation and server user accounts.   3   Query all global groups."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "Prefix",
        "description": "Pointer to a string that specifies the prefix for which to search."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "Index",
        "description": "Pointer to a value that receives the index of the requested entry."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The  \t\t\t\tNetQueryDisplayInformation function returns user account, computer, or group account information. Call this function to quickly enumerate account information for display in user interfaces.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The NetQueryDisplayInformation function only returns information to which the caller has Read access. The caller must have List Contents access to the Domain object, and  Enumerate Entire SAM Domain access on the SAM Server object  located in the System container. The  NetQueryDisplayInformation and  NetGetDisplayInformationIndex functions provide an efficient mechanism for enumerating user and group accounts. When possible, use these functions instead of the  NetUserEnum function or the  NetGroupEnum function. To enumerate trusting domains or member computer accounts, call  NetUserEnum, specifying the appropriate filter value to obtain the account information you require. To enumerate trusted domains, call the  LsaEnumerateTrustedDomains or LsaEnumerateTrustedDomainsEx function. The number of entries returned by this function depends on the security descriptor located on the root domain object. The API will return  either the first 100 entries or the entire set of entries in the domain, depending on the access privileges of the user. The ACE used to control this behavior is \"SAM-Enumerate-Entire-Domain\", and is granted to Authenticated Users by default. Administrators can modify this setting to allow users to enumerate the entire domain. Each call to  NetQueryDisplayInformation returns a maximum of 100 objects. Calling the  NetQueryDisplayInformation function to enumerate domain account information can be costly in terms of performance. If you are programming for Active Directory, you may be able to use methods on the  IDirectorySearch interface to make paged queries against the domain. For more information, see  IDirectorySearch::SetSearchPreference and  IDirectorySearch::ExecuteSearch. To enumerate trusted domains, call the  LsaEnumerateTrustedDomainsEx function. The following code sample demonstrates how to return group account information using a call to the  NetQueryDisplayInformation function. If the user specifies a server name, the sample first calls the  MultiByteToWideChar function to convert the name to Unicode. The sample calls  NetQueryDisplayInformation, specifying information level 3 (NET_DISPLAY_GROUP) to retrieve group account information. If there are entries to return, the sample returns the data and prints the group information. Finally, the code sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetQueryDisplayInformation",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "ServerName",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  1   Return user account information. The SortedBuffer parameter points to an array of  NET_DISPLAY_USER structures.   2   Return individual computer information. The SortedBuffer parameter points to an array of  NET_DISPLAY_MACHINE structures.   3   Return group account information. The SortedBuffer parameter points to an array of  NET_DISPLAY_GROUP structures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Index",
        "description": "Specifies the index of the first entry for which to retrieve information. Specify zero to retrieve account information beginning with the first display information entry. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "EntriesRequested",
        "description": "Specifies the maximum number of entries for which to retrieve information. On Windows 2000 and later, each call to  NetQueryDisplayInformation returns a maximum of 100 objects."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "PreferredMaximumLength",
        "description": "Specifies the preferred maximum size, in bytes, of the system-allocated buffer returned in the SortedBuffer parameter. It is recommended that you set this parameter to MAX_PREFERRED_LENGTH."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "ReturnedEntryCount",
        "description": "Pointer to a value that receives the number of entries in the buffer returned in the SortedBuffer parameter. If this parameter is zero, there are no entries with an index as large as that specified. Entries may be returned when the function's return value is either NERR_Success or ERROR_MORE_DATA."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID*",
        "name": "SortedBuffer",
        "description": "Pointer to a buffer that receives a pointer to a system-allocated buffer that specifies a sorted list of the requested information. The format of this data depends on the value of the Level parameter. Because this buffer is allocated by the system, it must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA. For more information, see the following Return Values section, and the topics  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetGroupAdd function creates a global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the user container is used to perform the access check for this function. The caller must be able to create child objects of the group class. Typically, callers must also have write access to the entire object for calls to this function to succeed. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies a global group name. The buf parameter contains a pointer to a  GROUP_INFO_0 structure.   1   Specifies a global group name and a comment. The buf parameter contains a pointer to a  GROUP_INFO_1 structure.   2   Specifies detailed information about the global group. The buf parameter contains a pointer to a  GROUP_INFO_2 structure. Note that on Windows XP and later, it is recommended that you use  GROUP_INFO_3 instead.   3    Specifies detailed information about the global group. The buf parameter contains a pointer to a  GROUP_INFO_3 structure. Windows 2000:  This level is not supported."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that contains the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the global group information structure in error when ERROR_INVALID_PARAMETER is returned. If this parameter is NULL, the index is not returned on error. For more information, see the  NetGroupSetInfo function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetGroupAddUser function gives an existing user account membership in an existing global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupAddUser",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "GroupName",
        "description": "Pointer to a constant string that specifies the name of the global group in which the user is to be given membership. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "Pointer to a constant string that specifies the name of the user to be given membership in the global group. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The \t\t\t\tNetGroupDel function deletes a global group from the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the global group account to delete. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetGroupDelUser function removes a user from a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupDelUser",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "GroupName",
        "description": "Pointer to a constant string that specifies the name of the global group from which the user's membership should be removed. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "Username",
        "description": "Pointer to a constant string that specifies the name of the user to remove from the global group. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetGroupEnum function retrieves information about each global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The function only returns information to which the caller has Read access. The caller must have List Contents access to the Domain object, and  Enumerate Entire SAM Domain access on the SAM Server object  located in the System container. To determine the exact total number of groups, you must enumerate the entire tree, which can be a costly operation. To enumerate the entire tree, use the resume_handle parameter to continue the enumeration for consecutive calls, and use the entriesread parameter to accumulate the total number of groups. If your application is communicating with a domain controller, you should consider using the  ADSI LDAP Provider to retrieve this type of data more efficiently. The ADSI LDAP Provider implements a set of ADSI objects that support various ADSI interfaces. For more information, see  ADSI Service Providers. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the global group name. The bufptr parameter points to an array of  GROUP_INFO_0 structures.   1   Return the global group name and a comment. The bufptr parameter points to an array of  GROUP_INFO_1 structures.   2   Return detailed information about the global group. The bufptr parameter points to an array of  GROUP_INFO_2 structures. Note that on Windows XP and later, it is recommended that you use  GROUP_INFO_3 instead.   3    Return detailed information about the global group. The bufptr parameter points to an array of  GROUP_INFO_3 structures. Windows 2000:  This level is not supported."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer to receive the global group information structure. The format of this data depends on the value of the level parameter.     The system allocates the memory for this buffer. You must call the  NetApiBufferFree function to deallocate the memory. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of the returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required to hold the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. The total number of entries is only a hint. For more information about determining the exact number of entries, see the following Remarks section."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD_PTR",
        "name": "resume_handle",
        "description": "Pointer to a variable that contains a resume handle that is used to continue the global group enumeration. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetGroupGetInfo function retrieves information about a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the global group for which to retrieve information. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the global group name. The bufptr parameter points to a  GROUP_INFO_0 structure.   1   Return the global group name and a comment. The bufptr parameter points to a  GROUP_INFO_1 structure.   2   Return detailed information about the global group. The bufptr parameter points to a  GROUP_INFO_2 structure. Note that on Windows XP and later, it is recommended that you use  GROUP_INFO_3 instead.   3    Return detailed information about the global group. The bufptr parameter points to a  GROUP_INFO_3 structure. Windows 2000:  This level is not supported."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address of the buffer that receives the global group information structure. The format of this data depends on the value of the level parameter. The system allocates the memory for this buffer. You must call the  NetApiBufferFree function to deallocate the memory. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The \t\t\t\tNetGroupGetUsers function retrieves a list of the members in a particular global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. To grant one user membership in an existing global group, you can call the  NetGroupAddUser function. To remove a user from a global group, call the  NetGroupDelUser function. For information about replacing the membership of a global group, see  NetGroupSetUsers. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupGetUsers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "A pointer to a constant string that specifies the name of the global group whose members are to be listed. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning  0   Return the global group's member names. The bufptr parameter points to an array of  GROUP_USERS_INFO_0 structures.   1   Return the global group's member names and attributes. The bufptr parameter points to an array of  GROUP_USERS_INFO_1 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the address of the buffer that receives the information structure. The system allocates the memory for this buffer. You must call the  NetApiBufferFree function to deallocate the memory. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length of the returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required to hold the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD_PTR",
        "name": "ResumeHandle",
        "description": "A pointer to a variable that contains a resume handle that is used to continue an existing user enumeration. The handle should be zero on the first call and left unchanged for subsequent calls. If ResumeHandle parameter is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetGroupSetInfo function sets the parameters of a global group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. Typically, callers must have write access to the entire object for calls to this function to succeed. The correct way to set the new name of a global group is to call the  NetGroupSetInfo function, using a  GROUP_INFO_0 structure. Specify the new value in the grpi0_name member. If you use a  GROUP_INFO_1 structure and specify the value in the grpi1_name member, the new name value is ignored. If the  NetGroupSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the group information structure that is invalid. (A group information structure begins with GROUP_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix grpi*_ indicates that the member can begin with multiple prefixes, for example, grpi1_ or grpi2_.)  User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the global group for which to set information. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies a global group name. The buf parameter points to a  GROUP_INFO_0 structure.   1   Specifies a global group name and a comment. The buf parameter points to a  GROUP_INFO_1 structure.   2   Specifies detailed information about the global group. The buf parameter points to a  GROUP_INFO_2 structure. Note that on Windows XP and later, it is recommended that you use  GROUP_INFO_3 instead.   3    Specifies detailed information about the global group. The buf parameter points to a  GROUP_INFO_3 structure. Windows 2000:  This level is not supported.   1002   Specifies a comment only about the global group. The buf parameter points to a  GROUP_INFO_1002 structure.   1005   Specifies global group attributes. The buf parameter points to a  GROUP_INFO_1005 structure.     For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that contains the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the group information structure in error following an ERROR_INVALID_PARAMETER error code. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetGroupSetUsers function sets the membership for the specified global group. Each user you specify is enrolled as a member of the global group. Users you do not specify, but who are currently members of the global group, will have their membership revoked.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Group object is used to perform the access check for this function. You can replace the global group membership with an entirely new list of members by calling the  NetGroupSetUsers function. The typical sequence of steps to perform this follows. To replace the global group membership To grant one user membership in an existing global group, you can call the  NetGroupAddUser function. To remove a user from a global group, call the  NetGroupDelUser function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetGroupSetUsers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "A pointer to a constant string that specifies the name of the global group of interest. For more information, see the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.     ValueMeaning  0   The buf parameter points to an array of  GROUP_USERS_INFO_0 structures that specify user names.   1   The buf parameter points to an array of  GROUP_USERS_INFO_1 structures that specifies user names and the attributes of the group."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "A pointer to the buffer that contains the data. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "totalentries",
        "description": "The number of entries in the buffer pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetLocalGroupAdd function creates a local group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the user container is used to perform the access check for this function. The caller must be able to create child objects of the group class. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If the  NetLocalGroupAdd function returns ERROR_INVALID_PARAMETER and a NULL pointer was not passed in parm_err parameter, on return the parm_err parameter indicates the first member of the local group information structure that is invalid. The format of the local group information structure is specified in the level parameter. A pointer to the local group information structure is passed in buf parameter. The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error.  When making requests to a domain controller and Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same results as the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.     ValueMeaning  0   A local group name. The buf parameter points to a  LOCALGROUP_INFO_0 structure.   1   A local group name and a comment to associate with the group. The buf parameter points to a  LOCALGROUP_INFO_1 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "A pointer to a buffer that contains the local group information structure. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "A pointer to a value that receives the index of the first member of the local group information structure to cause the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error. For more information, see the Remarks section in the  NetLocalGroupSetInfo topic."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  \t\t\t\tNetLocalGroupAddMembers function adds membership of one or more existing user accounts or global group accounts to an existing local group. The function does not change the membership status of users or global groups that are currently members of the local group.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupAddMembers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group to which the specified users or global groups will be added. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies the  security identifier (SID) of the new local group member. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_0 structures.   3   Specifies the domain and name of the new local group member. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_3 structures."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that contains the data for the new local group members. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "totalentries",
        "description": "Specifies the number of entries in the buffer pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The \t\t\t\tNetLocalGroupDel function deletes a local group account and all its members from the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group account to delete. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  \t\t\t\tNetLocalGroupDelMembers function removes one or more members from an existing local group. Local group members can be users or global groups.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupDelMembers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group from which the specified users or global groups will be removed. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies the  security identifier (SID) of a local group member to remove. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_0 structures.   3   Specifies the domain and name of a local group member to remove. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_3 structures."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that specifies the members to be removed. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "totalentries",
        "description": "Specifies the number of entries in the array pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetLocalGroupEnum function returns information about each local group account on the specified server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The function only returns information to which the caller has Read access. The caller must have List Contents access to the Domain object, and  Enumerate Entire SAM Domain access on the SAM Server object  located in the System container. To determine the exact total number of local groups, you must enumerate the entire tree, which can be a costly operation. To enumerate the entire tree, use the resumehandle parameter to continue the enumeration for consecutive calls, and use the entriesread parameter to accumulate the total number of local groups. If your application is communicating with a domain controller, you should consider using the  ADSI LDAP Provider to retrieve this type of data more efficiently. The ADSI LDAP Provider implements a set of ADSI objects that support various ADSI interfaces. For more information, see  ADSI Service Providers. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return local group names. The bufptr parameter points to an array of  LOCALGROUP_INFO_0 structures.   1   Return local group names and the comment associated with each group. The bufptr parameter points to an array of  LOCALGROUP_INFO_1 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address of the buffer that receives the information structure. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the approximate total number of entries that could have been enumerated from the current resume position. The total number of entries is only a hint. For more information about determining the exact number of entries, see the following Remarks section."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD_PTR",
        "name": "resumehandle",
        "description": "Pointer to a value that contains a resume handle that is used to continue an existing local group search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The  \t\t\t\tNetLocalGroupGetInfo function retrieves information about a particular local group account on a server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group account for which the information will be retrieved. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be the following value.     ValueMeaning  1   Return the comment associated with the local group. The bufptr parameter points to a  LOCALGROUP_INFO_1 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address of the buffer that receives the return information structure. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The  \t\t\t\tNetLocalGroupGetMembers function retrieves a list of the members of a particular local group in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory. Local group members can be users or global groups.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. If this function returns ERROR_MORE_DATA, then it must be repeatedly called until ERROR_SUCCESS or NERR_success is returned.  Failure to do so can result in an RPC connection leak. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupGetMembers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "localgroupname",
        "description": "Pointer to a constant string that specifies the name of the local group whose members are to be listed. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the  security identifier (SID) associated with the local group member. The bufptr parameter points to an array of  LOCALGROUP_MEMBERS_INFO_0 structures.   1   Return the SID and account information associated with the local group member. The bufptr parameter points to an array of  LOCALGROUP_MEMBERS_INFO_1 structures.   2   Return the SID, account information, and the domain name associated with the local group member. The bufptr parameter points to an array of  LOCALGROUP_MEMBERS_INFO_2 structures.   3   Return the account and domain names of the local group member. The bufptr parameter points to an array of  LOCALGROUP_MEMBERS_INFO_3 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address that receives the return information structure. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD_PTR",
        "name": "resumehandle",
        "description": "Pointer to a value that contains a resume handle which is used to continue an existing group member search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  \t\t\t\tNetLocalGroupSetInfo function changes the name of an existing local group. The function also associates a comment with a local group.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. Typically, callers must have write access to the entire object for calls to this function to succeed. To specify the new name of an existing local group, call  NetLocalGroupSetInfo with  LOCALGROUP_INFO_0 and specify a value using the lgrpi0_name member. If you call the  NetLocalGroupSetInfo function with  LOCALGROUP_INFO_1 and specify a new value using the lgrpi1_name member, that value will be ignored. If the  NetLocalGroupSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the local group information structure that is invalid. (A local group information structure begins with LOCALGROUP_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix lgrpi*_ indicates that the member can begin with multiple prefixes, for example, lgrpi0_ or lgrpi1_.)  User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group account to modify. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies the local group name. The buf parameter points to a  LOCALGROUP_INFO_0 structure. Use this level to change the name of an existing local group.   1   Specifies the local group name and a comment to associate with the group. The buf parameter points to a  LOCALGROUP_INFO_1 structure.   1002   Specifies a comment to associate with the local group. The buf parameter points to a  LOCALGROUP_INFO_1002 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that contains the local group information. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the local group information structure that caused the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The  \t\t\t\tNetLocalGroupSetMembers function sets the membership for the specified local group. Each user or global group specified is made a member of the local group. Users or global groups that are not specified but who are currently members of the local group will have their membership revoked.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the LocalGroup object is used to perform the access check for this function. You can replace the local group membership with an entirely new list of members by calling the  NetLocalGroupSetMembers function. The typical sequence of steps to perform this follows. To replace the local group membership To add one or more existing user accounts or global group accounts to an existing local group, you can call the  NetLocalGroupAddMembers function. To remove one or more members from an existing local group, call the  NetLocalGroupDelMembers function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management local group functions. For more information, see  IADsGroup. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetLocalGroupSetMembers",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "groupname",
        "description": "Pointer to a constant string that specifies the name of the local group in which the specified users or global groups should be granted membership. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies the  security identifier (SID) associated with a local group member. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_0 structures.   3   Specifies the account and domain names of the local group member. The buf parameter points to an array of  LOCALGROUP_MEMBERS_INFO_3 structures."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to the buffer that contains the member information. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "totalentries",
        "description": "Specifies a value that contains the total number of entries in the buffer pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "[This function is not supported as of Windows Vista because the messenger service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmmsg.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Server Operators can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs and ACEs, see  Access Control Model. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetMessageBufferSend",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "msgname",
        "description": "Pointer to a constant string that specifies the message alias to which the message buffer should be sent."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "fromname",
        "description": "Pointer to a constant string specifying who the message is from. If this parameter is NULL, the message is sent from the local computer name."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that contains the message text. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "buflen",
        "description": "Specifies a value that contains the length, in bytes, of the message text pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is not supported as of Windows Vista because the messenger service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmmsg.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators local group can successfully execute the  NetMessageNameAdd function on a remote server. The forward action flag is no longer a parameter to the LAN Manager 2.xNetMessageNameAdd function because message forwarding is no longer supported. If the  NetMessageNameAdd function detects that a forwarded version of msgname exists on the network, the function will fail with error NERR_Already_Exists. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetMessageNameAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "msgname",
        "description": "Pointer to a constant string that specifies the message alias to add. The string cannot be more than 15 characters long."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is not supported as of Windows Vista because the messenger service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmmsg.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators local group can successfully execute the  NetMessageNameDel function on a remote server. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetMessageNameDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "msgname",
        "description": "Pointer to a constant string that specifies the message alias to delete. The string cannot be more than 15 characters long."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "[This function is not supported as of Windows Vista because the messenger service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmmsg.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators local group can successfully execute the  NetMessageNameEnum function on a remote server. To retrieve information about a particular message alias in the message name table, you can call the  NetMessageNameGetInfo function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetMessageNameEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return message aliases. The bufptr parameter points to an array of  MSG_INFO_0 structures.   1   Return message aliases. The bufptr parameter points to an array of  MSG_INFO_1 structures. This level exists only for compatibility. Message forwarding is not supported."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of the returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resume_handle",
        "description": "Pointer to a value that contains a resume handle which is used to continue an existing message alias search. The handle should be zero on the first call and left unchanged for subsequent calls. If resume_handle is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "[This function is not supported as of Windows Vista because the messenger service is not supported.]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmmsg.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators local group can successfully execute the  NetMessageNameGetInfo function on a remote server. To list all the message aliases in a message name table, you can call the  NetMessageNameEnum function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetMessageNameGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "msgname",
        "description": "Pointer to a constant string that specifies the message alias for which to return information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the message alias. The bufptr parameter points to a  MSG_INFO_0 structure.   1   Return the message alias. The bufptr parameter points to a  MSG_INFO_1 structure. This level exists only for compatibility. Message forwarding is not supported."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Forces a resource to close. This function can be used when an error prevents closure by any other means. You should use  NetFileClose with caution because it does not write data cached on the client system to the file before closing the file.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmshare.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetFileClose function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetFileClose",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.     This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE is defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fileid",
        "description": "Specifies the file identifier of the opened resource instance to close."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Returns information about some or all open files on a server, depending on the parameters specified.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmshare.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetFileEnum function. You can call the  NetFileGetInfo function to retrieve information about a particular opening of a server resource. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling  NetFileEnum. For more information, see  IADsResource and  IADsFileServiceOperations. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetFileEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.     This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE is defined."
      },
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "basepath",
        "description": "Pointer to a string that specifies a qualifier for the returned information. If this parameter is NULL, all open resources are enumerated. If this parameter is not NULL, the function enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.) This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE is defined."
      },
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "username",
        "description": "Pointer to a string that specifies the name of the user or the name of the connection. If the string begins with two backslashes (\"\\\\\"), then it indicates the name of the connection, for example, \"\\\\127.0.0.1\" or \"\\\\ClientName\". The part of the connection name after the backslashes is the same as the client name in the session information structure returned by the NetSessionEnum function. If the string does not begin with two backslashes, then it indicates the name of the user. If this parameter is not NULL, its value serves as a qualifier for the enumeration. The files returned are limited to those that have user names or connection names that match the qualifier. If this parameter is NULL, no user-name qualifier is used. Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This parameter is a pointer to a string that specifies the name of the user. If this parameter is not NULL, its value serves as a qualifier for the enumeration. The files returned are limited to those that have user names matching the qualifier. If this parameter is NULL, no user-name qualifier is used. This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE is defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  2    Return the file identification number. The bufptr parameter points to an array of  FILE_INFO_2 structures.   3    Return information about the file. The bufptr parameter points to an array of  FILE_INFO_3 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address of the buffer that receives the information. The format of this data depends on the value of the level parameter.     This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD_PTR",
        "name": "resume_handle",
        "description": "Pointer to a value that contains a resume handle which is used to continue an existing file search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about a particular opening of a server resource.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmshare.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetFileGetInfo function. You can call the  NetFileEnum function to retrieve information about multiple files open on a server. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling  NetFileGetInfo. For more information, see  IADsResource and  IADsFileServiceOperations. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetFileGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.     This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE is defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "fileid",
        "description": "Specifies the file identifier of the open resource for which to return information. The value of this parameter must have been returned in a previous enumeration call. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  2   Return the file identification number. The bufptr parameter is a pointer to a  FILE_INFO_2 structure.   3   Return the file identification number and other information about the file. The bufptr parameter is a pointer to a  FILE_INFO_3 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the address of the buffer that receives the information. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetRemoteComputerSupports function queries the redirector to retrieve the optional features the remote system supports. Features include Unicode, Remote Procedure Call (RPC), and Remote Administration Protocol support. The function establishes a network connection if one does not exist.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmremutl.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetRemoteComputerSupports function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRemoteComputerSupports",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "UncServerName",
        "description": "Pointer to a constant string that specifies the name of the remote server to query. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "OptionsWanted",
        "description": "Specifies a value that contains a set of bit flags indicating the features of interest. This parameter must be at least one of the following values.     ValueMeaning  SUPPORTS_REMOTE_ADMIN_PROTOCOL   Requests Remote Administration Protocol support.   SUPPORTS_RPC   Requests RPC support.   SUPPORTS_SAM_PROTOCOL   Requests Security Account Manager (SAM) support.   SUPPORTS_UNICODE   Requests Unicode standard support.   SUPPORTS_LOCAL   Requests support for the first three values listed in this table. If UNICODE is defined by the calling application, requests the four features listed previously."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "OptionsSupported",
        "description": "Pointer to a value that receives a set of bit flags. The flags indicate which features specified by the OptionsWanted parameter are implemented on the computer specified by the UncServerName parameter. (All other bits are set to zero.)     The value of this parameter is valid only when the  NetRemoteComputerSupports function returns NERR_Success."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The \t\t\t\tNetRemoteTOD function returns the time of day information from a specified server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmremutl.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "No special group membership is required to successfully execute the  NetRemoteTOD function. The following code sample demonstrates how to retrieve and print the current date and time with a call to the  NetRemoteTOD function. To do this, the sample uses the  TIME_OF_DAY_INFO structure. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetRemoteTOD",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "UncServerName",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "BufferPtr",
        "description": "Pointer to the address that receives the  TIME_OF_DAY_INFO information structure. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[NetScheduleJobAdd is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmat.h (include Lmat.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "Normally only members of the local Administrators group on the computer where the schedule job is being added can successfully execute this function. If the server name passed in the string pointed to by the Servername parameter is a remote server, then only members of the local Administrators group on the  remote server can successfully execute this function. If the following registry value has the least significant bit set (for example, 0x00000001), then users belonging to the Server Operators group can also successfully execute this function. HKLM\\System\\CurrentControlSet\\Control\\Lsa\\SubmitControl The following are examples of how to schedule jobs using different properties supported by the  NetScheduleJobAdd function. To schedule a job that executes once: The job executes at the time specified by the JobTime member of the  AT_INFO structure pointed to by the Buffer parameter. After the job executes, it is deleted. To schedule and delete a job that executes multiple times: The job executes at the time specified by the JobTime member of the  AT_INFO structure pointed to by the Buffer parameter, once for each day set in the  DaysOfMonth or DaysOfWeek members of the  AT_INFO structure. After each job executes, the corresponding bit is cleared. When the last bit is cleared, the job is deleted. To schedule a job that executes periodically: The job will execute periodically, at the time specified by the JobTime member of the  AT_INFO structure pointed to by the Buffer parameter, on each day set in the DaysOfMonth or DaysOfWeek member of the  AT_INFO structure. The job will not be deleted as a result of the repeated executions. The only way to delete the job is by an explicit call to the  NetScheduleJobDel function. See  the AT_INFO structure for a description of the DaysOfWeek, DaysOfMonth, and  job property bitmasks. On Windows 2000, the earlier AT service and the Task Scheduler were combined. The Task Scheduler service was only accurate to the minute.  Therefore, the NetScheduleJobAdd function only uses hours and minutes specified in the JobTime member of the AT_INFO structure when a job is scheduled to run. Starting with   Windows Vista, the precision for the Task Scheduler was increased to the second. Therefore, the NetScheduleJobAdd function uses only the hours, minutes, and seconds specified in the JobTime member of the AT_INFO structure when a job is scheduled to run. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetScheduleJobAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "Buffer",
        "description": "A pointer to an  AT_INFO structure describing the job to submit. For more information about scheduling jobs using different job properties, see the following Remarks section and  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "JobId",
        "description": "A pointer that receives a job identifier for the newly submitted job. This entry is valid only if the function returns successfully."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[NetScheduleJobDel is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmat.h (include Lmat.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "Normally only members of the local Administrators group on the computer where the schedule job is being deleted can successfully execute this function. If the server name passed in the string pointed to by the Servername parameter is a remote server, then only members of the local Administrators group on the  server can successfully execute this function. If the following registry value has the least significant bit set (for example, 0x00000001), then users belonging to the Server Operators group can also successfully execute this function. HKLM\\System\\CurrentControlSet\\Control\\Lsa\\SubmitControl Call the  NetScheduleJobEnum function to retrieve the job identifier for one or more scheduled jobs. The  NetScheduleJobDel function deletes all jobs whose job identifiers are in the range MinJobId through MaxJobId. To delete all scheduled jobs at the server, you can call  NetScheduleJobDel specifying MinJobId equal to 0 and MaxJobId equal to \u00e2\u0080\u0093 1. To delete one job, specify the job's identifier for both the MinJobId parameter and the MaxJobId parameter. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetScheduleJobDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "MinJobId",
        "description": "The minimum job identifier. Jobs with a job identifier smaller than MinJobId will not be deleted."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "MaxJobId",
        "description": "The  maximum job identifier. Jobs with a job identifier larger than MaxJobId will not be deleted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "[NetScheduleJobEnum is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmat.h (include Lmat.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "Normally only members of the local Administrators group on the computer where the schedule job is being enumerated can successfully execute this function. If the server name passed in the string pointed to by the Servername parameter is a remote server, then only members of the local Administrators group on the  server can successfully execute this function. If the following registry value has the least significant bit set (for example, 0x00000001), then users belonging to the Server Operators group can also successfully execute this function. HKLM\\System\\CurrentControlSet\\Control\\Lsa\\SubmitControl Each entry returned contains an  AT_ENUM structure. The value of the JobId member can be used when calling functions that require a job identifier parameter, such as the  NetScheduleJobDel function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetScheduleJobEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "PointerToBuffer",
        "description": "A pointer to the buffer that receives the data. The return information is an array of  AT_ENUM structures. The buffer is allocated by the system and must be freed using a single call to the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "PreferredMaximumLength",
        "description": "A value that indicates the preferred maximum length of the returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "EntriesRead",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "TotalEntries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "ResumeHandle",
        "description": "A pointer to a value that contains a resume handle which is used to continue a job enumeration. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[NetScheduleJobGetInfo is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmat.h (include Lmat.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "Normally only members of the local Administrators group on the computer where the schedule job is being enumerated can successfully execute this function. If the server name passed in the string pointed to by the Servername parameter is a remote server, then only members of the local Administrators group on the  server can successfully execute this function. If the following registry value has the least significant bit set (for example, 0x00000001), then users belonging to the Server Operators group can also successfully execute this function. HKLM\\System\\CurrentControlSet\\Control\\Lsa\\SubmitControl ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetScheduleJobGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "Servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "JobId",
        "description": "A value that indicates the identifier of the job for which to retrieve information."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "PointerToBuffer",
        "description": "A pointer to the buffer that receives the  AT_INFO structure describing the specified job. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[GetNetScheduleAccountInformation is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Mstask.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "AtAcct.h",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates the function succeeded, and the account information is  returned in wszAccount. A value of S_FALSE  indicates the function succeeded, and the account is the Local System account (no information will be returned in wszAccount). Any other return values indicate an error condition. ",
    "remarks": "To successfully call the GetNetScheduleAccountInformation function,  the caller should have read access to the task folder  which is usually %windir%\\tasks or as defined in the following registry setting: HKLM\\SOFTWARE\\Microsoft\\SchedulingAgent\\TasksFolder\\ ",
    "return_type": "HRESULT",
    "category": "Network Management",
    "name": "GetNetScheduleAccountInformation",
    "is_callback": 0,
    "dll": "Mstask.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszServerName",
        "description": "A NULL-terminated wide character string for the name of the computer whose account information is being retrieved."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ccAccount",
        "description": "The number of characters, including the NULL terminator, allocated for wszAccount. The maximum allowed length for this value is the maximum domain name length plus the maximum user name length plus 2, expressed as DNLEN + UNLEN + 2. (The last two characters are the \"\\\" character and the NULL terminator.)"
      },
      {
        "in_out": "_Out_",
        "type": "WCHAR",
        "name": "wszAccount[]",
        "description": "An array of wide characters, including the NULL terminator, that receives the account information."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[SetNetScheduleAccountInformation is no longer available for use as of Windows 8. Instead, use the  Task Scheduler 2.0 Interfaces.  ]",
    "library": "Mstask.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "AtAcct.h",
    "return_value": "The return value is an HRESULT. A value of S_OK indicates the account name and password were successfully set. Any other value indicates an error condition. If the function fails, some of the possible return values are listed below.  ",
    "remarks": "The SetNetScheduleAccountInformation impersonates the caller. Only members of the local Administrators group on the computer where the schedule account information is being set can successfully execute this function. Note that NULL passwords are not allowed. ",
    "return_type": "HRESULT",
    "category": "Network Management",
    "name": "SetNetScheduleAccountInformation",
    "is_callback": 0,
    "dll": "Mstask.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszServerName",
        "description": "A NULL-terminated wide character string for the name of the computer whose account information is being set."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszAccount",
        "description": "A pointer to a NULL-terminated wide character string for the account. To specify the local system account, set this parameter to NULL."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "pwszPassword",
        "description": "A pointer to a NULL-terminated wide character string for the password. For information about securing password information, see Handling Passwords."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetServerDiskEnum function retrieves a list of disk drives on a server. The function returns an array of three-character strings (a drive letter, a colon, and a terminating null character).",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerDiskEnum function on a remote computer. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same results you can achieve by calling the network management server functions. For more information, see  the IADsComputer interface reference. The following code sample demonstrates how to call the  NetServerDiskEnum function to retrieve a list of disk drives on a server. The sample calls  NetServerDiskEnum, specifying the information level 0 (required). If there are entries to return, and the user has access to the information, it prints a list of the drives, in the format of a three-character string: a drive letter, a colon, and a terminating null character. The sample also prints the total number of entries that are available and a hint about the number of entries actually enumerated. Finally, the code sample frees the memory allocated for the buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerDiskEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The level of information required. A value of zero is the only valid level."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The data is an array of three-character strings (a drive letter, a colon, and a terminating null character). This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths.  Note  This parameter is currently ignored."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resume_handle",
        "description": "A pointer to a value that contains a resume handle which is used to continue an existing server disk search. The handle should be zero on the first call and left unchanged for subsequent calls. If the resume_handle parameter is a NULL pointer, then no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "The \t\t\t\tNetServerEnum function lists all servers of the specified type that are visible in a domain.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes:  ",
    "remarks": "The \t\t\t\tNetServerEnum function is used to list all servers of the specified type that are visible in a domain. For example, an application can call  NetServerEnum to list all domain controllers only or all servers that run instances of SQL server only. An application combine the bit masks for various server types in the servertype parameter to list several types. For example, a value of SV_TYPE_WORKSTATION | SVTYPE_SERVER (0x00000003) combines the bit masks for SV_TYPE_WORKSTATION (0x00000001) and SV_TYPE_SERVER (0x00000002). If you require more information for a specific server, call the  WNetEnumResource function. No special group membership is required to successfully execute the  NetServerEnum function. If you specify the value SV_TYPE_LOCAL_LIST_ONLY, the  NetServerEnum function returns the list of servers that the browser maintains internally. This has meaning only on the master browser (or on a computer that has been the master browser in the past). The master browser is the computer that currently has rights to determine which computers can be servers or workstations on the network. If there are no servers found that match the types specified in the servertype parameter, the  NetServerEnum function returns the bufptr parameter as NULL and DWORD values pointed to by the entriesread and totalentries parameters are set to zero. The  NetServerEnum function depends on the browser service being installed and running. If no browser servers are found, then NetServerEnum fails with ERROR_NO_BROWSER_SERVERS_FOUND. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same function you can achieve by calling the network management server functions. For more information, see  IADsComputer. The following code sample demonstrates how to list all servers that are visible in a  domain with a call to the  NetServerEnum function. The sample calls  NetServerEnum, specifying information level 101 ( SERVER_INFO_101). If any servers are found, the sample code loops through the entries and prints the retrieved data. If the server is a domain controller, it identifies the server as either a primary domain controller (PDC) or a backup domain controller (BDC). The sample also prints the total number of entries available and a hint about the number of entries actually enumerated, warning the user if all entries were not enumerated. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Reserved; must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning  100   Return server names and platform information. The bufptr parameter points to an array of  SERVER_INFO_100 structures.   101   Return server names, types, and associated data. The bufptr parameter points to an array of  SERVER_INFO_101 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of visible servers and workstations on the network. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "servertype",
        "description": "A value that filters the server entries to return from the enumeration. This parameter can be a combination of the following values defined in the Lmserver.h header file.  ValueMeaning  SV_TYPE_WORKSTATION 0x00000001   All workstations.   SV_TYPE_SERVER 0x00000002   All computers that run the Server service.   SV_TYPE_SQLSERVER 0x00000004   Any server that runs an instance of Microsoft SQL Server.   SV_TYPE_DOMAIN_CTRL 0x00000008   A server that is primary domain controller.   SV_TYPE_DOMAIN_BAKCTRL 0x00000010   Any server that is a  backup domain controller.   SV_TYPE_TIME_SOURCE 0x00000020   Any server that runs the Timesource service.   SV_TYPE_AFP 0x00000040   Any server that runs the Apple Filing Protocol (AFP) file service.   SV_TYPE_NOVELL 0x00000080   Any server that is a Novell server.   SV_TYPE_DOMAIN_MEMBER 0x00000100   Any computer that is LAN Manager 2.x domain member.   SV_TYPE_PRINTQ_SERVER 0x00000200   Any computer that shares a print queue.   SV_TYPE_DIALIN_SERVER 0x00000400   Any server that runs a dial-in service.   SV_TYPE_XENIX_SERVER 0x00000800   Any server that is a Xenix server.   SV_TYPE_SERVER_UNIX 0x00000800   Any server that is a UNIX server. This is the same as the SV_TYPE_XENIX_SERVER.   SV_TYPE_NT 0x00001000   A workstation or server.   SV_TYPE_WFW 0x00002000   Any computer that runs Windows for Workgroups.   SV_TYPE_SERVER_MFPN 0x00004000   Any server that runs the Microsoft File and Print for NetWare service.   SV_TYPE_SERVER_NT 0x00008000   Any server that is not a domain controller.   SV_TYPE_POTENTIAL_BROWSER 0x00010000   Any computer that can run the browser service.   SV_TYPE_BACKUP_BROWSER 0x00020000   A computer that runs a browser service as backup.   SV_TYPE_MASTER_BROWSER 0x00040000   A computer that runs the master browser service.   SV_TYPE_DOMAIN_MASTER 0x00080000   A computer that runs the domain master browser.   SV_TYPE_SERVER_OSF 0x00100000   A computer that runs OSF/1.   SV_TYPE_SERVER_VMS 0x00200000   A computer that runs Open Virtual Memory System (VMS).   SV_TYPE_WINDOWS 0x00400000   A computer that runs Windows.   SV_TYPE_DFS 0x00800000   A computer that is the root of Distributed File System (DFS) tree.   SV_TYPE_CLUSTER_NT 0x01000000   Server clusters available in the domain.   SV_TYPE_TERMINALSERVER 0x02000000   A server running the Terminal Server service.   SV_TYPE_CLUSTER_VS_NT 0x04000000   Cluster virtual servers available in the domain. Windows 2000:  This value is not supported.   SV_TYPE_DCE 0x10000000   A computer that runs  IBM Directory and Security Services (DSS) or equivalent.   SV_TYPE_ALTERNATE_XPORT 0x20000000   A computer that over an alternate transport.   SV_TYPE_LOCAL_LIST_ONLY 0x40000000   Any computer maintained in a list by the browser. See the following Remarks section.   SV_TYPE_DOMAIN_ENUM 0x80000000   The primary domain.   SV_TYPE_ALL 0xFFFFFFFF   All servers. This is a convenience that will return all possible servers."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "domain",
        "description": "A pointer to a constant string that specifies the name of the domain for which a list of servers is to be returned. The domain name must be a NetBIOS domain name (for example, microsoft).  The NetServerEnum function does not support DNS-style names (for example, microsoft.com).  If this parameter is NULL, the primary domain is implied."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "LPDWORD",
        "name": "resume_handle",
        "description": "Reserved; must be set to zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetServerGetInfo function retrieves current configuration information for the specified server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only the Administrators or Server Operators local group, or those with Print or Server Operator group membership, can successfully execute the  NetServerGetInfo function at level 102. No special group membership is required for level 100 or level 101 calls. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management server functions. For more information, see  IADsComputer. The following code sample demonstrates how to retrieve current configuration information for a server using a call to the  NetServerGetInfo function. The sample calls  NetServerGetInfo, specifying information level 101 (SERVER_INFO_101). If the call succeeds, the code attempts to identify the type of server. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.  ValueMeaning  100   Return the server name and platform information. The bufptr parameter points to a  SERVER_INFO_100 structure.   101   Return the server name, type, and associated software. The bufptr parameter points to a  SERVER_INFO_101 structure.   102   Return the server name, type, associated software, and other attributes. The bufptr parameter points to a  SERVER_INFO_102 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter.     This buffer is allocated by the system and must be freed using the  NetApiBufferFree function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetServerSetInfo function sets a server's operating parameters; it can set them individually or collectively. The information is stored in a way that allows it to remain in effect after the system has been reinitialized.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerSetInfo function. If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management server functions. For more information, see  IADsComputer. If the  NetServerSetInfo function returns ERROR_INVALID_PARAMETER, you can use the ParmError parameter to indicate the first member of the server information structure that is invalid. (A server information structure begins with SERVER_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the ParmError parameter and the corresponding structure member that is in error. (The prefix sv*_ indicates that the member can begin with multiple prefixes, for example, sv101_ or sv402_.)  The following code sample demonstrates how to call the  NetServerSetInfo function. The sample calls  NetServerSetInfo, specifying the level parameter as 1005 (required) to set the sv1005_comment member of the SERVER_INFO_1005 structure. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  101   Specifies the server name, type, and associated software. The buf  parameter points to a  SERVER_INFO_101 structure.   102   Specifies the server name, type, associated software, and other attributes. The buf parameter points to a  SERVER_INFO_102 structure.   402   Specifies detailed information about the server. The buf parameter points to a  SERVER_INFO_402 structure.   403   Specifies detailed information about the server. The buf parameter points to a  SERVER_INFO_403 structure.     In addition, levels 1001-1006, 1009-1011, 1016-1018, 1021, 1022, 1028, 1029, 1037, and 1043 are valid based on the restrictions for LAN Manager systems."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to a buffer that receives the server information. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "ParmError",
        "description": "Pointer to a value that receives the index of the first member of the server information structure that causes the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetServerComputerNameAdd function enumerates the transports on which the specified server is active, and binds the emulated server name to each of the transports.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. Note that  NetServerComputerNameAdd succeeds if the emulated server name specified is added to at least one transport. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerComputerNameAdd function. The server specified by the ServerName parameter continues to support all names it was supporting, and additionally begins to support new names supplied by successful calls to the  NetServerComputerNameAdd function. Name emulation that results from a call to  NetServerComputerNameAdd ceases when the server reboots or restarts. To discontinue name emulation set by a previous call to  NetServerComputerNameAdd without restarting or rebooting, you can call the  NetServerComputerNameDel function. The  NetServerComputerNameAdd function is typically used when a system administrator replaces a server, but wants to keep the conversion transparent to users. Following is an example of a call to the NetServerComputerNameAdd function requesting that \\\\Server1 also respond to requests for \\\\Server2. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerComputerNameAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "ServerName",
        "description": "Pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "EmulatedDomainName",
        "description": "Pointer to a string that contains the domain name the specified server should use when announcing its presence using the EmulatedServerName. This parameter is optional."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "EmulatedServerName",
        "description": "Pointer to a null-terminated character string that contains the emulated name the server should begin supporting in addition to the name specified by the ServerName parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The  \t\t\t\tNetServerTransportEnum function supplies information about transport protocols that are managed by the server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only Authenticated Users can successfully call this function. Windows XP/2000:  No special group membership is required to successfully execute this function. The following code sample demonstrates how to retrieve information about transport protocols that are managed by the server, using a call to the  NetServerTransportEnum function. The sample calls  NetServerTransportEnum, specifying information level 0 ( SERVER_TRANSPORT_INFO_0). The sample prints the name of each transport protocol and the total number enumerated. Finally, the code sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerTransportEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return information about the transport protocol, including name, address, and location on the network. The bufptr parameter points to an array of  SERVER_TRANSPORT_INFO_0 structures.   1   Return information about the transport protocol, including name, address, network location, and domain. The bufptr parameter points to an array of  SERVER_TRANSPORT_INFO_1 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resumehandle",
        "description": "Pointer to a value that contains a resume handle which is used to continue an existing server transport search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetServerTransportAddEx function binds the specified server to the transport protocol. This extended function allows the calling application to specify the  SERVER_TRANSPORT_INFO_0, SERVER_TRANSPORT_INFO_1,  SERVER_TRANSPORT_INFO_2, or  SERVER_TRANSPORT_INFO_3 information levels.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerTransportAddEx function. If you add a transport protocol to a server using a call to the  NetServerTransportAddEx function, the connection will not remain after the server reboots or restarts. The  NetServerComputerNameAdd function is a utility function. It combines the features of the  NetServerTransportEnum function and the  NetServerTransportAddEx function, allowing you to specify an emulated server name. On Windows Server 2008  and Windows Vista with Service Pack 1 (SP1), every name registered with the Windows remote file server (SRV) is designated as either a scoped name or a non-scoped name.  Every share that is added to the system will then either be attached to all of the non-scoped names, or to a single scoped name.  Applications that wish to use the scoping features are responsible for both registering the new name as a scoped endpoint and then creating the shares with an appropriate scope. In this way, legacy uses of the Network Management and Network Share Management functions are not affected in any way since they continue to register shares and names as non-scoped names. A scoped endpoint is created by calling the NetServerTransportAddEx function with the level parameter set to 2 and the bufptr parameter pointed to a SERVER_TRANSPORT_INFO_2 structure with the SVTI2_SCOPED_NAME bit value set in svti2_flags member. A scoped endpoint is also created by calling the NetServerTransportAddEx function with the level parameter set to 3 and the bufptr parameter pointed to a SERVER_TRANSPORT_INFO_3 structure with the SVTI2_SCOPED_NAME bit value set in svti3_flags member. When the SVTI2_SCOPED_NAME bit value is set for a transport, then shares can be added with a corresponding server name (the shi503_servername member of the SHARE_INFO_503 structure) in a scoped fashion using the NetShareAdd function.  If there is no transport registered with the SVTI2_SCOPED_NAME bit value and the name provided in shi503_servername member, then the share add in a scoped fashion will not succeed. The NetShareAdd function is used to add a scoped share on a remote server specified in the servername parameter. The remote server specified in the shi503_servername member of the SHARE_INFO_503 passed in the bufptr parameter must have been bound to a transport protocol using the NetServerTransportAddEx function as a scoped endpoint. The SVTI2_SCOPED_NAME flag must have been specified in the shi503_servername member of the SERVER_TRANSPORT_INFO_2 or SERVER_TRANSPORT_INFO_3 structure for the transport protocol.  The NetShareDelEx function is used to delete a scoped share.  The NetShareGetInfo and NetShareSetInfo functions are to used to get and set information on a scoped share. Scoped endpoints are generally used by the cluster namespace. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerTransportAddEx",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies a value that indicates the information level of the data. This parameter can be one of the following values.  ValueMeaning  0   Specifies information about the transport protocol, including name, address, and location on the network. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_0 structure.   1   Specifies information about the transport protocol, including name, address, network location, and domain. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_1 structure.   2   Specifies the same information as level 1, with the addition of an svti2_flags member. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_2 structure.   3    Specifies the same information as level 2, with the addition of credential information. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_3 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "bufptr",
        "description": "A pointer to the buffer that contains the data. The format of this data depends on the value of the level parameter.  For more information, see  Network Management Function Buffers."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The  \t\t\t\tNetServerComputerNameDel function causes the specified server to cease supporting the emulated server name set by a previous call to the  NetServerComputerNameAdd function. The function does this by unbinding network transports from the emulated name.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerComputerNameDel function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerComputerNameDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "ServerName",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "EmulatedServerName",
        "description": "Pointer to a null-terminated character string that contains the emulated name the server should stop supporting. The server continues to support all other server names it was supporting."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetServerTransportAdd function binds the server to the transport protocol.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerTransportAdd function. If you add a transport protocol to a server using a call to the  NetServerTransportAdd function, the connection will not remain after the server reboots or restarts. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerTransportAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be the following value.     ValueMeaning  0   Specifies information about the transport protocol, including name, address, and location on the network. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_0 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "bufptr",
        "description": "A pointer to the buffer that contains the data. For more information, see  Network Management Function Buffers."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The  \t\t\t\tNetServerTransportDel function unbinds (or disconnects) the transport protocol from the server. Effectively, the server can no longer communicate with clients using the specified transport protocol (such as TCP or XNS).",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmserver.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators or Server Operators local group can successfully execute the  NetServerTransportDel function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetServerTransportDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies information about the transport protocol, including name, address, and location on the network. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_0 structure.   1   Specifies information about the transport protocol, including name, address, network location, and domain. The bufptr parameter points to a  SERVER_TRANSPORT_INFO_1 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "bufptr",
        "description": "Pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The  \t\t\t\tNetWkstaTransportEnum function supplies information about transport protocols that are managed by the redirector, which is the software on the client computer that generates file requests to the server computer.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "No special group membership is required to successfully execute the  NetWkstaTransportEnum function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaTransportEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The level of information requested for the data. This parameter can be the following value.     ValueMeaning  0   Return workstation transport protocol information. The bufptr parameter points to an array of  WKSTA_TRANSPORT_INFO_0 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA or NERR_BufTooSmall."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA or NERR_BufTooSmall. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resumehandle",
        "description": "A pointer to a value that contains a resume handle which is used to continue an existing workstation transport search. The handle should be zero on the first call and left unchanged for subsequent calls. If the resumehandle parameter is a NULL pointer, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUseAdd function establishes a connection between the local computer and a remote server. You can specify a local drive letter or a printer device to connect. If you do not specify a local drive letter or printer device, the function authenticates the client with the server for future connections.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmuse.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "You can also use the  WNetAddConnection2 and WNetAddConnection3 functions to redirect a local device to a network resource. No special group membership is required to call the  NetUseAdd function. This function cannot be executed on a remote server except in cases of downlevel compatibility. This function applies only to the Server Message Block (LAN Manager Workstation) client. The NetUseAdd function does not support Distributed File System (DFS) shares. To add a share using a different network provider (WebDAV or a DFS share, for example), use the WNetAddConnection2 or WNetAddConnection3 function. If the  NetUseAdd function returns ERROR_INVALID_PARAMETER, you can use the ParmError parameter to indicate the first member of the information structure that is invalid. (The information structure begins with USE_INFO_ and its format is specified by the Level parameter.) The following table lists the values that can be returned in the ParmError parameter and the corresponding structure member that is in error. (The prefix ui*_ indicates that the member can begin with multiple prefixes, for example, ui1_ or ui2_.)  ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUseAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UncServerName",
        "description": "The UNC name of the computer on which to execute this function. If this parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism.  This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Level",
        "description": "A value that specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  1   Specifies information about the connection between a local device and a shared resource. Information includes the connection status and type. The Buf parameter is a pointer to a  USE_INFO_1 structure.   2   Specifies information about the connection between a local device and a shared resource. Information includes the connection status and type, and a user name and domain name. The Buf parameter is a pointer to a  USE_INFO_2 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "Buf",
        "description": "A pointer to the buffer that specifies the data. The format of this data depends on the value of the Level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "ParmError",
        "description": "A pointer to a value that receives the index of the first member of the information structure in error when the ERROR_INVALID_PARAMETER error is returned. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetUseDel function ends a connection to a shared resource.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmuse.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "The NetUseDel function applies only to the Server Message Block (LAN Manager Workstation) client. The NetUseDel function does not support Distributed File System (DFS) shares or other network file systems. To terminate a connection to a share using a different network provider (WebDAV or a DFS share, for example), use the WNetCancelConnection2 function. No special group membership is required to call the  NetUseDel function. This function cannot be executed on a remote server except in cases of downlevel compatibility. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUseDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UncServerName",
        "description": "The UNC name of the computer on which to execute this function. If this is parameter is NULL, then the local computer is used.  If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism.  This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UseName",
        "description": "A pointer to a string that specifies the path of the connection to delete. This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "ForceCond",
        "description": "The level of force to use in deleting the connection.  This parameter can be one of the following values defined in the lmuseflg.h header file.     ValueMeaning  USE_NOFORCE   Fail the disconnection if open files exist on the connection.   USE_FORCE   Do not fail the disconnection if open files exist on the connection.   USE_LOTS_OF_FORCE   Close any open files and delete the connection."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetUseEnum function lists all current connections between the local computer and resources on remote servers.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmuse.h (include Lm.h or Lmcons.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes.  ",
    "remarks": "No special group membership is required to call the  NetUseEnum function. This function cannot be executed on a remote server except in cases of downlevel compatibility using the legacy Remote Access Protocol. To retrieve information about one network connection, you can call the  NetUseGetInfo function. This function applies only to the Server Message Block (LAN Manager Workstation) client. The NetUseEnum function does not support Distributed File System (DFS) shares. To enumerate shares using a different network provider (WebDAV or a DFS share, for example), use the WNetOpenEnum, WNetEnumResource, and WNetCloseEnum functions. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUseEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UncServerName",
        "description": "The UNC name of the computer on which to execute this function. If this is parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism.   This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning   0   Specifies a local device name and the share name of a remote resource. The BufPtr parameter points to an array of  USE_INFO_0 structures.    1   Specifies information about the connection between a local device and a shared resource, including connection status and type. The BufPtr parameter points to an array of  USE_INFO_1 structures.    2   Specifies information about the connection between a local device and a shared resource. Information includes the connection status, connection type, user name, and domain name. The BufPtr parameter points to an array of  USE_INFO_2 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "BufPtr",
        "description": "A pointer to the buffer that receives the information structures. The format of this data depends on the value of the Level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function when the information is no longer needed. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "PreferedMaximumSize",
        "description": "The preferred maximum length, in bytes, of the data to return. If MAX_PREFERRED_LENGTH is specified, the function allocates the amount of memory required for the data. If another value is specified in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "EntriesRead",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "TotalEntries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "ResumeHandle",
        "description": "A pointer to a value that contains a resume handle which is used to continue the search. The handle should be zero on the first call and left unchanged for subsequent calls. If ResumeHandle is NULL, then no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUseGetInfo function retrieves information about a connection to a shared resource.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmuse.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see  System Error Codes. ",
    "remarks": "No special group membership is required to call the  NetUseGetInfo function. This function cannot be executed on a remote server except in cases of downlevel compatibility. To list all current connections between the local computer and resources on remote servers, you can call the  NetUseEnum function. This function applies only to the Server Message Block (LAN Manager Workstation) client. The NetUseGetInfo function does not support Distributed File System (DFS) shares. To retrieve information for a share using a different network provider (WebDAV or a DFS share, for example), use the WNetGetConnection function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUseGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UncServerName",
        "description": "The UNC name of computer on which to execute this function. If this is parameter is NULL, then the local computer is used. If the UncServerName parameter specified is a remote computer, then the remote computer must support remote RPC calls using the legacy Remote Access Protocol mechanism.  This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "UseName",
        "description": "A pointer to a string that specifies the name of the connection for which to return information. This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "Level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning   0   Specifies a local device name and the share name of a remote resource. The BufPtr  parameter is a pointer to a  USE_INFO_0 structure.    1   Specifies information about the connection between a local device and a shared resource, including connection status and type. The BufPtr parameter is a pointer to a  USE_INFO_1 structure.    2   Specifies information about the connection between a local device and a shared resource. Information includes the connection status, connection type, user name, and domain name. The BufPtr parameter is a pointer to a  USE_INFO_2 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "BufPtr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the Level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUserAdd function adds a user account and assigns a password and privilege level.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the user container is used to perform the access check for this function. The caller must be able to create child objects of the user class. Server users must use a system in which the server creates a system account for the new user. The creation of this account is controlled by several parameters in the server's LanMan.ini file. If the newly added user already exists as a system user, the usri1_home_dir member of the  USER_INFO_1 structure is ignored. When you call the  NetUserAdd function and specify information level 1, the call initializes the additional members in the  USER_INFO_2,  USER_INFO_3, and  USER_INFO_4 structures to their default values. You can change the default values by making subsequent calls to the  NetUserSetInfo function. The default values supplied are listed following. (The prefix usriX indicates that the member can begin with multiple prefixes, for example, usri2_ or usri4_.)  User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The following code sample demonstrates how to add a user account and assign a privilege level using a call to the  NetUserAdd function. The code sample fills in the members of the  USER_INFO_1 structure and calls  NetUserAdd, specifying information level 1. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserAdd",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LMSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.     This string is Unicode if  _WIN32_WINNT or FORCE_UNICODE are defined."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  1   Specifies information about the user account. The buf parameter points to a  USER_INFO_1 structure.     When you specify this level, the call initializes certain attributes to their default values. For more information, see the following Remarks section.   2   Specifies level one information and additional attributes about the user account. The buf parameter points to a  USER_INFO_2 structure.   3   Specifies level two information and additional attributes about the user account. This level is valid only on servers. The buf parameter points to a  USER_INFO_3 structure. Note that  it is recommended that you use  USER_INFO_4 instead.   4    Specifies level two information and additional attributes about the user account. This level is valid only on servers. The buf parameter points to a  USER_INFO_4 structure. Windows 2000:  This level is not supported."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the user information structure that causes ERROR_INVALID_PARAMETER. If this parameter is NULL, the index is not returned on error. For more information, see the  NetUserSetInfo function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The  \t\t\t\tNetUserChangePassword function changes a user's password for a specified network server or domain.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same result you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If an application calls the NetUserChangePassword function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. A user can change his or her own password. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. In addition, the caller must have the \"Change password\" control access right on the User object. This right is granted to Anonymous Logon and Everyone by default. Note that for the function to succeed, the oldpassword parameter must match the password as it currently exists. In some cases, the process that calls the  NetUserChangePassword function must also have the SE_CHANGE_NOTIFY_NAME privilege enabled; otherwise,  NetUserChangePassword fails and  GetLastError returns ERROR_ACCESS_DENIED. This privilege is not required for the  LocalSystem account or for accounts that are members of the administrators group. By default, SE_CHANGE_NOTIFY_NAME is enabled for all users, but some administrators may disable the privilege for everyone. For more information about account privileges, see  Privileges and  Authorization Constants. See  Forcing a User to Change the Logon Password for a code sample that demonstrates how to force a user to change the logon password on the next logon using the  NetUserGetInfo and  NetUserSetInfo functions. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The  NetUserChangePassword function does not control how the oldpassword and newpassword parameters are secured when sent over the network to a remote server. Any encryption of these parameters is handled by the Remote Procedure Call (RPC) mechanism supported by the network redirector that provides the network transport. Encryption is also controlled  by the security mechanisms supported by the local computer and the security mechanisms supported by remote network server or domain specified in the domainname   parameter. For more details on security when the Microsoft network redirector is used and the remote network server is running Microsoft Windows, see the protocol documentation for MS-RPCE, MS-SAMR, MS-SPNG, and MS-NLMP. The following code sample demonstrates how to change a user's password with a call to the NetUserChangePassword function. All parameters to the function are required. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserChangePassword",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "domainname",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of a remote server or domain on which the function is to execute. If this parameter is NULL, the logon domain of the caller is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies a user name. The  NetUserChangePassword function changes the password for the specified user. If this parameter is NULL, the logon name of the caller is used. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "oldpassword",
        "description": "A pointer to a constant string that specifies the user's old password."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "newpassword",
        "description": "A pointer to a constant string that specifies the user's new password."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "The \t\t\t\tNetUserDel function deletes a user account from a server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. An account cannot be deleted while a user or application is accessing a server resource. If the user was added to the system with a call to the  NetUserAdd function, deleting the user also deletes the user's system account. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The following code sample demonstrates how to delete a user account with a call to the  NetUserDel function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserDel",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "Pointer to a constant string that specifies the name of the user account to delete. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The \t\t\t\tNetUserEnum function retrieves information about all user accounts on a server.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "The \t\t\t\tNetUserEnum function retrieves information about all user accounts on a specified remote server or the local computer. The  NetQueryDisplayInformation function can be used to quickly enumerate user, computer, or global group account information for display in user interfaces . If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call the NetUserEnum function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The NetUserEnum function only returns information to which the caller has Read access. The caller must have List Contents access to the Domain object, and  Enumerate Entire SAM Domain access on the SAM Server object  located in the System container. The LsaEnumerateTrustedDomains or LsaEnumerateTrustedDomainsEx function can be used to retrieve the names and SIDs of domains trusted by a Local Security Authority (LSA) policy object. The  NetUserEnum function does not return all system users. It returns only those users who have been added with a call to the  NetUserAdd function. There is no guarantee that the list of users will be returned in sorted order. If you call  the NetUserEnum function and specify information level 1, 2, or 3,  for the level parameter, the password member of each structure retrieved is set to NULL to maintain password security. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The NetUserEnum function does not support a level parameter of 4 and the USER_INFO_4 structure. The NetUserGetInfo  \t\tfunction supports a level parameter of 4 and the USER_INFO_4 structure. The following code sample demonstrates how to retrieve information about the user accounts on a server with a call to the  NetUserEnum function. The sample calls  NetUserEnum, specifying information level 0 (USER_INFO_0) to enumerate only global user accounts. If the call succeeds, the code loops through the entries and prints the name of each user account. Finally, the code sample frees the memory allocated for the information buffer and prints a total of the users enumerated. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return user account names. The bufptr parameter points to an array of  USER_INFO_0 structures.   1   Return detailed information about user accounts. The bufptr parameter points to an array of  USER_INFO_1 structures.   2   Return detailed information about user accounts, including authorization levels and logon information. The bufptr parameter points to an array of  USER_INFO_2 structures.   3   Return detailed information about user accounts, including authorization levels, logon information, RIDs for the user and the primary group, and profile information. The bufptr parameter points to an array of  USER_INFO_3 structures.    10   Return user and account names and comments. The bufptr parameter points to an array of  USER_INFO_10 structures.   11   Return detailed information about user accounts. The bufptr parameter points to an array of  USER_INFO_11 structures.   20   Return the user's name and identifier and various account attributes. The bufptr parameter points to an array of  USER_INFO_20 structures. Note that on Windows XP and later, it is recommended that you use  USER_INFO_23 instead."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "filter",
        "description": "A value that specifies the user account types to be included in the enumeration. A value of zero indicates that all normal user, trust data, and machine account data should be included.  This parameter can also be a combination of the following values.     ValueMeaning  FILTER_TEMP_DUPLICATE_ACCOUNT   Enumerates account data for users whose primary account is in another domain. This account type provides user access to this domain, but not to any domain that trusts this domain. The User Manager refers to this account type as a local user account.   FILTER_NORMAL_ACCOUNT   Enumerates normal user account data. This account type is associated with a typical user.   FILTER_INTERDOMAIN_TRUST_ACCOUNT   Enumerates interdomain trust account data. This account type is associated with a trust account for a domain that trusts other domains.   FILTER_WORKSTATION_TRUST_ACCOUNT   Enumerates workstation or member server trust account data. This account type is associated with a machine account for a computer that is a member of the domain.   FILTER_SERVER_TRUST_ACCOUNT   Enumerates member server machine account data. This account type is associated with a computer account for a backup domain controller that is a member of the domain."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter.  The buffer for this data is allocated by the system and the application must call the NetApiBufferFree function to free the allocated memory when the data returned is no longer needed. Note that you must free the buffer even if the NetUserEnum function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length, in bytes, of the returned data. If you specify MAX_PREFERRED_LENGTH, the NetUserEnum function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint. If your application is communicating with a Windows 2000 or later domain controller, you should consider using the  ADSI LDAP Provider to retrieve this type of data more efficiently. The ADSI LDAP Provider implements a set of ADSI objects that support various ADSI interfaces. For more information, see  ADSI Service Providers.     LAN Manager:  If the call is to a computer that is running LAN Manager 2.x, the totalentries parameter will always reflect the total number of entries in the database no matter where it is in the resume sequence."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resume_handle",
        "description": "A pointer to a value that contains a resume handle which is used to continue an existing user search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, then no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetUserGetGroups function retrieves a list of global groups to which a specified user belongs.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. To retrieve a list of the local groups to which a user belongs, you can call the  NetUserGetLocalGroups function. Network groups are separate and distinct from Windows NT system groups. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The following code sample demonstrates how to retrieve a list of global groups to which a user belongs with a call to the  NetUserGetGroups function. The sample calls  NetUserGetGroups, specifying information level 0 ( GROUP_USERS_INFO_0). The code loops through the entries and prints the name of the global groups in which the user has membership. The sample also prints the total number of entries that are available and the number of entries actually enumerated if they do not match. Finally, the code sample frees the memory allocated for the buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserGetGroups",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies the name of the user to search for in each group account. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning  0   Return the names of the global groups to which the user belongs. The bufptr parameter points to an array of  GROUP_USERS_INFO_0 structures.   1   Return the names of the global groups to which the user belongs with attributes. The bufptr parameter points to an array of  GROUP_USERS_INFO_1 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length, in bytes, of returned data. If MAX_PREFERRED_LENGTH is specified, the function allocates the amount of memory required for the data. If another value is specified in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been retrieved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUserGetInfo function retrieves information about a particular user account on a server.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. If the information level specified in the level parameter is set to 24, the servername parameter specified must resolve to the local computer. If the servername resolves to a remote computer or to a domain controller, the NetUserGetInfo  function will fail. The following code sample demonstrates how to retrieve information about a particular user account with a call to the  NetUserGetInfo function. The sample calls  NetUserGetInfo, specifying various information levels . If the call succeeds, the code prints information about the user account. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies the name of the user account for which to return information. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.  ValueMeaning  0   Return the user account name. The bufptr parameter points to a  USER_INFO_0 structure.   1   Return detailed information about the user account. The bufptr parameter points to a  USER_INFO_1 structure.   2   Return detailed information and additional attributes about the user account. The bufptr parameter points to a  USER_INFO_2 structure.   3   Return detailed information and additional attributes about the user account. This level is valid only on servers. The bufptr parameter points to a  USER_INFO_3 structure. Note that  it is recommended that you use  USER_INFO_4 instead.   4   Return detailed information and additional attributes about the user account. This level is valid only on servers. The bufptr parameter points to a  USER_INFO_4 structure. Note  This level is supported on  Windows XP and later.     10   Return user and account names and comments. The bufptr  parameter points to a  USER_INFO_10 structure.   11   Return detailed information about the user account. The bufptr parameter points to a  USER_INFO_11 structure.   20   Return the user's name and identifier and various account attributes. The bufptr parameter points to a  USER_INFO_20 structure. Note that on Windows XP and later, it is recommended that you use  USER_INFO_23 instead.   23   Return the user's name and identifier and various account attributes. The bufptr parameter points to a  USER_INFO_23 structure. Note  This level is supported on  Windows XP and later.     24   Return user account information for accounts  which are connected to an Internet identity. The bufptr parameter points to a  USER_INFO_24 structure. Note  The level is supported on Windows 8 and Windows Server 2012."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "The  \t\t\t\tNetUserGetLocalGroups function retrieves a list of local groups to which a specified user belongs.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Domain object is used to perform the access check for this function. The caller must have  Read Property permission on the Domain object. To retrieve a list of global groups to which a specified user belongs, you can call the  NetUserGetGroups function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The following code sample demonstrates how to retrieve a list of the local groups to which a user belongs with a call to the  NetUserGetLocalGroups function. The sample calls  NetUserGetLocalGroups, specifying information level 0 (LOCALGROUP_USERS_INFO_0). The sample loops through the entries and prints the name of each local group in which the user has membership. If all available entries are not enumerated, it also prints the number of entries actually enumerated and the total number of entries available. Finally, the code sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserGetLocalGroups",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies the name of the user for which to return local group membership information. If the string is of the form DomainName\\UserName the user name is expected to be found on that domain. If the string is of the form UserName, the user name is expected to be found on the server specified by the servername parameter. For more information, see the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be the following value.     ValueMeaning  0   Return the names of the local groups to which the user belongs. The bufptr parameter points to an array of  LOCALGROUP_USERS_INFO_0 structures."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "flags",
        "description": "A bitmask of flags that affect the operation. Currently, only the value defined is LG_INCLUDE_INDIRECT. If this bit is set, the function also returns the names of the local groups in which the user is indirectly a member (that is, the user has membership in a global group that is itself a member of one or more local groups)."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "The preferred maximum length, in bytes, of the returned data. If MAX_PREFERRED_LENGTH is specified in this parameter, the function allocates the amount of memory required for the data. If another value is specified in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "A pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "A pointer to a value that receives the total number of entries that could have been enumerated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetUserSetGroups function sets global group memberships for a specified user account.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. To grant a user membership in one existing global group, you can call the  NetGroupAddUser function. User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The following code sample demonstrates how to set global group memberships for a user account with a call to the  NetUserSetGroups function. The code sample fills in the grui0_name member of the  GROUP_USERS_INFO_0 structure and calls  NetUserSetGroups, specifying information level 0. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserSetGroups",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies the name of the user for which to set global group memberships. For more information, see the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.     ValueMeaning  0   The buf parameter points to an array of  GROUP_USERS_INFO_0 structures that specifies global group names.   1   The buf parameter points to an array of  GROUP_USERS_INFO_1 structures that specifies global group names with attributes."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "A pointer to the buffer that specifies the data. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "num_entries",
        "description": "The number of entries contained in the array pointed to by the buf parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "The \t\t\t\tNetUserSetInfo function sets the parameters of a user account.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user functions. For more information, see  IADsUser and  IADsComputer. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the User object is used to perform the access check for this function. Only users or applications having administrative privileges can call the  NetUserSetInfo function to change a user's password. When an administrator calls  NetUserSetInfo, the only restriction applied is that the new password length must be consistent with system modals. A user or application that knows a user's current password can call the  NetUserChangePassword function to change the password. For more information about calling functions that require administrator privileges, see Running with Special Privileges. Members of the Administrators local group can set any modifiable user account elements. All users can set the usri2_country_code member of the  USER_INFO_2 structure (and the usri1024_country_code member of the  USER_INFO_1024 structure) for their own accounts. A member of the Account Operator's local group cannot set details for an Administrators class account, give an existing account Administrator privilege, or change the operator privilege of any account. If you attempt to change the privilege level or disable the last account with Administrator privilege in the security database, (the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory), the  NetUserSetInfo function fails and returns NERR_LastAdmin. To set the following user account control flags, the following privileges and control access rights are required.  For a list of privilege constants, see Authorization  Constants. The correct way to specify the new name for an account is to call  NetUserSetInfo with  USER_INFO_0 and to specify the new value using the usri0_name member. If you call  NetUserSetInfo with other information levels and specify a value using a usriX_name member, the value is ignored. Note that calls to  NetUserSetInfo can change the home directory only for user accounts that the network server creates. If the  NetUserSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the user information structure that is invalid. (A user information structure begins with USER_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix usri*_ indicates that the member can begin with multiple prefixes, for example, usri10_ or usri1003_.)  User account names are limited to 20 characters and group names are limited to 256 characters. In addition, account names cannot be terminated by a period and they cannot include commas or any of the following printable characters: \", /, \\, [, ], :, |, <, >, +, =, ;, ?, *. Names also cannot include characters in the range 1-31, which are nonprintable. The  NetUserSetInfo function does not control how the password parameters are secured when sent over the network to a remote server to change a user password. Any encryption of these parameters is handled by the Remote Procedure Call (RPC) mechanism supported by the network redirector that provides the network transport. Encryption is also controlled  by the security mechanisms supported by the local computer and the security mechanisms supported by remote network server specified in the servername   parameter. For more details on security when the Microsoft network redirector is used and the remote network server is running Microsoft Windows, see the protocol documentation for MS-RPCE and MS-SAMR. The following code sample demonstrates how to disable a user account with a call to the  NetUserSetInfo function. The code sample fills in the usri1008_flags member of the  USER_INFO_1008 structure, specifying the value UF_ACCOUNTDISABLE. Then the sample calls  NetUserSetInfo, specifying information level 0. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "username",
        "description": "A pointer to a constant string that specifies the name of the user account for which to set information. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies the user account name. The buf parameter points to a  USER_INFO_0 structure. Use this structure to specify a new group name. For more information, see the following Remarks section.   1   Specifies detailed information about the user account. The buf parameter points to a  USER_INFO_1 structure.   2   Specifies level one information and additional attributes about the user account. The buf parameter points to a  USER_INFO_2 structure.   3   Specifies level two information and additional attributes about the user account. This level is valid only on servers. The buf parameter points to a  USER_INFO_3 structure. Note that  it is recommended that you use  USER_INFO_4 instead.   4    Specifies level two information and additional attributes about the user account. This level is valid only on servers. The buf parameter points to a  USER_INFO_4 structure.   21   Specifies a one-way encrypted LAN Manager 2.x-compatible password. The buf parameter points to a  USER_INFO_21 structure.   22   Specifies detailed information about the user account. The buf parameter points to a  USER_INFO_22 structure.   1003   Specifies a user password. The buf parameter points to a  USER_INFO_1003 structure.   1005   Specifies a user privilege level. The buf parameter points to a  USER_INFO_1005 structure.   1006   Specifies the path of the home directory for the user. The buf parameter points to a  USER_INFO_1006 structure.   1007   Specifies a comment to associate with the user account. The buf parameter points to a  USER_INFO_1007 structure.   1008   Specifies user account attributes. The buf parameter points to a  USER_INFO_1008 structure.   1009   Specifies the path for the user's logon script file. The buf parameter points to a  USER_INFO_1009 structure.   1010   Specifies the user's operator privileges. The buf parameter points to a  USER_INFO_1010 structure.   1011   Specifies the full name of the user. The buf parameter points to a  USER_INFO_1011 structure.   1012   Specifies a comment to associate with the user. The buf parameter points to a  USER_INFO_1012 structure.   1014   Specifies the names of workstations from which the user can log on. The buf parameter points to a  USER_INFO_1014 structure.   1017   Specifies when the user account expires. The buf parameter points to a  USER_INFO_1017 structure.   1020   Specifies the times during which the user can log on. The buf parameter points to a  USER_INFO_1020 structure.   1024   Specifies the user's country/region code. The buf parameter points to a  USER_INFO_1024 structure.   1051   Specifies the relative identifier of a global group that represents the enrolled user. The buf parameter points to a  USER_INFO_1051 structure.   1052   Specifies the path to a network user's profile. The buf parameter points to a  USER_INFO_1052 structure.   1053   Specifies the drive letter assigned to the user's home directory. The buf parameter points to a  USER_INFO_1053 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "A pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "A pointer to a value that receives the index of the first member of the user information structure that causes ERROR_INVALID_PARAMETER. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetUserModalsGet function retrieves global information for all users and global groups in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user modal functions. For more information, see  IADsDomain. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Domain object is used to perform the access check for this function. To retrieve the  security identifier (SID) of the domain to which the computer belongs, call the  NetUserModalsGet function specifying a  USER_MODALS_INFO_2 structure and NULL in the servername parameter. If the computer isn't a member of a domain, the function returns a NULL pointer. The following code sample demonstrates how to retrieve global information for all users and global groups with a call to the  NetUserModalsGet function. The sample calls  NetUserModalsGet, specifying information level 0 (USER_MODALS_INFO_0). If the call succeeds, the sample prints global password information. Finally, the code sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserModalsGet",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "A pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used. For more information, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data requested. This parameter can be one of the following values.     ValueMeaning  0   Return global password parameters. The bufptr parameter points to a  USER_MODALS_INFO_0 structure.   1   Return logon server and domain controller information. The bufptr parameter points to a  USER_MODALS_INFO_1 structure.   2   Return domain name and identifier. The bufptr parameter points to a  USER_MODALS_INFO_2 structure. For more information, see the following Remarks section.   3   Return lockout information. The bufptr parameter points to a  USER_MODALS_INFO_3 structure.     A null session logon can call  NetUserModalsGet anonymously at information levels 0 and 3."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "A pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter.  The buffer for this data is allocated by the system and the application must call the NetApiBufferFree function to free the allocated memory when the data returned is no longer needed. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetUserModalsSet function sets global information for all users and global groups in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "If you are programming for Active Directory, you may be able to call certain Active Directory Service Interface (ADSI) methods to achieve the same functionality you can achieve by calling the network management user modal functions. For more information, see  IADsDomain. If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits only Domain Admins and Account Operators to call this function. On a member server or workstation, only Administrators and Power Users can call this function. For more information, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Domain object is used to perform the access check for this function. Typically, callers must have write access to the entire object for calls to this function to succeed. If the  NetUserModalsSet function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the information structure that is invalid. (The information structure begins with USER_MODALS_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix usrmod*_ indicates that the member can begin with multiple prefixes, for example, usrmod2_ or usrmod1002_.)  The following code sample demonstrates how to set the global information for all users and global groups with a call to the  NetUserModalsSet function. The sample fills in the members of the  USER_MODALS_INFO_0 structure and calls  NetUserModalsSet, specifying information level 0. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetUserModalsSet",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "servername",
        "description": "Pointer to a constant string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Specifies global password parameters. The buf parameter points to a  USER_MODALS_INFO_0 structure.   1   Specifies logon server and domain controller information. The buf parameter points to a  USER_MODALS_INFO_1 structure.   2   Specifies the domain name and identifier. The buf parameter points to a  USER_MODALS_INFO_2 structure.   3   Specifies lockout information. The buf parameter points to a  USER_MODALS_INFO_3 structure.   1001   Specifies the minimum allowable password length. The buf parameter points to a  USER_MODALS_INFO_1001 structure.   1002   Specifies the maximum allowable password age. The buf parameter points to a  USER_MODALS_INFO_1002 structure.   1003   Specifies the minimum allowable password age. The buf parameter points to a  USER_MODALS_INFO_1003 structure.   1004   Specifies forced logoff information. The buf parameter points to a  USER_MODALS_INFO_1004 structure.   1005   Specifies the length of the password history. The buf parameter points to a  USER_MODALS_INFO_1005 structure.   1006   Specifies the role of the logon server. The buf parameter points to a  USER_MODALS_INFO_1006 structure.   1007   Specifies domain controller information. The buf parameter points to a  USER_MODALS_INFO_1007 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first member of the information structure that causes ERROR_INVALID_PARAMETER. If this parameter is NULL, the index is not returned on error. For more information, see the following Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The NetValidatePasswordPolicyFree function frees the memory that the NetValidatePasswordPolicy function allocates for the OutputArg parameter, which is a NET_VALIDATE_OUTPUT_ARG structure.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function frees the memory, or if there is no memory to free from a previous call to NetValidatePasswordPolicy, the return value is NERR_Success. If the function fails, the return value is a system error code. For a list of error codes, see System Error Codes. ",
    "remarks": "No special group membership is required to successfully execute this function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetValidatePasswordPolicyFree",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID*",
        "name": "OutputArg",
        "description": "Pointer to the memory allocated for the OutputArg parameter by a call to the NetValidatePasswordPolicy function."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 5,
    "description": "The NetValidatePasswordPolicy function allows an application to check password compliance against an application-provided account database and verify that passwords meet the complexity, aging, minimum length, and history reuse requirements of a password policy.",
    "library": "Netapi32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Lmaccess.h (include Lm.h)",
    "return_value": "If the function succeeds, and the password is authenticated, changed, or reset, the return value is NERR_Success and the function allocates an OutputArg parameter. If the function fails, the OutputArg parameter is NULL and the return value is a system error code that can be one of the following error codes. For a list of all possible error codes, see  System Error Codes.  ",
    "remarks": "The NetValidatePasswordPolicy function is designed to allow applications to validate passwords for users that are in an account database provided by the application. This function can also be used to verify that passwords meet the complexity, aging, minimum length, and history reuse requirements of a password policy. This function also provides the means for an application to implement an account-lockout mechanism. The NetValidatePasswordPolicy function does not validate passwords in Active Directory accounts and cannot be used for this purpose. The only policy that this function checks a password against in Active Directory accounts is the password complexity (the password strength). A typical scenario for the use of the NetValidatePasswordPolicy function would be enforcing the choice of strong passwords by users for web applications and applications that allow password-protected documents. Another use of this function could be checking password complexity in a situation in which a password is attached to a functional operation rather than to a user account; for example, passwords that are used with Secure Multipurpose Internet Mail Extensions (S/MIME) certificate-based public keys. If the NetValidatePasswordPolicy function is called on a domain controller that is running Active Directory, access is allowed or denied based on the ACL for the securable object. The default ACL permits all authenticated users and members of the \"Pre-Windows 2000 compatible access\" group to view the information. If you call this function on a member server or workstation, all authenticated users can view the information. For  information about anonymous access and restricting anonymous access on these platforms, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. The security descriptor of the Domain object is used to perform the access check for the NetValidatePasswordPolicy function. To call NetValidatePasswordPolicy in a security context that is not the default, first call the LogonUser function, specifying LOGON32_LOGON_NEW_CREDENTIALS in the dwLogonType parameter, and then call NetValidatePasswordPolicy under impersonation. For more information about impersonation, see Client Impersonation. If the return code of the NetValidatePasswordPolicy function is Nerr_Success then the function         allocates a buffer pointed to by the OutputArg parameter that contains a NET_VALIDATE_OUTPUT_ARG structure with the results of         the operation. The application must examine ValidationStatus member in the NET_VALIDATE_OUTPUT_ARG structure to         determine the results of the password policy validation check.  For more information, see NET_VALIDATE_OUTPUT_ARG. Note that it is the application's responsibility to save all the data in the ChangedPersistedFields member of the NET_VALIDATE_OUTPUT_ARG structure as well as any User object information. The next time the application calls NetValidatePasswordPolicy on the same instance of the User object, the application must provide the required fields from the persistent information. When you call NetValidatePasswordPolicy and specify NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG or NET_VALIDATE_PASSWORD_RESET_INPUT_ARG in InputArg parameter, the call also validates the password by passing it through the password filter DLL that the computer is configured to use. For more information about password filters, see Using Password Filters. If the return value from the NetValidatePasswordPolicy function is nonzero then OutputArg parameter  is set to NULL and password policy         could not be examined. The NetValidatePasswordPolicyFree function should be called after calling  NetValidatePasswordPolicy to free the memory allocated for the OutputArg parameter that is returned by the call to the NetValidatePasswordPolicy function. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetValidatePasswordPolicy",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "ServerName",
        "description": "A pointer to a constant Unicode string specifying the name of the remote server on which the function is to execute. This string must         begin with \\\\ followed by the remote server name. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "Qualifier",
        "description": "Reserved for future use. This parameter must be NULL."
      },
      {
        "in_out": "_In_",
        "type": "NET_VALIDATE_PASSWORD_TYPE",
        "name": "ValidationType",
        "description": "The type of password validation to perform. This parameter must be one of the following enumerated constant values.       C++     Copy      typedef enum _NET_VALIDATE_PASSWORD_TYPE {      NetValidateAuthentication = 1,     NetValidatePasswordChange,     NetValidatePasswordReset,  } NET_VALIDATE_PASSWORD_TYPE, *PNET_VALIDATE_PASSWORD_TYPE;       These values have the following meanings.  ValueMeaning  NetValidateAuthentication   The application is requesting password validation during authentication. The InputArg parameter points to a NET_VALIDATE_AUTHENTICATION_INPUT_ARG structure. This type of validation enforces password expiration and account lockout policy.   NetValidatePasswordChange   The application is requesting password validation during a password change operation. The InputArg parameter points to a NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG structure.   NetValidatePasswordReset   The application is requesting password validation during a password reset operation. The InputArg parameter points to a NET_VALIDATE_PASSWORD_RESET_INPUT_ARG structure. You can also reset the \"lockout state\" of a user account by specifying this structure."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "InputArg",
        "description": "A pointer to a structure that depends on the type of password validation to perform. The type of structure depends on the value of the ValidationType parameter. For more information, see the description of the ValidationType parameter."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "OutputArg",
        "description": "If the NetValidatePasswordPolicy function succeeds (the return value is Nerr_Success), then the function         allocates an buffer that contains the results of         the operation. The OutputArg parameter contains a pointer to a NET_VALIDATE_OUTPUT_ARG structure. The application must examine ValidationStatus member in the NET_VALIDATE_OUTPUT_ARG structure pointed to by the OutputArg parameter to         determine the results of the password policy validation check.   The NET_VALIDATE_OUTPUT_ARG structure contains a NET_VALIDATE_PERSISTED_FIELDS structure with changes to persistent password-related information, and the results of the password validation. The application must         plan to persist all persisted the fields in the NET_VALIDATE_PERSISTED_FIELDS structure aside from the ValidationStatus         member as information along with the user object information and provide the required fields from         the persisted information when calling this function in the future on the same user object. If the NetValidatePasswordPolicy function fails (the return value is nonzero),  then OutputArg parameter is set to a NULL pointer and password policy         could not be examined. For more information, see the Return Values and Remarks sections."
      }
    ],
    "min_client": "None supported"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetWkstaGetInfo function returns information about the configuration of a workstation.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Windows Server 2003 and Windows XP:   If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the ACL for the securable object. To enable anonymous access, the user Anonymous must be a member of the \"Pre-Windows 2000 compatible access\" group. This is because anonymous tokens do not include the Everyone group SID by default. If you call this function on a member server or workstation, all authenticated users can view the information. Anonymous access is also permitted if the EveryoneIncludesAnonymous policy setting allows anonymous access. Anonymous access is always permitted for level 100. If you call this function at level 101, authenticated users can view the information. Members of the Administrators, and the Server, System and Print Operator local groups can view information at levels 102 and 502. For more information about restricting anonymous access, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. Windows 2000:  If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \" Pre-Windows 2000 compatible access\" group to view the information. By default, the \"Pre-Windows 2000 compatible access\" group includes Everyone as a member. This enables anonymous access to the information if the system allows anonymous access. If you call this function on a member server or workstation, all authenticated users can view the information. Anonymous access is also permitted if the RestrictAnonymous policy setting allows anonymous access. To compile an application that uses this function, define the _WIN32_WINNT macro as 0x0400 or later. For more information,see  Using the Windows Headers. The following code sample demonstrates how to retrieve information about the configuration elements for a workstation using a call to the  NetWkstaGetInfo function. The sample calls  NetWkstaGetInfo, specifying information level 102 ( WKSTA_INFO_102). If the call succeeds, the sample prints information about the workstation. Finally, the code sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  100   Return information about the workstation environment, including platform-specific information, the name of the domain and the local computer, and information concerning the operating system. The bufptr parameter points to a  WKSTA_INFO_100 structure.   101   In addition to level 100 information, return the path to the LANMAN directory. The bufptr parameter points to a  WKSTA_INFO_101 structure.   102   In addition to level 101 information, return the number of users who are logged on to the local computer. The bufptr parameter points to a  WKSTA_INFO_102 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The NetWkstaSetInfo function configures a workstation with information  that remains in effect after the system has been reinitialized.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Only members of the Administrators group can successfully execute the  NetWkstaSetInfo function on a remote server. The \t\t\t\tNetWkstaSetInfo function calls the workstation service on the local system or a remote system. Only a limited number of members of the WKSTA_INFO_502 structure can actually be changed using the NetWkstaSetInfo function. No errors are returned if a member is set that is ignored by the workstation service. The workstation service is primarily configured using settings in the registry. The NetWkstaUserSetInfo function can be used instead of the NetWkstaSetInfo function to set configuration information on the local system. The NetWkstaUserSetInfo function calls the Local Security Authority (LSA). If the  NetWkstaSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the first member of the workstation information structure that is invalid. (A workstation information structure begins with WKSTA_INFO_ and its format is specified by the level parameter.) The following table lists the values that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix wki*_ indicates that the member can begin with multiple prefixes, for example, wki100_ or wki402_.)  The workstation service parameter settings are stored in the registry, not in the LanMan.ini file used prveiously by LAN Manager. The  NetWkstaSetInfo function does not change the values in the LanMan.ini file. When the workstation service is stopped and restarted, workstation parameters are reset to the default values specified in the registry (unless they are overwritten by command-line parameters). Values set by previous calls to  NetWkstaSetInfo can be overwritten when workstation parameters are reset. The following code sample demonstrates how to set the session time-out value associated with a workstation using a call to the  NetServerSetInfo function. (The session time-out is the number of seconds the server waits before disconnecting an inactive session.) The code specifies information level 502 (WKSTA_INFO_502). ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "The information level of the data. This parameter can be one of the following values.     ValueMeaning  100   Windows NT:  Specifies information about a workstation environment, including platform-specific information, the names of the domain and the local computer, and information concerning the operating system. The buffer parameter points to a  WKSTA_INFO_100 structure. The wk100_computername and wk100_langroup fields of this structure cannot be set by calling this function. To set these values, call SetComputerName/SetComputerNameEx or NetJoinDomain, respectively.   101   Windows NT:  In addition to level 100 information, specifies the path to the LANMAN directory. The buffer parameter points to a  WKSTA_INFO_101 structure. The wk101_computername and wk101_langroup fields of this structure cannot be set by calling this function. To set these values, call SetComputerName/SetComputerNameEx or NetJoinDomain, respectively.   102   Windows NT:  In addition to level 101 information, specifies the number of users who are logged on to the local computer. The buffer parameter points to a  WKSTA_INFO_102 structure. The wk102_computername and wk102_langroup fields of this structure cannot be set by calling this function. To set these values, call SetComputerName/SetComputerNameEx or NetJoinDomain, respectively.   502   Windows NT:  The buffer parameter points to a  WKSTA_INFO_502 structure that contains information about the workstation environment.     Do not set levels 1010-1013, 1018, 1023, 1027, 1028, 1032, 1033, 1035, or 1041-1062."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buffer",
        "description": "A pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "A pointer to a value that receives the index of the first member of the workstation information structure that causes the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error. For more information, see the Remarks section."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "The \t\t\t\tNetWkstaUserEnum function lists information about all users currently logged on to the workstation. This list includes interactive, service and batch logons.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "Note that since the  NetWkstaUserEnum function lists entries for service and batch logons, as well as for interactive logons, the function can return entries for users who have logged off a workstation. This can occur, for example, when a user calls a service that impersonates the user. In this instance,  NetWkstaUserEnum returns an entry for the user until the service stops impersonating the user. Windows Server 2003 and Windows XP:  If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the ACL for the securable object. To enable anonymous access, the user Anonymous must be a member of the \"Pre-Windows 2000 compatible access\" group. This is because anonymous tokens do not include the Everyone group SID by default. If you call this function on a member server or workstation, all authenticated users can view the information. Anonymous access is also permitted if the RestrictAnonymous policy setting permits anonymous access. If the RestrictAnonymous policy setting does not permit anonymous access, only an administrator can successfully execute the function. Members of the Administrators, and the Server, System and Print Operator local groups can also view information. For more information about restricting anonymous access, see  Security Requirements for the Network Management Functions. For more information on ACLs, ACEs, and access tokens, see  Access Control Model. Windows 2000:  If you call this function on a domain controller that is running Active Directory, access is allowed or denied based on the access control list (ACL) for the securable object. The default ACL permits all authenticated users and members of the \" Pre-Windows 2000 compatible access\" group to view the information. By default, the \"Pre-Windows 2000 compatible access\" group includes Everyone as a member. This enables anonymous access to the information if the system allows anonymous access. If you call this function on a member server or workstation, all authenticated users can view the information. Anonymous access is also permitted if the RestrictAnonymous policy setting allows anonymous access. To compile an application that uses this function, define the _WIN32_WINNT macro as 0x0400 or later. For more information,see  Using the Windows Headers. The following code sample demonstrates how to list information about all users currently logged on to a workstation using a call to the  NetWkstaUserEnum function. The sample calls  NetWkstaUserEnum, specifying information level 0 ( WKSTA_USER_INFO_0). The sample loops through the entries and prints the names of the users logged on to a workstation. Finally, the code sample frees the memory allocated for the information buffer, and prints the total number of users enumerated. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaUserEnum",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPWSTR",
        "name": "servername",
        "description": "Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the names of users currently logged on to the workstation. The bufptr parameter points to an array of  WKSTA_USER_INFO_0 structures.   1   Return the names of the current users and the domains accessed by the workstation. The bufptr parameter points to an array of  WKSTA_USER_INFO_1 structures."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the level parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "prefmaxlen",
        "description": "Specifies the preferred maximum length of returned data, in bytes. If you specify MAX_PREFERRED_LENGTH, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "entriesread",
        "description": "Pointer to a value that receives the count of elements actually enumerated."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "totalentries",
        "description": "Pointer to a value that receives the total number of entries that could have been enumerated from the current resume position. Note that applications should consider this value only as a hint."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "resumehandle",
        "description": "Pointer to a value that contains a resume handle which is used to continue an existing search. The handle should be zero on the first call and left unchanged for subsequent calls. If this parameter is NULL, no resume handle is stored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "The \t\t\t\tNetWkstaUserGetInfo function returns information about the currently logged-on user. This function must be called in the context of the logged-on user.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "The  NetWkstaUserGetInfo function only works locally. The following code sample demonstrates how to retrieve information about the currently logged-on user using a call to the  NetWkstaUserGetInfo function. The sample calls  NetWkstaUserGetInfo, specifying information level 1 ( WKSTA_USER_INFO_1). If the call succeeds, the sample prints information about the logged-on user. Finally, the sample frees the memory allocated for the information buffer. ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaUserGetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "reserved",
        "description": "This parameter must be set to NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  0   Return the name of the user currently logged on to the workstation. The bufptr parameter points to a  WKSTA_USER_INFO_0 structure.   1   Return information about the workstation, including the name of the current user and the domains accessed by the workstation. The bufptr parameter points to a  WKSTA_USER_INFO_1 structure.   1101   Return domains browsed by the workstation. The bufptr parameter points to a  WKSTA_USER_INFO_1101 structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPBYTE*",
        "name": "bufptr",
        "description": "Pointer to the buffer that receives the data. The format of this data depends on the value of the bufptr parameter. This buffer is allocated by the system and must be freed using the  NetApiBufferFree function. For more information, see  Network Management Function Buffers and  Network Management Function Buffer Lengths."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "The \t\t\t\tNetWkstaUserSetInfo function sets the user-specific information about the configuration elements for a workstation.",
    "library": "Netapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Lmwksta.h (include Lm.h)",
    "return_value": "If the function succeeds, the return value is NERR_Success. If the function fails, the return value can be one of the following error codes.  ",
    "remarks": "The  NetWkstaUserSetInfo function only works locally. Administrator group membership is required. Domain names in the wkui1101_oth_domains member of the  WKSTA_USER_INFO_1101 structure are separated by spaces. An empty list is valid. A NULL pointer means to leave the member unmodified. The wkui1101_oth_domains member cannot be set with MS-DOS. When setting this element,  NetWkstaUserSetInfo rejects the request if the name list was invalid or if a name could not be added to one or more of the network adapters managed by the system. If the  NetWkstaUserSetInfo function returns ERROR_INVALID_PARAMETER, you can use the parm_err parameter to indicate the member of the workstation user information structure that is invalid. (A workstation user information structure begins with WKSTA_USER_INFO_ and its format is specified by the level parameter.) The following table lists the value that can be returned in the parm_err parameter and the corresponding structure member that is in error. (The prefix wkui*_ indicates that the member can begin with multiple prefixes, for example, wkui0_ or wkui1_.)  The following code sample demonstrates how to set user-specific information for a workstation using a call to the  NetWkstaUserSetInfo function, specifying information level 1101 ( WKSTA_USER_INFO_1101). ",
    "return_type": "NET_API_STATUS",
    "category": "Network Management",
    "name": "NetWkstaUserSetInfo",
    "is_callback": 0,
    "dll": "Netapi32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "reserved",
        "description": "This parameter must be set to zero."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "level",
        "description": "Specifies the information level of the data. This parameter can be one of the following values.     ValueMeaning  1   Specifies information about the workstation, including the name of the current user and the domains accessed by the workstation. The buf parameter points to a  WKSTA_USER_INFO_1 structure.   1101   Specifies domains browsed by the workstation. The buf parameter points to a  WKSTA_USER_INFO_1101 structure."
      },
      {
        "in_out": "_In_",
        "type": "LPBYTE",
        "name": "buf",
        "description": "Pointer to the buffer that specifies the data. The format of this data depends on the value of the level parameter. For more information, see  Network Management Function Buffers."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "parm_err",
        "description": "Pointer to a value that receives the index of the first parameter that causes the ERROR_INVALID_PARAMETER error. If this parameter is NULL, the index is not returned on error."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]