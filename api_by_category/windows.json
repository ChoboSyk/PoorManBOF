[
  {
    "n_arguments": 3,
    "description": "Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "A client rectangle is the smallest rectangle that completely encloses a client area. A window rectangle is the smallest rectangle that completely encloses the window, which includes the client area and the nonclient area. The AdjustWindowRect function does not add extra space when a menu bar wraps to two or more rows. The AdjustWindowRect function does not take the WS_VSCROLL or WS_HSCROLL styles into account. To account for the scroll bars, call the  GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "AdjustWindowRect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPRECT",
        "name": "lpRect",
        "description": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStyle",
        "description": "Type: DWORD The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bMenu",
        "description": "Type: BOOL Indicates whether the window has a menu."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "A client rectangle is the smallest rectangle that completely encloses a client area. A window rectangle is the smallest rectangle that completely encloses the window, which includes the client area and the nonclient area. The AdjustWindowRectEx function does not add extra space when a menu bar wraps to two or more rows. The AdjustWindowRectEx function does not take the WS_VSCROLL or WS_HSCROLL styles into account. To account for the scroll bars, call the GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "AdjustWindowRectEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "LPRECT",
        "name": "lpRect",
        "description": "Type: LPRECT A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStyle",
        "description": "Type: DWORD The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bMenu",
        "description": "Type: BOOL Indicates whether the window has a menu."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwExStyle",
        "description": "Type: DWORD The extended window style of the window whose required size is to be calculated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables the specified process to set the foreground window using the SetForegroundWindow function. The calling process must already be able to set the foreground window. For more information, see Remarks later in this topic.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function will fail if the calling process cannot set the foreground window. To get extended error information, call GetLastError. ",
    "remarks": "The system restricts which processes can set the foreground window. A process can set the foreground window only if one of the following conditions is true: A process that can set the foreground window can enable another process to set the foreground window by calling AllowSetForegroundWindow. The process specified by dwProcessId loses the ability to set the foreground window the next time the user generates input, unless the input is directed at that process, or the next time a process calls AllowSetForegroundWindow, unless that process is specified. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "AllowSetForegroundWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "Type: DWORD The identifier of the process that will be enabled to set the foreground window. If this parameter is ASFW_ANY, all processes will be enabled to set the foreground window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables you to produce special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. The function will fail in the following situations: To get extended error information, call the GetLastError function. ",
    "remarks": "To show or hide a window without special effects, use ShowWindow. When using slide or roll animation, you must specify the direction. It can be either AW_HOR_POSITIVE, AW_HOR_NEGATIVE, AW_VER_POSITIVE, or AW_VER_NEGATIVE. You can combine AW_HOR_POSITIVE or AW_HOR_NEGATIVE with AW_VER_POSITIVE or AW_VER_NEGATIVE to animate a window diagonally. The window procedures for the window and its child windows should handle any WM_PRINT or WM_PRINTCLIENT messages. Dialog boxes, controls, and common controls already handle WM_PRINTCLIENT. The default window procedure already handles WM_PRINT. If a child window is displayed partially clipped, when it is animated it will have holes where it is clipped. AnimateWindow supports RTL windows. Avoid animating a window that has a drop shadow because it produces visually distracting, jerky animations. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "AnimateWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window to animate. The calling thread must own this window."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwTime",
        "description": "Type: DWORD The time it takes to play the animation, in milliseconds. Typically, an animation takes 200 milliseconds to play."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD The type of animation. This parameter can be one or more of the following values. Note that, by default, these flags take effect when showing a window. To take effect when hiding a window, use AW_HIDE and a logical OR operator with the appropriate flags.   ValueMeaning  AW_ACTIVATE 0x00020000   Activates the window. Do not use this value with AW_HIDE.    AW_BLEND 0x00080000   Uses a fade effect. This flag can be used only if hwnd is a top-level window.    AW_CENTER 0x00000010   Makes the window appear to collapse inward if AW_HIDE is used or expand outward if the AW_HIDE is not used. The various direction flags have no effect.    AW_HIDE 0x00010000   Hides the window. By default, the window is shown.    AW_HOR_POSITIVE 0x00000001   Animates the window from left to right. This flag can be used with roll or slide animation. It is ignored when used with AW_CENTER or AW_BLEND.   AW_HOR_NEGATIVE 0x00000002   Animates the window from right to left. This flag can be used with roll or slide animation. It is ignored when used with AW_CENTER or AW_BLEND.   AW_SLIDE 0x00040000   Uses slide animation. By default, roll animation is used. This flag is ignored when used with AW_CENTER.    AW_VER_POSITIVE 0x00000004   Animates the window from top to bottom. This flag can be used with roll or slide animation. It is ignored when used with AW_CENTER or AW_BLEND.    AW_VER_NEGATIVE 0x00000008   Animates the window from bottom to top. This flag can be used with roll or slide animation. It is ignored when used with AW_CENTER or AW_BLEND."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If a pop-up window exists, the return value is nonzero, even if the pop-up window is completely covered by other windows. If a pop-up window does not exist, the return value is zero. ",
    "remarks": "This function does not detect unowned pop-up windows or windows that do not have the WS_VISIBLE style bit set. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "AnyPopup",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Arranges all the minimized (iconic) child windows of the specified parent window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: UINT If the function succeeds, the return value is the height of one row of icons. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "An application that maintains its own minimized child windows can use the ArrangeIconicWindows function to arrange icons in a parent window. This function can also arrange icons on the desktop. To retrieve the window handle to the desktop window, use the GetDesktopWindow function. An application sends the WM_MDIICONARRANGE message to the multiple-document interface (MDI) client window to prompt the client window to arrange its minimized MDI child windows. ",
    "return_type": "UINT",
    "category": "Windows",
    "name": "ArrangeIconicWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the parent window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Allocates memory for a multiple-window- position structure and returns the handle to the structure.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HDWP If the function succeeds, the return value identifies the multiple-window-position structure. If insufficient system resources are available to allocate the structure, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The multiple-window-position structure is an internal structure; an application cannot access it directly. DeferWindowPos fills the multiple-window-position structure with information about the target position for one or more windows about to be moved. The EndDeferWindowPos function accepts the handle to this structure and repositions the windows by using the information stored in the structure. If any of the windows in the multiple-window- position structure have the SWP_HIDEWINDOW or SWP_SHOWWINDOW flag set, none of the windows are repositioned. If the system must increase the size of the multiple-window- position structure beyond the initial size specified by the nNumWindows parameter but cannot allocate enough memory to do so, the system fails the entire window positioning sequence (BeginDeferWindowPos, DeferWindowPos, and EndDeferWindowPos). By specifying the maximum size needed, an application can detect and process failure early in the process. ",
    "return_type": "HDWP",
    "category": "Windows",
    "name": "BeginDeferWindowPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nNumWindows",
        "description": "Type: int The initial number of windows for which to store position information. The DeferWindowPos function increases the size of the structure, if necessary."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Use the BringWindowToTop function to uncover any window that is partially or completely obscured by other windows. Calling this function is similar to calling the SetWindowPos function to change a window's position in the Z order. BringWindowToTop does not make a window a top-level window. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "BringWindowToTop",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to bring to the top of the Z order."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. When the specified pop-up window size is smaller than the desktop window size, use the CalculatePopupWindowPosition function to ensure that the pop-up window is fully visible on the desktop window, regardless of the specified anchor point.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, it returns TRUE; otherwise, it returns FALSE.  \t\t\t\tTo get extended error information, call GetLastError. ",
    "remarks": "TPM_WORKAREA is supported for the TrackPopupMenu and TrackPopupMenuEx functions. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "CalculatePopupWindowPosition",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const POINT*",
        "name": "anchorPoint",
        "description": "Type: const POINT* The specified anchor point."
      },
      {
        "in_out": "_In_",
        "type": "const SIZE*",
        "name": "windowSize",
        "description": "Type: const SIZE* The specified window size."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "flags",
        "description": "Type: UINT Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the TrackPopupMenuEx function.  Use one of the following flags to specify how the function positions the pop-up window horizontally.  \t\t\t\t\t  ValueMeaning  TPM_CENTERALIGN 0x0004L    \t\t\t\t\t\tCenters pop-up window horizontally relative to the coordinate specified by the anchorPoint->x parameter.  \t\t\t\t\t\t   TPM_LEFTALIGN 0x0000L   Positions the pop-up window so  \t\t\t\t\t\tthat its left edge is aligned with the coordinate specified by  \t\t\t\t\t\tthe anchorPoint->x parameter.  \t\t\t\t\t\t   TPM_RIGHTALIGN 0x0008L    \t\t\t\t\t\tPositions the pop-up window so that its right edge is aligned with the coordinate specified by the anchorPoint->x parameter. \t\t\t\t\t\t       \t\t\t\t\tUses one of the following flags to specify how the function positions the pop-up window vertically.  \t\t\t\t\t  ValueMeaning  TPM_BOTTOMALIGN 0x0020L    \t\t\t\t\tPositions the pop-up window so  \t\t\t\t\tthat its bottom edge is aligned with the coordinate specified by  \t\t\t\t\tthe anchorPoint->y parameter.  \t\t\t\t\t\t   TPM_TOPALIGN 0x0000L    \t\t\t\t\t\tPositions the pop-up window so  \t\t\t\t\t\tthat its top edge is aligned with the coordinate specified by  \t\t\t\t\t\tthe anchorPoint->y parameter.  \t\t\t\t\t\t   TPM_VCENTERALIGN 0x0010L    \t\t\t\t\t\tCenters the pop-up window vertically relative to the coordinate specified by the anchorPoint->y  \t\t\t\t\t\tparameter. \t\t\t\t\t\t       \t\t\t\t\tUse one of the following flags to specify whether to accommodate horizontal or vertical alignment.  \t\t\t\t\t  ValueMeaning  TPM_HORIZONTAL 0x0000L    \t\t\t\t\tIf the pop-up window cannot be shown at the specified location without overlapping  \t\t\t\t\tthe excluded rectangle, the system tries to accommodate the requested  \t\t\t\t\thorizontal alignment before the requested vertical alignment.  \t\t\t\t\t\t   TPM_VERTICAL 0x0040L    \t\t\t\t\tIf the pop-up window cannot be shown at the specified location without overlapping  \t\t\t\t\tthe excluded rectangle, the system tries to accommodate the requested vertical  \t\t\t\t\talignment before the requested horizontal alignment. \t\t\t\t\t\t       \t\t\t\t\tThe following flag \t\t\t\t\tis available starting with Windows 7. \t\t\t\t\t  ValueMeaning  TPM_WORKAREA 0x10000L    \t\t\t\t\t\tRestricts the pop-up window  \t\t\t\t\t\tto within the work area. If this flag is not set,  \t\t\t\t\t\tthe pop-up window is restricted to the work area only if the  \t\t\t\t\t\tinput point is within the work area.  \t\t\t\t\t\tFor more information, see the rcWork  \t\t\t\t\t\tand rcMonitor members of the MONITORINFO structure."
      },
      {
        "in_out": "_In_opt_",
        "type": "RECT*",
        "name": "excludeRect",
        "description": "Type: RECT* A pointer to a structure that specifies the exclude rectangle.  \t\t\t\tIt can be NULL."
      },
      {
        "in_out": "_Out_",
        "type": "RECT*",
        "name": "popupWindowPosition",
        "description": "Type: RECT*  \t\t\t\tA pointer to a structure that specifies the pop-up window position."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Cascades the specified child windows of the specified parent window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: WORD If the function succeeds, the return value is the number of windows arranged. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "By default, CascadeWindows arranges the windows in the order provided by the lpKids array, but preserves the Z-Order. If you specify the MDITILE_ZORDER flag, CascadeWindows arranges the windows in Z order. Calling CascadeWindows causes all maximized windows to be restored to their previous size. ",
    "return_type": "WORD",
    "category": "Windows",
    "name": "CascadeWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wHow",
        "description": "Type: UINT A cascade flag. This parameter can be one or more of the following values.   ValueMeaning  MDITILE_SKIPDISABLED 0x0002   Prevents disabled MDI child windows from being cascaded.    MDITILE_ZORDER 0x0004    \t\t\t\t\t\t Arranges the windows in Z order. If this value is not specified, the windows are arranged using the order specified in the lpKids array."
      },
      {
        "in_out": "_In_opt_",
        "type": "const RECT*",
        "name": "lpRect",
        "description": "Type: const RECT* A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. This parameter can be NULL, in which case the client area of the parent window is used."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cKids",
        "description": "Type: UINT The number of elements in the array specified by the  lpKids parameter. This parameter is ignored if lpKids is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "const HWND*",
        "name": "lpKids",
        "description": "Type: const HWND* An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[ \t\tUsing the  \t\tChangeWindowMessageFilter function is not recommended, as it has process-wide scope.  \t\tInstead, use the ChangeWindowMessageFilterEx function to  \t\tcontrol access to specific windows as needed. \t\tChangeWindowMessageFilter may not be supported in future versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL TRUE if successful; otherwise, FALSE. To get extended error information, call GetLastError. ",
    "remarks": "UIPI is a security feature that prevents messages from being received from a lower integrity level sender. All such messages with a value above WM_USER are blocked by default. The filter, somewhat contrary to intuition, is a list of messages that are allowed through. Therefore, adding a message to the filter allows that message to be received from a lower integrity sender, while removing a message blocks that message from being received. Certain messages with a value less than WM_USER are required to pass through the filter regardless of the filter setting. You can call this function to remove one of those messages from the filter and it will return TRUE. However, the message will still be received by the calling process. Processes at or below SECURITY_MANDATORY_LOW_RID are not allowed to change the filter. If those processes call this function, it will fail. For more information on integrity levels, see Understanding and Working in Protected Mode Internet Explorer. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "ChangeWindowMessageFilter",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT The message to add to or remove from the filter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlag",
        "description": "Type: DWORD The action to be performed. One of the following values.  ValueMeaning  MSGFLT_ADD 1   Adds the message to the filter. This has the effect of allowing the message to be received.   MSGFLT_REMOVE 2   Removes the message from the filter. This has the effect of blocking the message."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, it returns TRUE; otherwise, it returns FALSE. To get extended error information, call GetLastError. ",
    "remarks": "UIPI is a security feature that prevents messages from being received from a lower-integrity-level sender. \t\tYou can use this function to allow specific messages to be delivered to a window even  \t\tif the message originates from a process at a lower integrity level. Unlike the ChangeWindowMessageFilter function,  \t\twhich controls the process message filter, the ChangeWindowMessageFilterEx function controls the window message filter. An application may use the ChangeWindowMessageFilter function to  \t\tallow or block a message in a process-wide manner.  \t\tIf the message is allowed by either the process message filter  \t\tor the window message filter, it will be delivered to the window. Note that processes at or below SECURITY_MANDATORY_LOW_RID are not allowed to change the message filter.  \t\tIf those processes call this function, it will fail and generate the extended error code, ERROR_ACCESS_DENIED. Certain messages whose value is smaller than WM_USER are required to be passed through the filter,  \t\tregardless of the filter setting. There will be no effect when you attempt to use this function to  \t\tallow or block such messages. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "ChangeWindowMessageFilterEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose UIPI message filter is to be modified."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "message",
        "description": "Type: UINT The message that the message filter allows through or blocks."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "action",
        "description": "Type: DWORD The action to be performed, and can take one of the following values:  ValueMeaning  MSGFLT_ALLOW 1   Allows the message through the filter. This enables the message to be received by  \t\t\t\t\thWnd, regardless of the source of the message,  \t\t\t\t\teven it comes from a lower privileged process. \t\t\t\t\t   MSGFLT_DISALLOW 2   Blocks the message to be delivered to hWnd if it comes from a lower privileged process,  \t\t\t\t\tunless the message is allowed process-wide by using the ChangeWindowMessageFilter function  \t\t\t\t\tor globally. \t\t\t\t\t   MSGFLT_RESET 0   Resets the window message filter for hWnd to the default.   Any message allowed \t\t\t\t\tglobally or process-wide will get through, but any message not included  \t\t\t\t\tin those two categories, and which comes from a lower privileged process, will be blocked."
      },
      {
        "in_out": "_Inout_opt_",
        "type": "PCHANGEFILTERSTRUCT",
        "name": "pChangeFilterStruct",
        "description": "Type: PCHANGEFILTERSTRUCT Optional pointer to a CHANGEFILTERSTRUCT structure."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines which, if any,  \t\t\tof the child windows belonging to a parent window contains the specified point.  \t\t\tThe search is restricted to immediate child windows. Grandchildren, and deeper  \t\t\tdescendant windows are not searched.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the child window that contains the point,  \t\t\t\teven if the child window is hidden or disabled. If the point lies outside the  \t\t\t\tparent window, the return value is NULL. If the point is within  \t\t\t\tthe parent window but not within any child window, the return value is a handle  \t\t\t\tto the parent window. ",
    "remarks": "The system maintains an internal list, containing the handles of the child windows  \t\t\tassociated with a parent window. The order of the handles in the list depends on the Z  \t\t\torder of the child windows. If more than one child window contains the specified point,  \t\t\tthe system returns a handle to the first window in the list that contains the point. ChildWindowFromPoint treats an HTTRANSPARENT area of a standard  \t\t\tcontrol the same as other parts of the control. In contrast,  \t\t\tRealChildWindowFromPoint treats an HTTRANSPARENT area differently;  \t\t\tit returns the child window behind a transparent area of a control. For example, if the  \t\t\tpoint is in a transparent area of a groupbox, ChildWindowFromPoint  \t\t\treturns the groupbox while RealChildWindowFromPoint returns the  \t\t\tchild window behind the groupbox. However, both APIs return  \t\t\ta static field, even though it, too, returns HTTRANSPARENT. For an example, see \"Creating a Combo Box Toolbar\" in Using Combo Boxes. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "ChildWindowFromPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "Point",
        "description": "Type: POINT A structure that defines the client  \t\t\t\tcoordinates, relative to hWndParent,  \t\t\t\tof the point to be checked."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines which, if any,  \t\tof the child windows belonging to the specified parent window contains the specified point.  \t\tThe function can ignore invisible, disabled, and transparent child windows. The search is  \t\trestricted to immediate child windows. Grandchildren and deeper descendants are not searched.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the first child window that contains  \t\t\t\tthe point and meets the criteria specified by uFlags.  \t\t\t\tIf the point is within the parent window but not within any child window that  \t\t\t\tmeets the criteria, the return value is a handle to the parent window. If the  \t\t\t\tpoint lies outside the parent window or if the function fails, the return  \t\t\t\tvalue is NULL. ",
    "remarks": "The system maintains an internal list that contains the handles of the child  \t\t\twindows associated with a parent window. The order of the handles in the list  \t\t\tdepends on the Z order of the child windows. If more than one child window  \t\t\tcontains the specified point, the system returns a handle to the first window  \t\t\tin the list that contains the point and meets the criteria specified by  \t\t\tuFlags. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "ChildWindowFromPointEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "pt",
        "description": "Type: POINT A structure that defines the  \t\t\t\tclient coordinates (relative to hwndParent)  \t\t\t\tof the point to be checked."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The child windows to be skipped. This parameter can be one or more of the  \t\t\t\tfollowing values.   ValueMeaning  CWP_ALL 0x0000   Does not skip any child windows   CWP_SKIPDISABLED 0x0002   Skips disabled child windows   CWP_SKIPINVISIBLE 0x0001   Skips invisible child windows   CWP_SKIPTRANSPARENT 0x0004   Skips transparent child windows"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Minimizes (but does not destroy) the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "To destroy a window, an application must use the DestroyWindow function. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "CloseWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be minimized."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 11,
    "description": "Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the new window. If the function fails, the return value is NULL. To get extended error information, call GetLastError. This function typically fails for one of the following reasons: ",
    "remarks": "Before returning, CreateWindow sends a WM_CREATE message to the window procedure. For overlapped, pop-up, and child windows, CreateWindow sends WM_CREATE, WM_GETMINMAXINFO, and WM_NCCREATE messages to the window. The  lParam parameter of the WM_CREATE message contains a pointer to a CREATESTRUCT structure. If the WS_VISIBLE style is specified, CreateWindow sends the window all the messages required to activate and show the window. If the created window is a child window, its default position is at the bottom of the Z-order. If the created window is a top-level window, its default position is at the top of the Z-order (but beneath all topmost windows unless the created window is itself topmost). For information on controlling whether the Taskbar displays a button for the created window, see Managing Taskbar Buttons. For information on removing a window, see the DestroyWindow function. The following predefined system classes can be specified in the lpClassName parameter. Note the corresponding control styles you can use in the dwStyle parameter.  CreateWindow is implemented as a call to the CreateWindowEx function, as shown below. For an example, see Using Window Classes. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "CreateWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpClassName",
        "description": "Type: LPCTSTR A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpWindowName",
        "description": "Type: LPCTSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\"."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStyle",
        "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "x",
        "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "y",
        "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area. If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nWidth",
        "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is either the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, nWidth and nHeight are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nHeight",
        "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If nWidth is set to CW_USEDEFAULT, the system ignores nHeight."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndParent",
        "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows. \t\t\t\t\t  \t\t\t\t\t\t To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpParam",
        "description": "Type: LPVOID A pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 12,
    "description": "Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the CreateWindow function. For more information about creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the new window. If the function fails, the return value is NULL. To get extended error information, call GetLastError. This function typically fails for one of the following reasons: ",
    "remarks": "The CreateWindowEx function sends WM_NCCREATE, WM_NCCALCSIZE, and WM_CREATE messages to the window being created. If the created window is a child window, its default position is at the bottom of the Z-order. If the created window is a top-level window, its default position is at the top of the Z-order (but beneath all topmost windows unless the created window is itself topmost). For information on controlling whether the Taskbar displays a button for the created window, see Managing Taskbar Buttons. For information on removing a window, see the DestroyWindow function. The following predefined control classes can be specified in the lpClassName parameter. Note the corresponding control styles you can use in the dwStyle parameter.  The WS_EX_NOACTIVATE value for dwExStyle prevents foreground activation by the system. To prevent queue activation when the user clicks on the window, you must process the WM_MOUSEACTIVATE message appropriately. To bring the window to the foreground or to activate it programmatically, use SetForegroundWindow or SetActiveWindow. Returning FALSE to WM_NCACTIVATE prevents the window from losing queue activation. However, the return value is ignored at activation time. With WS_EX_COMPOSITED set, all descendants of a window get bottom-to-top painting order using double-buffering. Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects, but only if the descendent window also has the WS_EX_TRANSPARENT bit set. Double-buffering allows the window and its descendents to be painted without flicker. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "CreateWindowEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwExStyle",
        "description": "Type: DWORD The extended window style of the window being created. For a list of possible values,see  Extended Window Styles."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpClassName",
        "description": "Type: LPCTSTR A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero. If lpClassName is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpWindowName",
        "description": "Type: LPCTSTR The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar. When using CreateWindow to create controls, such as buttons, check boxes, and static controls, use lpWindowName to specify the text of the control. When creating a static control with the SS_ICON style, use lpWindowName to specify the icon name or identifier. To specify an identifier, use the syntax \"#num\"."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwStyle",
        "description": "Type: DWORD The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "x",
        "description": "Type: int The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, x is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If x is set to CW_USEDEFAULT, the system selects the default position for the window's upper-left corner and ignores the y parameter. CW_USEDEFAULT is valid only for overlapped windows; if it is specified for a pop-up or child window, the x and y parameters are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "y",
        "description": "Type: int The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, y is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box y is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.   If an overlapped window is created with the WS_VISIBLE style bit set and the x parameter is set to CW_USEDEFAULT, then the y parameter determines how the window is shown. If the y parameter is CW_USEDEFAULT, then the window manager calls ShowWindow with the SW_SHOW flag after the window has been created. If the y parameter is some other value, then the window manager calls ShowWindow with that value as the nCmdShow parameter."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nWidth",
        "description": "Type: int The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT. If nWidth is CW_USEDEFAULT, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. CW_USEDEFAULT is valid only for overlapped windows; if CW_USEDEFAULT is specified for a pop-up or child window, the nWidth and nHeight parameter are set to zero."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nHeight",
        "description": "Type: int The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndParent",
        "description": "Type: HWND A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.  To create a message-only window, supply HWND_MESSAGE or a handle to an existing message-only window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used. For a child window, hMenu specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Type: HINSTANCE A handle to the instance of the module to be associated with the window."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPVOID",
        "name": "lpParam",
        "description": "Type: LPVOID Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.  This message is sent to the created window by this function before it returns. If an application calls CreateWindow to create a MDI client window, lpParam should point to a CLIENTCREATESTRUCT structure. If an MDI client window calls CreateWindow to create an MDI child window, lpParam should point to a MDICREATESTRUCT structure. lpParam may be NULL if no additional data is needed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 8,
    "description": "Updates the specified multiple-window  \t\t\t\u00e2\u0080\u0093 position structure for the specified window. The function then returns a handle to the updated structure. The EndDeferWindowPos function uses the information in this structure to change the position and size of a number of windows simultaneously. The BeginDeferWindowPos function creates the structure.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HDWP The return value identifies the updated multiple-window  \t\t\t\t\t\t\u00e2\u0080\u0093 position structure. The handle returned by this function may differ from the handle passed to the function. The new handle that this function returns should be passed during the next call to the DeferWindowPos or EndDeferWindowPos function. If insufficient system resources are available for the function to succeed, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "If a call to DeferWindowPos fails, the application should abandon the window-positioning operation and not call EndDeferWindowPos. If SWP_NOZORDER is not specified, the system places the window identified by the hWnd parameter in the position following the window identified by the hWndInsertAfter parameter. If hWndInsertAfter is NULL or HWND_TOP, the system places the hWnd window at the top of the Z order. If hWndInsertAfter is set to HWND_BOTTOM, the system places the hWnd window at the bottom of the Z order. All coordinates for child windows are relative to the upper-left corner of the parent window's client area. A window can be made a topmost window either by setting hWndInsertAfter to the HWND_TOPMOST flag and ensuring that the SWP_NOZORDER flag is not set, or by setting the window's position in the Z order so that it is above any existing topmost windows. When a non-topmost window is made topmost, its owned windows are also made topmost. Its owners, however, are not changed. If neither the SWP_NOACTIVATE nor SWP_NOZORDER flag is specified (that is, when the application requests that a window be simultaneously activated and its position in the Z order changed), the value specified in hWndInsertAfter is used only in the following circumstances: An application cannot activate an inactive window without also bringing it to the top of the Z order. An application can change an activated window's position in the Z order without restrictions, or it can activate a window and then move it to the top of the topmost or non-topmost windows. A topmost window is no longer topmost if it is repositioned to the bottom (HWND_BOTTOM) of the Z order or after any non-topmost window. When a topmost window is made non-topmost, its owners and its owned windows are also made non-topmost windows. A non-topmost window may own a topmost window, but not vice versa. Any window (for example, a dialog box) owned by a topmost window is itself made a topmost window to ensure that all owned windows stay above their owner. ",
    "return_type": "HDWP",
    "category": "Windows",
    "name": "DeferWindowPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDWP",
        "name": "hWinPosInfo",
        "description": "Type: HDWP A handle to a multiple-window  \t\t\t\t\t\u2013 position structure that contains size and position information for one or more windows. ..."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window for which update information is stored in the structure. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndInsertAfter",
        "description": "Type: HWND A handle to the window that precedes the positioned window in the Z order. This parameter must be a window handle or one of the following values. This parameter is ignored if the SWP_NOZORDER flag is set in the uFlags parameter.   ValueMeaning  HWND_BOTTOM ((HWND)1)   Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.   HWND_NOTOPMOST ((HWND)-2)   Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.   HWND_TOP ((HWND)0)   Places the window at the top of the Z order.   HWND_TOPMOST ((HWND)-1)   Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "x",
        "description": "Type: int The x-coordinate of the window's upper-left corner."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "y",
        "description": "Type: int The y-coordinate of the window's upper-left corner."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cx",
        "description": "Type: int The window's new width, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cy",
        "description": "Type: int The window's new height, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT A combination of the following values that affect the size and position of the window.   ValueMeaning  SWP_DRAWFRAME 0x0020   Draws a frame (defined in the window's class description) around the window.   SWP_FRAMECHANGED 0x0020   Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.   SWP_HIDEWINDOW 0x0080   Hides the window.   SWP_NOACTIVATE 0x0010   Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).   SWP_NOCOPYBITS 0x0100   Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.   SWP_NOMOVE 0x0002   Retains the current position (ignores the x and y parameters).   SWP_NOOWNERZORDER 0x0200   Does not change the owner window's position in the Z order.   SWP_NOREDRAW 0x0008   Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.   SWP_NOREPOSITION 0x0200   Same as the SWP_NOOWNERZORDER flag.   SWP_NOSENDCHANGING 0x0400   Prevents the window from receiving the WM_WINDOWPOSCHANGING message.   SWP_NOSIZE 0x0001   Retains the current size (ignores the cx and cy parameters).   SWP_NOZORDER 0x0004   Retains the current Z order (ignores the hWndInsertAfter parameter).   SWP_SHOWWINDOW 0x0040   Displays the window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL TRUE if the function succeeds; FALSE if the \t\t\t\tfunction fails. ",
    "remarks": "This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "DeregisterShellHookWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be unregistered. The window was registered with a call to the \t\tRegisterShellHookWindow function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "A thread cannot use DestroyWindow to destroy a window created by a different thread. If the window being destroyed is a child window that does not have the WS_EX_NOPARENTNOTIFY style, a WM_PARENTNOTIFY message is sent to the parent. For an example, see Destroying a Window. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "DestroyWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be destroyed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The EndDeferWindowPos function sends the WM_WINDOWPOSCHANGING and WM_WINDOWPOSCHANGED messages to each window identified in the internal structure. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "EndDeferWindowPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HDWP",
        "name": "hWinPosInfo",
        "description": "Type: HDWP A handle to a multiple-window  \t\t\t\t\t\u2013 position structure that contains size and position information for one or more windows. ..."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is FALSE. \t\t\t\tTo get extended error information, call GetLastError. ",
    "remarks": "This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "EndTask",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be closed."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fShutDown",
        "description": "Type: BOOL Ignored. Must be FALSE."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fForce",
        "description": "Type: BOOL A TRUE for this parameter will force the destruction of the         window if an initial attempt fails to gently close the window using WM_CLOSE.         With a FALSE for this parameter, only the close with WM_CLOSE         is attempted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "An application-defined callback function used with the EnumChildWindows function. It receives the child window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE. ",
    "remarks": "The callback function can carry out any desired task. An application must register this callback function by passing its address to EnumChildWindows. ",
    "return_type": "BOOL CALLBACK",
    "category": "Windows",
    "name": "EnumChildProc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "A handle to a child window of the parent window specified in EnumChildWindows."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "The application-defined value given in EnumChildWindows."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL The return value is not used. ",
    "remarks": "If a child window has created child windows of its own, EnumChildWindows enumerates those windows as well. A child window that is moved or repositioned in the Z order during the enumeration process will be properly enumerated. The function does not enumerate a child window that is destroyed before being enumerated or that is created during the enumeration process. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "EnumChildWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndParent",
        "description": "Type: HWND A handle to the parent window whose child windows are to be enumerated. If this parameter is NULL, this function is equivalent to EnumWindows."
      },
      {
        "in_out": "_In_",
        "type": "WNDENUMPROC",
        "name": "lpEnumFunc",
        "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumChildProc."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM An application-defined value to be passed to the callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. EnumThreadWindows continues until the last window is enumerated or the callback function returns FALSE. To enumerate child windows of a particular window, use the EnumChildWindows function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the callback function returns TRUE for all windows in the thread specified by dwThreadId, the return value is TRUE. If the callback function returns FALSE on any enumerated window, or if there are no windows found in the thread specified by dwThreadId, the return value is FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "EnumThreadWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwThreadId",
        "description": "Type: DWORD The identifier of the thread whose windows are to be enumerated."
      },
      {
        "in_out": "_In_",
        "type": "WNDENUMPROC",
        "name": "lpfn",
        "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumThreadWndProc."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM An application-defined value to be passed to the callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "An application-defined callback function used with the EnumThreadWindows function. It receives the window handles associated with a thread. The WNDENUMPROC type defines a pointer to this callback function. EnumThreadWndProc is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE. ",
    "remarks": "An application must register this callback function by passing its address to the EnumThreadWindows function. ",
    "return_type": "BOOL CALLBACK",
    "category": "Windows",
    "name": "EnumThreadWndProc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "A handle to a window associated with the thread specified in the EnumThreadWindows function."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "The application-defined value given in the EnumThreadWindows function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. If EnumWindowsProc returns zero, the return value is also zero. In this case, the callback function should call SetLastError to obtain a meaningful error code to be returned to the caller of EnumWindows. ",
    "remarks": "The EnumWindows function does not enumerate child windows, with the exception of a few top-level windows owned by the system that have the WS_CHILD style. This function is more reliable than calling the GetWindow function in a loop. An application that calls GetWindow to perform this task risks being caught in an infinite loop or referencing a handle to a window that has been destroyed. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "EnumWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "WNDENUMPROC",
        "name": "lpEnumFunc",
        "description": "Type: WNDENUMPROC A pointer to an application-defined callback function. For more information, see EnumWindowsProc."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM An application-defined value to be passed to the callback function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "An application-defined callback function used with the EnumWindows or EnumDesktopWindows function. It receives top-level window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumWindowsProc is a placeholder for the application-defined function name.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE. ",
    "remarks": "An application must register this callback function by passing its address to EnumWindows or EnumDesktopWindows. ",
    "return_type": "BOOL CALLBACK",
    "category": "Windows",
    "name": "EnumWindowsProc",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "A handle to a top-level window."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "The application-defined value given in EnumWindows or EnumDesktopWindows."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the window that has the specified class name and window name. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "If the lpWindowName parameter is not NULL, FindWindow calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks for GetWindowText. For an example, see Retrieving the Number of Mouse Wheel Scroll Lines. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "FindWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpClassName",
        "description": "Type: LPCTSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.  If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.  If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpWindowName",
        "description": "Type: LPCTSTR The window name (the window's title). If this parameter is NULL, all window names match."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the window that has the specified class and window names. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "If the lpszWindow parameter is not NULL, FindWindowEx calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks section of GetWindowText. An application can call this function in the following way. FindWindowEx( NULL, NULL, MAKEINTATOM(0x8000), NULL ); Note that 0x8000 is the atom for a menu class. When an application calls this function, the function checks whether a context menu is being displayed that the application created. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "FindWindowEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window whose child windows are to be searched. If hwndParent is NULL, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.  If hwndParent is HWND_MESSAGE, the function searches all message-only windows."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndChildAfter",
        "description": "Type: HWND A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window.  If hwndChildAfter is NULL, the search begins with the first child window of hwndParent.  Note that if both hwndParent and hwndChildAfter are NULL, the function searches all top-level and message-only windows."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpszClass",
        "description": "Type: LPCTSTR The class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be placed in the low-order word of lpszClass; the high-order word must be zero.  If lpszClass is a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names, or it can be MAKEINTATOM(0x8000). In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpszWindow",
        "description": "Type: LPCTSTR The window name (the window's title). If this parameter is NULL, all window names match."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The application-switching window enables you to switch to the most recently used application window. To display the application-switching window, press ALT+TAB. To select an application from the list, continue to hold ALT down and press TAB to move through the list. Add SHIFT to reverse direction through the list. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetAltTabInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window for which status information will be retrieved. This window must be the application-switching window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "iItem",
        "description": "Type: int The index of the icon in the application-switching window. ..."
      },
      {
        "in_out": "_Inout_",
        "type": "PALTTABINFO",
        "name": "pati",
        "description": "Type: PALTTABINFO A pointer to an ALTTABINFO structure to receive the status information. Note that you must set the csSize member to sizeof(ALTTABINFO) before calling this function."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "pszItemText",
        "description": "Type: LPTSTR The name of the item. If this parameter is NULL, the name of the item is not copied."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchItemText",
        "description": "Type: UINT The size, in characters, of the pszItemText buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the handle to the ancestor of the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is the handle to the ancestor window. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetAncestor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns NULL."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "gaFlags",
        "description": "Type: UINT The ancestor to be retrieved. This parameter can be one of the following values.   ValueMeaning  GA_PARENT 1   Retrieves the parent window. This does not include the owner, as it does with the GetParent function.    GA_ROOT 2   Retrieves the root window by walking the chain of parent windows.   GA_ROOTOWNER 3   Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle. For example, see Creating, Enumerating, and Sizing Child Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetClientRect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose client coordinates are to be retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "lpRect",
        "description": "Type: LPRECT A pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the desktop window. For an example, see Initializing a Dialog Box. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetDesktopWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the foreground window. The foreground window can be NULL in certain circumstances, such as when a window is losing activation. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetForegroundWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves information about the active window or a specified GUI thread.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "This function succeeds even if the active window is not owned by the calling process. If the specified thread does not exist or have an input queue, the function will fail. This function is useful for retrieving out-of-context information about a thread. The information retrieved is the same as if an application retrieved the information about itself. For an edit control, the returned rcCaret rectangle contains the caret plus information on text direction and padding. Thus, it may not give the correct position of the cursor. The Sans Serif font uses four characters for the cursor:  To get the actual insertion point in the rcCaret rectangle, perform the following steps. The function may not return valid window handles in the GUITHREADINFO structure when called to retrieve information for the foreground thread, such as when a window is losing activation. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetGUIThreadInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "idThread",
        "description": "Type: DWORD The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId function. If this parameter is NULL, the function returns information for the foreground thread."
      },
      {
        "in_out": "_Inout_",
        "type": "LPGUITHREADINFO",
        "name": "lpgui",
        "description": "Type: LPGUITHREADINFO A pointer to a GUITHREADINFO structure that receives information describing the thread. Note that you must set the cbSize member to sizeof(GUITHREADINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines which pop-up window owned by the specified window was most recently active.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value identifies the most recently active pop-up window. The return value is the same as the hWnd parameter, if any of the following conditions are met: ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetLastActivePopup",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the owner window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the opacity and transparency color key of a layered window.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "GetLayeredWindowAttributes can be called only if the application has previously called SetLayeredWindowAttributes on the window. The function will fail if the layered window was setup with UpdateLayeredWindow. For more information, see Using Layered Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetLayeredWindowAttributes",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED using SetWindowLong after the window has been created."
      },
      {
        "in_out": "_Out_opt_",
        "type": "COLORREF*",
        "name": "pcrKey",
        "description": "Type: COLORREF* A pointer to a COLORREF value that receives the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. This can be NULL if the argument is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "BYTE*",
        "name": "pbAlpha",
        "description": "Type: BYTE* The Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When the variable referred to by pbAlpha is 0, the window is completely transparent. When the variable referred to by pbAlpha is 255, the window is opaque. This can be NULL if the argument is not needed."
      },
      {
        "in_out": "_Out_opt_",
        "type": "DWORD*",
        "name": "pdwFlags",
        "description": "Type: DWORD* A layering flag. This parameter can be NULL if the value is not needed. The layering flag can be one or more of the following values.  ValueMeaning  LWA_ALPHA 0x00000002   Use pbAlpha to determine the opacity of the layered window.   LWA_COLORKEY 0x00000001   Use pcrKey as the transparency color."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a handle to the next or previous window in the Z-Order. The next window is below the specified window; the previous window is above.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the next (or previous) window. If there is no next (or previous) window, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "This function is implemented as a call to the GetWindow function. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetNextWindow",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the wCmd parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wCmd",
        "description": "Type: UINT Indicates whether the function returns a handle to the next window or the previous window. This parameter can be either of the following values.   ValueMeaning  GW_HWNDNEXT 2   Returns a handle to the window below the given window.   GW_HWNDPREV 3   Returns a handle to the window above the given window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a handle to the specified window's parent or owner.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the window is a child window, the return value is a handle to the parent window. If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window. If the function fails, the return value is NULL. To get extended error information, call GetLastError. This function typically fails for one of the following reasons:  ",
    "remarks": "To obtain a window's owner window, instead of using GetParent, use GetWindow with the GW_OWNER flag. To obtain the parent window and not the owner, instead of using GetParent, use GetAncestor with the GA_PARENT flag. For an example, see Initializing a Dialog Box. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetParent",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose parent window handle is to be retrieved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the default layout that is used when windows are created with no parent or owner.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The layout specifies how text and graphics are laid out in a window; the default is left to right. The GetProcessDefaultLayout function lets you know if the default layout has changed, from using SetProcessDefaultLayout. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetProcessDefaultLayout",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pdwDefaultLayout",
        "description": "Type: DWORD* The current default process layout. For a list of values, see SetProcessDefaultLayout."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a handle to the Shell's desktop window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is the handle of the Shell's desktop window. If no Shell process is present, the return value is NULL. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetShellWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the current color of the specified display element. Display elements are the parts of a window and the display that appear on the system display screen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: DWORD The function returns the red, green, blue (RGB) color value of the given element. If the nIndex parameter is out of range, the return value is zero. Because zero is also a valid RGB value, you cannot use  GetSysColor to determine whether a system color is supported by the current platform. Instead, use the  GetSysColorBrush function, which returns NULL if the color is not supported. ",
    "remarks": "To display the component of the RGB  value, use the GetRValue, GetGValue, and GetBValue macros. System colors for monochrome displays are usually interpreted as shades of gray. To paint with a system color brush, an application should use GetSysColorBrush(nIndex), instead of  CreateSolidBrush(GetSysColor(nIndex)), because GetSysColorBrush returns a cached brush, instead of allocating a new one. Color is an important visual element of most user interfaces. For guidelines about using color in your applications, see Color. For an example, see  SetSysColors. ",
    "return_type": "DWORD",
    "category": "Windows",
    "name": "GetSysColor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nIndex",
        "description": "Type: int The display element whose color is to be retrieved. This parameter can be one of the following values.     ValueMeaning  COLOR_3DDKSHADOW 21   Dark shadow for three-dimensional display elements.   COLOR_3DFACE 15   Face color for three-dimensional display elements and for dialog box backgrounds.   COLOR_3DHIGHLIGHT 20   Highlight color for three-dimensional display elements (for edges facing the light source.)   COLOR_3DHILIGHT 20   Highlight color for three-dimensional display elements (for edges facing the light source.)   COLOR_3DLIGHT 22   Light color for three-dimensional display elements (for edges facing the light source.)   COLOR_3DSHADOW 16   Shadow color for three-dimensional display elements (for edges facing away from the light source).   COLOR_ACTIVEBORDER 10   Active window border.   COLOR_ACTIVECAPTION 2   Active window title bar.     Specifies the left side color in the color gradient of an active window's title bar if the gradient effect is enabled.   COLOR_APPWORKSPACE 12   Background color of multiple document interface (MDI) applications.   COLOR_BACKGROUND 1   Desktop.   COLOR_BTNFACE 15   Face color for three-dimensional display elements and for dialog box backgrounds.    COLOR_BTNHIGHLIGHT 20   Highlight color for three-dimensional display elements (for edges facing the light source.)    COLOR_BTNHILIGHT 20   Highlight color for three-dimensional display elements (for edges facing the light source.)   COLOR_BTNSHADOW 16   Shadow color for three-dimensional display elements (for edges facing away from the light source).   COLOR_BTNTEXT 18   Text on push buttons.   COLOR_CAPTIONTEXT 9   Text in caption, size box, and scroll bar arrow box.   COLOR_DESKTOP 1   Desktop.   COLOR_GRADIENTACTIVECAPTION 27   Right side color in the color gradient of an active window's title bar. COLOR_ACTIVECAPTION specifies the left side color. Use SPI_GETGRADIENTCAPTIONS with the  SystemParametersInfo function to determine whether the gradient effect is enabled.   COLOR_GRADIENTINACTIVECAPTION 28   Right side color in the color gradient of an inactive window's title bar. COLOR_INACTIVECAPTION specifies the left side color.   COLOR_GRAYTEXT 17   Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.   COLOR_HIGHLIGHT 13   Item(s) selected in a control.   COLOR_HIGHLIGHTTEXT 14   Text of item(s) selected in a control.   COLOR_HOTLIGHT 26   Color for a hyperlink or hot-tracked item.   COLOR_INACTIVEBORDER 11   Inactive window border.   COLOR_INACTIVECAPTION 3   Inactive window caption.     Specifies the left side color in the color gradient of an inactive window's title bar if the gradient effect is enabled.   COLOR_INACTIVECAPTIONTEXT 19   Color of text in an inactive caption.   COLOR_INFOBK 24   Background color for tooltip controls.   COLOR_INFOTEXT 23   Text color for tooltip controls.   COLOR_MENU 4   Menu background.   COLOR_MENUHILIGHT 29   The color used to highlight menu items when the menu appears as a flat menu (see  SystemParametersInfo). The highlighted menu item is outlined with COLOR_HIGHLIGHT. Windows 2000:  This value is not supported.   COLOR_MENUBAR 30   The background color for the menu bar when menus appear as flat menus (see  SystemParametersInfo). However, COLOR_MENU continues to specify the background color of the menu popup. Windows 2000:  This value is not supported.   COLOR_MENUTEXT 7   Text in menus.   COLOR_SCROLLBAR 0   Scroll bar gray area.   COLOR_WINDOW 5   Window background.   COLOR_WINDOWFRAME 6   Window frame.   COLOR_WINDOWTEXT 8   Text in windows."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves information about the specified title bar.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetTitleBarInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the title bar whose information is to be retrieved."
      },
      {
        "in_out": "_Inout_",
        "type": "PTITLEBARINFO",
        "name": "pti",
        "description": "Type: PTITLEBARINFO A pointer to a TITLEBARINFO structure to receive the information. Note that you must set the cbSize member to sizeof(TITLEBARINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the child window at the top of the Z order. If the specified window has no child windows, the return value is NULL. To get extended error information, use the GetLastError function. ",
    "remarks": "",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetTopWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the parent window whose child windows are to be examined. If this parameter is NULL, the function returns a handle to the window at the top of the Z order."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The EnumChildWindows function is more reliable than calling GetWindow in a loop. An application that calls GetWindow to perform this task risks being caught in an infinite loop or referencing a handle to a window that has been destroyed. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "GetWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to a window. The window handle retrieved is relative to this window, based on the value of the uCmd parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uCmd",
        "description": "Type: UINT The relationship between the specified window and the window whose handle is to be retrieved. This parameter can be one of the following values.   ValueMeaning  GW_CHILD 5   The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent window; otherwise, the retrieved handle is NULL. The function examines only child windows of the specified window. It does not examine descendant windows.   GW_ENABLEDPOPUP 6    \t\t\t\t\t\t The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first such window found using GW_HWNDNEXT); otherwise, if there are no enabled popup windows, the retrieved handle is that of the specified window.    GW_HWNDFIRST 0   The retrieved handle identifies the window of the same type that is highest in the Z order. If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.   GW_HWNDLAST 1   The retrieved handle identifies the window of the same type that is lowest in the Z order. If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.   GW_HWNDNEXT 2   The retrieved handle identifies the window below the specified window in the Z order. If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.   GW_HWNDPREV 3   The retrieved handle identifies the window above the specified window in the Z order. If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.   GW_OWNER 4   The retrieved handle identifies the specified window's owner window, if any. For more information, see Owned Windows."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the current display affinity setting, from any process, for a given window.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL This function succeeds only when the window is layered and Desktop Windows Manager  \t\t\t\tis composing the desktop. If this function succeeds, it returns TRUE; otherwise, it returns FALSE.  \t\t\t\tTo get extended error information, call GetLastError. ",
    "remarks": "This function currently only supports one flag, WDA_MONITOR (0x01). This flag  enables  a window's contents to be displayed only on the monitor. This function and SetWindowDisplayAffinity are designed to support the window content protection feature unique to Windows 7. This feature enables applications to protect their \t\town onscreen window content from being captured or copied via a specific set of public operating system features  \t\tand APIs. However, it works only when the Desktop Window Manager (DWM) is composing the desktop. It is important to note that unlike a security feature or an implementation of Digital Rights Management (DRM), there is no guarantee that  \t\t using SetWindowDisplayAffinity  \t\tand GetWindowDisplayAffinity, and other necessary functions such as DwmIsCompositionEnabled, will strictly protect windowed content, as in the case where someone takes a photograph of the screen. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetWindowDisplayAffinity",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "dwAffinity",
        "description": "Type: DWORD* The display affinity setting."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves information about the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetWindowInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose information is to be retrieved."
      },
      {
        "in_out": "_Inout_",
        "type": "PWINDOWINFO",
        "name": "pwi",
        "description": "Type: PWINDOWINFO A pointer to a WINDOWINFO structure to receive the information. Note that you must set the cbSize member to sizeof(WINDOWINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the full path and file name of the module associated with the specified window handle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: UINT The return value is the total number of characters copied into the buffer. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows",
    "name": "GetWindowModuleFileName",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose module file name is to be retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpszFileName",
        "description": "Type: LPTSTR The path and file name."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchFileNameMax",
        "description": "Type: UINT The maximum number of characters that can be copied into the lpszFileName buffer."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the show state and the restored, minimized, and maximized positions of the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The flags member of WINDOWPLACEMENT retrieved by this function is always zero. If the window identified by the hWnd parameter is maximized, the showCmd member is SW_SHOWMAXIMIZED. If the window is minimized, showCmd is SW_SHOWMINIMIZED. Otherwise, it is SW_SHOWNORMAL. The length member of WINDOWPLACEMENT must be set to sizeof(WINDOWPLACEMENT). If this member is not set correctly, the function returns FALSE. For additional remarks on the proper use of window placement coordinates, see WINDOWPLACEMENT. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetWindowPlacement",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_Inout_",
        "type": "WINDOWPLACEMENT*",
        "name": "lpwndpl",
        "description": "Type: WINDOWPLACEMENT* A pointer to the WINDOWPLACEMENT structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle. For an example, see Initializing a Dialog Box. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "GetWindowRect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "lpRect",
        "description": "Type: LPRECT A pointer to a  RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError. This function cannot retrieve the text of an edit control in another application. ",
    "remarks": "If the target window is owned by the current process, GetWindowText causes a WM_GETTEXT message to be sent to the specified window or control. If the target window is owned by another process and has a caption, GetWindowText retrieves the window caption text. If the window does not have a caption, the return value is a null string. This behavior is by design. It allows applications to call GetWindowText without becoming unresponsive if the process that owns the target window is not responding. However, if the target window is not responding and it belongs to the calling application, GetWindowText will cause the calling application to become unresponsive. To retrieve the text of a control in another process, send a WM_GETTEXT message directly instead of calling GetWindowText. For an example, see Sending a Message. ",
    "return_type": "int",
    "category": "Windows",
    "name": "GetWindowText",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window or control containing the text."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpString",
        "description": "Type: LPTSTR The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nMaxCount",
        "description": "Type: int The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, GetWindowTextLength cannot retrieve the length of the text of an edit control in another application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value may actually be greater than the length of the text. For more information, see the following Remarks section. If the window has no text, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the target window is owned by the current process, GetWindowTextLength causes a WM_GETTEXTLENGTH message to be sent to the specified window or control. Under certain conditions, the GetWindowTextLength function may return a value that is larger than the actual length of the text. This occurs with certain mixtures of ANSI and Unicode, and is due to the system allowing for the possible existence of double-byte character set (DBCS) characters within the text. The return value, however, will always be at least as large as the actual length of the text; you can thus always use it to guide buffer allocation. This behavior can occur when an application uses both ANSI functions and common dialogs, which use Unicode. It can also occur when an application uses the ANSI version of GetWindowTextLength with a window whose window procedure is Unicode, or the Unicode version of GetWindowTextLength with a window whose window procedure is ANSI. For more information on ANSI and ANSI functions, see Conventions for Function Prototypes. To obtain the exact length of the text, use the WM_GETTEXT, LB_GETTEXT, or CB_GETLBTEXT messages, or the GetWindowText function. ",
    "return_type": "int",
    "category": "Windows",
    "name": "GetWindowTextLength",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window or control."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: DWORD The return value is the identifier of the thread that created the window. ",
    "remarks": "",
    "return_type": "DWORD",
    "category": "Windows",
    "name": "GetWindowThreadProcessId",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPDWORD",
        "name": "lpdwProcessId",
        "description": "Type: LPDWORD A pointer to a variable that receives the process identifier. If this parameter is not NULL, GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: int If the function succeeds, the return value is the length, in characters, \t\t\t\tof the copied string, not including the terminating null character. \t\t\t\tIf the window has no title bar or text, if the title bar is empty, or if the window \t\t\t\tor control handle is invalid, the return value is zero. To get extended error \t\t\t\tinformation, call GetLastError. ",
    "remarks": "This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "int",
    "category": "Windows",
    "name": "InternalGetWindowText",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window or control containing the text."
      },
      {
        "in_out": "_Out_",
        "type": "LPWSTR",
        "name": "lpString",
        "description": "Type: LPWSTR The buffer that is to receive the text. \t\t\t\t \t\t\t\tIf the \t\t\t\tstring is as long or longer than the buffer, the string is truncated and \t\t\t\tterminated with a null character."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nMaxCount",
        "description": "Type: int The maximum number of characters to be copied to the buffer, \t\t\t\tincluding the null character. If the text exceeds this limit, \t\t\t\tit is truncated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if that parent window is in the chain of parent windows; the chain of parent windows leads from the original overlapped or pop-up window to the child window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window is a child or descendant window of the specified parent window, the return value is nonzero. If the window is not a child or descendant window of the specified parent window, the return value is zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsChild",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndParent",
        "description": "Type: HWND A handle to the parent window."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread.",
    "library": "User32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL The function returns a nonzero value in the following situations: Otherwise, the function returns zero. If bConvert is TRUE and the function cannot successfully convert the thread to a GUI thread,  IsGUIThread returns ERROR_NOT_ENOUGH_MEMORY. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsGUIThread",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bConvert",
        "description": "Type: BOOL If TRUE and the thread is not a GUI thread, convert the thread to a GUI thread."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL The return value is TRUE if the window stops responding; otherwise, it is FALSE.  Ghost windows always return         TRUE. ",
    "remarks": "The Windows timeout criteria of 5 seconds is subject to change. This function was not included in the SDK headers and libraries until Windows XP Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsHungAppWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the specified window is minimized (iconic).",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window is iconic, the return value is nonzero. If the window is not iconic, the return value is zero. For an example, see Drawing a Minimized Window. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsIconic",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL TRUE if the process is dpi aware; otherwise, FALSE. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsProcessDPIAware",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the specified window handle identifies an existing window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window handle identifies an existing window, the return value is nonzero. If the window handle does not identify an existing window, the return value is zero. ",
    "remarks": "A thread should not use IsWindow for a window that it did not create because the window could be destroyed after this function was called. Further, because window handles are recycled the handle could even point to a different window. For an example, see Creating a Modeless Dialog Box. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether the specified window is a native Unicode window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window is a native Unicode window, the return value is nonzero. If the window is not a native Unicode window, the return value is zero. The window is a native ANSI window. ",
    "remarks": "The character set of a window is determined by the use of the RegisterClass function. If the window class was registered with the ANSI version of RegisterClass (RegisterClassA), the character set of the window is ANSI. If the window class was registered with the Unicode version of RegisterClass (RegisterClassW), the character set of the window is Unicode. The system does automatic two-way translation (Unicode to ANSI) for window messages. For example, if an ANSI window message is sent to a window that uses the Unicode character set, the system translates that message into a Unicode message before calling the window procedure. The system calls IsWindowUnicode to determine whether to translate the message. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsWindowUnicode",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines the visibility state of the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero. Because the return value specifies whether the window has the WS_VISIBLE style, it may be nonzero even if the window is totally obscured by other windows. ",
    "remarks": "The visibility state of a window is indicated by the WS_VISIBLE style bit. When WS_VISIBLE is set, the window is displayed and subsequent drawing into it is displayed as long as the window has the WS_VISIBLE style. Any drawing to a window with the WS_VISIBLE style will not be displayed if the window is obscured by other windows or is clipped by its parent window. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsWindowVisible",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a window is maximized.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window is zoomed, the return value is nonzero. If the window is not zoomed, the return value is zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "IsZoomed",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "The foreground process can call the LockSetForegroundWindow function to disable calls to the SetForegroundWindow function.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The system automatically enables calls to SetForegroundWindow if the user presses the ALT key or takes some action that causes the system itself to change the foreground window (for example, clicking a background window). This function is provided so applications can prevent other applications from making a foreground change that can interrupt its interaction with the user. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "LockSetForegroundWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uLockCode",
        "description": "Type: UINT Specifies whether to enable or disable calls to SetForegroundWindow. This parameter can be one of the following values.   ValueMeaning  LSFW_LOCK 1   Disables calls to SetForegroundWindow.   LSFW_UNLOCK 2   Enables calls to SetForegroundWindow."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts the logical coordinates of a point in a window to physical coordinates.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "",
    "remarks": "Windows Vista introduces the concept of physical coordinates. Desktop Window Manager (DWM) scales non-dots per inch (dpi) aware windows when the display is high dpi. The window seen on the screen corresponds to the physical coordinates. The application continues to work in logical space. Therefore, the application's view of the window is different from that which appears on the screen. For scaled windows, logical and physical coordinates are different. LogicalToPhysicalPoint is a transformation API that can be called by a process that declares itself as dpi aware. The function uses the window identified by the hWnd parameter and the logical coordinates given in the POINT structure to compute the physical coordinates. The LogicalToPhysicalPoint function replaces the logical coordinates in the POINT structure with the physical coordinates. The physical coordinates are relative to the upper-left corner of the screen. The coordinates have to be inside the client area of hWnd. On all platforms, LogicalToPhysicalPoint will fail on a window that has either 0 width or height; an application must first establish a non-0 width and height by calling, for example, MoveWindow.  On some versions of Windows (including Windows 7), LogicalToPhysicalPoint will still fail if MoveWindow has been called after a call to ShowWindow with SH_HIDE has hidden the window. In Windows 8, system\u00e2\u0080\u0093DPI aware applications translate between physical and logical space using PhysicalToLogicalPoint and LogicalToPhysicalPoint. In Windows 8.1, the additional virtualization of the system and inter-process communications means that for the majority of applications, you do not need these APIs. As a result, in Windows 8.1, PhysicalToLogicalPoint and LogicalToPhysicalPoint no longer transform points. The system returns all points to an application in its own coordinate space.  This behavior preserves functionality for the majority of applications, but there are some exceptions in which you must make changes to ensure that the application works as expected. In those cases, use PhysicalToLogicalPointForPerMonitorDPI and LogicalToPhysicalPointForPerMonitorDPI. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "LogicalToPhysicalPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted."
      },
      {
        "in_out": "_Inout_",
        "type": "LPPOINT",
        "name": "lpPoint",
        "description": "Type: LPPOINT A pointer to a POINT structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the bRepaint parameter is TRUE, the system sends the WM_PAINT message to the window procedure immediately after moving the window (that is, the MoveWindow function calls the UpdateWindow function). If bRepaint is FALSE, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing. MoveWindow sends the WM_WINDOWPOSCHANGING, WM_WINDOWPOSCHANGED, WM_MOVE, WM_SIZE, and WM_NCCALCSIZE messages to the window. For an example, see Creating, Enumerating, and Sizing Child Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "MoveWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "X",
        "description": "Type: int The new position of the left side of the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "Y",
        "description": "Type: int The new position of the top of the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nWidth",
        "description": "Type: int The new width of the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nHeight",
        "description": "Type: int The new height of the window."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRepaint",
        "description": "Type: BOOL Indicates whether the window is to be repainted. If this parameter is TRUE, the window receives a  message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Restores a minimized (iconic) window to its previous size and position; it then activates the window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "OpenIcon sends a WM_QUERYOPEN message to the given window. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "OpenIcon",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to be restored and activated."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts the physical coordinates of a point in a window to logical coordinates.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "",
    "remarks": "Windows Vista introduces the concept of physical coordinates. Desktop Window Manager (DWM) scales non-dots per inch (dpi) aware windows when the display is high dpi. The window seen on the screen corresponds to the physical coordinates. The application continues to work in logical space. Therefore, the application's view of the window is different from that which appears on the screen. For scaled windows, logical and physical coordinates are different. The function uses the window identified by the hWnd parameter and the physical coordinates given in the POINT structure to compute the logical coordinates. The logical coordinates are the unscaled coordinates that appear to the application in a programmatic way. In other words, the logical coordinates are the coordinates the application recognizes, which can be different from the physical coordinates. The API then replaces the physical coordinates with the logical coordinates. The new coordinates are in the world coordinates whose origin is (0, 0) on the desktop. The coordinates passed to the API have to be on the hWnd. The source coordinates are in device units. On all platforms, PhysicalToLogicalPoint will fail on a window that has either 0 width or height; an application must first establish a non-0 width and height by calling, for example, MoveWindow.  On some versions of Windows (including Windows 7), PhysicalToLogicalPoint will still fail if MoveWindow has been called after a call to ShowWindow with SH_HIDE has hidden the window. In Windows 8, system\u00e2\u0080\u0093DPI aware applications translate between physical and logical space using PhysicalToLogicalPoint and LogicalToPhysicalPoint. In Windows 8.1, the additional virtualization of the system and inter-process communications means that for the majority of applications, you do not need these APIs. As a result, in Windows 8.1, PhysicalToLogicalPoint and LogicalToPhysicalPoint no longer transform points. The system returns all points to an application in its own coordinate space.  This behavior preserves functionality for the majority of applications, but there are some exceptions in which you must make changes to ensure that the application works as expected. In those cases, use PhysicalToLogicalPointForPerMonitorDPI and LogicalToPhysicalPointForPerMonitorDPI. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "PhysicalToLogicalPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted."
      },
      {
        "in_out": "_Inout_",
        "type": "LPPOINT",
        "name": "lpPoint",
        "description": "Type: LPPOINT A pointer to a POINT structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a handle to the child window at the specified point. The search is restricted to immediate child windows; grandchildren and deeper descendant windows are not searched.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND The return value is a handle to the child window that contains the specified point. ",
    "remarks": "RealChildWindowFromPoint treats HTTRANSPARENT areas of a standard control differently from other areas of the control; it returns the child window behind a transparent part of a control. In contrast, ChildWindowFromPoint treats HTTRANSPARENT areas of a control the same as other areas. For example, if the point is in a transparent area of a groupbox, RealChildWindowFromPoint returns the child window behind a groupbox, whereas ChildWindowFromPoint returns the groupbox. However, both APIs return a static field, even though it, too, returns HTTRANSPARENT. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "RealChildWindowFromPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the window whose child is to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "ptParentClientCoords",
        "description": "Type: POINT A POINT structure that defines the client coordinates of the point to be checked."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a string that specifies the window type.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: UINT If the function succeeds, the return value is the number of characters copied to the specified buffer. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Windows",
    "name": "RealGetWindowClass",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window whose type will be retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "pszType",
        "description": "Type: LPTSTR A pointer to a string that receives the window type."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cchType",
        "description": "Type: UINT The length, in characters, of the buffer pointed to by the pszType parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL TRUE if the function succeeds; otherwise, FALSE. ",
    "remarks": "As with normal window messages, the second parameter of the window procedure identifies the message as a WM_SHELLHOOKMESSAGE. However, for these Shell hook messages, the message value is not a pre-defined constant like other message IDs such as WM_COMMAND. The value must be obtained dynamically using a call to RegisterWindowMessage as shown here: RegisterWindowMessage(TEXT(\"SHELLHOOK\")); This precludes handling these messages using a traditional switch statement which requires  ID values that are known at compile time.  For handling Shell hook messages, the normal practice is to code an If statement in the default section of your switch statement and then handle the message if the value of the message ID is the same as the value obtained from the RegisterWindowMessage call. The following table describes the wParam and lParam parameter values passed to the window procedure for the Shell hook messages.  This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "RegisterShellHookWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to register for Shell hook messages."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window was brought to the foreground, the return value is nonzero. If the window was not brought to the foreground, the return value is zero. ",
    "remarks": "The system restricts which processes can set the foreground window. A process can set the foreground window only if one of the following conditions is true: An application cannot force a window to the foreground while the user is working with another window. Instead, Windows flashes the taskbar button of the window to notify the user. A process that can set the foreground window can enable another process to set the foreground window by calling the AllowSetForegroundWindow function. The process specified by dwProcessId loses the ability to set the foreground window the next time the user generates input, unless the input is directed at that process, or the next time a process calls AllowSetForegroundWindow, unless that process is specified. The foreground process can disable calls to SetForegroundWindow by calling the LockSetForegroundWindow function. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetForegroundWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window that should be activated and brought to the foreground."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Sets the opacity and transparency color key of a layered window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Note that once SetLayeredWindowAttributes has been called for a layered window, subsequent UpdateLayeredWindow calls will fail until the layering style bit is cleared and set again. For more information, see Using Layered Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetLayeredWindowAttributes",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function or by setting WS_EX_LAYERED via SetWindowLong after the window has been created. Windows 8:  The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows."
      },
      {
        "in_out": "_In_",
        "type": "COLORREF",
        "name": "crKey",
        "description": "Type: COLORREF A COLORREF structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a COLORREF, use the RGB macro."
      },
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bAlpha",
        "description": "Type: BYTE Alpha value used to describe the opacity of the layered window. Similar to the SourceConstantAlpha member of the BLENDFUNCTION structure. When bAlpha is 0, the window is completely transparent. When bAlpha is 255, the window is opaque."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD An action to be taken. This parameter can be one or more of the following values.  ValueMeaning  LWA_ALPHA 0x00000002   Use bAlpha to determine the opacity of the layered window.   LWA_COLORKEY 0x00000001   Use crKey as the transparency color."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Changes the parent window of the specified child window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND If the function succeeds, the return value is a handle to the previous parent window. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "An application can use the SetParent function to set the parent window of a pop-up, overlapped, or child window. If the window identified by the hWndChild parameter is visible, the system performs the appropriate redrawing and repainting. For compatibility reasons, SetParent does not modify the WS_CHILD or WS_POPUP window styles of the window whose parent is being changed. Therefore, if hWndNewParent is NULL, you should also clear the WS_CHILD bit and set the WS_POPUP style after calling SetParent. Conversely, if hWndNewParent is not NULL and the window was previously a child of the desktop, you should clear the WS_POPUP style and set the WS_CHILD style before calling SetParent. When you change the parent of a window, you should synchronize the UISTATE of both windows. For more information, see WM_CHANGEUISTATE and WM_UPDATEUISTATE. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "SetParent",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndChild",
        "description": "Type: HWND A handle to the child window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndNewParent",
        "description": "Type: HWND A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.  \t\t\t\t\t If this parameter is HWND_MESSAGE, the child window becomes a message-only window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Changes the default layout when windows are created with no parent or owner only for the currently running process.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The layout specifies how text and graphics are laid out; the default is left to right. The SetProcessDefaultLayout function changes layout to be right to left, which is the standard in Arabic and Hebrew cultures. After the LAYOUT_RTL flag is selected, flags normally specifying right or left are reversed. To avoid confusion, consider defining alternate words for standard flags, such as those in the following table.  If using this function with a mirrored window, note that the SetProcessDefaultLayout function does not mirror the whole process and all the device contexts (DCs) created in it. It mirrors only the mirrored window's DCs. To mirror any DC, use the SetLayout function. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetProcessDefaultLayout",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDefaultLayout",
        "description": "Type: DWORD The default process layout. This parameter can be 0 or the following value.   ValueMeaning  LAYOUT_RTL 0x00000001   Sets the default horizontal layout to be right to left."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "[",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. Otherwise, the return value is zero. ",
    "remarks": "DLLs should accept the dpi setting of the host process         rather than call SetProcessDPIAware themselves.         To be set properly, dpiAware should be specified as part of the application (.exe) manifest.         (dpiAware defined in an embedded DLL manifest has no affect.)         The following markup shows how to set dpiAware as part of an application (.exe) manifest. For more information about application manifests, see Manifests (Side-by-Side Assemblies). ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetProcessDPIAware",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the colors for the specified display elements. Display elements are the various parts of a window and the display that appear on the system display screen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is a nonzero value. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The  SetSysColors function sends a  WM_SYSCOLORCHANGE message to all windows to inform them of the change in color. It also directs the system to repaint the affected portions of all currently visible windows. It is best to respect the color settings specified by the user. If you are writing an application to enable the user to change the colors, then it is appropriate to use this function. However, this  function affects only the current session. The new colors are not saved when the system terminates. The following example demonstrates the use of  the GetSysColor and SetSysColors functions.  First, the example uses GetSysColor to retrieve the colors of the window background and active caption and displays the red, green, blue (RGB) values in hexadecimal notation. Next, example uses SetSysColors to change the color of the window background to light gray and the active title bars to dark purple. After a 10-second delay, the example restores the previous colors for these elements using SetSysColors. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetSysColors",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cElements",
        "description": "Type: int The number of display elements in the lpaElements array."
      },
      {
        "in_out": "_In_",
        "type": "const INT*",
        "name": "lpaElements",
        "description": "Type: const INT* An array of integers that specify the display elements to be changed. For a list of display elements, see  GetSysColor."
      },
      {
        "in_out": "_In_",
        "type": "const COLORREF*",
        "name": "lpaRgbValues",
        "description": "Type: const COLORREF* An array of  COLORREF values that contain the new red, green, blue (RGB) color values for the display elements in the array pointed to by the lpaElements parameter. To generate a  COLORREF, use the  RGB macro."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Stores the display affinity setting in kernel mode on the hWnd associated with the window.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, it returns TRUE; otherwise, it returns FALSE when, for example,  the function call is made on a non top-level window. To get extended error information, call GetLastError. ",
    "remarks": "This function and GetWindowDisplayAffinity are designed to support the window content protection feature that is new to Windows 7. This feature enables applications to protect their \t\town onscreen window content from being captured or copied through a specific set of public operating system features  \t\tand APIs. However, it works only when the Desktop Window Manager(DWM) is composing the desktop. It is important to note that unlike a security feature or an implementation of Digital Rights Management (DRM), there is no guarantee that  \t\t using SetWindowDisplayAffinity  \t\tand GetWindowDisplayAffinity, and other necessary functions such as DwmIsCompositionEnabled, will strictly protect windowed content, for example where someone takes a photograph of the screen. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetWindowDisplayAffinity",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAffinity",
        "description": "Type: DWORD The display affinity setting. This setting specifies where the window's  \t\t\t\tcontents are can be displayed. Set this value to WDA_MONITOR to display the window's contents only on a monitor.  \t\t\t\t \t\t\t\t \t\t\t\tSet this value to WDA_NONE to remove the monitor-only affinity."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Sets the feedback settings for a given window handle.",
    "library": "User32.lib",
    "min_server": "Windows Server 2012 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If size is 0 and pSetting is NULL, it clears the setting. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetWindowFeedbackSettings",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "The handle of the window to query."
      },
      {
        "in_out": "_In_",
        "type": "FEEDBACK_TYPE",
        "name": "feedback",
        "description": "The type of feedback."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "flags",
        "description": "Flags."
      },
      {
        "in_out": "_In_",
        "type": "UINT32",
        "name": "size",
        "description": "The size of configuration."
      },
      {
        "in_out": "_In_opt_",
        "type": "const VOID*",
        "name": "configuration",
        "description": "The value of the setting for the feedback."
      }
    ],
    "min_client": "Windows 8 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the show state and the restored, minimized, and maximized positions of the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the information specified in WINDOWPLACEMENT would result in a window that is completely off the screen, the system will automatically adjust the coordinates so that the window is visible, taking into account changes in screen resolution and multiple monitor configuration. The length member of WINDOWPLACEMENT must be set to sizeof(WINDOWPLACEMENT). If this member is not set correctly, the function returns FALSE. For additional remarks on the proper use of window placement coordinates, see WINDOWPLACEMENT. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetWindowPlacement",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "const WINDOWPLACEMENT*",
        "name": "lpwndpl",
        "description": "Type: const WINDOWPLACEMENT* A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions.  Before calling SetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof(WINDOWPLACEMENT). SetWindowPlacement fails if the length member is not set correctly."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "As part of the Vista re-architecture, all services were moved off the interactive desktop into Session 0. hwnd and window manager operations are only effective inside a session and cross-session attempts to manipulate the hwnd will fail. For more information, see The Windows Vista Developer Story: Application Compatibility Cookbook. If you have changed certain window data using SetWindowLong, you must call SetWindowPos for the changes to take effect. Use the following combination for uFlags: SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED. A window can be made a topmost window either by setting the hWndInsertAfter parameter to HWND_TOPMOST and ensuring that the SWP_NOZORDER flag is not set, or by setting a window's position in the Z order so that it is above any existing topmost windows. When a non-topmost window is made topmost, its owned windows are also made topmost. Its owners, however, are not changed. If neither the SWP_NOACTIVATE nor SWP_NOZORDER flag is specified (that is, when the application requests that a window be simultaneously activated and its position in the Z order changed), the value specified in hWndInsertAfter is used only in the following circumstances. An application cannot activate an inactive window without also bringing it to the top of the Z order. Applications can change an activated window's position in the Z order without restrictions, or it can activate a window and then move it to the top of the topmost or non-topmost windows. If a topmost window is repositioned to the bottom (HWND_BOTTOM) of the Z order or after any non-topmost window, it is no longer topmost. When a topmost window is made non-topmost, its owners and its owned windows are also made non-topmost windows. A non-topmost window can own a topmost window, but the reverse cannot occur. Any window (for example, a dialog box) owned by a topmost window is itself made a topmost window, to ensure that all owned windows stay above their owner. If an application is not in the foreground, and should be in the foreground, it must call the SetForegroundWindow function. To use SetWindowPos to bring a window to the top, the process that owns the window must have SetForegroundWindow permission. For an example, see Initializing a Dialog Box. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetWindowPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWndInsertAfter",
        "description": "Type: HWND A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.   ValueMeaning  HWND_BOTTOM (HWND)1   Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.   HWND_NOTOPMOST (HWND)-2   Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.   HWND_TOP (HWND)0   Places the window at the top of the Z order.   HWND_TOPMOST (HWND)-1   Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.     For more information about how this parameter is used, see the following Remarks section."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "X",
        "description": "Type: int The new position of the left side of the window, in client coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "Y",
        "description": "Type: int The new position of the top of the window, in client coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cx",
        "description": "Type: int The new width of the window, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cy",
        "description": "Type: int The new height of the window, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT The window sizing and positioning flags. This parameter can be a combination of the following values.   ValueMeaning  SWP_ASYNCWINDOWPOS 0x4000   If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.    SWP_DEFERERASE 0x2000   Prevents generation of the WM_SYNCPAINT message.    SWP_DRAWFRAME 0x0020   Draws a frame (defined in the window's class description) around the window.   SWP_FRAMECHANGED 0x0020   Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.   SWP_HIDEWINDOW 0x0080   Hides the window.   SWP_NOACTIVATE 0x0010   Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter parameter).   SWP_NOCOPYBITS 0x0100   Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.   SWP_NOMOVE 0x0002   Retains the current position (ignores X and Y parameters).   SWP_NOOWNERZORDER 0x0200   Does not change the owner window's position in the Z order.   SWP_NOREDRAW 0x0008   Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.   SWP_NOREPOSITION 0x0200   Same as the SWP_NOOWNERZORDER flag.   SWP_NOSENDCHANGING 0x0400   Prevents the window from receiving the WM_WINDOWPOSCHANGING message.   SWP_NOSIZE 0x0001   Retains the current size (ignores the cx and cy parameters).   SWP_NOZORDER 0x0004   Retains the current Z order (ignores the hWndInsertAfter parameter).   SWP_SHOWWINDOW 0x0040   Displays the window."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If the target window is owned by the current process, SetWindowText causes a WM_SETTEXT message to be sent to the specified window or control. If the control is a list box control created with the WS_CAPTION style, however, SetWindowText sets the text for the control, not for the list box entries. To set the text of a control in another process, send the WM_SETTEXT message directly instead of calling SetWindowText. The SetWindowText function does not expand tab characters (ASCII code 0x09). Tab characters are displayed as vertical bar (|) characters. For an example, see Sending a Message. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SetWindowText",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window or control whose text is to be changed."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpString",
        "description": "Type: LPCTSTR The new title or control text."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Shows or hides all pop-up windows owned by the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "ShowOwnedPopups shows only windows hidden by a previous call to ShowOwnedPopups. For example, if a pop-up window is hidden by using the ShowWindow function, subsequently calling ShowOwnedPopups with the fShow parameter set to TRUE does not cause the window to be shown. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "ShowOwnedPopups",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window that owns the pop-up windows to be shown or hidden."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fShow",
        "description": "Type: BOOL If this parameter is TRUE, all hidden pop-up windows are shown. If this parameter is FALSE, all visible pop-up windows are hidden."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the specified window's show state.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the window was previously visible, the return value is nonzero. If the window was previously hidden, the return value is zero. ",
    "remarks": "To perform certain special effects when showing or hiding a window, use AnimateWindow. The first time an application calls ShowWindow, it should use the WinMain function's nCmdShow parameter as its nCmdShow parameter. Subsequent calls to ShowWindow must use one of the values in the given list, instead of the one specified by the WinMain function's nCmdShow parameter. As noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the  structure. In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window. On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application. This behavior is designed for the following situations: For an example, see Creating a Main Window. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "ShowWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nCmdShow",
        "description": "Type: int Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the following values.   ValueMeaning  SW_FORCEMINIMIZE 11    \t\t\t\t\t\t Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.   SW_HIDE 0   Hides the window and activates another window.   SW_MAXIMIZE 3   Maximizes the specified window.   SW_MINIMIZE 6   Minimizes the specified window and activates the next top-level window in the Z order.   SW_RESTORE 9   Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.   SW_SHOW 5   Activates the window and displays it in its current size and position.    SW_SHOWDEFAULT 10   Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.    SW_SHOWMAXIMIZED 3   Activates the window and displays it as a maximized window.   SW_SHOWMINIMIZED 2   Activates the window and displays it as a minimized window.   SW_SHOWMINNOACTIVE 7   Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.   SW_SHOWNA 8   Displays the window in its current size and position. This value is similar to SW_SHOW, except that the window is not activated.   SW_SHOWNOACTIVATE 4   Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, except that the window is not activated.   SW_SHOWNORMAL 1   Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the show state of a window without waiting for the operation to complete.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the operation was successfully started, the return value is nonzero. ",
    "remarks": "This function posts a show-window event to the message queue of the given window. An application can use this function to avoid becoming nonresponsive while waiting for a nonresponsive application to finish processing a show-window event. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "ShowWindowAsync",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nCmdShow",
        "description": "Type: int Controls how the window is to be shown. For a list of possible values, see the description of the ShowWindow function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Triggers a visual signal to indicate that a sound is playing.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL This function returns one of the following values.  ",
    "remarks": "Set the notification behavior by calling SystemParametersInfo with the SPI_SETSOUNDSENTRY value. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "SoundSentry",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "[This function is not intended for general       use. It may       be altered or unavailable in subsequent versions of Windows.]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "This function is typically called to maintain window z-ordering. This function was not included in the SDK headers and libraries until Windows XP with Service Pack 1 (SP1) and Windows Server 2003. If you do not have a header file and import library for this function, you can call the function using LoadLibrary and GetProcAddress. ",
    "return_type": "VOID",
    "category": "Windows",
    "name": "SwitchToThisWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fAltTab",
        "description": "Type: BOOL A TRUE for this parameter indicates that the window \t\t\t\tis being switched to using the Alt/Ctl+Tab key sequence.  This parameter \t\t\t\tshould be FALSE otherwise."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Tiles the specified child windows of the specified parent window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: WORD If the function succeeds, the return value is the number of windows arranged. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Calling TileWindows causes all maximized windows to be restored to their previous size. ",
    "return_type": "WORD",
    "category": "Windows",
    "name": "TileWindows",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hwndParent",
        "description": "Type: HWND A handle to the parent window. If this parameter is NULL, the desktop window is assumed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "wHow",
        "description": "Type: UINT The tiling flags. ..."
      },
      {
        "in_out": "_In_opt_",
        "type": "const RECT*",
        "name": "lpRect",
        "description": "Type: const RECT* A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. If this parameter is NULL, the client area of the parent window is used."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cKids",
        "description": "Type: UINT The number of elements in the array specified by the lpKids parameter. This parameter is ignored if lpKids is NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "const HWND*",
        "name": "lpKids",
        "description": "Type: const HWND* An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style WS_EX_TOPMOST or WS_EX_TOOLWINDOW, the child window is not arranged. If this parameter is NULL, all child windows of the specified parent window (or of the desktop window) are arranged."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Updates the position, size, shape, content, and translucency of a layered window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The source DC should contain the surface that defines the visible contents of the layered window. For example, you can select a bitmap into a device context obtained by calling the CreateCompatibleDC function. An application should call SetLayout on the hdcSrc device context to properly set the mirroring mode. SetLayout will properly mirror all drawing into an HDC while properly preserving text glyph and (optionally) bitmap direction order. It cannot modify drawing directly into the bits of a device-independent bitmap (DIB). For more information, see Window Layout and Mirroring. The UpdateLayeredWindow function maintains the window's appearance on the screen. The windows underneath a layered window do not need to be repainted when they are uncovered due to a call to UpdateLayeredWindow, because the system will automatically repaint them. This permits seamless animation of the layered window. UpdateLayeredWindow always updates the entire window. To update part of a window, use the traditional WM_PAINT and set the blend value using SetLayeredWindowAttributes. For best drawing performance by the layered window and any underlying windows, the layered window should be as small as possible. An application should also process the  message and re-create its layered windows when the display's color depth changes. For more information, see Layered Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "UpdateLayeredWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function.  Windows 8:  The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows."
      },
      {
        "in_out": "_In_opt_",
        "type": "HDC",
        "name": "hdcDst",
        "description": "Type: HDC A handle to a DC for the screen. This handle is obtained by specifying NULL when calling the  function. It is used for palette color matching when the window contents are updated. If hdcDst isNULL, the default palette will be used. If hdcSrc is NULL, hdcDst must be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "POINT*",
        "name": "pptDst",
        "description": "Type: POINT* A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, pptDst can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "SIZE*",
        "name": "psize",
        "description": "Type: SIZE* A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, psize can be NULL. If hdcSrc is NULL, psize must be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "HDC",
        "name": "hdcSrc",
        "description": "Type: HDC A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the CreateCompatibleDC function. If the shape and visual context of the window are not changing, hdcSrc can be NULL."
      },
      {
        "in_out": "_In_opt_",
        "type": "POINT*",
        "name": "pptSrc",
        "description": "Type: POINT* A pointer to a structure that specifies the location of the layer in the device context. If hdcSrc is NULL, pptSrc should be NULL."
      },
      {
        "in_out": "_In_",
        "type": "COLORREF",
        "name": "crKey",
        "description": "Type: COLORREF A structure that specifies the color key to be used when composing the layered window. To generate a COLORREF, use the RGB macro."
      },
      {
        "in_out": "_In_opt_",
        "type": "BLENDFUNCTION*",
        "name": "pblend",
        "description": "Type: BLENDFUNCTION* A pointer to a structure that specifies the transparency value to be used when composing the layered window."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Type: DWORD This parameter can be one of the following values.   ValueMeaning  ULW_ALPHA 0x00000002   Use pblend as the blend function. If the display mode is 256 colors or less, the effect of this value is the same as the effect of ULW_OPAQUE.   ULW_COLORKEY 0x00000001   Use crKey as the transparency color.    ULW_OPAQUE 0x00000004   Draw an opaque layered window.      If hdcSrc is NULL, dwFlags should be zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Updates the position, size, shape, content, and translucency of a layered window.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "UpdateLayeredWindowIndirect is similar to UpdateLayeredWindow but uses an UPDATELAYEREDWINDOWINFO structure to contain much of the information that is provided to UpdateLayeredWindow through its parameters. The UpdateLayeredWindowIndirect function maintains the window's appearance on the screen. The windows underneath a layered window do not need to be repainted when they are uncovered due to a call to UpdateLayeredWindowIndirect, because the system will automatically repaint them. This permits seamless animation of the layered window. UpdateLayeredWindowIndirect always updates the entire window. To update part of a window, use the traditional WM_PAINT and set the blend value using SetLayeredWindowAttributes. For best drawing performance by the layered window and any underlying windows, the layered window should be as small as possible. An application should also process the  message and re-create its layered windows when the display's color depth changes. For more information, see Layered Windows. ",
    "return_type": "BOOL",
    "category": "Windows",
    "name": "UpdateLayeredWindowIndirect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to a layered window. A layered window is created by specifying WS_EX_LAYERED when creating the window with the CreateWindowEx function. Windows 8:  The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows."
      },
      {
        "in_out": "_In_",
        "type": "const UPDATELAYEREDWINDOWINFO*",
        "name": "pULWInfo",
        "description": "Type: const UPDATELAYEREDWINDOWINFO* A pointer to a structure that contains the information for the window."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a handle to the window that contains the specified physical point.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: Type: HWND A handle to the window that contains the given physical point. If no window exists at the point, this value is NULL. ",
    "remarks": "The WindowFromPhysicalPoint function does not retrieve a handle to a hidden or disabled window, even if the point is within the window. ",
    "return_type": "HWND",
    "category": "Windows",
    "name": "WindowFromPhysicalPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "Point",
        "description": "Type: POINT The physical coordinates of the point."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  }
]