[
  {
    "n_arguments": 1,
    "description": "Confines the cursor to a rectangular area on the screen. If a subsequent cursor position (set by the SetCursorPos function or the mouse) lies outside the rectangle, the system automatically adjusts the position to keep the cursor inside the rectangular area.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The cursor is a shared resource. If an application confines the cursor, it must release the cursor by using ClipCursor before relinquishing control to another application. The calling process must have WINSTA_WRITEATTRIBUTES access to the window station. For an example, see Confining a Cursor. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "ClipCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const RECT*",
        "name": "lpRect",
        "description": "Type: const RECT* A pointer to the structure that contains the screen coordinates of the upper-left and lower-right corners of the confining rectangle. If this parameter is NULL, the cursor is free to move anywhere on the screen."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Copies the specified cursor.",
    "library": "",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR If the function succeeds, the return value is the handle to the duplicate cursor. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "CopyCursor enables an application or DLL to obtain the handle to a cursor shape owned by another module. Then if the other module is freed, the application is still able to use the cursor shape. Before closing, an application must call the DestroyCursor function to free any system resources associated with the cursor. Do not use the CopyCursor function for animated cursors. Instead, use the CopyImage function. CopyCursor is implemented as a call to the CopyIcon function. ",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "CopyCursor",
    "is_callback": 0,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCURSOR",
        "name": "pcur",
        "description": "Type: HCURSOR A handle to the cursor to be copied."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Creates a cursor having the specified size, bit patterns, and hot spot.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR If the function succeeds, the return value is a handle to the cursor. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The nWidth and nHeight parameters must specify a width and height that are supported by the current display driver, because the system cannot create cursors of other sizes. To determine the width and height supported by the display driver, use the GetSystemMetrics function, specifying the SM_CXCURSOR or SM_CYCURSOR value. Before closing, an application must call the DestroyCursor function to free any system resources associated with the cursor. For an example, see Creating a Cursor. ",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "CreateCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HINSTANCE",
        "name": "hInst",
        "description": "Type: HINSTANCE A handle to the current instance of the application creating the cursor."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "xHotSpot",
        "description": "Type: int The horizontal position of the cursor's hot spot."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "yHotSpot",
        "description": "Type: int The vertical position of the cursor's hot spot."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nWidth",
        "description": "Type: int The width of the cursor, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nHeight",
        "description": "Type: int The height of the cursor, in pixels."
      },
      {
        "in_out": "_In_",
        "type": "const VOID*",
        "name": "pvANDPlane",
        "description": "Type: const VOID* An array of bytes that contains the bit values for the  \t\t\t\t\tAND mask of the cursor, as in a device-dependent monochrome bitmap."
      },
      {
        "in_out": "_In_",
        "type": "const VOID*",
        "name": "pvXORPlane",
        "description": "Type: const VOID* An array of bytes that contains the bit values for the  \t\t\t\t\tXOR mask of the cursor, as in a device-dependent monochrome bitmap."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The DestroyCursor function destroys a nonshared cursor. Do not use this function to destroy a shared cursor. A shared cursor is valid as long as the module from which it was loaded remains in memory. The following functions obtain a shared cursor: ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "DestroyCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCURSOR",
        "name": "hCursor",
        "description": "Type: HCURSOR A handle to the cursor to be destroyed. The cursor must not be in use."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the screen coordinates of the rectangular area to which the cursor is confined.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The cursor is a shared resource. If an application confines the cursor with the ClipCursor function, it must later release the cursor by using ClipCursor before relinquishing control to another application. The calling process must have WINSTA_READATTRIBUTES access to the window station. For an example, see Confining a Cursor. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "GetClipCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "lpRect",
        "description": "Type: LPRECT A pointer to a RECT structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to a rectangle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves a handle to the current cursor.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR The return value is the handle to the current cursor. If there is no cursor, the return value is NULL. ",
    "remarks": "",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "GetCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves information about the global cursor.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "GetCursorInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PCURSORINFO",
        "name": "pci",
        "description": "Type: PCURSORINFO A pointer to a CURSORINFO structure that receives the information. Note that you must set the cbSize member to sizeof(CURSORINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the position of the mouse cursor, in screen coordinates.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL Returns nonzero if successful or zero otherwise. To get extended error information, call GetLastError. ",
    "remarks": "The cursor position is always specified in screen coordinates and is not affected by the mapping mode of the window that contains the cursor. The calling process must have WINSTA_READATTRIBUTES access to the window station. The input desktop must be the current desktop when you call GetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. For an example, see Using the Keyboard to Move the Cursor. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "GetCursorPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPPOINT",
        "name": "lpPoint",
        "description": "Type: LPPOINT A pointer to a POINT structure that receives the screen coordinates of the cursor."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves the position of the cursor in physical coordinates.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL TRUE if successful; otherwise FALSE. GetLastError can be called to get more information about any error that is generated. ",
    "remarks": "For a description of the difference between logicial coordinates and physical coordinates, see PhysicalToLogicalPoint. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "GetPhysicalCursorPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPPOINT",
        "name": "lpPoint",
        "description": "Type: LPPOINT The position of the cursor, in physical coordinates."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR If the function succeeds, the return value is the handle to the newly loaded cursor. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The LoadCursor function loads the cursor resource only if it has not been loaded; otherwise, it retrieves the handle to the existing resource. This function returns a valid cursor handle only if the lpCursorName parameter is a pointer to a cursor resource. If lpCursorName is a pointer to any type of resource other than a cursor (such as an icon), the return value is not NULL, even though it is not a valid cursor handle. The LoadCursor function searches the cursor resource most appropriate for the cursor for the current display device. The cursor resource can be a color or monochrome bitmap. For an example, see Creating a Cursor. ",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "LoadCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Type: HINSTANCE A handle to an instance of the module whose executable file contains the cursor to be loaded."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpCursorName",
        "description": "Type: LPCTSTR The name of the cursor resource to be loaded. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. The MAKEINTRESOURCE macro can also be used to create this value. To use one of the predefined cursors, the application must set the hInstance parameter to NULL and the lpCursorName parameter to one the following values.  ValueMeaning  IDC_APPSTARTING MAKEINTRESOURCE(32650)   Standard arrow and small hourglass   IDC_ARROW MAKEINTRESOURCE(32512)   Standard arrow   IDC_CROSS MAKEINTRESOURCE(32515)   Crosshair   IDC_HAND MAKEINTRESOURCE(32649)    Hand   IDC_HELP MAKEINTRESOURCE(32651)   Arrow and question mark   IDC_IBEAM MAKEINTRESOURCE(32513)   I-beam   IDC_ICON MAKEINTRESOURCE(32641)   Obsolete for applications marked version 4.0 or later.   IDC_NO MAKEINTRESOURCE(32648)   Slashed circle   IDC_SIZE MAKEINTRESOURCE(32640)   Obsolete for applications marked version 4.0 or later. Use IDC_SIZEALL.   IDC_SIZEALL MAKEINTRESOURCE(32646)   Four-pointed arrow pointing north, south, east, and west   IDC_SIZENESW MAKEINTRESOURCE(32643)   Double-pointed arrow pointing northeast and southwest   IDC_SIZENS MAKEINTRESOURCE(32645)   Double-pointed arrow pointing north and south   IDC_SIZENWSE MAKEINTRESOURCE(32642)   Double-pointed arrow pointing northwest and southeast   IDC_SIZEWE MAKEINTRESOURCE(32644)   Double-pointed arrow pointing west and east   IDC_UPARROW MAKEINTRESOURCE(32516)   Vertical arrow   IDC_WAIT MAKEINTRESOURCE(32514)   Hourglass"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Creates a cursor based on data contained in a file.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR If the function is successful, the return value is a handle to the new cursor. If the function fails, the return value is NULL. To get extended error information, call GetLastError.  \t\t\t\t\t\tGetLastError may return the following value.  ",
    "remarks": "",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "LoadCursorFromFile",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFileName",
        "description": "Type: LPCTSTR The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format. If the high-order word of lpFileName is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Sets the cursor shape.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HCURSOR The return value is the handle to the previous cursor, if there was one. If there was no previous cursor, the return value is NULL. ",
    "remarks": "The cursor is set only if the new cursor is different from the previous cursor; otherwise, the function returns immediately. The cursor is a shared resource. A window should set the cursor shape only when the cursor is in its client area or when the window is capturing mouse input. In systems without a mouse, the window should restore the previous cursor before the cursor leaves the client area or before it relinquishes control to another window. If your application must set the cursor while it is in a window, make sure the class cursor for the specified window's class is set to NULL. If the class cursor is not NULL, the system restores the class cursor each time the mouse is moved. The cursor is not shown on the screen if the internal cursor display count is less than zero. This occurs if the application uses the ShowCursor function to hide the cursor more times than to show the cursor. For an example, see Displaying a Cursor. ",
    "return_type": "HCURSOR",
    "category": "Cursors",
    "name": "SetCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HCURSOR",
        "name": "hCursor",
        "description": "Type: HCURSOR A handle to the cursor. The cursor must have been created by the CreateCursor function or loaded by the LoadCursor or LoadImage function. If this parameter is NULL, the cursor is removed from the screen."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Moves the cursor to the specified screen coordinates. If the new coordinates are not within the screen rectangle set by the most recent ClipCursor function call, the system automatically adjusts the coordinates so that the cursor stays within the rectangle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL Returns nonzero if successful or zero otherwise. To get extended error information, call GetLastError. ",
    "remarks": "The cursor is a shared resource. A window should move the cursor only when the cursor is in the window's client area. The calling process must have WINSTA_WRITEATTRIBUTES access to the window station. The input desktop must be the current desktop when you call SetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop. For an example, see Using the Keyboard to Move the Cursor. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "SetCursorPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "X",
        "description": "Type: int The new x-coordinate of the cursor, in screen coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "Y",
        "description": "Type: int The new y-coordinate of the cursor, in screen coordinates."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the position of the cursor in physical coordinates.",
    "library": "User32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL TRUE if successful; otherwise FALSE. ",
    "remarks": "For a description of the difference between logicial coordinates and physical coordinates, see PhysicalToLogicalPoint. GetLastError can be called to get more information about any error that is generated. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "SetPhysicalCursorPos",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "X",
        "description": "Type: int The new x-coordinate of the cursor, in physical coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "Y",
        "description": "Type: int The new y-coordinate of the cursor, in physical coordinates."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the id parameter with the contents of the cursor specified by the hcur parameter and then destroys hcur.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "For an application to use any of the OCR_ constants, the constant OEMRESOURCE must be defined before the Windows.h header file is included. ",
    "return_type": "BOOL",
    "category": "Cursors",
    "name": "SetSystemCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HCURSOR",
        "name": "hcur",
        "description": "Type: HCURSOR A handle to the cursor. The function replaces the contents of the system cursor specified by id with the contents of the cursor handled by hcur. The system destroys hcur by calling the DestroyCursor function. Therefore, hcur cannot be a cursor loaded using the LoadCursor function. To specify a cursor loaded from a resource, copy the cursor using the CopyCursor function, then pass the copy to SetSystemCursor."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "id",
        "description": "Type: DWORD The system cursor to replace with the contents of hcur. This parameter can be one of the following values.   ValueMeaning  OCR_APPSTARTING 32650   Standard arrow and small hourglass   OCR_NORMAL 32512   Standard arrow   OCR_CROSS 32515   Crosshair   OCR_HAND 32649    \t\t\t\t\t\t Hand   OCR_HELP 32651   Arrow and question mark   OCR_IBEAM 32513   I-beam   OCR_NO 32648   Slashed circle   OCR_SIZEALL 32646   Four-pointed arrow pointing north, south, east, and west   OCR_SIZENESW 32643   Double-pointed arrow pointing northeast and southwest   OCR_SIZENS 32645   Double-pointed arrow pointing north and south   OCR_SIZENWSE 32642   Double-pointed arrow pointing northwest and southeast   OCR_SIZEWE 32644   Double-pointed arrow pointing west and east   OCR_UP 32516   Vertical arrow   OCR_WAIT 32514   Hourglass"
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Displays or hides the cursor.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int The return value specifies the new display counter. ",
    "remarks": "Windows 8: Call GetCursorInfo to determine the cursor visibility. This function sets an internal display counter that determines whether the cursor should be displayed. The cursor is displayed only if the display count is greater than or equal to 0. If a mouse is installed, the initial display count is 0. If no mouse is installed, the display count is  \t\t\t\t\u00e2\u0080\u00931. ",
    "return_type": "int",
    "category": "Cursors",
    "name": "ShowCursor",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bShow",
        "description": "Type: BOOL If bShow is TRUE, the display count is incremented by one. If bShow is FALSE, the display count is decremented by one."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]