[
  {
    "n_arguments": 4,
    "description": "Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. To get keyboard accelerators to work with bitmap or owner-drawn menu items, the owner of the menu must process the WM_MENUCHAR message. For more information, see Owner-Drawn Menus and the WM_MENUCHAR Message. The following groups of flags cannot be used together: For an example, see Adding Lines and Graphs to a Menu. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "AppendMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.   ValueMeaning  MF_BITMAP 0x00000004L   Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to the bitmap.    MF_CHECKED 0x00000008L   Places a check mark next to the menu item. If the application provides check-mark bitmaps (see SetMenuItemBitmaps, this flag displays the check-mark bitmap next to the menu item.    MF_DISABLED 0x00000002L   Disables the menu item so that it cannot be selected, but the flag does not gray it.    MF_ENABLED 0x00000000L   Enables the menu item so that it can be selected, and restores it from its grayed state.    MF_GRAYED 0x00000001L   Disables the menu item and grays it so that it cannot be selected.    MF_MENUBARBREAK 0x00000020L   Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.    MF_MENUBREAK 0x00000040L   Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.    MF_OWNERDRAW 0x00000100L   Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item. The WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.    MF_POPUP 0x00000010L   Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.    MF_SEPARATOR 0x00000800L   Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The lpNewItem and uIDNewItem parameters are ignored.    MF_STRING 0x00000000L   Specifies that the menu item is a text string; the lpNewItem parameter is a pointer to the string.    MF_UNCHECKED 0x00000000L   Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see SetMenuItemBitmaps), this flag displays the clear bitmap next to the menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIDNewItem",
        "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter is set to MF_POPUP, a handle to the drop-down menu or submenu."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpNewItem",
        "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the following values.   ValueMeaning  MF_BITMAP 0x00000004L   Contains a bitmap handle.    MF_OWNERDRAW 0x00000100L   Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the itemData member of the structure pointed to by the lParam parameter of the WM_MEASUREITEM or WM_DRAWITEM message sent when the menu is created or its appearance is updated.    MF_STRING 0x00000000L   Contains a pointer to a null-terminated string."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "[CheckMenuItem is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions. Instead, use SetMenuItemInfo. ]",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: DWORD The return value specifies the previous state of the menu item (either MF_CHECKED or MF_UNCHECKED). If the menu item does not exist, the return value is \u00e2\u0080\u00931. ",
    "remarks": "An item in a menu bar cannot have a check mark. The uIDCheckItem parameter identifies a item that opens a submenu or a command item. For a item that opens a submenu, the uIDCheckItem parameter must specify the position of the item. For a command item, the uIDCheckItem parameter can specify either the item's position or its identifier. For an example, see Simulating Check Boxes in a Menu. ",
    "return_type": "DWORD",
    "category": "Menus",
    "name": "CheckMenuItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu of interest."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uIDCheckItem",
        "description": "Type: UINT The menu item whose check-mark attribute is to be set, as determined by the uCheck parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uCheck",
        "description": "Type: UINT The flags that control the interpretation of the uIDCheckItem parameter and the state of the menu item's check-mark attribute. This parameter can be a combination of either MF_BYCOMMAND, or MF_BYPOSITION and MF_CHECKED or MF_UNCHECKED.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that the uIDCheckItem parameter gives the identifier of the menu item. The MF_BYCOMMAND flag is the default, if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.   MF_BYPOSITION 0x00000400L   Indicates that the uIDCheckItem parameter gives the zero-based relative position of the menu item.   MF_CHECKED 0x00000008L   Sets the check-mark attribute to the selected state.   MF_UNCHECKED 0x00000000L   Sets the check-mark attribute to the clear state."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the GetLastError function. ",
    "remarks": "The CheckMenuRadioItem function sets the MFT_RADIOCHECK type flag and the MFS_CHECKED state for the item specified by idCheck and, at the same time, clears both flags for all other items in the group. The selected item is displayed using a bullet bitmap instead of a check-mark bitmap. For more information about menu item type and state flags, see the MENUITEMINFO structure. For an example, see Example of Example of Using Custom Checkmark Bitmaps. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "CheckMenuRadioItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu that contains the group of menu items."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "idFirst",
        "description": "Type: UINT The identifier or position of the first menu item in the group."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "idLast",
        "description": "Type: UINT The identifier or position of the last menu item in the group."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "idCheck",
        "description": "Type: UINT The identifier or position of the menu item to check."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Indicates the meaning of idFirst, idLast, and idCheck. If this parameter is MF_BYCOMMAND, the other parameters specify menu item identifiers. If it is MF_BYPOSITION, the other parameters specify the menu item positions."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Creates a menu. The menu is initially empty, but it can be filled with menu items by using the InsertMenuItem, AppendMenu, and InsertMenu functions.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the function succeeds, the return value is a handle to the newly created menu. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "Resources associated with a menu that is assigned to a window are freed automatically. If the menu is not assigned to a window, an application must free system resources associated with the menu before closing. An application frees menu resources by calling the DestroyMenu function. ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "CreateMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Creates a drop-down menu, submenu, or shortcut menu. The menu is initially empty. You can insert or append menu items by using the InsertMenuItem function. You can also use the InsertMenu function to insert menu items and the AppendMenu function to append menu items.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the function succeeds, the return value is a handle to the newly created menu. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The application can add the new menu to an existing menu, or it can display a shortcut menu by calling the TrackPopupMenuEx or TrackPopupMenu functions. Resources associated with a menu that is assigned to a window are freed automatically. If the menu is not assigned to a window, an application must free system resources associated with the menu before closing. An application frees menu resources by calling the DestroyMenu function. For an example, see Adding Lines and Graphs to a Menu. ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "CreatePopupMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. For an example, see Example of a Clipboard Viewer. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "DeleteMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to be changed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uPosition",
        "description": "Type: UINT The menu item to be deleted, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uPosition gives the identifier of the menu item. The MF_BYCOMMAND flag is the default flag if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.   MF_BYPOSITION 0x00000400L   Indicates that uPosition gives the zero-based relative position of the menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Destroys the specified menu and frees any memory that the menu occupies.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "Before closing, an application must use the DestroyMenu function to destroy a menu not assigned to a window. A menu that is assigned to a window is automatically destroyed when the application closes. DestroyMenu is recursive, that is, it will destroy the menu and all its submenus. For an example, see Displaying a Shortcut Menu. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "DestroyMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to be destroyed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "DrawMenuBar",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose menu bar is to be redrawn."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables, disables, or grays the specified menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL The return value specifies the previous state of the menu item (it is either MF_DISABLED, MF_ENABLED, or MF_GRAYED). If the menu item does not exist, the return value is -1. ",
    "remarks": "An application must use the MF_BYPOSITION flag to specify the correct menu handle. If the menu handle to the menu bar is specified, the top-level menu item (an item in the menu bar) is affected. To set the state of an item in a drop-down menu or submenu by position, an application must specify a handle to the drop-down menu or submenu. When an application specifies the MF_BYCOMMAND flag, the system checks all items that open submenus in the menu identified by the specified menu handle. Therefore, unless duplicate menu items are present, specifying the menu handle to the menu bar is sufficient. The InsertMenu, InsertMenuItem, LoadMenuIndirect, ModifyMenu, and SetMenuItemInfo functions can also set the state (enabled, disabled, or grayed) of a menu item. When you change a window menu, the menu bar is not immediately updated. To force the update, call DrawMenuBar. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "EnableMenuItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uIDEnableItem",
        "description": "Type: UINT The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter. This parameter specifies an item in a menu bar, menu, or submenu."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uEnable",
        "description": "Type: UINT Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uIDEnableItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.   MF_BYPOSITION 0x00000400L   Indicates that uIDEnableItem gives the zero-based relative position of the menu item.   MF_DISABLED 0x00000002L   Indicates that the menu item is disabled, but not grayed, so it cannot be selected.   MF_ENABLED 0x00000000L   Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.   MF_GRAYED 0x00000001L   Indicates that the menu item is disabled and grayed so that it cannot be selected."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Ends the calling thread's active menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If a platform does not support EndMenu, send the owner of the active menu a WM_CANCELMODE message. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "EndMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Retrieves a handle to the menu assigned to the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU The return value is a handle to the menu. If the specified window has no menu, the return value is NULL. If the window is a child window, the return value is undefined. ",
    "remarks": "GetMenu does not work on floating menu bars. Floating menu bars are custom controls that mimic standard menus; they are not menus. To get the handle on a floating menu bar, use the Active Accessibility APIs. For an example, see Adding Lines and Graphs to a Menu. ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "GetMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window whose menu handle is to be retrieved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about the specified menu bar.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "GetMenuBarInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window (menu bar) whose information is to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "idObject",
        "description": "Type: LONG The menu object. This parameter can be one of the following values.   ValueMeaning  OBJID_CLIENT ((LONG)0xFFFFFFFC)   The popup menu associated with the window.   OBJID_MENU ((LONG)0xFFFFFFFD)   The menu bar associated with the window (see the GetMenu function).   OBJID_SYSMENU ((LONG)0xFFFFFFFF)   The system menu associated with the window (see the GetSystemMenu function)."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "idItem",
        "description": "Type: LONG The item for which to retrieve information. If this parameter is zero, the function retrieves information about the menu itself. If this parameter is 1, the function retrieves information about the first item on the menu, and so on."
      },
      {
        "in_out": "_Inout_",
        "type": "PMENUBARINFO",
        "name": "pmbi",
        "description": "Type: PMENUBARINFO A pointer to a MENUBARINFO structure that receives the information. Note that you must set the cbSize member to sizeof(MENUBARINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Retrieves the dimensions of the default check-mark bitmap. The system displays this bitmap next to selected menu items. Before calling the SetMenuItemBitmaps function to replace the default check-mark bitmap for a menu item, an application must determine the correct bitmap size by calling GetMenuCheckMarkDimensions.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: LONG The return value specifies the height and width, in pixels, of the default check-mark bitmap. The high-order word contains the height; the low-order word contains the width. ",
    "remarks": "",
    "return_type": "LONG",
    "category": "Menus",
    "name": "GetMenuCheckMarkDimensions",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines the default menu item on the specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If the function succeeds, the return value is the identifier or position of the menu item. If the function fails, the return value is -1. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Menus",
    "name": "GetMenuDefaultItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu for which to retrieve the default menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "fByPos",
        "description": "Type: UINT Indicates whether to retrieve the menu item's identifier or its position. If this parameter is FALSE, the identifier is returned. Otherwise, the position is returned."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "gmdiFlags",
        "description": "Type: UINT Indicates how the function should search for menu items. This parameter can be zero or more of the following values.   ValueMeaning  GMDI_GOINTOPOPUPS 0x0002L   If the default item is one that opens a submenu, the function is to search recursively in the corresponding submenu. If the submenu has no default item, the return value identifies the item that opens the submenu. By default, the function returns the first default item on the specified menu, regardless of whether it is an item that opens a submenu.   GMDI_USEDISABLED 0x0001L   The function is to return a default item, even if it is disabled. By default, the function skips disabled or grayed items."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves information about a specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "GetMenuInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle on a menu."
      },
      {
        "in_out": "_Inout_",
        "type": "LPMENUINFO",
        "name": "lpcmi",
        "description": "Type: LPMENUINFO A pointer to a MENUINFO structure containing information for the menu. Note that you must set the cbSize member to sizeof(MENUINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines the number of items in the specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value specifies the number of items in the menu. If the function fails, the return value is -1. To get extended error information, call GetLastError. For an example, see Example of Menu-Item Bitmaps. ",
    "remarks": "",
    "return_type": "int",
    "category": "Menus",
    "name": "GetMenuItemCount",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to be examined."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the menu item identifier of a menu item located at the specified position in a menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT The return value is the identifier of the specified menu item. If the menu item identifier is NULL or if the specified item opens a submenu, the return value is -1. For an example, see Example of a Clipboard Viewer. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Menus",
    "name": "GetMenuItemID",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu that contains the item whose identifier is to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nPos",
        "description": "Type: int The zero-based relative position of the menu item whose identifier is to be retrieved."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about a menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the GetLastError function. ",
    "remarks": "To retrieve a menu item of type MFT_STRING, first find the size of the string by setting the dwTypeData member of MENUITEMINFO to NULL and then calling GetMenuItemInfo. The value of cch+1 is the size needed. Then allocate a buffer of this size, place the pointer to the buffer in dwTypeData, increment cch by one, and then call GetMenuItemInfo once again to fill the buffer with the string. If the retrieved menu item is of some other type, then GetMenuItemInfo sets the dwTypeData member to a value whose type is specified by the fTypefType member and sets cch to 0. For an example, see Example of Owner-Drawn Menu Items. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "GetMenuItemInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu that contains the menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItem",
        "description": "Type: UINT The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of fByPosition."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fByPosition",
        "description": "Type: BOOL The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information."
      },
      {
        "in_out": "_Inout_",
        "type": "LPMENUITEMINFO",
        "name": "lpmii",
        "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the cbSize member to sizeof(MENUITEMINFO) before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the bounding rectangle  \t\tfor the specified menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error  \t\t\t\t\tinformation, use the GetLastError function. ",
    "remarks": "In order for the returned rectangle to be meaningful, the menu must be popped  \t\tup if a popup menu or attached to a window if a menu bar. Menu item positions are not  \t\tdetermined until the menu is displayed. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "GetMenuItemRect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window containing the menu.  \t\t\t\t\t\t  \t\t\t\t\t\tIf this value is NULL and the hMenu  \t\t\t\t\t\tparameter represents a popup menu, the function will find the menu window."
      },
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to a menu."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItem",
        "description": "Type: UINT The zero-based position of the menu item."
      },
      {
        "in_out": "_Out_",
        "type": "LPRECT",
        "name": "lprcItem",
        "description": "Type: LPRECT A pointer to a RECT structure that receives the  \t\t\t\tbounding rectangle of the specified menu item expressed in screen coordinates."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: UINT If the specified item does not exist, the return value is -1. If the menu item opens a submenu, the low-order byte of the return value contains the menu flags associated with the item, and the high-order byte contains the number of items in the submenu opened by the item. Otherwise, the return value is a mask (Bitwise OR) of the menu flags. Following are the menu flags associated with the menu item.  ",
    "remarks": "It is possible to test an item for a flag value of MF_ENABLED, MF_STRING, MF_UNCHECKED, or MF_UNHILITE. However, since these values equate to zero you must use an expression to test for them.  For an example, see Simulating Check Boxes in a Menu. ",
    "return_type": "UINT",
    "category": "Menus",
    "name": "GetMenuState",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu that contains the menu item whose flags are to be retrieved."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uId",
        "description": "Type: UINT The menu item for which the menu flags are to be retrieved, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Indicates how the uId parameter is interpreted. This parameter can be one of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that the uId parameter gives the identifier of the menu item. The MF_BYCOMMAND flag is the default if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.    MF_BYPOSITION 0x00000400L   Indicates that the uId parameter gives the zero-based relative position of the menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Copies the text string of the specified menu item into the specified buffer.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character. If the function fails, the return value is zero. If the specified item is not of type MIIM_STRING or MFT_STRING, then the return value is zero. ",
    "remarks": "The nMaxCount parameter must be one larger than the number of characters in the text string to accommodate the terminating null character. If nMaxCount is 0, the function returns the length of the menu string. The lpString parameter is a TCHAR buffer, and nMaxCount is the length of the menu string in characters. Sizing these parameters incorrectly can cause truncation of the string, leading to possible loss of data. For an example, see Creating User Editable Accelerators. ",
    "return_type": "int",
    "category": "Menus",
    "name": "GetMenuString",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uIDItem",
        "description": "Type: UINT The menu item to be changed, as determined by the uFlag parameter."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPTSTR",
        "name": "lpString",
        "description": "Type: LPTSTR The buffer that receives the null-terminated string. If the string is as long or longer than lpString, the string is truncated and the terminating null character is added. If lpString is NULL, the function returns the length of the menu string."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nMaxCount",
        "description": "Type: int The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the nMaxCount parameter, the extra characters are truncated. If nMaxCount is 0, the function returns the length of the menu string."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlag",
        "description": "Type: UINT Indicates how the uIDItem parameter is interpreted. This parameter must be one of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uIDItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.   MF_BYPOSITION 0x00000400L   Indicates that uIDItem gives the zero-based relative position of the menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the function succeeds, the return value is a handle to the drop-down menu or submenu activated by the menu item. If the menu item does not activate a drop-down menu or submenu, the return value is NULL. For an example, see Displaying a Shortcut Menu. ",
    "remarks": "",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "GetSubMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nPos",
        "description": "Type: int The zero-based relative position in the specified menu of an item that activates a drop-down menu or submenu."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the bRevert parameter is FALSE, the return value is a handle to a copy of the window menu. If the bRevert parameter is TRUE, the return value is NULL. ",
    "remarks": "Any window that does not use the GetSystemMenu function to make its own copy of the window menu receives the standard window menu. The window menu initially contains items with various identifier values, such as SC_CLOSE, SC_MOVE, and SC_SIZE. Menu items on the window menu send WM_SYSCOMMAND messages. All predefined window menu items have identifier numbers greater than 0xF000. If an application adds commands to the window menu, it should use identifier numbers less than 0xF000. The system automatically grays items on the standard window menu, depending on the situation. The application can perform its own checking or graying by responding to the WM_INITMENU message that is sent before any menu is displayed. ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "GetSystemMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window that will own a copy of the window menu."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRevert",
        "description": "Type: BOOL The action to be taken. If this parameter is FALSE, GetSystemMenu returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If this parameter is TRUE, GetSystemMenu resets the window menu back to the default state. The previous window menu, if any, is destroyed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Adds or removes highlighting from an item in a menu bar.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the menu item is set to the specified highlight state, the return value is nonzero. If the menu item is not set to the specified highlight state, the return value is zero. ",
    "remarks": "The MF_HILITE and MF_UNHILITE flags can be used only with the HiliteMenuItem function; they cannot be used with the ModifyMenu function. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "HiliteMenuItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window that contains the menu."
      },
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the menu bar that contains the item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItemHilite",
        "description": "Type: UINT The menu item. This parameter is either the identifier of the menu item or the offset of the menu item in the menu bar, depending on the value of the uHilite parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uHilite",
        "description": "Type: UINT Controls the interpretation of the uItemHilite parameter and indicates whether the menu item is highlighted. This parameter must be a combination of either MF_BYCOMMAND or MF_BYPOSITION and MF_HILITE or MF_UNHILITE.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uItemHilite gives the identifier of the menu item.   MF_BYPOSITION 0x00000400L   Indicates that uItemHilite gives the zero-based relative position of the menu item.   MF_HILITE 0x00000080L   Highlights the menu item. If this flag is not specified, the highlighting is removed from the item.   MF_UNHILITE 0x00000000L   Removes highlighting from the menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Inserts a new menu item into a menu, moving other items down the menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. The following groups of flags cannot be used together: ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "InsertMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to be changed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uPosition",
        "description": "Type: UINT The menu item before which the new menu item is to be inserted, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that the uPosition parameter gives the identifier of the menu item. The MF_BYCOMMAND flag is the default if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.    MF_BYPOSITION 0x00000400L   Indicates that the uPosition parameter gives the zero-based relative position of the new menu item. If uPosition is -1, the new menu item is appended to the end of the menu.      The parameter must also include at least one of the following values.  ValueMeaning  MF_BITMAP 0x00000004L   Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to the bitmap.    MF_CHECKED 0x00000008L   Places a check mark next to the menu item. If the application provides check-mark bitmaps (see SetMenuItemBitmaps), this flag displays the check-mark bitmap next to the menu item.    MF_DISABLED 0x00000002L   Disables the menu item so that it cannot be selected, but does not gray it.    MF_ENABLED 0x00000000L   Enables the menu item so that it can be selected and restores it from its grayed state.    MF_GRAYED 0x00000001L   Disables the menu item and grays it so it cannot be selected.    MF_MENUBARBREAK 0x00000020L   Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.    MF_MENUBREAK 0x00000040L   Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.    MF_OWNERDRAW 0x00000100L   Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item. The WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.    MF_POPUP 0x00000010L   Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.    MF_SEPARATOR 0x00000800L   Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The  \t\t\t\t\t\t\tlpNewItem and uIDNewItem parameters are ignored.    MF_STRING 0x00000000L   Specifies that the menu item is a text string; the  \t\t\t\t\t\t\tlpNewItem parameter is a pointer to the string.    MF_UNCHECKED 0x00000000L   Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the SetMenuItemBitmaps function), this flag displays the clear bitmap next to the menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIDNewItem",
        "description": "Type: UINT_PTR The identifier of the new menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpNewItem",
        "description": "Type: LPCTSTR The content of the new menu item. The interpretation of lpNewItem depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag, as follows.   ValueMeaning  MF_BITMAP 0x00000004L   Contains a bitmap handle.    MF_OWNERDRAW 0x00000100L   Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the itemData member of the structure pointed to by the lParam parameter of the WM_MEASUREITEM or WM_DRAWITEM message sent when the menu item is created or its appearance is updated.    MF_STRING 0x00000000L   Contains a pointer to a null-terminated string (the default)."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Inserts a new menu item at the specified position in a menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the GetLastError function. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. In order for keyboard accelerators to work with bitmap or owner-drawn menu items, the owner of the menu must process the WM_MENUCHAR message. See Owner-Drawn Menus and the WM_MENUCHAR Message for more information. For an example, see Example of Menu-Item Bitmaps. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "InsertMenuItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu in which the new menu item is inserted."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItem",
        "description": "Type: UINT The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of fByPosition."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fByPosition",
        "description": "Type: BOOL Controls the meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See Accessing Menu Items Programmatically for more information."
      },
      {
        "in_out": "_In_",
        "type": "LPCMENUITEMINFO",
        "name": "lpmii",
        "description": "Type: LPCMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the new menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines whether a handle is a menu handle.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the handle is a menu handle, the return value is nonzero. If the handle is not a menu handle, the return value is zero. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "IsMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to be tested."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Loads the specified menu resource from the executable (.exe) file associated with an application instance.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the function succeeds, the return value is a handle to the menu resource. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "The DestroyMenu function is used, before an application closes, to destroy the menu and free memory that the loaded menu occupied. For an example, see Displaying a Shortcut Menu ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "LoadMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HINSTANCE",
        "name": "hInstance",
        "description": "Type: HINSTANCE A handle to the module containing the menu resource to be loaded."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpMenuName",
        "description": "Type: LPCTSTR The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the MAKEINTRESOURCE macro."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Loads the specified menu template in memory.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: HMENU If the function succeeds, the return value is a handle to the menu. If the function fails, the return value is NULL. To get extended error information, call GetLastError. ",
    "remarks": "For both the ANSI and the Unicode version of this function, the strings in the MENUITEMTEMPLATE structure must be Unicode strings. ",
    "return_type": "HMENU",
    "category": "Menus",
    "name": "LoadMenuIndirect",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const MENUTEMPLATE*",
        "name": "lpMenuTemplate",
        "description": "Type: const MENUTEMPLATE* A pointer to a menu template or an extended menu template. A menu template consists of a MENUITEMTEMPLATEHEADER structure followed by one or more contiguous MENUITEMTEMPLATE structures. An extended menu template consists of a MENUEX_TEMPLATE_HEADER structure followed by one or more contiguous MENUEX_TEMPLATE_ITEM structures."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Determines which menu item, if any, is at the specified location.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: int Returns the zero-based position of the menu item at the specified location or -1 if no menu item is at the specified location. ",
    "remarks": "",
    "return_type": "int",
    "category": "Menus",
    "name": "MenuItemFromPoint",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window containing the menu. If this value is NULL and the hMenu parameter represents a popup menu, the function will find the menu window."
      },
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu containing the menu items to hit test."
      },
      {
        "in_out": "_In_",
        "type": "POINT",
        "name": "ptScreen",
        "description": "Type: POINT A structure that specifies the location to test. If hMenu specifies a menu bar, this parameter is in window coordinates. Otherwise, it is in client coordinates."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If ModifyMenu replaces a menu item that opens a drop-down menu or submenu, the function destroys the old drop-down menu or submenu and frees the memory used by it. In order for keyboard accelerators to work with bitmap or owner-drawn menu items, the owner of the menu must process the WM_MENUCHAR message. See Owner-Drawn Menus and the WM_MENUCHAR Message for more information. The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. To change the attributes of existing menu items, it is much faster to use the CheckMenuItem and EnableMenuItem functions. The following groups of flags cannot be used together: For an example, see Setting Fonts for Menu-Item Text Strings. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "ModifyMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMnu",
        "description": "Type: HMENU A handle to the menu to be changed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uPosition",
        "description": "Type: UINT The menu item to be changed, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Controls the interpretation of the uPosition parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that the uPosition parameter gives the identifier of the menu item. The MF_BYCOMMAND flag is the default if neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified.   MF_BYPOSITION 0x00000400L   Indicates that the uPosition parameter gives the zero-based relative position of the menu item.      The parameter must also include at least one of the following values.  ValueMeaning  MF_BITMAP 0x00000004L   Uses a bitmap as the menu item. The lpNewItem parameter contains a handle to the bitmap.    MF_CHECKED 0x00000008L   Places a check mark next to the item. If your application provides check-mark bitmaps (see the SetMenuItemBitmaps function), this flag displays a selected bitmap next to the menu item.    MF_DISABLED 0x00000002L   Disables the menu item so that it cannot be selected, but this flag does not gray it.    MF_ENABLED 0x00000000L   Enables the menu item so that it can be selected and restores it from its grayed state.    MF_GRAYED 0x00000001L   Disables the menu item and grays it so that it cannot be selected.    MF_MENUBARBREAK 0x00000020L   Functions the same as the MF_MENUBREAK flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.    MF_MENUBREAK 0x00000040L   Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.    MF_OWNERDRAW 0x00000100L   Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a WM_MEASUREITEM message to retrieve the width and height of the menu item. The WM_DRAWITEM message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.    MF_POPUP 0x00000010L   Specifies that the menu item opens a drop-down menu or submenu. The uIDNewItem parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.    MF_SEPARATOR 0x00000800L   Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The lpNewItem and uIDNewItem parameters are ignored.    MF_STRING 0x00000000L   Specifies that the menu item is a text string; the lpNewItem parameter is a pointer to the string.    MF_UNCHECKED 0x00000000L   Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the SetMenuItemBitmaps function), this flag displays a clear bitmap next to the menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uIDNewItem",
        "description": "Type: UINT_PTR The identifier of the modified menu item or, if the uFlags parameter has the MF_POPUP flag set, a handle to the drop-down menu or submenu."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpNewItem",
        "description": "Type: LPCTSTR The contents of the changed menu item. The interpretation of this parameter depends on whether the uFlags parameter includes the MF_BITMAP, MF_OWNERDRAW, or MF_STRING flag.   ValueMeaning  MF_BITMAP 0x00000004L   A bitmap handle.    MF_OWNERDRAW 0x00000100L   A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the itemData member of the structure pointed to by the lParam parameter of the WM_MEASUREITEM or WM_DRAWITEM messages sent when the menu item is created or its appearance is updated.    MF_STRING 0x00000000L   A pointer to a null-terminated string (the default)."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, RemoveMenu does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "RemoveMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to be changed."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uPosition",
        "description": "Type: UINT The menu item to be deleted, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Indicates how the uPosition parameter is interpreted. This parameter must be one of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uPosition gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.   MF_BYPOSITION 0x00000400L   Indicates that uPosition gives the zero-based relative position of the menu item."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Assigns a new menu to the specified window.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "The window is redrawn to reflect the menu change. A menu can be assigned to any window that is not a child window. The SetMenu function replaces the previous menu, if any, but it does not destroy it. An application should call the DestroyMenu function to accomplish this task. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "SetMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window to which the menu is to be assigned."
      },
      {
        "in_out": "_In_opt_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the new menu. If this parameter is NULL, the window's current menu is removed."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Sets the default menu item for the specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the GetLastError function. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "SetMenuDefaultItem",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu to set the default item for."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItem",
        "description": "Type: UINT The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of  \t\t\t\t\tfByPos."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "fByPos",
        "description": "Type: UINT The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets information for a specified menu.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "SetMenuInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to a menu."
      },
      {
        "in_out": "_In_",
        "type": "LPCMENUINFO",
        "name": "lpcmi",
        "description": "Type: LPCMENUINFO A pointer to a MENUINFO structure for the menu."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If either the hBitmapUnchecked or  \t\t\t\thBitmapChecked parameter is NULL, the system displays nothing next to the menu item for the corresponding check state. If both parameters are NULL, the system displays the default check-mark bitmap when the item is selected, and removes the bitmap when the item is not selected. When the menu is destroyed, these bitmaps are not destroyed; it is up to the application to destroy them. The selected and clear bitmaps should be monochrome. The system uses the Boolean AND operator to combine bitmaps with the menu so that the white part becomes transparent and the black part becomes the menu-item color. If you use color bitmaps, the results may be undesirable. Use the GetSystemMetrics function with the CXMENUCHECK and CYMENUCHECK values to retrieve the bitmap dimensions. For an example, see Simulating Check Boxes in a Menu. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "SetMenuItemBitmaps",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu containing the item to receive new check-mark bitmaps."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uPosition",
        "description": "Type: UINT The menu item to be changed, as determined by the uFlags parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Specifies how the uPosition parameter is to be interpreted. The uFlags parameter must be one of the following values.   ValueMeaning  MF_BYCOMMAND 0x00000000L   Indicates that uPosition gives the identifier of the menu item. If neither MF_BYCOMMAND nor MF_BYPOSITION is specified, MF_BYCOMMAND is the default flag.   MF_BYPOSITION 0x00000400L   Indicates that uPosition gives the zero-based relative position of the menu item."
      },
      {
        "in_out": "_In_opt_",
        "type": "HBITMAP",
        "name": "hBitmapUnchecked",
        "description": "Type: HBITMAP A handle to the bitmap displayed when the menu item is not selected."
      },
      {
        "in_out": "_In_opt_",
        "type": "HBITMAP",
        "name": "hBitmapChecked",
        "description": "Type: HBITMAP A handle to the bitmap displayed when the menu item is selected."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Changes information about a menu item.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the GetLastError function. ",
    "remarks": "The application must call the DrawMenuBar function whenever a menu changes, whether the menu is in a displayed window. In order for keyboard accelerators to work with bitmap or owner-drawn menu items, the owner of the menu must process the WM_MENUCHAR message. See Owner-Drawn Menus and the WM_MENUCHAR Message for more information. For an example, see Example of Owner-Drawn Menu Items. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "SetMenuItemInfo",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the menu that contains the menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uItem",
        "description": "Type: UINT The identifier or position of the menu item to change. The meaning of this parameter depends on the value of fByPosition."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "fByPosition",
        "description": "Type: BOOL The meaning of uItem. If this parameter is FALSE, uItem is a menu item identifier. Otherwise, it is a menu item position. See About Menus for more information."
      },
      {
        "in_out": "_In_",
        "type": "LPMENUITEMINFO",
        "name": "lpmii",
        "description": "Type: LPMENUITEMINFO A pointer to a MENUITEMINFO structure that contains information about the menu item and specifies which menu item attributes to change."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If you specify TPM_RETURNCMD in the uFlags parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero. If you do not specify TPM_RETURNCMD in the uFlags parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call GetLastError. ",
    "remarks": "Call GetSystemMetrics with SM_MENUDROPALIGNMENT to determine the correct horizontal alignment flag (TPM_LEFTALIGN or TPM_RIGHTALIGN) and/or horizontal animation direction flag (TPM_HORPOSANIMATION or TPM_HORNEGANIMATION) to pass to TrackPopupMenu or TrackPopupMenuEx. This is essential for creating an optimal user experience, especially when developing Microsoft Tablet PC applications. To specify an area of the screen that the menu should not overlap, use the TrackPopupMenuEx function To display a context menu for a notification icon, the current window must be the foreground window before the application calls TrackPopupMenu or TrackPopupMenuEx. Otherwise, the menu will not disappear when the user clicks outside of the menu or the window that created the menu (if it is visible). If the current window is a child window, you must set the (top-level) parent window as the foreground window. However, when the current window is the foreground window, the second time this menu is displayed, it appears and then immediately disappears. To correct this, you must force a task switch to the application that called TrackPopupMenu. This is done by posting a benign message to the window or thread, as shown in the following code sample: For an example, see Displaying a Shortcut Menu. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "TrackPopupMenu",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hMenu",
        "description": "Type: HMENU A handle to the shortcut menu to be displayed. The handle can be obtained by calling CreatePopupMenu to create a new shortcut menu, or by calling GetSubMenu to retrieve a handle to a submenu associated with an existing menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "uFlags",
        "description": "Type: UINT Use zero of more of these flags to specify function options.   Use one of the following flags to specify how the function positions the shortcut menu horizontally.   ValueMeaning  TPM_CENTERALIGN 0x0004L   Centers the shortcut menu horizontally relative to the coordinate specified by the x parameter.   TPM_LEFTALIGN 0x0000L   Positions the shortcut menu so that its left side is aligned with the coordinate specified by the x parameter.   TPM_RIGHTALIGN 0x0008L   Positions the shortcut menu so that its right side is aligned with the coordinate specified by the x parameter.      Use one of the following flags to specify how the function positions the shortcut menu vertically.  ValueMeaning  TPM_BOTTOMALIGN 0x0020L   Positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the y parameter.   TPM_TOPALIGN 0x0000L   Positions the shortcut menu so that its top side is aligned with the coordinate specified by the y parameter.   TPM_VCENTERALIGN 0x0010L   Centers the shortcut menu vertically relative to the coordinate specified by the y parameter.      Use the following flags to control discovery of the user selection without having to set up a parent window for the menu.   ValueMeaning  TPM_NONOTIFY 0x0080L   The function does not send notification messages when the user clicks a menu item.   TPM_RETURNCMD 0x0100L   The function returns the menu item identifier of the user's selection in the return value.      Use one of the following flags to specify which mouse button the shortcut menu tracks.   ValueMeaning  TPM_LEFTBUTTON 0x0000L   The user can select menu items with only the left mouse button.   TPM_RIGHTBUTTON 0x0002L   The user can select menu items with both the left and right mouse buttons.      Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.   ValueMeaning  TPM_HORNEGANIMATION 0x0800L   Animates the menu from right to left.   TPM_HORPOSANIMATION 0x0400L   Animates the menu from left to right.   TPM_NOANIMATION 0x4000L   Displays menu without animation.   TPM_VERNEGANIMATION 0x2000L   Animates the menu from bottom to top.   TPM_VERPOSANIMATION 0x1000L   Animates the menu from top to bottom.     For any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo.   Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.   For right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "x",
        "description": "Type: int The horizontal location of the shortcut menu, in screen coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "y",
        "description": "Type: int The vertical location of the shortcut menu, in screen coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "nReserved",
        "description": "Type: int Reserved; must be zero."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWnd",
        "description": "Type: HWND A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the uFlags parameter, the function does not send messages to the window identified by hWnd. However, you must still pass a window handle in hWnd. It can be any window handle from your application."
      },
      {
        "in_out": "_In_opt_",
        "type": "const RECT*",
        "name": "prcRect",
        "description": "Type: const RECT* Ignored."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winuser.h (include Windows.h)",
    "return_value": "Type: BOOL If you specify TPM_RETURNCMD in the fuFlags parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero. If you do not specify TPM_RETURNCMD in the fuFlags parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call GetLastError. ",
    "remarks": "Call GetSystemMetrics with SM_MENUDROPALIGNMENT to determine the correct horizontal alignment flag (TPM_LEFTALIGN or TPM_RIGHTALIGN) and/or horizontal animation direction flag (TPM_HORPOSANIMATION or TPM_HORNEGANIMATION) to pass to TrackPopupMenu or TrackPopupMenuEx. This is essential for creating an optimal user experience, especially when developing Microsoft Tablet PC applications. To display a context menu for a notification icon, the current window must be the foreground window before the application calls TrackPopupMenu or TrackPopupMenuEx. Otherwise, the menu will not disappear when the user clicks outside of the menu or the window that created the menu (if it is visible). If the current window is a child window, you must set the (top-level) parent window as the foreground window. ",
    "return_type": "BOOL",
    "category": "Menus",
    "name": "TrackPopupMenuEx",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HMENU",
        "name": "hmenu",
        "description": "Type: HMENU A handle to the shortcut menu to be displayed. This handle can be obtained by calling the CreatePopupMenu function to create a new shortcut menu or by calling the GetSubMenu function to retrieve a handle to a submenu associated with an existing menu item."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "fuFlags",
        "description": "Type: UINT Specifies function options.   Use one of the following flags to specify how the function positions the shortcut menu horizontally.   ValueMeaning  TPM_CENTERALIGN 0x0004L   Centers the shortcut menu horizontally relative to the coordinate specified by the x parameter.   TPM_LEFTALIGN 0x0000L   Positions the shortcut menu so that its left side is aligned with the coordinate specified by the x parameter.   TPM_RIGHTALIGN 0x0008L   Positions the shortcut menu so that its right side is aligned with the coordinate specified by the x parameter.      Use one of the following flags to specify how the function positions the shortcut menu vertically.  ValueMeaning  TPM_BOTTOMALIGN 0x0020L   Positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the y parameter.   TPM_TOPALIGN 0x0000L   Positions the shortcut menu so that its top side is aligned with the coordinate specified by the y parameter.   TPM_VCENTERALIGN 0x0010L   Centers the shortcut menu vertically relative to the coordinate specified by the y parameter.      Use the following flags to control discovery of the user selection without having to set up a parent window for the menu.   ValueMeaning  TPM_NONOTIFY 0x0080L   The function does not send notification messages when the user clicks a menu item.   TPM_RETURNCMD 0x0100L   The function returns the menu item identifier of the user's selection in the return value.      Use one of the following flags to specify which mouse button the shortcut menu tracks.   ValueMeaning  TPM_LEFTBUTTON 0x0000L   The user can select menu items with only the left mouse button.   TPM_RIGHTBUTTON 0x0002L   The user can select menu items with both the left and right mouse buttons.      Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.   ValueMeaning  TPM_HORNEGANIMATION 0x0800L   Animates the menu from right to left.   TPM_HORPOSANIMATION 0x0400L   Animates the menu from left to right.   TPM_NOANIMATION 0x4000L   Displays menu without animation.   TPM_VERNEGANIMATION 0x2000L   Animates the menu from bottom to top.   TPM_VERPOSANIMATION 0x1000L   Animates the menu from top to bottom.     For any animation to occur, the SystemParametersInfo function must set SPI_SETMENUANIMATION. Also, all the TPM_*ANIMATION flags, except TPM_NOANIMATION, are ignored if menu fade animation is on. For more information, see the SPI_GETMENUFADE flag in SystemParametersInfo.   Use the TPM_RECURSE flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.  Use one of the following flags to specify whether to accommodate horizontal or vertical alignment.   ValueMeaning  TPM_HORIZONTAL 0x0000L   If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested horizontal alignment before the requested vertical alignment.   TPM_VERTICAL 0x0040L   If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested vertical alignment before the requested horizontal alignment.     The excluded rectangle is a portion of the screen that the menu should not overlap; it is specified by the lptpm parameter.   For right-to-left text layout, use TPM_LAYOUTRTL. By default, the text layout is left-to-right."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "x",
        "description": "Type: int The horizontal location of the shortcut menu, in screen coordinates."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "y",
        "description": "Type: int The vertical location of the shortcut menu, in screen coordinates."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwnd",
        "description": "Type: HWND A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a WM_COMMAND message from the menu until the function returns. If you specify TPM_NONOTIFY in the fuFlags parameter, the function does not send messages to the window identified by hwnd. However, you must still pass a window handle in hwnd. It can be any window handle from your application."
      },
      {
        "in_out": "_In_opt_",
        "type": "LPTPMPARAMS",
        "name": "lptpm",
        "description": "Type: LPTPMPARAMS A pointer to a TPMPARAMS structure that specifies an area of the screen the menu should not overlap. This parameter can be NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]