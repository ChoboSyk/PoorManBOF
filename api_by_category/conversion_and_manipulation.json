[
  {
    "n_arguments": 2,
    "description": "Increments the lock count of an array, and retrieves a pointer to the array data.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "After calling SafeArrayAccessData, you must call the SafeArrayUnaccessData function to unlock the array. The following example sorts a safe array of one dimension that contains BSTRs by accessing the array elements directly. This approach is faster than using SafeArrayGetElement and SafeArrayPutElement. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayAccessData",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvData",
        "description": "The array data."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Decrements the lock count of an array, and invalidates the pointer retrieved by SafeArrayAccessData.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayUnaccessData",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Increases the pinning reference count of the descriptor for the specified safe array by one, and may increase the pinning reference count of the data for the specified safe array by one if that data was dynamically allocated, as determined by the descriptor of the safe array.",
    "library": "Mincore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Oleauto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Safe arrays have not traditionally had a reference count. All existing usage of safe arrays will continue to work with no changes. The SafeArrayAddRef, SafeArrayReleaseData, SafeArrayReleaseDescriptor functions add the ability to use reference counting to pin the safe array into memory before calling from an untrusted script into an IDispatch method that may not expect the script to free that memory before the method returns, so that the script cannot force the code for that method into accessing memory that has been freed. After such a method safely returns, the pinning references should be released.   You can release the pinning references by calling the following functions: ",
    "return_type": "HRESULT STDAPICALLTYPE",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayAddRef",
    "is_callback": 0,
    "dll": "Oleaut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "The safe array for which the pinning reference count of the descriptor should increase. While that count remains greater than 0, the memory for the descriptor is prevented from being freed by calls to the SafeArrayDestroy or SafeArrayDestroyDescriptor functions."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID**",
        "name": "ppDataToRelease",
        "description": "Returns the safe array data for which a pinning reference was added, if SafeArrayAddRef also added  a pinning reference for the  safe array data.  This parameter is NULL if SafeArrayAddRef did not add a pinning reference for the safe array data. SafeArrayAddRef does not add a pinning reference for the safe array data if that safe array data was not dynamically allocated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Allocates memory for a safe array, based on a descriptor created with SafeArrayAllocDescriptor.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  The following example creates a safe array using the SafeArrayAllocDescriptor and SafeArrayAllocData functions. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayAllocData",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "A safe array descriptor created by SafeArrayAllocDescriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Allocates memory for a safe array descriptor.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function allows the creation of safe arrays that contain elements with data types other than those provided by SafeArrayCreate. After creating an array descriptor using SafeArrayAllocDescriptor, set the element size in the array descriptor, an call SafeArrayAllocData to allocate memory for the array elements. The following example creates a safe array using the SafeArrayAllocDescriptor and SafeArrayAllocData functions. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayAllocDescriptor",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cDims",
        "description": "The number of dimensions of the array."
      },
      {
        "in_out": "_Out_",
        "type": "SAFEARRAY**",
        "name": "ppsaOut",
        "description": "The safe array descriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a safe array descriptor for an array of any valid variant type, including VT_RECORD, without allocating the array data.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "Because SafeArrayAllocDescriptor does not take a VARTYPE, it is not possible to use it to create the safe array descriptor for an array of records. The SafeArrayAllocDescriptorEx is used to allocate a safe array descriptor for an array of records of the given dimensions. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayAllocDescriptorEx",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The variant type."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cDims",
        "description": "The number of dimensions in the array."
      },
      {
        "in_out": "_Out_",
        "type": "SAFEARRAY**",
        "name": "ppsaOut",
        "description": "The safe array descriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Creates a copy of an existing safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "SafeArrayCopy calls the string or variant manipulation functions if the array to copy contains either of these data types. If the array being copied contains object references, the reference counts for the objects are incremented. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCopy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "A safe array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_Out_",
        "type": "SAFEARRAY**",
        "name": "ppsaOut",
        "description": "The safe array descriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Copies the source array to the specified target array after releasing any resources in the target array. This is similar to SafeArrayCopy, except that the target array has to be set up by the caller. The target is not allocated or reallocated.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCopyData",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psaSource",
        "description": "The safe array to copy."
      },
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psaTarget",
        "description": "The target safe array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a new array descriptor, allocates and initializes the data for the array, and returns a pointer to the new array descriptor.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A safe array descriptor, or null if the array could not be created. The following example demonstrates calling the SafeArrayCreate function. ",
    "remarks": "",
    "return_type": "SAFEARRAY*",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCreate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cDims",
        "description": "The number of dimensions in the array. The number cannot be changed after the array is created."
      },
      {
        "in_out": "_In_",
        "type": "SAFEARRAYBOUND*",
        "name": "rgsabound",
        "description": "A vector of bounds (one for each dimension) to allocate for the array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Creates and returns a safe array descriptor from the specified VARTYPE, number of dimensions and bounds.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A safe array descriptor, or null if the array could not be created. ",
    "remarks": "If the VARTYPE is VT_RECORD then SafeArraySetRecordInfo is called. If the VARTYPE is VT_DISPATCH or VT_UNKNOWN then the elements of the array must contain interfaces of the same type. Part of the process of marshaling this array to other processes does include generating the proxy/stub code of the IID pointed to by the pvExtra parameter. To actually pass heterogeneous interfaces one will need to specify either IID_IUnknown or IID_IDispatch in pvExtra and provide some other means for the caller to identify how to query for the actual interface. The following example describes how a safe array of user-defined types is stored into a variant of type VT_RECORD. ",
    "return_type": "SAFEARRAY*",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCreateEx",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The base type or the VARTYPE of each element of the array. The FADF_RECORD flag can be set for a variant type VT_RECORD, The FADF_HAVEIID flag can be set for VT_DISPATCH or VT_UNKNOWN, and FADF_HAVEVARTYPE can be set for all other VARTYPEs."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "cDims",
        "description": "The number of dimensions in the array."
      },
      {
        "in_out": "_In_",
        "type": "SAFEARRAYBOUND*",
        "name": "rgsabound",
        "description": "A vector of bounds (one for each dimension) to allocate for the array."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvExtra",
        "description": "the type information of the user-defined type, if you are creating a safe array of user-defined types. If the vt parameter is VT_RECORD, then pvExtra will be a pointer to an IRecordInfo describing the record. If the vt parameter is VT_DISPATCH or VT_UNKNOWN, then pvExtra will contain a pointer to a GUID representing the type of interface being passed to the array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a one-dimensional array. A safe array created with SafeArrayCreateVector is a fixed size, so the constant FADF_FIXEDSIZE is always set.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A safe array descriptor, or null if the array could not be created. ",
    "remarks": "",
    "return_type": "SAFEARRAY*",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCreateVector",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lLbound",
        "description": "The lower bound for the array. This parameter can be negative."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElements",
        "description": "The number of elements in the array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Creates and returns a one-dimensional safe array of the specified VARTYPE and bounds.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A safe array descriptor, or null if the array could not be created. ",
    "remarks": "",
    "return_type": "SAFEARRAY*",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayCreateVectorEx",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The base type of the array (the VARTYPE of each element of the array). The FADF_RECORD flag can be set for VT_RECORD. The FADF_HAVEIID can be set for VT_DISPATCH or VT_UNKNOWN and FADF_HAVEVARTYPE can be set for all other types."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lLbound",
        "description": "The lower bound for the array. This parameter can be negative."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "cElements",
        "description": "The number of elements in the array."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pvExtra",
        "description": "The type information of the user-defined type, if you are creating a safe array of user-defined types. If the vt parameter is VT_RECORD, then pvExtra will be a pointer to an IRecordInfo describing the record. If the vt parameter is VT_DISPATCH or VT_UNKNOWN, then pvExtra will contain a pointer to a GUID representing the type of interface being passed to the array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Destroys an existing array descriptor and all of the data in the array. If objects are stored in the array, Release is called on each object in the array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "Safe arrays of variant will have the VariantClear function called on each member and safe arrays of BSTR will have the SysFreeString function called on each element. IRecordInfo::RecordClear will be called to release object references and other values of a record without deallocating the record. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayDestroy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Destroys all the data in the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function is typically used when freeing safe arrays that contain elements with data types other than variants. If objects are stored in the array, Release is called on each object in the array. Safe arrays of variant will have the VariantClear function called on each member and safe arrays of BSTR will have the SysFreeString function called on each element. IRecordInfo::RecordClear will be called to release object references and other values of a record without deallocating the record. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayDestroyData",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "A safe array descriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Destroys the descriptor of the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function is typically used to destroy the descriptor of a safe array that contains elements with data types other than variants. Destroying the array descriptor does not destroy the elements in the array. Before destroying the array descriptor, call SafeArrayDestroyData to free the elements. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayDestroyDescriptor",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "A safe array descriptor."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Gets the number of dimensions in the array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The number of dimensions in the array. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetDim",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a single element of the array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function calls SafeArrayLock and SafeArrayUnlock automatically, before and after retrieving the element. The caller must provide a storage area of the correct size to receive the data. If the data element is a string, object, or variant, the function copies the element in the correct way. The following example is taken from the COM Fundamentals SPoly sample (Cenumpt.cpp). ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetElement",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_In_",
        "type": "LONG*",
        "name": "rgIndices",
        "description": "A vector of indexes for each dimension of the array. ..."
      },
      {
        "in_out": "_Out_",
        "type": "void*",
        "name": "pv",
        "description": "The element of the array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Gets the size of an element.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The size of an element in a safe array, in bytes. ",
    "remarks": "",
    "return_type": "UINT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetElemsize",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Gets the GUID of the interface contained within the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetIID",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_Out_",
        "type": "GUID*",
        "name": "pguid",
        "description": "The GUID of the interface."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Gets the lower bound for any dimension of the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetLBound",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "nDim",
        "description": "The array dimension for which to get the lower bound."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plLbound",
        "description": "The lower bound."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the IRecordInfo interface of the UDT contained in the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetRecordInfo",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_Out_",
        "type": "IRecordInfo**",
        "name": "prinfo",
        "description": "The IRecordInfo interface."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Gets the upper bound for any dimension of the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetUBound",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "nDim",
        "description": "The array dimension for which to get the upper bound."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plUbound",
        "description": "The upper bound."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Gets the VARTYPE stored in the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "If FADF_HAVEVARTYPE is set, SafeArrayGetVartype returns the VARTYPE stored in the array descriptor. If FADF_RECORD is set, it returns VT_RECORD; if FADF_DISPATCH is set, it returns VT_DISPATCH; and if FADF_UNKNOWN is set, it returns VT_UNKNOWN. SafeArrayGetVartype can fail to return VT_UNKNOWN for SAFEARRAY types that are based on IUnknown. Callers should additionally check whether the SAFEARRAY type's fFeatures field has the FADF_UNKNOWN flag set. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayGetVartype",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_Out_",
        "type": "VARTYPE*",
        "name": "pvt",
        "description": "The VARTYPE."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Increments the lock count of an array, and places a pointer to the array data in pvData of the array descriptor.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The pointer in the array descriptor is valid until the SafeArrayUnlock function is called. Calls to SafeArrayLock can be nested, in which case an equal number of calls to SafeArrayUnlock are required. An array cannot be deleted while it is locked. All public static (Shared in Visual Basic) members of the SAFEARRAY data type are thread safe. Instance members are not guaranteed to be thread safe. For example, consider an application that uses the SafeArrayLock and SafeArrayUnlock functions. If these functions are called concurrently from different threads on the same SAFEARRAY data type instance, an inconsistent lock count may be created. This will eventually cause the SafeArrayUnlock function to return E_UNEXPECTED. You can prevent this by providing your own synchronization code. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayLock",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Gets a pointer to an array element.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The array should be locked before SafeArrayPtrOfIndex is called. Failing to lock the array can cause unpredictable results. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayPtrOfIndex",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_In_",
        "type": "LONG*",
        "name": "rgIndices",
        "description": "An array of index values that identify an element of the array. All indexes for the element must be specified."
      },
      {
        "in_out": "_Out_",
        "type": "void**",
        "name": "ppvData",
        "description": "The array element."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Stores the data element at the specified location in the array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function automatically calls SafeArrayLock and SafeArrayUnlock before and after assigning the element. If the data element is a string, object, or variant, the function copies it correctly when the safe array is destroyed. If the existing element is a string, object, or variant, it is cleared correctly.  If the data element is a VT_DISPATCH or VT_UNKNOWN, AddRef is called to increment the object's reference count. For an example that demonstrates calling SafeArrayPutElement, see the COM Fundamentals Lines sample (CLines::Add in Lines.cpp). ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayPutElement",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      },
      {
        "in_out": "_In_",
        "type": "LONG*",
        "name": "rgIndices",
        "description": "A vector of indexes for each dimension of the array. ..."
      },
      {
        "in_out": "_In_",
        "type": "void*",
        "name": "pv",
        "description": "The data to assign to the array. The variant types VT_DISPATCH, VT_UNKNOWN, and VT_BSTR are pointers, and do not require another level of indirection."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Changes the right-most (least significant) bound of the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "If you reduce the bound of an array, SafeArrayRedim deallocates the array elements outside the new array boundary. If the bound of an array is increased, SafeArrayRedim allocates and initializes the new array elements. The data is preserved for elements that exist in both the old and new array. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayRedim",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "A safe array descriptor."
      },
      {
        "in_out": "_In_",
        "type": "SAFEARRAYBOUND*",
        "name": "psaboundNew",
        "description": "A new safe array bound structure that contains the new array boundary. You can change only the least significant dimension of an array."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Decreases the pinning reference count for the specified safe array data by one. When that count reaches 0, the memory for that data is no longer prevented from being freed.",
    "library": "Mincore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Oleauto.h",
    "return_value": "This function does not return a value. ",
    "remarks": "A call to the SafeArrayReleaseData function should match every previous call to the SafeArrayAddRef function that returned a non-null value in the ppDataToRelease parameter. ",
    "return_type": "void STDAPICALLTYPE",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayReleaseData",
    "is_callback": 0,
    "dll": "Oleaut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "pData",
        "description": "The safe array data for which the pinning reference count should decrease."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Decreases the pinning reference count for the descriptor of the specified safe array by one. When that count reaches 0, the memory for that descriptor is no longer prevented from being freed.",
    "library": "Mincore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Oleauto.h",
    "return_value": "This function does not return a value. ",
    "remarks": "A call to the SafeArrayReleaseDescriptor function should match every previous call to the SafeArrayAddRef function. ",
    "return_type": "void STDAPICALLTYPE",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayReleaseDescriptor",
    "is_callback": 0,
    "dll": "Oleaut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "The safe array for which the pinning reference count of the descriptor should decrease."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the GUID of the interface for the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArraySetIID",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "The safe array descriptor."
      },
      {
        "in_out": "_In_",
        "type": "REFGUID",
        "name": "guid",
        "description": "The IID."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Sets the record info in the specified safe array.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArraySetRecordInfo",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "The array descriptor."
      },
      {
        "in_out": "_In_",
        "type": "IRecordInfo*",
        "name": "prinfo",
        "description": "The record info."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Decrements the lock count of an array so it can be freed or resized.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function is called after access to the data in an array is finished. All public static members of the SAFEARRAY data type are thread safe. Instance members are not guaranteed to be thread safe. For example, consider an application that uses the SafeArrayLock and SafeArrayUnlock functions. If these functions are called concurrently from different threads on the same SAFEARRAY data type instance, an inconsistent lock count may be created. This will eventually cause the SafeArrayUnlock function to return E_UNEXPECTED. You can prevent this by providing your own synchronization code. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "SafeArrayUnlock",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "An array descriptor created by SafeArrayCreate."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a variant from one type to another.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The VariantChangeType function handles coercions between the fundamental types (including numeric-to-string and string-to-numeric coercions). The pvarSrc argument is changed during the conversion process. For example, if the source variant is of type VT_BOOL and the destination is of type VT_UINT, the pvarSrc argument is first converted to VT_I2 and then the conversion proceeds. A variant that has VT_BYREF set is coerced to a value by obtaining the referenced value. An object is coerced to a value by invoking the object's Value property (DISPID_VALUE). Typically, the implementor of IDispatch::Invoke determines which member is being accessed, and then calls VariantChangeType to get the value of one or more arguments. For example, if the IDispatch call specifies a SetTitle member that takes one string argument, the implementor would call VariantChangeType to attempt to coerce the argument to VT_BSTR. If VariantChangeType does not return an error, the argument could then be obtained directly from the bstrVal field of the VARIANTARG. If VariantChangeType returns DISP_E_TYPEMISMATCH, the implementor would set *puArgErr to 0 (indicating the argument in error) and return DISP_E_TYPEMISMATCH from Invoke. Arrays of one type cannot be converted to arrays of another type with this function. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VariantChangeType",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "VARIANTARG*",
        "name": "pvargDest",
        "description": "The destination variant. If this is the same as pvarSrc, the variant will be converted in place."
      },
      {
        "in_out": "_In_",
        "type": "const VARIANTARG*",
        "name": "pvarSrc",
        "description": "The variant to convert."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "wFlags",
        "description": "Flags.  ValueMeaning  VARIANT_NOVALUEPROP   Prevents the function from attempting to coerce an object to a fundamental type by getting the Value property. Applications should set this flag only if necessary, because it makes their behavior inconsistent with other applications.   VARIANT_ALPHABOOL   Converts a VT_BOOL value to a string containing either \"True\" or \"False\".     VARIANT_NOUSEROVERRIDE   For conversions to or from VT_BSTR, passes LOCALE_NOUSEROVERRIDE to the core coercion routines.     VARIANT_LOCALBOOL   For conversions from VT_BOOL to VT_BSTR and back, uses the language specified by the locale in use on the local computer."
      },
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The type to convert to. If the return code is S_OK, the vt field of the *pvargDest is guaranteed to be equal to this value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "Converts a variant from one type to another, using an LCID.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The VariantChangeTypeEx function handles coercions between the fundamental types (including numeric-to-string and string-to-numeric coercions). A variant that has VT_BYREF set is coerced to a value by obtaining the referenced value. An object is coerced to a value by invoking the object's Value property (DISPID_VALUE). Typically, the implementor of IDispatch::Invoke determines which member is being accessed, and then calls VariantChangeType to get the value of one or more arguments. For example, if the IDispatch call specifies a SetTitle member that takes one string argument, the implementor would call VariantChangeTypeEx to attempt to coerce the argument to VT_BSTR. If VariantChangeTypeEx does not return an error, the argument could then be obtained directly from the bstrVal field of the VARIANTARG. If VariantChangeTypeEx returns DISP_E_TYPEMISMATCH, the implementor would set *puArgErr to 0 (indicating the argument in error) and return DISP_E_TYPEMISMATCH from IDispatch::Invoke. Arrays of one type cannot be converted to arrays of another type with this function. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VariantChangeTypeEx",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "VARIANTARG*",
        "name": "pvargDest",
        "description": "The destination variant. If this is the same as pvarSrc, the variant will be converted in place."
      },
      {
        "in_out": "_In_",
        "type": "const VARIANTARG*",
        "name": "pvarSrc",
        "description": "The variant to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier. The LCID is useful when the type of the source or destination VARIANTARG is VT_BSTR, VT_DISPATCH, or VT_DATE."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "wFlags",
        "description": "Flags.  ValueMeaning  VARIANT_NOVALUEPROP   Prevents the function from attempting to coerce an object to a fundamental type by getting the Value property. Applications should set this flag only if necessary, because it makes their behavior inconsistent with other applications.   VARIANT_ALPHABOOL   Converts a VT_BOOL value to a string containing either \"True\" or \"False\".     VARIANT_NOUSEROVERRIDE   For conversions to or from VT_BSTR, passes LOCALE_NOUSEROVERRIDE to the core coercion routines.     VARIANT_LOCALBOOL   For conversions from VT_BOOL to VT_BSTR and back, uses the language specified by the locale in use on the local computer."
      },
      {
        "in_out": "_In_",
        "type": "VARTYPE",
        "name": "vt",
        "description": "The type to convert to. If the return code is S_OK, the vt field of the *pvargDest is guaranteed to be equal to this value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Initializes a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function does not return a value. ",
    "remarks": "The VariantInit function initializes the VARIANTARG by setting the vt field to VT_EMPTY. Unlike VariantClear, this function does not interpret the current contents of the VARIANTARG. Use VariantInit to initialize new local variables of type VARIANTARG (or VARIANT). The following example shows how to initialize an array of variants, where celt is the number of elements in the array. ",
    "return_type": "void",
    "category": "Conversion and Manipulation",
    "name": "VariantInit",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "VARIANTARG*",
        "name": "pvarg",
        "description": "The variant to initialize."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Allocates a new string and copies the passed string into it.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If successful, returns the string. If psz is a zero-length string, returns a zero-length BSTR. If psz is NULL or insufficient memory exists, returns NULL. ",
    "remarks": "You can free strings created with SysAllocString using SysFreeString. ",
    "return_type": "BSTR",
    "category": "Conversion and Manipulation",
    "name": "SysAllocString",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "const OLECHAR*",
        "name": "psz",
        "description": "The string to copy."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Deallocates a string allocated previously by SysAllocString, SysAllocStringByteLen, SysReAllocString, SysAllocStringLen, or SysReAllocStringLen.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void",
    "category": "Conversion and Manipulation",
    "name": "SysFreeString",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "BSTR",
        "name": "bstrString",
        "description": "The previously allocated string. If this parameter is NULL, the function simply returns."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Clears a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "Use this function to clear variables of type VARIANTARG (or VARIANT) before the memory containing the VARIANTARG is freed (as when a local variable goes out of scope). The function clears a VARIANTARG by setting the vt field to VT_EMPTY. The current contents of the VARIANTARG are released first. If the vtfield is VT_BSTR, the string is freed. If the vtfield is VT_DISPATCH, the object is released. If the vt field has the VT_ARRAY bit set, the array is freed. If the variant to be cleared is a COM object that is passed by reference, the vtfield of the pvargparameter is VT_DISPATCH | VT_BYREF or VT_UNKNOWN | VT_BYREF.  In this case, VariantClear does not release the object. Because the variant being cleared is a pointer to a reference to an object, VariantClear has no way to determine if it is necessary to release the object. It is therefore the responsibility of the caller to release the object or not, as appropriate. In certain cases, it may be preferable to clear a variant in code without calling VariantClear. For example, you can change the type of a VT_I4 variant to another type without calling this function. Safearrays of BSTR will have SysFreeString called on each element not VariantClear. However, you must call VariantClear if a VT_type is received but cannot be handled. Safearrays of variant will also have VariantClear called on each member. Using VariantClear in these cases ensures that code will continue to work if Automation adds new variant types in the future. Do not use VariantClear on unitialized variants; use VariantInit to initialize a new VARIANTARG or VARIANT. Variants containing arrays with outstanding references cannot be cleared.  Attempts to do so will return an HRESULT containing DISP_E_ARRAYISLOCKED. The following example shows how to clear an array of variants, where celt is the number of elements in the array. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VariantClear",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "VARIANTARG*",
        "name": "pvarg",
        "description": "The variant to clear."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees the destination variant and makes a copy of the source variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "First, free any memory that is owned by pvargDest, such as VariantClear (pvargDest must point to a valid initialized variant, and not simply to an uninitialized memory location). Then pvargDest receives an exact copy of the contents of pvargSrc. If pvargSrc is a VT_BSTR, a copy of the string is made. If pvargSrcis a VT_ARRAY, the entire array is copied. If pvargSrc is a VT_DISPATCH or VT_UNKNOWN, AddRef is called to increment the object's reference count. If the variant to be copied is a COM object that is passed by reference, the vtfield of the pvargSrcparameter is VT_DISPATCH | VT_BYREF or VT_UNKNOWN | VT_BYREF.  In this case, VariantCopy does not increment the reference count on the referenced object. Because the variant being copied is a pointer to a reference to an object, VariantCopy has no way to determine if it is necessary to increment the reference count of the object. It is therefore the responsibility of the caller to call IUnknown::AddRef on the object or not, as appropriate. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VariantCopy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "VARIANTARG*",
        "name": "pvargDest",
        "description": "The destination variant."
      },
      {
        "in_out": "_In_",
        "type": "const VARIANTARG*",
        "name": "pvargSrc",
        "description": "The source variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees the destination variant and makes a copy of the source variant, performing the necessary indirection if the source is specified to be VT_BYREF.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function is useful when a copy of a variant is needed, and to guarantee that it is not VT_BYREF, such as when handling arguments in an implementation of IDispatch::Invoke. For example, if the source is a (VT_BYREF | VT_I2), the destination will be a BYVAL | VT_I2. The same is true for all legal VT_BYREF combinations, including VT_VARIANT. If pvargSrc is (VT_BYREF | VT_VARIANT), and the contained variant is VT_BYREF, the contained variant is also dereferenced. This function frees any existing contents of pvarDest. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VariantCopyInd",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvarDest",
        "description": "The destination variant."
      },
      {
        "in_out": "_In_",
        "type": "const VARIANTARG*",
        "name": "pvargSrc",
        "description": "The source variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Returns the absolute value of a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarAbs",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Returns the sum of two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarAdd",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs a bitwise And operation between two variants of any integral type.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarAnd",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Concatenates two variants and returns the result.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCat",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Compares two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The function only compares the value of the variant types. It compares strings, integers, and floating points, but not arrays or records. NORM_IGNOREWIDTH causes VarCmp to ignore the difference between half-width and full-width characters, as the following example demonstrates: \"\u00ef\u00bc\u00a3\u00ef\u00bd\u0081\u00ef\u00bd\u0094\"== \"cat\" The full-width form is a formatting distinction used in Chinese and Japanese scripts. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCmp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "The compare results option.  ValueMeaning  NORM_IGNORECASE 0x00000001   Ignore case.   NORM_IGNORENONSPACE 0x00000002   Ignore nonspace characters.   NORM_IGNORESYMBOLS 0x00000004   Ignore symbols.   NORM_IGNOREWIDTH 0x00000008   Ignore string width.   NORM_IGNOREKANATYPE 0x00000040   Ignore Kana type.   NORM_IGNOREKASHIDA 0x00040000   Ignore Arabic kashida characters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Returns the result from dividing two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDiv",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs a bitwise equivalence on two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If each bit in pvarLeft is equal to the corresponding bit in pvarRight then TRUE is returned. Otherwise FALSE is returned. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarEqv",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Returns the integer portion of a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the variant is negative, then the first negative integer greater than or equal to the variant is returned. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarFix",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts two variants of any type to integers then returns the result from dividing them.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarIdiv",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs a bitwise implication on two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  Because VarImp performs bitwise operations on pvarLeft and pvarRight instead of logical operations a pvarResult of TRUE is returned by this function call. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarImp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Returns the integer portion of a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If the variant is negative, then the first negative integer less than or equal to the variant is returned. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarInt",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Divides two variants and returns only the remainder.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarMod",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Returns the result from multiplying two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  Boolean values are converted to -1 for FALSE and 0 for TRUE. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarMul",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Performs logical negation on a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarNeg",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Performs the bitwise not negation operation on a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarNot",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs a logical disjunction on two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarOr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Returns the result of performing the power function with two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Returns the result of pvarLeft to the power of pvarRight. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarPow",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Compares two variants of types float and double.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns the following as a SUCCESS HRESULT.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4CmpR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "float",
        "name": "fltLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblRight",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs the power function for variants of type double.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8Pow",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "double*",
        "name": "pdblResult",
        "description": "The result."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Rounds a variant of type double to the specified number of decimal places.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8Round",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblIn",
        "description": "The variant."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cDecimals",
        "description": "The number of decimal places."
      },
      {
        "in_out": "_Out_",
        "type": "double*",
        "name": "pdblResult",
        "description": "The result."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Rounds a variant to the specified number of decimal places.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarRound",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarIn",
        "description": "The variant."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cDecimals",
        "description": "The number of decimal places."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Subtracts two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarSub",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Performs a logical exclusion on two variants.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "The function operates as follows.  ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarXor",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPVARIANT",
        "name": "pvarRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPVARIANT",
        "name": "pvarResult",
        "description": "The result variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Increases the  pinning reference count for the specified string by one.",
    "library": "Mincore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Oleauto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "Strings with the BSTR data type have not traditionally had a reference count. All existing usage of these strings will continue to work with no changes. The SysAddRefString and SysReleaseString functions add the ability to use reference counting to pin the string into memory before calling from an untrusted script into an IDispatch method that may not expect the script to free that memory before the method returns, so that the script cannot force the code for that method into accessing memory that has been freed. After such a method safely returns, the pinning references should be released by calling SysReleaseString. ",
    "return_type": "HRESULT STDAPICALLTYPE",
    "category": "Conversion and Manipulation",
    "name": "SysAddRefString",
    "is_callback": 0,
    "dll": "Oleaut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrString",
        "description": "The string for which the pinning reference count should increase. While that count remains greater than 0, the memory for the string is prevented from being freed by calls to the SysFreeString function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Takes an ANSI string as input, and returns a BSTR that contains an ANSI string. Does not perform any ANSI-to-Unicode translation.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A copy of the string, or NULL if there is insufficient memory to complete the operation. ",
    "remarks": "This function is provided to create BSTRs that contain binary data. You can use this type of BSTR only in situations where it will not be translated from ANSI to Unicode, or vice versa. For example, do not use these BSTRs between a 16-bit and a 32-bit application running on a 32-bit Windows system. The OLE 16-bit to 32-bit (and 32-bit to 16-bit) interoperability layer will translate the BSTR and corrupt the binary data. The preferred method of passing binary data is to use a SAFEARRAY of VT_UI1, which will not be translated by OLE. If psz is Null, a string of the requested length is allocated, but not initialized. The string psz can contain embedded null characters, and does not need to end with a Null. Free the returned string later with SysFreeString. ",
    "return_type": "BSTR",
    "category": "Conversion and Manipulation",
    "name": "SysAllocStringByteLen",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCSTR",
        "name": "psz",
        "description": "The string to copy, or NULL to keep the string uninitialized."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "len",
        "description": "The number of bytes to copy. A null character is placed afterwards, allocating a total of len plus the size of OLECHAR bytes."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Allocates a new string, copies the specified number of characters from the passed string, and appends a null-terminating character.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "A copy of the string, or NULL if there is insufficient memory to complete the operation. ",
    "remarks": "The string can contain embedded null characters and does not need to end with a NULL. Free the returned string later with SysFreeString. If strIn is not NULL, then the memory allocated to strIn must be at least ui characters long. ",
    "return_type": "BSTR",
    "category": "Conversion and Manipulation",
    "name": "SysAllocStringLen",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const OLECHAR*",
        "name": "strIn",
        "description": "The input string."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "ui",
        "description": "The number of characters to copy. A null character is placed afterwards, allocating a total of ui plus one characters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Reallocates a previously allocated string to be the size of a second string and copies the second string into the reallocated memory.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": " ",
    "remarks": "The address passed in psz cannot be part of the string passed in pbstr, or unexpected results may occur. If pbstr is NULL, there will be an access violation and the program will crash. It is your responsibility to protect this function against NULL pointers. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "SysReAllocString",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BSTR*",
        "name": "pbstr",
        "description": "The previously allocated string."
      },
      {
        "in_out": "_In_opt_",
        "type": "const OLECHAR*",
        "name": "psz",
        "description": "The string to copy."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Creates a new BSTR containing a specified number of characters from an old BSTR, and frees the old BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": " ",
    "remarks": "Allocates a new string, copies len characters from the passed string into it, and then appends a null character. Frees the BSTR referenced currently by pbstr, and resets pbstr to point to the new BSTR. If psz is null, a string of length len is allocated but not initialized. The psz string can contain embedded null characters and does not need to end with a null. If this function is passed a NULL pointer, there will be an access violation and the program will crash. It is your responsibility to protect this function against NULL pointers. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "SysReAllocStringLen",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "BSTR*",
        "name": "pbstr",
        "description": "The previously allocated string."
      },
      {
        "in_out": "_In_opt_",
        "type": "const OLECHAR*",
        "name": "psz",
        "description": "The string from which to copy len characters, or NULL to keep the string uninitialized."
      },
      {
        "in_out": "_In_",
        "type": "unsigned int",
        "name": "len",
        "description": "The number of characters to copy. A null character is placed afterward, allocating a total of len plus one characters."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Decreases the pinning reference count for the specified string by one. When that count reaches 0, the memory for that string is no longer prevented from being freed.",
    "library": "Mincore.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Oleauto.h",
    "return_value": "This function does not return a value. ",
    "remarks": "A call to the SysReleaseString function should match every previous call to the SysAddRefString function. ",
    "return_type": "void STDAPICALLTYPE",
    "category": "Conversion and Manipulation",
    "name": "SysReleaseString",
    "is_callback": 0,
    "dll": "Oleaut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrString",
        "description": "The string for which the  pinning reference count should decrease."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the length (in bytes) of a BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The number of bytes in bstr, not including the terminating null character. If bstr is null the return value is zero. ",
    "remarks": "The returned value may be different from strlen(bstr) if the BSTR contains embedded null characters. This function always returns the number of bytes specified in the len parameter of the SysAllocStringByteLen function used to allocate the BSTR. ",
    "return_type": "UINT",
    "category": "Conversion and Manipulation",
    "name": "SysStringByteLen",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "BSTR",
        "name": "bstr",
        "description": "A previously allocated string."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 1,
    "description": "Returns the length of a BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The number of characters in bstr, not including the terminating null character. If bstr is null the return value is zero. ",
    "remarks": "The returned value may be different from strlen(bstr) if the BSTR contains embedded Null characters. This function always returns the number of characters specified in the cch parameter of the SysAllocStringLen function used to allocate the BSTR. ",
    "return_type": "UINT",
    "category": "Conversion and Manipulation",
    "name": "SysStringLen",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "BSTR",
        "name": "bstr",
        "description": "A previously allocated string."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserFree",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserFree64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Marshals a BSTR object into the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserMarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Marshals a BSTR object into the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserMarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the BSTR object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserSize",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "The current buffer offset where the object will be marshaled. The method has to account for any padding needed for the BSTR object to be properly aligned when it will be marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the BSTR object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserSize64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "The current buffer offset where the object will be marshaled. The method has to account for any padding needed for the BSTR object to be properly aligned when it will be marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a BSTR object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserUnmarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a BSTR object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "BSTR_UserUnmarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pBstr",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Marshals a SAFEARRAY object to a user's RPC buffer on the server using information passed in by the LPSAFEARRAY_UserMarshal function.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_Marshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      },
      {
        "in_out": "_In_",
        "type": "const IID*",
        "name": "piid",
        "description": "Points to an IID for an IDispatch or IUnknown interface. Used when the members of the safe array are IDispatch or IUnknown."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Marshals data from the specified SAFEARRAY object to the user's RPC buffer on the client or server side.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserMarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Calculates the wire size of the SAFEARRAY object, and gets its handle and data needed by the LPSAFEARRAY_UserSize  function.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_Size",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "Sets the buffer offset so that the safe array object is properly aligned when it is marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      },
      {
        "in_out": "_In_",
        "type": "const IID*",
        "name": "piid",
        "description": "Points to an IID for an IDispatch or IUnknown interface. Used when the members of the safe array are IDispatch or IUnknown."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the SAFEARRAY object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserSize",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "Sets the buffer offset so that the SAFEARRAY object is properly aligned when it is marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Unmarshals a SAFEARRAY object from the RPC buffer using information passed in by the LPSAFEARRAY_UserUnmarshal function.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_Unmarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "Receives the safe array that contains the data."
      },
      {
        "in_out": "_In_",
        "type": "const IID*",
        "name": "piid",
        "description": "Points to an IID for an IDispatch or IUnknown interface. Used when the members of the safe array are IDispatch or IUnknown."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a SAFEARRAY object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserUnmarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "Receives the safe array that contains the data."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserFree",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array to free."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserFree64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array to free."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Marshals data from the specified SAFEARRAY object to the user's RPC buffer on the client or server side.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserMarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the SAFEARRAY object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserSize64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "Sets the buffer offset so that the SAFEARRAY object is properly aligned when it is marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "The safe array that contains the data to marshal."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a SAFEARRAY object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "LPSAFEARRAY_UserUnmarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry. The function aligns the buffer pointer, marshals the data, and returns the new buffer position, which is the address of the first byte after the marshaled object."
      },
      {
        "in_out": "_In_",
        "type": "LPSAFEARRAY*",
        "name": "ppSafeArray",
        "description": "Receives the safe array that contains the data."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserFree",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Frees resources on the server side when called by RPC stub files.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "",
    "return_type": "void __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserFree64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Marshals a VARIANT object into the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserMarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Marshals a VARIANT object into the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserMarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_Inout_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the VARIANT object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserSize",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "The current buffer offset where the object will be marshaled. The method has to account for any padding needed for the object to be properly aligned when it will be marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Calculates the wire size of the VARIANT object, and gets its handle and data.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is S_OK. ",
    "remarks": "",
    "return_type": "unsigned long __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserSize64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "Offset",
        "description": "The current buffer offset where the object will be marshaled. The method has to account for any padding needed for the object to be properly aligned when it will be marshaled to the buffer."
      },
      {
        "in_out": "_In_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a VARIANT object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserUnmarshal",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Unmarshals a VARIANT object from the RPC buffer.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "",
    "return_value": "The value obtained from the returned HRESULT value is one of the following.  ",
    "remarks": "",
    "return_type": "unsigned char* __stdcall",
    "category": "Conversion and Manipulation",
    "name": "VARIANT_UserUnmarshal64",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "unsigned long*",
        "name": "pFlags",
        "description": "The data used by RPC."
      },
      {
        "in_out": "_In_",
        "type": "unsigned char*",
        "name": "pBuffer",
        "description": "The current buffer. This pointer may or may not be aligned on entry."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pVariant",
        "description": "The object."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 4,
    "description": "Converts parsed results to a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "For rounding decimal numbers, the digit array must be at least one digit longer than the maximum required for data types. The maximum number of digits required for the DECIMAL data type is 29, so the digit array must have room for 30 digits. There must also be enough digits to accept the number in octal, if that parsing options is selected. (Hexadecimal and octal numbers are limited by VarNumFromParseNum to the magnitude of an unsigned long [32 bits], so they need 11 octal digits.) ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarNumFromParseNum",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "NUMPARSE*",
        "name": "pnumprs",
        "description": "The parsed results. The cDig member of this argument specifies the number of digits present in rgbDig."
      },
      {
        "in_out": "_In_",
        "type": "BYTE*",
        "name": "rgbDig",
        "description": "The values of the digits. The cDig field of pnumprs contains the number of digits."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwVtBits",
        "description": "One bit set for each type that is acceptable as a return value (in many cases, just one bit). VTBIT_I1VTBIT_UI1VTBIT_I2VTBIT_UI2VTBIT_I4VTBIT_UI4VTBIT_R4VTBIT_R8VTBIT_CYVTBIT_DECIMAL"
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT*",
        "name": "pvar",
        "description": "The variant result."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 5,
    "description": "Parses a string, and creates a type-independent description of the number it represents.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarParseNumFromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The input string to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Enables the caller to control parsing, therefore defining the acceptable syntax of a number. If this field is set to zero, the input string must contain nothing but decimal digits. Setting each defined flag bit enables parsing of that syntactic feature. Standard Automation parsing (for example, as used by VarI2FromStr) has all flags set (NUMPRS_STD)."
      },
      {
        "in_out": "_Out_",
        "type": "NUMPARSE*",
        "name": "pnumprs",
        "description": "The parsed results."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "rgbDig",
        "description": "The values for the digits in the range 0\u20137, 0\u20139, or 0\u201315, depending on whether the number is octal, decimal, or hexadecimal. ..."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the absolute value of a variant of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecAbs",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecIn",
        "description": "The first variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Adds two variants of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecAdd",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Compares two variants of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecCmp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecRight",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Compares a variant of type decimal with the a value of type double.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecCmpR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblRight",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Divides two variants of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecDiv",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first decimal variant."
      },
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecRight",
        "description": "The second decimal variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting decimal variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the integer portion of a variant of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFix",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecIn",
        "description": "The decimal variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant. If the variant is negative, then the first negative integer greater than or equal to the variant is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the integer portion of a variant of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecInt",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecIn",
        "description": "The decimal variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant. If the variant is negative, then the first negative integer less than or equal to the variant is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Multiplies two variants of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecMul",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Performs logical negation on a variant of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecNeg",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecIn",
        "description": "The variant to negate."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Rounds a variant of type decimal to the specified number of decimal places.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecRound",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecIn",
        "description": "The variant to round."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cDecimals",
        "description": "The number of decimal places."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Subtracts two variants of type decimal.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecSub",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LPDECIMAL",
        "name": "pdecRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPDECIMAL",
        "name": "pdecResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the MS-DOS representation of time to the date and time representation stored in a variant.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns TRUE on success and FALSE otherwise. ",
    "remarks": "MS-DOS records file dates and times as packed 16-bit values. An MS-DOS date has the following format.  An MS-DOS time has the following format.  The DosDateTimeToVariantTime function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "DosDateTimeToVariantTime",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "wDosDate",
        "description": "The MS-DOS date to convert. The valid range of MS-DOS dates is January 1, 1980, to December 31, 2099, inclusive."
      },
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "wDosTime",
        "description": "The MS-DOS time to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pvtime",
        "description": "The converted time."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the secondary (alternate) month names.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns TRUE on success and FALSE otherwise. ",
    "remarks": "Useful for Hijri, Polish and Russian alternate month names. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "GetAltMonthNames",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier to be used in retrieving the alternate month names."
      },
      {
        "in_out": "_Out_",
        "type": "LPOLESTR**",
        "name": "prgp",
        "description": "An array of pointers to strings containing the alternate month names."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a system time to a variant representation.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns TRUE on success and FALSE otherwise. ",
    "remarks": "A variant time is stored as an 8-byte real value (double), representing a date between January 1, 100 and December 31, 9999, inclusive. The value 2.0 represents January 1, 1900; 3.0 represents January 2, 1900, and so on. Adding 1 to the value increments the date by a day. The fractional part of the value represents the time of day. Therefore, 2.5 represents noon on January 1, 1900; 3.25 represents 6:00 A.M. on January 2, 1900, and so on. Negative numbers represent dates prior to December 30, 1899. The variant time resolves to one second. Any milliseconds in the input date are ignored. The SYSTEMTIME structure is useful for the following reasons: The SystemTimeToVariantTime function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "SystemTimeToVariantTime",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPSYSTEMTIME",
        "name": "lpSystemTime",
        "description": "The system time."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pvtime",
        "description": "The variant time."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts a time and date converted from MS-DOS format to variant format.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The UDATE structure is used with VarDateFromUdate, VarDateFromUdateEx, and VarUdateFromDate.  It represents an unpacked date. The VarDateFromUdate function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. Calling VarDateFromUdate has the same effect as calling VarDateFromUdateEx with the LCID 0x0409. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUdate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UDATE*",
        "name": "pudateIn",
        "description": "The unpacked date."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "VAR_VALIDDATE if the date is valid."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The packed date."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a time and date converted from MS-DOS format to variant format.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The UDATE structure is used with VarDateFromUdateEx, VarDateFromUdate, and VarUdateFromDate.  It represents an unpacked date. The VarDateFromUdate function accepts invalid dates and tries to fix them when resolving to a VARIANT time. Only days are fixed, so invalid month values result in an error being returned. Days are checked to verify that they are in the range of 1 through 31. Negative days and days greater than 31 result in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. For example, an invalid date such as 2/29/2001 resolves to 3/1/2001. A day equal to zero resolves as the last day of the previous month. For example, an invalid date such as 2/0/2001 resolves to 1/31/2001. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUdateEx",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UDATE*",
        "name": "pudateIn",
        "description": "The unpacked date."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "VAR_VALIDDATE if the date is valid."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The packed date."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the variant representation of a date and time to MS-DOS date and time values.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns TRUE on success and FALSE otherwise. ",
    "remarks": "A variant time is stored as an 8-byte real value (double), representing a date between January 1, 100 and December 31, 9999, inclusive. The value 2.0 represents January 1, 1900; 3.0 represents January 2, 1900, and so on. Adding 1 to the value increments the date by a day. The fractional part of the value represents the time of day. Therefore, 2.5 represents noon on January 1, 1900; 3.25 represents 6:00 A.M. on January 2, 1900, and so on. Negative numbers represent the dates prior to December 30, 1899. For a description of the MS-DOS date and time formats, see DosDateTimeToVariantTime. The VariantTimeToDosDateTime function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "VariantTimeToDosDateTime",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "vtime",
        "description": "The variant time to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "pwDosDate",
        "description": "Receives the converted MS-DOS date."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "pwDosTime",
        "description": "Receives the converted MS-DOS time"
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts the variant representation of time to system time values.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "The function returns TRUE on success and FALSE otherwise. ",
    "remarks": "A variant time is stored as an 8-byte real value (double), representing a date between January 1, 100 and December 31, 9999, inclusive. The value 2.0 represents January 1, 1900; 3.0 represents January 2, 1900, and so on. Adding 1 to the value increments the date by a day. The fractional part of the value represents the time of day. Therefore, 2.5 represents noon on January 1, 1900; 3.25 represents 6:00 A.M. on January 2, 1900, and so on. Negative numbers represent the dates prior to December 30, 1899. Using the SYSTEMTIME structure is useful because: The VariantTimeToSystemTime function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. ",
    "return_type": "INT",
    "category": "Conversion and Manipulation",
    "name": "VariantTimeToSystemTime",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "vtime",
        "description": "The variant time to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LPSYSTEMTIME",
        "name": "lpSystemTime",
        "description": "Receives the system time."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts a time and date converted from variant format to MS-DOS format.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "The UDATE structure is used with VarDateFromUdate and VarUdateFromDate.  It represents an \"unpacked\" date. The VarUdateFromDate function will accept invalid dates and try to fix them when resolving to a VARIANT time. For example, an invalid date such as 2/29/2001 will resolve to 3/1/2001. Only days are fixed, so invalid month values result in an error being returned. Days are checked to be between 1 and 31. Negative days and days greater than 31 results in an error. A day less than 31 but greater than the maximum day in that month has the day promoted to the appropriate day of the next month. A day equal to zero resolves as the last day of the previous month. For example, an invalid dates such as 2/0/2001 will resolve to 1/31/2001. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUdateFromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The packed date."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Set for alternative calendars such as Hijri, Polish and Russian."
      },
      {
        "in_out": "_Out_",
        "type": "UDATE*",
        "name": "pudateOut",
        "description": "The unpacked date."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI1FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CHAR*",
        "name": "pcOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a byte value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to an unsigned char string.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to an unsigned char value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI1FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "BYTE*",
        "name": "pbOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI2FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "SHORT*",
        "name": "psOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to an unsigned short value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI2FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "USHORT*",
        "name": "puiOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a long.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an int value to a long value.",
    "library": "OleAut32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarI4FromInt",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "INT",
        "name": "intIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "LONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "plOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to an unsigned long value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarUI4FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "ULONG*",
        "name": "pulOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned 8-byte integer value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a float value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR4FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "FLOAT*",
        "name": "pfltOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a double value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarR8FromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DOUBLE*",
        "name": "pdblOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_CALENDAR_HIJRI   If set then the Hijri calendar is used. Otherwise the calendar set in the control panel is used.    VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a date value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDateFromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DATE*",
        "name": "pdateOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One of more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a currency value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "CY*",
        "name": "pcyOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an unsigned short value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an unsigned long value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an 8-byte unsigned integer value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a char value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an unsigned char value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bVal",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a short value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "iVal",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a long value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an 8-byte unsigned integer value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "unsigned long",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a float value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a double value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a currency value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   LOCALE_USE_NLS   Uses NLS functions for currency conversions."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a decimal value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates. Not used for VariantChangeType and VariantChangeTypeEx.    VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates. Not used for VariantChangeType and VariantChangeTypeEx."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a date value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_CALENDAR_HIJRI   If set then the Hijri calendar is used. Otherwise the calendar set in the control panel is used.    VAR_CALENDAR_THAI   If set then the Buddhist year is used.    VAR_CALENDAR_GREGORIAN   If set the Gregorian year is used.    VAR_FOURDIGITYEARS   Use 4-digit years instead of 2-digit years.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts the default property of an IDispatch instance to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "Reserved. Set to zero."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts a Boolean value to a BSTR value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrFromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_LOCALBOOL   Uses localized Boolean names."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstrOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "sIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a decimal value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromDec",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "const DECIMAL*",
        "name": "pdecIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_LOCALBOOL   Uses localized Boolean names."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a Boolean value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBoolFromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "VARIANT_BOOL*",
        "name": "pboolOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned short value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromUI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "USHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned long value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromUI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "ulIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte unsigned integer value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromUI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "ULONG64",
        "name": "ui64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a char value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CHAR",
        "name": "cIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an unsigned char value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromUI1",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BYTE",
        "name": "bIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a short value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromI2",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SHORT",
        "name": "uiIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a long value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts an 8-byte integer value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "i64In",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a float value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromR4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "FLOAT",
        "name": "fltIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a double value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DOUBLE",
        "name": "dblIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a currency value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromCy",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a date value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromDate",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DATE",
        "name": "dateIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Converts an OLECHAR string to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromStr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCOLESTR",
        "name": "strIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "One or more of the following flags.  ValueMeaning  LOCALE_NOUSEROVERRIDE   Uses the system default locale settings, rather than custom locale settings.   VAR_TIMEVALUEONLY   Omits the date portion of a VT_DATE and returns only the time. Applies to conversions to or from dates.   VAR_DATEVALUEONLY   Omits the time portion of a VT_DATE and returns only the date. Applies to conversions to or from dates."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Converts the default property of an IDispatch instance to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromDisp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "IDispatch*",
        "name": "pdispIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Converts a Boolean value to a decimal value.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarDecFromBool",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "VARIANT_BOOL",
        "name": "boolIn",
        "description": "The value to convert."
      },
      {
        "in_out": "_Out_",
        "type": "DECIMAL*",
        "name": "pdecOut",
        "description": "The resulting value."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the absolute value of a variant of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyAbs",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The currency variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Adds two variants of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyAdd",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Compares two variants of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyCmp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyRight",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Compares a variant of type currency with a value of type double.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyCmpR8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "double",
        "name": "dblRight",
        "description": "The second variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the integer portion of a variant of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyFix",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The currency variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant. If the variant is negative, then the first negative integer greater than or equal to the variant is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the integer portion of a variant of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyInt",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The currency variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant. If the variant is negative then the first negative integer less than or equal to the variant is returned."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Multiplies two variants of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "If any of the fields of cyLeft or cyRight is left uninitialized, it may default to a large value causing DISP_E_OVERFLOW. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyMul",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant"
      },
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Multiplies a currency value by a 32-bit integer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyMulI4",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "long",
        "name": "lRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Multiplies a currency value by a 64-bit integer.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyMulI8",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "LONG64",
        "name": "lRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Performs a  logical negation on a variant of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyNeg",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The variant to negate."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Rounds a variant of type currency to the specified number of decimal places.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCyRound",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyIn",
        "description": "The variant to round."
      },
      {
        "in_out": "_In_",
        "type": "int",
        "name": "cDecimals",
        "description": "The number of currency decimals."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Subtracts two variants of type currency.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarCySub",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "CY",
        "name": "cyRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPCY",
        "name": "pcyResult",
        "description": "The resulting variant."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Returns a vector, assigning each character in the BSTR to an element of the vector.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VectorFromBstr",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstr",
        "description": "The BSTR to be converted to a vector."
      },
      {
        "in_out": "_Out_",
        "type": "SAFEARRAY**",
        "name": "ppsa",
        "description": "A one-dimensional safearray containing the characters in the BSTR."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 2,
    "description": "Returns a BSTR, assigning each element of the vector to a character in the BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "BstrFromVector",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SAFEARRAY*",
        "name": "psa",
        "description": "The vector to be converted to a BSTR."
      },
      {
        "in_out": "_Out_",
        "type": "BSTR*",
        "name": "pbstr",
        "description": "A BSTR, each character of which is assigned to an element from the vector."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 8,
    "description": "Automatically calls member functions on an interface, given the type information for the interface. You can describe an interface with type information and implement Invoke for the interface using this single call.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": " Any of the ITypeInfo::Invoke errors can also be returned. ",
    "remarks": "The parameter _this is a pointer to an implementation of the interface that is being deferred to. DispInvoke builds a stack frame, coerces parameters using standard coercion rules, pushes them on the stack, and then calls the correct member function in the VTBL. The following code from the Lines sample file Lines.cpp implements Invoke using DispInvoke. This implementation relies on DispInvoke to validate input arguments. To help minimize security risks, include code that performs more robust validation of the input arguments. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "DispInvoke",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "",
        "type": "void*",
        "name": "_this",
        "description": "An implementation of the IDispatch interface described by ptinfo."
      },
      {
        "in_out": "",
        "type": "ITypeInfo*",
        "name": "ptinfo",
        "description": "The type information that describes the interface."
      },
      {
        "in_out": "",
        "type": "DISPID",
        "name": "dispidMember",
        "description": "The member to be invoked. Use GetIDsOfNames or the object's documentation to obtain the DISPID."
      },
      {
        "in_out": "",
        "type": "WORD",
        "name": "wFlags",
        "description": "Flags describing the context of the Invoke call.  ValueMeaning  DISPATCH_METHOD   The member is invoked as a method. If a property has the same name, both this and the DISPATCH_PROPERTYGET flag can be set.    DISPATCH_PROPERTYGET   The member is retrieved as a property or data member.    DISPATCH_PROPERTYPUT   The member is changed as a property or data member.    DISPATCH_PROPERTYPUTREF   The member is changed by a reference assignment, rather than a value assignment. This flag is valid only when the property accepts a reference to an object."
      },
      {
        "in_out": "",
        "type": "DISPPARAMS*",
        "name": "pparams",
        "description": "Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for number of elements in the arrays."
      },
      {
        "in_out": "",
        "type": "VARIANT*",
        "name": "pvarResult",
        "description": "Pointer to where the result is to be stored, or Null if the caller expects no result. This argument is ignored if DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF is specified."
      },
      {
        "in_out": "",
        "type": "EXCEPINFO*",
        "name": "pexcepinfo",
        "description": "Pointer to a structure containing exception information. This structure should be filled in if DISP_E_EXCEPTION is returned."
      },
      {
        "in_out": "",
        "type": "UINT*",
        "name": "puArgErr",
        "description": "The index within rgvarg of the first argument that has an error. Arguments are stored in pdispparams->rgvarg in reverse order, so the first argument is the one with the highest index in the array. This parameter is returned only when the resulting return value is DISP_E_TYPEMISMATCH or DISP_E_PARAMNOTFOUND."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 0,
    "description": "Disables the BSTR caching in OleAut32.dll.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "OLE Automation caches the space allocated for BSTR strings. The SetOaNoCache function immediately disables the oleaut32.dll BSTR caching mechanism. All further allocations and deallocations are passed directly to the process allocator. Cached BSTR values are not released. This function should be called before any BSTR operations take place in the process. BSTR caching can also be disabled at the machine level by setting the environment variable OANOCACHE to 1. ",
    "return_type": "void __cdecl",
    "category": "Conversion and Manipulation",
    "name": "SetOaNoCache",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [],
    "min_client": ""
  },
  {
    "n_arguments": 3,
    "description": "Concatenates two variants of type BSTR and returns the resulting BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. ",
    "remarks": "",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrCat",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrRight",
        "description": "The second variant."
      },
      {
        "in_out": "_Out_",
        "type": "LPBSTR",
        "name": "pbstrResult",
        "description": "The result."
      }
    ],
    "min_client": ""
  },
  {
    "n_arguments": 4,
    "description": "Compares two variants of type BSTR.",
    "library": "OleAut32.lib",
    "min_server": "",
    "header": "OleAuto.h",
    "return_value": "This function can return one of these values.  ",
    "remarks": "This function will not compare arrays or records. ",
    "return_type": "HRESULT",
    "category": "Conversion and Manipulation",
    "name": "VarBstrCmp",
    "is_callback": 0,
    "dll": "OleAut32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrLeft",
        "description": "The first variant."
      },
      {
        "in_out": "_In_",
        "type": "BSTR",
        "name": "bstrRight",
        "description": "The second variant."
      },
      {
        "in_out": "_In_",
        "type": "LCID",
        "name": "lcid",
        "description": "The locale identifier of the program to determine whether UNICODE or ANSI strings are being used."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwFlags",
        "description": "The following are compare results flags.  ValueMeaning  NORM_IGNORECASE 0x00000001   Ignore case.   NORM_IGNORENONSPACE 0x00000002   Ignore nonspace characters.   NORM_IGNORESYMBOLS 0x00000004   Ignore symbols.   NORM_IGNOREWIDTH 0x00000008   Ignore string width.   NORM_IGNOREKANATYPE 0x00000040   Ignore Kana type.   NORM_IGNOREKASHIDA 0x00040000   Ignore Arabic kashida characters."
      }
    ],
    "min_client": ""
  }
]