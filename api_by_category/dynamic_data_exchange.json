[
  {
    "n_arguments": 3,
    "description": "Specifies the quality of service (QOS) a raw Dynamic Data Exchange (DDE) application desires for future DDE conversations it initiates. The specified QOS applies to any conversations started while those settings are in place. A DDE conversation's quality of service lasts for the duration of the conversation; calls to the DdeSetQualityOfService function during a conversation do not affect that conversation's QOS.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "If a quality of service has not been specified for a client window,  \t\t\t\thwndClient, prior to sending a WM_DDE_INITIATE with the  \t\t\t\twParam set to  \t\t\t\thwndClient, the system uses the following default quality of service values for the client window: Use the DdeSetQualityOfService function to associate a different quality of service with the client window. After you change the quality of service, the new settings affect any subsequent conversations that are started. Once an application starts a DDE conversation using a particular quality of service value, it must terminate the conversation and restart the conversation in order to have a different value take effect. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "DdeSetQualityOfService",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hwndClient",
        "description": "Type: HWND A handle to the DDE client window that specifies the source of WM_DDE_INITIATE messages a client will send to start DDE conversations."
      },
      {
        "in_out": "_In_",
        "type": "const SECURITY_QUALITY_OF_SERVICE*",
        "name": "pqosNew",
        "description": "Type: const SECURITY_QUALITY_OF_SERVICE* A pointer to a SECURITY_QUALITY_OF_SERVICE structure for the desired quality of service values."
      },
      {
        "in_out": "_Out_",
        "type": "PSECURITY_QUALITY_OF_SERVICE",
        "name": "pqosPrev",
        "description": "Type: PSECURITY_QUALITY_OF_SERVICE A pointer to a  \t\t\t\t\tSECURITY_QUALITY_OF_SERVICE structure that receives the previous quality of service values associated with the window identified by  \t\t\t\t\thwndClient.  This parameter is optional. If an application has no interest in  \t\t\t\t\thwndClient's previous QOS values, it should set  \t\t\t\t\tpqosPrev to NULL."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Frees the memory specified by the  \t\t\tlParam parameter of a posted Dynamic Data Exchange (DDE) message. An application receiving a posted DDE message should call this function after it has used the UnpackDDElParam function to unpack the  \t\t\tlParam value.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "An application should call this function only for posted DDE messages. This function frees the memory specified by the  \t\t\t\tlParam parameter. It does not free the contents of  \t\t\t\tlParam. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "FreeDDElParam",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT The posted DDE message."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM The  \t\t\t\t\tlParam parameter of the posted DDE message."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Enables a Dynamic Data Exchange (DDE) server application to impersonate a DDE client application's security context. This protects secure server data from unauthorized DDE clients.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError. ",
    "remarks": "An application should call the RevertToSelf function to undo the impersonation set by the ImpersonateDdeClientWindow function. A DDEML application should use the DdeImpersonateClient function. Using this function incorrectly might compromise the security of your program. It is very important to check the return value of the call. If the function fails for any reason, the client is not impersonated and any subsequent client request is made in the security context of the calling process. If the calling process is running as a highly privileged account, such as LocalSystem or as a member of an administrative group, the user may be able to perform actions that would otherwise be disallowed. Therefore, if the call fails or raises an error do not continue execution of the client request. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "ImpersonateDdeClientWindow",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndClient",
        "description": "Type: HWND A handle to the DDE client window to be impersonated. The client window must have established a DDE conversation with the server window identified by the  \t\t\t\t\thWndServer parameter."
      },
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndServer",
        "description": "Type: HWND A handle to the DDE server window. An application must create the server window before calling this function."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Packs a Dynamic Data Exchange (DDE) lParam value into an internal structure used for sharing DDE data between processes.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: LPARAM The return value is the lParam value. ",
    "remarks": "The return value must be posted as the lParam parameter of a DDE message; it must not be used for any other purpose. After the application posts a return value, it need not perform any action to dispose of the lParam parameter. An application should call this function only for posted DDE messages. ",
    "return_type": "LPARAM",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "PackDDElParam",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT The DDE message to be posted."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uiLo",
        "description": "Type: UINT_PTR A value that corresponds to the 16-bit Windows low-order word of an lParam parameter for the DDE message being posted."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uiHi",
        "description": "Type: UINT_PTR A value that corresponds to the 16-bit Windows high-order word of an lParam parameter for the DDE message being posted."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Enables an application to reuse a packed Dynamic Data Exchange (DDE) lParam parameter, rather than allocating a new packed  \t\t\tlParam. Using this function reduces reallocations for applications that pass packed DDE messages.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: LPARAM The return value is the new  \t\t\t\t\t\tlParam value. ",
    "remarks": "The return value must be posted as the  \t\t\t\tlParam parameter of a DDE message; it must not be used for any other purpose. Once the return value is posted, the posting application need not perform any action to dispose of the  \t\t\t\tlParam parameter. Use ReuseDDElParam instead of FreeDDElParam if the  \t\t\t\tlParam parameter will be reused in a responding message. ReuseDDElParam returns the  \t\t\t\tlParam appropriate for reuse. This function allocates or frees  \t\t\t\tlParam parameters as needed, depending on the packing requirements of the incoming and outgoing messages. This reduces reallocations in passing DDE messages. ",
    "return_type": "LPARAM",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "ReuseDDElParam",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM The  \t\t\t\t\tlParam parameter of the posted DDE message being reused."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msgIn",
        "description": "Type: UINT The identifier of the received DDE message."
      },
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msgOut",
        "description": "Type: UINT The identifier of the DDE message to be posted. The DDE message will reuse the packed  \t\t\t\t\tlParam parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uiLo",
        "description": "Type: UINT_PTR The value to be packed into the low-order word of the reused  \t\t\t\t\tlParam parameter."
      },
      {
        "in_out": "_In_",
        "type": "UINT_PTR",
        "name": "uiHi",
        "description": "Type: UINT_PTR The value to be packed into the high-order word of the reused  \t\t\t\t\tlParam parameter."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Unpacks a Dynamic Data Exchange (DDE)lParam value received from a posted DDE message.",
    "library": "User32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Dde.h (include Windows.h)",
    "return_value": "Type: BOOL If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. ",
    "remarks": "PackDDElParam eases the porting of 16-bit DDE applications to 32-bit DDE applications. ",
    "return_type": "BOOL",
    "category": "Dynamic Data Exchange (DDE)",
    "name": "UnpackDDElParam",
    "is_callback": 0,
    "dll": "User32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "UINT",
        "name": "msg",
        "description": "Type: UINT The posted DDE message."
      },
      {
        "in_out": "_In_",
        "type": "LPARAM",
        "name": "lParam",
        "description": "Type: LPARAM The  \t\t\t\t\tlParam parameter of the posted DDE message that was received. The application must free the memory object specified by the  \t\t\t\t\tlParam parameter by calling the FreeDDElParam function."
      },
      {
        "in_out": "_Out_",
        "type": "PUINT_PTR",
        "name": "puiLo",
        "description": "Type: PUINT_PTR A pointer to a variable that receives the low-order word of  \t\t\t\t\tlParam."
      },
      {
        "in_out": "_Out_",
        "type": "PUINT_PTR",
        "name": "puiHi",
        "description": "Type: PUINT_PTR A pointer to a variable that receives the high-order word of  \t\t\t\t\tlParam."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]