[
  {
    "n_arguments": 2,
    "description": "Saves the specified event log to a backup file. The function does not clear the event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The BackupEventLog function fails with the ERROR_PRIVILEGE_NOT_HELD error if the user does not have the SE_BACKUP_NAME privilege. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "BackupEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the open event log. The OpenEventLog function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpBackupFileName",
        "description": "The absolute or relative path of the backup file."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Clears the specified event log, and optionally saves the current copy of the log to a backup file.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. The  ClearEventLog function can fail if the event log is empty or the backup file already exists. ",
    "remarks": "After this function returns, any handles that reference the cleared event log cannot be used to read the log. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "ClearEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log to be cleared. The OpenEventLog function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpBackupFileName",
        "description": "The absolute or relative path of the backup file. If this file already exists, the function fails.     If the lpBackupFileName parameter is NULL, the event log is not backed up."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. For an example, see  Querying for Event Information. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "CloseEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log to be closed. The  OpenEventLog or  OpenBackupEventLog function returns this handle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. For an example, see  Reporting an Event. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "DeregisterEventSource",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log. The  RegisterEventSource function returns this handle."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves information about the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "GetEventLogInformation",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log. The  OpenEventLog or  RegisterEventSource function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwInfoLevel",
        "description": "The level of event log information to return.     \t\t\t\t\tThis parameter can be the following value.     ValueMeaning  EVENTLOG_FULL_INFO   Indicate whether the specified log is full. The lpBuffer parameter will contain an  EVENTLOG_FULL_INFORMATION structure."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "An application-allocated buffer that receives the event log information. The format of this data depends on the value of the dwInfoLevel parameter."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cbBufSize",
        "description": "The size of the lpBuffer buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcbBytesNeeded",
        "description": "The function sets this parameter to the required buffer size for the requested information, regardless of whether the function succeeds. Use this value if the function fails with ERROR_INSUFFICIENT_BUFFER to allocate a buffer of the correct size."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the number of records in the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The oldest record in an event log is not necessarily record number 1. To determine the oldest record number in an event log, use the  GetOldestEventLogRecord function. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "GetNumberOfEventLogRecords",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the open event log. The  OpenEventLog or  OpenBackupEventLog function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "NumberOfRecords",
        "description": "A pointer to a variable that receives the number of records in the specified event log."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the absolute record number of the oldest record in the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The oldest record in an event log is not necessarily record number 1. For more information, see  Event Log Records. For an example, see  Querying for Event Information. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "GetOldestEventLogRecord",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the open event log. The  OpenEventLog or  OpenBackupEventLog function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "PDWORD",
        "name": "OldestRecord",
        "description": "A pointer to a variable that receives the absolute record number of the oldest record in the specified event log."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Enables an application to receive notification when an event is written to the specified event log. When the event is written to the log, the specified event object is set to the signaled state.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The  NotifyChangeEventLog function does not work with remote handles. If the hEventLog parameter is the handle to an event log on a remote computer, NotifyChangeEventLog returns zero, and  GetLastError returns ERROR_INVALID_HANDLE. If the thread is not waiting on the event when the system calls PulseEvent, the thread will not receive the notification. Therefore, you should create a separate thread to wait for notifications. The system will continue to notify you of changes until you close the handle to the event log. To close the event log, use the  CloseEventLog or  DeregisterEventSource function. For an example, see Receiving Event Notification. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "NotifyChangeEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to an event log. The  OpenEventLog  function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEvent",
        "description": "A handle to a manual-reset or auto-reset event object. Use the  CreateEvent function to create the event object."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Opens a handle to a backup event log created by the BackupEventLog function.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a handle to the backup event log. If the function fails, the return value is NULL. To get extended error information, call  GetLastError. ",
    "remarks": "If the backup filename specifies a remote server, the lpUNCServerName parameter must be NULL. When this function is used on Windows Vista and later computers, only backup event logs that were saved with the BackupEventLog function on Windows Vista and later computers can be opened. ",
    "return_type": "HANDLE",
    "category": "Event Logging",
    "name": "OpenBackupEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpUNCServerName",
        "description": "The Universal Naming Convention (UNC) name of the remote server on which this operation is to be performed. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpFileName",
        "description": "The full path of the backup file."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Opens a handle to the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is the handle to an event log. If the function fails, the return value is NULL. To get extended error information, call  GetLastError. ",
    "remarks": "To close the handle to the event log, use the  CloseEventLog function. For an example, see  Querying for Event Information. ",
    "return_type": "HANDLE",
    "category": "Event Logging",
    "name": "OpenEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpUNCServerName",
        "description": "The Universal Naming Convention (UNC) name of the remote server on which the event log is to be opened. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSourceName",
        "description": "The name of the log.  If you specify a custom log and it cannot be found, the event logging service opens the Application log; however, there will be no associated message or category string file."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Reads the specified number of entries from the specified event log. The function can be used to read log entries in chronological or reverse chronological order.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "When this function returns successfully, the read position in the event  log is adjusted by the number of records read. For an example, see  Querying for Event Information. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "ReadEventLog",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log to be read. The  OpenEventLog function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwReadFlags",
        "description": "Use the following flag values to indicate how to read the log file. This parameter must include one of the following values (the flags are mutually exclusive).     ValueMeaning  EVENTLOG_SEEK_READ 0x0002   Begin reading from the record specified in the dwRecordOffset parameter.     This option may  not work with large log files if the function cannot determine the log file's size. For details, see Knowledge Base article, 177199.   EVENTLOG_SEQUENTIAL_READ 0x0001   Read the records sequentially.     \t\t\t\t\t\t\tIf this is the first read operation, the EVENTLOG_FORWARDS_READ EVENTLOG_BACKWARDS_READ flags determines which record is read first.     You must specify one of the following flags to indicate the direction for successive read operations (the flags are mutually exclusive).  ValueMeaning  EVENTLOG_FORWARDS_READ 0x0004   The log is read in chronological order (oldest to newest).     \t\t\t\t\t\t\tThe default.   EVENTLOG_BACKWARDS_READ 0x0008   The log is read in reverse chronological order (newest to oldest)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwRecordOffset",
        "description": "The record number of the log-entry at which the read operation should start. This parameter is ignored unless dwReadFlags includes the EVENTLOG_SEEK_READ flag."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "An application-allocated buffer that will receive one or more EVENTLOGRECORD structures. This parameter cannot be NULL, even if the nNumberOfBytesToRead parameter is zero.     The maximum size of this buffer is 0x7ffff bytes."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nNumberOfBytesToRead",
        "description": "The size of the lpBuffer buffer, in bytes. This function will read as many log entries as will fit in the buffer; the function will not return partial entries."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pnBytesRead",
        "description": "A pointer to a variable that receives the number of bytes read by the function."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pnMinNumberOfBytesNeeded",
        "description": "A pointer to a variable that receives the required size of the lpBuffer buffer. This value is valid only this function returns zero and  GetLastError returns ERROR_INSUFFICIENT_BUFFER."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves a registered handle to the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is a handle to the event log. If the function fails, the return value is NULL. To get extended error information, call  GetLastError. The function returns ERROR_ACCESS_DENIED if lpSourceName specifies the Security event log. ",
    "remarks": "If the source name cannot be found, the event logging service uses the Application log. Although events will be reported , the events will not include descriptions because there are no message and category message files for looking up descriptions related to the event identifiers. To close the handle to the event log, use the  DeregisterEventSource function. For an example, see  Reporting an Event. ",
    "return_type": "HANDLE",
    "category": "Event Logging",
    "name": "RegisterEventSource",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpUNCServerName",
        "description": "The Universal Naming Convention (UNC) name of the remote server on which this operation is to be performed. If this parameter is NULL, the local computer is used."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "lpSourceName",
        "description": "The name of the event source whose handle is to be retrieved. The source name must be a subkey of a log under the Eventlog registry key.  \t\t\t\t\t\tNote that the Security log is for system use only. Note  This string must not contain characters prohibited in XML Attributes, with the exception of XML Escape sequences such as &lt  &gl."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Writes an entry at the end of the specified event log.",
    "library": "Advapi32.lib",
    "min_server": "Windows 2000 Server [desktop apps only]",
    "header": "Winbase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero, indicating that the entry was written to the log. If the function fails, the return value is zero. To get extended error information, call  GetLastError, which returns one of the following extended error codes.  ",
    "remarks": "This function is used to log an event. The entry is written to the end of the configured log for the source identified by the hEventLog parameter. The  ReportEvent function adds the time, the entry's length, and the offsets before storing the entry in the log. To enable the function to add the user name, you must supply the user's SID in the lpUserSid parameter. There are different size limits on the size of the message data that can be logged depending on the version of Windows used by both the client where the application is run and the server where the message is logged. The server is determined by the lpUNCServerName parameter passed to the RegisterEventSource function. Different errors are returned when the size limit is exceeded that depend on the version of Windows. If the string that you log contains %n, where n is an integer value (for example, %1), the event viewer treats it as an insertion string. Because an IPv6 address can contain this character sequence, you must provide a format specifier (!S!) to log an event message that contains an IPv6 address. This specifier tells the formatting code to use the string literally and not perform any further expansions (for example, \"my IPv6 address is: %1!S!\"). For an example, see  Reporting an Event. ",
    "return_type": "BOOL",
    "category": "Event Logging",
    "name": "ReportEvent",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hEventLog",
        "description": "A handle to the event log. The  RegisterEventSource function returns this handle.  As of Windows XP with SP2, this parameter cannot be a handle to the Security log. To write an event to the Security log, use the AuthzReportSecurityEvent function."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wType",
        "description": "The type of event to be logged. This parameter can be one of the following values.     ValueMeaning  EVENTLOG_SUCCESS 0x0000   Information event   EVENTLOG_AUDIT_FAILURE 0x0010   Failure Audit event   EVENTLOG_AUDIT_SUCCESS 0x0008   Success Audit event   EVENTLOG_ERROR_TYPE 0x0001   Error event   EVENTLOG_INFORMATION_TYPE 0x0004   Information event   EVENTLOG_WARNING_TYPE 0x0002   Warning event     For more information about event types, see  Event Types."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wCategory",
        "description": "The event category. This is source-specific information; the category can have any value. For more information, see  Event Categories."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwEventID",
        "description": "The event identifier. The event identifier specifies the entry in the message file associated with the event source. For more information, see Event Identifiers."
      },
      {
        "in_out": "_In_",
        "type": "PSID",
        "name": "lpUserSid",
        "description": "A pointer to the current user's security identifier. This parameter can be NULL if the security identifier is not required."
      },
      {
        "in_out": "_In_",
        "type": "WORD",
        "name": "wNumStrings",
        "description": "The number of insert strings in the array pointed to by the lpStrings parameter. A value of zero indicates that no strings are present."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDataSize",
        "description": "The number of bytes of event-specific raw (binary) data to write to the log. If this parameter is zero, no event-specific data is present."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR*",
        "name": "lpStrings",
        "description": "A pointer to a buffer containing an array of null-terminated strings that are merged into the message before Event Viewer displays the string to the user. This parameter must be a valid pointer (or NULL), even if wNumStrings is zero. Each string is limited to 31,839  characters. Prior to Windows Vista:  Each string is limited to 32K characters."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpRawData",
        "description": "A pointer to the buffer containing the binary data. This parameter must be a valid pointer (or NULL), even if the dwDataSize parameter is zero."
      }
    ],
    "min_client": "Windows 2000 Professional [desktop apps only]"
  }
]