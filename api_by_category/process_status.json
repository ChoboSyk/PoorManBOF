[
  {
    "n_arguments": 1,
    "description": "Removes as many pages as possible from the working set of the specified process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "You can also empty the working set by calling  the SetProcessWorkingSetSize or SetProcessWorkingSetSizeEx function with the dwMinimumWorkingSetSize and dwMaximumWorkingSetSize parameters set to the value (SIZE_T)(-1). Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32EmptyWorkingSet in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as K32EmptyWorkingSet in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32EmptyWorkingSet. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      K32EmptyWorkingSet. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EmptyWorkingSet",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right and the PROCESS_SET_QUOTA access right. For more information, see Process Security and Access Rights."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the load address for each device driver in the system.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "To determine how many device drivers were enumerated by the call to  EnumDeviceDrivers, divide the resulting value in the lpcbNeeded parameter by sizeof(LPVOID). Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as K32EnumDeviceDrivers in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as EnumDeviceDrivers in Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls K32EnumDeviceDrivers. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always call this function as EnumDeviceDrivers. To ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see Enumerating all Device Drivers in the System. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EnumDeviceDrivers",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPVOID*",
        "name": "lpImageBase",
        "description": "An array that receives the list of load addresses for the device drivers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the lpImageBase array, in bytes. If the array is not large enough to store the load addresses, the lpcbNeeded parameter receives the required size of the array."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpcbNeeded",
        "description": "The number of bytes returned in the lpImageBase array."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Calls the callback routine for each installed pagefile in the system.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the         return value is FALSE. To get extended error information, call         GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32EnumPageFiles in Psapi.h and exported in Kernel32.lib and      Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as      EnumPageFiles in Psapi.h and exported in      Psapi.lib and Psapi.dll as a wrapper that calls      K32EnumPageFiles. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions      should always call this function as EnumPageFiles. To      ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS      macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load      Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EnumPageFiles",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PENUM_PAGE_CALLBACK",
        "name": "pCallbackRoutine",
        "description": "A pointer to the routine called for each pagefile. For more information, see        EnumPageFilesProc."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpContext",
        "description": "The user-defined data passed to the callback routine."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the process identifier for each process object in the system.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "It is a good idea to use a large array, because it is hard to predict how many processes there will be at the time you call  EnumProcesses. To determine how many processes were enumerated, divide the pBytesReturned value by sizeof(DWORD). There is no indication given when the buffer is too small to store all process identifiers. Therefore, if pBytesReturned equals cb, consider retrying the call with a larger array. To obtain process handles for the processes whose identifiers you have just obtained, call the OpenProcess function. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as K32EnumProcesses in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as EnumProcesses in Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls K32EnumProcesses. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always call this function as EnumProcesses. To ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see  Enumerating All Processes or  Enumerating All Modules for a Process. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EnumProcesses",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pProcessIds",
        "description": "A pointer to an array that receives the list of process identifiers."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the pProcessIds array, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "DWORD*",
        "name": "pBytesReturned",
        "description": "The number of bytes returned in the pProcessIds array."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves a handle for each module in the specified process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "The EnumProcessModules function is primarily      designed for use by debuggers and similar applications that must extract module information from another process.      If the module list in the target process is corrupted or not yet initialized, or if the module list changes during      the function call as a result of DLLs being loaded or unloaded,      EnumProcessModules may fail or return incorrect      information. It is a good idea to specify a large array of HMODULE values, because it is hard      to predict how many modules there will be in the process at the time you call      EnumProcessModules. To determine if the      lphModule array is too small to hold all module handles for the process, compare the      value returned in lpcbNeeded with the value specified in cb.      If lpcbNeeded is greater than cb, increase the size of the      array and call EnumProcessModules again. To determine how many modules were enumerated by the call to      EnumProcessModules, divide the resulting value in      the lpcbNeeded parameter by      sizeof(HMODULE). The EnumProcessModules function does not      retrieve handles for modules that were loaded with the LOAD_LIBRARY_AS_DATAFILE or similar  flags.      For more information, see LoadLibraryEx. Do not call CloseHandle on any of the handles returned      by this function. The information comes from a snapshot, so there are no resources to be freed. If this function is called from a 32-bit application running on WOW64, it can only enumerate the modules of a      32-bit process. If the process is a 64-bit process, this function fails and the last error code is      ERROR_PARTIAL_COPY (299). To take a snapshot of specified processes and the heaps, modules, and threads used by these processes, use the      CreateToolhelp32Snapshot function. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32EnumProcessModules in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as EnumProcessModules in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32EnumProcessModules. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions      should always call this function as      EnumProcessModules. To ensure correct resolution      of symbols, add Psapi.lib to the TARGETLIBS macro and compile the      program with -DPSAPI_VERSION=1. To use run-time dynamic linking, load      Psapi.dll. For an example, see       Enumerating All Processes or       Enumerating All Modules for a Process. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EnumProcessModules",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process."
      },
      {
        "in_out": "_Out_",
        "type": "HMODULE*",
        "name": "lphModule",
        "description": "An array that receives the list of module handles."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the lphModule array, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpcbNeeded",
        "description": "The number of bytes required to store all module handles in the lphModule        array."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves a handle for each module in the specified process that meets the specified filter criteria.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Psapi.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The EnumProcessModulesEx function is primarily designed for use by debuggers and similar applications that must extract module information from another process. If the module list in the target process is corrupted or not yet initialized, or if the module list changes during the function call as a result of DLLs being loaded or unloaded, EnumProcessModulesEx may fail or return incorrect information. This function is intended primarily for 64-bit applications. If the function is called by a 32-bit application running under WOW64, the dwFilterFlag option is ignored and the function provides the same results as the EnumProcessModules function. It is a good idea to specify a large array of HMODULE values, because it is hard to predict how many modules there will be in the process at the time you call  EnumProcessModulesEx. To determine if the lphModule array is too small to hold all module handles for the process, compare the value returned in lpcbNeeded with the value specified in cb. If lpcbNeeded is greater than cb, increase the size of the array and call  EnumProcessModulesEx again. To determine how many modules were enumerated by the call to  EnumProcessModulesEx, divide the resulting value in the lpcbNeeded parameter by sizeof(HMODULE). The EnumProcessModulesEx function does not retrieve handles for modules that were loaded with the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx. Do not call CloseHandle on any of the handles returned by this function. The information comes from a snapshot, so there are no resources to be freed. To take a snapshot of specified processes and the heaps, modules, and threads used by these processes, use the CreateToolhelp32Snapshot function. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as K32EnumProcessModulesEx in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as EnumProcessModulesEx in Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls K32EnumProcessModulesEx. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always call this function as EnumProcessModulesEx. To ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "EnumProcessModulesEx",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process."
      },
      {
        "in_out": "_Out_",
        "type": "HMODULE*",
        "name": "lphModule",
        "description": "An array that receives the list of module handles."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the lphModule array, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpcbNeeded",
        "description": "The number of bytes required to store all module handles in the lphModule array."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFilterFlag",
        "description": "The filter criteria. This parameter can be one of the following values.  ValueMeaning  LIST_MODULES_32BIT 0x01   List the 32-bit modules.   LIST_MODULES_64BIT 0x02   List the 64-bit modules.   LIST_MODULES_ALL 0x03   List all modules.   LIST_MODULES_DEFAULT 0x0   Use the default behavior."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the base name of the specified device driver.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as K32GetDeviceDriverBaseName in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as GetDeviceDriverBaseName in Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls K32GetDeviceDriverBaseName. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always call this function as GetDeviceDriverBaseName. To ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see       Enumerating all Device Drivers in the System. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetDeviceDriverBaseName",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "ImageBase",
        "description": "The load address of the device driver. This value can be retrieved using the        EnumDeviceDrivers        function."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpBaseName",
        "description": "A pointer to the buffer that receives the base name of the device driver."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpBaseName buffer, in characters. If the buffer is not large enough to store the base name plus the terminating null character, the string is truncated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the path available for the specified device driver.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer, not including any terminating null character. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for the PSAPI functions. The PSAPI version number affects  the name used to call the function and the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as K32GetDeviceDriverFileName in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as GetDeviceDriverFileName in Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls K32GetDeviceDriverFileName. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always call this function as GetDeviceDriverFileName. To ensure correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetDeviceDriverFileName",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "ImageBase",
        "description": "The load address of the device driver."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpFilename",
        "description": "A pointer to the buffer that receives the path to the device driver."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpFilename buffer, in characters. If the buffer is not large enough to store the path plus the terminating null character, the string is truncated."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetMappedFileName in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetMappedFileName in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetMappedFileName. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetMappedFileName. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. In Windows Server 2012, this function is supported by the following technologies.  For an example, see  Obtaining a File Name From a File Handle. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetMappedFileName",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpv",
        "description": "The address to be verified."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpFilename",
        "description": "A pointer to the buffer that receives the name of the memory-mapped file to which the address specified by lpv belongs."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpFilename buffer, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the base name of the specified module.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer, in characters. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The GetModuleBaseName function is primarily designed for use by debuggers and similar applications that must extract module information from another process. If the module list in the target process is corrupted or is not yet initialized, or if the module list changes during the function call as a result of DLLs being loaded or unloaded, GetModuleBaseName may fail or return incorrect information. To retrieve the base name of a module in the current process, use the GetModuleFileName function to retrieve the full module name and then use a function call such as strrchr(szmodulename, '\\\\') to scan to the beginning of the base name within the module name string. This is more efficient and more reliable than calling  GetModuleBaseName  with a handle to the current process. To retrieve the base name of the main executable module for a remote process, use the GetProcessImageFileName or QueryFullProcessImageName function to retrieve the module name and then use the strrchr function as described in the previous paragraph. This is more efficient and more reliable than calling  GetModuleBaseName  with a NULL module handle. The GetModuleBaseName function does not retrieve the base name for modules that were loaded with the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetModuleBaseName in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetModuleBaseName in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetModuleBaseName. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetModuleBaseName. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see  Enumerating All Processes. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetModuleBaseName",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process that contains the module.  The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights."
      },
      {
        "in_out": "_In_opt_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "A handle to the module. If this parameter is NULL, this function  returns the name of the file used to create the calling process."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpBaseName",
        "description": "A pointer to the buffer that receives the base name of the module. If the base name is longer than maximum number of characters specified by the nSize parameter, the base name is truncated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpBaseName buffer, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the fully qualified path for the file containing the specified module.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "The GetModuleFileNameEx function is primarily designed for use by debuggers and similar applications that must extract module information from another process. If the module list in the target process is corrupted or is not yet initialized, or if the module list changes during the function call as a result of DLLs being loaded or unloaded, GetModuleFileNameEx may fail or return incorrect information. To retrieve the name of a module in the current process, use the GetModuleFileName function. This is more efficient and more reliable than calling GetModuleFileNameEx with a handle to the current process. To retrieve the name of the main executable module for a remote process, use the GetProcessImageFileName or QueryFullProcessImageName function. This is more efficient and more reliable than calling the GetModuleFileNameEx function with a NULL module handle. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetModuleFileNameEx in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetModuleFileNameEx in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetModuleFileNameEx. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetModuleFileNameEx. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see       Enumerating All Modules for a Process. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetModuleFileNameEx",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process that contains the module.   The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights. The GetModuleFileNameEx function does not retrieve the path for modules  that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx."
      },
      {
        "in_out": "_In_opt_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "A handle to the module. If this parameter is NULL, GetModuleFileNameEx returns the path of the executable file of the process specified in hProcess."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpFilename",
        "description": "A pointer to a buffer that receives the fully qualified path to the module. If the size of the file name is larger than the value of the nSize parameter, the function succeeds but the file name is truncated and null-terminated."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpFilename buffer, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about the specified module in the  MODULEINFO structure.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "To get information for the calling process, pass the handle returned by GetCurrentProcess. The GetModuleInformation function does not retrieve information for modules that were loaded with the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetModuleInformation in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as K32GetModuleInformation in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetModuleInformation. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      K32GetModuleInformation. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "GetModuleInformation",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process that contains the module. The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights. For more information, see Process Security and Access Rights."
      },
      {
        "in_out": "_In_",
        "type": "HMODULE",
        "name": "hModule",
        "description": "A handle to the module."
      },
      {
        "in_out": "_Out_",
        "type": "LPMODULEINFO",
        "name": "lpmodinfo",
        "description": "A pointer to the  MODULEINFO structure that receives information about the module."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the  MODULEINFO structure, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the performance values contained in the      PERFORMANCE_INFORMATION      structure.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE. To get         extended error information, call GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes version numbers for      the PSAPI functions. The PSAPI version number affects the name used to call the function and the library that a      program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetPerformanceInfo in Psapi.h and exported in Kernel32.lib and Kernel32.dll. If      PSAPI_VERSION is 1, this function is defined as      GetPerformanceInfo in Psapi.h and exported in      Psapi.lib and Psapi.dll as a wrapper that calls K32GetPerformanceInfo. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions      should always call this function as      GetPerformanceInfo. To ensure correct resolution      of symbols, add Psapi.lib to the TARGETLIBS macro and compile the program with      \u00e2\u0080\u0093DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "GetPerformanceInfo",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PPERFORMANCE_INFORMATION",
        "name": "pPerformanceInformation",
        "description": "A pointer to a        PERFORMANCE_INFORMATION        structure that receives the performance information."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the        PERFORMANCE_INFORMATION structure, in        bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves the name of the executable file for the specified process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value specifies the length of the string copied to the buffer. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The file Psapi.dll is installed in the %windir%\\System32 directory. If there is another copy of this DLL on your computer, it can lead to the following error when running applications on your system: \"The procedure entry point GetProcessImageFileName could not be located in the dynamic link library PSAPI.DLL.\" To work around this problem, locate any versions that are not in the %windir%\\System32 directory and delete or rename them, then restart. The GetProcessImageFileName function returns the path in device form, rather than drive letters. For example, the file name C:\\Windows\\System32\\Ctype.nls would look as follows in device form: \\Device\\Harddisk0\\Partition1\\Windows\\System32\\Ctype.nls To retrieve the module name of the current process, use the GetModuleFileName function with a NULL module handle. This is more efficient than calling the GetProcessImageFileName function with a handle to the current process. To retrieve the name of the main executable module for a remote process in win32 path format, use the QueryFullProcessImageName function. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetProcessImageFileName in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetProcessImageFileName in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetProcessImageFileName. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetProcessImageFileName. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "DWORD",
    "category": "Process Status (PSAPI)",
    "name": "GetProcessImageFileName",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION  or PROCESS_QUERY_LIMITED_INFORMATION access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP:  The handle must have the PROCESS_QUERY_INFORMATION access right."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "lpImageFileName",
        "description": "A pointer to a buffer that receives the full path to the executable file."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "nSize",
        "description": "The size of the lpImageFileName buffer, in characters."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about the memory usage of the specified process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetProcessMemoryInfo in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetProcessMemoryInfo in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetProcessMemoryInfo. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetProcessMemoryInfo. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. For an example, see  Collecting Memory Usage Information for a Process. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "GetProcessMemoryInfo",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "Process",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION or PROCESS_QUERY_LIMITED_INFORMATION access right and the PROCESS_VM_READ access right. For more information, see Process Security and Access Rights. Windows Server 2003 and Windows XP:  The handle must have the PROCESS_QUERY_INFORMATION and PROCESS_VM_READ access rights."
      },
      {
        "in_out": "_Out_",
        "type": "PPROCESS_MEMORY_COUNTERS",
        "name": "ppsmemCounters",
        "description": "A pointer to the  PROCESS_MEMORY_COUNTERS or PROCESS_MEMORY_COUNTERS_EX structure that receives information about the memory usage of the process."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the  ppsmemCounters structure, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about the pages that have been added to the working set of the specified      process since the last time this function or the      InitializeProcessForWsWatch function was      called.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. GetLastError returns         ERROR_INSUFFICIENT_BUFFER if the lpWatchInfo buffer is not         large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger         block of memory for the buffer and call again. ",
    "remarks": "The operating system uses one buffer per process to maintain working set change records. If more than one      application (or multiple threads in the same application) calls this function with the same process handle,      neither application will have a complete accounting of the working set changes because each call empties the      buffer. The operating system does not record new change records while it is processing the query (and emptying the      buffer). The function sets the error code to NO_MORE_ENTRIES if a concurrent query is      received while it is processing another query. If the buffer becomes full, no new records are added to the buffer until this function or the      InitializeProcessForWsWatch function is      called. You should call this method with enough frequency to prevent possible data loss. If records are lost, the      array is terminated with a structure whose FaultingPc member is NULL and whose      FaultingVa member is set to the number of records that were lost. Windows Server 2003 and Windows XP:  If records are lost, the array is terminated with a structure whose FaultingPc        member is NULL and whose FaultingVa member is 1. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetWsChanges in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetWsChanges in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetWsChanges. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetWsChanges. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "GetWsChanges",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION        access right. For more information, see        Process Security and Access Rights."
      },
      {
        "in_out": "_Out_",
        "type": "PPSAPI_WS_WATCH_INFORMATION",
        "name": "lpWatchInfo",
        "description": "A pointer to a user-allocated buffer that receives an array of        PSAPI_WS_WATCH_INFORMATION structures.        The array is terminated with a structure whose FaultingPc member is NULL."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the lpWatchInfo buffer, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves extended information about the pages that have been added to the working set of the specified process since the  last time this function or the InitializeProcessForWsWatch function was called.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  the GetLastError function. The GetLastError function returns ERROR_INSUFFICIENT_BUFFER if the lpWatchInfoEx buffer is not large enough to contain all the working set change records; the buffer is returned empty. Reallocate a larger block of memory for the buffer and call again. ",
    "remarks": "The operating system uses one buffer per process to maintain working set change records. If more than one application (or multiple threads in the same application) calls this function with the same process handle, neither application will have a complete accounting of the working set changes because each call empties the buffer. The operating system does not record new change records while it is processing the query (and emptying the buffer). This function sets the error code to NO_MORE_ENTRIES if a concurrent query is received while it is processing another query. If the buffer becomes full, no new records are added to the buffer until this function or the InitializeProcessForWsWatch function is called. You should call GetWsChangesEx with enough frequency to prevent possible data loss. If records are lost, the array is terminated with a structure whose FaultingPc member is NULL and whose FaultingVa member is set to the number of records that were lost. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32GetWsChangesEx in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as GetWsChangesEx in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32GetWsChangesEx. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      GetWsChangesEx. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "GetWsChangesEx",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights."
      },
      {
        "in_out": "_Out_",
        "type": "PPSAPI_WS_WATCH_INFORMATION_EX",
        "name": "lpWatchInfoEx",
        "description": "A pointer to a user-allocated buffer that receives an array of   PSAPI_WS_WATCH_INFORMATION_EX structures. The array is terminated with a structure whose FaultingPc member is NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "PDWORD",
        "name": "cb",
        "description": "The size of the  lpWatchInfoEx buffer, in bytes."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Initiates monitoring of the working set of the specified process. You must call this function before calling the  GetWsChanges function.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32InitializeProcessForWsWatch in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as InitializeProcessForWsWatch in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32InitializeProcessForWsWatch. Programs that must run on earlier versions of Windows as      well as Windows 7 and later versions should always call this function as      InitializeProcessForWsWatch. To ensure correct resolution of symbols,      add Psapi.lib to the TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "InitializeProcessForWsWatch",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION access right. For more information, see Process Security and Access Rights."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves information about the pages currently added to the working set of the specified      process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32QueryWorkingSet in Psapi.h and exported in      Kernel32.lib and Kernel32.dll. If PSAPI_VERSION is 1, this      function is defined as QueryWorkingSet in      Psapi.h and exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32QueryWorkingSet. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions      should always call this function as QueryWorkingSet.      To ensure correct resolution of symbols, add Psapi.lib to the      TARGETLIBS macro and compile the program with      -DPSAPI_VERSION=1. To use run-time dynamic linking, load      Psapi.dll. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "QueryWorkingSet",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and        PROCESS_VM_READ access rights. For more information, see        Process Security and Access Rights."
      },
      {
        "in_out": "_Out_",
        "type": "PVOID",
        "name": "pv",
        "description": "A pointer to the buffer that receives the information. For more information, see         PSAPI_WORKING_SET_INFORMATION. If the buffer pointed to by the pv parameter is not large enough to contain all         working set entries for the target process, the function fails with ERROR_BAD_LENGTH.         In this case, the NumberOfEntries member of the         PSAPI_WORKING_SET_INFORMATION         structure is set to the required number of entries, but the function does not return information about the         working set entries."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the pv buffer, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves extended information about the pages at specific virtual addresses in the address space of      the specified process.",
    "library": "Kernel32.lib on Windows 7 and Windows Server 2008 R2;  Psapi.lib (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.lib on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "min_server": "Windows Server 2008, Windows Server 2003 with SP1 [desktop apps only]",
    "header": "Psapi.h",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "Unlike the QueryWorkingSet function, which is      limited to the working set of the target process, the      QueryWorkingSetEx function can be used to query      addresses that are not in the process working set but are still part of the process, such as AWE and large      pages. Starting with Windows 7 and Windows Server 2008 R2, Psapi.h establishes      version numbers for the PSAPI functions. The PSAPI version number affects the name used to call the function and      the library that a program must load. If PSAPI_VERSION is 2 or greater, this function is defined as      K32QueryWorkingSetEx in Psapi.h and exported in Kernel32.lib      and Kernel32.dll. If PSAPI_VERSION is 1, this function is defined as      QueryWorkingSetEx in Psapi.h and      exported in Psapi.lib and Psapi.dll as a wrapper that calls      K32QueryWorkingSetEx. Programs that must run on earlier versions of Windows as well as Windows 7 and later versions should always      call this function as QueryWorkingSetEx. To ensure      correct resolution of symbols, add Psapi.lib to the TARGETLIBS macro      and compile the program with \"\u00e2\u0080\u0093DPSAPI_VERSION=1\". To use run-time dynamic      linking, load Psapi.dll. For an example, see       Allocating Memory from a NUMA Node. ",
    "return_type": "BOOL",
    "category": "Process Status (PSAPI)",
    "name": "QueryWorkingSetEx",
    "is_callback": 0,
    "dll": "Kernel32.dll on Windows 7 and Windows Server 2008 R2;  Psapi.dll (if PSAPI_VERSION=1) on Windows 7 and Windows Server 2008 R2;  Psapi.dll on Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process. The handle must have the PROCESS_QUERY_INFORMATION and        PROCESS_VM_READ access rights. For more information, see        Process Security and Access Rights."
      },
      {
        "in_out": "_Inout_",
        "type": "PVOID",
        "name": "pv",
        "description": "A pointer to an array of        PSAPI_WORKING_SET_EX_INFORMATION        structures. On input, each item in the array specifies a virtual address of interest. On output, each item in        the array receives information about the corresponding virtual page."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "cb",
        "description": "The size of the pv buffer, in bytes."
      }
    ],
    "min_client": "Windows Vista, Windows XP Professional x64 Edition [desktop apps only]"
  }
]