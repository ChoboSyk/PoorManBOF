[
  {
    "n_arguments": 1,
    "description": "Applications implement the CounterPathCallBack function to process the counter path strings returned by the  Browse dialog box.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "Return ERROR_SUCCESS if the function succeeds. If the function fails due to a transient error, you can return PDH_RETRY and PDH will call your callback immediately. Otherwise, return an appropriate error code. The error code is passed back to the caller of PdhBrowseCounters. ",
    "remarks": "The following members of the  PDH_BROWSE_DLG_CONFIG structure are used to communicate with the callback function:  ",
    "return_type": "PDH_STATUS __stdcall",
    "category": "Performance Counters",
    "name": "CounterPathCallBack",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwArg",
        "description": "User-defined value passed to the callback function by the Browse dialog box. You set this value in the dwCallBackArg member of the  PDH_BROWSE_DLG_CONFIG structure."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Adds the specified counter to the query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "Return ERROR_SUCCESS if the function succeeds. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "If the counter path contains a wildcard character, all counter names matching the wildcard character are added to the query. If a counter instance is specified that does not yet exist,  PdhAddCounter does not report an error condition. Instead, it returns ERROR_SUCCESS. The reason for this behavior is that it is not known whether a nonexistent counter instance has been specified or whether one will exist but has not yet been created. To remove the counter from the query, use the  PdhRemoveCounter function. For an example, see  Browsing Performance Counters or  Reading Performance Data from a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhAddCounter",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle to the query to which you want to add the counter. This handle is returned by the  PdhOpenQuery function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szFullCounterPath",
        "description": "Null-terminated string that contains the counter path. For details on the format of a counter path, see  Specifying a Counter Path. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwUserData",
        "description": "User-defined value. This value becomes part of the counter information. To retrieve this value later, call the PdhGetCounterInfo function and access the dwUserData member of the PDH_COUNTER_INFO structure."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_HCOUNTER*",
        "name": "phCounter",
        "description": "Handle to the counter that was added to the query. You may need to reference this handle in subsequent calls."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Adds the specified language-neutral counter to the query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "Return ERROR_SUCCESS if the function succeeds. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "This function provides a language-neutral way to add performance counters to the query. In contrast, the counter path that you specify in the PdhAddCounter function must be localized. If a counter instance is specified that does not yet exist,  PdhAddEnglishCounter does not report an error condition. Instead, it returns ERROR_SUCCESS. The reason for this behavior is that it is not known whether a nonexistent counter instance has been specified or whether one will exist but has not yet been created. To remove the counter from the query, use the  PdhRemoveCounter function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhAddEnglishCounter",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle to the query to which you want to add the counter. This handle is returned by the  PdhOpenQuery function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szFullCounterPath",
        "description": "Null-terminated string that contains the counter path. For details on the format of a counter path, see  Specifying a Counter Path. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwUserData",
        "description": "User-defined value. This value becomes part of the counter information. To retrieve this value later, call the PdhGetCounterInfo function and access the dwQueryUserData member of the PDH_COUNTER_INFO structure."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_HCOUNTER*",
        "name": "phCounter",
        "description": "Handle to the counter that was added to the query. You may need to reference this handle in subsequent calls."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Binds one or more binary log files together for reading log data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "Returns ERROR_SUCCESS if the function succeeds. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "This function is used with the PDH functions that require a handle to a data source. For a list of these functions, see See Also. You cannot specify more than one comma-delimited (CSV) or tab-delimited (TSV) file. The list can contain only one type of file\u00e2\u0080\u0094you cannot combine multiple file types. To close the bound log files, call the PdhCloseLog function using the log handle. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhBindInputDataSource",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "PDH_HLOG*",
        "name": "phDataSource",
        "description": "Handle to the bound data sources."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szLogFileNameList",
        "description": "Null-terminated string that contains one or more binary log files to bind together. Terminate each log file name with a null-terminator character and the list with one additional null-terminator character. The log file names can contain absolute or relative paths. You cannot specify more than 32 log files. If NULL, the source is a real-time data source."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Displays a  Browse Counters dialog box that the user can use to select one or more counters that they want to add to the query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "Note that the dialog    box can return PDH_DIALOG_CANCELLED if bSingleCounterPerDialog    is FALSE and the user clicks the  Close button, so your error handling would have to account for this. For information on using this function, see Browsing Counters. For an example, see  Browsing Performance Counters. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhBrowseCounters",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PPDH_BROWSE_DLG_CONFIG",
        "name": "pBrowseDlgData",
        "description": "A  PDH_BROWSE_DLG_CONFIG structure that specifies the behavior of the dialog box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Displays a Browse Counters dialog box that the user can use to select one or more counters that they want to add to the query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "Note that the dialog    box can return PDH_DIALOG_CANCELLED if bSingleCounterPerDialog    is FALSE and the user clicks the Close button, so your error handling would have to account for this. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhBrowseCountersH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PPDH_BROWSE_DLG_CONFIG",
        "name": "pBrowseDlgData",
        "description": "A  PDH_BROWSE_DLG_CONFIG_H structure that specifies the behavior of the dialog box."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Calculates the displayable value of two raw counter values.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "To retrieve the current raw counter value from the query, call the PdhGetRawCounterValue function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCalculateCounterFromRawValue",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle to the counter to calculate. The function uses information from the counter to determine how to calculate the value. This handle is returned by the  PdhAddCounter function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormat",
        "description": "Determines the data type of the calculated value. Specify one of the following values.     ValueMeaning  PDH_FMT_DOUBLE   Return the calculated value as a double-precision floating point real.   PDH_FMT_LARGE   Return the calculated value as a 64-bit integer.   PDH_FMT_LONG   Return the calculated value as a long integer.      \t\t\t\t\t\tYou can use the bitwise inclusive OR operator (|) to combine the data type with one of the following scaling factors.  ValueMeaning  PDH_FMT_NOSCALE   Do not apply the counter's scaling factor in the calculation.   PDH_FMT_NOCAP100   Counter values greater than 100 (for example, counter values measuring the processor load on multiprocessor computers) will not be reset to 100. The default behavior is that counter values are capped at a value of 100.   PDH_FMT_1000   Multiply the final value by 1,000."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_RAW_COUNTER",
        "name": "rawValue1",
        "description": "Raw counter value used to compute the displayable counter value. For details, see the PDH_RAW_COUNTER structure."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_RAW_COUNTER",
        "name": "rawValue2",
        "description": "Raw counter value used to compute the displayable counter value. For details, see PDH_RAW_COUNTER. Some counters (for example, rate counters) require two raw values to calculate a displayable value. If the counter type does not require a second value, set this parameter to NULL. This value must be the older of the two raw values."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_FMT_COUNTERVALUE",
        "name": "fmtValue",
        "description": "A  PDH_FMT_COUNTERVALUE structure that receives the calculated counter value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Closes the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS and closes and deletes the query. If the function fails, the return value is a  system error code or a  PDH error code. The following is a possible value.  For an example, see  Writing Performance Data to a Log File. ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCloseLog",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hLog",
        "description": "Handle to the log file to be closed. This handle is returned by the  PdhOpenLog function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "You can specify the following flag.     ValueMeaning  PDH_FLAGS_CLOSE_QUERY   Closes the query associated with the specified log file handle. See the hQuery parameter of PdhOpenLog."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes all counters contained in the specified query, closes all handles related to the query, and frees all memory associated with the query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. Otherwise, the function returns a  system error code or a  PDH error code.  The following is a possible value.  ",
    "remarks": "Do not use the counter handles associated with this query after calling this function. The following shows the syntax if calling this function from Visual Basic.  For an example, see  Browsing Performance Counters or  Reading Performance Data from a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCloseQuery",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle to the query to close. This handle is returned by the  PdhOpenQuery function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Collects the current raw data value for all counters in the specified query and updates the status code of each counter.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. Otherwise, the function returns a  system error code or a  PDH error code.  The following are possible values.  ",
    "remarks": "Call this function when you want to collect counter data for the counters in the query. PDH stores the raw counter values for the current and previous collection. If you want to retrieve the current raw counter value, call the PdhGetRawCounterValue function. If you want to compute a displayable value for the counter value, call the PdhGetFormattedCounterValue function. If the counter path contains a wildcard for the instance name, instead call the PdhGetRawCounterArray and PdhGetFormattedCounterArray functions, respectively. When  PdhCollectQueryData is called for data from one counter instance only and the counter instance does not exist, the function returns PDH_NO_DATA. However, if data from more than one counter is queried,  PdhCollectQueryData may return ERROR_SUCCESS even if one of the counter instances does not yet exist. This is because it is not known if the specified counter instance does not exist, or if it will exist but has not yet been created. In this case, call  PdhGetRawCounterValue or  PdhGetFormattedCounterValue for each of the counter instances of interest to determine whether they exist. The following shows the syntax if calling this function from Visual Basic.  For an example, see  Browsing Performance Counters or  Reading Performance Data from a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCollectQueryData",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle of the query for which you want to collect data. The PdhOpenQuery function returns this handle."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Uses a separate thread to collect the current raw data value for all counters in the specified query. The function then signals the application-defined event and waits the specified time interval before returning.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "PDH terminates the thread when you call the PdhCloseQuery function. If you call PdhCollectQueryDataEx more than once, each subsequent call terminates the thread from the previous call and then starts a new thread. When  PdhCollectQueryDataEx is called for data from one counter instance only and the counter instance does not exist, the function returns PDH_NO_DATA. However, if data from more than one counter is queried,  PdhCollectQueryDataEx may return ERROR_SUCCESS even if one of the counter instances does not yet exist. This is because it is not known if the specified counter instance does not exist, or if it will exist but has not yet been created. In this case, call  PdhGetRawCounterValue or  PdhGetFormattedCounterValue for each of the counter instances of interest to determine whether they exist. PDH stores the raw counter values for the current and previous collection. If you want to retrieve the current raw counter value, call the PdhGetRawCounterValue function. If you want to compute a displayable value for the counter value, call the PdhGetFormattedCounterValue. If the counter path contains a wildcard for the instance name, instead call the PdhGetRawCounterArray and PdhGetFormattedCounterArray functions, respectively. The following example shows how to use this function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCollectQueryDataEx",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle of the query. The query identifies the counters that you want to collect. The  PdhOpenQuery function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwIntervalTime",
        "description": "Time interval to wait, in seconds."
      },
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hNewDataEvent",
        "description": "Handle to the event that you want PDH to signal after the time interval expires. To create an event object, call the  CreateEvent function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Collects the current raw data value for all counters in the specified query and updates the status code of each counter.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. Otherwise, the function returns a  system error code or a  PDH error code.  The following are possible values.  ",
    "remarks": "Call this function when you want to collect counter data for the counters in the query. PDH stores the raw counter values for the current and previous collection. If you want to retrieve the current raw counter value, call the PdhGetRawCounterValue function. If you want to compute a displayable value for the counter value, call the PdhGetFormattedCounterValue. If the counter path contains a wildcard for the instance name, instead call the PdhGetRawCounterArray and PdhGetFormattedCounterArray functions, respectively. When  PdhCollectQueryDataEx is called for data from one counter instance only, and the counter instance does not exist, the function returns PDH_NO_DATA. However, if data from more than one counter is queried,  PdhCollectQueryDataEx may return ERROR_SUCCESS even if one of the counter instances does not yet exist. This is because it is not known if the specified counter instance does not exist, or if it will exist but has not yet been created. In this case, call  the PdhGetRawCounterValue or  PdhGetFormattedCounterValue function for each of the counter instances of interest to determine whether they exist. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhCollectQueryDataWithTime",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_Inout_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle of the query for which you want to collect data. The PdhOpenQuery function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pllTimeStamp",
        "description": "Time stamp when the first counter value in the query was retrieved. The time is specified as FILETIME."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Computes statistics for a counter from an array of raw values.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhComputeCounterStatistics",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter for which you want to compute statistics. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormat",
        "description": "Determines the data type of the formatted value. Specify one of the following values.     ValueMeaning  PDH_FMT_DOUBLE   Return the calculated value as a double-precision floating point real.   PDH_FMT_LARGE   Return the calculated value as a 64-bit integer.   PDH_FMT_LONG   Return the calculated value as a long integer.      \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t\tYou can use the bitwise inclusive OR operator (|) to combine the data type with one of the following scaling factors.  ValueMeaning  PDH_FMT_NOSCALE   Do not apply the counter's scaling factors in the calculation.   PDH_FMT_NOCAP100   Counter values greater than 100 (for example, counter values measuring the processor load on multiprocessor computers) will not be reset to 100. The default behavior is that counter values are capped at a value of 100.   PDH_FMT_1000   Multiply the final value by 1,000."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFirstEntry",
        "description": "Zero-based index of the first raw counter value to use to begin the calculations. The index value must point to the oldest entry in the buffer. The  function starts at this entry and scans through the buffer, wrapping at the last entry back to the beginning of the buffer and up to the dwFirstEntry-1 entry, which is assumed to be the newest or most recent data."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNumEntries",
        "description": "Number of raw counter values in the lpRawValueArray buffer."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_RAW_COUNTER",
        "name": "lpRawValueArray",
        "description": "Array of  PDH_RAW_COUNTER structures that contain dwNumEntries entries."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_STATISTICS",
        "name": "data",
        "description": "A  PDH_STATISTICS structure that receives the counter statistics."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Connects to the specified computer.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "Typically, applications do not call this function and instead the connection is made when the application adds the counter to the query. However, you can use this function if you want to include more than the local computer in the Select counters from computer list on the Browse Counters dialog box. For details, see the PDH_BROWSE_DLG_CONFIG structure. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhConnectMachine",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer to connect to. If NULL, PDH connects to the local computer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enumerates the names of the log sets within the DSN.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszLogSetNameList to NULL and pcchBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumLogSetNames",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the DSN."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszLogSetNameList",
        "description": "Caller-allocated buffer that receives the list of null-terminated log set names. The list is terminated with a null-terminator character. Set to NULL if the pcchBufferLength parameter is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Size of the mszLogSetNameList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns a list of the computer names associated with counters in a log file. The computer names were either specified when adding counters to the query or when calling the PdhConnectMachine function. The computers listed include those that are currently connected and online, in addition to those that are offline or not returning performance data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszMachineNameList to NULL and pcchBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumMachines",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the name of a log file. The function enumerates the names of the computers whose counter data is in the log file. If NULL, the function enumerates the list of computers that were specified when adding counters to a real time query or when calling the PdhConnectMachine function."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszMachineNameList",
        "description": "Caller-allocated buffer to receive the list of null-terminated strings that contain the computer names. The list is terminated with two null-terminator characters. Set to NULL if pcchBufferLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Size of the mszMachineNameList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns a list of the computer names associated with counters in a log file. The computer names were either specified when adding counters to the query or when calling the PdhConnectMachine function. The computers listed include those that are currently connected and online, in addition to those that are offline or not returning performance data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszMachineNameList to NULL and pcchBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumMachinesH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszMachineNameList",
        "description": "Caller-allocated buffer to receive the list of null-terminated strings that contain the computer names. The list is terminated with two null-terminator characters. Set to NULL if pcchBufferLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Size of the mszMachineNameList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Returns the specified object's counter and instance names that exist on the specified computer or in the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set the buffers to NULL and the sizes to 0), and the second time to get the data. Consecutive calls to this function will return identical lists of counters and instances, because  PdhEnumObjectItems will always query the list of performance objects defined by the last call to  PdhEnumObjects or PdhEnumObjectItems. To refresh the list of performance objects, call  PdhEnumObjects with a bRefresh flag value of TRUE before calling  PdhEnumObjectItems again. The order of the instance and counter names is undetermined. For an example, see  Enumerating Process Objects. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumObjectItems",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the name of the log file used to enumerate the counter and instance names. If NULL, the function uses the computer specified in     the szMachineName parameter to enumerate the names."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer that contains the counter and instance names that you want to enumerate.    Include the leading slashes in the computer name, for example, \\\\computername. If the szDataSource parameter is NULL, you can set szMachineName to NULL to specify the local computer."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szObjectName",
        "description": "Null-terminated string that specifies the name of the object whose counter and instance names you want to enumerate."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszCounterList",
        "description": "Caller-allocated buffer that receives a list of null-terminated counter names provided by the specified object. The list contains unique counter names. The list is terminated by two NULL characters. Set to NULL if the pcchCounterListLengthparameter is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchCounterListLength",
        "description": "Size of the mszCounterList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszInstanceList",
        "description": "Caller-allocated buffer that receives a list of null-terminated instance names provided by the specified object. The list contains unique instance names. The list is terminated by two NULL characters. Set to NULL if pcchInstanceListLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchInstanceListLength",
        "description": "Size of the mszInstanceList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. If the specified object does not support variable instances, then the returned value will be zero. If the specified object does support variable instances, but does not currently have any instances, then the value returned is 2, which is the size of an empty MULTI_SZ list string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDetailLevel",
        "description": "Detail level of the performance items to return. All items that are of the specified detail level or less will be returned (the levels are listed in increasing order). This parameter can be one of the following values.     ValueMeaning  PERF_DETAIL_NOVICE   Novice user level of detail.   PERF_DETAIL_ADVANCED   Advanced user level of detail.    PERF_DETAIL_EXPERT   Expert user level of detail.    PERF_DETAIL_WIZARD   System designer level of detail."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 9,
    "description": "Returns the specified object's counter and instance names that exist on the specified computer or in the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set the buffers to NULL and the sizes to 0), and the second time to get the data. Consecutive calls to this function will return identical lists of counters and instances, because  PdhEnumObjectItemsH will always query the list of performance objects defined by the last call to  PdhEnumObjectsH or PdhEnumObjectItemsH. To refresh the list of performance objects, call  PdhEnumObjectsH with a bRefresh flag value of TRUE before calling  PdhEnumObjectItemsH again. The order of the instance and counter names is undetermined. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumObjectItemsH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer that contains the counter and instance names that you want to enumerate.    Include the leading slashes in the computer name, for example, \\\\computername. If the szDataSource parameter is NULL, you can set szMachineName to NULL to specify the local computer."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szObjectName",
        "description": "Null-terminated string that specifies the name of the object whose counter and instance names you want to enumerate."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszCounterList",
        "description": "Caller-allocated buffer that receives a list of null-terminated counter names provided by the specified object. The list contains unique counter names. The list is terminated by two NULL characters. Set to NULL if the pcchCounterListLength parameter is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchCounterListLength",
        "description": "Size of the mszCounterList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszInstanceList",
        "description": "Caller-allocated buffer that receives a list of null-terminated instance names provided by the specified object. The list contains unique instance names. The list is terminated by two NULL characters. Set to NULL if the pcchInstanceListLength parameter is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchInstanceListLength",
        "description": "Size of the mszInstanceList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. If the specified object does not support variable instances, then the returned value will be zero. If the specified object does support variable instances, but does not currently have any instances, then the value returned is 2, which is the size of an empty MULTI_SZ list string."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDetailLevel",
        "description": "Detail level of the performance items to return. All items that are of the specified detail level or less will be returned (the levels are listed in increasing order). This parameter can be one of the following values.     ValueMeaning  PERF_DETAIL_NOVICE   Novice user level of detail.   PERF_DETAIL_ADVANCED   Advanced user level of detail.    PERF_DETAIL_EXPERT   Expert user level of detail.    PERF_DETAIL_WIZARD   System designer level of detail."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "This parameter must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Returns a list of objects available on the specified computer or in the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszObjectList to NULL and pcchBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumObjects",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the name of the log file used to enumerate the performance objects. If NULL, the function uses the computer specified in     the szMachineName parameter to enumerate the names."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to enumerate the performance objects.    Include the leading slashes in the computer name, for example, \\\\computername. If the szDataSource parameter is NULL, you can set szMachineName to NULL to specify the local computer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszObjectList",
        "description": "Caller-allocated buffer that receives the list of object names. Each object name in this list is terminated by a null character. The list is terminated with two null-terminator characters. Set to NULL if the pcchBufferLength parameter is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Size of the mszObjectList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. Windows XP:  Add one to the required buffer size."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDetailLevel",
        "description": "Detail level of the performance items to return. All items that are of the specified detail level or less will be returned (the levels are listed in increasing order). This parameter can be one of the following values.     ValueMeaning  PERF_DETAIL_NOVICE   Novice user level of detail.   PERF_DETAIL_ADVANCED   Advanced user level of detail.    PERF_DETAIL_EXPERT   Expert user level of detail.    PERF_DETAIL_WIZARD   System designer level of detail."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRefresh",
        "description": "Indicates if the cached object list should be automatically refreshed. Specify one of the following values.   If you call this function twice, once to get the size of the list and a second time to get the actual list, set this parameter to TRUE on the first call and FALSE on the second call. If both calls are TRUE, the second call may also return PDH_MORE_DATA because the object data may have changed between calls.  ValueMeaning  TRUE   The object cache is automatically refreshed before the objects are returned.   FALSE   Do not automatically refresh the cache."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Returns a list of objects available on the specified computer or in the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszObjectList to NULL and pcchBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhEnumObjectsH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to enumerate the performance objects.    Include the leading slashes in the computer name, for example, \\\\computername. If szDataSource is NULL, you can set szMachineName to NULL to specify the local computer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszObjectList",
        "description": "Caller-allocated buffer that receives the list of object names. Each object name in this list is terminated by a null character. The list is terminated with two null-terminator characters. Set to NULL if pcchBufferLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Size of the mszObjectList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. Windows XP:  Add one to the required buffer size."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDetailLevel",
        "description": "Detail level of the performance items to return. All items that are of the specified detail level or less will be returned (the levels are listed in increasing order). This parameter can be one of the following values.     ValueMeaning  PERF_DETAIL_NOVICE   Novice user level of detail.   PERF_DETAIL_ADVANCED   Advanced user level of detail.    PERF_DETAIL_EXPERT   Expert user level of detail.    PERF_DETAIL_WIZARD   System designer level of detail."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bRefresh",
        "description": "Indicates if the cached object list should be automatically refreshed. Specify one of the following values.   If you call this function twice, once to get the size of the list and a second time to get the actual list, set this parameter to TRUE on the first call and FALSE on the second call. If both calls are TRUE, the second call may also return PDH_MORE_DATA because the object data may have changed between calls.  ValueMeaning  TRUE   The object cache is automatically refreshed before the objects are returned.   FALSE   Do not automatically refresh the cache."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Examines the specified computer (or local computer if none is specified) for counters and instances of counters that match the wildcard strings in the counter path.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszExpandedPathList to NULL and pcchPathListLength to 0), and the second time to get the data. The general counter path format is as follows: \\\\computer\\object(parent/instance#index)\\counter The parent, instance, index, and counter components of the counter path may contain either a valid name or a wildcard character. The computer, parent, instance, and index components are not necessary for all counters. The counter paths that you must use is determined by the counter itself. For example, the LogicalDisk object has an instance index, so you must provide the #index, or a wildcard. Therefore, you could use the following format: \\LogicalDisk(*/*#*)\\* In comparison, the Process object does not require an instance index. Therefore, you could use the following format: \\Process(*)\\ID Process The following is a list of the possible formats: If a wildcard character is specified in the parent name, all instances of the specified object that match the specified instance and counter fields will be returned. If a wildcard character is specified in the instance name, all instances of the specified object and parent object will be returned if all instance names corresponding to the specified index match the wildcard character. If a wildcard character is specified in the counter name, all counters of the specified object are returned. Partial counter path string matches (for example, \"pro*\") are not supported. The following example demonstrates how to this function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhExpandCounterPath",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szWildCardPath",
        "description": "Null-terminated string that contains the counter path to expand. The function searches the computer specified in the path for matches. If the path does not specify a computer, the function searches the local computer. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszExpandedPathList",
        "description": "Caller-allocated buffer that receives the list of expanded counter paths that match the wildcard specification in szWildCardPath. Each counter path in this list is terminated by a null character. The list is terminated with two NULL characters. Set to NULL if pcchPathListLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchPathListLength",
        "description": "Size of the mszExpandedPathList buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. Note  You must add one to the required size on Windows XP."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Examines the specified computer or log file and returns those counter paths that match the given counter path which contains wildcard characters.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszExpandedPathList to NULL and pcchPathListLength to 0), and the second time to get the data. PdhExpandWildCardPath differs from  PdhExpandCounterPath in the following ways: The general counter path format is as follows: \\\\computer\\object(parent/instance#index)\\counter The parent, instance, index, and counter components of the counter path may contain either a valid name or a wildcard character. The computer, parent, instance, and index components are not necessary for all counters. The following is a list of the possible formats: Use an asterisk (*) as the wildcard character, for example, \\object(*)\\counter. If a wildcard character is specified in the parent name, all instances of the specified object that match the specified instance and counter fields will be returned. For example, \\object(*/instance)\\counter. If a wildcard character is specified in the instance name, all instances of the specified object and parent object will be returned if all instance names corresponding to the specified index match the wildcard character. For example, \\object(parent/*)\\counter. If the object does not contain an instance, an error occurs. If a wildcard character is specified in the counter name, all counters of the specified object are returned. Partial counter path string matches (for example, \"pro*\") are  supported. Prior to Windows Vista:  Partial wildcard matches are not supprted. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhExpandWildCardPath",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that contains the name of a log file. The function uses the performance objects and counters defined in the log file to expand the path specified in the szWildCardPath parameter.  If NULL, the function searches the computer specified in szWildCardPath."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szWildCardPath",
        "description": "Null-terminated string that specifies the counter path to expand. The maximum length of a counter path is PDH_MAX_COUNTER_PATH. If the szDataSource parameter is NULL, the function searches the computer specified in the path for matches. If the path does not specify a computer, the function searches the local computer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszExpandedPathList",
        "description": "Caller-allocated buffer that receives a list of null-terminated counter paths that match the wildcard specification in the szWildCardPath. The list is terminated by two NULL characters. Set to NULL if pcchPathListLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchPathListLength",
        "description": "Size of the mszExpandedPathList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. Note  You must add one to the required size on Windows XP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that indicate which wildcard characters not to expand. You can specify one or more flags.     ValueMeaning  PDH_NOEXPANDCOUNTERS   Do not expand the counter name if the path contains a wildcard character for counter name.   PDH_NOEXPANDINSTANCES   Do not expand the instance name if the path contains a wildcard character for parent instance, instance name, or instance index."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Examines the specified computer or log file and returns those counter paths that match the given counter path which contains wildcard characters.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set mszExpandedPathList to NULL and pcchPathListLength to 0), and the second time to get the data. PdhExpandWildCardPathH differs from  PdhExpandCounterPath in the following ways: The general counter path format is as follows: \\\\computer\\object(parent/instance#index)\\counter The parent, instance, index, and counter components of the counter path may contain either a valid name or a wildcard character. The computer, parent, instance, and index components are not necessary for all counters. The following is a list of the possible formats: Use an asterisk (*) as the wildcard character, for example, \\object(*)\\counter. If a wildcard character is specified in the parent name, all instances of the specified object that match the specified instance and counter fields will be returned. For example, \\object(*/instance)\\counter. If a wildcard character is specified in the instance name, all instances of the specified object and parent object will be returned if all instance names corresponding to the specified index match the wildcard character. For example, \\object(parent/*)\\counter. If a wildcard character is specified in the counter name, all counters of the specified object are returned. Partial counter path string matches (for example, \"pro*\") are  supported. Prior to Windows Vista:  Partial wildcard matches are not supprted. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhExpandWildCardPathH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szWildCardPath",
        "description": "Null-terminated string that specifies the counter path to expand. The maximum length of a counter path is PDH_MAX_COUNTER_PATH. If hDataSource is a real time data source, the function searches the computer specified in the path for matches. If the path does not specify a computer, the function searches the local computer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "mszExpandedPathList",
        "description": "Caller-allocated buffer that receives a list of null-terminated counter paths that match the wildcard specification in the szWildCardPath. The list is terminated by two NULL characters. Set to NULL if pcchPathListLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchPathListLength",
        "description": "Size of the mszExpandedPathList buffer, in TCHARs. If zero on input and the object exists, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer. Note  You must add one to the required size on Windows XP."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Flags that indicate which wildcard characters not to expand. You can specify one or more flags.     ValueMeaning  PDH_NOEXPANDCOUNTERS   Do not expand the counter name if the path contains a wildcard character for counter name.   PDH_NOEXPANDINSTANCES   Do not expand the instance name if the path contains a wildcard character for parent instance, instance name, or instance index."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Computes a displayable value for the given raw counter values.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhFormatFromRawValue",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwCounterType",
        "description": "Type of counter. Typically, you call PdhGetCounterInfo to retrieve the counter type at the time you call PdhGetRawCounterValue to retrieve the raw counter value. For a list of counter types, see the Counter Types section of the Windows Server 2003 Deployment Kit. (The constant values are defined in Winperf.h.) Note that you cannot specify base types, for example, PERF_LARGE_RAW_BASE."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormat",
        "description": "Determines the data type of the calculated value. Specify one of the following values.     ValueMeaning  PDH_FMT_DOUBLE   Return the calculated value as a double-precision floating point real.   PDH_FMT_LARGE   Return the calculated value as a 64-bit integer.   PDH_FMT_LONG   Return the calculated value as a long integer.      \t\t\t\t\t\tYou can use the bitwise inclusive OR operator (|) to combine the data type with one of the following scaling factors.  ValueMeaning  PDH_FMT_NOSCALE   Do not apply the counter's scaling factor in the calculation.   PDH_FMT_NOCAP100   Counter values greater than 100 (for example, counter values measuring the processor load on multiprocessor computers) will not be reset to 100. The default behavior is that counter values are capped at a value of 100.   PDH_FMT_1000   Multiply the final value by 1,000."
      },
      {
        "in_out": "_In_",
        "type": "LONGLONG*",
        "name": "pTimeBase",
        "description": "Pointer to the time base, if necessary for the format conversion. If time base information is not necessary for the format conversion, the value of this parameter is ignored. To retrieve the time base of the counter, call PdhGetCounterTimeBase."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_RAW_COUNTER",
        "name": "rawValue1",
        "description": "Raw counter value used to compute the displayable counter value. For details, see PDH_RAW_COUNTER."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_RAW_COUNTER",
        "name": "rawValue2",
        "description": "Raw counter value used to compute the displayable counter value. For details, see PDH_RAW_COUNTER. Some counters, for example, rate counters, require two raw values to calculate a displayable value. If the counter type does not require a second value, set this parameter to NULL. This value must be the older of the two raw values."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_FMT_COUNTERVALUE",
        "name": "fmtValue",
        "description": "A  PDH_FMT_COUNTERVALUE structure that receives the calculated counter value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves information about a counter, such as data size, counter type, path, and user-supplied data values.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set lpBuffer to NULL and pdwBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetCounterInfo",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter from which you want to retrieve information. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "BOOLEAN",
        "name": "bRetrieveExplainText",
        "description": "Determines whether explain text is retrieved. If you set this parameter to TRUE, the explain text for the counter is retrieved. If you set this parameter to FALSE, the field in the returned buffer is NULL."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pdwBufferSize",
        "description": "Size of the lpBuffer buffer, in bytes. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_COUNTER_INFO",
        "name": "lpBuffer",
        "description": "Caller-allocated buffer that receives a  PDH_COUNTER_INFO structure. The structure is variable-length, because the string data is appended to the end of the fixed-format portion of the structure. This is done so that all data is returned in a single buffer allocated by the caller. Set to NULL if pdwBufferSize is zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the time base of the specified counter.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "If you use  \t\t\tthe  PdhFormatFromRawValue function to calculate a displayable value instead of calling the PdhCalculateCounterFromRawValue function, you must call the  PdhGetCounterTimeBase function to retrieve the time base. Each counter that returns time-based performance data has a time base defined for it. The time base of a counter is the number of times a counter samples data per second. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetCounterTimeBase",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle to the counter. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "pTimeBase",
        "description": "Time base that specifies the number of performance values a counter samples per second."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Determines the time range, number of entries and, if applicable, the size of the buffer containing the performance data from the specified input source.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDataSourceTimeRange",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the name of a log file from which the time range information is retrieved."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pdwNumEntries",
        "description": "Number of structures in the pInfo buffer. This function collects information for only one time range, so the value is typically 1, or zero if an error occurred."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_TIME_INFO",
        "name": "pInfo",
        "description": "A  PDH_TIME_INFO structure that receives the time range."
      },
      {
        "in_out": "_In_",
        "type": "LPDWORD",
        "name": "pdwBufferSize",
        "description": "Size of the PDH_TIME_INFO structure, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Determines the time range, number of entries and, if applicable, the size of the buffer containing the performance data from the specified input source.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDataSourceTimeRangeH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pdwNumEntries",
        "description": "Number of structures in the pInfo buffer. This function collects information for only one time range, so the value is typically 1, or zero if an error occurred."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_TIME_INFO",
        "name": "pInfo",
        "description": "A  PDH_TIME_INFO structure that receives the time range. The information spans all bound log files."
      },
      {
        "in_out": "_In_",
        "type": "LPDWORD",
        "name": "pdwBufferSize",
        "description": "Size of the PDH_TIME_INFO structure, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the name of the default counter for the specified object. This name can be used to set the initial counter selection in the Browse Counter dialog box.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szDefaultCounterName to NULL and pcchBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDefaultPerfCounter",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Should be NULL.     \t\t\t\t\tIf you specify a log file, szDefaultCounterName will be a null string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to verify the object name. If NULL, the local computer is used to verify the object name."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szObjectName",
        "description": "Null-terminated string that specifies the name of the object whose default counter name you want to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szDefaultCounterName",
        "description": "Caller-allocated buffer that receives the null-terminated default counter name. Set to NULL if pcchBufferSize is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferSize",
        "description": "Size of the szDefaultCounterName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Retrieves the name of the default counter for the specified object. This name can be used to set the initial counter selection in the Browse Counter dialog box.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szDefaultCounterName to NULL and pcchBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDefaultPerfCounterH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Should be NULL.     \t\t\t\t\tIf you specify a log file handle, szDefaultCounterName will be a null string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to verify the object name. If NULL, the local computer is used to verify the name."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szObjectName",
        "description": "Null-terminated string that specifies the name of the object whose default counter name you want to retrieve."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szDefaultCounterName",
        "description": "Caller-allocated buffer that receives the null-terminated default counter name. Set to NULL if pcchBufferSize is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferSize",
        "description": "Size of the szDefaultCounterName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the name of the default object. This name can be used to set the initial object selection in the Browse Counter dialog box.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szDefaultObjectName to NULL and pcchBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDefaultPerfObject",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Should be NULL.     \t\t\t\t\tIf you specify a log file, the szDefaultObjectName parameter will be a null string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to verify the object name. If NULL, the local computer is used to verify the name."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szDefaultObjectName",
        "description": "Caller-allocated buffer that receives the null-terminated default object name. Set to NULL if the pcchBufferSize parameter is zero. Note that PDH always returns Processor for the default object name."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferSize",
        "description": "Size of the szDefaultObjectName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves the name of the default object. This name can be used to set the initial object selection in the Browse Counter dialog box.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szDefaultObjectName to NULL and pcchBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDefaultPerfObjectH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Should be NULL.     \t\t\t\t\tIf you specify a log file handle, szDefaultObjectName will be a null string."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer used to verify the object name. If NULL, the local computer is used to verify the name."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szDefaultObjectName",
        "description": "Caller-allocated buffer that receives the null-terminated default object name. Set to  NULL if pcchBufferSize is zero. Note that PDH always returns Processor for the default object name."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferSize",
        "description": "Size of the szDefaultObjectName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Returns the version of the currently installed Pdh.dll file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values. ",
    "remarks": "This function is used to help in determining the functionality that the currently installed version of Pdh.dll supports. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetDllVersion",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwVersion",
        "description": "Pointer to a variable that receives the version of Pdh.dll. This parameter can be one of the following values.     ValueMeaning  PDH_CVERSION_WIN50   The file version is a legacy operating system.   PDH_VERSION   The file version is Windows XP."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Returns an array of formatted counter values. Use this function when you want to format the counter values of a counter that contains a wildcard character for the instance name.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set ItemBuffer to NULL and lpdwBufferSize to 0), and the second time to get the data. The data for the counter is locked for the duration of the call to  PdhGetFormattedCounterArray to prevent any changes during the processing of the call. The following example shows how to use this function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetFormattedCounterArray",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle to the counter whose current value you want to format. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormat",
        "description": "Determines the data type of the formatted value. Specify one of the following values.     ValueMeaning  PDH_FMT_DOUBLE   Return data as a double-precision floating point real.   PDH_FMT_LARGE   Return data as a 64-bit integer.   PDH_FMT_LONG   Return data as a long integer.      \t\t\t\t\t\t \t\t\t\t\t\tYou can use the bitwise inclusive OR operator (|) to combine the data type with one of the following scaling factors.  ValueMeaning  PDH_FMT_NOSCALE   Do not apply the counter's default scaling factor.   PDH_FMT_NOCAP100   Counter values greater than 100 (for example, counter values measuring the processor load on multiprocessor computers) will not be reset to 100. The default behavior is that counter values are capped at a value of 100.   PDH_FMT_1000   Multiply the actual value by 1,000."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferSize",
        "description": "Size of the ItemBuffer buffer, in bytes. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwBufferCount",
        "description": "Number of counter values in the ItemBuffer buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_FMT_COUNTERVALUE_ITEM",
        "name": "ItemBuffer",
        "description": "Caller-allocated buffer that receives an array of  PDH_FMT_COUNTERVALUE_ITEM structures; the structures contain the counter values. Set to NULL if lpdwBufferSize is zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Computes a displayable value for the specified counter.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "The data for the counter is locked (protected) for the duration of the call to  PdhGetFormattedCounterValue to prevent any changes during the processing of the call. Reading the data (calling this function successfully) clears the data-changed flag for the counter. Some counters, such as rate counters, require two counter values in order to compute a displayable value. In this case you must call PdhCollectQueryData twice before calling  PdhGetFormattedCounterValue. For more information, see Collecting Performance Data. If  the specified counter instance does not exist, the method will return PDH_INVALID_DATA and set the CStatus member of the  PDH_FMT_COUNTERVALUE structure to PDH_CSTATUS_NO_INSTANCE. Prior to Windows Server 2003:  The format call may fail for counters that require only a single value when the instance is not found. Try calling the query and format calls again. If the format call fails the second time, the instance is not found. As an alternative, you can call the PdhEnumObjects function with the refresh option set to TRUE to refresh the counter instances before querying and formatting the counter data. For an example, see  Browsing Performance Counters or  Reading Performance Data from a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetFormattedCounterValue",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter for which you want to compute a displayable value. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFormat",
        "description": "Determines the data type of the formatted value. Specify one of the following values.     ValueMeaning  PDH_FMT_DOUBLE   Return data as a double-precision floating point real.   PDH_FMT_LARGE   Return data as a 64-bit integer.   PDH_FMT_LONG   Return data as a long integer.      \t\t\t\t\t\t \t\t\t\t\t\tYou can use the bitwise inclusive OR operator (|) to combine the data type with one of the following scaling factors.  ValueMeaning  PDH_FMT_NOSCALE   Do not apply the counter's default scaling factor.   PDH_FMT_NOCAP100   Counter values greater than 100 (for example, counter values measuring the processor load on multiprocessor computers) will not be reset to 100. The default behavior is that counter values are capped at a value of 100.   PDH_FMT_1000   Multiply the actual value by 1,000."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwType",
        "description": "Receives the counter type. For a list of counter types, see the Counter Types section of the Windows Server 2003 Deployment Kit. This parameter is optional."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_FMT_COUNTERVALUE",
        "name": "pValue",
        "description": "A  PDH_FMT_COUNTERVALUE structure that receives the counter value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Returns the size of the specified log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "If the log file handle points to multiple bound log files, the size is the sum of all the log files. If the log file is a SQL log file, the llSize parameter is the number of records in the log file. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetLogFileSize",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hLog",
        "description": "Handle to the log file. The  PdhOpenLog or PdhBindInputDataSource function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "LONGLONG*",
        "name": "llSize",
        "description": "Size of the log file, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Returns an array of raw values from the specified counter. \t\tUse this function when you want to retrieve the raw counter values of a counter that contains a wildcard character for the instance name.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set ItemBuffer to NULL and lpdwBufferSize to 0), and the second time to get the data. The data for the counter is locked for the duration of the call to  PdhGetRawCounterArray to prevent any changes during processing of the call. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetRawCounterArray",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter for whose current raw instance values you want to retrieve. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "lpdwBufferSize",
        "description": "Size of the ItemBuffer buffer, in bytes. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwItemCount",
        "description": "Number of raw counter values in the ItemBuffer buffer."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_RAW_COUNTER_ITEM",
        "name": "ItemBuffer",
        "description": "Caller-allocated buffer that receives the array of  PDH_RAW_COUNTER_ITEM structures; the structures contain the raw instance counter values.  Set to NULL if lpdwBufferSize is zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns the current raw value of the counter.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "The data for the counter is locked (protected) for the duration of the call to  PdhGetRawCounterValue to prevent any changes during processing of the call. If  the specified counter instance does not exist, this function will return ERROR_SUCCESS and the CStatus member of the  PDH_RAW_COUNTER structure will contain PDH_CSTATUS_NO_INSTANCE. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhGetRawCounterValue",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter from which to retrieve the current raw value. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpdwType",
        "description": "Receives the counter type. For a list of counter types, see the Counter Types section of the Windows Server 2003 Deployment Kit. This parameter is optional."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_RAW_COUNTER",
        "name": "pValue",
        "description": "A  PDH_RAW_COUNTER structure that receives the counter value."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Determines if the specified query is a real-time query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the query is a real-time query, the return value is TRUE. If the query is not a real-time query, the return value is FALSE. ",
    "remarks": "The term real-time as used in the description of this function does not imply the standard meaning of the term real-time. Instead, it describes the collection of performance data from a source providing current information (for example, the registry or a WMI provider) rather than from a log file. ",
    "return_type": "BOOL",
    "category": "Performance Counters",
    "name": "PdhIsRealTimeQuery",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle to the query. The  PdhOpenQuery function returns this handle."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Returns the counter index corresponding to the specified counter name.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following is a possible value.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhLookupPerfIndexByName",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer where the specified counter is located. The computer name can be specified by the DNS name or the IP address. If NULL, the function uses the local computer."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szNameBuffer",
        "description": "Null-terminated string that contains the counter name."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pdwIndex",
        "description": "Index of the counter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Returns the performance object name or counter name corresponding to the specified index.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szNameBuffer to NULL and pcchNameBufferSize to 0), and the second time to get the data. Windows XP:  You must specify a buffer and buffer size. The function sets pcchNameBufferSize to either the required size or the size of the buffer that was used. If the buffer is too small, the function returns PDH_INSUFFICIENT_BUFFER instead of PDH_MORE_DATA. The maximum string size in bytes is PDH_MAX_COUNTER_NAME * sizeof(TCHAR). The index value that you specify must match one of the index values associated with the objects or counters that were loaded on the computer. The index/name value pairs are stored in the Counters registry value in the following registry location. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhLookupPerfNameByIndex",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szMachineName",
        "description": "Null-terminated string that specifies the name of the computer where the specified performance object or counter is located. The computer name can be specified by the DNS name or the IP address. If NULL, the function uses the local computer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwNameIndex",
        "description": "Index of the performance object or counter."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szNameBuffer",
        "description": "Caller-allocated buffer that receives the null-terminated name of the performance object or counter. Set to NULL if pcchNameBufferSize is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchNameBufferSize",
        "description": "Size of the szNameBuffer buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates a full counter path using the members specified in the PDH_COUNTER_PATH_ELEMENTS structure.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set szFullPathBuffer to NULL and pcchBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhMakeCounterPath",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_COUNTER_PATH_ELEMENTS*",
        "name": "pCounterPathElements",
        "description": "A  PDH_COUNTER_PATH_ELEMENTS structure that contains the members used to make up the path. Only the szObjectName and szCounterName members are required, the others are optional.    If the instance name member is NULL, the path will not contain an instance reference and the szParentInstance and dwInstanceIndex members will be ignored."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szFullPathBuffer",
        "description": "Caller-allocated buffer that receives a null-terminated counter path. The maximum length of a counter path is PDH_MAX_COUNTER_PATH. Set to NULL if pcchBufferSize is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferSize",
        "description": "Size of the szFullPathBuffer buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Format of the input and output counter values. You can specify one of the following values.     ValueMeaning  PDH_PATH_WBEM_RESULT    Converts a PDH path to the WMI class and property name format.   PDH_PATH_WBEM_INPUT    Converts the WMI class and property name to a PDH path.   0   Returns the path in the PDH format, for example, \\\\computer\\object(parent/instance#index)\\counter."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Opens the specified log file for reading or writing.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "To use this function to write performance data to a log file, you must open a query using  PdhOpenQuery and add the desired counters to it, before calling this function. Newer operating systems can read log files that were generated on older operating systems; however, log files that were created on Windows Vista and later operating systems cannot be read on earlier operating systems. For an example, see  Writing Performance Data to a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhOpenLog",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szLogFileName",
        "description": "Null-terminated string that specifies the name of the log file to open. The name can contain an absolute or relative path.     If the lpdwLogType parameter is PDH_LOG_TYPE_SQL, specify the name of the log file in the form, SQL:DataSourceName!LogFileName."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwAccessFlags",
        "description": "Type of access to use to open the log file. Specify one of the following values.     ValueMeaning  PDH_LOG_READ_ACCESS   Open the log file for reading.   PDH_LOG_WRITE_ACCESS   Open a new log file for writing.    PDH_LOG_UPDATE_ACCESS   Open an existing log file for writing.      \t\t\t\t\t\t \t\t\t\t\t\tYou can use the bitwise inclusive  OR operator (|) to combine the access type with one or more of the following creation flags.  ValueMeaning  PDH_LOG_CREATE_NEW   Creates a new log file with the specified name.   PDH_LOG_CREATE_ALWAYS   Creates a new log file with the specified name. If the log file already exists, the function removes the existing log file before creating the new file.   PDH_LOG_OPEN_EXISTING   Opens an existing log file with the specified name. If a log file with the specified name does not exist, this is equal to PDH_LOG_CREATE_NEW.   PDH_LOG_OPEN_ALWAYS   Opens an existing log file with the specified name or creates a new log file with the specified name.   PDH_LOG_OPT_CIRCULAR   Creates a circular log file with the specified name. When the file reaches the value of the dwMaxSize parameter, data wraps to the beginning of the log file. You can specify this flag only if the lpdwLogType parameter is PDH_LOG_TYPE_BINARY.   PDH_LOG_USER_STRING   Used with PDH_LOG_TYPE_TSV to write the user caption or log file description indicated by the szUserString parameter of PdhUpdateLog or PdhOpenLog. The user caption or log file description is written  as the  last column in the first line of the text log."
      },
      {
        "in_out": "_In_",
        "type": "LPDWORD",
        "name": "lpdwLogType",
        "description": "Type of log file to open. This parameter can be one of the following values.     ValueMeaning  PDH_LOG_TYPE_UNDEFINED   Undefined log file format. If specified, PDH determines the log file type. You cannot specify this value if the dwAccessFlags parameter is PDH_LOG_WRITE_ACCESS.   PDH_LOG_TYPE_CSV   Text file containing column headers in the first line, and individual data records in each subsequent line. The fields of each data  record are comma-delimited. The first line also contains information about the format of the file, the PDH version used to create the log file, and the names and paths of each of the counters.   PDH_LOG_TYPE_SQL   The data source of the log file is an SQL database.   PDH_LOG_TYPE_TSV   Text file containing column headers in the first line, and individual data records in each subsequent line. The fields of each data  record are tab-delimited. The first line also contains information about the format of the file, the PDH version used to create the log file, and the names and paths of each of the counters.   PDH_LOG_TYPE_BINARY   Binary log file format."
      },
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Specify a query handle if you are writing query data to a log file. The  PdhOpenQuery function returns this handle.     This parameter is ignored and should be NULL if you are reading from the log file."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMaxSize",
        "description": "Maximum size of the log file, in bytes. Specify the maximum size if you want to limit the file size or if dwAccessFlags specifies PDH_LOG_OPT_CIRCULAR; otherwise, set to 0. For circular log files, you must specify a value large enough to hold at least one sample.   Sample size depends on data being collected. However, specifying a value of at least one megabyte will cover most samples."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szUserCaption",
        "description": "Null-terminated string that specifies the user-defined caption of the log file. A log file caption generally describes the contents of the log file. When an existing log file is opened, the value of this parameter is ignored."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_HLOG*",
        "name": "phLog",
        "description": "Handle to the opened log file."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a new query that is used to manage the collection of performance data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. For an example, see  Reading Performance Data from a Log File or  Writing Performance Data to a Log File. ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhOpenQuery",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szDataSource",
        "description": "Null-terminated string that specifies the name of the log file from which to retrieve performance data. If NULL, performance data is collected from a real-time data source."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwUserData",
        "description": "User-defined value to associate with this query. To retrieve the user data later, call  PdhGetCounterInfo and access the dwQueryUserData member of PDH_COUNTER_INFO."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_HQUERY*",
        "name": "phQuery",
        "description": "Handle to the query. You use this handle in subsequent calls."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Creates a new query that is used to manage the collection of performance data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhOpenQueryH",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to a data source returned by the  PdhBindInputDataSource function."
      },
      {
        "in_out": "_In_",
        "type": "DWORD_PTR",
        "name": "dwUserData",
        "description": "User-defined value to associate with this query. To retrieve the user data later, call  the PdhGetCounterInfo function and access the dwQueryUserData member of PDH_COUNTER_INFO."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_HQUERY*",
        "name": "phQuery",
        "description": "Handle to the query. You use this handle in subsequent calls."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Parses the elements of the counter path and stores the results in the PDH_COUNTER_PATH_ELEMENTS structure.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set pCounterPathElements to NULL and pdwBufferSize to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhParseCounterPath",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szFullPathBuffer",
        "description": "Null-terminated string that contains the counter path to parse. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      },
      {
        "in_out": "_Out_",
        "type": "PDH_COUNTER_PATH_ELEMENTS*",
        "name": "pCounterPathElements",
        "description": "Caller-allocated buffer that receives a  PDH_COUNTER_PATH_ELEMENTS structure. The structure contains pointers to the individual string elements of the path referenced by the szFullPathBuffer parameter. The function appends the strings to the end of the PDH_COUNTER_PATH_ELEMENTS structure. The allocated buffer should be large enough for the structure and the strings. Set to NULL if pdwBufferSize is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pdwBufferSize",
        "description": "Size of the pCounterPathElements buffer, in bytes. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Reserved. Must be zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 6,
    "description": "Parses the elements of an instance string.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set the buffers to NULL and buffer sizes to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhParseInstanceName",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szInstanceString",
        "description": "Null-terminated string that specifies the instance string to parse into individual components. This string can contain the following formats, and is less than MAX_PATH characters in length:      instance instance#index parent/instance parent/instance#index"
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szInstanceName",
        "description": "Caller-allocated buffer that receives the null-terminated instance name. Set to NULL if pcchInstanceNameLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchInstanceNameLength",
        "description": "Size of the szInstanceName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szParentName",
        "description": "Caller-allocated buffer that receives the null-terminated name of the parent instance, if one is specified. Set to NULL if pcchParentNameLength is zero."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchParentNameLength",
        "description": "Size of the szParentName buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "lpIndex",
        "description": "Index value of the instance. If an index entry is not present in the string, then this value is zero. This parameter can be NULL."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Reads the information in the specified binary trace log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "You should call this function twice, the first time to get the required buffer size (set pRawLogRecord to NULL and pdwBufferLength to 0), and the second time to get the data. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhReadRawLogRecord",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hLog",
        "description": "Handle to the log file. The  PdhOpenLog  or PdhBindInputDataSource function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "FILETIME",
        "name": "ftRecord",
        "description": "Time stamp of the record to be read. If the time stamp does not match a record in the log file, the function returns the record that has a time stamp closest to (but not greater than) the given time stamp."
      },
      {
        "in_out": "_Out_",
        "type": "PPDH_RAW_LOG_RECORD",
        "name": "pRawLogRecord",
        "description": "Caller-allocated buffer that receives a  PDH_RAW_LOG_RECORD structure; the structure contains the log file record information. Set to NULL if pdwBufferLength is zero."
      },
      {
        "in_out": "_In_",
        "type": "LPDWORD",
        "name": "pdwBufferLength",
        "description": "Size of the pRawLogRecord buffer, in TCHARs. If zero on input, the function returns PDH_MORE_DATA and sets this parameter to the required buffer size. If the buffer is larger than the required size, the function sets this parameter to the actual size of the buffer that was used. If the specified size on input is greater than zero but less than the required size, you should not rely on the returned size to reallocate the buffer."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes a counter from a query.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code.  The following is a possible value.  ",
    "remarks": "Do not use the counter handle after removing the counter from the query. The following shows the syntax if calling this function from Visual Basic.  ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhRemoveCounter",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter to remove from its query. The  PdhAddCounter function returns this handle."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Displays a dialog window that prompts the user to specify the source of the performance data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhSelectDataSource",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HWND",
        "name": "hWndOwner",
        "description": "Owner of the dialog window. This can be NULL if there is no owner (the desktop becomes the owner)."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwFlags",
        "description": "Dialog boxes that will be displayed to prompt for the data source. This parameter can be one of the following values.     ValueMeaning  PDH_FLAGS_FILE_BROWSER_ONLY   Display the file browser only. Set this flag when you want to prompt for the name and location of a log file only.   0   Display the data source selection dialog box. The dialog box lets the user select performance data from either a log file or a real-time source. If the user specified that data is to be collected from a log file, a file browser is displayed for the user to specify the name and location of the log file."
      },
      {
        "in_out": "_Out_",
        "type": "LPTSTR",
        "name": "szDataSource",
        "description": "Caller-allocated buffer that receives a null-terminated string that contains the name of a log file that the user selected. The log file name is truncated to the size of the buffer if the buffer is too small. If the user selected a real time source, the buffer is empty."
      },
      {
        "in_out": "_Inout_",
        "type": "LPDWORD",
        "name": "pcchBufferLength",
        "description": "Maximum size of the szDataSource buffer, in TCHARs."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the scale factor that is applied to the calculated value of the specified counter when you request the formatted counter value. If the PDH_FMT_NOSCALE flag is set, then this scale factor is ignored.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhSetCounterScaleFactor",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HCOUNTER",
        "name": "hCounter",
        "description": "Handle of the counter to apply the scale factor to. The  PdhAddCounter function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "LONG",
        "name": "lFactor",
        "description": "Power of ten by which to multiply the calculated value before returning it. ..."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Specifies the source of the real-time data.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following is a possible value.  ",
    "remarks": "The term real-time as used in the description of this function does not imply the standard meaning of the term real-time. Instead, it describes the collection of performance data from a source providing current information (for example, the registry or a WMI provider) rather than from a log file. If you want to query real-time data from WMI, you must call PdhSetDefaultRealTimeDataSource to set the default real-time data source. You must call this function before calling any other PDH API function. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhSetDefaultRealTimeDataSource",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwDataSourceId",
        "description": "Source of the performance data. This parameter can be one of the following values.     ValueMeaning  DATA_SOURCE_REGISTRY   The data source is the registry interface. This is the default.   DATA_SOURCE_WBEM   The data source is a WMI provider."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Limits the samples that you can read from a log file to those within the specified time range, inclusively.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "When the end of the specified time range or the end of the log file is reached, the  PdhCollectQueryData function will return PDH_NO_MORE_DATA. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhSetQueryTimeRange",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HQUERY",
        "name": "hQuery",
        "description": "Handle to the query. The  PdhOpenQuery function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "PPDH_TIME_INFO",
        "name": "pInfo",
        "description": "A  PDH_TIME_INFO structure that specifies the time range. Specify the time as local file time. The end time must be greater than the start time. You can specify 0 for the start time and the maximum 64-bit value for the end time if you want to read all records."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Collects counter data for the current query and writes the data to the log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "If you are updating a log file from another log file, the comments from the other log file do not migrate. For an example, see  Writing Performance Data to a Log File. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhUpdateLog",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hLog",
        "description": "Handle of a single log file to update. The  PdhOpenLog function returns this handle."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szUserString",
        "description": "Null-terminated string that contains a user-defined comment to add to the data record. The string can not be empty."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Synchronizes the information in the log file catalog with the performance data in the log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "The log file catalog serves as an index to the performance data records in the log file, providing for faster searches for individual records in the file. Catalogs should be updated when the data collection process is complete and the log file has been closed. The catalog can be updated during data collection, but doing this may disrupt the process of logging the performance data because updating the catalogs can be time consuming. Perfmon, CSV, and TSV log files do not have catalogs. Specifying a handle to these log file types will result in a return value of PDH_NOT_IMPLEMENTED. ",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhUpdateLogFileCatalog",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "PDH_HLOG",
        "name": "hLog",
        "description": "Handle to the log file containing the file catalog to update. The  PdhOpenLog function."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Validates that the counter is present on the computer specified in the counter path.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhValidatePath",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szFullCounterPath",
        "description": "Null-terminated string that contains the counter path to validate. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Validates that the specified counter is present on the computer or in the log file.",
    "library": "Pdh.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Pdh.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code or a  PDH error code. The following are possible values.  ",
    "remarks": "",
    "return_type": "PDH_STATUS",
    "category": "Performance Counters",
    "name": "PdhValidatePathEx",
    "is_callback": 0,
    "dll": "Pdh.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "PDH_HLOG",
        "name": "hDataSource",
        "description": "Handle to the data source. The PdhOpenLog and PdhBindInputDataSource functions return this handle.  To validate that the counter is present on the local computer, specify NULL (this is the same as calling PdhValidatePath)."
      },
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "szFullPathBuffer",
        "description": "Null-terminated string that specifies the counter path to validate. The maximum length of a counter path is PDH_MAX_COUNTER_PATH."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Adds performance counter specifications to the specified query.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The pCounters parameter should point to a sequence of PERF_COUNTER_IDENTIFIER blocks. Each PERF_COUNTER_IDENTIFIER block consists of a PERF_COUNTER_IDENTIFIER structure, optionally followed by a null-terminated UTF-16LE instance  name string, followed by padding that makes the size of the block a multiple of 8 bytes. For each PERF_COUNTER_IDENTIFIER block: PerfAddCounters attempts to add one counter specification to the query for each PERF_COUNTER_IDENTIFIER block, and updates the Status member of the PERF_COUNTER_IDENTIFIER structure in each block with the result of the attempt. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfAddCounters",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "A handle to the query to which you want to add performance counter specifications."
      },
      {
        "in_out": "_Inout_",
        "type": "PPERF_COUNTER_IDENTIFIER",
        "name": "pCounters",
        "description": "A pointer to the performance counter specifications that you want to add."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbCounters",
        "description": "The size of the buffer that the pCounters parameter specifies, in bytes."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Closes a query handle that you opened by calling PerfOpenQueryHandle.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfCloseQueryHandle",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "A handle to the query that you want to close"
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Removes the specified performance counter specifications from the specified query.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The pCounters parameter should point to a sequence of PERF_COUNTER_IDENTIFIER blocks. Each PERF_COUNTER_IDENTIFIER block consists of a PERF_COUNTER_IDENTIFIER structure, optionally followed by a null-terminated UTF-16LE instance  name string, followed by padding that makes the size of the block a multiple of 8 bytes. Configure each PERF_COUNTER_IDENTIFIER block in the same way as described in the Remarks for PerfAddCounters. PerfDeleteCounters attempts to remove one counter specification from the query for each PERF_COUNTER_IDENTIFIER block,  and updates the Status member of the PERF_COUNTER_IDENTIFIER structure in each block with the result of the attempt. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfDeleteCounters",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "A handle to the query from which you want to remove performance counter specifications."
      },
      {
        "in_out": "_Inout_",
        "type": "PPERF_COUNTER_IDENTIFIER",
        "name": "pCounters",
        "description": "A pointer to the performance counter specifications that you want to remove."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbCounters",
        "description": "The size of the buffer that the pCounters parameter specifies, in bytes."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the counter set identifiers of the counter sets that are registered on the    specified system.    Counter set identifiers are globally unique identifiers (GUIDs).",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": " For other types of failures, the return value is a  system error code. ",
    "remarks": "",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfEnumerateCounterSet",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "szMachine",
        "description": "The name of the machine for which to get the counter set identifiers. If NULL, the function retrieves the counter set identifiers for the local machine."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPGUID",
        "name": "pCounterSetIds",
        "description": "A pointer to a buffer that has enough space to receive the number of GUIDs that the cCounterSetIds parameter specifies. May be NULL if    cCounterSetIds is 0."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cCounterSetIds",
        "description": "The size of the buffer that the pCounterSetIds parameter specifies, measured in GUIDs."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcCounterSetIdsActual",
        "description": "The size of the buffer actually required to get the counter set identifiers. The meaning depends on the value that the function    returns.  Function  Return ValueMeaning of pcCounterSetIdsActual ERROR_SUCCESSThe number of      GUIDs that the function stored in the buffer that pCounterSetIds specified.  ERROR_NOT_ENOUGH_MEMORYThe      size (in GUIDs) of the buffer required. Enlarge the buffer to the required      size and call the function again.     OtherThe value is undefined and should not be used."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Gets the names and identifiers of the active instances of a counter set on the    specified system.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": " For other types of failures, the return value is a  system error code. ",
    "remarks": "The information about the active instances of the specified counter set is  written to the buffer that pInstances specifies as a sequence of PERF_INSTANCE_HEADER blocks. The size in bytes of    the sequence of blocks is written to  pcbInstancesActual. Each PERF_INSTANCE_HEADER block consists    of a PERF_INSTANCE_HEADER structure, immediately followed by a null-terminated UTF-16LE    instance name, followed by padding so that the size of the    PERF_INSTANCE_HEADER block is a multiple of 8 bytes. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfEnumerateCounterSetInstances",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "szMachine",
        "description": "The name of the machine for which to get the information about the active instances of the counter set  that the pCounterSet parameter specifies. If NULL, the function retrieves information about the active instances of the specified counter set for the local machine."
      },
      {
        "in_out": "_In_",
        "type": "LPCGUID",
        "name": "pCounterSetId",
        "description": "The counter set identifier of the counter set for which you want to get the information about of the active instances."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPERF_INSTANCE_HEADER",
        "name": "pInstances",
        "description": "Pointer to a buffer that is large enough to receive the amount of data that the cbInstances parameter specifies. May be    NULL if cbInstances is 0."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbInstances",
        "description": "The size of the buffer that the  pInstances parameter specifies,  in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcbInstancesActual",
        "description": "The size of the buffer actually required to get the information about of the active instances. The meaning depends on the value that the function    returns.  Function  Return ValueMeaning of pcbInstancesActual ERROR_SUCCESSThe number of      bytes of information about the active instances of the specified counter set that the function stored in the buffer that pInstances specified.  ERROR_NOT_ENOUGH_MEMORYThe      size of the buffer required to store the information about the active instances of the counter set on the specified machine, in bytes. Enlarge the buffer to the required      size and call the function again.     OtherThe value is undefined and should not be used."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Creates a handle that references a query on the specified system. A query is a list of counter specifications.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "Use PerfAddCounters and PerfDeleteCounters to add or remove counter specifications to the list. Use PerfQueryCounterInfo to get the counter specifications currently in the list and to determine the indexes at which the data for each counter will be returned by  PerfQueryCounterData. Use PerfQueryCounterData to retrieve the values of the counters that match the counter specifications. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfOpenQueryHandle",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "szMachine",
        "description": "The name of the machine for which you want to get the query handle."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "The handle to the query. Call PerfCloseQueryHandle to close ths handle when you no longer need it."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the values of the performance counters that match the counter specifications in the specified query.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": " For other types of failures, the return value is a  system error code. ",
    "remarks": "The information about the performance counter values is  written to the buffer that pCounterBlock specifies as a PERF_DATA_HEADER block, which consists PERF_DATA_HEADER structure followed by a sequence of PERF_COUNTER_HEADER blocks. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfQueryCounterData",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "A handle to a query for the counter specifications of the performance counters for which you want to get the values."
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPERF_DATA_HEADER",
        "name": "pCounterBlock",
        "description": "A pointer to a buffer that has enough space to receive the amount of  data that the cbCounterBlock parameter specifies, in bytes. May be NULL if    cbCounterBlock is 0."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbCounterBlock",
        "description": "The size of the buffer that the pCounterBlock parameter specifies, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcbCounterBlockActual",
        "description": "The size of the buffer actually required to get the performance counter values. The meaning depends on the value that the function    returns.  Function  Return ValueMeaning of pcbCounterBlockActual ERROR_SUCCESSThe number of      bytes of performance counter values that the function stored in the buffer that pCounterBlock specified.  ERROR_NOT_ENOUGH_MEMORYThe      size of the buffer required to store the performance counter values, in bytes. Enlarge the buffer to the required      size and call the function again.     OtherThe value is undefined and should not be used."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Gets the counter specifications in the specified query.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": " For other types of failures, the return value is a  system error code. ",
    "remarks": "The information about the counter specifications is written to the buffer that pCounters specifies as a sequence of PERF_COUNTER_IDENTIFIER blocks. The size in bytes of    the sequence of blocks is written to  pcbCountersActual. Each PERF_COUNTER_IDENTIFIER block consists    of a PERF_COUNTER_IDENTIFIER structure, optionally followed by a null-terminated UTF-16LE    instance name, followed by padding so that the size of the    PERF_COUNTER_IDENTIFIER block is a multiple of 8 bytes.   The size of each block, including the PERF_COUNTER_IDENTIFIER structure, instance name, and padding, is determined by the Size member of the PERF_COUNTER_IDENTIFIER structure, which will be a multiple of 8 bytes. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfQueryCounterInfo",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hQuery",
        "description": "A handle to the query for which you want to get the counter specifications"
      },
      {
        "in_out": "_Out_opt_",
        "type": "PPERF_COUNTER_IDENTIFIER",
        "name": "pCounters",
        "description": "Pointer to a buffer that is large enough to hold the amount of data that the cbCounters parameter specifies, in bytes. May be NULL if cbCounters is 0."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbCounters",
        "description": "The size of the pCounters buffer, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcbCountersActual",
        "description": "The size of the buffer actually required to get the counter specifications. The meaning depends on the value that the function    returns.  Function  Return ValueMeaning of pcbCountersActual ERROR_SUCCESSThe number of      bytes of information about the counter specifications that the function stored in the buffer that pCounters specified.  ERROR_NOT_ENOUGH_MEMORYThe      size of the buffer required to store the information about the counter specifications, in bytes. Enlarge the buffer to the required      size and call the function again.     OtherThe value is undefined and should not be used."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 7,
    "description": "Gets information about a counter set on the specified system.",
    "library": "AdvAPI32.lib",
    "min_server": "Windows Server 2016 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": " For other types of failures, the return value is a  system error code. ",
    "remarks": "See  PerfRegInfoType  for the types of data that you can request and    the formats of the data provided for each type of request. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfQueryCounterSetRegistrationInfo",
    "is_callback": 0,
    "dll": "AdvAPI32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCWSTR",
        "name": "szMachine",
        "description": "The name of the machine for which to get the information about the counter set  that the pCounterSet parameter specifies. If NULL, the function retrieves information about the specified counter set for the local machine."
      },
      {
        "in_out": "_In_",
        "type": "LPCGUID",
        "name": "pCounterSetId",
        "description": "The counter set identifier of the counter set for which you want to get information."
      },
      {
        "in_out": "",
        "type": "PerfRegInfoType",
        "name": "requestCode",
        "description": "The type of information that you want to get about the counter set. See PerfRegInfoType for a list of possible values."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "requestLangId",
        "description": "The preferred locale identifier for the strings that contain the requested information if requestCode is PERF_REG_COUNTERSET_NAME_STRING,    PERF_REG_COUNTERSET_HELP_STRING, PERF_REG_COUNTER_NAME_STRINGS, or    PERF_REG_COUNTER_HELP_STRINGS. The counter identifier of the counter for which you want data, if requestCode is PERF_REG_COUNTER_STRUCT.  Set to 0 for all other values of requestCode."
      },
      {
        "in_out": "_Out_opt_",
        "type": "LPBYTE",
        "name": "pbRegInfo",
        "description": "Pointer to a buffer that is large enough to receive the amount of data that the cbRegInfo parameter specifies, in bytes. May be    NULL if cbRegInfo is 0."
      },
      {
        "in_out": "",
        "type": "DWORD",
        "name": "cbRegInfo",
        "description": "The size of the buffer that the pbRegInfo parameter specifies, in bytes."
      },
      {
        "in_out": "_Out_",
        "type": "LPDWORD",
        "name": "pcbRegInfoActual",
        "description": "The size of the buffer actually required to get the information about the counter set. The meaning depends on the value that the function    returns.  Function  Return ValueMeaning of pcbRegInfoActual ERROR_SUCCESSThe number of      bytes of information about the specified counter set that the function stored in the buffer that pbRegInfo specified.  ERROR_NOT_ENOUGH_MEMORYThe      size of the buffer required to store the information about the counter set on the specified machine, in bytes. Enlarge the buffer to the required      size and call the function again.     OtherThe value is undefined and should not be used."
      }
    ],
    "min_client": "Windows 10, version 1607 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Providers implement this function to provide custom memory management for PERFLIB. PERFLIB calls this callback when it needs to allocate memory. By default, PERFLIB uses the process heap to allocate memory.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "Pointer to the allocated memory or NULL if an error occurred. ",
    "remarks": "If you used the -MemoryRoutines when calling CTRPP, you must implement this callback function. You pass the name of your callback function to CounterInitialize. Windows Vista:  The CounterInitialize function is named PerfAutoInitialize. ",
    "return_type": "LPVOID CALLBACK",
    "category": "Performance Counters",
    "name": "AllocateMemory",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "SIZE_T",
        "name": "AllocSize",
        "description": "Number of bytes to allocate."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pContext",
        "description": "Context information set in the pMemContext member of PERF_PROVIDER_CONTEXT."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Removes the provider's registration.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "",
    "return_value": "This function does not return a value. ",
    "remarks": "Your provider calls this function. The function calls the PerfStopProvider function to remove the provider's registration. The CTRPP tool generates this inline function when you specify the -o argument. The function's name includes a prefix string if you specify the -prefix argument (for example, prefixCounterCleanup. ",
    "return_type": "void",
    "category": "Performance Counters",
    "name": "CounterCleanup",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Registers the provider and initializes the counter sets.",
    "library": "",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "",
    "return_value": "Returns ERROR_SUCCESS on success; otherwise, a standard Win32 error code. ",
    "remarks": "Your provider calls this function. The function includes calls to the PerfStartProvider function and the PerfSetCounterSetInfo function. The CTRPP tool generates this inline function when you specify the -o argument. The function's name include a prefix string if you specify the -prefix argument. If you specify the -MemoryRoutines or -NotificationCallback arguments (or specify the callback attribute for the provider element), the CounterInitialize signature changes to the following:  where, ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "CounterInitialize",
    "is_callback": 0,
    "dll": "",
    "arguments": [],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Providers implement this function to provide custom memory management for PERFLIB. PERFLIB calls this callback when it needs to free memory that it allocated using AllocateMemory.",
    "library": "",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "This callback function does not return a value. ",
    "remarks": "If you used the -MemoryRoutines when calling CTRPP, you must implement this callback function. You pass the name of your callback function to CounterInitialize. Windows Vista:  The CounterInitialize function is named PerfAutoInitialize. ",
    "return_type": "void CALLBACK",
    "category": "Performance Counters",
    "name": "FreeMemory",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pBuffer",
        "description": "Memory to free."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "pContext",
        "description": "Context information set in the pMemContext member of PERF_PROVIDER_CONTEXT."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Creates an instance of the specified counter set. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "A PERF_COUNTERSET_INSTANCE structure that contains the instance of the counter set or NULL if PERFLIB could not create the instance. Cache this pointer to use in later calls instead of calling PerfQueryInstance to retrieve the pointer to the instance. This function returns NULL if an error occurred. To determine the error that occurred, call GetLastError. ",
    "remarks": "The provider determines when it creates an instance. If the counter data is more static, the provider can create an instance at initialization time. For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could create an instance for each processor on the computer at initialization time. For counters that are more dynamic, such as disk or process counters, the providers would create the new instances in response to a new USB device being added or a new process being created. When the provider calls this function, PERFLIB allocates local memory for the new instance and builds the instance block. PERFLIB deletes the memory when the provider calls the PerfDeleteInstance function. The instance contains the raw counter data. Providers use the following three functions to update the raw counter data: Typically, the provider keeps the counter data up-to-date at all times. As an alternative, the provider can implement the ControlCallback function and use the PERF_COLLECT_START request code to trigger the updates. ",
    "return_type": "PPERF_COUNTERSET_INSTANCE",
    "category": "Performance Counters",
    "name": "PerfCreateInstance",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "LPCGUID",
        "name": "CounterSetGuid",
        "description": "GUID that uniquely identifies the counter set that you want to create an instance of. This is the same GUID specified in the guid attribute of the counterSet element. Use the GUID variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the counterSet element. Windows Vista:  The GUID variable is not available."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szInstanceName",
        "description": "Null-terminated Unicode string that contains a unique name for this instance."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwInstance",
        "description": "Unique identifier for this instance of the counter set. The identifier can be a serial number that you increment for each new instance."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Decrements the value of a counter whose value is a 4-byte unsigned integer.  Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for decrementing raw counter data. To decrement the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. Use the PerfSetULongCounterValue function to initially set the counter value. Note that the counter value will underflow when the counter value decrements past zero. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfDecrementULongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "lValue",
        "description": "Value by which to decrement the counter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Decrements the value of a counter whose value is an 8-byte unsigned integer. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for decrementing raw counter data. To decrement the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. Use the PerfSetULongLongCounterValue function to initially set the counter value. Note that the counter value will underflow when the counter value decrements past zero. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfDecrementULongLongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "llValue",
        "description": "Value by which to decrement the counter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Deletes an instance of the counter set  created by the PerfCreateInstance function.   Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "If the provider process terminates abnormally, all allocated instances will be released. The provider determines when it deletes an instance. If the counter data is more static, the provider can delete an instance at cleanup time. For example, the number of processors on a computer would be considered static, so a provider that provides counter data for processors could delete an instance for each processor on the computer at cleanup time. For counters that are more dynamic, such as disk or process counters, the providers would delete the instances in response to a USB device being removed or a process being terminated. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfDeleteInstance",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "InstanceBlock",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the instance of the counter set to delete."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Increments the value of a counter whose value is a 4-byte unsigned integer.  Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for incrementing raw counter data. To increment the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. Use the PerfSetULongCounterValue function to initially set the counter value. Note that the counter value will overflow when the counter value increments past the maximum size of an 4-byte unsigned integer. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfIncrementULongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "lValue",
        "description": "Value by which to increment the counter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Increments the value of a counter whose value is an 8-byte unsigned integer. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for incrementing raw counter data. To increment the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. Use the PerfSetULongLongCounterValue function to initially set the counter value. Note that the counter value will overflow when the counter value increments past the maximum size of an 8-byte unsigned integer. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfIncrementULongLongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "llValue",
        "description": "Value by which to increment the counter."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Retrieves a pointer to the specified counter set instance. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance or NULL if the instance does not exist. This function returns NULL if an error occurred. To determine the error that occurred, call GetLastError. ",
    "remarks": "Use the same instance name and identifier that you used when calling PerfCreateInstance to retrieve a specific instance of the counter set. Providers should  cache the pointer to the instance when they create the instance instead of calling this function to retrieve the pointer. ",
    "return_type": "PPERF_COUNTERSET_INSTANCE",
    "category": "Performance Counters",
    "name": "PerfQueryInstance",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "LPCGUID",
        "name": "CounterSetGuid",
        "description": "GUID that uniquely identifies the counter set that you want to query. This is the same GUID specified in the guid attribute of the counterSet element. Use the GUID variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the counterSet element. Windows Vista:  The GUID variable is not available."
      },
      {
        "in_out": "_In_",
        "type": "LPCWSTR",
        "name": "szInstance",
        "description": "Null-terminated Unicode string that contains the name of counter set instance that you want to retrieve."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwInstance",
        "description": "Unique identifier of the counter set instance that you want to retrieve."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Specifies the layout of a particular counter set.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The CounterInitialize function calls this function; do not call this function directly. Windows Vista:  The PerfAutoInitialize function calls this function. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfSetCounterSetInfo",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INFO",
        "name": "pTemplate",
        "description": "Buffer that contains the counter set information. For details, see PERF_COUNTERSET_INFO."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "dwTemplateSize",
        "description": "Size, in bytes, of the pTemplate buffer."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Updates the value of a counter whose value is a 4-byte unsigned integer.  Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for setting raw counter data. To update the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. You can use the PerfIncrementULongCounterValue and PerfDecrementULongCounterValue functions to increment or decrement the counter value, respectively. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfSetULongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "lValue",
        "description": "New 4-byte counter value."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Updates the value of a counter whose value is an 8-byte unsigned integer. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for setting raw counter data. To update the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the raw counter data for a specific counter. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. You can use the PerfIncrementULongLongCounterValue and PerfDecrementULongLongCounterValue functions to increment or decrement the counter value, respectively. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfSetULongLongCounterValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "ULONGLONG",
        "name": "llValue",
        "description": "New 8-byte counter value."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Updates the value of a counter whose value is a pointer to the actual data. Providers use this function.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "This is a convenience function for specifying a reference to the raw counter data. To update the reference to the raw counter data yourself, use the Offset member of the PERF_COUNTER_INFO structure to access the counter value for a specific counter. The Attrib member must include the PERF_ATTRIB_BY_REFERENCE flag. The PERF_COUNTERSET_INSTANCE structure block contains one or more counter information structures. Depending on the counter type, the pointer must reference a 4-byte or 8-byte unsigned integer. When collecting the counter data, PERFLIB dereferences the pointer and returns the actual data. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfSetCounterRefValue",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "The handle of the provider. Use the handle variable that the CTRPP tool generated for you. For the name of the variable, see the symbol attribute of the provider element. Windows Vista:  The PerfStartProvider function returns the handle."
      },
      {
        "in_out": "_In_",
        "type": "PPERF_COUNTERSET_INSTANCE",
        "name": "pInstance",
        "description": "A PERF_COUNTERSET_INSTANCE structure that contains the counter set instance. The PerfCreateInstance function returns this pointer."
      },
      {
        "in_out": "_In_",
        "type": "ULONG",
        "name": "CounterId",
        "description": "Identifier that uniquely identifies the counter to update in the instance block. The identifier is defined in the id attribute of the counter element and must match the CounterId member of one of the PERF_COUNTER_INFO structures in the instance block. Use the counter ID constant that the CTRPP tool generated for you. For the name of the constant, see the symbol attribute of the counter element. Windows Vista:  The counter ID constant is not available."
      },
      {
        "in_out": "_In_",
        "type": "PVOID",
        "name": "lpAddr",
        "description": "Pointer to the actual counter data.  If NULL, the consumer receives ERROR_NO_DATA. To indicate that the counter data is accessed by reference, the counter declaration in the manifest must include a counterAttribute element whose name attribute is set to \"reference\"."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Registers the provider.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The CounterInitialize function calls this function; do not call this function directly. Windows Vista:  The PerfAutoInitialize function calls this function. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfStartProvider",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "ProviderGuid",
        "description": "GUID that uniquely identifies the provider. The providerGuid attribute of the provider element specifies the GUID."
      },
      {
        "in_out": "_In_opt_",
        "type": "PERFLIBREQUEST",
        "name": "ControlCallback",
        "description": "ControlCallback function that PERFLIB calls to notify you of consumer requests, such as a request to add or remove counters from the query. This parameter is set if the callback attribute of the counters element is \"custom\"; otherwise, NULL."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "phProvider",
        "description": "Handle to the provider. You must call PerfStopProvider to release resources associated with the handle."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Registers the provider.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The CounterInitialize function calls this function; do not call this function directly. Windows Vista:  The PerfAutoInitialize function calls this function. The CTRPP tool includes this function instead of PerfStartProvider if you use the -MemoryRoutines argument or -NotificationCallback argument when calling CTRPP, or if the callback attribute of the provider element is set to \"custom\". ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfStartProviderEx",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPGUID",
        "name": "ProviderGuid",
        "description": "GUID that uniquely identifies the provider. The providerGuid attribute of the provider element specifies the GUID."
      },
      {
        "in_out": "_In_opt_",
        "type": "PPERF_PROVIDER_CONTEXT",
        "name": "ProviderContext",
        "description": "A PERF_PROVIDER_CONTEXT structure that contains pointers to the control callback, memory management routines, and context information."
      },
      {
        "in_out": "_Out_",
        "type": "HANDLE*",
        "name": "phProvider",
        "description": "Handle to the provider. You must call PerfStopProvider to release resources associated with the handle."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Removes the provider's registration from the list of registered providers and frees all resources associated with the provider.",
    "library": "Advapi32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "Perflib.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is a  system error code. ",
    "remarks": "The CounterCleanup function calls this function; do not call this function directly. Windows Vista:  The PerfAutoCleanup function calls this function. ",
    "return_type": "ULONG",
    "category": "Performance Counters",
    "name": "PerfStopProvider",
    "is_callback": 0,
    "dll": "Advapi32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProvider",
        "description": "Handle to the provider."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Performs the cleanup required by your performance DLL. Implement and export this function if you are writing a performance DLL to provide performance data. The system calls this function whenever a consumer closes the registry key used to collect performance data.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winperf.h",
    "return_value": "This function should return ERROR_SUCCESS. ",
    "remarks": "",
    "return_type": "DWORD APIENTRY",
    "category": "Performance Counters",
    "name": "ClosePerformanceData",
    "is_callback": 1,
    "dll": "",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 4,
    "description": "Collects the performance data and returns it to the consumer. Implement and export this function if you are writing a performance DLL to provide performance data. The system calls this function whenever a consumer queries the registry for performance data.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winperf.h",
    "return_value": "Return one of the following return values only.  ",
    "remarks": "If the requested objects specified in the pQuery parameter do not correspond to any of the object indexes that your performance DLL supports, leave the pData parameter unchanged, and set the pcbData and pObjectsReturned parameters to zero. This indicates that no data is returned. If you support one or more of the queried objects, determine whether the size of the pData buffer as specified by pcbData is large enough to store the data. If not, leave pData unchanged, and set pcbData and pObjectsReturned to zero. No attempt is made to indicate the required buffer size, because this may change before the next call. Return ERROR_MORE_DATA. If your data collection is time-consuming, you should respond only to queries for specific objects and Costly queries. You should also lower the priority of the thread collecting the data, so that it does not adversely affect system performance. If the consumer is running on another computer (remotely), then the OpenPerformanceData, ClosePerformanceData, and CollectPerformanceData functions are called in the context of the Winlogon process, which handles the server side of the remote connection. This distinction is important when troubleshooting problems that occur only remotely. After your function returns successfully, the system can perform some basic tests to ensure the integrity of the data. By default, no tests are performed. If a test fails, the system generates an event log message and the data is discarded to prevent any further problems due to pointers that are not valid. The following registry value controls the test level. The following are the possible test levels for ExtCounterTestLevel.  The following tests are performed at levels 1 and 2: The following tests are performed only if test level 1 is used: For an example, see Implementing CollectPerformanceData. ",
    "return_type": "DWORD APIENTRY",
    "category": "Performance Counters",
    "name": "CollectPerformanceData",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "pQuery",
        "description": "Null-terminated string that contains the query string (for example, \"Global\" or \"238\") passed to the RegQueryValueEx function. For possible query string values, see Using the Registry Functions to Consume Counter Data."
      },
      {
        "in_out": "",
        "type": "LPVOID*",
        "name": "pData",
        "description": "Consumer-allocated buffer that will contain the performance data.  On output, set pData to one byte past the end of your data. The data must conform to the  PERF_OBJECT_TYPE structure. If this function fails, leave the pData pointer value unchanged."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "pcbData",
        "description": "On input, specifies the size, in bytes, of the pData buffer.  On output, set pcbData to the size, in bytes, of the data written to the pData buffer. The size must be 8-byte aligned.  If this function fails, set pcbData to zero."
      },
      {
        "in_out": "",
        "type": "LPDWORD",
        "name": "pObjectsReturned",
        "description": "Number of objects returned in pData.  If this function fails, set pObjectsReturned to zero."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Performs the initialization required by your performance DLL. Implement and export this function if you are writing a performance DLL to provide performance data. The system calls this function whenever a consumer first connects to the registry to collect performance data.",
    "library": "",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Winperf.h",
    "return_value": "If successful, return ERROR_SUCCESS. Otherwise, return the appropriate error code. If you do not return ERROR_SUCCESS, the system will no longer call your OpenPerformanceData function. The system also posts an error event in Application Event Log for later reference (the data section contains the return value). If the error is recoverable, you should consider returning ERROR_SUCCESS and trying the initialization process again from your CollectPerformanceData function. ",
    "remarks": "This  function should perform the initialization tasks necessary for the CollectPerformanceData function to collect performance data efficiently. Typically, this  function initializes the data structures that it returns to the consumer. In particular, it retrieves index values for its performance objects and counters from the registry and stores these indexes in the appropriate members of the  PERF_OBJECT_TYPE and  PERF_COUNTER_DEFINITION structures. To get the counter and help index values for your objects and counters, query the First Counter and First Help registry values under your application's Performance key located at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\application-name. The first counter index value maps directly to the first symbolic constant value in your symbolic constant header file. (The symbolic constant header file is the header file that you used to load your counters on the computer. For details, see Adding Counter Names and Descriptions to the Registry.) The order of the constants should match the order of the objects and counters that you return in the performance data. If you are managing devices, the pContext parameter should contain the names of the devices that you manage. The OpenPerformanceData function should call the  CreateFile function to open a handle to each device. If CreateFile fails, the OpenPerformanceData function should return the error code returned by the  GetLastError function; otherwise, it should return ERROR_SUCCESS. If the consumer is running on another computer (remotely), then the extensible counter functions are called in the context of the Winlogon process, which handles the server side of the remote connection. This distinction is important when troubleshooting problems that occur only remotely. For an example, see Implementing OpenPerformanceData. ",
    "return_type": "DWORD APIENTRY",
    "category": "Performance Counters",
    "name": "OpenPerformanceData",
    "is_callback": 1,
    "dll": "",
    "arguments": [
      {
        "in_out": "",
        "type": "LPWSTR",
        "name": "pContext",
        "description": "The pContext parameter contains one or more strings stored in the Export registry value. The strings are separated by a UNICODE_NULL and terminated by two UNICODE_NULL characters. If this entry does not exist, pContext is NULL. For details on setting the Export registry value, see Creating Other Registry Entries."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Loads onto the computer the performance objects and counters defined in the specified initialization file.",
    "library": "Loadperf.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Loadperf.h",
    "return_value": "If the function succeeds, it returns ERROR_SUCCESS. If the function fails, the return value is one of the  system error codes. ",
    "remarks": "This function provides an API to the functionality provided by the Lodctr tool. For information on Lodctr, see Adding Counter Names and Descriptions to the Registry. ",
    "return_type": "DWORD",
    "category": "Performance Counters",
    "name": "LoadPerfCounterTextStrings",
    "is_callback": 0,
    "dll": "Loadperf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "commandLine",
        "description": "Null-terminated string that consists of one or more arbitrary letters, a space, and then the name of the initialization (.ini) file. The name can include the path to the initialization file.  The function uses only the initialization file; the first argument is discarded. For example, to load an initialization file called \"myfile.ini\", the commandLine string could be \"xx myfile.ini\". The letters before the space (here \"xx\")  are discarded, and the second part, following the space, is interpreted as the initialization file specification."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bQuietModeArg",
        "description": "Set to TRUE to prevent the function from displaying the output from the  Lodctr tool; otherwise, FALSE. This parameter has meaning only if the application is run from a command prompt."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Unloads performance objects and counters from the computer for the specified application.",
    "library": "Loadperf.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "Loadperf.h",
    "return_value": "If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return value is one of the  system error codes. ",
    "remarks": "This function provides an API to the functionality provided by Unlodctr tool. For more information, see Removing Counter Names and Descriptions from the Registry. ",
    "return_type": "DWORD",
    "category": "Performance Counters",
    "name": "UnloadPerfCounterTextStrings",
    "is_callback": 0,
    "dll": "Loadperf.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "LPCTSTR",
        "name": "commandLine",
        "description": "Null-terminated string that consists of one or more arbitrary letters, a space, and then the name of the application. The name of the application must match the drivername key value found in the initialization (.ini) file used to load the text strings."
      },
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "bQuietModeArg",
        "description": "Set to TRUE to prevent the function from displaying the output from the  Unlodctr tool; otherwise, FALSE. This parameter has meaning only if the application is run from a command prompt."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]