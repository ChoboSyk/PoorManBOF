[
  {
    "n_arguments": 2,
    "description": "Determines whether the specified process is being debugged.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get  extended error information, call GetLastError. ",
    "remarks": "The \"remote\" in CheckRemoteDebuggerPresent does not imply that the debugger  necessarily resides on a different computer; instead, it indicates that the debugger resides in a separate and parallel process. Use the IsDebuggerPresent function to detect whether the calling process is running under the debugger. To compile an application that uses this function, define the _WIN32_WINNT macro as 0x0501 or later. For more information, see Using the Windows Headers. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "CheckRemoteDebuggerPresent",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process."
      },
      {
        "in_out": "_Inout_",
        "type": "PBOOL",
        "name": "pbDebuggerPresent",
        "description": "A pointer to a variable that the function sets to TRUE if the specified process is being debugged, or FALSE otherwise."
      }
    ],
    "min_client": "Windows Vista, Windows XP with SP1 [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Enables a debugger to continue a thread that previously reported a debugging event.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Only the thread that created dwProcessId with the  CreateProcess function can call  ContinueDebugEvent. After the  ContinueDebugEvent function succeeds, the specified thread continues. Depending on the debugging event previously reported by the thread, different actions occur. If the continued thread previously reported an EXIT_THREAD_DEBUG_EVENT debugging event,  ContinueDebugEvent closes the handle the debugger has to the thread. If the continued thread previously reported an EXIT_PROCESS_DEBUG_EVENT debugging event,  ContinueDebugEvent closes the handles the debugger has to the process and to the thread. For an example, see  Writing the Debugger's Main Loop. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "ContinueDebugEvent",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "The process identifier  of the process to continue."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwThreadId",
        "description": "The thread identifier of the thread to continue. The combination of process identifier and thread identifier must identify a thread that has previously reported a debugging event."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwContinueStatus",
        "description": "The options to continue the thread that reported the debugging event.      ValueMeaning  DBG_CONTINUE 0x00010002L   If the thread specified by the dwThreadId parameter previously reported an EXCEPTION_DEBUG_EVENT debugging event, the function stops all exception processing and continues the thread and the exception is marked as handled. For any other debugging event, this flag simply continues the thread.   DBG_EXCEPTION_NOT_HANDLED 0x80010001L   If the thread specified by dwThreadId previously reported an EXCEPTION_DEBUG_EVENT debugging event, the function continues exception processing. If this is a first-chance exception event, the search and dispatch logic of the structured exception handler is used; otherwise, the process is terminated. For any other debugging event, this flag simply continues the thread.   DBG_REPLY_LATER 0x40010001L   Supported in Windows 10, version 1507 or above, this flag causes dwThreadId to replay the existing breaking event after the target continues. By calling the SuspendThread API against dwThreadId, a debugger can resume other threads in the process and later return to the breaking."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Enables a debugger to attach to an active process and debug it.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call         GetLastError. ",
    "remarks": "To stop debugging the process, you must exit the process or call the      DebugActiveProcessStop function. Exiting the      debugger also exits the process unless you use the      DebugSetProcessKillOnExit function. The debugger must have appropriate access to the target process, and it must be able to open the process for      PROCESS_ALL_ACCESS.      DebugActiveProcess can fail if the target process      is created with a security descriptor that grants the debugger anything less than full access. If the debugging      process has the SE_DEBUG_NAME privilege granted and enabled, it can debug any      process. After the system checks the process identifier and determines that a valid debugging attachment is being made,      the function returns TRUE. Then the debugger is expected to wait for debugging events by      using the WaitForDebugEvent function. The system      suspends all threads in the process, and sends the debugger events that represents the current state of the      process. The system sends the debugger a single CREATE_PROCESS_DEBUG_EVENT debugging event      that represents the process specified by the dwProcessId parameter. The      lpStartAddress member of the      CREATE_PROCESS_DEBUG_INFO structure is      NULL. For each thread that is currently part of the process, the system sends a      CREATE_THREAD_DEBUG_EVENT debugging event. The lpStartAddress      member of the CREATE_THREAD_DEBUG_INFO      structure is NULL. For each dynamic-link library (DLL) that is currently loaded into the address space of the target process, the      system sends a LOAD_DLL_DEBUG_EVENT debugging event. The system arranges for the first      thread in the process to execute a breakpoint instruction after it resumes. Continuing this thread causes it to      return to doing the same thing as before the debugger is attached. After all of this is done, the system resumes all threads in the process. When the first thread in the process      resumes, it executes a breakpoint instruction that causes an EXCEPTION_DEBUG_EVENT      debugging event to be sent to the debugger. All future debugging events are sent to the debugger by using the      normal mechanism and rules. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "DebugActiveProcess",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "The identifier for the process to be debugged. The debugger is granted debugging access to the process as        if it created the process with the DEBUG_ONLY_THIS_PROCESS flag. For more information,        see the Remarks section of this topic."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Stops the debugger from debugging the specified process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "DebugActiveProcessStop",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwProcessId",
        "description": "The identifier of the process to stop debugging."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Causes a breakpoint exception to occur in the current process. This allows the calling thread to signal the debugger to handle the exception.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "If the process is not being debugged, the function uses the search logic of a standard exception handler. In most cases, this causes the calling process to terminate because of an unhandled breakpoint exception. For an example, see  Using an Exception Handler. ",
    "return_type": "void",
    "category": "Debugging",
    "name": "DebugBreak",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Causes a breakpoint exception to occur in the specified process. This allows the calling thread to signal the debugger to handle the exception.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "If the process is not being debugged, the function uses the search logic of a standard exception handler. In most cases, this causes the process to terminate because of an unhandled breakpoint exception. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "DebugBreakProcess",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "Process",
        "description": "A handle to the process."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Sets the action to be performed when the calling thread exits.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The calling thread must have established at least one debugging connection using the CreateProcess or DebugActiveProcess function before calling this function. DebugSetProcessKillOnExit affects all current and future debuggees connected to the calling thread. A thread can call this function multiple times to change the action as needed. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "DebugSetProcessKillOnExit",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "BOOL",
        "name": "KillOnExit",
        "description": "If this parameter is TRUE, the thread terminates all attached processes on exit (note that this is the default). Otherwise, the thread detaches from all processes being debugged on exit."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 1,
    "description": "Transfers execution control to the debugger. The behavior of the debugger thereafter is specific to the type of debugger used.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "An application should only use  FatalExit for debugging purposes. It should not call the function in a retail version of the application because doing so will terminate the application. ",
    "return_type": "void",
    "category": "Debugging",
    "name": "FatalExit",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "int",
        "name": "ExitCode",
        "description": "The error code associated with the exit."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Flushes the instruction cache for the specified process.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Applications should call  FlushInstructionCache if they generate or modify code in memory. The CPU cannot detect the change, and may execute the old code it cached. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "FlushInstructionCache",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to a process whose instruction cache is to be flushed."
      },
      {
        "in_out": "_In_",
        "type": "LPCVOID",
        "name": "lpBaseAddress",
        "description": "A pointer to the base of the region to be flushed. This parameter can be NULL."
      },
      {
        "in_out": "_In_",
        "type": "SIZE_T",
        "name": "dwSize",
        "description": "The size of the region to be flushed if the lpBaseAddress parameter is not NULL, in bytes."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the context of the specified thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "This function is used to retrieve the thread context of the specified thread. The function retrieves a      selective context based on the value of the ContextFlags member of the      context structure. The thread identified by the hThread parameter is typically being      debugged, but the function can also operate when the thread is not being debugged. You cannot get a valid context for a running thread. Use the      SuspendThread function to suspend the thread before      calling GetThreadContext. If you call GetThreadContext for the current      thread, the function returns successfully; however, the context returned is not valid. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "GetThreadContext",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread whose context is to be retrieved. The handle must have        THREAD_GET_CONTEXT access to the thread. For more information, see        Thread Security and Access Rights.        WOW64:  The handle must also have THREAD_QUERY_INFORMATION access."
      },
      {
        "in_out": "_Inout_",
        "type": "LPCONTEXT",
        "name": "lpContext",
        "description": "A pointer to a CONTEXT structure that receives the        appropriate context of the specified thread. The value of the ContextFlags member of        this structure specifies which portions of a thread's context are retrieved. The        CONTEXT structure is highly processor specific. Refer to        the WinNT.h header file for processor-specific definitions of this structures and any alignment        requirements."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a descriptor table entry for the specified selector and thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. In that case, the structure pointed to by the lpSelectorEntry parameter receives a copy of the specified descriptor table entry. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "GetThreadSelectorEntry is only functional on x86-based systems. For systems that are not x86-based, the function returns FALSE. Debuggers use this function to convert segment-relative addresses to linear virtual addresses. The  ReadProcessMemory and  WriteProcessMemory functions use linear virtual addresses. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "GetThreadSelectorEntry",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread containing the specified selector. The handle must have THREAD_QUERY_INFORMATION access. For more information, see  Thread Security and Access Rights."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSelector",
        "description": "The global or local selector value to look up in the thread's descriptor tables."
      },
      {
        "in_out": "_Out_",
        "type": "LPLDT_ENTRY",
        "name": "lpSelectorEntry",
        "description": "A pointer to an  LDT_ENTRY structure that receives a copy of the descriptor table entry if the specified selector has an entry in the specified thread's descriptor table. This information can be used to convert a segment-relative address to a linear virtual address."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 0,
    "description": "Determines whether the calling process is being debugged by a user-mode debugger.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the current process is running in the context of a debugger, the return value is nonzero. If the current process is not running in the context of a debugger, the return value is zero. ",
    "remarks": "This function allows an application to determine whether or not it is being debugged, so that it can modify its behavior. For example, an application could provide additional information using the  OutputDebugString function if it is being debugged. To determine whether a remote process is being debugged, use the CheckRemoteDebuggerPresent function. To compile an application that uses this function, define the _WIN32_WINNT macro as 0x0400 or later. For more information, see  Using the Windows Headers. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "IsDebuggerPresent",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 1,
    "description": "Sends a string to the debugger for display.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps | Windows Store apps]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "This function does not return a value. ",
    "remarks": "If the application has no debugger, the system debugger displays the string if the filter mask allows it. (Note that this function calls the DbgPrint function to display the string. For details on how the filter mask controls what the system debugger displays, see the DbgPrint function in the Windows Driver Kit (WDK) on MSDN.) If the application has no debugger and the system debugger is not active,  OutputDebugString does nothing. Prior to Windows Vista:  The system debugger does not filter content. OutputDebugStringW converts the specified string based on the current system locale information and passes it to OutputDebugStringA to be displayed.  As a result, some Unicode characters may not be displayed correctly. Applications should send very minimal debug output and provide a way for the user to enable or disable its use. To provide more detailed tracing, see Event Tracing. Visual Studio has changed how it handles the display of these strings throughout its revision history.  Refer to the Visual Studio documentation for details of how your version deals with this. ",
    "return_type": "void",
    "category": "Debugging",
    "name": "OutputDebugString",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_opt_",
        "type": "LPCTSTR",
        "name": "lpOutputString",
        "description": "The null-terminated string to be displayed."
      }
    ],
    "min_client": "Windows XP [desktop apps | Windows Store apps]"
  },
  {
    "n_arguments": 5,
    "description": "Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call  GetLastError. The function fails if the requested read operation crosses into an area of the process that is inaccessible. ",
    "remarks": "ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "ReadProcessMemory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process."
      },
      {
        "in_out": "_In_",
        "type": "LPCVOID",
        "name": "lpBaseAddress",
        "description": "A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails."
      },
      {
        "in_out": "_Out_",
        "type": "LPVOID",
        "name": "lpBuffer",
        "description": "A pointer to a buffer that receives the contents from the address space of the specified process."
      },
      {
        "in_out": "_In_",
        "type": "SIZE_T",
        "name": "nSize",
        "description": "The number of bytes to be read from the specified process."
      },
      {
        "in_out": "_Out_",
        "type": "SIZE_T*",
        "name": "lpNumberOfBytesRead",
        "description": "A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is NULL, the parameter is ignored."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the context for the specified thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the context was set, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "The function sets the thread context based on the value of the ContextFlags member      of the context structure. The thread identified by the hThread parameter is typically      being debugged, but the function can also operate even when the thread is not being debugged. Do not try to set the context for a running thread; the results are unpredictable. Use the      SuspendThread function to suspend the thread before      calling SetThreadContext. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "SetThreadContext",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread whose context is to be set. The handle must have the        THREAD_SET_CONTEXT access right to the thread. For more information, see        Thread Security and Access Rights."
      },
      {
        "in_out": "_In_",
        "type": "const CONTEXT*",
        "name": "lpContext",
        "description": "A pointer to a CONTEXT structure that contains the        context to be set in the specified thread. The value of the ContextFlags member of        this structure specifies which portions of a thread's context to set. Some values in the        CONTEXT structure that cannot be specified are silently        set to the correct value. This includes bits in the CPU status register that specify the privileged processor        mode, global enabling bits in the debugging register, and other states that must be controlled by the operating        system."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Waits for a debugging event to occur in a process being debugged.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "Only the thread that created the process being debugged can call  WaitForDebugEvent. When a CREATE_PROCESS_DEBUG_EVENT occurs, the debugger application receives a handle to the image file of the process being debugged, a handle to the process being debugged, and a handle to the initial thread of the process being debugged in the  DEBUG_EVENT structure. The members these handles are returned in are u.CreateProcessInfo.hFile (image file), u.CreateProcessInfo.hProcess (process), and u.CreateProcessInfo.hThread (initial thread). If the system previously reported an EXIT_PROCESS_DEBUG_EVENT debugging event, the system closes the handles to the process and thread when the debugger calls the  ContinueDebugEvent function. The debugger should close the handle to the image file by calling the  CloseHandle function. Similarly, when a CREATE_THREAD_DEBUG_EVENT occurs, the debugger application receives a handle to the thread whose creation caused the debugging event in the u.CreateThread.hThread member of the  DEBUG_EVENT structure. If the system previously reported an EXIT_THREAD_DEBUG_EVENT debugging event, the system closes the handles to the thread when the debugger calls the  ContinueDebugEvent function. When a LOAD_DLL_DEBUG_EVENT occurs, the debugger application receives a handle to the loaded DLL in the u.LoadDll.hFile member of the  DEBUG_EVENT structure. This handle should be closed by the debugger application by calling the  CloseHandle function. For an example, see  Writing the Debugger's Main Loop. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "WaitForDebugEvent",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_Out_",
        "type": "LPDEBUG_EVENT",
        "name": "lpDebugEvent",
        "description": "A pointer to a  DEBUG_EVENT structure that receives information about the debugging event."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwMilliseconds",
        "description": "The number of milliseconds to wait for a debugging event. If this parameter is zero, the function tests for a debugging event and returns immediately. If the parameter is INFINITE, the function does not return until a debugging event has occurred."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Retrieves the context of the specified WOW64 thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "This function is used to retrieve the thread context of the specified thread. The function retrieves a      selective context based on the value of the ContextFlags member of the context      structure. The thread identified by the hThread parameter is typically being debugged,      but the function can also operate when the thread is not being debugged. You cannot get a valid context for a running thread. Use the      Wow64SuspendThread function to suspend the thread      before calling Wow64GetThreadContext. If you call Wow64GetThreadContext for the      current thread, the function returns successfully; however, the context returned is not valid. This function is intended for 64-bit applications. It is not supported on 32-bit Windows; such calls fail and      set the last error code to ERROR_INVALID_FUNCTION. A 32-bit application can call this      function on a WOW64 thread; the result is the same as calling the      GetThreadContext function. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "Wow64GetThreadContext",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread whose context is to be retrieved. The handle must have        THREAD_GET_CONTEXT access to the thread. For more information, see        Thread Security and Access Rights."
      },
      {
        "in_out": "_Inout_",
        "type": "PWOW64_CONTEXT",
        "name": "lpContext",
        "description": "A WOW64_CONTEXT structure. The caller must        initialize the ContextFlags member of this structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 3,
    "description": "Retrieves a descriptor table entry for the specified selector and WOW64 thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2008 R2 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. In that case, the structure pointed to by the lpSelectorEntry parameter receives a copy of the specified descriptor table entry. If the function fails, the return value is zero. To get extended error information, call  GetLastError. ",
    "remarks": "The Wow64GetThreadSelectorEntry function is functional only on 64-bit systems and can be called only by 64-bit processes. If this function is called by a 32-bit process, the function fails with ERROR_NOT_SUPPORTED. A 32-bit process should use the GetThreadSelectorEntry function instead. Debuggers use this function to convert segment-relative addresses to linear virtual addresses. The  ReadProcessMemory and  WriteProcessMemory functions use linear virtual addresses. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "Wow64GetThreadSelectorEntry",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread containing the         specified selector.  The handle must have been created with         THREAD_QUERY_INFORMATION access to the thread. For more information, see  Thread Security and Access Rights."
      },
      {
        "in_out": "_In_",
        "type": "DWORD",
        "name": "dwSelector",
        "description": "The global or local selector value to look up in the thread's descriptor tables."
      },
      {
        "in_out": "_Out_",
        "type": "PWOW64_LDT_ENTRY",
        "name": "lpSelectorEntry",
        "description": "A pointer to a  WOW64_LDT_ENTRY structure that receives a copy of the descriptor table entry if the specified selector has an entry in the specified thread's descriptor table. This information can be used to convert a segment-relative address to a linear virtual address."
      }
    ],
    "min_client": "Windows 7 [desktop apps only]"
  },
  {
    "n_arguments": 2,
    "description": "Sets the context of the specified WOW64 thread.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2008 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call         GetLastError. ",
    "remarks": "This function allows the selective context to be set based on the value of the      ContextFlags member of the context structure. The thread handle identified by the      hThread parameter is typically being debugged, but the function can also operate even      when it is not being debugged. This function is intended for 64-bit applications. It is not supported on 32-bit Windows; such calls fail and      set the last error code to ERROR_INVALID_FUNCTION. A 32-bit application can call this      function on a WOW64 thread; the result is the same as calling the      SetThreadContext function. Do not try to set the context for a running thread; the results are unpredictable. Use the      Wow64SuspendThread function to suspend the thread      before calling Wow64SetThreadContext. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "Wow64SetThreadContext",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hThread",
        "description": "A handle to the thread whose context is to be set."
      },
      {
        "in_out": "_In_",
        "type": "const WOW64_CONTEXT*",
        "name": "lpContext",
        "description": "A WOW64_CONTEXT structure. The caller must        initialize the ContextFlags member of this structure."
      }
    ],
    "min_client": "Windows Vista [desktop apps only]"
  },
  {
    "n_arguments": 5,
    "description": "Writes data to an area of memory in a specified process. The entire area to be written to must be accessible or the operation fails.",
    "library": "Kernel32.lib",
    "min_server": "Windows Server 2003 [desktop apps only]",
    "header": "WinBase.h (include Windows.h)",
    "return_value": "If the function succeeds, the return value is nonzero. If the function fails, the return value is 0 (zero). To get extended error information, call  GetLastError. The function fails if the requested write operation crosses into an area of the process that is inaccessible. ",
    "remarks": "WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is  being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. ",
    "return_type": "BOOL",
    "category": "Debugging",
    "name": "WriteProcessMemory",
    "is_callback": 0,
    "dll": "Kernel32.dll",
    "arguments": [
      {
        "in_out": "_In_",
        "type": "HANDLE",
        "name": "hProcess",
        "description": "A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process."
      },
      {
        "in_out": "_In_",
        "type": "LPVOID",
        "name": "lpBaseAddress",
        "description": "A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails."
      },
      {
        "in_out": "_In_",
        "type": "LPCVOID",
        "name": "lpBuffer",
        "description": "A pointer to the buffer that contains data to be written in  the address space of the specified process."
      },
      {
        "in_out": "_In_",
        "type": "SIZE_T",
        "name": "nSize",
        "description": "The number of bytes to be written to the specified process."
      },
      {
        "in_out": "_Out_",
        "type": "SIZE_T*",
        "name": "lpNumberOfBytesWritten",
        "description": "A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is NULL, the parameter is ignored."
      }
    ],
    "min_client": "Windows XP [desktop apps only]"
  }
]